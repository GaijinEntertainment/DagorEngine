<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.7" xml:lang="en-US">
  <compounddef id="classInterval" kind="class" language="C++" prot="public">
    <compoundname>Interval</compoundname>
    <includes refid="intervals_8h" local="no">intervals.h</includes>
      <sectiondef kind="public-type">
      <memberdef kind="enum" id="classInterval_1a53c464380c323171203ac354d1e5d010" prot="public" static="no" strong="no">
        <type></type>
        <name>BooleanExpr</name>
        <qualifiedname>Interval::BooleanExpr</qualifiedname>
        <enumvalue id="classInterval_1a53c464380c323171203ac354d1e5d010aad8bdddaa11d62c8b7b24431bfc1a202" prot="public">
          <name>EXPR_NOTINIT</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classInterval_1a53c464380c323171203ac354d1e5d010a253bb907801ba70fe66248b5dc8252d2" prot="public">
          <name>EXPR_EQ</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classInterval_1a53c464380c323171203ac354d1e5d010a32f9d4bcd17a2e04c7f5e52db06fc571" prot="public">
          <name>EXPR_GREATER</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classInterval_1a53c464380c323171203ac354d1e5d010a1a7ebae6e5f4c3922b23dbaee7893305" prot="public">
          <name>EXPR_GREATER_EQ</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classInterval_1a53c464380c323171203ac354d1e5d010a1679d981116dfcb2811aef8a4eb98f7f" prot="public">
          <name>EXPR_SMALLER</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classInterval_1a53c464380c323171203ac354d1e5d010add09b88e878a21790b0de3b85ac485e9" prot="public">
          <name>EXPR_SMALLER_EQ</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classInterval_1a53c464380c323171203ac354d1e5d010a2510fff4d417ea82c5cd124e3370c848" prot="public">
          <name>EXPR_NOT_EQ</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="intervals.h" line="56" column="3" bodyfile="intervals.h" bodystart="57" bodyend="65"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classInterval_1ae6a2af82d6b9f3cc5ed10159b1db3d9a" prot="private" static="no" mutable="no">
        <type><ref refid="classNameId" kindref="compound">NameId</ref>&lt; <ref refid="structIntervalValue_1_1Adapter" kindref="compound">IntervalValue::Adapter</ref> &gt;</type>
        <definition>NameId&lt;IntervalValue::Adapter&gt; Interval::nameId</definition>
        <argsstring></argsstring>
        <name>nameId</name>
        <qualifiedname>Interval::nameId</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="intervals.h" line="135" column="10" bodyfile="intervals.h" bodystart="135" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classInterval_1adcb48da00dc6f8017bb082fa278856e2" prot="private" static="no" mutable="no">
        <type><ref refid="namespaceShaderVariant_1a4cc81bf315e35fb912c2033de934e6cf" kindref="member">ShaderVariant::VarType</ref></type>
        <definition>ShaderVariant::VarType Interval::intervalType</definition>
        <argsstring></argsstring>
        <name>intervalType</name>
        <qualifiedname>Interval::intervalType</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="intervals.h" line="136" column="26" bodyfile="intervals.h" bodystart="136" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classInterval_1a8c006b538a749ff075c028b60b9886b1" prot="private" static="no" mutable="no">
        <type><ref refid="classSerializableTab" kindref="compound">SerializableTab</ref>&lt; <ref refid="classIntervalValue" kindref="compound">IntervalValue</ref> &gt;</type>
        <definition>SerializableTab&lt;IntervalValue&gt; Interval::valueList</definition>
        <argsstring></argsstring>
        <name>valueList</name>
        <qualifiedname>Interval::valueList</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="intervals.h" line="137" column="19" bodyfile="intervals.h" bodystart="137" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classInterval_1ab6443e5ab413465a8039e9db80681ad5" prot="private" static="no" mutable="no">
        <type>bindump::string</type>
        <definition>bindump::string Interval::fileName</definition>
        <argsstring></argsstring>
        <name>fileName</name>
        <qualifiedname>Interval::fileName</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="intervals.h" line="138" column="19" bodyfile="intervals.h" bodystart="138" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classInterval_1a06615c33bc0830d42d7de7ff811b8c67" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>Interval::Interval</definition>
        <argsstring>(int name_id, ShaderVariant::VarType interval_type, eastl::string file_name=&quot;&quot;)</argsstring>
        <name>Interval</name>
        <qualifiedname>Interval::Interval</qualifiedname>
        <param>
          <type>int</type>
          <declname>name_id</declname>
        </param>
        <param>
          <type><ref refid="namespaceShaderVariant_1a4cc81bf315e35fb912c2033de934e6cf" kindref="member">ShaderVariant::VarType</ref></type>
          <declname>interval_type</declname>
        </param>
        <param>
          <type>eastl::string</type>
          <declname>file_name</declname>
          <defval>&quot;&quot;</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="intervals.h" line="67" column="3" bodyfile="intervals.h" bodystart="67" bodyend="71"/>
      </memberdef>
      <memberdef kind="function" id="classInterval_1ae48b9a9e9f672f81977627b609e32429" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>Interval::Interval</definition>
        <argsstring>()</argsstring>
        <name>Interval</name>
        <qualifiedname>Interval::Interval</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="intervals.h" line="72" column="3" bodyfile="intervals.h" bodystart="72" bodyend="72"/>
      </memberdef>
      <memberdef kind="function" id="classInterval_1a923e1717a3dedfe1ba90f81fcb26d5c5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>Interval::~Interval</definition>
        <argsstring>()</argsstring>
        <name>~Interval</name>
        <qualifiedname>Interval::~Interval</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="intervals.h" line="73" column="3" bodyfile="intervals.h" bodystart="73" bodyend="73"/>
      </memberdef>
      <memberdef kind="function" id="classInterval_1a5114ae6276004308118113609da195ab" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Interval::clear</definition>
        <argsstring>()</argsstring>
        <name>clear</name>
        <qualifiedname>Interval::clear</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="intervals.h" line="75" column="15" bodyfile="intervals.h" bodystart="75" bodyend="75"/>
      </memberdef>
      <memberdef kind="function" id="classInterval_1aaf7ee3fa0b3dff04f86021b56fef19a6" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="namespaceShaderVariant_1a30542012bafd43dafa933051e8c289c3" kindref="member">ShaderVariant::ValueRange</ref></type>
        <definition>const ShaderVariant::ValueRange Interval::getIndexRange</definition>
        <argsstring>() const</argsstring>
        <name>getIndexRange</name>
        <qualifiedname>Interval::getIndexRange</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="intervals.h" line="78" column="42" bodyfile="intervals.h" bodystart="78" bodyend="78"/>
      </memberdef>
      <memberdef kind="function" id="classInterval_1a748b0a4c7b26f10ca5edfafd46cdb5a5" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>int Interval::getNameId</definition>
        <argsstring>() const</argsstring>
        <name>getNameId</name>
        <qualifiedname>Interval::getNameId</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="intervals.h" line="81" column="14" bodyfile="intervals.h" bodystart="81" bodyend="81"/>
      </memberdef>
      <memberdef kind="function" id="classInterval_1a6cdad1bb5b4d467af09f6b774ac427d6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Interval::addValue</definition>
        <argsstring>(int name_id, const real smaller_than)</argsstring>
        <name>addValue</name>
        <qualifiedname>Interval::addValue</qualifiedname>
        <param>
          <type>int</type>
          <declname>name_id</declname>
        </param>
        <param>
          <type>const real</type>
          <declname>smaller_than</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="intervals.h" line="84" column="8" bodyfile="intervals.cpp" bodystart="21" bodyend="38"/>
      </memberdef>
      <memberdef kind="function" id="classInterval_1adca020867e2232132d6a2bfe24c54c01" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool Interval::valueExists</definition>
        <argsstring>(int value_name_id) const</argsstring>
        <name>valueExists</name>
        <qualifiedname>Interval::valueExists</qualifiedname>
        <param>
          <type>int</type>
          <declname>value_name_id</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="intervals.h" line="87" column="8" bodyfile="intervals.h" bodystart="87" bodyend="87"/>
      </memberdef>
      <memberdef kind="function" id="classInterval_1a5956e30eabfc1cecec92f5d20f8df50e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classIntervalValue" kindref="compound">IntervalValue</ref> *</type>
        <definition>IntervalValue * Interval::getValueByNameId</definition>
        <argsstring>(int value_name_id)</argsstring>
        <name>getValueByNameId</name>
        <qualifiedname>Interval::getValueByNameId</qualifiedname>
        <param>
          <type>int</type>
          <declname>value_name_id</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="intervals.h" line="89" column="17" bodyfile="intervals.cpp" bodystart="40" bodyend="46"/>
      </memberdef>
      <memberdef kind="function" id="classInterval_1a65fa9045d2202af15b6f6a4830aa49ea" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="classIntervalValue" kindref="compound">IntervalValue</ref> *</type>
        <definition>const IntervalValue * Interval::getValueByNameId</definition>
        <argsstring>(int value_name_id) const</argsstring>
        <name>getValueByNameId</name>
        <qualifiedname>Interval::getValueByNameId</qualifiedname>
        <param>
          <type>int</type>
          <declname>value_name_id</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="intervals.h" line="90" column="23" bodyfile="intervals.h" bodystart="90" bodyend="93"/>
      </memberdef>
      <memberdef kind="function" id="classInterval_1a4b9c166bf48189838a81fdbb16e0d168" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>int Interval::getValueCount</definition>
        <argsstring>() const</argsstring>
        <name>getValueCount</name>
        <qualifiedname>Interval::getValueCount</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="intervals.h" line="96" column="7" bodyfile="intervals.h" bodystart="96" bodyend="96"/>
      </memberdef>
      <memberdef kind="function" id="classInterval_1a220f0ead30e4a5cce8fcdef2e7cc3911" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="classIntervalValue" kindref="compound">IntervalValue</ref> &amp;</type>
        <definition>const IntervalValue &amp; Interval::getValue</definition>
        <argsstring>(int index) const</argsstring>
        <name>getValue</name>
        <qualifiedname>Interval::getValue</qualifiedname>
        <param>
          <type>int</type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="intervals.h" line="98" column="23" bodyfile="intervals.h" bodystart="98" bodyend="98"/>
      </memberdef>
      <memberdef kind="function" id="classInterval_1ab9da4b64321a7e5e26613e4d7e65a5a7" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="intervals_8h_1aeab0906da24b432454f0cbb287972c24" kindref="member">RealValueRange</ref></type>
        <definition>RealValueRange Interval::getValueRange</definition>
        <argsstring>(int index) const</argsstring>
        <name>getValueRange</name>
        <qualifiedname>Interval::getValueRange</qualifiedname>
        <param>
          <type>int</type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="intervals.h" line="101" column="18" bodyfile="intervals.h" bodystart="101" bodyend="101"/>
      </memberdef>
      <memberdef kind="function" id="classInterval_1a4cd43145fa32ed203df1fb0e521c9b25" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>int Interval::normalizeValue</definition>
        <argsstring>(real value) const</argsstring>
        <name>normalizeValue</name>
        <qualifiedname>Interval::normalizeValue</qualifiedname>
        <param>
          <type>real</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="intervals.h" line="104" column="14" bodyfile="intervals.h" bodystart="104" bodyend="111"/>
      </memberdef>
      <memberdef kind="function" id="classInterval_1a8b941226253191579cf19e6166017b49" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Interval::checkExpression</definition>
        <argsstring>(ShaderVariant::ValueType left_op_normalized, const Interval::BooleanExpr expr, const char *right_op, String &amp;error_msg, shc::TargetContext &amp;ctx) const</argsstring>
        <name>checkExpression</name>
        <qualifiedname>Interval::checkExpression</qualifiedname>
        <param>
          <type><ref refid="namespaceShaderVariant_1ac16065f8f13b47639769efb7fbeb0a24" kindref="member">ShaderVariant::ValueType</ref></type>
          <declname>left_op_normalized</declname>
        </param>
        <param>
          <type>const <ref refid="classInterval_1a53c464380c323171203ac354d1e5d010" kindref="member">Interval::BooleanExpr</ref></type>
          <declname>expr</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>right_op</declname>
        </param>
        <param>
          <type>String &amp;</type>
          <declname>error_msg</declname>
        </param>
        <param>
          <type><ref refid="classshc_1_1TargetContext" kindref="compound">shc::TargetContext</ref> &amp;</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="intervals.h" line="114" column="8" bodyfile="intervals.cpp" bodystart="48" bodyend="91"/>
      </memberdef>
      <memberdef kind="function" id="classInterval_1abc0ddd748c8e5f1f09db46d965f399b0" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool Interval::operator==</definition>
        <argsstring>(const Interval &amp;other) const</argsstring>
        <name>operator==</name>
        <qualifiedname>Interval::operator==</qualifiedname>
        <param>
          <type>const <ref refid="classInterval" kindref="compound">Interval</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="intervals.h" line="118" column="15" bodyfile="intervals.h" bodystart="118" bodyend="124"/>
      </memberdef>
      <memberdef kind="function" id="classInterval_1a21d812383fe725bbcea4da5759c1be77" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool Interval::operator!=</definition>
        <argsstring>(const Interval &amp;other) const</argsstring>
        <name>operator!=</name>
        <qualifiedname>Interval::operator!=</qualifiedname>
        <param>
          <type>const <ref refid="classInterval" kindref="compound">Interval</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="intervals.h" line="127" column="15" bodyfile="intervals.h" bodystart="127" bodyend="127"/>
      </memberdef>
      <memberdef kind="function" id="classInterval_1a0a5a4dbb7d0228e7e891a0fad7e8b4ef" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Interval::setVarType</definition>
        <argsstring>(ShaderVariant::VarType v)</argsstring>
        <name>setVarType</name>
        <qualifiedname>Interval::setVarType</qualifiedname>
        <param>
          <type><ref refid="namespaceShaderVariant_1a4cc81bf315e35fb912c2033de934e6cf" kindref="member">ShaderVariant::VarType</ref></type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="intervals.h" line="130" column="15" bodyfile="intervals.h" bodystart="130" bodyend="130"/>
      </memberdef>
      <memberdef kind="function" id="classInterval_1a3b99beb415b1139228913988b01b8f98" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespaceShaderVariant_1a4cc81bf315e35fb912c2033de934e6cf" kindref="member">ShaderVariant::VarType</ref></type>
        <definition>ShaderVariant::VarType Interval::getVarType</definition>
        <argsstring>() const</argsstring>
        <name>getVarType</name>
        <qualifiedname>Interval::getVarType</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="intervals.h" line="131" column="33" bodyfile="intervals.h" bodystart="131" bodyend="131"/>
      </memberdef>
      <memberdef kind="function" id="classInterval_1a063becea3dcf3b68f53e18daf43ddc1d" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const eastl::string &amp;</type>
        <definition>const eastl::string &amp; Interval::getFileName</definition>
        <argsstring>() const</argsstring>
        <name>getFileName</name>
        <qualifiedname>Interval::getFileName</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="intervals.h" line="132" column="23" bodyfile="intervals.h" bodystart="132" bodyend="132"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="intervals.h" line="50" column="1" bodyfile="intervals.h" bodystart="51" bodyend="139"/>
    <listofallmembers>
      <member refid="classInterval_1a6cdad1bb5b4d467af09f6b774ac427d6" prot="public" virt="non-virtual"><scope>Interval</scope><name>addValue</name></member>
      <member refid="classInterval_1a53c464380c323171203ac354d1e5d010" prot="public" virt="non-virtual"><scope>Interval</scope><name>BooleanExpr</name></member>
      <member refid="classInterval_1a8b941226253191579cf19e6166017b49" prot="public" virt="non-virtual"><scope>Interval</scope><name>checkExpression</name></member>
      <member refid="classInterval_1a5114ae6276004308118113609da195ab" prot="public" virt="non-virtual"><scope>Interval</scope><name>clear</name></member>
      <member refid="classInterval_1a53c464380c323171203ac354d1e5d010a253bb907801ba70fe66248b5dc8252d2" prot="public" virt="non-virtual"><scope>Interval</scope><name>EXPR_EQ</name></member>
      <member refid="classInterval_1a53c464380c323171203ac354d1e5d010a32f9d4bcd17a2e04c7f5e52db06fc571" prot="public" virt="non-virtual"><scope>Interval</scope><name>EXPR_GREATER</name></member>
      <member refid="classInterval_1a53c464380c323171203ac354d1e5d010a1a7ebae6e5f4c3922b23dbaee7893305" prot="public" virt="non-virtual"><scope>Interval</scope><name>EXPR_GREATER_EQ</name></member>
      <member refid="classInterval_1a53c464380c323171203ac354d1e5d010a2510fff4d417ea82c5cd124e3370c848" prot="public" virt="non-virtual"><scope>Interval</scope><name>EXPR_NOT_EQ</name></member>
      <member refid="classInterval_1a53c464380c323171203ac354d1e5d010aad8bdddaa11d62c8b7b24431bfc1a202" prot="public" virt="non-virtual"><scope>Interval</scope><name>EXPR_NOTINIT</name></member>
      <member refid="classInterval_1a53c464380c323171203ac354d1e5d010a1679d981116dfcb2811aef8a4eb98f7f" prot="public" virt="non-virtual"><scope>Interval</scope><name>EXPR_SMALLER</name></member>
      <member refid="classInterval_1a53c464380c323171203ac354d1e5d010add09b88e878a21790b0de3b85ac485e9" prot="public" virt="non-virtual"><scope>Interval</scope><name>EXPR_SMALLER_EQ</name></member>
      <member refid="classInterval_1ab6443e5ab413465a8039e9db80681ad5" prot="private" virt="non-virtual"><scope>Interval</scope><name>fileName</name></member>
      <member refid="classInterval_1a063becea3dcf3b68f53e18daf43ddc1d" prot="public" virt="non-virtual"><scope>Interval</scope><name>getFileName</name></member>
      <member refid="classInterval_1aaf7ee3fa0b3dff04f86021b56fef19a6" prot="public" virt="non-virtual"><scope>Interval</scope><name>getIndexRange</name></member>
      <member refid="classInterval_1a748b0a4c7b26f10ca5edfafd46cdb5a5" prot="public" virt="non-virtual"><scope>Interval</scope><name>getNameId</name></member>
      <member refid="classInterval_1a220f0ead30e4a5cce8fcdef2e7cc3911" prot="public" virt="non-virtual"><scope>Interval</scope><name>getValue</name></member>
      <member refid="classInterval_1a5956e30eabfc1cecec92f5d20f8df50e" prot="public" virt="non-virtual"><scope>Interval</scope><name>getValueByNameId</name></member>
      <member refid="classInterval_1a65fa9045d2202af15b6f6a4830aa49ea" prot="public" virt="non-virtual"><scope>Interval</scope><name>getValueByNameId</name></member>
      <member refid="classInterval_1a4b9c166bf48189838a81fdbb16e0d168" prot="public" virt="non-virtual"><scope>Interval</scope><name>getValueCount</name></member>
      <member refid="classInterval_1ab9da4b64321a7e5e26613e4d7e65a5a7" prot="public" virt="non-virtual"><scope>Interval</scope><name>getValueRange</name></member>
      <member refid="classInterval_1a3b99beb415b1139228913988b01b8f98" prot="public" virt="non-virtual"><scope>Interval</scope><name>getVarType</name></member>
      <member refid="classInterval_1a06615c33bc0830d42d7de7ff811b8c67" prot="public" virt="non-virtual"><scope>Interval</scope><name>Interval</name></member>
      <member refid="classInterval_1ae48b9a9e9f672f81977627b609e32429" prot="public" virt="non-virtual"><scope>Interval</scope><name>Interval</name></member>
      <member refid="classInterval_1adcb48da00dc6f8017bb082fa278856e2" prot="private" virt="non-virtual"><scope>Interval</scope><name>intervalType</name></member>
      <member refid="classInterval_1ae6a2af82d6b9f3cc5ed10159b1db3d9a" prot="private" virt="non-virtual"><scope>Interval</scope><name>nameId</name></member>
      <member refid="classInterval_1a4cd43145fa32ed203df1fb0e521c9b25" prot="public" virt="non-virtual"><scope>Interval</scope><name>normalizeValue</name></member>
      <member refid="classInterval_1a21d812383fe725bbcea4da5759c1be77" prot="public" virt="non-virtual"><scope>Interval</scope><name>operator!=</name></member>
      <member refid="classInterval_1abc0ddd748c8e5f1f09db46d965f399b0" prot="public" virt="non-virtual"><scope>Interval</scope><name>operator==</name></member>
      <member refid="classInterval_1a0a5a4dbb7d0228e7e891a0fad7e8b4ef" prot="public" virt="non-virtual"><scope>Interval</scope><name>setVarType</name></member>
      <member refid="classInterval_1adca020867e2232132d6a2bfe24c54c01" prot="public" virt="non-virtual"><scope>Interval</scope><name>valueExists</name></member>
      <member refid="classInterval_1a8c006b538a749ff075c028b60b9886b1" prot="private" virt="non-virtual"><scope>Interval</scope><name>valueList</name></member>
      <member refid="classInterval_1a923e1717a3dedfe1ba90f81fcb26d5c5" prot="public" virt="non-virtual"><scope>Interval</scope><name>~Interval</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
