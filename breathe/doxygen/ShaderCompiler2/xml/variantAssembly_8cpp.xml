<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.7" xml:lang="en-US">
  <compounddef id="variantAssembly_8cpp" kind="file" language="C++">
    <compoundname>variantAssembly.cpp</compoundname>
    <includes refid="variantAssembly_8h" local="yes">variantAssembly.h</includes>
    <includes refid="codeBlocks_8h" local="yes">codeBlocks.h</includes>
    <includes refid="shExpr_8h" local="yes">shExpr.h</includes>
    <includes refid="shExprParser_8h" local="yes">shExprParser.h</includes>
    <includes local="no">shaders/shOpcode.h</includes>
    <includes local="no">shaders/shOpcodeFormat.h</includes>
    <includes local="no">shaders/shUtils.h</includes>
    <incdepgraph>
      <node id="90">
        <label>DebugLevel.h</label>
        <link refid="DebugLevel_8h"/>
        <childnode refid="35" relation="include">
        </childnode>
      </node>
      <node id="47">
        <label>blkHash.h</label>
        <link refid="blkHash_8h"/>
      </node>
      <node id="83">
        <label>boolVar.h</label>
        <link refid="boolVar_8h"/>
        <childnode refid="64" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="43" relation="include">
        </childnode>
      </node>
      <node id="107">
        <label>codeBlocks.h</label>
        <link refid="codeBlocks_8h"/>
        <childnode refid="99" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>commonUtils.h</label>
        <link refid="commonUtils_8h"/>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
      </node>
      <node id="75">
        <label>compileResult.h</label>
        <link refid="compileResult_8h"/>
        <childnode refid="76" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
      </node>
      <node id="72">
        <label>const3d.h</label>
        <link refid="const3d_8h"/>
        <childnode refid="41" relation="include">
        </childnode>
      </node>
      <node id="14">
        <label>cppStcode.h</label>
        <link refid="cppStcode_8h"/>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="45" relation="include">
        </childnode>
        <childnode refid="47" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="44" relation="include">
        </childnode>
      </node>
      <node id="15">
        <label>cppStcodeAssembly.h</label>
        <link refid="cppStcodeAssembly_8h"/>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
        <childnode refid="38" relation="include">
        </childnode>
        <childnode refid="39" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
        <childnode refid="41" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="43" relation="include">
        </childnode>
        <childnode refid="44" relation="include">
        </childnode>
      </node>
      <node id="16">
        <label>cppStcodeBuilder.h</label>
        <link refid="cppStcodeBuilder_8h"/>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
      </node>
      <node id="91">
        <label>cppStcodePlatformInfo.h</label>
        <link refid="cppStcodePlatformInfo_8h"/>
        <childnode refid="35" relation="include">
        </childnode>
      </node>
      <node id="66">
        <label>cppStcodeUtils.h</label>
        <link refid="cppStcodeUtils_8h"/>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="38" relation="include">
        </childnode>
        <childnode refid="39" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="67" relation="include">
        </childnode>
      </node>
      <node id="54">
        <label>globVar.h</label>
        <link refid="globVar_8h"/>
        <childnode refid="55" relation="include">
        </childnode>
        <childnode refid="56" relation="include">
        </childnode>
        <childnode refid="48" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="57" relation="include">
        </childnode>
        <childnode refid="58" relation="include">
        </childnode>
        <childnode refid="59" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="60" relation="include">
        </childnode>
        <childnode refid="61" relation="include">
        </childnode>
      </node>
      <node id="89">
        <label>globalConfig.h</label>
        <link refid="globalConfig_8h"/>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="90" relation="include">
        </childnode>
        <childnode refid="91" relation="include">
        </childnode>
        <childnode refid="51" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="43" relation="include">
        </childnode>
      </node>
      <node id="27">
        <label>hash.h</label>
        <link refid="hash_8h"/>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
      </node>
      <node id="52">
        <label>hashStrings.h</label>
        <link refid="hashStrings_8h"/>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="48" relation="include">
        </childnode>
        <childnode refid="53" relation="include">
        </childnode>
        <childnode refid="43" relation="include">
        </childnode>
      </node>
      <node id="30">
        <label>hlslRegisters.h</label>
        <link refid="hlslRegisters_8h"/>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
      </node>
      <node id="71">
        <label>hlslStage.h</label>
        <link refid="hlslStage_8h"/>
        <childnode refid="72" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="73" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="74" relation="include">
        </childnode>
      </node>
      <node id="50">
        <label>hwAssembly.h</label>
        <link refid="hwAssembly_8h"/>
        <childnode refid="12" relation="include">
        </childnode>
      </node>
      <node id="61">
        <label>intervals.h</label>
        <link refid="intervals_8h"/>
      </node>
      <node id="20">
        <label>nameMap.h</label>
        <link refid="nameMap_8h"/>
        <childnode refid="21" relation="include">
        </childnode>
      </node>
      <node id="84">
        <label>namedConst.h</label>
        <link refid="namedConst_8h"/>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="85" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="89" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="48" relation="include">
        </childnode>
        <childnode refid="92" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
      </node>
      <node id="45">
        <label>processes.h</label>
        <link refid="processes_8h"/>
        <childnode refid="46" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
      </node>
      <node id="62">
        <label>samplers.h</label>
        <link refid="samplers_8h"/>
        <childnode refid="63" relation="include">
        </childnode>
        <childnode refid="64" relation="include">
        </childnode>
        <childnode refid="54" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="58" relation="include">
        </childnode>
        <childnode refid="43" relation="include">
        </childnode>
      </node>
      <node id="93">
        <label>shAssumes.h</label>
        <link refid="shAssumes_8h"/>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="61" relation="include">
        </childnode>
        <childnode refid="64" relation="include">
        </childnode>
        <childnode refid="51" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="43" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>shCompContext.h</label>
        <link refid="shCompContext_8h"/>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="50" relation="include">
        </childnode>
        <childnode refid="51" relation="include">
        </childnode>
      </node>
      <node id="7">
        <label>shCompilationInfo.h</label>
        <link refid="shCompilationInfo_8h"/>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="47" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="48" relation="include">
        </childnode>
        <childnode refid="49" relation="include">
        </childnode>
      </node>
      <node id="80">
        <label>shErrorReporting.h</label>
        <link refid="shErrorReporting_8h"/>
        <childnode refid="63" relation="include">
        </childnode>
        <childnode refid="64" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="106">
        <label>shExpr.h</label>
        <link refid="shExpr_8h"/>
      </node>
      <node id="108">
        <label>shExprParser.h</label>
        <link refid="shExprParser_8h"/>
      </node>
      <node id="103">
        <label>shLocVar.h</label>
        <link refid="shLocVar_8h"/>
      </node>
      <node id="31">
        <label>shLog.h</label>
        <link refid="shLog_8h"/>
      </node>
      <node id="65">
        <label>shMacro.h</label>
        <link refid="shMacro_8h"/>
      </node>
      <node id="101">
        <label>shMessages.h</label>
        <link refid="shMessages_8h"/>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="88" relation="include">
        </childnode>
      </node>
      <node id="102">
        <label>shSemCode.h</label>
        <link refid="shSemCode_8h"/>
      </node>
      <node id="4">
        <label>shShaderContext.h</label>
        <link refid="shShaderContext_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="83" relation="include">
        </childnode>
        <childnode refid="94" relation="include">
        </childnode>
        <childnode refid="93" relation="include">
        </childnode>
        <childnode refid="95" relation="include">
        </childnode>
        <childnode refid="99" relation="include">
        </childnode>
        <childnode refid="101" relation="include">
        </childnode>
        <childnode refid="97" relation="include">
        </childnode>
        <childnode refid="102" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>shTargetContext.h</label>
        <link refid="shTargetContext_8h"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="52" relation="include">
        </childnode>
        <childnode refid="54" relation="include">
        </childnode>
        <childnode refid="62" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="66" relation="include">
        </childnode>
        <childnode refid="64" relation="include">
        </childnode>
        <childnode refid="68" relation="include">
        </childnode>
        <childnode refid="70" relation="include">
        </childnode>
        <childnode refid="79" relation="include">
        </childnode>
        <childnode refid="83" relation="include">
        </childnode>
        <childnode refid="71" relation="include">
        </childnode>
        <childnode refid="84" relation="include">
        </childnode>
        <childnode refid="93" relation="include">
        </childnode>
        <childnode refid="89" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
      </node>
      <node id="68">
        <label>shTargetStorage.h</label>
        <link refid="shTargetStorage_8h"/>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="69" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
        <childnode refid="44" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
      </node>
      <node id="100">
        <label>shVarBool.h</label>
        <link refid="shVarBool_8h"/>
      </node>
      <node id="60">
        <label>shVarVecTypes.h</label>
        <link refid="shVarVecTypes_8h"/>
      </node>
      <node id="3">
        <label>shVariantContext.h</label>
        <link refid="shVariantContext_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="102" relation="include">
        </childnode>
        <childnode refid="83" relation="include">
        </childnode>
        <childnode refid="103" relation="include">
        </childnode>
        <childnode refid="104" relation="include">
        </childnode>
      </node>
      <node id="70">
        <label>shaderBytecodeCache.h</label>
        <link refid="shaderBytecodeCache_8h"/>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="71" relation="include">
        </childnode>
        <childnode refid="75" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="77" relation="include">
        </childnode>
        <childnode refid="48" relation="include">
        </childnode>
        <childnode refid="78" relation="include">
        </childnode>
      </node>
      <node id="18">
        <label>shaderSave.h</label>
        <link refid="shaderSave_8h"/>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
      </node>
      <node id="17">
        <label>shaderTab.h</label>
        <link refid="shaderTab_8h"/>
        <childnode refid="18" relation="include">
        </childnode>
      </node>
      <node id="97">
        <label>shaderVariant.h</label>
        <link refid="shaderVariant_8h"/>
        <childnode refid="61" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="81" relation="include">
        </childnode>
        <childnode refid="59" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="53" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
      </node>
      <node id="94">
        <label>shaderVariantSrc.h</label>
        <link refid="shaderVariantSrc_8h"/>
      </node>
      <node id="95">
        <label>shcode.h</label>
        <link refid="shcode_8h"/>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="53" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="96" relation="include">
        </childnode>
        <childnode refid="55" relation="include">
        </childnode>
        <childnode refid="56" relation="include">
        </childnode>
        <childnode refid="88" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="97" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="84" relation="include">
        </childnode>
        <childnode refid="98" relation="include">
        </childnode>
        <childnode refid="60" relation="include">
        </childnode>
      </node>
      <node id="64">
        <label>shlexterm.h</label>
        <link refid="shlexterm_8h"/>
        <childnode refid="63" relation="include">
        </childnode>
        <childnode refid="65" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="99">
        <label>shsem.h</label>
        <link refid="shsem_8h"/>
        <childnode refid="63" relation="include">
        </childnode>
        <childnode refid="64" relation="include">
        </childnode>
        <childnode refid="100" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="78" relation="include">
        </childnode>
      </node>
      <node id="79">
        <label>stcodeBytecode.h</label>
        <link refid="stcodeBytecode_8h"/>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="80" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
        <childnode refid="81" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
        <childnode refid="82" relation="include">
        </childnode>
      </node>
      <node id="19">
        <label>varMap.h</label>
        <link refid="varMap_8h"/>
        <childnode refid="20" relation="include">
        </childnode>
      </node>
      <node id="59">
        <label>varTypes.h</label>
        <link refid="varTypes_8h"/>
      </node>
      <node id="85">
        <label>variablesMerger.h</label>
        <link refid="variablesMerger_8h"/>
        <childnode refid="63" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="41" relation="include">
        </childnode>
        <childnode refid="76" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
        <childnode refid="86" relation="include">
        </childnode>
        <childnode refid="87" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="88" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>variantAssembly.cpp</label>
        <link refid="variantAssembly_8cpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="107" relation="include">
        </childnode>
        <childnode refid="106" relation="include">
        </childnode>
        <childnode refid="108" relation="include">
        </childnode>
        <childnode refid="109" relation="include">
        </childnode>
        <childnode refid="110" relation="include">
        </childnode>
        <childnode refid="111" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>variantAssembly.h</label>
        <link refid="variantAssembly_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="105" relation="include">
        </childnode>
        <childnode refid="106" relation="include">
        </childnode>
      </node>
      <node id="105">
        <label>variantSemantic.h</label>
        <link refid="variantSemantic_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="57">
        <label>3d/dag_texMgr.h</label>
      </node>
      <node id="26">
        <label>EASTL/algorithm.h</label>
      </node>
      <node id="34">
        <label>EASTL/array.h</label>
      </node>
      <node id="88">
        <label>EASTL/bitvector.h</label>
      </node>
      <node id="86">
        <label>EASTL/fixed_vector.h</label>
      </node>
      <node id="87">
        <label>EASTL/map.h</label>
      </node>
      <node id="13">
        <label>EASTL/optional.h</label>
      </node>
      <node id="12">
        <label>EASTL/string.h</label>
      </node>
      <node id="67">
        <label>EASTL/string_view.h</label>
      </node>
      <node id="73">
        <label>EASTL/type_traits.h</label>
      </node>
      <node id="42">
        <label>EASTL/unique_ptr.h</label>
      </node>
      <node id="76">
        <label>EASTL/vector.h</label>
      </node>
      <node id="82">
        <label>EASTL/vector_map.h</label>
      </node>
      <node id="92">
        <label>EASTL/vector_set.h</label>
      </node>
      <node id="35">
        <label>cstdint</label>
      </node>
      <node id="29">
        <label>cstring</label>
      </node>
      <node id="25">
        <label>dag/dag_vector.h</label>
      </node>
      <node id="24">
        <label>debug/dag_assert.h</label>
      </node>
      <node id="81">
        <label>debug/dag_debug.h</label>
      </node>
      <node id="41">
        <label>drv/3d/dag_consts.h</label>
      </node>
      <node id="69">
        <label>drv/3d/dag_renderStates.h</label>
      </node>
      <node id="58">
        <label>drv/3d/dag_sampler.h</label>
      </node>
      <node id="32">
        <label>generic/dag_enumerate.h</label>
      </node>
      <node id="33">
        <label>generic/dag_expected.h</label>
      </node>
      <node id="46">
        <label>generic/dag_fixedMoveOnlyFunction.h</label>
      </node>
      <node id="96">
        <label>generic/dag_smallTab.h</label>
      </node>
      <node id="22">
        <label>generic/dag_tab.h</label>
      </node>
      <node id="28">
        <label>hash/BLAKE3/blake3.h</label>
      </node>
      <node id="51">
        <label>ioSys/dag_dataBlock.h</label>
      </node>
      <node id="55">
        <label>math/dag_color.h</label>
      </node>
      <node id="56">
        <label>math/integer/dag_IPoint4.h</label>
      </node>
      <node id="74">
        <label>memory</label>
      </node>
      <node id="37">
        <label>memory/dag_mem.h</label>
      </node>
      <node id="77">
        <label>memory/dag_memBase.h</label>
      </node>
      <node id="104">
        <label>memory/dag_regionMemAlloc.h</label>
      </node>
      <node id="98">
        <label>shaders/dag_shaderCommon.h</label>
      </node>
      <node id="40">
        <label>shaders/dag_shaderVarType.h</label>
      </node>
      <node id="49">
        <label>shaders/dag_shaders.h</label>
      </node>
      <node id="38">
        <label>shaders/shExprTypes.h</label>
      </node>
      <node id="39">
        <label>shaders/shFunc.h</label>
      </node>
      <node id="109">
        <label>shaders/shOpcode.h</label>
      </node>
      <node id="110">
        <label>shaders/shOpcodeFormat.h</label>
      </node>
      <node id="111">
        <label>shaders/shUtils.h</label>
      </node>
      <node id="44">
        <label>shaders/shader_layout.h</label>
      </node>
      <node id="36">
        <label>shaders/slotTexturesRange.h</label>
      </node>
      <node id="63">
        <label>shsyn.h</label>
      </node>
      <node id="43">
        <label>ska_hash_map/flat_hash_map2.hpp</label>
      </node>
      <node id="23">
        <label>util/dag_bindump_ext.h</label>
      </node>
      <node id="11">
        <label>util/dag_globDef.h</label>
      </node>
      <node id="21">
        <label>util/dag_oaHashNameMap.h</label>
      </node>
      <node id="10">
        <label>util/dag_safeArg.h</label>
      </node>
      <node id="78">
        <label>util/dag_simpleString.h</label>
      </node>
      <node id="53">
        <label>util/dag_stdint.h</label>
      </node>
      <node id="48">
        <label>util/dag_string.h</label>
      </node>
      <node id="9">
        <label>utility</label>
      </node>
    </incdepgraph>
    <innernamespace refid="namespaceassembly">assembly</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/>Copyright<sp/>(C)<sp/>Gaijin<sp/>Games<sp/>KFT.<sp/><sp/>All<sp/>rights<sp/>reserved.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="variantAssembly_8h" kindref="compound">variantAssembly.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="codeBlocks_8h" kindref="compound">codeBlocks.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="shExpr_8h" kindref="compound">shExpr.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="shExprParser_8h" kindref="compound">shExprParser.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;shaders/shOpcode.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;shaders/shOpcodeFormat.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;shaders/shUtils.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespaceassembly" kindref="compound">assembly</ref></highlight></codeline>
<codeline lineno="12"><highlight class="normal">{</highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;StcodeBuildFlags<sp/>FLAGS&gt;</highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceassembly_1a7b9bd44389fc2c58d5bb324ee4e8cfc4" kindref="member">assemble_local_var</ref>(<ref refid="structLocalVar" kindref="compound">LocalVar</ref><sp/>*var,<sp/><ref refid="classShaderParser_1_1ComplexExpression" kindref="compound">ShaderParser::ComplexExpression</ref><sp/>*rootExpr,<sp/>ShaderTerminal::SHTOK_ident<sp/>*decl_name,</highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/><ref refid="classshc_1_1VariantContext" kindref="compound">shc::VariantContext</ref><sp/>&amp;ctx)</highlight></codeline>
<codeline lineno="17"><highlight class="normal">{</highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isDynamic<sp/>=<sp/>rootExpr-&gt;<ref refid="classShaderParser_1_1ComplexExpression_1a16bdebae479907f7361ce4fbfaa6f05e" kindref="member">isDynamic</ref>();</highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>(FLAGS<sp/>&amp;<sp/><ref refid="structassembly_1_1StcodeBuildFlagsBits_1a3ef5928b0782d6f7a0b6b39b1245e5f3" kindref="member">StcodeBuildFlagsBits::BYTECODE</ref>)</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/>Tab&lt;int&gt;<sp/>&amp;code<sp/>=<sp/>ctx.<ref refid="classshc_1_1VariantContext_1a4d4c5240b72856d0eeaccfc5ae8d976f" kindref="member">stBytecode</ref>().get_alt_curstcode(isDynamic);</highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classRegister" kindref="compound">Register</ref><sp/>varReg;</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(var-&gt;<ref refid="structLocalVar_1a28b868de52e6d5b3210f360b46d6bda7" kindref="member">valueType</ref><sp/>==<sp/>shexpr::VT_REAL)</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>varReg<sp/>=<sp/>ctx.<ref refid="classshc_1_1VariantContext_1a4d4c5240b72856d0eeaccfc5ae8d976f" kindref="member">stBytecode</ref>().regAllocator-&gt;add_reg();</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>varReg<sp/>=<sp/>ctx.<ref refid="classshc_1_1VariantContext_1a4d4c5240b72856d0eeaccfc5ae8d976f" kindref="member">stBytecode</ref>().regAllocator-&gt;add_vec_reg();</highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/>rootExpr-&gt;<ref refid="classShaderParser_1_1ComplexExpression_1a6ea797735f195ab719d1df1e22f4d562" kindref="member">assembleBytecode</ref>(code,<sp/>varReg,<sp/>*ctx.<ref refid="classshc_1_1VariantContext_1a4d4c5240b72856d0eeaccfc5ae8d976f" kindref="member">stBytecode</ref>().regAllocator,<sp/>var-&gt;<ref refid="structLocalVar_1add3501d79d8d7b5cdcc9c1826e9ce816" kindref="member">isInteger</ref>);</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/>var-&gt;<ref refid="structLocalVar_1acd4a3827cb48e24fa4d52e69f2a12ede" kindref="member">reg</ref><sp/>=<sp/>eastl::move(varReg).release();</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>(FLAGS<sp/>&amp;<sp/><ref refid="structassembly_1_1StcodeBuildFlagsBits_1a3bc117f2628c89fc9fa9d099c3357c22" kindref="member">StcodeBuildFlagsBits::CPP</ref>)</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structStcodeRoutine" kindref="compound">StcodeRoutine</ref><sp/>&amp;cppStcode<sp/>=<sp/>isDynamic<sp/>?<sp/>(<ref refid="structStcodeRoutine" kindref="compound">StcodeRoutine</ref><sp/>&amp;)ctx.<ref refid="classshc_1_1VariantContext_1a45351b6130235b4bde86f2fb2bac44fe" kindref="member">cppStcode</ref>().cppStcode<sp/>:<sp/>(<ref refid="structStcodeRoutine" kindref="compound">StcodeRoutine</ref><sp/>&amp;)ctx.<ref refid="classshc_1_1VariantContext_1a45351b6130235b4bde86f2fb2bac44fe" kindref="member">cppStcode</ref>().cppStblkcode;</highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structStcodeExpression" kindref="compound">StcodeExpression</ref><sp/>expr;</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/>rootExpr-&gt;<ref refid="classShaderParser_1_1ComplexExpression_1a01dc2bc138b372bde6ed31372e4d6cbf" kindref="member">assembleCpp</ref>(expr,<sp/>var-&gt;<ref refid="structLocalVar_1add3501d79d8d7b5cdcc9c1826e9ce816" kindref="member">isInteger</ref>);</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/>cppStcode.<ref refid="structStcodeRoutine_1a3aa9c49a9d2ffa5a0670be12dde467ec" kindref="member">setVarValue</ref>(decl_name-&gt;text,<sp/>eastl::move(expr));</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="42"><highlight class="normal">}</highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>eastl::string<sp/>build_placement_specifier(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dest_reg,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>is_array,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>elem_count,<sp/><ref refid="hlslRegisters_8h_1aa3a591153956a0cd6630e2d20870fb9b" kindref="member">HlslRegisterSpace</ref><sp/>rspace,</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><ref refid="namedConst_8h_1a8df4796c58d0d8445eaf37bb57425b6c" kindref="member">ShaderBlockLevel</ref><sp/>block_level,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>is_dynamic)</highlight></codeline>
<codeline lineno="46"><highlight class="normal">{</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/>eastl::string<sp/>res{};</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/>G_ASSERT(elem_count<sp/>&gt;<sp/>0);</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(is_array)</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/>res.append_sprintf(</highlight><highlight class="stringliteral">&quot;[%d]&quot;</highlight><highlight class="normal">,<sp/>elem_count);</highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>for<sp/>static<sp/>cbuf<sp/>consts<sp/>we<sp/>don&apos;t<sp/>put<sp/>any<sp/>reg/offset<sp/>specifier<sp/>at<sp/>all<sp/>--<sp/>they<sp/>are<sp/>packed<sp/>into<sp/>a<sp/>struct<sp/>with<sp/>further<sp/>validation<sp/>that</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>register<sp/>allocation<sp/>matches<sp/>the<sp/>struct<sp/>layout</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!is_dynamic<sp/>&amp;&amp;<sp/>rspace<sp/>==<sp/><ref refid="hlslRegisters_8h_1aa3a591153956a0cd6630e2d20870fb9bae4c03c06cbf9b4ae8c9407282006de68" kindref="member">HLSL_RSPACE_C</ref>)</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/>G_ASSERT(block_level<sp/>==<sp/><ref refid="namedConst_8h_1a8df4796c58d0d8445eaf37bb57425b6caa05d35337eb28027e70aef2ea40ff1df" kindref="member">ShaderBlockLevel::SHADER</ref>);</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>res;</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>For<sp/>global<sp/>cbuf<sp/>we<sp/>use<sp/>packoffset<sp/>to<sp/>specify<sp/>position<sp/>in<sp/>cbuffer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(rspace<sp/>==<sp/><ref refid="hlslRegisters_8h_1aa3a591153956a0cd6630e2d20870fb9bae4c03c06cbf9b4ae8c9407282006de68" kindref="member">HLSL_RSPACE_C</ref><sp/>&amp;&amp;<sp/>block_level<sp/>==<sp/><ref refid="namedConst_8h_1a8df4796c58d0d8445eaf37bb57425b6cad898411bc00251ab145d6c0d5971f3ab" kindref="member">ShaderBlockLevel::GLOBAL_CONST</ref>)</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/>G_ASSERT(is_dynamic);</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/>res.append_sprintf(</highlight><highlight class="stringliteral">&quot;:packoffset(c%d)&quot;</highlight><highlight class="normal">,<sp/>dest_reg);</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>res;</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>At<sp/>last,<sp/>for<sp/>resources<sp/>and<sp/>implicit-cbuf<sp/>consts<sp/>we<sp/>use<sp/>good<sp/>old<sp/>hlsl<sp/>&apos;register&apos;s</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/>res.append_sprintf(</highlight><highlight class="stringliteral">&quot;:register(%c%d)&quot;</highlight><highlight class="normal">,<sp/><ref refid="hlslRegisters_8h_1a917909bca1e293eb098449d6379e471c" kindref="member">HLSL_RSPACE_ALL_SYMBOLS</ref>[rspace],<sp/>dest_reg);</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>res;</highlight></codeline>
<codeline lineno="71"><highlight class="normal">}</highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal">eastl::optional&lt;NamedConstDeclarationHlsl&gt;<sp/><ref refid="namespaceassembly_1a61b2b995030f3ac4d90ea82218c3d786" kindref="member">build_hlsl_decl_for_named_const</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structsemantic_1_1NamedConstDefInfo" kindref="compound">semantic::NamedConstDefInfo</ref><sp/>&amp;def,</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><ref refid="classshc_1_1VariantContext" kindref="compound">shc::VariantContext</ref><sp/>&amp;ctx,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dest_register,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structShaderParser_1_1VariablesMerger" kindref="compound">ShaderParser::VariablesMerger</ref><sp/>&amp;var_merger)</highlight></codeline>
<codeline lineno="75"><highlight class="normal">{</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal"><ref refid="namespacesemantic_1a1fd7ba909c618ad56fbacae8b3226182" kindref="member">semantic::VariableType</ref>;</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*profiles[STAGE_MAX]<sp/>=<sp/>{</highlight><highlight class="stringliteral">&quot;cs&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;ps&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;vs&quot;</highlight><highlight class="normal">};</highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><ref refid="structParser" kindref="compound">Parser</ref><sp/>&amp;parser<sp/>=<sp/>ctx.<ref refid="classshc_1_1VariantContext_1a02952e27d2d5e304daad76b11cb1f4ad" kindref="member">tgtCtx</ref>().<ref refid="classshc_1_1TargetContext_1a2fda184b8cc1a5f05c7a8c24b01c2e86" kindref="member">sourceParseState</ref>().<ref refid="structSourceFileParseState_1a81f86a8879fd00d8c687e5c4e7fe4068" kindref="member">parser</ref>;</highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/>NamedConstDeclarationHlsl<sp/>hlsl{};</highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(def.<ref refid="structsemantic_1_1NamedConstDefInfo_1a23c2808d87320936f88c1767cd492a1e" kindref="member">hlsl</ref>)</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/>hlsl.definition<sp/>=<sp/>def.<ref refid="structsemantic_1_1NamedConstDefInfo_1a23c2808d87320936f88c1767cd492a1e" kindref="member">hlsl</ref>-&gt;text;</highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*mangledVarName<sp/>=<sp/>def.<ref refid="structsemantic_1_1NamedConstDefInfo_1aa34d1200eefa8c3bfa01ad34fc659012" kindref="member">mangledName</ref>.c_str();</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*baseVarName<sp/>=<sp/>def.<ref refid="structsemantic_1_1NamedConstDefInfo_1a52fd7afc7dff324248e68eb1185143a4" kindref="member">varTerm</ref>-&gt;text;</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*nameSpaceName<sp/>=<sp/>def.<ref refid="structsemantic_1_1NamedConstDefInfo_1ac71de402da6f259cd1b9f625209853ae" kindref="member">nameSpaceTerm</ref>-&gt;text;</highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isGlobalConstBlock<sp/>=<sp/>ctx.<ref refid="classshc_1_1VariantContext_1a1cd6c96432c33d5741b597ad37709583" kindref="member">shCtx</ref>().<ref refid="classshc_1_1ShaderContext_1a6290b6c1649dfc5f77d7fd395ed9854f" kindref="member">blockLevel</ref>()<sp/>==<sp/><ref refid="namedConst_8h_1a8df4796c58d0d8445eaf37bb57425b6cad898411bc00251ab145d6c0d5971f3ab" kindref="member">ShaderBlockLevel::GLOBAL_CONST</ref>;</highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*var_type_str<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*samplerTypeStr<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(def.<ref refid="structsemantic_1_1NamedConstDefInfo_1a40a99bfe135ba6f6802136b1389a5aca" kindref="member">type</ref>)</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>VariableType::f1:<sp/>var_type_str<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;float&quot;</highlight><highlight class="normal">;<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>VariableType::f2:<sp/>var_type_str<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;float2&quot;</highlight><highlight class="normal">;<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>VariableType::f3:<sp/>var_type_str<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;float3&quot;</highlight><highlight class="normal">;<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>VariableType::f4:<sp/>var_type_str<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;float4&quot;</highlight><highlight class="normal">;<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>VariableType::i1:<sp/>var_type_str<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;int&quot;</highlight><highlight class="normal">;<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>VariableType::i2:<sp/>var_type_str<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;int2&quot;</highlight><highlight class="normal">;<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>VariableType::i3:<sp/>var_type_str<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;int3&quot;</highlight><highlight class="normal">;<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>VariableType::i4:<sp/>var_type_str<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;int4&quot;</highlight><highlight class="normal">;<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>VariableType::u1:<sp/>var_type_str<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;uint&quot;</highlight><highlight class="normal">;<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>VariableType::u2:<sp/>var_type_str<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;uint2&quot;</highlight><highlight class="normal">;<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>VariableType::u3:<sp/>var_type_str<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;uint3&quot;</highlight><highlight class="normal">;<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>VariableType::u4:<sp/>var_type_str<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;uint4&quot;</highlight><highlight class="normal">;<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>VariableType::f44:<sp/>var_type_str<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;float4x4&quot;</highlight><highlight class="normal">;<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>VariableType::tex2d:<sp/>var_type_str<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;Texture2D&quot;</highlight><highlight class="normal">;<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>VariableType::staticTexArray:</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>VariableType::texArray:</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>var_type_str<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;Texture2DArray&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>samplerTypeStr<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;TextureArraySampler&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>VariableType::staticTex3D:</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>VariableType::tex3d:</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>var_type_str<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;Texture3D&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>samplerTypeStr<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;Texture3DSampler&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>VariableType::staticCube:</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>VariableType::texCube:</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>var_type_str<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;TextureCube&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>samplerTypeStr<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;TextureSamplerCube&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>VariableType::staticCubeArray:</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>VariableType::texCubeArray:</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>var_type_str<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;TextureCubeArray&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>samplerTypeStr<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;TextureCubeArraySampler&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>VariableType::staticSampler:</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>VariableType::smp2d:</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>var_type_str<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;Texture2D&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>samplerTypeStr<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;TextureSampler&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>VariableType::smp3d:<sp/>var_type_str<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;Texture3D&quot;</highlight><highlight class="normal">;<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>VariableType::smpCube:<sp/>var_type_str<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;TextureCube&quot;</highlight><highlight class="normal">;<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="137"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>(_CROSS_TARGET_C1<sp/>|<sp/>_CROSS_TARGET_C2)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="138"><highlight class="normal"></highlight></codeline>
<codeline lineno="139"><highlight class="normal"></highlight></codeline>
<codeline lineno="140"><highlight class="normal"></highlight></codeline>
<codeline lineno="141"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>VariableType::shdArray:</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>VariableType::smpArray:<sp/>var_type_str<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;Texture2DArray&quot;</highlight><highlight class="normal">;<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>VariableType::smpCubeArray:<sp/>var_type_str<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;TextureCubeArray&quot;</highlight><highlight class="normal">;<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="145"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>VariableType::sampler:<sp/>var_type_str<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;SamplerState&quot;</highlight><highlight class="normal">;<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>VariableType::shd:<sp/>var_type_str<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;Texture2D&quot;</highlight><highlight class="normal">;<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>VariableType::tlas:<sp/>var_type_str<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;RaytracingAccelerationStructure&quot;</highlight><highlight class="normal">;<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="150"><highlight class="normal"></highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>eastl::string<sp/>regSpecification<sp/>=</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>build_placement_specifier(dest_register,<sp/>def.<ref refid="structsemantic_1_1NamedConstDefInfo_1ad1d123b45962d8ebe20a34eddc4fab12" kindref="member">isArray</ref>,<sp/>def.<ref refid="structsemantic_1_1NamedConstDefInfo_1a4dd2bec578ada9674546a932860f1f17" kindref="member">arrayElemCount</ref>,<sp/>def.<ref refid="structsemantic_1_1NamedConstDefInfo_1a20cadfab62d2fe81e136c3c5b581a030" kindref="member">regSpace</ref>,<sp/>ctx.<ref refid="classshc_1_1VariantContext_1a1cd6c96432c33d5741b597ad37709583" kindref="member">shCtx</ref>().<ref refid="classshc_1_1ShaderContext_1a6290b6c1649dfc5f77d7fd395ed9854f" kindref="member">blockLevel</ref>(),<sp/>def.<ref refid="structsemantic_1_1NamedConstDefInfo_1a1618a590cbf1c99259813de7cb83c29a" kindref="member">isDynamic</ref>);</highlight></codeline>
<codeline lineno="154"><highlight class="normal"></highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!hlsl.definition.empty())</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>hlsl.definition.replaceAll(def.<ref refid="structsemantic_1_1NamedConstDefInfo_1ac71de402da6f259cd1b9f625209853ae" kindref="member">nameSpaceTerm</ref>-&gt;text,<sp/>regSpecification.c_str());</highlight></codeline>
<codeline lineno="157"><highlight class="normal"></highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(var_type_str)</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!hlsl.definition.empty())</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hlsl.definition<sp/>+=<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(def.<ref refid="structsemantic_1_1NamedConstDefInfo_1a263a1698c52462d32bec85c14a4e6dd1" kindref="member">isBindless</ref>)</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hlsl.definition.aprintf(0,<sp/></highlight><highlight class="stringliteral">&quot;uint2<sp/>%s%s;&quot;</highlight><highlight class="normal">,<sp/>mangledVarName,<sp/>regSpecification.c_str());</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hlsl.definition.aprintf(0,<sp/></highlight><highlight class="stringliteral">&quot;%s<sp/>%s%s;&quot;</highlight><highlight class="normal">,<sp/>var_type_str,<sp/>baseVarName,<sp/>regSpecification.c_str());</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="168"><highlight class="normal"></highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!hlsl.definition.empty())</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>validate<sp/>names<sp/>in<sp/>HLSL<sp/>block</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strchr(hlsl.definition.c_str(),<sp/></highlight><highlight class="charliteral">&apos;@&apos;</highlight><highlight class="normal">))</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="shErrorReporting_8h_1a634f6d6ca9a9f22c5eea4c9b8e20ef31" kindref="member">report_error</ref>(parser,<sp/>def.<ref refid="structsemantic_1_1NamedConstDefInfo_1a52fd7afc7dff324248e68eb1185143a4" kindref="member">varTerm</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Unresolved<sp/>placeholder<sp/>@<sp/>found<sp/>in<sp/>named<sp/>const<sp/>&lt;%s&gt;<sp/>HLSL<sp/>hlsl<sp/>definition&quot;</highlight><highlight class="normal">,<sp/>baseVarName);</highlight></codeline>
<codeline lineno="174"><highlight class="normal"></highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>tempbufLine[256];</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/>tempbufLine[0]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/>SNPRINTF(tempbufLine,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(tempbufLine),<sp/></highlight><highlight class="stringliteral">&quot;#line<sp/>%d<sp/>\&quot;%s\&quot;\n&quot;</highlight><highlight class="normal">,<sp/>def.<ref refid="structsemantic_1_1NamedConstDefInfo_1a52fd7afc7dff324248e68eb1185143a4" kindref="member">varTerm</ref>-&gt;line_start,</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>parser.<ref refid="structParser_1a9e9bc1e12aec4ba300d71598132ae8ec" kindref="member">get_lexer</ref>().get_input_stream()-&gt;<ref refid="classLexer_1ab26ad89867e01b9d9aecd26d1c74776c" kindref="member">get_filename</ref>(def.<ref refid="structsemantic_1_1NamedConstDefInfo_1a52fd7afc7dff324248e68eb1185143a4" kindref="member">varTerm</ref>-&gt;file_start));</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/>hlsl.definition.insert(0,<sp/>tempbufLine,<sp/>(uint32_t)strlen(tempbufLine));</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/>hlsl.definition.insert(hlsl.definition.length(),<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">,<sp/>1);</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strstr(hlsl.definition,<sp/></highlight><highlight class="stringliteral">&quot;#include<sp/>&quot;</highlight><highlight class="normal">))</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classCodeSourceBlocks" kindref="compound">CodeSourceBlocks</ref><sp/>cb;</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">NullEval<sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classShaderParser_1_1ShaderBoolEvalCB" kindref="compound">ShaderParser::ShaderBoolEvalCB</ref></highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>anyCond<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classShVarBool" kindref="compound">ShVarBool</ref><sp/>eval_expr(bool_expr<sp/>&amp;)</highlight><highlight class="keyword"><sp/>override</highlight></codeline>
<codeline lineno="188"><highlight class="keyword"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>anyCond<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classShVarBool" kindref="compound">ShVarBool</ref>(</highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classShVarBool" kindref="compound">ShVarBool</ref><sp/>eval_bool_value(bool_value<sp/>&amp;)</highlight><highlight class="keyword"><sp/>override</highlight></codeline>
<codeline lineno="193"><highlight class="keyword"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>anyCond<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classShVarBool" kindref="compound">ShVarBool</ref>(</highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>eval_interval_value(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*ival_name)</highlight><highlight class="keyword"><sp/>override</highlight></codeline>
<codeline lineno="198"><highlight class="keyword"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>anyCond<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>null_eval;</highlight></codeline>
<codeline lineno="203"><highlight class="normal"></highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!cb.<ref refid="classCodeSourceBlocks_1a2e8f5b78279512fb8ed6ddcab3486dbf" kindref="member">parseSourceCode</ref>(</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">,<sp/>hlsl.definition,<sp/>null_eval,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/>ctx.<ref refid="classshc_1_1VariantContext_1a02952e27d2d5e304daad76b11cb1f4ad" kindref="member">tgtCtx</ref>()))</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="shErrorReporting_8h_1a634f6d6ca9a9f22c5eea4c9b8e20ef31" kindref="member">report_error</ref>(parser,<sp/>def.<ref refid="structsemantic_1_1NamedConstDefInfo_1a52fd7afc7dff324248e68eb1185143a4" kindref="member">varTerm</ref>,<sp/></highlight><highlight class="stringliteral">&quot;bad<sp/>HLSL<sp/>decl<sp/>for<sp/>named<sp/>const<sp/>&lt;%s&gt;:\n%s&quot;</highlight><highlight class="normal">,<sp/>baseVarName,<sp/>hlsl.definition);</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>eastl::nullopt;</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="209"><highlight class="normal"></highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>dag::ConstSpan&lt;char&gt;<sp/>main_src<sp/>=<sp/>cb.<ref refid="classCodeSourceBlocks_1a6b7e88fe6e26dbe946f23fb45be76f7a" kindref="member">buildSourceCode</ref>(cb.<ref refid="classCodeSourceBlocks_1adf3f0ae6d5be4fa27b0e9bee5789dcb2" kindref="member">getPreprocessedCode</ref>(null_eval));</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(null_eval.anyCond)</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="shErrorReporting_8h_1a634f6d6ca9a9f22c5eea4c9b8e20ef31" kindref="member">report_error</ref>(parser,<sp/>def.<ref refid="structsemantic_1_1NamedConstDefInfo_1a52fd7afc7dff324248e68eb1185143a4" kindref="member">varTerm</ref>,<sp/></highlight><highlight class="stringliteral">&quot;HLSL<sp/>decl<sp/>for<sp/>named<sp/>const<sp/>&lt;%s&gt;<sp/>shall<sp/>not<sp/>contain<sp/>pre-processor<sp/>branches:\n%s&quot;</highlight><highlight class="normal">,<sp/>baseVarName,</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hlsl.definition);</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>eastl::nullopt;</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="217"><highlight class="normal"></highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>hlsl.definition.printf(0,<sp/></highlight><highlight class="stringliteral">&quot;%.*s&quot;</highlight><highlight class="normal">,<sp/>main_src.size(),<sp/>main_src.data());</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="221"><highlight class="normal"></highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(def.<ref refid="structsemantic_1_1NamedConstDefInfo_1a263a1698c52462d32bec85c14a4e6dd1" kindref="member">isBindless</ref>)</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="224"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>_CROSS_TARGET_C1<sp/>||<sp/>_CROSS_TARGET_C2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="225"><highlight class="normal"></highlight></codeline>
<codeline lineno="226"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*sampleSuffix<sp/>=<sp/>(def.<ref refid="structsemantic_1_1NamedConstDefInfo_1a40a99bfe135ba6f6802136b1389a5aca" kindref="member">type</ref><sp/>==<sp/>VariableType::staticCube)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>?<sp/></highlight><highlight class="stringliteral">&quot;_cube&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>(def.type<sp/>==<sp/><ref refid="namespacesemantic_1a1fd7ba909c618ad56fbacae8b3226182" kindref="member">VariableType</ref>::staticCubeArray)<sp/>?<sp/></highlight><highlight class="stringliteral">&quot;_cube_array&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>(def.type<sp/>==<sp/><ref refid="namespacesemantic_1a1fd7ba909c618ad56fbacae8b3226182" kindref="member">VariableType</ref>::staticTex3D)<sp/><sp/><sp/><sp/><sp/>?<sp/></highlight><highlight class="stringliteral">&quot;3d&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>(def.type<sp/>==<sp/><ref refid="namespacesemantic_1a1fd7ba909c618ad56fbacae8b3226182" kindref="member">VariableType</ref>::staticTexArray)<sp/><sp/>?<sp/></highlight><highlight class="stringliteral">&quot;_array&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="232"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/>hlsl.postfix.aprintf(0,</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;#ifndef<sp/>BINDLESS_GETTER_%s\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;#define<sp/>BINDLESS_GETTER_%s\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;%s<sp/>get_%s()\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;{\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>%s<sp/>texSamp;\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>texSamp.tex<sp/>=<sp/>static_textures%s[get_%s().x];\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>texSamp.smp<sp/>=<sp/>static_samplers[get_%s().y];\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>return<sp/>texSamp;\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;}\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;#endif\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>baseVarName,<sp/>baseVarName,<sp/>samplerTypeStr,<sp/>baseVarName,<sp/>samplerTypeStr,<sp/>sampleSuffix,<sp/>mangledVarName,<sp/>mangledVarName);</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="namespacesemantic_1a477f00043c849605a540cfbc6ae679fa" kindref="member">semantic::vt_is_static_texture</ref>(def.<ref refid="structsemantic_1_1NamedConstDefInfo_1a40a99bfe135ba6f6802136b1389a5aca" kindref="member">type</ref>))<sp/></highlight><highlight class="comment">//<sp/>Static<sp/>textures,<sp/>but<sp/>not<sp/>compiled<sp/>as<sp/>bindless</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/>hlsl.postfix.aprintf(0,</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;\n%s<sp/>get_%s()\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;{\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>%s<sp/>texSamp;\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>texSamp.tex<sp/>=<sp/>%s;\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>texSamp.smp<sp/>=<sp/>%s_samplerstate;\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>return<sp/>texSamp;\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;}\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>samplerTypeStr,<sp/>baseVarName,<sp/>samplerTypeStr,<sp/>baseVarName,<sp/>baseVarName);</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="258"><highlight class="normal"></highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((def.<ref refid="structsemantic_1_1NamedConstDefInfo_1a779da705277912ae2c2cfe818c24c7b0" kindref="member">shvarType</ref><sp/>==<sp/>SHVT_COLOR4<sp/>||<sp/>def.<ref refid="structsemantic_1_1NamedConstDefInfo_1a779da705277912ae2c2cfe818c24c7b0" kindref="member">shvarType</ref><sp/>==<sp/>SHVT_INT4)<sp/>&amp;&amp;<sp/>def.<ref refid="structsemantic_1_1NamedConstDefInfo_1a1618a590cbf1c99259813de7cb83c29a" kindref="member">isDynamic</ref>)</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((def.<ref refid="structsemantic_1_1NamedConstDefInfo_1a40a99bfe135ba6f6802136b1389a5aca" kindref="member">type</ref><sp/>==<sp/>VariableType::f44<sp/>&amp;&amp;<sp/>def.<ref refid="structsemantic_1_1NamedConstDefInfo_1a2538d3254a9a28c20d44a6ea0c2c2e65" kindref="member">registerSize</ref><sp/>==<sp/>4)<sp/>||<sp/>def.<ref refid="structsemantic_1_1NamedConstDefInfo_1a84ea39f76a9f28dad3f3b3f7bbd588f1" kindref="member">initializer</ref>.size()<sp/>==<sp/>1)</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>hlsl.postfix.aprintf(0,<sp/></highlight><highlight class="stringliteral">&quot;%s<sp/>get_%s()<sp/>{<sp/>return<sp/>%s;<sp/>}&quot;</highlight><highlight class="normal">,<sp/>var_type_str,<sp/>baseVarName,<sp/>baseVarName);</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>*vars<sp/>=<sp/>isGlobalConstBlock<sp/>?<sp/>var_merger.<ref refid="structShaderParser_1_1VariablesMerger_1af42dedfbb8fca7c623510e5e8e972316" kindref="member">findOriginalBufferedVarsInfo</ref>(baseVarName)</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>var_merger.findOriginalConstVarsInfo(baseVarName,<sp/>def.stage))</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;info<sp/>:<sp/>*vars)</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hlsl.postfix.aprintf(0,<sp/></highlight><highlight class="stringliteral">&quot;<sp/>static<sp/>%s<sp/>%s<sp/>=<sp/>(%s).%s;<sp/>%s<sp/>get_%s()<sp/>{<sp/>return<sp/>%s;<sp/>}&quot;</highlight><highlight class="normal">,<sp/>info.getType(),<sp/>info.name.c_str(),<sp/>baseVarName,</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>info.getSwizzle(),<sp/>info.getType(),<sp/>info.name.c_str(),<sp/>info.name.c_str());</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="272"><highlight class="normal"></highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/>hlsl.postfix.aprintf(0,<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="275"><highlight class="normal"></highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/>hlsl.postfix.aprintf(0,<sp/></highlight><highlight class="stringliteral">&quot;#define<sp/>get_name_%s<sp/>%i\n&quot;</highlight><highlight class="normal">,<sp/>baseVarName,</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/>ctx.<ref refid="classshc_1_1VariantContext_1a1cd6c96432c33d5741b597ad37709583" kindref="member">shCtx</ref>().<ref refid="classshc_1_1ShaderContext_1a247c84f67fcf817a86603f6d810a9ad7" kindref="member">compiledShader</ref>().uniqueStrings.addNameId(baseVarName)<sp/>+<sp/>ctx.<ref refid="classshc_1_1VariantContext_1a1cd6c96432c33d5741b597ad37709583" kindref="member">shCtx</ref>().<ref refid="classshc_1_1ShaderContext_1a247c84f67fcf817a86603f6d810a9ad7" kindref="member">compiledShader</ref>().<ref refid="classShaderClass_1a86c11cc80ea041d5a25082ef6457fca3" kindref="member">messages</ref>.size());</highlight></codeline>
<codeline lineno="278"><highlight class="normal"></highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>hlsl;</highlight></codeline>
<codeline lineno="280"><highlight class="normal">}</highlight></codeline>
<codeline lineno="281"><highlight class="normal"></highlight></codeline>
<codeline lineno="282"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;StcodeBuildFlags<sp/>FLAGS&gt;</highlight></codeline>
<codeline lineno="283"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="namespaceassembly_1a9de4b8030531cb2cf9e84af47107d2aa" kindref="member">build_stcode_for_named_const</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structsemantic_1_1NamedConstDefInfo" kindref="compound">semantic::NamedConstDefInfo</ref><sp/>&amp;def,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dest_register,<sp/><ref refid="classshc_1_1VariantContext" kindref="compound">shc::VariantContext</ref><sp/>&amp;ctx,</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/>IMemAlloc<sp/>*tmp_memory,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>add_sampler_vars)</highlight></codeline>
<codeline lineno="285"><highlight class="normal">{</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal"><ref refid="namespacesemantic_1a1fd7ba909c618ad56fbacae8b3226182" kindref="member">semantic::VariableType</ref>;</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal"><ref refid="namespaceShaderParser" kindref="compound">ShaderParser</ref>;</highlight></codeline>
<codeline lineno="288"><highlight class="normal"></highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>BUILD_BYTECODE<sp/>=<sp/>FLAGS<sp/>&amp;<sp/><ref refid="structassembly_1_1StcodeBuildFlagsBits_1a3ef5928b0782d6f7a0b6b39b1245e5f3" kindref="member">StcodeBuildFlagsBits::BYTECODE</ref>;</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>BUILD_CPP<sp/>=<sp/>FLAGS<sp/>&amp;<sp/><ref refid="structassembly_1_1StcodeBuildFlagsBits_1a3bc117f2628c89fc9fa9d099c3357c22" kindref="member">StcodeBuildFlagsBits::CPP</ref>;</highlight></codeline>
<codeline lineno="291"><highlight class="normal"></highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static_assert</highlight><highlight class="normal">(BUILD_BYTECODE<sp/>||<sp/>BUILD_CPP);</highlight></codeline>
<codeline lineno="293"><highlight class="normal"></highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(def.<ref refid="structsemantic_1_1NamedConstDefInfo_1aa18633d67a9a9e2c726ad327541a55f7" kindref="member">hardcodedRegister</ref><sp/>&gt;=<sp/>0)</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="296"><highlight class="normal"></highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><ref refid="structParser" kindref="compound">Parser</ref><sp/>&amp;parser<sp/>=<sp/>ctx.<ref refid="classshc_1_1VariantContext_1a02952e27d2d5e304daad76b11cb1f4ad" kindref="member">tgtCtx</ref>().<ref refid="classshc_1_1TargetContext_1a2fda184b8cc1a5f05c7a8c24b01c2e86" kindref="member">sourceParseState</ref>().<ref refid="structSourceFileParseState_1a81f86a8879fd00d8c687e5c4e7fe4068" kindref="member">parser</ref>;</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><ref refid="classShaderParser_1_1ExpressionParser" kindref="compound">ExpressionParser</ref><sp/>exprParser{ctx};</highlight></codeline>
<codeline lineno="299"><highlight class="normal"></highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;stBytecodeAccum<sp/>=<sp/>ctx.<ref refid="classshc_1_1VariantContext_1a4d4c5240b72856d0eeaccfc5ae8d976f" kindref="member">stBytecode</ref>();</highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;stCppcodeAccum<sp/>=<sp/>ctx.<ref refid="classshc_1_1VariantContext_1a45351b6130235b4bde86f2fb2bac44fe" kindref="member">cppStcode</ref>();</highlight></codeline>
<codeline lineno="302"><highlight class="normal"></highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>registerConstSettingForValidation<sp/>=<sp/>[&amp;](</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>reg,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>float_count)<sp/>{</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(DAGOR_UNLIKELY(<ref refid="namespaceshc_1a47efde6b3d493adbe2119a5593807d36" kindref="member">shc::config</ref>().<ref refid="structshc_1_1CompilerConfig_1a99d673f1c57708e8811381b115fd8072" kindref="member">generateCppStcodeValidationData</ref><sp/>&amp;&amp;<sp/>def.<ref refid="structsemantic_1_1NamedConstDefInfo_1a1618a590cbf1c99259813de7cb83c29a" kindref="member">isDynamic</ref>))</highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>G_ASSERT(stCppcodeAccum.cppStcode.constMask);</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>stCppcodeAccum.cppStcode.constMask-&gt;add(reg,<sp/>float_count,<sp/>def.<ref refid="structsemantic_1_1NamedConstDefInfo_1a17d28ce51c6f4cd40d3e731e69c63392" kindref="member">stage</ref>);</highlight></codeline>
<codeline lineno="308"><highlight class="normal"></highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(def.<ref refid="structsemantic_1_1NamedConstDefInfo_1a17d28ce51c6f4cd40d3e731e69c63392" kindref="member">stage</ref><sp/>!=<sp/>STAGE_CS<sp/>&amp;&amp;<sp/>def.<ref refid="structsemantic_1_1NamedConstDefInfo_1a20cadfab62d2fe81e136c3c5b581a030" kindref="member">regSpace</ref><sp/>==<sp/><ref refid="hlslRegisters_8h_1aa3a591153956a0cd6630e2d20870fb9bae4c03c06cbf9b4ae8c9407282006de68" kindref="member">HLSL_RSPACE_C</ref><sp/>&amp;&amp;<sp/>ctx.<ref refid="classshc_1_1VariantContext_1a1cd6c96432c33d5741b597ad37709583" kindref="member">shCtx</ref>().<ref refid="classshc_1_1ShaderContext_1a6290b6c1649dfc5f77d7fd395ed9854f" kindref="member">blockLevel</ref>()<sp/>==<sp/><ref refid="namedConst_8h_1a8df4796c58d0d8445eaf37bb57425b6cad898411bc00251ab145d6c0d5971f3ab" kindref="member">ShaderBlockLevel::GLOBAL_CONST</ref>)</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ShaderStage<sp/>otherStage<sp/>=<sp/>def.<ref refid="structsemantic_1_1NamedConstDefInfo_1a17d28ce51c6f4cd40d3e731e69c63392" kindref="member">stage</ref><sp/>==<sp/>STAGE_VS<sp/>?<sp/>STAGE_PS<sp/>:<sp/>STAGE_VS;</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stCppcodeAccum.cppStcode.constMask-&gt;add(reg,<sp/>float_count,<sp/>otherStage);</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="316"><highlight class="normal"></highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*varName<sp/>=<sp/>def.<ref refid="structsemantic_1_1NamedConstDefInfo_1aa34d1200eefa8c3bfa01ad34fc659012" kindref="member">mangledName</ref>.c_str();</highlight></codeline>
<codeline lineno="318"><highlight class="normal"></highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>shcod<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><ref refid="structStcodeRoutine_1a52f41230f067f3067000adef9bfb5eb9" kindref="member">StcodeRoutine::ResourceType</ref><sp/>resType<sp/>=<sp/><ref refid="structStcodeRoutine_1a52f41230f067f3067000adef9bfb5eb9a696b031073e74bf2cb98e5ef201d4aa3" kindref="member">StcodeRoutine::ResourceType::UNKNOWN</ref>;</highlight></codeline>
<codeline lineno="321"><highlight class="normal"></highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>float4_to_cod[STAGE_MAX]<sp/>=<sp/>{SHCOD_CS_CONST,<sp/>SHCOD_FSH_CONST,<sp/>SHCOD_VPR_CONST};</highlight></codeline>
<codeline lineno="324"><highlight class="normal"></highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(def.<ref refid="structsemantic_1_1NamedConstDefInfo_1a263a1698c52462d32bec85c14a4e6dd1" kindref="member">isBindless</ref>)</highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>shcod<sp/>=<sp/>SHCOD_REG_BINDLESS;</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(def.<ref refid="structsemantic_1_1NamedConstDefInfo_1a40a99bfe135ba6f6802136b1389a5aca" kindref="member">type</ref><sp/>==<sp/>VariableType::uav)</highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>shcod<sp/>=<sp/>def.<ref refid="structsemantic_1_1NamedConstDefInfo_1a779da705277912ae2c2cfe818c24c7b0" kindref="member">shvarType</ref><sp/>==<sp/>SHVT_TEXTURE<sp/>?<sp/>SHCOD_RWTEX<sp/>:<sp/>SHCOD_RWBUF;</highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>resType<sp/>=<sp/>def.<ref refid="structsemantic_1_1NamedConstDefInfo_1a779da705277912ae2c2cfe818c24c7b0" kindref="member">shvarType</ref><sp/>==<sp/>SHVT_TEXTURE<sp/>?<sp/><ref refid="structStcodeRoutine_1a52f41230f067f3067000adef9bfb5eb9a9c4288764cb73a83f46c7f4b70f7f0da" kindref="member">StcodeRoutine::ResourceType::RWTEX</ref><sp/>:<sp/><ref refid="structStcodeRoutine_1a52f41230f067f3067000adef9bfb5eb9a7c1c2306b9742b4ad50eadaaa754916b" kindref="member">StcodeRoutine::ResourceType::RWBUF</ref>;</highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(def.<ref refid="structsemantic_1_1NamedConstDefInfo_1a779da705277912ae2c2cfe818c24c7b0" kindref="member">shvarType</ref><sp/>==<sp/>SHVT_TEXTURE)</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>shcod<sp/>=<sp/>def.<ref refid="structsemantic_1_1NamedConstDefInfo_1a17d28ce51c6f4cd40d3e731e69c63392" kindref="member">stage</ref><sp/>==<sp/>STAGE_VS<sp/>?<sp/>SHCOD_TEXTURE_VS<sp/>:<sp/>SHCOD_TEXTURE;</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>resType<sp/>=<sp/><ref refid="structStcodeRoutine_1a52f41230f067f3067000adef9bfb5eb9a3f92f542bd9ec48f912b9350e22736ac" kindref="member">StcodeRoutine::ResourceType::TEXTURE</ref>;</highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(def.<ref refid="structsemantic_1_1NamedConstDefInfo_1a779da705277912ae2c2cfe818c24c7b0" kindref="member">shvarType</ref><sp/>==<sp/>SHVT_SAMPLER)</highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>resType<sp/>=<sp/><ref refid="structStcodeRoutine_1a52f41230f067f3067000adef9bfb5eb9aaa4fc1f642950410dd11d691fe974cca" kindref="member">StcodeRoutine::ResourceType::SAMPLER</ref>;</highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(def.<ref refid="structsemantic_1_1NamedConstDefInfo_1a40a99bfe135ba6f6802136b1389a5aca" kindref="member">type</ref><sp/>==<sp/>VariableType::cbuf)</highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>shcod<sp/>=<sp/>SHCOD_CONST_BUFFER;</highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>resType<sp/>=<sp/><ref refid="structStcodeRoutine_1a52f41230f067f3067000adef9bfb5eb9ab1cd3c72eeddd2a54d21c01e505b2685" kindref="member">StcodeRoutine::ResourceType::CONST_BUFFER</ref>;</highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(def.<ref refid="structsemantic_1_1NamedConstDefInfo_1a40a99bfe135ba6f6802136b1389a5aca" kindref="member">type</ref><sp/>==<sp/>VariableType::buf)</highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>shcod<sp/>=<sp/>SHCOD_BUFFER;</highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>resType<sp/>=<sp/><ref refid="structStcodeRoutine_1a52f41230f067f3067000adef9bfb5eb9a17de626bcae5109bb2f7a66dfc4a8a1d" kindref="member">StcodeRoutine::ResourceType::BUFFER</ref>;</highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(def.<ref refid="structsemantic_1_1NamedConstDefInfo_1a40a99bfe135ba6f6802136b1389a5aca" kindref="member">type</ref><sp/>==<sp/>VariableType::tlas)</highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>shcod<sp/>=<sp/>SHCOD_TLAS;</highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>resType<sp/>=<sp/><ref refid="structStcodeRoutine_1a52f41230f067f3067000adef9bfb5eb9a76f4c6aede139c265f747d185346ddc2" kindref="member">StcodeRoutine::ResourceType::TLAS</ref>;</highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(def.<ref refid="structsemantic_1_1NamedConstDefInfo_1a40a99bfe135ba6f6802136b1389a5aca" kindref="member">type</ref><sp/>==<sp/>VariableType::sampler)</highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>shcod<sp/>=<sp/>SHCOD_GLOB_SAMPLER;</highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>resType<sp/>=<sp/><ref refid="structStcodeRoutine_1a52f41230f067f3067000adef9bfb5eb9aaa4fc1f642950410dd11d691fe974cca" kindref="member">StcodeRoutine::ResourceType::SAMPLER</ref>;</highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>G_ASSERT(def.<ref refid="structsemantic_1_1NamedConstDefInfo_1a779da705277912ae2c2cfe818c24c7b0" kindref="member">shvarType</ref><sp/>==<sp/>SHVT_COLOR4<sp/>||<sp/>def.<ref refid="structsemantic_1_1NamedConstDefInfo_1a779da705277912ae2c2cfe818c24c7b0" kindref="member">shvarType</ref><sp/>==<sp/>SHVT_INT4<sp/>||<sp/>def.<ref refid="structsemantic_1_1NamedConstDefInfo_1a779da705277912ae2c2cfe818c24c7b0" kindref="member">shvarType</ref><sp/>==<sp/>SHVT_FLOAT4X4);</highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>shcod<sp/>=<sp/>float4_to_cod[def.<ref refid="structsemantic_1_1NamedConstDefInfo_1a17d28ce51c6f4cd40d3e731e69c63392" kindref="member">stage</ref>];</highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="365"><highlight class="normal"></highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>initI<sp/>=<sp/>0;<sp/>initI<sp/>&lt;<sp/>def.<ref refid="structsemantic_1_1NamedConstDefInfo_1a84ea39f76a9f28dad3f3b3f7bbd588f1" kindref="member">initializer</ref>.size();<sp/>++initI)</highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>(BUILD_BYTECODE)</highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ctx.<ref refid="classshc_1_1VariantContext_1a4d4c5240b72856d0eeaccfc5ae8d976f" kindref="member">stBytecode</ref>().regAllocator-&gt;dropCachedStvars();</highlight></codeline>
<codeline lineno="370"><highlight class="normal"></highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;value<sp/>=<sp/>def.<ref refid="structsemantic_1_1NamedConstDefInfo_1a84ea39f76a9f28dad3f3b3f7bbd588f1" kindref="member">initializer</ref>[initI];</highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>elemDestReg<sp/>=<sp/>dest_register<sp/>+<sp/>initI;</highlight></codeline>
<codeline lineno="373"><highlight class="normal"></highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(value.isBuiltinVar())</highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(def.<ref refid="structsemantic_1_1NamedConstDefInfo_1a40a99bfe135ba6f6802136b1389a5aca" kindref="member">type</ref><sp/>==<sp/>VariableType::f44)</highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(def.<ref refid="structsemantic_1_1NamedConstDefInfo_1a17d28ce51c6f4cd40d3e731e69c63392" kindref="member">stage</ref><sp/>!=<sp/>STAGE_VS)</highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="shErrorReporting_8h_1a634f6d6ca9a9f22c5eea4c9b8e20ef31" kindref="member">report_error</ref>(parser,<sp/>def.<ref refid="structsemantic_1_1NamedConstDefInfo_1a52fd7afc7dff324248e68eb1185143a4" kindref="member">varTerm</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Built-in<sp/>matrices<sp/>can<sp/>only<sp/>be<sp/>declared<sp/>in<sp/>the<sp/>vertex<sp/>shader&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>G_ASSERTF(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal">(dest_register)<sp/>&lt;<sp/>0x3FF,<sp/></highlight><highlight class="stringliteral">&quot;id=%d<sp/>base=%d&quot;</highlight><highlight class="normal">,<sp/>dest_register,<sp/>initI);</highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>gmType<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structStcodeRoutine_1a8ea93f019765304f450c1924cb84c52c" kindref="member">StcodeRoutine::GlobMatrixType</ref><sp/>gmTypeForCpp;</highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(value.builtinVarNum())</highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>SHADER_TOKENS::SHTOK_globtm:</highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gmType<sp/>=<sp/>P1_SHCOD_G_TM_GLOBTM;</highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gmTypeForCpp<sp/>=<sp/><ref refid="structStcodeRoutine_1a8ea93f019765304f450c1924cb84c52ca04af3789c41e31cd71c10e1e4dbbec57" kindref="member">StcodeRoutine::GlobMatrixType::GLOB</ref>;</highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>SHADER_TOKENS::SHTOK_projtm:</highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gmType<sp/>=<sp/>P1_SHCOD_G_TM_PROJTM;</highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gmTypeForCpp<sp/>=<sp/><ref refid="structStcodeRoutine_1a8ea93f019765304f450c1924cb84c52cadd7512f5e0289cddce66b0f8bca0c280" kindref="member">StcodeRoutine::GlobMatrixType::PROJ</ref>;</highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>SHADER_TOKENS::SHTOK_viewprojtm:</highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gmType<sp/>=<sp/>P1_SHCOD_G_TM_VIEWPROJTM;</highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gmTypeForCpp<sp/>=<sp/><ref refid="structStcodeRoutine_1a8ea93f019765304f450c1924cb84c52ca05159953951324f5cf786f86bdd340bd" kindref="member">StcodeRoutine::GlobMatrixType::VIEWPROJ</ref>;</highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:<sp/>G_ASSERTF(0,<sp/></highlight><highlight class="stringliteral">&quot;builtin<sp/>var<sp/>token<sp/>id<sp/>=<sp/>%d&quot;</highlight><highlight class="normal">,<sp/>value.builtinVarNum());</highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>(BUILD_CPP)</highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stCppcodeAccum.cppStcode.addShaderGlobMatrix(def.<ref refid="structsemantic_1_1NamedConstDefInfo_1a17d28ce51c6f4cd40d3e731e69c63392" kindref="member">stage</ref>,<sp/>gmTypeForCpp,<sp/>varName,<sp/>elemDestReg);</highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>registerConstSettingForValidation(elemDestReg,<sp/><ref refid="namespacesemantic_1ad904cd91752c2bbdd55d5819dbbf7c55" kindref="member">semantic::vt_float_size</ref>(VariableType::f44));</highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>(BUILD_BYTECODE)</highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stBytecodeAccum.push_stcode(shaderopcode::makeOp2_8_16(SHCOD_G_TM,<sp/>gmType,<sp/>elemDestReg));</highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>builtin_v<sp/>=<sp/>-1,<sp/>builtin_cp<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(value.builtinVarNum())</highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>SHADER_TOKENS::SHTOK_local_view_x:</highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>builtin_v<sp/>=<sp/>SHCOD_LVIEW;</highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>builtin_cp<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>SHADER_TOKENS::SHTOK_local_view_y:</highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>builtin_v<sp/>=<sp/>SHCOD_LVIEW;</highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>builtin_cp<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>SHADER_TOKENS::SHTOK_local_view_z:</highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>builtin_v<sp/>=<sp/>SHCOD_LVIEW;</highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>builtin_cp<sp/>=<sp/>2;</highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>SHADER_TOKENS::SHTOK_local_view_pos:</highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>builtin_v<sp/>=<sp/>SHCOD_LVIEW;</highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>builtin_cp<sp/>=<sp/>3;</highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>SHADER_TOKENS::SHTOK_world_local_x:</highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>builtin_v<sp/>=<sp/>SHCOD_TMWORLD;</highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>builtin_cp<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>SHADER_TOKENS::SHTOK_world_local_y:</highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>builtin_v<sp/>=<sp/>SHCOD_TMWORLD;</highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>builtin_cp<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>SHADER_TOKENS::SHTOK_world_local_z:</highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>builtin_v<sp/>=<sp/>SHCOD_TMWORLD;</highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>builtin_cp<sp/>=<sp/>2;</highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>SHADER_TOKENS::SHTOK_world_local_pos:</highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>builtin_v<sp/>=<sp/>SHCOD_TMWORLD;</highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>builtin_cp<sp/>=<sp/>3;</highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:<sp/>G_ASSERT(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(def.<ref refid="structsemantic_1_1NamedConstDefInfo_1a40a99bfe135ba6f6802136b1389a5aca" kindref="member">type</ref><sp/>&gt;<sp/>VariableType::f4<sp/>&amp;&amp;<sp/>!(def.<ref refid="structsemantic_1_1NamedConstDefInfo_1a40a99bfe135ba6f6802136b1389a5aca" kindref="member">type</ref><sp/>==<sp/>VariableType::f44<sp/>&amp;&amp;<sp/>def.<ref refid="structsemantic_1_1NamedConstDefInfo_1aa5581e46d56dba52bddebcc9663f2682" kindref="member">isRegularArray</ref>()))</highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="shErrorReporting_8h_1a634f6d6ca9a9f22c5eea4c9b8e20ef31" kindref="member">report_error</ref>(parser,<sp/>def.<ref refid="structsemantic_1_1NamedConstDefInfo_1a52fd7afc7dff324248e68eb1185143a4" kindref="member">varTerm</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Lvalue<sp/>must<sp/>be<sp/>f1-4<sp/>variable&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="447"><highlight class="normal"></highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>(BUILD_BYTECODE)</highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classRegister" kindref="compound">Register</ref><sp/>cr<sp/>=<sp/>stBytecodeAccum.regAllocator-&gt;add_vec_reg();</highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stBytecodeAccum.push_stcode(shaderopcode::makeOp2(builtin_v,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">(cr),<sp/>builtin_cp));</highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stBytecodeAccum.push_stcode(shaderopcode::makeOp2(shcod,<sp/>elemDestReg,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">(cr)));</highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>(BUILD_CPP)</highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stCppcodeAccum.cppStcode.addShaderGlobVec(def.<ref refid="structsemantic_1_1NamedConstDefInfo_1a17d28ce51c6f4cd40d3e731e69c63392" kindref="member">stage</ref>,</highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>builtin_v<sp/>==<sp/>SHCOD_LVIEW<sp/>?<sp/><ref refid="structStcodeRoutine_1a2e19d59b2785fa42c7084cd2e0fa45f3a5824b315fdbb0f42abfe1bb03f78c270" kindref="member">StcodeRoutine::GlobVecType::VIEW</ref><sp/>:<sp/><ref refid="structStcodeRoutine" kindref="compound">StcodeRoutine</ref>::GlobVecType::WORLD,<sp/>varName,<sp/>elemDestReg,</highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>builtin_cp);</highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>registerConstSettingForValidation(elemDestReg,<sp/><ref refid="namespacesemantic_1ad904cd91752c2bbdd55d5819dbbf7c55" kindref="member">semantic::vt_float_size</ref>(VariableType::f4));</highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(def.<ref refid="structsemantic_1_1NamedConstDefInfo_1a779da705277912ae2c2cfe818c24c7b0" kindref="member">shvarType</ref><sp/>==<sp/>SHVT_COLOR4<sp/>||<sp/>def.<ref refid="structsemantic_1_1NamedConstDefInfo_1a779da705277912ae2c2cfe818c24c7b0" kindref="member">shvarType</ref><sp/>==<sp/>SHVT_INT4)</highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>G_ASSERT(value.isArithmExpr()<sp/>||<sp/>value.isArithmConst());</highlight></codeline>
<codeline lineno="466"><highlight class="normal"></highlight></codeline>
<codeline lineno="467"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>(BUILD_BYTECODE)</highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Tab&lt;int&gt;<sp/>cod(tmpmem);</highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classRegister" kindref="compound">Register</ref><sp/>dr<sp/>=<sp/>stBytecodeAccum.regAllocator-&gt;add_vec_reg();</highlight></codeline>
<codeline lineno="471"><highlight class="normal"></highlight></codeline>
<codeline lineno="472"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(value.isArithmConst())</highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Expression::assembleBytecodeForConstant(cod,<sp/>value.arithmConst(),<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">(dr));</highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>value.arithmExpr().assembleBytecode(cod,<sp/>dr,<sp/>*ctx.<ref refid="classshc_1_1VariantContext_1a4d4c5240b72856d0eeaccfc5ae8d976f" kindref="member">stBytecode</ref>().regAllocator,<sp/>def.<ref refid="structsemantic_1_1NamedConstDefInfo_1a779da705277912ae2c2cfe818c24c7b0" kindref="member">shvarType</ref><sp/>==<sp/>SHVT_INT4);</highlight></codeline>
<codeline lineno="476"><highlight class="normal"></highlight></codeline>
<codeline lineno="477"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cod.push_back(shaderopcode::makeOp2(shcod,<sp/>elemDestReg,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">(dr)));</highlight></codeline>
<codeline lineno="478"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stBytecodeAccum.append_alt_stcode(def.<ref refid="structsemantic_1_1NamedConstDefInfo_1a1618a590cbf1c99259813de7cb83c29a" kindref="member">isDynamic</ref>,<sp/>cod);</highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="480"><highlight class="normal"></highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>(BUILD_CPP)</highlight></codeline>
<codeline lineno="482"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="483"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structStcodeExpression" kindref="compound">StcodeExpression</ref><sp/>cppExpr;</highlight></codeline>
<codeline lineno="484"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(value.isArithmConst())</highlight></codeline>
<codeline lineno="485"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Expression::assembleCppForConstant(cppExpr,<sp/>value.arithmConst());</highlight></codeline>
<codeline lineno="486"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="487"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>value.arithmExpr().assembleCpp(cppExpr,<sp/>def.<ref refid="structsemantic_1_1NamedConstDefInfo_1a779da705277912ae2c2cfe818c24c7b0" kindref="member">shvarType</ref><sp/>==<sp/>SHVT_INT4);</highlight></codeline>
<codeline lineno="488"><highlight class="normal"></highlight></codeline>
<codeline lineno="489"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(def.<ref refid="structsemantic_1_1NamedConstDefInfo_1a1618a590cbf1c99259813de7cb83c29a" kindref="member">isDynamic</ref>)</highlight></codeline>
<codeline lineno="490"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="491"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stCppcodeAccum.cppStcode.addShaderConst(def.<ref refid="structsemantic_1_1NamedConstDefInfo_1a17d28ce51c6f4cd40d3e731e69c63392" kindref="member">stage</ref>,<sp/>def.<ref refid="structsemantic_1_1NamedConstDefInfo_1a779da705277912ae2c2cfe818c24c7b0" kindref="member">shvarType</ref>,<sp/>def.<ref refid="structsemantic_1_1NamedConstDefInfo_1a40a99bfe135ba6f6802136b1389a5aca" kindref="member">type</ref>,<sp/>varName,<sp/>dest_register,<sp/>eastl::move(cppExpr),</highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>initI);</highlight></codeline>
<codeline lineno="493"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="495"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="496"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stCppcodeAccum.cppStblkcode.addShaderConst(def.<ref refid="structsemantic_1_1NamedConstDefInfo_1a779da705277912ae2c2cfe818c24c7b0" kindref="member">shvarType</ref>,<sp/>def.<ref refid="structsemantic_1_1NamedConstDefInfo_1a40a99bfe135ba6f6802136b1389a5aca" kindref="member">type</ref>,<sp/>varName,<sp/>dest_register,<sp/>eastl::move(cppExpr),<sp/>initI);</highlight></codeline>
<codeline lineno="497"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="498"><highlight class="normal"></highlight></codeline>
<codeline lineno="499"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>In<sp/>this<sp/>codepath<sp/>matrices<sp/>are<sp/>set<sp/>row-by-row,<sp/>so<sp/>clamp<sp/>by<sp/>f4</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="500"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>registerConstSettingForValidation(elemDestReg,</highlight></codeline>
<codeline lineno="501"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacesemantic_1ad904cd91752c2bbdd55d5819dbbf7c55" kindref="member">semantic::vt_float_size</ref>(def.<ref refid="structsemantic_1_1NamedConstDefInfo_1a40a99bfe135ba6f6802136b1389a5aca" kindref="member">type</ref><sp/>==<sp/>VariableType::f44<sp/>?<sp/>VariableType::f4<sp/>:<sp/>def.type));</highlight></codeline>
<codeline lineno="502"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="503"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="504"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="505"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="506"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(value.isGlobalVar())</highlight></codeline>
<codeline lineno="507"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="508"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(def.<ref refid="structsemantic_1_1NamedConstDefInfo_1a779da705277912ae2c2cfe818c24c7b0" kindref="member">shvarType</ref><sp/>==<sp/>SHVT_SAMPLER)</highlight></codeline>
<codeline lineno="509"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="510"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>G_ASSERT(initI<sp/>==<sp/>0);</highlight></codeline>
<codeline lineno="511"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*samplerName<sp/>=<sp/>value.varName();</highlight></codeline>
<codeline lineno="512"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classSampler" kindref="compound">Sampler</ref><sp/>*smp<sp/>=<sp/>ctx.<ref refid="classshc_1_1VariantContext_1a02952e27d2d5e304daad76b11cb1f4ad" kindref="member">tgtCtx</ref>().<ref refid="classshc_1_1TargetContext_1a752f5f70f8d04a70f87a34102a85f83a" kindref="member">samplers</ref>().<ref refid="classSamplerTable_1a1c33dc6753383f00e5b365e45a541194" kindref="member">get</ref>(samplerName);</highlight></codeline>
<codeline lineno="513"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>G_ASSERT(smp);</highlight></codeline>
<codeline lineno="514"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(smp-&gt;<ref refid="classSampler_1aad2d87548f020e74ecda319217e76f05" kindref="member">mIsStaticSampler</ref>)</highlight></codeline>
<codeline lineno="515"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="516"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>String<sp/>bcName{},<sp/>amName{},<sp/>mbName{};</highlight></codeline>
<codeline lineno="517"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>bcReg<sp/>=<sp/>-1,<sp/>amReg<sp/>=<sp/>-1,<sp/>mbReg<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="518"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>bcIsConst<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/>amIsConst<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/>mbIsConst<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="519"><highlight class="normal"></highlight></codeline>
<codeline lineno="520"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(smp-&gt;<ref refid="classSampler_1a89bf1bb0bf3459f272eabefc00c51036" kindref="member">mBorderColor</ref>)</highlight></codeline>
<codeline lineno="521"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="522"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bcName<sp/>=<sp/>String(32,<sp/></highlight><highlight class="stringliteral">&quot;__border_color%i&quot;</highlight><highlight class="normal">,<sp/>smp-&gt;<ref refid="classSampler_1a586820aebf4b1e0ecb83206cbdaff612" kindref="member">mId</ref>);</highlight></codeline>
<codeline lineno="523"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>String<sp/>local_bc(32,<sp/></highlight><highlight class="stringliteral">&quot;local<sp/>float4<sp/>%s<sp/>=<sp/>0;&quot;</highlight><highlight class="normal">,<sp/>bcName);</highlight></codeline>
<codeline lineno="524"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>*local_bc_stat<sp/>=<sp/><ref refid="namespaceShaderParser_1acec58086555ee7795c411d86d0df6143" kindref="member">parse_shader_stat</ref>(local_bc,<sp/>local_bc.length(),<sp/>ctx.<ref refid="classshc_1_1VariantContext_1a02952e27d2d5e304daad76b11cb1f4ad" kindref="member">tgtCtx</ref>(),<sp/>tmp_memory);</highlight></codeline>
<codeline lineno="525"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>local_bc_stat-&gt;local_decl-&gt;expr<sp/>=<sp/>smp-&gt;<ref refid="classSampler_1a89bf1bb0bf3459f272eabefc00c51036" kindref="member">mBorderColor</ref>;</highlight></codeline>
<codeline lineno="526"><highlight class="normal"></highlight></codeline>
<codeline lineno="527"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>[variable,<sp/>rootExpr]<sp/>=<sp/>*<ref refid="namespacesemantic_1aa7d8cdb06eb014e4ae6ba3205f29b555" kindref="member">semantic::parse_local_var_decl</ref>(*local_bc_stat-&gt;local_decl,<sp/>ctx);</highlight></codeline>
<codeline lineno="528"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bcIsConst<sp/>=<sp/>variable-&gt;isConst;</highlight></codeline>
<codeline lineno="529"><highlight class="normal"></highlight></codeline>
<codeline lineno="530"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(variable-&gt;isConst)</highlight></codeline>
<codeline lineno="531"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="532"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>smp-&gt;<ref refid="classSampler_1ac5d795f31024d0511b95a04a09148f19" kindref="member">mSamplerInfo</ref>.border_color<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">d3d::BorderColor::Color</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(</highlight></codeline>
<codeline lineno="533"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(variable-&gt;cv.c.a<sp/>?<sp/>0xFF000000<sp/>:<sp/>0)<sp/>|<sp/>((variable-&gt;cv.c.r<sp/>||<sp/>variable-&gt;cv.c.g<sp/>||<sp/>variable-&gt;cv.c.b)<sp/>?<sp/>0x00FFFFFF<sp/>:<sp/>0));</highlight></codeline>
<codeline lineno="534"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="535"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="536"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="537"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assembly::assemble_local_var&lt;FLAGS&gt;(variable,<sp/>rootExpr.get(),<sp/>local_bc_stat-&gt;local_decl-&gt;name,<sp/>ctx);</highlight></codeline>
<codeline lineno="538"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>G_ASSERT(!BUILD_BYTECODE<sp/>||<sp/>variable-&gt;reg<sp/>&gt;=<sp/>0);</highlight></codeline>
<codeline lineno="539"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bcReg<sp/>=<sp/>variable-&gt;reg;</highlight></codeline>
<codeline lineno="540"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="541"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="542"><highlight class="normal"></highlight></codeline>
<codeline lineno="543"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(smp-&gt;<ref refid="classSampler_1a56ba538c4e746be9cb37bd12e1ee40e3" kindref="member">mAnisotropicMax</ref>)</highlight></codeline>
<codeline lineno="544"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="545"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>amName<sp/>=<sp/>String(32,<sp/></highlight><highlight class="stringliteral">&quot;__anisotropic_max%i&quot;</highlight><highlight class="normal">,<sp/>smp-&gt;<ref refid="classSampler_1a586820aebf4b1e0ecb83206cbdaff612" kindref="member">mId</ref>);</highlight></codeline>
<codeline lineno="546"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>String<sp/>local_am(32,<sp/></highlight><highlight class="stringliteral">&quot;local<sp/>float4<sp/>%s<sp/>=<sp/>0;&quot;</highlight><highlight class="normal">,<sp/>amName);</highlight></codeline>
<codeline lineno="547"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>*local_am_stat<sp/>=<sp/><ref refid="namespaceShaderParser_1acec58086555ee7795c411d86d0df6143" kindref="member">parse_shader_stat</ref>(local_am,<sp/>local_am.length(),<sp/>ctx.<ref refid="classshc_1_1VariantContext_1a02952e27d2d5e304daad76b11cb1f4ad" kindref="member">tgtCtx</ref>(),<sp/>tmp_memory);</highlight></codeline>
<codeline lineno="548"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>local_am_stat-&gt;local_decl-&gt;expr<sp/>=<sp/>smp-&gt;<ref refid="classSampler_1a56ba538c4e746be9cb37bd12e1ee40e3" kindref="member">mAnisotropicMax</ref>;</highlight></codeline>
<codeline lineno="549"><highlight class="normal"></highlight></codeline>
<codeline lineno="550"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>[variable,<sp/>rootExpr]<sp/>=<sp/>*<ref refid="namespacesemantic_1aa7d8cdb06eb014e4ae6ba3205f29b555" kindref="member">semantic::parse_local_var_decl</ref>(*local_am_stat-&gt;local_decl,<sp/>ctx);</highlight></codeline>
<codeline lineno="551"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>amIsConst<sp/>=<sp/>variable-&gt;isConst;</highlight></codeline>
<codeline lineno="552"><highlight class="normal"></highlight></codeline>
<codeline lineno="553"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(variable-&gt;isConst)</highlight></codeline>
<codeline lineno="554"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>smp-&gt;<ref refid="classSampler_1ac5d795f31024d0511b95a04a09148f19" kindref="member">mSamplerInfo</ref>.anisotropic_max<sp/>=<sp/>variable-&gt;cv.r;</highlight></codeline>
<codeline lineno="555"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="556"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="557"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assembly::assemble_local_var&lt;FLAGS&gt;(variable,<sp/>rootExpr.get(),<sp/>local_am_stat-&gt;local_decl-&gt;name,<sp/>ctx);</highlight></codeline>
<codeline lineno="558"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>G_ASSERT(!BUILD_BYTECODE<sp/>||<sp/>variable-&gt;reg<sp/>&gt;=<sp/>0);</highlight></codeline>
<codeline lineno="559"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>amReg<sp/>=<sp/>variable-&gt;reg;</highlight></codeline>
<codeline lineno="560"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="561"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="562"><highlight class="normal"></highlight></codeline>
<codeline lineno="563"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(smp-&gt;<ref refid="classSampler_1ab808adf29f17863963a95a8042c56be7" kindref="member">mMipmapBias</ref>)</highlight></codeline>
<codeline lineno="564"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="565"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mbName<sp/>=<sp/>String(32,<sp/></highlight><highlight class="stringliteral">&quot;__mipmap_bias%i&quot;</highlight><highlight class="normal">,<sp/>smp-&gt;<ref refid="classSampler_1a586820aebf4b1e0ecb83206cbdaff612" kindref="member">mId</ref>);</highlight></codeline>
<codeline lineno="566"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>String<sp/>local_mb(32,<sp/></highlight><highlight class="stringliteral">&quot;local<sp/>float4<sp/>%s<sp/>=<sp/>0;&quot;</highlight><highlight class="normal">,<sp/>mbName);</highlight></codeline>
<codeline lineno="567"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>*local_mb_stat<sp/>=<sp/><ref refid="namespaceShaderParser_1acec58086555ee7795c411d86d0df6143" kindref="member">parse_shader_stat</ref>(local_mb,<sp/>local_mb.length(),<sp/>ctx.<ref refid="classshc_1_1VariantContext_1a02952e27d2d5e304daad76b11cb1f4ad" kindref="member">tgtCtx</ref>(),<sp/>tmp_memory);</highlight></codeline>
<codeline lineno="568"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>local_mb_stat-&gt;local_decl-&gt;expr<sp/>=<sp/>smp-&gt;<ref refid="classSampler_1ab808adf29f17863963a95a8042c56be7" kindref="member">mMipmapBias</ref>;</highlight></codeline>
<codeline lineno="569"><highlight class="normal"></highlight></codeline>
<codeline lineno="570"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>[variable,<sp/>rootExpr]<sp/>=<sp/>*<ref refid="namespacesemantic_1aa7d8cdb06eb014e4ae6ba3205f29b555" kindref="member">semantic::parse_local_var_decl</ref>(*local_mb_stat-&gt;local_decl,<sp/>ctx);</highlight></codeline>
<codeline lineno="571"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mbIsConst<sp/>=<sp/>variable-&gt;isConst;</highlight></codeline>
<codeline lineno="572"><highlight class="normal"></highlight></codeline>
<codeline lineno="573"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(variable-&gt;isConst)</highlight></codeline>
<codeline lineno="574"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>smp-&gt;<ref refid="classSampler_1ac5d795f31024d0511b95a04a09148f19" kindref="member">mSamplerInfo</ref>.mip_map_bias<sp/>=<sp/>variable-&gt;cv.r;</highlight></codeline>
<codeline lineno="575"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="576"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="577"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assembly::assemble_local_var&lt;FLAGS&gt;(variable,<sp/>rootExpr.get(),<sp/>local_mb_stat-&gt;local_decl-&gt;name,<sp/>ctx);</highlight></codeline>
<codeline lineno="578"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>G_ASSERT(!BUILD_BYTECODE<sp/>||<sp/>variable-&gt;reg<sp/>&gt;=<sp/>0);</highlight></codeline>
<codeline lineno="579"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mbReg<sp/>=<sp/>variable-&gt;reg;</highlight></codeline>
<codeline lineno="580"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="581"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="582"><highlight class="normal"></highlight></codeline>
<codeline lineno="583"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>(BUILD_BYTECODE)</highlight></codeline>
<codeline lineno="584"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="585"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stBytecodeAccum.push_stcode(shaderopcode::makeOp3(SHCOD_CALL_FUNCTION,<sp/>functional::BF_REQUEST_SAMPLER,<sp/>smp-&gt;<ref refid="classSampler_1a586820aebf4b1e0ecb83206cbdaff612" kindref="member">mId</ref>,<sp/>4));</highlight></codeline>
<codeline lineno="586"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stBytecodeAccum.push_stcode(value.globVarId());</highlight></codeline>
<codeline lineno="587"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stBytecodeAccum.push_stcode(bcReg);</highlight></codeline>
<codeline lineno="588"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stBytecodeAccum.push_stcode(amReg);</highlight></codeline>
<codeline lineno="589"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stBytecodeAccum.push_stcode(mbReg);</highlight></codeline>
<codeline lineno="590"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="591"><highlight class="normal"></highlight></codeline>
<codeline lineno="592"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>(BUILD_CPP)</highlight></codeline>
<codeline lineno="593"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="594"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>eastl::string<sp/>exprTemplate{</highlight></codeline>
<codeline lineno="595"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>eastl::string::CtorSprintf{},<sp/></highlight><highlight class="stringliteral">&quot;*(uint64_t<sp/>*)%s<sp/>=<sp/>%c&quot;</highlight><highlight class="normal">,<sp/>samplerName,<sp/><ref refid="structStcodeExpression_1a79279ff102576c512783b8af33d787b0" kindref="member">StcodeExpression::EXPR_ELEMENT_PLACEHOLDER</ref>};</highlight></codeline>
<codeline lineno="596"><highlight class="normal"></highlight></codeline>
<codeline lineno="597"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structStcodeExpression" kindref="compound">StcodeExpression</ref><sp/>expr{exprTemplate.c_str()};</highlight></codeline>
<codeline lineno="598"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>argCnt<sp/>=<sp/>4;</highlight></codeline>
<codeline lineno="599"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ZERO<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="600"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>FZERO<sp/>=<sp/>0.f;</highlight></codeline>
<codeline lineno="601"><highlight class="normal"></highlight></codeline>
<codeline lineno="602"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>expr.<ref refid="structStcodeExpression_1a8b51ba11b686a94c48b82ece54692900" kindref="member">specifyNextExprElement</ref>(<ref refid="structStcodeExpression_1aaccadc8df002bf4a50f3700badd92c59a1e49c8ad07b69571bfcafaf18ac9fa5b" kindref="member">StcodeExpression::ElementType::FUNC</ref>,<sp/></highlight><highlight class="stringliteral">&quot;request_sampler&quot;</highlight><highlight class="normal">,<sp/>&amp;argCnt);</highlight></codeline>
<codeline lineno="603"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>expr.<ref refid="structStcodeExpression_1a8b51ba11b686a94c48b82ece54692900" kindref="member">specifyNextExprElement</ref>(<ref refid="structStcodeExpression_1aaccadc8df002bf4a50f3700badd92c59a4c6783e0d3b3d7c183a6b0eca466f0ab" kindref="member">StcodeExpression::ElementType::INT_CONST</ref>,<sp/>&amp;smp-&gt;<ref refid="classSampler_1a586820aebf4b1e0ecb83206cbdaff612" kindref="member">mId</ref>);</highlight></codeline>
<codeline lineno="604"><highlight class="normal"></highlight></codeline>
<codeline lineno="605"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>addParam<sp/>=<sp/>[&amp;](</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>exists,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*val,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*name,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>is_const,<sp/><ref refid="structStcodeExpression_1aaccadc8df002bf4a50f3700badd92c59" kindref="member">StcodeExpression::ElementType</ref><sp/>const_type)<sp/>{</highlight></codeline>
<codeline lineno="606"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*defval<sp/>=<sp/>const_type<sp/>==<sp/><ref refid="structStcodeExpression_1aaccadc8df002bf4a50f3700badd92c59a4c6783e0d3b3d7c183a6b0eca466f0ab" kindref="member">StcodeExpression::ElementType::INT_CONST</ref><sp/>?<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)&amp;ZERO<sp/>:<sp/>(void<sp/>*)&amp;FZERO;</highlight></codeline>
<codeline lineno="607"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(exists)</highlight></codeline>
<codeline lineno="608"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="609"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(is_const)</highlight></codeline>
<codeline lineno="610"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>expr.<ref refid="structStcodeExpression_1a8b51ba11b686a94c48b82ece54692900" kindref="member">specifyNextExprElement</ref>(const_type,<sp/>val);</highlight></codeline>
<codeline lineno="611"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="612"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="613"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>expr.<ref refid="structStcodeExpression_1a8b51ba11b686a94c48b82ece54692900" kindref="member">specifyNextExprElement</ref>(<ref refid="structStcodeExpression_1aaccadc8df002bf4a50f3700badd92c59a39c2c52380c55eebeef3660ad99c19e8" kindref="member">StcodeExpression::ElementType::LOCVAR</ref>,<sp/>name);</highlight></codeline>
<codeline lineno="614"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>expr.<ref refid="structStcodeExpression_1af33ad75172183c87461bdade64cbdaf2" kindref="member">specifyNextExprUnaryOp</ref>(shexpr::UOP_POSITIVE);</highlight></codeline>
<codeline lineno="615"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="616"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="617"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="618"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>expr.<ref refid="structStcodeExpression_1a8b51ba11b686a94c48b82ece54692900" kindref="member">specifyNextExprElement</ref>(const_type,<sp/>defval);</highlight></codeline>
<codeline lineno="619"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="620"><highlight class="normal"></highlight></codeline>
<codeline lineno="621"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>addParam(smp-&gt;<ref refid="classSampler_1a89bf1bb0bf3459f272eabefc00c51036" kindref="member">mBorderColor</ref>,<sp/>&amp;smp-&gt;<ref refid="classSampler_1ac5d795f31024d0511b95a04a09148f19" kindref="member">mSamplerInfo</ref>.border_color,<sp/>bcName,<sp/>bcIsConst,</highlight></codeline>
<codeline lineno="622"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structStcodeExpression_1aaccadc8df002bf4a50f3700badd92c59a4c6783e0d3b3d7c183a6b0eca466f0ab" kindref="member">StcodeExpression::ElementType::INT_CONST</ref>);</highlight></codeline>
<codeline lineno="623"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>addParam(smp-&gt;<ref refid="classSampler_1a56ba538c4e746be9cb37bd12e1ee40e3" kindref="member">mAnisotropicMax</ref>,<sp/>&amp;smp-&gt;<ref refid="classSampler_1ac5d795f31024d0511b95a04a09148f19" kindref="member">mSamplerInfo</ref>.anisotropic_max,<sp/>amName,<sp/>amIsConst,</highlight></codeline>
<codeline lineno="624"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structStcodeExpression_1aaccadc8df002bf4a50f3700badd92c59afd3c4b3f69f8d37b82044b0c07d7f4dd" kindref="member">StcodeExpression::ElementType::REAL_CONST</ref>);</highlight></codeline>
<codeline lineno="625"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>addParam(smp-&gt;<ref refid="classSampler_1ab808adf29f17863963a95a8042c56be7" kindref="member">mMipmapBias</ref>,<sp/>&amp;smp-&gt;<ref refid="classSampler_1ac5d795f31024d0511b95a04a09148f19" kindref="member">mSamplerInfo</ref>.mip_map_bias,<sp/>mbName,<sp/>mbIsConst,</highlight></codeline>
<codeline lineno="626"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structStcodeExpression_1aaccadc8df002bf4a50f3700badd92c59afd3c4b3f69f8d37b82044b0c07d7f4dd" kindref="member">StcodeExpression::ElementType::REAL_CONST</ref>);</highlight></codeline>
<codeline lineno="627"><highlight class="normal"></highlight></codeline>
<codeline lineno="628"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stCppcodeAccum.cppStcode.addStmt(expr.<ref refid="structStcodeExpression_1a37c7fd3237bc1d47dde0b62b9daf1486" kindref="member">releaseAssembledCode</ref>().c_str());</highlight></codeline>
<codeline lineno="629"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="630"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="631"><highlight class="normal"></highlight></codeline>
<codeline lineno="632"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>(BUILD_BYTECODE)</highlight></codeline>
<codeline lineno="633"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="634"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stBytecodeAccum.push_stcode(</highlight></codeline>
<codeline lineno="635"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>shaderopcode::makeOpStageSlot(SHCOD_GLOB_SAMPLER,<sp/>def.<ref refid="structsemantic_1_1NamedConstDefInfo_1a17d28ce51c6f4cd40d3e731e69c63392" kindref="member">stage</ref>,<sp/>dest_register,<sp/>value.globVarId()));</highlight></codeline>
<codeline lineno="636"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="637"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>(BUILD_CPP)</highlight></codeline>
<codeline lineno="638"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="639"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stCppcodeAccum.cppStcode.addGlobalShaderResource(def.<ref refid="structsemantic_1_1NamedConstDefInfo_1a17d28ce51c6f4cd40d3e731e69c63392" kindref="member">stage</ref>,<sp/><ref refid="structStcodeRoutine_1a52f41230f067f3067000adef9bfb5eb9aaa4fc1f642950410dd11d691fe974cca" kindref="member">StcodeRoutine::ResourceType::SAMPLER</ref>,<sp/>def.<ref refid="structsemantic_1_1NamedConstDefInfo_1a52fd7afc7dff324248e68eb1185143a4" kindref="member">varTerm</ref>-&gt;text,</highlight></codeline>
<codeline lineno="640"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>value.varName(),<sp/>dest_register);</highlight></codeline>
<codeline lineno="641"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="642"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="643"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="644"><highlight class="normal"></highlight></codeline>
<codeline lineno="645"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>(BUILD_BYTECODE)</highlight></codeline>
<codeline lineno="646"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="647"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>gc;</highlight></codeline>
<codeline lineno="648"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classRegister" kindref="compound">Register</ref><sp/>reg;</highlight></codeline>
<codeline lineno="649"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(def.<ref refid="structsemantic_1_1NamedConstDefInfo_1a779da705277912ae2c2cfe818c24c7b0" kindref="member">shvarType</ref>)</highlight></codeline>
<codeline lineno="650"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="651"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>SHVT_TEXTURE:</highlight></codeline>
<codeline lineno="652"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gc<sp/>=<sp/>SHCOD_GET_GTEX;</highlight></codeline>
<codeline lineno="653"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>reg<sp/>=<sp/>stBytecodeAccum.regAllocator-&gt;add_reg(def.<ref refid="structsemantic_1_1NamedConstDefInfo_1a779da705277912ae2c2cfe818c24c7b0" kindref="member">shvarType</ref>);</highlight></codeline>
<codeline lineno="654"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="655"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>SHVT_BUFFER:</highlight></codeline>
<codeline lineno="656"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gc<sp/>=<sp/>SHCOD_GET_GBUF;</highlight></codeline>
<codeline lineno="657"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>reg<sp/>=<sp/>stBytecodeAccum.regAllocator-&gt;add_reg(def.<ref refid="structsemantic_1_1NamedConstDefInfo_1a779da705277912ae2c2cfe818c24c7b0" kindref="member">shvarType</ref>);</highlight></codeline>
<codeline lineno="658"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="659"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>SHVT_TLAS:</highlight></codeline>
<codeline lineno="660"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gc<sp/>=<sp/>SHCOD_GET_GTLAS;</highlight></codeline>
<codeline lineno="661"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>reg<sp/>=<sp/>stBytecodeAccum.regAllocator-&gt;add_reg(def.<ref refid="structsemantic_1_1NamedConstDefInfo_1a779da705277912ae2c2cfe818c24c7b0" kindref="member">shvarType</ref>);</highlight></codeline>
<codeline lineno="662"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="663"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>SHVT_FLOAT4X4:</highlight></codeline>
<codeline lineno="664"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gc<sp/>=<sp/>SHCOD_GET_GMAT44;</highlight></codeline>
<codeline lineno="665"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>reg<sp/>=<sp/>stBytecodeAccum.regAllocator-&gt;add_vec_reg(4);</highlight></codeline>
<codeline lineno="666"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="667"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:<sp/>G_ASSERT(0);</highlight></codeline>
<codeline lineno="668"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="669"><highlight class="normal"></highlight></codeline>
<codeline lineno="670"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stBytecodeAccum.push_stcode(shaderopcode::makeOp2(gc,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">(reg),<sp/>value.globVarId()));</highlight></codeline>
<codeline lineno="671"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(shcod<sp/>==<sp/>SHCOD_BUFFER<sp/>||<sp/>shcod<sp/>==<sp/>SHCOD_CONST_BUFFER<sp/>||<sp/>shcod<sp/>==<sp/>SHCOD_TLAS)</highlight></codeline>
<codeline lineno="672"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="673"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>G_ASSERT(initI<sp/>==<sp/>0);</highlight></codeline>
<codeline lineno="674"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stBytecodeAccum.push_stcode(shaderopcode::makeOpStageSlot(shcod,<sp/>def.<ref refid="structsemantic_1_1NamedConstDefInfo_1a17d28ce51c6f4cd40d3e731e69c63392" kindref="member">stage</ref>,<sp/>dest_register,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">(reg)));</highlight></codeline>
<codeline lineno="675"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="676"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="677"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="678"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stBytecodeAccum.push_stcode(shaderopcode::makeOp2(shcod,<sp/>elemDestReg,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">(reg)));</highlight></codeline>
<codeline lineno="679"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(def.<ref refid="structsemantic_1_1NamedConstDefInfo_1a779da705277912ae2c2cfe818c24c7b0" kindref="member">shvarType</ref><sp/>==<sp/>SHVT_FLOAT4X4)</highlight></codeline>
<codeline lineno="680"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="681"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stBytecodeAccum.push_stcode(shaderopcode::makeOp2(shcod,<sp/>elemDestReg<sp/>+<sp/>1,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">(reg)<sp/>+<sp/>1<sp/>*<sp/>4));</highlight></codeline>
<codeline lineno="682"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stBytecodeAccum.push_stcode(shaderopcode::makeOp2(shcod,<sp/>elemDestReg<sp/>+<sp/>2,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">(reg)<sp/>+<sp/>2<sp/>*<sp/>4));</highlight></codeline>
<codeline lineno="683"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stBytecodeAccum.push_stcode(shaderopcode::makeOp2(shcod,<sp/>elemDestReg<sp/>+<sp/>3,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">(reg)<sp/>+<sp/>3<sp/>*<sp/>4));</highlight></codeline>
<codeline lineno="684"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="685"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="686"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="687"><highlight class="normal"></highlight></codeline>
<codeline lineno="688"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>(BUILD_CPP)</highlight></codeline>
<codeline lineno="689"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="690"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(def.<ref refid="structsemantic_1_1NamedConstDefInfo_1a779da705277912ae2c2cfe818c24c7b0" kindref="member">shvarType</ref><sp/>==<sp/>SHVT_FLOAT4X4)</highlight></codeline>
<codeline lineno="691"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="692"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structStcodeExpression" kindref="compound">StcodeExpression</ref><sp/>expr;</highlight></codeline>
<codeline lineno="693"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>expr.<ref refid="structStcodeExpression_1a8b51ba11b686a94c48b82ece54692900" kindref="member">specifyNextExprElement</ref>(<ref refid="structStcodeExpression_1aaccadc8df002bf4a50f3700badd92c59a3e76310ec68ca96f5a593b5ca640b304" kindref="member">StcodeExpression::ElementType::GLOBVAR</ref>,<sp/>value.varName(),<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">,<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="694"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>expr.<ref refid="structStcodeExpression_1af33ad75172183c87461bdade64cbdaf2" kindref="member">specifyNextExprUnaryOp</ref>(shexpr::UOP_POSITIVE);</highlight></codeline>
<codeline lineno="695"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stCppcodeAccum.cppStcode.addShaderConst(def.<ref refid="structsemantic_1_1NamedConstDefInfo_1a17d28ce51c6f4cd40d3e731e69c63392" kindref="member">stage</ref>,<sp/>SHVT_FLOAT4X4,<sp/>VariableType::f44,<sp/>varName,<sp/>dest_register,</highlight></codeline>
<codeline lineno="696"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>eastl::move(expr));</highlight></codeline>
<codeline lineno="697"><highlight class="normal"></highlight></codeline>
<codeline lineno="698"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>registerConstSettingForValidation(elemDestReg,<sp/><ref refid="namespacesemantic_1ad904cd91752c2bbdd55d5819dbbf7c55" kindref="member">semantic::vt_float_size</ref>(VariableType::f44));</highlight></codeline>
<codeline lineno="699"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="700"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="701"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="702"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>G_ASSERT(resType<sp/>!=<sp/><ref refid="structStcodeRoutine_1a52f41230f067f3067000adef9bfb5eb9a696b031073e74bf2cb98e5ef201d4aa3" kindref="member">StcodeRoutine::ResourceType::UNKNOWN</ref>);</highlight></codeline>
<codeline lineno="703"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stCppcodeAccum.cppStcode.addGlobalShaderResource(def.<ref refid="structsemantic_1_1NamedConstDefInfo_1a17d28ce51c6f4cd40d3e731e69c63392" kindref="member">stage</ref>,<sp/>resType,<sp/>varName,<sp/>value.varName(),<sp/>dest_register);</highlight></codeline>
<codeline lineno="704"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="705"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="706"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="707"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="708"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="709"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>buffer[2];</highlight></codeline>
<codeline lineno="710"><highlight class="normal"></highlight></codeline>
<codeline lineno="711"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>G_ASSERT(def.<ref refid="structsemantic_1_1NamedConstDefInfo_1a779da705277912ae2c2cfe818c24c7b0" kindref="member">shvarType</ref><sp/>==<sp/>SHVT_TEXTURE);</highlight></codeline>
<codeline lineno="712"><highlight class="normal"></highlight></codeline>
<codeline lineno="713"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>(BUILD_BYTECODE)</highlight></codeline>
<codeline lineno="714"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="715"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classRegister" kindref="compound">Register</ref><sp/>reg<sp/>=<sp/>stBytecodeAccum.regAllocator-&gt;add_reg(def.<ref refid="structsemantic_1_1NamedConstDefInfo_1a779da705277912ae2c2cfe818c24c7b0" kindref="member">shvarType</ref>);</highlight></codeline>
<codeline lineno="716"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>buffer[0]<sp/>=<sp/>shaderopcode::makeOp2(SHCOD_GET_TEX,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">(reg),<sp/>value.materialVarId());</highlight></codeline>
<codeline lineno="717"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>buffer[1]<sp/>=<sp/>shaderopcode::makeOp2(shcod,<sp/>elemDestReg,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">(reg));</highlight></codeline>
<codeline lineno="718"><highlight class="normal"></highlight></codeline>
<codeline lineno="719"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stBytecodeAccum.append_alt_stcode(def.<ref refid="structsemantic_1_1NamedConstDefInfo_1a1618a590cbf1c99259813de7cb83c29a" kindref="member">isDynamic</ref>,<sp/>make_span_const(buffer,<sp/>2));</highlight></codeline>
<codeline lineno="720"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="721"><highlight class="normal"></highlight></codeline>
<codeline lineno="722"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>(BUILD_CPP)</highlight></codeline>
<codeline lineno="723"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="724"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>@NOTE:<sp/>stage<sp/>gets<sp/>manually<sp/>changed<sp/>to<sp/>PS<sp/>for<sp/>bindless<sp/>textures,<sp/>for<sp/>cpp<sp/>stcode<sp/>we<sp/>need<sp/>the<sp/>original</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="725"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(def.<ref refid="structsemantic_1_1NamedConstDefInfo_1a1618a590cbf1c99259813de7cb83c29a" kindref="member">isDynamic</ref>)</highlight></codeline>
<codeline lineno="726"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="727"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stCppcodeAccum.cppStcode.addDynamicShaderResource(def.<ref refid="structsemantic_1_1NamedConstDefInfo_1a17d28ce51c6f4cd40d3e731e69c63392" kindref="member">stage</ref>,<sp/><ref refid="structStcodeRoutine_1a52f41230f067f3067000adef9bfb5eb9a3f92f542bd9ec48f912b9350e22736ac" kindref="member">StcodeRoutine::ResourceType::TEXTURE</ref>,<sp/>varName,</highlight></codeline>
<codeline lineno="728"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>value.varName(),<sp/>elemDestReg);</highlight></codeline>
<codeline lineno="729"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="730"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="namespaceshc_1a47efde6b3d493adbe2119a5593807d36" kindref="member">shc::config</ref>().<ref refid="structshc_1_1CompilerConfig_1a4b837b76cbc27d82052a7d67d8d138c1" kindref="member">enableBindless</ref>)</highlight></codeline>
<codeline lineno="731"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="732"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stCppcodeAccum.cppStblkcode.addBindlessShaderTexture(varName,<sp/>value.varName(),<sp/>elemDestReg);</highlight></codeline>
<codeline lineno="733"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>registerConstSettingForValidation(elemDestReg,<sp/><ref refid="namespacesemantic_1ad904cd91752c2bbdd55d5819dbbf7c55" kindref="member">semantic::vt_float_size</ref>(VariableType::i2));</highlight></codeline>
<codeline lineno="734"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="735"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="736"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="737"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stCppcodeAccum.cppStblkcode.addStaticShaderTex(def.<ref refid="structsemantic_1_1NamedConstDefInfo_1a17d28ce51c6f4cd40d3e731e69c63392" kindref="member">stage</ref>,<sp/>varName,<sp/>value.varName(),<sp/>elemDestReg);</highlight></codeline>
<codeline lineno="738"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="739"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="740"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="741"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="742"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="743"><highlight class="normal"></highlight></codeline>
<codeline lineno="744"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="745"><highlight class="normal">}</highlight></codeline>
<codeline lineno="746"><highlight class="normal"></highlight></codeline>
<codeline lineno="747"><highlight class="normal">String<sp/><ref refid="namespaceassembly_1aa2103c4b24d97bc75908e181a4c6e4af" kindref="member">build_hlsl_for_pair_sampler</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*const_name,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>is_shadow,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dest_register,<sp/><ref refid="classshc_1_1VariantContext" kindref="compound">shc::VariantContext</ref><sp/>&amp;ctx)</highlight></codeline>
<codeline lineno="748"><highlight class="normal">{</highlight></codeline>
<codeline lineno="749"><highlight class="normal"><sp/><sp/>String<sp/>res{};</highlight></codeline>
<codeline lineno="750"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(is_shadow)</highlight></codeline>
<codeline lineno="751"><highlight class="normal"><sp/><sp/><sp/><sp/>res.aprintf(0,<sp/></highlight><highlight class="stringliteral">&quot;SamplerComparisonState<sp/>%s_cmpSampler:<sp/>register(s%d);\n&quot;</highlight><highlight class="normal">,<sp/>const_name,<sp/>dest_register);</highlight></codeline>
<codeline lineno="752"><highlight class="normal"></highlight></codeline>
<codeline lineno="753"><highlight class="normal"><sp/><sp/>res.aprintf(0,<sp/></highlight><highlight class="stringliteral">&quot;SamplerState<sp/>%s_samplerstate:<sp/>register(s%d);\n&quot;</highlight><highlight class="normal">,<sp/>const_name,<sp/>dest_register);</highlight></codeline>
<codeline lineno="754"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>res;</highlight></codeline>
<codeline lineno="755"><highlight class="normal">}</highlight></codeline>
<codeline lineno="756"><highlight class="normal"></highlight></codeline>
<codeline lineno="757"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;StcodeBuildFlags<sp/>FLAGS&gt;</highlight></codeline>
<codeline lineno="758"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceassembly_1a8026a31965c1ca181d81478595335675" kindref="member">build_stcode_for_pair_sampler</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*const_name,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*var_name,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dest_register,<sp/>ShaderStage<sp/>stage,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>var_id,</highlight></codeline>
<codeline lineno="759"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>is_global,<sp/><ref refid="classshc_1_1VariantContext" kindref="compound">shc::VariantContext</ref><sp/>&amp;ctx)</highlight></codeline>
<codeline lineno="760"><highlight class="normal">{</highlight></codeline>
<codeline lineno="761"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>(FLAGS<sp/>&amp;<sp/><ref refid="structassembly_1_1StcodeBuildFlagsBits_1a3ef5928b0782d6f7a0b6b39b1245e5f3" kindref="member">StcodeBuildFlagsBits::BYTECODE</ref>)</highlight></codeline>
<codeline lineno="762"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="763"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(is_global)</highlight></codeline>
<codeline lineno="764"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ctx.<ref refid="classshc_1_1VariantContext_1a4d4c5240b72856d0eeaccfc5ae8d976f" kindref="member">stBytecode</ref>().push_stcode(shaderopcode::makeOpStageSlot(SHCOD_GLOB_SAMPLER,<sp/>stage,<sp/>dest_register,<sp/>var_id));</highlight></codeline>
<codeline lineno="765"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="766"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ctx.<ref refid="classshc_1_1VariantContext_1a4d4c5240b72856d0eeaccfc5ae8d976f" kindref="member">stBytecode</ref>().push_stcode(shaderopcode::makeOpStageSlot(SHCOD_SAMPLER,<sp/>0,<sp/>dest_register,<sp/>var_id));</highlight></codeline>
<codeline lineno="767"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="768"><highlight class="normal"></highlight></codeline>
<codeline lineno="769"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>(FLAGS<sp/>&amp;<sp/><ref refid="structassembly_1_1StcodeBuildFlagsBits_1a3bc117f2628c89fc9fa9d099c3357c22" kindref="member">StcodeBuildFlagsBits::CPP</ref>)</highlight></codeline>
<codeline lineno="770"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="771"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(is_global)</highlight></codeline>
<codeline lineno="772"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="773"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ctx.<ref refid="classshc_1_1VariantContext_1a45351b6130235b4bde86f2fb2bac44fe" kindref="member">cppStcode</ref>().cppStcode.addGlobalShaderResource(stage,<sp/><ref refid="structStcodeRoutine_1a52f41230f067f3067000adef9bfb5eb9aaa4fc1f642950410dd11d691fe974cca" kindref="member">StcodeRoutine::ResourceType::SAMPLER</ref>,<sp/>const_name,<sp/>var_name,</highlight></codeline>
<codeline lineno="774"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dest_register);</highlight></codeline>
<codeline lineno="775"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="776"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="777"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="778"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ctx.<ref refid="classshc_1_1VariantContext_1a45351b6130235b4bde86f2fb2bac44fe" kindref="member">cppStcode</ref>().cppStcode.addDynamicShaderResource(stage,<sp/><ref refid="structStcodeRoutine_1a52f41230f067f3067000adef9bfb5eb9aaa4fc1f642950410dd11d691fe974cca" kindref="member">StcodeRoutine::ResourceType::SAMPLER</ref>,<sp/>const_name,<sp/>var_name,</highlight></codeline>
<codeline lineno="779"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dest_register);</highlight></codeline>
<codeline lineno="780"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="781"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="782"><highlight class="normal">}</highlight></codeline>
<codeline lineno="783"><highlight class="normal"></highlight></codeline>
<codeline lineno="784"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceassembly_1ad3e505f51d3620ecfe672ffa1b7e9c99" kindref="member">build_cpp_declarations_for_used_local_vars</ref>(<ref refid="classshc_1_1VariantContext" kindref="compound">shc::VariantContext</ref><sp/>&amp;ctx)</highlight></codeline>
<codeline lineno="785"><highlight class="normal">{</highlight></codeline>
<codeline lineno="786"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structLocalVar" kindref="compound">LocalVar</ref><sp/>&amp;lvar<sp/>:<sp/>ctx.localStcodeVars().getVars())</highlight></codeline>
<codeline lineno="787"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="788"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!lvar.isConst)</highlight></codeline>
<codeline lineno="789"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="790"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structStcodeRoutine" kindref="compound">StcodeRoutine</ref><sp/>&amp;routine<sp/>=</highlight></codeline>
<codeline lineno="791"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lvar.isDynamic<sp/>?<sp/>(<ref refid="structStcodeRoutine" kindref="compound">StcodeRoutine</ref><sp/>&amp;)ctx.<ref refid="classshc_1_1VariantContext_1a45351b6130235b4bde86f2fb2bac44fe" kindref="member">cppStcode</ref>().cppStcode<sp/>:<sp/>(<ref refid="structStcodeRoutine" kindref="compound">StcodeRoutine</ref><sp/>&amp;)ctx.<ref refid="classshc_1_1VariantContext_1a45351b6130235b4bde86f2fb2bac44fe" kindref="member">cppStcode</ref>().cppStblkcode;</highlight></codeline>
<codeline lineno="792"><highlight class="normal"></highlight></codeline>
<codeline lineno="793"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>routine.<ref refid="structStcodeRoutine_1afea3011003d486cdc2094d1ecb5227d1" kindref="member">addLocalVarDecl</ref>(<ref refid="namespacestcode_1acee5dd1d45e20011c37e1c8eef76dde7" kindref="member">stcode::shexpr_value_to_shadervar_type</ref>(lvar.valueType,<sp/>lvar.isInteger),</highlight></codeline>
<codeline lineno="794"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ctx.<ref refid="classshc_1_1VariantContext_1a02952e27d2d5e304daad76b11cb1f4ad" kindref="member">tgtCtx</ref>().<ref refid="classshc_1_1TargetContext_1a64e71598c4751d165675e9e9f1f70b8e" kindref="member">varNameMap</ref>().<ref refid="classVarNameMap_1a67d66b5cb5d304dcceafb08083f0f839" kindref="member">getName</ref>(lvar.varNameId));</highlight></codeline>
<codeline lineno="795"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="796"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="797"><highlight class="normal">}</highlight></codeline>
<codeline lineno="798"><highlight class="normal"></highlight></codeline>
<codeline lineno="799"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceassembly_1a9a8fb5d1403190cf61579a5fb05a8569" kindref="member">build_cpp_declarations_for_used_bool_vars</ref>(<ref refid="classshc_1_1VariantContext" kindref="compound">shc::VariantContext</ref><sp/>&amp;ctx)</highlight></codeline>
<codeline lineno="800"><highlight class="normal">{</highlight></codeline>
<codeline lineno="801"><highlight class="normal"><sp/><sp/>ctx.<ref refid="classshc_1_1VariantContext_1a3a044e9a324c8cb325403fb3d6e610a1" kindref="member">localBoolVars</ref>().<ref refid="classBoolVarTable_1ac38dde72add5ea8074fcc01cbbb8d339" kindref="member">iterateBoolVars</ref>([&amp;](</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*name,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classBoolVar" kindref="compound">BoolVar</ref><sp/>&amp;)<sp/>{</highlight></codeline>
<codeline lineno="802"><highlight class="normal"><sp/><sp/><sp/><sp/>ctx.<ref refid="classshc_1_1VariantContext_1a45351b6130235b4bde86f2fb2bac44fe" kindref="member">cppStcode</ref>().cppStcode.<ref refid="structStcodeRoutine_1a4f376c7749e414c89ed9b70990d015e4" kindref="member">addBoolVarDecl</ref>(name);</highlight></codeline>
<codeline lineno="803"><highlight class="normal"><sp/><sp/><sp/><sp/>ctx.<ref refid="classshc_1_1VariantContext_1a45351b6130235b4bde86f2fb2bac44fe" kindref="member">cppStcode</ref>().cppStblkcode.addBoolVarDecl(name);</highlight></codeline>
<codeline lineno="804"><highlight class="normal"><sp/><sp/>});</highlight></codeline>
<codeline lineno="805"><highlight class="normal">}</highlight></codeline>
<codeline lineno="806"><highlight class="normal"></highlight></codeline>
<codeline lineno="807"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Explicit<sp/>insantiations,<sp/>added<sp/>once<sp/>they<sp/>are<sp/>needed</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="808"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceassembly_1a051e2812cbe06c020fc8135227fc9e3f" kindref="member">assemble_local_var&lt;StcodeBuildFlagsBits::ALL&gt;</ref>(<ref refid="structLocalVar" kindref="compound">LocalVar</ref><sp/>*,<sp/><ref refid="classShaderParser_1_1ComplexExpression" kindref="compound">ShaderParser::ComplexExpression</ref><sp/>*,</highlight></codeline>
<codeline lineno="809"><highlight class="normal"><sp/><sp/>ShaderTerminal::SHTOK_ident<sp/>*,<sp/><ref refid="classshc_1_1VariantContext" kindref="compound">shc::VariantContext</ref><sp/>&amp;);</highlight></codeline>
<codeline lineno="810"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceassembly_1a4464713eaa3a7a20a5de730f8692a589" kindref="member">assemble_local_var&lt;StcodeBuildFlagsBits::CPP&gt;</ref>(<ref refid="structLocalVar" kindref="compound">LocalVar</ref><sp/>*,<sp/><ref refid="classShaderParser_1_1ComplexExpression" kindref="compound">ShaderParser::ComplexExpression</ref><sp/>*,</highlight></codeline>
<codeline lineno="811"><highlight class="normal"><sp/><sp/>ShaderTerminal::SHTOK_ident<sp/>*,<sp/><ref refid="classshc_1_1VariantContext" kindref="compound">shc::VariantContext</ref><sp/>&amp;);</highlight></codeline>
<codeline lineno="812"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="namespaceassembly_1a460627748565256b59183046c58491c8" kindref="member">build_stcode_for_named_const&lt;StcodeBuildFlagsBits::ALL&gt;</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structsemantic_1_1NamedConstDefInfo" kindref="compound">semantic::NamedConstDefInfo</ref><sp/>&amp;,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,<sp/><ref refid="classshc_1_1VariantContext" kindref="compound">shc::VariantContext</ref><sp/>&amp;,</highlight></codeline>
<codeline lineno="813"><highlight class="normal"><sp/><sp/>IMemAlloc<sp/>*,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="814"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="namespaceassembly_1a26d99e1ebc2e38c7f07f7d5efaf7643a" kindref="member">build_stcode_for_named_const&lt;StcodeBuildFlagsBits::CPP&gt;</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structsemantic_1_1NamedConstDefInfo" kindref="compound">semantic::NamedConstDefInfo</ref><sp/>&amp;,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,<sp/><ref refid="classshc_1_1VariantContext" kindref="compound">shc::VariantContext</ref><sp/>&amp;,</highlight></codeline>
<codeline lineno="815"><highlight class="normal"><sp/><sp/>IMemAlloc<sp/>*,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="816"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceassembly_1afad05a99e96c289711ebd13f55919856" kindref="member">build_stcode_for_pair_sampler&lt;StcodeBuildFlagsBits::ALL&gt;</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,<sp/>ShaderStage,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="817"><highlight class="normal"><sp/><sp/><ref refid="classshc_1_1VariantContext" kindref="compound">shc::VariantContext</ref><sp/>&amp;);</highlight></codeline>
<codeline lineno="818"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceassembly_1a5c94f8b3c99f14fd075dbe90c73641d9" kindref="member">build_stcode_for_pair_sampler&lt;StcodeBuildFlagsBits::CPP&gt;</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,<sp/>ShaderStage,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="819"><highlight class="normal"><sp/><sp/><ref refid="classshc_1_1VariantContext" kindref="compound">shc::VariantContext</ref><sp/>&amp;);</highlight></codeline>
<codeline lineno="820"><highlight class="normal"></highlight></codeline>
<codeline lineno="821"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>assembly</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="variantAssembly.cpp"/>
  </compounddef>
</doxygen>
