<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.7" xml:lang="en-US">
  <compounddef id="assemblyShader_8cpp" kind="file" language="C++">
    <compoundname>assemblyShader.cpp</compoundname>
    <includes refid="assemblyShader_8h" local="yes">assemblyShader.h</includes>
    <incdepgraph>
      <node id="1">
        <label>assemblyShader.cpp</label>
        <link refid="assemblyShader_8cpp"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>assemblyShader.h</label>
        <link refid="assemblyShader_8h"/>
      </node>
    </incdepgraph>
    <innerclass refid="classCompileShaderJob" prot="public">CompileShaderJob</innerclass>
      <sectiondef kind="func">
      <memberdef kind="function" id="assemblyShader_8cpp_1a7da67626e07b07a7baaf902a28ea7d8e" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>static bool is_hlsl_debug</definition>
        <argsstring>()</argsstring>
        <name>is_hlsl_debug</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="assemblyShader.cpp" line="52" column="13" bodyfile="assemblyShader.cpp" bodystart="52" bodyend="52"/>
      </memberdef>
      <memberdef kind="function" id="assemblyShader_8cpp_1a820b1f2a37692b4b9811a4b404426345" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>eastl::optional&lt; ShaderVarType &gt;</type>
        <definition>eastl::optional&lt; ShaderVarType &gt; shtok_to_shvt</definition>
        <argsstring>(int shtok)</argsstring>
        <name>shtok_to_shvt</name>
        <param>
          <type>int</type>
          <declname>shtok</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="assemblyShader.cpp" line="98" column="17" bodyfile="assemblyShader.cpp" bodystart="98" bodyend="110"/>
      </memberdef>
      <memberdef kind="function" id="assemblyShader_8cpp_1a96f888ce0846cf8cd3265bee8ed3c6bd" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>static int channel_type</definition>
        <argsstring>(int token)</argsstring>
        <name>channel_type</name>
        <param>
          <type>int</type>
          <declname>token</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="assemblyShader.cpp" line="339" column="19" bodyfile="assemblyShader.cpp" bodystart="339" bodyend="361"/>
      </memberdef>
      <memberdef kind="function" id="assemblyShader_8cpp_1a52e37dea8be62ff04e2e1726a827f44a" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>static int channel_usage</definition>
        <argsstring>(int token)</argsstring>
        <name>channel_usage</name>
        <param>
          <type>int</type>
          <declname>token</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="assemblyShader.cpp" line="363" column="19" bodyfile="assemblyShader.cpp" bodystart="363" bodyend="374"/>
      </memberdef>
      <memberdef kind="function" id="assemblyShader_8cpp_1a6c736e482910c4808f4849b43d5bba0c" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>static const char * find_line_comment</definition>
        <argsstring>(const char *s1, const char *s1_end)</argsstring>
        <name>find_line_comment</name>
        <param>
          <type>const char *</type>
          <declname>s1</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>s1_end</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="assemblyShader.cpp" line="2033" column="19" bodyfile="assemblyShader.cpp" bodystart="2033" bodyend="2043"/>
      </memberdef>
      <memberdef kind="function" id="assemblyShader_8cpp_1a6370280b942f40ab0c8535d8a9fb42cf" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>static const char * get_next_line_trail_to_strip</definition>
        <argsstring>(const char *c_start, bool hold_file_line)</argsstring>
        <name>get_next_line_trail_to_strip</name>
        <param>
          <type>const char *</type>
          <declname>c_start</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>hold_file_line</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="assemblyShader.cpp" line="2044" column="19" bodyfile="assemblyShader.cpp" bodystart="2044" bodyend="2059"/>
      </memberdef>
      <memberdef kind="function" id="assemblyShader_8cpp_1a7f1b381ec973c826ff07a40163427a74" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void calc_sha1_stripped</definition>
        <argsstring>(HASH_CONTEXT &amp;sha1, const char *src, size_t total_len, bool hold_file_line, String *out_stripped=nullptr)</argsstring>
        <name>calc_sha1_stripped</name>
        <param>
          <type><ref refid="hashed__cache_8h_1a570b3b725357770701d8b56ea8518aea" kindref="member">HASH_CONTEXT</ref> &amp;</type>
          <declname>sha1</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>src</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>total_len</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>hold_file_line</declname>
        </param>
        <param>
          <type>String *</type>
          <declname>out_stripped</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="assemblyShader.cpp" line="2060" column="20" bodyfile="assemblyShader.cpp" bodystart="2060" bodyend="2080"/>
      </memberdef>
      <memberdef kind="function" id="assemblyShader_8cpp_1acef944d40f7cd2ad54ea9d9e2ca87eaa" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>String</type>
        <definition>static String make_dump_filepath</definition>
        <argsstring>(const char *shaderName, uint64_t shader_variant_hash, const char *shader_sha1)</argsstring>
        <name>make_dump_filepath</name>
        <param>
          <type>const char *</type>
          <declname>shaderName</declname>
        </param>
        <param>
          <type>uint64_t</type>
          <declname>shader_variant_hash</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>shader_sha1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="assemblyShader.cpp" line="2081" column="15" bodyfile="assemblyShader.cpp" bodystart="2081" bodyend="2093"/>
      </memberdef>
      <memberdef kind="function" id="assemblyShader_8cpp_1a4141b7748e3e01a07c50fb0950097fdb" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void dump_hlsl_src</definition>
        <argsstring>(const char *compileCtx, const char *source, const eastl::vector&lt; uint8_t &gt; &amp;bytecode, const char *sha1SrcPath, bool reused, const char *shaderName, uint64_t shader_variant_hash)</argsstring>
        <name>dump_hlsl_src</name>
        <param>
          <type>const char *</type>
          <declname>compileCtx</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>source</declname>
        </param>
        <param>
          <type>const eastl::vector&lt; uint8_t &gt; &amp;</type>
          <declname>bytecode</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>sha1SrcPath</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>reused</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>shaderName</declname>
        </param>
        <param>
          <type>uint64_t</type>
          <declname>shader_variant_hash</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="assemblyShader.cpp" line="2094" column="13" bodyfile="assemblyShader.cpp" bodystart="2094" bodyend="2141"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/>Copyright<sp/>(C)<sp/>Gaijin<sp/>Games<sp/>KFT.<sp/><sp/>All<sp/>rights<sp/>reserved.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="assemblyShader_8h" kindref="compound">assemblyShader.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;shaders/shOpcodeFormat.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;shaders/shOpcode.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;shaders/shUtils.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;shaders/shFunc.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="hwSemantic_8h" kindref="compound">hwSemantic.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="shaderSemantic_8h" kindref="compound">shaderSemantic.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="transcodeCommon_8h" kindref="compound">transcodeCommon.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="hwAssembly_8h" kindref="compound">hwAssembly.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="variantAssembly_8h" kindref="compound">variantAssembly.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="shTargetContext_8h" kindref="compound">shTargetContext.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="varMap_8h" kindref="compound">varMap.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="shCompContext_8h" kindref="compound">shCompContext.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="globVar_8h" kindref="compound">globVar.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="boolVar_8h" kindref="compound">boolVar.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="samplers_8h" kindref="compound">samplers.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="sh__stat_8h" kindref="compound">sh_stat.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="semUtils_8h" kindref="compound">semUtils.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="shaderTab_8h" kindref="compound">shaderTab.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="shCompiler_8h" kindref="compound">shCompiler.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="compileResult_8h" kindref="compound">compileResult.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="globalConfig_8h" kindref="compound">globalConfig.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="hash_8h" kindref="compound">hash.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="shCompilationInfo_8h" kindref="compound">shCompilationInfo.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="transcodeShader_8h" kindref="compound">transcodeShader.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="codeBlocks_8h" kindref="compound">codeBlocks.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="defer_8h" kindref="compound">defer.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;ioSys/dag_fileIo.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;osApiWrappers/dag_cpuJobs.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;debug/dag_debug.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;math/random/dag_random.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="fast__isalnum_8h" kindref="compound">fast_isalnum.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;memory/dag_regionMemAlloc.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;util/dag_bitwise_cast.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;drv/shadersMetaData/dxil/utility.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="DebugLevel_8h" kindref="compound">DebugLevel.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;EASTL/vector_map.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;EASTL/string_view.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;EASTL/set.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;EASTL/optional.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;util/dag_strUtil.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="debugSpitfile_8h" kindref="compound">debugSpitfile.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal"><ref refid="namespaceShaderParser" kindref="compound">ShaderParser</ref>;</highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>is_hlsl_debug()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespaceshc_1a47efde6b3d493adbe2119a5593807d36" kindref="member">shc::config</ref>().<ref refid="structshc_1_1CompilerConfig_1a1ef797efe3855bf413cd788a87b4d6a5" kindref="member">hlslDebugLevel</ref><sp/>!=<sp/><ref refid="DebugLevel_8h_1a1a2e78e667f5d5bd44be96e3abc8a3eeab50339a10e1de285ac99d4c3990b8693" kindref="member">DebugLevel::NONE</ref>;<sp/>}</highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>_TARGET_PC_WIN</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;windows.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;unistd.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>_CROSS_TARGET_C1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>_CROSS_TARGET_C2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>_CROSS_TARGET_METAL</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;hlsl2metal/asmShaderHLSL2Metal.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>_CROSS_TARGET_SPIRV</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;hlsl2spirv/asmShaderSpirV.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>_CROSS_TARGET_DX12</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;dx12/asmShaderDXIL.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>_CROSS_TARGET_DX11<sp/></highlight><highlight class="comment">//_TARGET_PC<sp/>is<sp/>also<sp/>defined</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;hlsl11transcode/asmShaders11.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;D3Dcompiler.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight><highlight class="comment">/*********************************</highlight></codeline>
<codeline lineno="76"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="77"><highlight class="comment"><sp/>*<sp/>class<sp/>AssembleShaderEvalCB</highlight></codeline>
<codeline lineno="78"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="79"><highlight class="comment"><sp/>*********************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"><ref refid="classShaderParser_1_1AssembleShaderEvalCB_1af72de12b5e67f69286b9fdb0c6913fe5" kindref="member">AssembleShaderEvalCB::AssembleShaderEvalCB</ref>(<ref refid="classshc_1_1VariantContext" kindref="compound">shc::VariantContext</ref><sp/>&amp;ctx)<sp/>:</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><ref refid="namespacesemantic" kindref="compound">semantic</ref>::VariantBoolExprEvalCB{ctx},</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/>ctx{ctx},</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/>sclass{ctx.shCtx().compiledShader()},</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/>code{ctx.parsedSemCode()},</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/>curvariant{&amp;ctx.parsedPass()},</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/>curpass{ctx.hasParsedPass()<sp/>?<sp/>&amp;ctx.parsedPass().pass.value()<sp/>:<sp/>nullptr},</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/>stBytecodeAccum{ctx.stBytecode()},</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/>stCppcodeAccum{ctx.cppStcode()},</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/>shConst{ctx.namedConstTable()},</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/>parser{ctx.tgtCtx().sourceParseState().parser},</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/>exprParser{ctx},</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/>allRefStaticVars{ctx.shCtx().typeTables().referencedTypes},</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/>dont_render(false),</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/>variant(ctx.variant()),</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/>varMerger{ctx.tgtCtx()}</highlight></codeline>
<codeline lineno="96"><highlight class="normal">{}</highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal">eastl::optional&lt;ShaderVarType&gt;<sp/><ref refid="assemblyShader_8cpp_1a820b1f2a37692b4b9811a4b404426345" kindref="member">shtok_to_shvt</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>shtok)</highlight></codeline>
<codeline lineno="99"><highlight class="normal">{</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(shtok)</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>SHADER_TOKENS::SHTOK_int:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>SHVT_INT;</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>SHADER_TOKENS::SHTOK_int4:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>SHVT_INT4;</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>SHADER_TOKENS::SHTOK_float:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>SHVT_REAL;</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>SHADER_TOKENS::SHTOK_float4x4:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>SHVT_FLOAT4X4;</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>SHADER_TOKENS::SHTOK_float4:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>SHVT_COLOR4;</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>SHADER_TOKENS::SHTOK_texture:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>SHVT_TEXTURE;</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>eastl::nullopt;</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="110"><highlight class="normal">}</highlight></codeline>
<codeline lineno="111"><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classShaderParser_1_1AssembleShaderEvalCB_1a8547081625f30f139a633db30fdef8b3" kindref="member">AssembleShaderEvalCB::eval_static</ref>(static_var_decl<sp/>&amp;s)</highlight></codeline>
<codeline lineno="113"><highlight class="normal">{</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>shvt<sp/>=<sp/><ref refid="assemblyShader_8cpp_1a820b1f2a37692b4b9811a4b404426345" kindref="member">shtok_to_shvt</ref>(s.type-&gt;type-&gt;num);</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!shvt)</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="shErrorReporting_8h_1a634f6d6ca9a9f22c5eea4c9b8e20ef31" kindref="member">report_error</ref>(<ref refid="classShaderParser_1_1AssembleShaderEvalCB_1afabaa52e0ea25f004960aacc342b3c84" kindref="member">parser</ref>,<sp/>s.type-&gt;type,<sp/></highlight><highlight class="stringliteral">&quot;Unsupported<sp/>shadervar<sp/>type<sp/>%s<sp/>to<sp/>declare<sp/>as<sp/>static/dynamic<sp/>variable&quot;</highlight><highlight class="normal">,<sp/>s.type-&gt;type-&gt;text);</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/>ShaderVarType<sp/>t<sp/>=<sp/>*shvt;</highlight></codeline>
<codeline lineno="121"><highlight class="normal"></highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>varNameId<sp/>=<sp/><ref refid="classShaderParser_1_1AssembleShaderEvalCB_1a3058e4d1c01fc25c4a62bf0e150fe6ca" kindref="member">ctx</ref>.<ref refid="classshc_1_1VariantContext_1a02952e27d2d5e304daad76b11cb1f4ad" kindref="member">tgtCtx</ref>().<ref refid="classshc_1_1TargetContext_1a64e71598c4751d165675e9e9f1f70b8e" kindref="member">varNameMap</ref>().<ref refid="classVarNameMap_1a1aee6745dfff43ef84ae9b292dc9e130" kindref="member">addVarId</ref>(s.name-&gt;text);</highlight></codeline>
<codeline lineno="123"><highlight class="normal"></highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>v<sp/>=<sp/><ref refid="classShaderParser_1_1AssembleShaderEvalCB_1a2ba6fb52310a3ced7b31ede7fd8cbc8b" kindref="member">code</ref>.<ref refid="classShaderSemCode_1a65b81634f689797e098f940d0029be3f" kindref="member">find_var</ref>(varNameId);</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(v<sp/>&gt;=<sp/>0)</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/>eastl::string<sp/>message(eastl::string::CtorSprintf{},<sp/></highlight><highlight class="stringliteral">&quot;static<sp/>variable<sp/>&apos;%s&apos;<sp/>already<sp/>declared<sp/>in<sp/>&quot;</highlight><highlight class="normal">,<sp/>s.name-&gt;text);</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/>message<sp/>+=<sp/><ref refid="classShaderParser_1_1AssembleShaderEvalCB_1afabaa52e0ea25f004960aacc342b3c84" kindref="member">parser</ref>.<ref refid="structParser_1a9e9bc1e12aec4ba300d71598132ae8ec" kindref="member">get_lexer</ref>().<ref refid="classLexer_1ae065a46a94e418ea39223d730939ce3c" kindref="member">get_symbol_location</ref>(varNameId,<sp/>SymbolType::STATIC_VARIABLE);</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="shErrorReporting_8h_1a634f6d6ca9a9f22c5eea4c9b8e20ef31" kindref="member">report_error</ref>(<ref refid="classShaderParser_1_1AssembleShaderEvalCB_1afabaa52e0ea25f004960aacc342b3c84" kindref="member">parser</ref>,<sp/>s.name,<sp/>message.c_str());</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><ref refid="classShaderParser_1_1AssembleShaderEvalCB_1afabaa52e0ea25f004960aacc342b3c84" kindref="member">parser</ref>.<ref refid="structParser_1a9e9bc1e12aec4ba300d71598132ae8ec" kindref="member">get_lexer</ref>().<ref refid="classLexer_1ab844a140350220e5e04a80336dca9ae8" kindref="member">register_symbol</ref>(varNameId,<sp/>SymbolType::STATIC_VARIABLE,<sp/>s.name);</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/>v<sp/>=<sp/>append_items(<ref refid="classShaderParser_1_1AssembleShaderEvalCB_1a2ba6fb52310a3ced7b31ede7fd8cbc8b" kindref="member">code</ref>.<ref refid="classShaderSemCode_1abe6ed6468793a4cbe55a75133a83d393" kindref="member">vars</ref>,<sp/>1);</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><ref refid="classShaderParser_1_1AssembleShaderEvalCB_1a2ba6fb52310a3ced7b31ede7fd8cbc8b" kindref="member">code</ref>.<ref refid="classShaderSemCode_1abe6ed6468793a4cbe55a75133a83d393" kindref="member">vars</ref>[v].type<sp/>=<sp/>t;</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><ref refid="classShaderParser_1_1AssembleShaderEvalCB_1a2ba6fb52310a3ced7b31ede7fd8cbc8b" kindref="member">code</ref>.<ref refid="classShaderSemCode_1abe6ed6468793a4cbe55a75133a83d393" kindref="member">vars</ref>[v].nameId<sp/>=<sp/>varNameId;</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><ref refid="classShaderParser_1_1AssembleShaderEvalCB_1a2ba6fb52310a3ced7b31ede7fd8cbc8b" kindref="member">code</ref>.<ref refid="classShaderSemCode_1abe6ed6468793a4cbe55a75133a83d393" kindref="member">vars</ref>[v].terminal<sp/>=<sp/>s.name;</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><ref refid="classShaderParser_1_1AssembleShaderEvalCB_1a2ba6fb52310a3ced7b31ede7fd8cbc8b" kindref="member">code</ref>.<ref refid="classShaderSemCode_1abe6ed6468793a4cbe55a75133a83d393" kindref="member">vars</ref>[v].dynamic<sp/>=<sp/>s.mode<sp/>&amp;&amp;<sp/>s.mode-&gt;mode-&gt;num<sp/>==<sp/>SHADER_TOKENS::SHTOK_dynamic;</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(s.no_warnings)</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classShaderParser_1_1AssembleShaderEvalCB_1a2ba6fb52310a3ced7b31ede7fd8cbc8b" kindref="member">code</ref>.<ref refid="classShaderSemCode_1abe6ed6468793a4cbe55a75133a83d393" kindref="member">vars</ref>[v].noWarnings<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="140"><highlight class="normal"></highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><ref refid="classShaderParser_1_1AssembleShaderEvalCB_1a2ba6fb52310a3ced7b31ede7fd8cbc8b" kindref="member">code</ref>.<ref refid="classShaderSemCode_1a6ea9abdd5eacef897f3aca48a7c7c571" kindref="member">staticStcodeVars</ref>.<ref refid="structStcodeStaticVars_1a308290d19e9ced6925e09b2eb1fc2525" kindref="member">add</ref>(s.name-&gt;text,<sp/>v);</highlight></codeline>
<codeline lineno="142"><highlight class="normal"></highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>inited<sp/>=<sp/>(!s.mode<sp/>&amp;&amp;<sp/>s.init)<sp/>||<sp/><ref refid="classShaderParser_1_1AssembleShaderEvalCB_1a2ba6fb52310a3ced7b31ede7fd8cbc8b" kindref="member">code</ref>.<ref refid="classShaderSemCode_1abe6ed6468793a4cbe55a75133a83d393" kindref="member">vars</ref>[v].dynamic<sp/>||<sp/>(t<sp/>!=<sp/>SHVT_TEXTURE)<sp/>||<sp/>s.init;</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!inited)</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="shErrorReporting_8h_1a634f6d6ca9a9f22c5eea4c9b8e20ef31" kindref="member">report_error</ref>(<ref refid="classShaderParser_1_1AssembleShaderEvalCB_1afabaa52e0ea25f004960aacc342b3c84" kindref="member">parser</ref>,<sp/>s.name,<sp/></highlight><highlight class="stringliteral">&quot;Variable<sp/>&apos;%s&apos;<sp/>must<sp/>be<sp/>inited&quot;</highlight><highlight class="normal">,<sp/>s.name-&gt;text);</highlight></codeline>
<codeline lineno="146"><highlight class="normal"></highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>varReferenced<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="148"><highlight class="normal"></highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!s.mode)</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>intervalNameId<sp/>=<sp/><ref refid="classShaderParser_1_1AssembleShaderEvalCB_1a3058e4d1c01fc25c4a62bf0e150fe6ca" kindref="member">ctx</ref>.<ref refid="classshc_1_1VariantContext_1a02952e27d2d5e304daad76b11cb1f4ad" kindref="member">tgtCtx</ref>().<ref refid="classshc_1_1TargetContext_1ad61d7a132b4b9b57202752394eed414d" kindref="member">intervalNameMap</ref>().<ref refid="classHashStrings_1a2b43444bc74666574cba61624c72d22e" kindref="member">getNameId</ref>(s.name-&gt;text);</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceShaderVariant_1a576d584c5c88f3e1685c515c843bb30a" kindref="member">ShaderVariant::ExtType</ref><sp/>intervalIndex<sp/>=<sp/><ref refid="classShaderParser_1_1AssembleShaderEvalCB_1a24fe31141b2ba1fbf952b0e8dd4bec22" kindref="member">allRefStaticVars</ref>.<ref refid="classShaderVariant_1_1TypeTable_1acb83e9ee8718af131424344efc21224a" kindref="member">getIntervals</ref>()-&gt;<ref refid="classIntervalList_1a9a77d1ff0e92fe7dcab999886e06c533" kindref="member">getIntervalIndex</ref>(intervalNameId);</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classInterval" kindref="compound">Interval</ref><sp/>*interv<sp/>=<sp/><ref refid="classShaderParser_1_1AssembleShaderEvalCB_1a24fe31141b2ba1fbf952b0e8dd4bec22" kindref="member">allRefStaticVars</ref>.<ref refid="classShaderVariant_1_1TypeTable_1acb83e9ee8718af131424344efc21224a" kindref="member">getIntervals</ref>()-&gt;<ref refid="classIntervalList_1a1d93fe14234f8e96a7821862145e933e" kindref="member">getInterval</ref>(intervalIndex);</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/>varReferenced<sp/>=<sp/>interv<sp/>?<sp/><ref refid="classShaderParser_1_1AssembleShaderEvalCB_1a24fe31141b2ba1fbf952b0e8dd4bec22" kindref="member">allRefStaticVars</ref>.<ref refid="classShaderVariant_1_1TypeTable_1aa528b15035272c112d1319eeda7bb6f3" kindref="member">findType</ref>(interv-&gt;<ref refid="classInterval_1a3b99beb415b1139228913988b01b8f98" kindref="member">getVarType</ref>(),<sp/>intervalIndex)<sp/>!=<sp/>-1<sp/>:<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classShaderParser_1_1AssembleShaderEvalCB_1a2ba6fb52310a3ced7b31ede7fd8cbc8b" kindref="member">code</ref>.<ref refid="classShaderSemCode_1abe6ed6468793a4cbe55a75133a83d393" kindref="member">vars</ref>[v].used<sp/>=<sp/>varReferenced;</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="157"><highlight class="normal"></highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>sv<sp/>=<sp/><ref refid="classShaderParser_1_1AssembleShaderEvalCB_1a2e5aa16f073ae06f6d67c338553e8c6b" kindref="member">sclass</ref>.<ref refid="classShaderClass_1a50005ffa656290b8617a38a80ecda50f" kindref="member">find_static_var</ref>(varNameId);</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sv<sp/>&lt;<sp/>0<sp/>&amp;&amp;<sp/>varReferenced)</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/>sv<sp/>=<sp/>append_items(<ref refid="classShaderParser_1_1AssembleShaderEvalCB_1a2e5aa16f073ae06f6d67c338553e8c6b" kindref="member">sclass</ref>.<ref refid="classShaderClass_1af6a928a5bd7e66cc342af3b4778c280c" kindref="member">stvar</ref>,<sp/>1);</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classShaderParser_1_1AssembleShaderEvalCB_1a2e5aa16f073ae06f6d67c338553e8c6b" kindref="member">sclass</ref>.<ref refid="classShaderClass_1af6a928a5bd7e66cc342af3b4778c280c" kindref="member">stvar</ref>[sv].type<sp/>=<sp/>t;</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classShaderParser_1_1AssembleShaderEvalCB_1a2e5aa16f073ae06f6d67c338553e8c6b" kindref="member">sclass</ref>.<ref refid="classShaderClass_1af6a928a5bd7e66cc342af3b4778c280c" kindref="member">stvar</ref>[sv].nameId<sp/>=<sp/>varNameId;</highlight></codeline>
<codeline lineno="164"><highlight class="normal"></highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classShaderParser_1_1AssembleShaderEvalCB_1a2e5aa16f073ae06f6d67c338553e8c6b" kindref="member">sclass</ref>.stvarsAreDynamic.size()<sp/>&lt;=<sp/>sv)</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classShaderParser_1_1AssembleShaderEvalCB_1a2e5aa16f073ae06f6d67c338553e8c6b" kindref="member">sclass</ref>.stvarsAreDynamic.resize(sv<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classShaderParser_1_1AssembleShaderEvalCB_1a2e5aa16f073ae06f6d67c338553e8c6b" kindref="member">sclass</ref>.stvarsAreDynamic[sv]<sp/>=<sp/><ref refid="classShaderParser_1_1AssembleShaderEvalCB_1a2ba6fb52310a3ced7b31ede7fd8cbc8b" kindref="member">code</ref>.<ref refid="classShaderSemCode_1abe6ed6468793a4cbe55a75133a83d393" kindref="member">vars</ref>[v].dynamic;</highlight></codeline>
<codeline lineno="168"><highlight class="normal"></highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>expectingInt<sp/>=<sp/>t<sp/>==<sp/>SHVT_INT<sp/>||<sp/>t<sp/>==<sp/>SHVT_INT4;</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/>Color4<sp/>val<sp/>=<sp/>expectingInt<sp/>?<sp/>Color4{bitwise_cast&lt;float&gt;(0),<sp/>bitwise_cast&lt;float&gt;(0),<sp/>bitwise_cast&lt;float&gt;(0),<sp/>bitwise_cast&lt;float&gt;(1)}</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>Color4{0,<sp/>0,<sp/>0,<sp/>1};</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(s.init<sp/>&amp;&amp;<sp/>s.init-&gt;expr)</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>shexpr::ValueType<sp/>expectedValType<sp/>=<sp/>shexpr::VT_UNDEFINED;</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(t<sp/>==<sp/>SHVT_REAL<sp/>||<sp/>t<sp/>==<sp/>SHVT_INT<sp/>||<sp/>t<sp/>==<sp/>SHVT_TEXTURE)</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>expectedValType<sp/>=<sp/>shexpr::VT_REAL;</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(t<sp/>==<sp/>SHVT_COLOR4<sp/>||<sp/>t<sp/>==<sp/>SHVT_INT4)</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>expectedValType<sp/>=<sp/>shexpr::VT_COLOR4;</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(t<sp/>==<sp/>SHVT_FLOAT4X4)</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="shErrorReporting_8h_1a634f6d6ca9a9f22c5eea4c9b8e20ef31" kindref="member">report_error</ref>(<ref refid="classShaderParser_1_1AssembleShaderEvalCB_1afabaa52e0ea25f004960aacc342b3c84" kindref="member">parser</ref>,<sp/>s.name,<sp/></highlight><highlight class="stringliteral">&quot;float4x4<sp/>default<sp/>value<sp/>is<sp/>not<sp/>supported&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="184"><highlight class="normal"></highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="classShaderParser_1_1AssembleShaderEvalCB_1acd8eb6b1e5a36d30cc261b2f860856e3" kindref="member">exprParser</ref>.<ref refid="classShaderParser_1_1ExpressionParser_1af038fb80abc17ef3c6f532a36642b8d7" kindref="member">parseConstExpression</ref>(*s.init-&gt;expr,<sp/>val,<sp/><ref refid="structShaderParser_1_1ExpressionParser_1_1Context" kindref="compound">ExpressionParser::Context</ref>{expectedValType,<sp/>expectingInt,<sp/>s.name}))</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="shErrorReporting_8h_1a634f6d6ca9a9f22c5eea4c9b8e20ef31" kindref="member">report_error</ref>(<ref refid="classShaderParser_1_1AssembleShaderEvalCB_1afabaa52e0ea25f004960aacc342b3c84" kindref="member">parser</ref>,<sp/>s.name,<sp/></highlight><highlight class="stringliteral">&quot;Wrong<sp/>expression&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="191"><highlight class="normal"></highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(t)</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>SHVT_COLOR4:<sp/><ref refid="classShaderParser_1_1AssembleShaderEvalCB_1a2e5aa16f073ae06f6d67c338553e8c6b" kindref="member">sclass</ref>.<ref refid="classShaderClass_1af6a928a5bd7e66cc342af3b4778c280c" kindref="member">stvar</ref>[sv].defval.c4.set(val);<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>SHVT_REAL:<sp/><ref refid="classShaderParser_1_1AssembleShaderEvalCB_1a2e5aa16f073ae06f6d67c338553e8c6b" kindref="member">sclass</ref>.<ref refid="classShaderClass_1af6a928a5bd7e66cc342af3b4778c280c" kindref="member">stvar</ref>[sv].defval.r<sp/>=<sp/>val[0];<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>SHVT_INT:<sp/><ref refid="classShaderParser_1_1AssembleShaderEvalCB_1a2e5aa16f073ae06f6d67c338553e8c6b" kindref="member">sclass</ref>.<ref refid="classShaderClass_1af6a928a5bd7e66cc342af3b4778c280c" kindref="member">stvar</ref>[sv].defval.i<sp/>=<sp/>bitwise_cast&lt;int&gt;(val[0]);<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>SHVT_INT4:</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classShaderParser_1_1AssembleShaderEvalCB_1a2e5aa16f073ae06f6d67c338553e8c6b" kindref="member">sclass</ref>.<ref refid="classShaderClass_1af6a928a5bd7e66cc342af3b4778c280c" kindref="member">stvar</ref>[sv].defval.i4.set(bitwise_cast&lt;int&gt;(val[0]),<sp/>bitwise_cast&lt;int&gt;(val[1]),<sp/>bitwise_cast&lt;int&gt;(val[2]),</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bitwise_cast&lt;int&gt;(val[3]));</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>SHVT_FLOAT4X4:</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>default<sp/>value<sp/>is<sp/>not<sp/>supported</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>SHVT_TEXTURE:</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(real2int(val[0])<sp/>!=<sp/>0)</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="shErrorReporting_8h_1a634f6d6ca9a9f22c5eea4c9b8e20ef31" kindref="member">report_error</ref>(<ref refid="classShaderParser_1_1AssembleShaderEvalCB_1afabaa52e0ea25f004960aacc342b3c84" kindref="member">parser</ref>,<sp/>s.name,<sp/></highlight><highlight class="stringliteral">&quot;texture<sp/>may<sp/>be<sp/>inited<sp/>only<sp/>with<sp/>0&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classShaderParser_1_1AssembleShaderEvalCB_1a2e5aa16f073ae06f6d67c338553e8c6b" kindref="member">sclass</ref>.<ref refid="classShaderClass_1af6a928a5bd7e66cc342af3b4778c280c" kindref="member">stvar</ref>[sv].defval.texId<sp/>=<sp/>unsigned(BAD_TEXTUREID);</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:<sp/>G_ASSERT(0);</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sv<sp/>&gt;=<sp/>0)</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classShaderParser_1_1AssembleShaderEvalCB_1a2e5aa16f073ae06f6d67c338553e8c6b" kindref="member">sclass</ref>.<ref refid="classShaderClass_1af6a928a5bd7e66cc342af3b4778c280c" kindref="member">stvar</ref>[sv].type<sp/>!=<sp/>t)</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="shErrorReporting_8h_1a634f6d6ca9a9f22c5eea4c9b8e20ef31" kindref="member">report_error</ref>(<ref refid="classShaderParser_1_1AssembleShaderEvalCB_1afabaa52e0ea25f004960aacc342b3c84" kindref="member">parser</ref>,<sp/>s.name,<sp/></highlight><highlight class="stringliteral">&quot;static<sp/>var<sp/>&apos;%s&apos;<sp/>defined<sp/>with<sp/>different<sp/>type&quot;</highlight><highlight class="normal">,<sp/>s.name-&gt;text);</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="223"><highlight class="normal"></highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(varReferenced)</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>append_items(<ref refid="classShaderParser_1_1AssembleShaderEvalCB_1a2ba6fb52310a3ced7b31ede7fd8cbc8b" kindref="member">code</ref>.<ref refid="classShaderSemCode_1a22aaacb40c47624c706112ca7e107518" kindref="member">stvarmap</ref>,<sp/>1);</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classShaderParser_1_1AssembleShaderEvalCB_1a2ba6fb52310a3ced7b31ede7fd8cbc8b" kindref="member">code</ref>.<ref refid="classShaderSemCode_1a22aaacb40c47624c706112ca7e107518" kindref="member">stvarmap</ref>[i].v<sp/>=<sp/>v;</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classShaderParser_1_1AssembleShaderEvalCB_1a2ba6fb52310a3ced7b31ede7fd8cbc8b" kindref="member">code</ref>.<ref refid="classShaderSemCode_1a22aaacb40c47624c706112ca7e107518" kindref="member">stvarmap</ref>[i].sv<sp/>=<sp/>sv;</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="230"><highlight class="normal"></highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(s.init<sp/>&amp;&amp;<sp/>!s.init-&gt;expr)</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classShaderParser_1_1AssembleShaderEvalCB_1a480c8889867db4476ba58b6a24f224d0" kindref="member">eval_init_stat</ref>(s.name,<sp/>*s.init);</highlight></codeline>
<codeline lineno="233"><highlight class="normal">}</highlight></codeline>
<codeline lineno="234"><highlight class="normal"></highlight></codeline>
<codeline lineno="235"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classShaderParser_1_1AssembleShaderEvalCB_1a86f0e5f34abfab44d24408407ec9fdd8" kindref="member">AssembleShaderEvalCB::eval_bool_decl</ref>(bool_decl<sp/>&amp;decl)<sp/>{<sp/><ref refid="classShaderParser_1_1AssembleShaderEvalCB_1a3058e4d1c01fc25c4a62bf0e150fe6ca" kindref="member">ctx</ref>.<ref refid="classshc_1_1VariantContext_1a3a044e9a324c8cb325403fb3d6e610a1" kindref="member">localBoolVars</ref>().<ref refid="classBoolVarTable_1a64619e7effcda65e6b155867dc3d45a4" kindref="member">add</ref>(decl,<sp/><ref refid="classShaderParser_1_1AssembleShaderEvalCB_1afabaa52e0ea25f004960aacc342b3c84" kindref="member">parser</ref>);<sp/>}</highlight></codeline>
<codeline lineno="236"><highlight class="normal"></highlight></codeline>
<codeline lineno="237"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classShaderParser_1_1AssembleShaderEvalCB_1a3b8376325930f135b0627b375c28e7c8" kindref="member">AssembleShaderEvalCB::decl_bool_alias</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*name,<sp/>bool_expr<sp/>&amp;expr)</highlight></codeline>
<codeline lineno="238"><highlight class="normal">{</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/>bool_decl<sp/>decl;</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/>SHTOK_ident<sp/>ident;</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/>ident.file_start<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/>ident.line_start<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/>ident.col_start<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/>decl.name<sp/>=<sp/>&amp;ident;</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/>decl.name-&gt;text<sp/>=<sp/>name;</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/>decl.expr<sp/>=<sp/>&amp;expr;</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><ref refid="classShaderParser_1_1AssembleShaderEvalCB_1a86f0e5f34abfab44d24408407ec9fdd8" kindref="member">eval_bool_decl</ref>(decl);</highlight></codeline>
<codeline lineno="248"><highlight class="normal">}</highlight></codeline>
<codeline lineno="249"><highlight class="normal"></highlight></codeline>
<codeline lineno="250"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classShaderParser_1_1AssembleShaderEvalCB_1a480c8889867db4476ba58b6a24f224d0" kindref="member">AssembleShaderEvalCB::eval_init_stat</ref>(SHTOK_ident<sp/>*var,<sp/>shader_init_value<sp/>&amp;v)</highlight></codeline>
<codeline lineno="251"><highlight class="normal">{</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>varNameId<sp/>=<sp/><ref refid="classShaderParser_1_1AssembleShaderEvalCB_1a3058e4d1c01fc25c4a62bf0e150fe6ca" kindref="member">ctx</ref>.<ref refid="classshc_1_1VariantContext_1a02952e27d2d5e304daad76b11cb1f4ad" kindref="member">tgtCtx</ref>().<ref refid="classshc_1_1TargetContext_1a64e71598c4751d165675e9e9f1f70b8e" kindref="member">varNameMap</ref>().<ref refid="classVarNameMap_1a8a6529882641e8945737456483807f7b" kindref="member">getVarId</ref>(var-&gt;text);</highlight></codeline>
<codeline lineno="253"><highlight class="normal"></highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>vi<sp/>=<sp/><ref refid="classShaderParser_1_1AssembleShaderEvalCB_1a2ba6fb52310a3ced7b31ede7fd8cbc8b" kindref="member">code</ref>.<ref refid="classShaderSemCode_1a65b81634f689797e098f940d0029be3f" kindref="member">find_var</ref>(varNameId);</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(vi<sp/>&lt;<sp/>0)</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="shErrorReporting_8h_1a634f6d6ca9a9f22c5eea4c9b8e20ef31" kindref="member">report_error</ref>(<ref refid="classShaderParser_1_1AssembleShaderEvalCB_1afabaa52e0ea25f004960aacc342b3c84" kindref="member">parser</ref>,<sp/>var,<sp/></highlight><highlight class="stringliteral">&quot;unknown<sp/>variable<sp/>&apos;%s&apos;&quot;</highlight><highlight class="normal">,<sp/>var-&gt;text);</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="260"><highlight class="normal"></highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(v.color)</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classShaderParser_1_1AssembleShaderEvalCB_1a2ba6fb52310a3ced7b31ede7fd8cbc8b" kindref="member">code</ref>.<ref refid="classShaderSemCode_1abe6ed6468793a4cbe55a75133a83d393" kindref="member">vars</ref>[vi].type<sp/>!=<sp/>SHVT_COLOR4)</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="shErrorReporting_8h_1a634f6d6ca9a9f22c5eea4c9b8e20ef31" kindref="member">report_error</ref>(<ref refid="classShaderParser_1_1AssembleShaderEvalCB_1afabaa52e0ea25f004960aacc342b3c84" kindref="member">parser</ref>,<sp/>v.color-&gt;color,<sp/></highlight><highlight class="stringliteral">&quot;can&apos;t<sp/>assign<sp/>color<sp/>to<sp/>%s&quot;</highlight><highlight class="normal">,<sp/>ShUtils::shader_var_type_name(<ref refid="classShaderParser_1_1AssembleShaderEvalCB_1a2ba6fb52310a3ced7b31ede7fd8cbc8b" kindref="member">code</ref>.<ref refid="classShaderSemCode_1abe6ed6468793a4cbe55a75133a83d393" kindref="member">vars</ref>[vi].type));</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>c;</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(v.color-&gt;color-&gt;num)</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>SHADER_TOKENS::SHTOK_diffuse:<sp/>c<sp/>=<sp/>SHCOD_DIFFUSE;<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>SHADER_TOKENS::SHTOK_emissive:<sp/>c<sp/>=<sp/>SHCOD_EMISSIVE;<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>SHADER_TOKENS::SHTOK_specular:<sp/>c<sp/>=<sp/>SHCOD_SPECULAR;<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>SHADER_TOKENS::SHTOK_ambient:<sp/>c<sp/>=<sp/>SHCOD_AMBIENT;<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:<sp/>G_ASSERT(0);</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ident_id<sp/>=<sp/><ref refid="classShaderParser_1_1AssembleShaderEvalCB_1a3058e4d1c01fc25c4a62bf0e150fe6ca" kindref="member">ctx</ref>.<ref refid="classshc_1_1VariantContext_1a02952e27d2d5e304daad76b11cb1f4ad" kindref="member">tgtCtx</ref>().<ref refid="classshc_1_1TargetContext_1ad61d7a132b4b9b57202752394eed414d" kindref="member">intervalNameMap</ref>().<ref refid="classHashStrings_1a2b43444bc74666574cba61624c72d22e" kindref="member">getNameId</ref>(var-&gt;text);</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>intervalIndex<sp/>=<sp/><ref refid="classShaderParser_1_1AssembleShaderEvalCB_1a7c80bebc9e0a9217fa0568c9e7ab1ec9" kindref="member">variant</ref>.<ref refid="structShaderVariant_1_1VariantInfo_1ab612d70412d1f34ce9ab03b291e99f25" kindref="member">intervals</ref>.<ref refid="classIntervalList_1a9a77d1ff0e92fe7dcab999886e06c533" kindref="member">getIntervalIndex</ref>(ident_id);</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(intervalIndex<sp/>!=<sp/><ref refid="varTypes_8h_1a68274b768c55a5469a7b292041a74fb8a57d75fe5c8b51fa43dc2bb2dd19daf79" kindref="member">INTERVAL_NOT_INIT</ref><sp/>&amp;&amp;<sp/>!<ref refid="classShaderParser_1_1AssembleShaderEvalCB_1a2ba6fb52310a3ced7b31ede7fd8cbc8b" kindref="member">code</ref>.<ref refid="classShaderSemCode_1abe6ed6468793a4cbe55a75133a83d393" kindref="member">vars</ref>[vi].dynamic)</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stVarId<sp/>=<sp/><ref refid="classShaderParser_1_1AssembleShaderEvalCB_1a2e5aa16f073ae06f6d67c338553e8c6b" kindref="member">sclass</ref>.<ref refid="classShaderClass_1a50005ffa656290b8617a38a80ecda50f" kindref="member">find_static_var</ref>(varNameId);</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(stVarId<sp/>&lt;<sp/>0)</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="shErrorReporting_8h_1a634f6d6ca9a9f22c5eea4c9b8e20ef31" kindref="member">report_error</ref>(<ref refid="classShaderParser_1_1AssembleShaderEvalCB_1afabaa52e0ea25f004960aacc342b3c84" kindref="member">parser</ref>,<sp/>var,<sp/></highlight><highlight class="stringliteral">&quot;variable<sp/>&lt;%s&gt;<sp/>is<sp/>not<sp/>static<sp/>var&quot;</highlight><highlight class="normal">,<sp/>var-&gt;text);</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="287"><highlight class="normal"></highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classShaderParser_1_1AssembleShaderEvalCB_1a2e5aa16f073ae06f6d67c338553e8c6b" kindref="member">sclass</ref>.<ref refid="classShaderClass_1ae43775f78533c08cf3075fd7b1cf952c" kindref="member">shInitCode</ref>.push_back(stVarId);</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classShaderParser_1_1AssembleShaderEvalCB_1a2e5aa16f073ae06f6d67c338553e8c6b" kindref="member">sclass</ref>.<ref refid="classShaderClass_1ae43775f78533c08cf3075fd7b1cf952c" kindref="member">shInitCode</ref>.push_back(shaderopcode::makeOp0(c));</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="292"><highlight class="normal"></highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classShaderParser_1_1AssembleShaderEvalCB_1a2ba6fb52310a3ced7b31ede7fd8cbc8b" kindref="member">code</ref>.<ref refid="classShaderSemCode_1a63a202d1e669c2a0a09e709e8e962d93" kindref="member">initcode</ref>.push_back(vi);</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classShaderParser_1_1AssembleShaderEvalCB_1a2ba6fb52310a3ced7b31ede7fd8cbc8b" kindref="member">code</ref>.<ref refid="classShaderSemCode_1a63a202d1e669c2a0a09e709e8e962d93" kindref="member">initcode</ref>.push_back(shaderopcode::makeOp0(c));</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(v.tex)</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classShaderParser_1_1AssembleShaderEvalCB_1a2ba6fb52310a3ced7b31ede7fd8cbc8b" kindref="member">code</ref>.<ref refid="classShaderSemCode_1abe6ed6468793a4cbe55a75133a83d393" kindref="member">vars</ref>[vi].type<sp/>!=<sp/>SHVT_TEXTURE)</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="shErrorReporting_8h_1a634f6d6ca9a9f22c5eea4c9b8e20ef31" kindref="member">report_error</ref>(<ref refid="classShaderParser_1_1AssembleShaderEvalCB_1afabaa52e0ea25f004960aacc342b3c84" kindref="member">parser</ref>,<sp/>v.tex-&gt;tex,<sp/></highlight><highlight class="stringliteral">&quot;can&apos;t<sp/>assign<sp/>texture<sp/>to<sp/>%s&quot;</highlight><highlight class="normal">,<sp/>ShUtils::shader_var_type_name(<ref refid="classShaderParser_1_1AssembleShaderEvalCB_1a2ba6fb52310a3ced7b31ede7fd8cbc8b" kindref="member">code</ref>.<ref refid="classShaderSemCode_1abe6ed6468793a4cbe55a75133a83d393" kindref="member">vars</ref>[vi].type));</highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ind;</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(v.tex-&gt;tex_num)</highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ind<sp/>=<sp/><ref refid="namespacesemutils_1a6811ced6d8ed588c8946e5816ea788a0" kindref="member">semutils::int_number</ref>(v.tex-&gt;tex_num-&gt;text);</highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(v.tex-&gt;tex_name<sp/>&amp;&amp;<sp/>v.tex-&gt;tex_name-&gt;num<sp/>==<sp/>SHADER_TOKENS::SHTOK_diffuse)</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ind<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>G_ASSERT(0);</highlight></codeline>
<codeline lineno="310"><highlight class="normal"></highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classShaderParser_1_1AssembleShaderEvalCB_1a2ba6fb52310a3ced7b31ede7fd8cbc8b" kindref="member">code</ref>.<ref refid="classShaderSemCode_1abe6ed6468793a4cbe55a75133a83d393" kindref="member">vars</ref>[vi].slot<sp/>=<sp/>ind;</highlight></codeline>
<codeline lineno="312"><highlight class="normal"></highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>e_texture_ident_id<sp/>=<sp/><ref refid="classShaderParser_1_1AssembleShaderEvalCB_1a3058e4d1c01fc25c4a62bf0e150fe6ca" kindref="member">ctx</ref>.<ref refid="classshc_1_1VariantContext_1a02952e27d2d5e304daad76b11cb1f4ad" kindref="member">tgtCtx</ref>().<ref refid="classshc_1_1TargetContext_1ad61d7a132b4b9b57202752394eed414d" kindref="member">intervalNameMap</ref>().<ref refid="classHashStrings_1a2b43444bc74666574cba61624c72d22e" kindref="member">getNameId</ref>(var-&gt;text);</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>intervalIndex<sp/>=<sp/><ref refid="classShaderParser_1_1AssembleShaderEvalCB_1a7c80bebc9e0a9217fa0568c9e7ab1ec9" kindref="member">variant</ref>.<ref refid="structShaderVariant_1_1VariantInfo_1ab612d70412d1f34ce9ab03b291e99f25" kindref="member">intervals</ref>.<ref refid="classIntervalList_1a9a77d1ff0e92fe7dcab999886e06c533" kindref="member">getIntervalIndex</ref>(e_texture_ident_id);</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stVarId<sp/>=<sp/>intervalIndex<sp/>!=<sp/><ref refid="varTypes_8h_1a68274b768c55a5469a7b292041a74fb8a57d75fe5c8b51fa43dc2bb2dd19daf79" kindref="member">INTERVAL_NOT_INIT</ref><sp/>?<sp/><ref refid="classShaderParser_1_1AssembleShaderEvalCB_1a2e5aa16f073ae06f6d67c338553e8c6b" kindref="member">sclass</ref>.<ref refid="classShaderClass_1a50005ffa656290b8617a38a80ecda50f" kindref="member">find_static_var</ref>(varNameId)<sp/>:<sp/>-1;</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(stVarId<sp/>&gt;=<sp/>0<sp/>&amp;&amp;<sp/>!<ref refid="classShaderParser_1_1AssembleShaderEvalCB_1a2ba6fb52310a3ced7b31ede7fd8cbc8b" kindref="member">code</ref>.<ref refid="classShaderSemCode_1abe6ed6468793a4cbe55a75133a83d393" kindref="member">vars</ref>[vi].dynamic)</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>opcode<sp/>=<sp/>shaderopcode::makeOp2(SHCOD_TEXTURE,<sp/>ind,<sp/>0);</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/><ref refid="classShaderParser_1_1AssembleShaderEvalCB_1a2e5aa16f073ae06f6d67c338553e8c6b" kindref="member">sclass</ref>.<ref refid="classShaderClass_1ae43775f78533c08cf3075fd7b1cf952c" kindref="member">shInitCode</ref>.size();<sp/>i<sp/>+=<sp/>2)</highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classShaderParser_1_1AssembleShaderEvalCB_1a2e5aa16f073ae06f6d67c338553e8c6b" kindref="member">sclass</ref>.<ref refid="classShaderClass_1ae43775f78533c08cf3075fd7b1cf952c" kindref="member">shInitCode</ref>[i]<sp/>==<sp/>stVarId)</highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classShaderParser_1_1AssembleShaderEvalCB_1a2e5aa16f073ae06f6d67c338553e8c6b" kindref="member">sclass</ref>.<ref refid="classShaderClass_1ae43775f78533c08cf3075fd7b1cf952c" kindref="member">shInitCode</ref>[i<sp/>+<sp/>1]<sp/>!=<sp/>opcode)</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="shErrorReporting_8h_1a634f6d6ca9a9f22c5eea4c9b8e20ef31" kindref="member">report_error</ref>(<ref refid="classShaderParser_1_1AssembleShaderEvalCB_1afabaa52e0ea25f004960aacc342b3c84" kindref="member">parser</ref>,<sp/>v.tex-&gt;tex,<sp/></highlight><highlight class="stringliteral">&quot;ambiguous<sp/>init<sp/>for<sp/>static<sp/>texture<sp/>&lt;%s&gt;<sp/>used<sp/>in<sp/>branching&quot;</highlight><highlight class="normal">,<sp/>var-&gt;text);</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="326"><highlight class="normal"></highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classShaderParser_1_1AssembleShaderEvalCB_1a2e5aa16f073ae06f6d67c338553e8c6b" kindref="member">sclass</ref>.<ref refid="classShaderClass_1ae43775f78533c08cf3075fd7b1cf952c" kindref="member">shInitCode</ref>.push_back(stVarId);</highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classShaderParser_1_1AssembleShaderEvalCB_1a2e5aa16f073ae06f6d67c338553e8c6b" kindref="member">sclass</ref>.<ref refid="classShaderClass_1ae43775f78533c08cf3075fd7b1cf952c" kindref="member">shInitCode</ref>.push_back(opcode);</highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="331"><highlight class="normal"></highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classShaderParser_1_1AssembleShaderEvalCB_1a2ba6fb52310a3ced7b31ede7fd8cbc8b" kindref="member">code</ref>.<ref refid="classShaderSemCode_1a63a202d1e669c2a0a09e709e8e962d93" kindref="member">initcode</ref>.push_back(vi);</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classShaderParser_1_1AssembleShaderEvalCB_1a2ba6fb52310a3ced7b31ede7fd8cbc8b" kindref="member">code</ref>.<ref refid="classShaderSemCode_1a63a202d1e669c2a0a09e709e8e962d93" kindref="member">initcode</ref>.push_back(shaderopcode::makeOp2(SHCOD_TEXTURE,<sp/>ind,<sp/>0));</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/><sp/>G_ASSERT(0);</highlight></codeline>
<codeline lineno="337"><highlight class="normal">}</highlight></codeline>
<codeline lineno="338"><highlight class="normal"></highlight></codeline>
<codeline lineno="339"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>channel_type(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>token)</highlight></codeline>
<codeline lineno="340"><highlight class="normal">{</highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(token)</highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>SHADER_TOKENS::SHTOK_float1:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>SCTYPE_FLOAT1;</highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>SHADER_TOKENS::SHTOK_float2:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>SCTYPE_FLOAT2;</highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>SHADER_TOKENS::SHTOK_float3:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>SCTYPE_FLOAT3;</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>SHADER_TOKENS::SHTOK_float4:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>SCTYPE_FLOAT4;</highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>SHADER_TOKENS::SHTOK_short2:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>SCTYPE_SHORT2;</highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>SHADER_TOKENS::SHTOK_short4:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>SCTYPE_SHORT4;</highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>SHADER_TOKENS::SHTOK_ubyte4:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>SCTYPE_UBYTE4;</highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>SHADER_TOKENS::SHTOK_color8:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>SCTYPE_E3DCOLOR;</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>SHADER_TOKENS::SHTOK_half2:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>SCTYPE_HALF2;</highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>SHADER_TOKENS::SHTOK_half4:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>SCTYPE_HALF4;</highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>SHADER_TOKENS::SHTOK_short2n:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>SCTYPE_SHORT2N;</highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>SHADER_TOKENS::SHTOK_short4n:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>SCTYPE_SHORT4N;</highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>SHADER_TOKENS::SHTOK_ushort2n:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>SCTYPE_USHORT2N;</highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>SHADER_TOKENS::SHTOK_ushort4n:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>SCTYPE_USHORT4N;</highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>SHADER_TOKENS::SHTOK_udec3:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>SCTYPE_UDEC3;</highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>SHADER_TOKENS::SHTOK_dec3n:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>SCTYPE_DEC3N;</highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="361"><highlight class="normal">}</highlight></codeline>
<codeline lineno="362"><highlight class="normal"></highlight></codeline>
<codeline lineno="363"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>channel_usage(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>token)</highlight></codeline>
<codeline lineno="364"><highlight class="normal">{</highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(token)</highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>SHADER_TOKENS::SHTOK_pos:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>SCUSAGE_POS;</highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>SHADER_TOKENS::SHTOK_norm:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>SCUSAGE_NORM;</highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>SHADER_TOKENS::SHTOK_vcol:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>SCUSAGE_VCOL;</highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>SHADER_TOKENS::SHTOK_tc:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>SCUSAGE_TC;</highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>SHADER_TOKENS::SHTOK_extra:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>SCUSAGE_EXTRA;</highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="374"><highlight class="normal">}</highlight></codeline>
<codeline lineno="375"><highlight class="normal"></highlight></codeline>
<codeline lineno="376"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classShaderParser_1_1AssembleShaderEvalCB_1a3e8154a7f96876f610141f55f60b1df2" kindref="member">AssembleShaderEvalCB::eval_channel_decl</ref>(channel_decl<sp/>&amp;s,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>str_idx)</highlight></codeline>
<codeline lineno="377"><highlight class="normal">{</highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/>ShaderChannelId<sp/>ch;</highlight></codeline>
<codeline lineno="379"><highlight class="normal"></highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>tp<sp/>=<sp/>::channel_type(s.type-&gt;type-&gt;num);</highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(tp<sp/>&lt;<sp/>0)</highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="shErrorReporting_8h_1a634f6d6ca9a9f22c5eea4c9b8e20ef31" kindref="member">report_error</ref>(<ref refid="classShaderParser_1_1AssembleShaderEvalCB_1afabaa52e0ea25f004960aacc342b3c84" kindref="member">parser</ref>,<sp/>s.type-&gt;type,<sp/></highlight><highlight class="stringliteral">&quot;unsupported<sp/>channel<sp/>type:<sp/>%s&quot;</highlight><highlight class="normal">,<sp/>s.type-&gt;type-&gt;text);</highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/>G_ASSERT(tp<sp/>&gt;=<sp/>0);</highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/>ch.t<sp/>=<sp/>tp;</highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>vbus<sp/>=<sp/>::channel_usage(s.usg-&gt;usage-&gt;num);</highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/>G_ASSERT(vbus<sp/>&gt;=<sp/>0);</highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(vbus<sp/>==<sp/>SCUSAGE_EXTRA<sp/>||<sp/>vbus<sp/>==<sp/>SCUSAGE_LIGHTMAP)</highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="shErrorReporting_8h_1a634f6d6ca9a9f22c5eea4c9b8e20ef31" kindref="member">report_error</ref>(<ref refid="classShaderParser_1_1AssembleShaderEvalCB_1afabaa52e0ea25f004960aacc342b3c84" kindref="member">parser</ref>,<sp/>s.usg-&gt;usage,<sp/></highlight><highlight class="stringliteral">&quot;invalid<sp/>channel<sp/>usage&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/>ch.vbu<sp/>=<sp/>vbus;</highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/>ch.vbui<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(s.usgi)</highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/><sp/><sp/>G_ASSERT(s.usgi-&gt;index);</highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/><sp/><sp/>ch.vbui<sp/>=<sp/><ref refid="namespacesemutils_1a6811ced6d8ed588c8946e5816ea788a0" kindref="member">semutils::int_number</ref>(s.usgi-&gt;index-&gt;text);</highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="402"><highlight class="normal"></highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>us<sp/>=<sp/>::channel_usage(s.src_usg-&gt;usage-&gt;num);</highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/>G_ASSERT(us<sp/>&gt;=<sp/>0);</highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/>ch.u<sp/>=<sp/>us;</highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/>ch.ui<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(s.src_usgi)</highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/><sp/><sp/>G_ASSERT(s.src_usgi-&gt;index);</highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/><sp/><sp/>ch.ui<sp/>=<sp/><ref refid="namespacesemutils_1a6811ced6d8ed588c8946e5816ea788a0" kindref="member">semutils::int_number</ref>(s.src_usgi-&gt;index-&gt;text);</highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="412"><highlight class="normal"></highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(s.modifier)</highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(s.modifier-&gt;num)</highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>SHADER_TOKENS::SHTOK_signed_pack:<sp/>ch.mod<sp/>=<sp/>CMOD_SIGNED_PACK;<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>SHADER_TOKENS::SHTOK_unsigned_pack:<sp/>ch.mod<sp/>=<sp/>CMOD_UNSIGNED_PACK;<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>SHADER_TOKENS::SHTOK_bounding_pack:<sp/>ch.mod<sp/>=<sp/>CMOD_BOUNDING_PACK;<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="420"><highlight class="normal"></highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>SHADER_TOKENS::SHTOK_mul_1k:<sp/>ch.mod<sp/>=<sp/>CMOD_MUL_1K;<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>SHADER_TOKENS::SHTOK_mul_2k:<sp/>ch.mod<sp/>=<sp/>CMOD_MUL_2K;<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>SHADER_TOKENS::SHTOK_mul_4k:<sp/>ch.mod<sp/>=<sp/>CMOD_MUL_4K;<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>SHADER_TOKENS::SHTOK_mul_8k:<sp/>ch.mod<sp/>=<sp/>CMOD_MUL_8K;<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>SHADER_TOKENS::SHTOK_mul_16k:<sp/>ch.mod<sp/>=<sp/>CMOD_MUL_16K;<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>SHADER_TOKENS::SHTOK_mul_32767:<sp/>ch.mod<sp/>=<sp/>CMOD_SIGNED_SHORT_PACK;<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="427"><highlight class="normal"></highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:<sp/>G_ASSERT(0);</highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="430"><highlight class="normal"></highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>debug(&quot;modifier<sp/>detected:<sp/>%d&quot;,<sp/>ch.mod);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/>ch.streamId<sp/>=<sp/>str_idx;</highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/><ref refid="classShaderParser_1_1AssembleShaderEvalCB_1a2ba6fb52310a3ced7b31ede7fd8cbc8b" kindref="member">code</ref>.<ref refid="classShaderSemCode_1a8b32469ee07d07ba8dd9b6a7d2d20805" kindref="member">channel</ref>.push_back(ch);</highlight></codeline>
<codeline lineno="435"><highlight class="normal">}</highlight></codeline>
<codeline lineno="436"><highlight class="normal"></highlight></codeline>
<codeline lineno="437"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="classShaderParser_1_1AssembleShaderEvalCB_1a0292aa556aa46a5382fc848545707b9b" kindref="member">AssembleShaderEvalCB::get_blend_k</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Terminal<sp/>&amp;s)</highlight></codeline>
<codeline lineno="438"><highlight class="normal">{</highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*nm<sp/>=<sp/>s.text;</highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strcmp(nm,<sp/></highlight><highlight class="stringliteral">&quot;zero&quot;</highlight><highlight class="normal">)<sp/>==<sp/>0<sp/>||<sp/>strcmp(nm,<sp/></highlight><highlight class="stringliteral">&quot;0&quot;</highlight><highlight class="normal">)<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>DRV3DC::BLEND_ZERO;</highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strcmp(nm,<sp/></highlight><highlight class="stringliteral">&quot;one&quot;</highlight><highlight class="normal">)<sp/>==<sp/>0<sp/>||<sp/>strcmp(nm,<sp/></highlight><highlight class="stringliteral">&quot;1&quot;</highlight><highlight class="normal">)<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>DRV3DC::BLEND_ONE;</highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strcmp(nm,<sp/></highlight><highlight class="stringliteral">&quot;sc&quot;</highlight><highlight class="normal">)<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>DRV3DC::BLEND_SRCCOLOR;</highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strcmp(nm,<sp/></highlight><highlight class="stringliteral">&quot;isc&quot;</highlight><highlight class="normal">)<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>DRV3DC::BLEND_INVSRCCOLOR;</highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strcmp(nm,<sp/></highlight><highlight class="stringliteral">&quot;sa&quot;</highlight><highlight class="normal">)<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>DRV3DC::BLEND_SRCALPHA;</highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strcmp(nm,<sp/></highlight><highlight class="stringliteral">&quot;isa&quot;</highlight><highlight class="normal">)<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>DRV3DC::BLEND_INVSRCALPHA;</highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strcmp(nm,<sp/></highlight><highlight class="stringliteral">&quot;da&quot;</highlight><highlight class="normal">)<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>DRV3DC::BLEND_DESTALPHA;</highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strcmp(nm,<sp/></highlight><highlight class="stringliteral">&quot;ida&quot;</highlight><highlight class="normal">)<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>DRV3DC::BLEND_INVDESTALPHA;</highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strcmp(nm,<sp/></highlight><highlight class="stringliteral">&quot;dc&quot;</highlight><highlight class="normal">)<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>DRV3DC::BLEND_DESTCOLOR;</highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strcmp(nm,<sp/></highlight><highlight class="stringliteral">&quot;idc&quot;</highlight><highlight class="normal">)<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>DRV3DC::BLEND_INVDESTCOLOR;</highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strcmp(nm,<sp/></highlight><highlight class="stringliteral">&quot;sasat&quot;</highlight><highlight class="normal">)<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>DRV3DC::BLEND_SRCALPHASAT;</highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strcmp(nm,<sp/></highlight><highlight class="stringliteral">&quot;bf&quot;</highlight><highlight class="normal">)<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>DRV3DC::BLEND_BLENDFACTOR;</highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strcmp(nm,<sp/></highlight><highlight class="stringliteral">&quot;ibf&quot;</highlight><highlight class="normal">)<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>DRV3DC::BLEND_INVBLENDFACTOR;</highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strcmp(nm,<sp/></highlight><highlight class="stringliteral">&quot;sc1&quot;</highlight><highlight class="normal">)<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="467"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>DRV3DC::EXT_BLEND_SRC1COLOR;</highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strcmp(nm,<sp/></highlight><highlight class="stringliteral">&quot;isc1&quot;</highlight><highlight class="normal">)<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>DRV3DC::EXT_BLEND_INVSRC1COLOR;</highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strcmp(nm,<sp/></highlight><highlight class="stringliteral">&quot;sa1&quot;</highlight><highlight class="normal">)<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="471"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>DRV3DC::EXT_BLEND_SRC1ALPHA;</highlight></codeline>
<codeline lineno="472"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strcmp(nm,<sp/></highlight><highlight class="stringliteral">&quot;isa1&quot;</highlight><highlight class="normal">)<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>DRV3DC::EXT_BLEND_INVSRC1ALPHA;</highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="shErrorReporting_8h_1a634f6d6ca9a9f22c5eea4c9b8e20ef31" kindref="member">report_error</ref>(<ref refid="classShaderParser_1_1AssembleShaderEvalCB_1afabaa52e0ea25f004960aacc342b3c84" kindref="member">parser</ref>,<sp/>&amp;s,<sp/></highlight><highlight class="stringliteral">&quot;unknown<sp/>blend<sp/>factor&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="477"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="478"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="479"><highlight class="normal">}</highlight></codeline>
<codeline lineno="480"><highlight class="normal"></highlight></codeline>
<codeline lineno="481"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="classShaderParser_1_1AssembleShaderEvalCB_1a95994dc93e46ff28ada30d35fed26a1c" kindref="member">AssembleShaderEvalCB::get_blend_op_k</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Terminal<sp/>&amp;s)</highlight></codeline>
<codeline lineno="482"><highlight class="normal">{</highlight></codeline>
<codeline lineno="483"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*nm<sp/>=<sp/>s.text;</highlight></codeline>
<codeline lineno="484"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strcmp(nm,<sp/></highlight><highlight class="stringliteral">&quot;add&quot;</highlight><highlight class="normal">)<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="485"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>DRV3DC::BLENDOP_ADD;</highlight></codeline>
<codeline lineno="486"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strcmp(nm,<sp/></highlight><highlight class="stringliteral">&quot;min&quot;</highlight><highlight class="normal">)<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="487"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>DRV3DC::BLENDOP_MIN;</highlight></codeline>
<codeline lineno="488"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strcmp(nm,<sp/></highlight><highlight class="stringliteral">&quot;max&quot;</highlight><highlight class="normal">)<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="489"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>DRV3DC::BLENDOP_MAX;</highlight></codeline>
<codeline lineno="490"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="491"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="shErrorReporting_8h_1a634f6d6ca9a9f22c5eea4c9b8e20ef31" kindref="member">report_error</ref>(<ref refid="classShaderParser_1_1AssembleShaderEvalCB_1afabaa52e0ea25f004960aacc342b3c84" kindref="member">parser</ref>,<sp/>&amp;s,<sp/></highlight><highlight class="stringliteral">&quot;unknown<sp/>blend<sp/>op&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="493"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="495"><highlight class="normal">}</highlight></codeline>
<codeline lineno="496"><highlight class="normal"></highlight></codeline>
<codeline lineno="497"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="classShaderParser_1_1AssembleShaderEvalCB_1a1e335ec618c1855de86a27862763d629" kindref="member">AssembleShaderEvalCB::get_stensil_op_k</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Terminal<sp/>&amp;s)</highlight></codeline>
<codeline lineno="498"><highlight class="normal">{</highlight></codeline>
<codeline lineno="499"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*nm<sp/>=<sp/>s.text;</highlight></codeline>
<codeline lineno="500"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strcmp(nm,<sp/></highlight><highlight class="stringliteral">&quot;keep&quot;</highlight><highlight class="normal">)<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="501"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>DRV3DC::STNCLOP_KEEP;</highlight></codeline>
<codeline lineno="502"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strcmp(nm,<sp/></highlight><highlight class="stringliteral">&quot;zero&quot;</highlight><highlight class="normal">)<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="503"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>DRV3DC::STNCLOP_ZERO;</highlight></codeline>
<codeline lineno="504"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strcmp(nm,<sp/></highlight><highlight class="stringliteral">&quot;replace&quot;</highlight><highlight class="normal">)<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="505"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>DRV3DC::STNCLOP_REPLACE;</highlight></codeline>
<codeline lineno="506"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strcmp(nm,<sp/></highlight><highlight class="stringliteral">&quot;incrsat&quot;</highlight><highlight class="normal">)<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="507"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>DRV3DC::STNCLOP_INCRSAT;</highlight></codeline>
<codeline lineno="508"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strcmp(nm,<sp/></highlight><highlight class="stringliteral">&quot;decrsat&quot;</highlight><highlight class="normal">)<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="509"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>DRV3DC::STNCLOP_DECRSAT;</highlight></codeline>
<codeline lineno="510"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strcmp(nm,<sp/></highlight><highlight class="stringliteral">&quot;incr&quot;</highlight><highlight class="normal">)<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="511"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>DRV3DC::STNCLOP_INCR;</highlight></codeline>
<codeline lineno="512"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strcmp(nm,<sp/></highlight><highlight class="stringliteral">&quot;dect&quot;</highlight><highlight class="normal">)<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="513"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>DRV3DC::STNCLOP_DECR;</highlight></codeline>
<codeline lineno="514"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="515"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="516"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="shErrorReporting_8h_1a634f6d6ca9a9f22c5eea4c9b8e20ef31" kindref="member">report_error</ref>(<ref refid="classShaderParser_1_1AssembleShaderEvalCB_1afabaa52e0ea25f004960aacc342b3c84" kindref="member">parser</ref>,<sp/>&amp;s,<sp/></highlight><highlight class="stringliteral">&quot;unknown<sp/>stencil<sp/>op&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="517"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="518"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="519"><highlight class="normal">}</highlight></codeline>
<codeline lineno="520"><highlight class="normal"></highlight></codeline>
<codeline lineno="521"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="classShaderParser_1_1AssembleShaderEvalCB_1a24fee822ee6d7b1f95ebc4d26abee7c2" kindref="member">AssembleShaderEvalCB::get_stencil_cmpf_k</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Terminal<sp/>&amp;s)</highlight></codeline>
<codeline lineno="522"><highlight class="normal">{</highlight></codeline>
<codeline lineno="523"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*nm<sp/>=<sp/>s.text;</highlight></codeline>
<codeline lineno="524"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strcmp(nm,<sp/></highlight><highlight class="stringliteral">&quot;never&quot;</highlight><highlight class="normal">)<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="525"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>DRV3DC::CMPF_NEVER;</highlight></codeline>
<codeline lineno="526"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strcmp(nm,<sp/></highlight><highlight class="stringliteral">&quot;less&quot;</highlight><highlight class="normal">)<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="527"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>DRV3DC::CMPF_LESS;</highlight></codeline>
<codeline lineno="528"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strcmp(nm,<sp/></highlight><highlight class="stringliteral">&quot;equal&quot;</highlight><highlight class="normal">)<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="529"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>DRV3DC::CMPF_EQUAL;</highlight></codeline>
<codeline lineno="530"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strcmp(nm,<sp/></highlight><highlight class="stringliteral">&quot;lessequal&quot;</highlight><highlight class="normal">)<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="531"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>DRV3DC::CMPF_LESSEQUAL;</highlight></codeline>
<codeline lineno="532"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strcmp(nm,<sp/></highlight><highlight class="stringliteral">&quot;greater&quot;</highlight><highlight class="normal">)<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="533"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>DRV3DC::CMPF_GREATER;</highlight></codeline>
<codeline lineno="534"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strcmp(nm,<sp/></highlight><highlight class="stringliteral">&quot;notequal&quot;</highlight><highlight class="normal">)<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="535"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>DRV3DC::CMPF_NOTEQUAL;</highlight></codeline>
<codeline lineno="536"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strcmp(nm,<sp/></highlight><highlight class="stringliteral">&quot;greaterequal&quot;</highlight><highlight class="normal">)<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="537"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>DRV3DC::CMPF_GREATEREQUAL;</highlight></codeline>
<codeline lineno="538"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strcmp(nm,<sp/></highlight><highlight class="stringliteral">&quot;always&quot;</highlight><highlight class="normal">)<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="539"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>DRV3DC::CMPF_ALWAYS;</highlight></codeline>
<codeline lineno="540"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="541"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="542"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="shErrorReporting_8h_1a634f6d6ca9a9f22c5eea4c9b8e20ef31" kindref="member">report_error</ref>(<ref refid="classShaderParser_1_1AssembleShaderEvalCB_1afabaa52e0ea25f004960aacc342b3c84" kindref="member">parser</ref>,<sp/>&amp;s,<sp/></highlight><highlight class="stringliteral">&quot;unknown<sp/>stencil<sp/>cmp<sp/>func&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="543"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="544"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="545"><highlight class="normal">}</highlight></codeline>
<codeline lineno="546"><highlight class="normal"></highlight></codeline>
<codeline lineno="547"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classShaderParser_1_1AssembleShaderEvalCB_1a2c157ef42d3454c48841426347e84113" kindref="member">AssembleShaderEvalCB::get_depth_cmpf_k</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Terminal<sp/>&amp;s,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>&amp;cmpf)</highlight></codeline>
<codeline lineno="548"><highlight class="normal">{</highlight></codeline>
<codeline lineno="549"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*nm<sp/>=<sp/>s.text;</highlight></codeline>
<codeline lineno="550"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strcmp(nm,<sp/></highlight><highlight class="stringliteral">&quot;equal&quot;</highlight><highlight class="normal">)<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="551"><highlight class="normal"><sp/><sp/><sp/><sp/>cmpf<sp/>=<sp/>DRV3DC::CMPF_EQUAL;</highlight></codeline>
<codeline lineno="552"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strcmp(nm,<sp/></highlight><highlight class="stringliteral">&quot;notequal&quot;</highlight><highlight class="normal">)<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="553"><highlight class="normal"><sp/><sp/><sp/><sp/>cmpf<sp/>=<sp/>DRV3DC::CMPF_NOTEQUAL;</highlight></codeline>
<codeline lineno="554"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strcmp(nm,<sp/></highlight><highlight class="stringliteral">&quot;always&quot;</highlight><highlight class="normal">)<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="555"><highlight class="normal"><sp/><sp/><sp/><sp/>cmpf<sp/>=<sp/>DRV3DC::CMPF_ALWAYS;</highlight></codeline>
<codeline lineno="556"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="557"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="558"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="shErrorReporting_8h_1a634f6d6ca9a9f22c5eea4c9b8e20ef31" kindref="member">report_error</ref>(<ref refid="classShaderParser_1_1AssembleShaderEvalCB_1afabaa52e0ea25f004960aacc342b3c84" kindref="member">parser</ref>,<sp/>&amp;s,<sp/></highlight><highlight class="stringliteral">&quot;unknown<sp/>depth<sp/>cmp<sp/>func&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="559"><highlight class="normal"><sp/><sp/><sp/><sp/>cmpf<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="560"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="561"><highlight class="normal">}</highlight></codeline>
<codeline lineno="562"><highlight class="normal"></highlight></codeline>
<codeline lineno="563"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="classShaderParser_1_1AssembleShaderEvalCB_1a424f366a6638e8386b30cead6b91f905" kindref="member">AssembleShaderEvalCB::get_bool_const</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Terminal<sp/>&amp;s)</highlight></codeline>
<codeline lineno="564"><highlight class="normal">{</highlight></codeline>
<codeline lineno="565"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(s.num<sp/>==<sp/>SHADER_TOKENS::SHTOK__true)</highlight></codeline>
<codeline lineno="566"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="567"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(s.num<sp/>==<sp/>SHADER_TOKENS::SHTOK__false)</highlight></codeline>
<codeline lineno="568"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="569"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="570"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="shErrorReporting_8h_1a634f6d6ca9a9f22c5eea4c9b8e20ef31" kindref="member">report_error</ref>(<ref refid="classShaderParser_1_1AssembleShaderEvalCB_1afabaa52e0ea25f004960aacc342b3c84" kindref="member">parser</ref>,<sp/>&amp;s,<sp/></highlight><highlight class="stringliteral">&quot;expected<sp/>true<sp/>or<sp/>false&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="571"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="572"><highlight class="normal">}</highlight></codeline>
<codeline lineno="573"><highlight class="normal"></highlight></codeline>
<codeline lineno="574"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classShaderParser_1_1AssembleShaderEvalCB_1a49c2d527b890a4a01b14a9e0ba660d65" kindref="member">AssembleShaderEvalCB::eval_blend_value</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Terminal<sp/>&amp;blend_func_tok,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>SHTOK_intnum<sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>index_tok,</highlight></codeline>
<codeline lineno="575"><highlight class="normal"><sp/><sp/><ref refid="structSemanticShaderPass_1a8c92d0de5ee5a7daefe489906978b789" kindref="member">SemanticShaderPass::BlendValues</ref><sp/>&amp;blend_values,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>BlendValueType<sp/>type)</highlight></codeline>
<codeline lineno="576"><highlight class="normal">{</highlight></codeline>
<codeline lineno="577"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>blendValue<sp/>=<sp/>type<sp/>==<sp/><ref refid="classShaderParser_1_1AssembleShaderEvalCB_1af08835abccd6bc11220cf91b6ae85e5ca8d6afc555354627f9706e93f0c452720" kindref="member">BlendValueType::BlendFunc</ref><sp/>?<sp/><ref refid="classShaderParser_1_1AssembleShaderEvalCB_1a95994dc93e46ff28ada30d35fed26a1c" kindref="member">get_blend_op_k</ref>(blend_func_tok)<sp/>:<sp/><ref refid="classShaderParser_1_1AssembleShaderEvalCB_1a0292aa556aa46a5382fc848545707b9b" kindref="member">get_blend_k</ref>(blend_func_tok);</highlight></codeline>
<codeline lineno="578"><highlight class="normal"><sp/><sp/><ref refid="classShaderParser_1_1AssembleShaderEvalCB_1afc3b519f4870906d37b91b0c43d9dd3d" kindref="member">curpass</ref>-&gt;<ref refid="structSemanticShaderPass_1aba89d35638c7caa0e1c5967554c36304" kindref="member">dual_source_blending</ref><sp/>|=</highlight></codeline>
<codeline lineno="579"><highlight class="normal"><sp/><sp/><sp/><sp/>type<sp/>==<sp/><ref refid="classShaderParser_1_1AssembleShaderEvalCB_1af08835abccd6bc11220cf91b6ae85e5ca3c3ba615798db7340cd94c6e2d59e74e" kindref="member">BlendValueType::Factor</ref><sp/>&amp;&amp;<sp/>(blendValue<sp/>==<sp/>DRV3DC::EXT_BLEND_SRC1COLOR<sp/>||<sp/>blendValue<sp/>==<sp/>DRV3DC::EXT_BLEND_INVSRC1COLOR<sp/>||</highlight></codeline>
<codeline lineno="580"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>blendValue<sp/>==<sp/>DRV3DC::EXT_BLEND_SRC1ALPHA<sp/>||<sp/>blendValue<sp/>==<sp/>DRV3DC::EXT_BLEND_INVSRC1ALPHA);</highlight></codeline>
<codeline lineno="581"><highlight class="normal"></highlight></codeline>
<codeline lineno="582"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(index_tok)</highlight></codeline>
<codeline lineno="583"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="584"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>index<sp/>=<sp/><ref refid="namespacesemutils_1a6811ced6d8ed588c8946e5816ea788a0" kindref="member">semutils::int_number</ref>(index_tok-&gt;text);</highlight></codeline>
<codeline lineno="585"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(index<sp/>&lt;<sp/>0<sp/>||<sp/>index<sp/>&gt;=<sp/>shaders::RenderState::NumIndependentBlendParameters)</highlight></codeline>
<codeline lineno="586"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="587"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="shErrorReporting_8h_1a634f6d6ca9a9f22c5eea4c9b8e20ef31" kindref="member">report_error</ref>(<ref refid="classShaderParser_1_1AssembleShaderEvalCB_1afabaa52e0ea25f004960aacc342b3c84" kindref="member">parser</ref>,<sp/>&amp;blend_func_tok,</highlight></codeline>
<codeline lineno="588"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;blend<sp/>value<sp/>index<sp/>must<sp/>be<sp/>less<sp/>than<sp/>%d.<sp/>Can<sp/>be<sp/>increased<sp/>if<sp/>needed.<sp/>See:<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="589"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;shaders::RenderState::NumIndependentBlendParameters&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="590"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>shaders::RenderState::NumIndependentBlendParameters);</highlight></codeline>
<codeline lineno="591"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="592"><highlight class="normal"></highlight></codeline>
<codeline lineno="593"><highlight class="normal"><sp/><sp/><sp/><sp/>blend_values[index]<sp/>=<sp/>blendValue;</highlight></codeline>
<codeline lineno="594"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classShaderParser_1_1AssembleShaderEvalCB_1afc3b519f4870906d37b91b0c43d9dd3d" kindref="member">curpass</ref>-&gt;<ref refid="structSemanticShaderPass_1ad4ff83ab835a58805addbcca7492ebfe" kindref="member">independent_blending</ref><sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="595"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="596"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="597"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="598"><highlight class="normal"><sp/><sp/><sp/><sp/>eastl::fill(blend_values.begin(),<sp/>blend_values.end(),<sp/>blendValue);</highlight></codeline>
<codeline lineno="599"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="600"><highlight class="normal">}</highlight></codeline>
<codeline lineno="601"><highlight class="normal"></highlight></codeline>
<codeline lineno="602"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classShaderParser_1_1AssembleShaderEvalCB_1a336c7cd326496ed18d4c80dd3fcbb7ec" kindref="member">AssembleShaderEvalCB::eval_state</ref>(state_stat<sp/>&amp;s)</highlight></codeline>
<codeline lineno="603"><highlight class="normal">{</highlight></codeline>
<codeline lineno="604"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(s.var)</highlight></codeline>
<codeline lineno="605"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="606"><highlight class="normal"></highlight></codeline>
<codeline lineno="607"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!s.value)</highlight></codeline>
<codeline lineno="608"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="609"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="shErrorReporting_8h_1a634f6d6ca9a9f22c5eea4c9b8e20ef31" kindref="member">report_error</ref>(<ref refid="classShaderParser_1_1AssembleShaderEvalCB_1afabaa52e0ea25f004960aacc342b3c84" kindref="member">parser</ref>,<sp/>s.var-&gt;var,<sp/></highlight><highlight class="stringliteral">&quot;expected<sp/>value&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="610"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="611"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="612"><highlight class="normal"></highlight></codeline>
<codeline lineno="613"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isPlainVal<sp/>=<sp/>s.value-&gt;plain_value<sp/>!=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="614"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>takesPlainVal<sp/>=<sp/>s.var-&gt;var-&gt;num<sp/>!=<sp/>SHADER_TOKENS::SHTOK_blend_factor;</highlight></codeline>
<codeline lineno="615"><highlight class="normal"></highlight></codeline>
<codeline lineno="616"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(isPlainVal<sp/>&amp;&amp;<sp/>!takesPlainVal)</highlight></codeline>
<codeline lineno="617"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="618"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="shErrorReporting_8h_1a634f6d6ca9a9f22c5eea4c9b8e20ef31" kindref="member">report_error</ref>(<ref refid="classShaderParser_1_1AssembleShaderEvalCB_1afabaa52e0ea25f004960aacc342b3c84" kindref="member">parser</ref>,<sp/>s.var-&gt;var,<sp/></highlight><highlight class="stringliteral">&quot;blend_factor<sp/>takes<sp/>a<sp/>color<sp/>literal&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="619"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="620"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="621"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!isPlainVal<sp/>&amp;&amp;<sp/>takesPlainVal)</highlight></codeline>
<codeline lineno="622"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="623"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="shErrorReporting_8h_1a634f6d6ca9a9f22c5eea4c9b8e20ef31" kindref="member">report_error</ref>(<ref refid="classShaderParser_1_1AssembleShaderEvalCB_1afabaa52e0ea25f004960aacc342b3c84" kindref="member">parser</ref>,<sp/>s.var-&gt;var,<sp/></highlight><highlight class="stringliteral">&quot;%s<sp/>does<sp/>not<sp/>take<sp/>a<sp/>color<sp/>value<sp/>as<sp/>argument&quot;</highlight><highlight class="normal">,<sp/>s.var-&gt;var-&gt;text);</highlight></codeline>
<codeline lineno="624"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="625"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="626"><highlight class="normal"></highlight></codeline>
<codeline lineno="627"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>supports_indexing<sp/>=</highlight></codeline>
<codeline lineno="628"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>(s.var-&gt;var-&gt;num<sp/>==<sp/>SHADER_TOKENS::SHTOK_blend_src)<sp/>||<sp/>(s.var-&gt;var-&gt;num<sp/>==<sp/>SHADER_TOKENS::SHTOK_blend_dst)<sp/>||</highlight></codeline>
<codeline lineno="629"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>(s.var-&gt;var-&gt;num<sp/>==<sp/>SHADER_TOKENS::SHTOK_blend_asrc)<sp/>||<sp/>(s.var-&gt;var-&gt;num<sp/>==<sp/>SHADER_TOKENS::SHTOK_blend_adst)<sp/>||</highlight></codeline>
<codeline lineno="630"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>(s.var-&gt;var-&gt;num<sp/>==<sp/>SHADER_TOKENS::SHTOK_blend_op)<sp/>||<sp/>(s.var-&gt;var-&gt;num<sp/>==<sp/>SHADER_TOKENS::SHTOK_blend_aop)<sp/>||</highlight></codeline>
<codeline lineno="631"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>(s.var-&gt;var-&gt;num<sp/>==<sp/>SHADER_TOKENS::SHTOK_color_write);</highlight></codeline>
<codeline lineno="632"><highlight class="normal"></highlight></codeline>
<codeline lineno="633"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(s.index<sp/>&amp;&amp;<sp/>!supports_indexing)</highlight></codeline>
<codeline lineno="634"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="635"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="shErrorReporting_8h_1a634f6d6ca9a9f22c5eea4c9b8e20ef31" kindref="member">report_error</ref>(<ref refid="classShaderParser_1_1AssembleShaderEvalCB_1afabaa52e0ea25f004960aacc342b3c84" kindref="member">parser</ref>,<sp/>s.var-&gt;var,<sp/></highlight><highlight class="stringliteral">&quot;%s[%d]<sp/>is<sp/>not<sp/>allowed<sp/>(index<sp/>is<sp/>not<sp/>supported<sp/>for<sp/>this<sp/>attribute&quot;</highlight><highlight class="normal">,<sp/>s.var-&gt;var-&gt;text,</highlight></codeline>
<codeline lineno="636"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacesemutils_1a6811ced6d8ed588c8946e5816ea788a0" kindref="member">semutils::int_number</ref>(s.index-&gt;text));</highlight></codeline>
<codeline lineno="637"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="638"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="639"><highlight class="normal"></highlight></codeline>
<codeline lineno="640"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>color_write_mask<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="641"><highlight class="normal"></highlight></codeline>
<codeline lineno="642"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(takesPlainVal)</highlight></codeline>
<codeline lineno="643"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="644"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Terminal<sp/>*val<sp/>=<sp/>s.value-&gt;plain_value-&gt;value;</highlight></codeline>
<codeline lineno="645"><highlight class="normal"></highlight></codeline>
<codeline lineno="646"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(s.var-&gt;var-&gt;num)</highlight></codeline>
<codeline lineno="647"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="648"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>SHADER_TOKENS::SHTOK_blend_src:<sp/><ref refid="classShaderParser_1_1AssembleShaderEvalCB_1a49c2d527b890a4a01b14a9e0ba660d65" kindref="member">eval_blend_value</ref>(*val,<sp/>s.index,<sp/><ref refid="classShaderParser_1_1AssembleShaderEvalCB_1afc3b519f4870906d37b91b0c43d9dd3d" kindref="member">curpass</ref>-&gt;<ref refid="structSemanticShaderPass_1a7ddc29244ba230d69eb7475799d62090" kindref="member">blend_src</ref>,<sp/><ref refid="classShaderParser_1_1AssembleShaderEvalCB_1af08835abccd6bc11220cf91b6ae85e5ca3c3ba615798db7340cd94c6e2d59e74e" kindref="member">BlendValueType::Factor</ref>);<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="649"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>SHADER_TOKENS::SHTOK_blend_dst:<sp/><ref refid="classShaderParser_1_1AssembleShaderEvalCB_1a49c2d527b890a4a01b14a9e0ba660d65" kindref="member">eval_blend_value</ref>(*val,<sp/>s.index,<sp/><ref refid="classShaderParser_1_1AssembleShaderEvalCB_1afc3b519f4870906d37b91b0c43d9dd3d" kindref="member">curpass</ref>-&gt;<ref refid="structSemanticShaderPass_1a675a659d17bd94d8f8303752deddc5b2" kindref="member">blend_dst</ref>,<sp/><ref refid="classShaderParser_1_1AssembleShaderEvalCB_1af08835abccd6bc11220cf91b6ae85e5ca3c3ba615798db7340cd94c6e2d59e74e" kindref="member">BlendValueType::Factor</ref>);<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="650"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>SHADER_TOKENS::SHTOK_blend_asrc:<sp/><ref refid="classShaderParser_1_1AssembleShaderEvalCB_1a49c2d527b890a4a01b14a9e0ba660d65" kindref="member">eval_blend_value</ref>(*val,<sp/>s.index,<sp/><ref refid="classShaderParser_1_1AssembleShaderEvalCB_1afc3b519f4870906d37b91b0c43d9dd3d" kindref="member">curpass</ref>-&gt;<ref refid="structSemanticShaderPass_1a69bc37ba9af5f2f50eb3202c11d9da5b" kindref="member">blend_asrc</ref>,<sp/><ref refid="classShaderParser_1_1AssembleShaderEvalCB_1af08835abccd6bc11220cf91b6ae85e5ca3c3ba615798db7340cd94c6e2d59e74e" kindref="member">BlendValueType::Factor</ref>);<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="651"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>SHADER_TOKENS::SHTOK_blend_adst:<sp/><ref refid="classShaderParser_1_1AssembleShaderEvalCB_1a49c2d527b890a4a01b14a9e0ba660d65" kindref="member">eval_blend_value</ref>(*val,<sp/>s.index,<sp/><ref refid="classShaderParser_1_1AssembleShaderEvalCB_1afc3b519f4870906d37b91b0c43d9dd3d" kindref="member">curpass</ref>-&gt;<ref refid="structSemanticShaderPass_1ab4e5c742d3d758b998dc8d58646ac019" kindref="member">blend_adst</ref>,<sp/><ref refid="classShaderParser_1_1AssembleShaderEvalCB_1af08835abccd6bc11220cf91b6ae85e5ca3c3ba615798db7340cd94c6e2d59e74e" kindref="member">BlendValueType::Factor</ref>);<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="652"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>SHADER_TOKENS::SHTOK_blend_op:<sp/><ref refid="classShaderParser_1_1AssembleShaderEvalCB_1a49c2d527b890a4a01b14a9e0ba660d65" kindref="member">eval_blend_value</ref>(*val,<sp/>s.index,<sp/><ref refid="classShaderParser_1_1AssembleShaderEvalCB_1afc3b519f4870906d37b91b0c43d9dd3d" kindref="member">curpass</ref>-&gt;<ref refid="structSemanticShaderPass_1a6c40dba0ddca2a26f062ae6ccefe32d7" kindref="member">blend_op</ref>,<sp/><ref refid="classShaderParser_1_1AssembleShaderEvalCB_1af08835abccd6bc11220cf91b6ae85e5ca8d6afc555354627f9706e93f0c452720" kindref="member">BlendValueType::BlendFunc</ref>);<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="653"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>SHADER_TOKENS::SHTOK_blend_aop:<sp/><ref refid="classShaderParser_1_1AssembleShaderEvalCB_1a49c2d527b890a4a01b14a9e0ba660d65" kindref="member">eval_blend_value</ref>(*val,<sp/>s.index,<sp/><ref refid="classShaderParser_1_1AssembleShaderEvalCB_1afc3b519f4870906d37b91b0c43d9dd3d" kindref="member">curpass</ref>-&gt;<ref refid="structSemanticShaderPass_1a98b534cca73cdf01921cd2a4bc1261b6" kindref="member">blend_aop</ref>,<sp/><ref refid="classShaderParser_1_1AssembleShaderEvalCB_1af08835abccd6bc11220cf91b6ae85e5ca8d6afc555354627f9706e93f0c452720" kindref="member">BlendValueType::BlendFunc</ref>);<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="654"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>SHADER_TOKENS::SHTOK_alpha_to_coverage:<sp/><ref refid="classShaderParser_1_1AssembleShaderEvalCB_1afc3b519f4870906d37b91b0c43d9dd3d" kindref="member">curpass</ref>-&gt;<ref refid="structSemanticShaderPass_1a3dcbc5389573f47fcccad6dcce354c42" kindref="member">alpha_to_coverage</ref><sp/>=<sp/><ref refid="classShaderParser_1_1AssembleShaderEvalCB_1a424f366a6638e8386b30cead6b91f905" kindref="member">get_bool_const</ref>(*val);<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="655"><highlight class="normal"></highlight></codeline>
<codeline lineno="656"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Zero<sp/>based.<sp/>0<sp/>means<sp/>one<sp/>instance<sp/>which<sp/>is<sp/>the<sp/>usual<sp/>non-instanced<sp/>case.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="657"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>SHADER_TOKENS::SHTOK_view_instances:<sp/><ref refid="classShaderParser_1_1AssembleShaderEvalCB_1afc3b519f4870906d37b91b0c43d9dd3d" kindref="member">curpass</ref>-&gt;<ref refid="structSemanticShaderPass_1a3fcdfe39fe1ec4994be0ccd1b7018e6a" kindref="member">view_instances</ref><sp/>=<sp/><ref refid="namespacesemutils_1a6811ced6d8ed588c8946e5816ea788a0" kindref="member">semutils::int_number</ref>(val-&gt;text)<sp/>-<sp/>1;<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="658"><highlight class="normal"></highlight></codeline>
<codeline lineno="659"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>SHADER_TOKENS::SHTOK_cull_mode:</highlight></codeline>
<codeline lineno="660"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="661"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*v<sp/>=<sp/>val-&gt;text;</highlight></codeline>
<codeline lineno="662"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strcmp(v,<sp/></highlight><highlight class="stringliteral">&quot;ccw&quot;</highlight><highlight class="normal">)<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="663"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classShaderParser_1_1AssembleShaderEvalCB_1afc3b519f4870906d37b91b0c43d9dd3d" kindref="member">curpass</ref>-&gt;<ref refid="structSemanticShaderPass_1aa7e5cf7b15d913c7dd5d0297df99bc8f" kindref="member">cull_mode</ref><sp/>=<sp/>CULL_CCW;</highlight></codeline>
<codeline lineno="664"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strcmp(v,<sp/></highlight><highlight class="stringliteral">&quot;cw&quot;</highlight><highlight class="normal">)<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="665"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classShaderParser_1_1AssembleShaderEvalCB_1afc3b519f4870906d37b91b0c43d9dd3d" kindref="member">curpass</ref>-&gt;<ref refid="structSemanticShaderPass_1aa7e5cf7b15d913c7dd5d0297df99bc8f" kindref="member">cull_mode</ref><sp/>=<sp/>CULL_CW;</highlight></codeline>
<codeline lineno="666"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strcmp(v,<sp/></highlight><highlight class="stringliteral">&quot;none&quot;</highlight><highlight class="normal">)<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="667"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classShaderParser_1_1AssembleShaderEvalCB_1afc3b519f4870906d37b91b0c43d9dd3d" kindref="member">curpass</ref>-&gt;<ref refid="structSemanticShaderPass_1aa7e5cf7b15d913c7dd5d0297df99bc8f" kindref="member">cull_mode</ref><sp/>=<sp/>CULL_NONE;</highlight></codeline>
<codeline lineno="668"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="669"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="shErrorReporting_8h_1a634f6d6ca9a9f22c5eea4c9b8e20ef31" kindref="member">report_error</ref>(<ref refid="classShaderParser_1_1AssembleShaderEvalCB_1afabaa52e0ea25f004960aacc342b3c84" kindref="member">parser</ref>,<sp/>val,<sp/></highlight><highlight class="stringliteral">&quot;unknown<sp/>cull<sp/>mode<sp/>&lt;%s&gt;&quot;</highlight><highlight class="normal">,<sp/>val-&gt;text);</highlight></codeline>
<codeline lineno="670"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="671"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="672"><highlight class="normal"></highlight></codeline>
<codeline lineno="673"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>SHADER_TOKENS::SHTOK_stencil:<sp/><ref refid="classShaderParser_1_1AssembleShaderEvalCB_1afc3b519f4870906d37b91b0c43d9dd3d" kindref="member">curpass</ref>-&gt;<ref refid="structSemanticShaderPass_1a7f68cf1f427cdeefc9d6f379379f9f10" kindref="member">stencil</ref><sp/>=<sp/><ref refid="classShaderParser_1_1AssembleShaderEvalCB_1a424f366a6638e8386b30cead6b91f905" kindref="member">get_bool_const</ref>(*val);<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="674"><highlight class="normal"></highlight></codeline>
<codeline lineno="675"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>SHADER_TOKENS::SHTOK_stencil_func:<sp/><ref refid="classShaderParser_1_1AssembleShaderEvalCB_1afc3b519f4870906d37b91b0c43d9dd3d" kindref="member">curpass</ref>-&gt;<ref refid="structSemanticShaderPass_1aade5d357409294c748420181a8804bdd" kindref="member">stencil_func</ref><sp/>=<sp/><ref refid="classShaderParser_1_1AssembleShaderEvalCB_1a24fee822ee6d7b1f95ebc4d26abee7c2" kindref="member">get_stencil_cmpf_k</ref>(*val);<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="676"><highlight class="normal"></highlight></codeline>
<codeline lineno="677"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>SHADER_TOKENS::SHTOK_stencil_ref:</highlight></codeline>
<codeline lineno="678"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="679"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>v<sp/>=<sp/><ref refid="namespacesemutils_1a6811ced6d8ed588c8946e5816ea788a0" kindref="member">semutils::int_number</ref>(val-&gt;text);</highlight></codeline>
<codeline lineno="680"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(v<sp/>&lt;<sp/>0)</highlight></codeline>
<codeline lineno="681"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="682"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(v<sp/>&gt;<sp/>255)</highlight></codeline>
<codeline lineno="683"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v<sp/>=<sp/>255;</highlight></codeline>
<codeline lineno="684"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classShaderParser_1_1AssembleShaderEvalCB_1afc3b519f4870906d37b91b0c43d9dd3d" kindref="member">curpass</ref>-&gt;<ref refid="structSemanticShaderPass_1afd0a12e229c1ec543d65c9646e0e680c" kindref="member">stencil_ref</ref><sp/>=<sp/>v;</highlight></codeline>
<codeline lineno="685"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="686"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="687"><highlight class="normal"></highlight></codeline>
<codeline lineno="688"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>SHADER_TOKENS::SHTOK_stencil_pass:<sp/><ref refid="classShaderParser_1_1AssembleShaderEvalCB_1afc3b519f4870906d37b91b0c43d9dd3d" kindref="member">curpass</ref>-&gt;<ref refid="structSemanticShaderPass_1a98c200dcef0d75d4551506eb1d5d48b7" kindref="member">stencil_pass</ref><sp/>=<sp/><ref refid="classShaderParser_1_1AssembleShaderEvalCB_1a1e335ec618c1855de86a27862763d629" kindref="member">get_stensil_op_k</ref>(*val);<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="689"><highlight class="normal"></highlight></codeline>
<codeline lineno="690"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>SHADER_TOKENS::SHTOK_stencil_fail:<sp/><ref refid="classShaderParser_1_1AssembleShaderEvalCB_1afc3b519f4870906d37b91b0c43d9dd3d" kindref="member">curpass</ref>-&gt;<ref refid="structSemanticShaderPass_1ace43b6711eb9fe520f0f02f0b6c421a2" kindref="member">stencil_fail</ref><sp/>=<sp/><ref refid="classShaderParser_1_1AssembleShaderEvalCB_1a1e335ec618c1855de86a27862763d629" kindref="member">get_stensil_op_k</ref>(*val);<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="691"><highlight class="normal"></highlight></codeline>
<codeline lineno="692"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>SHADER_TOKENS::SHTOK_stencil_zfail:<sp/><ref refid="classShaderParser_1_1AssembleShaderEvalCB_1afc3b519f4870906d37b91b0c43d9dd3d" kindref="member">curpass</ref>-&gt;<ref refid="structSemanticShaderPass_1a0be11a73500cb0f4f5a8be6fb39076bc" kindref="member">stencil_zfail</ref><sp/>=<sp/><ref refid="classShaderParser_1_1AssembleShaderEvalCB_1a1e335ec618c1855de86a27862763d629" kindref="member">get_stensil_op_k</ref>(*val);<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="693"><highlight class="normal"></highlight></codeline>
<codeline lineno="694"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>SHADER_TOKENS::SHTOK_color_write:</highlight></codeline>
<codeline lineno="695"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>color_write_mask<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="696"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!val)</highlight></codeline>
<codeline lineno="697"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="shErrorReporting_8h_1a634f6d6ca9a9f22c5eea4c9b8e20ef31" kindref="member">report_error</ref>(<ref refid="classShaderParser_1_1AssembleShaderEvalCB_1afabaa52e0ea25f004960aacc342b3c84" kindref="member">parser</ref>,<sp/>s.var-&gt;var,<sp/></highlight><highlight class="stringliteral">&quot;color_write<sp/>should<sp/>be<sp/>a<sp/>value<sp/>of<sp/>int,<sp/>rgba<sp/>swizzle,<sp/>true<sp/>or<sp/>false&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="698"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(val-&gt;num<sp/>==<sp/>SHADER_TOKENS::SHTOK__true<sp/>||<sp/>val-&gt;num<sp/>==<sp/>SHADER_TOKENS::SHTOK__false)</highlight></codeline>
<codeline lineno="699"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>color_write_mask<sp/>=<sp/><ref refid="classShaderParser_1_1AssembleShaderEvalCB_1a424f366a6638e8386b30cead6b91f905" kindref="member">get_bool_const</ref>(*val)<sp/>?<sp/>0xF<sp/>:<sp/>0;</highlight></codeline>
<codeline lineno="700"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(val-&gt;num<sp/>==<sp/>SHADER_TOKENS::SHTOK_intnum)</highlight></codeline>
<codeline lineno="701"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="702"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>v<sp/>=<sp/><ref refid="namespacesemutils_1a6811ced6d8ed588c8946e5816ea788a0" kindref="member">semutils::int_number</ref>(val-&gt;text);</highlight></codeline>
<codeline lineno="703"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(v<sp/>&amp;<sp/>(~15))</highlight></codeline>
<codeline lineno="704"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="shErrorReporting_8h_1a634f6d6ca9a9f22c5eea4c9b8e20ef31" kindref="member">report_error</ref>(<ref refid="classShaderParser_1_1AssembleShaderEvalCB_1afabaa52e0ea25f004960aacc342b3c84" kindref="member">parser</ref>,<sp/>s.var-&gt;var,<sp/></highlight><highlight class="stringliteral">&quot;color_write<sp/>should<sp/>be<sp/>value<sp/>of<sp/>[0<sp/>15]&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="705"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>color_write_mask<sp/>=<sp/>v<sp/>&amp;<sp/>15;</highlight></codeline>
<codeline lineno="706"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="707"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(val-&gt;num<sp/>==<sp/>SHADER_TOKENS::SHTOK_ident<sp/>&amp;&amp;<sp/>s.static_var)</highlight></codeline>
<codeline lineno="708"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="709"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(s.index)</highlight></codeline>
<codeline lineno="710"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="711"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="shErrorReporting_8h_1a634f6d6ca9a9f22c5eea4c9b8e20ef31" kindref="member">report_error</ref>(<ref refid="classShaderParser_1_1AssembleShaderEvalCB_1afabaa52e0ea25f004960aacc342b3c84" kindref="member">parser</ref>,<sp/>s.var-&gt;var,<sp/></highlight><highlight class="stringliteral">&quot;color_write<sp/>from<sp/>static<sp/>var<sp/>\&quot;%s\&quot;<sp/>cannot<sp/>be<sp/>used<sp/>with<sp/>index&quot;</highlight><highlight class="normal">,<sp/>val-&gt;text);</highlight></codeline>
<codeline lineno="712"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="713"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="714"><highlight class="normal"></highlight></codeline>
<codeline lineno="715"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>[vi,<sp/>vt,<sp/>is_global]<sp/>=<sp/><ref refid="namespacesemantic_1a69d749806268f5b3b7cafa16cab36787" kindref="member">semantic::lookup_state_var</ref>(*val,<sp/><ref refid="classShaderParser_1_1AssembleShaderEvalCB_1a3058e4d1c01fc25c4a62bf0e150fe6ca" kindref="member">ctx</ref>);</highlight></codeline>
<codeline lineno="716"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(vi<sp/>&lt;<sp/>-1)</highlight></codeline>
<codeline lineno="717"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="718"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="shErrorReporting_8h_1a634f6d6ca9a9f22c5eea4c9b8e20ef31" kindref="member">report_error</ref>(<ref refid="classShaderParser_1_1AssembleShaderEvalCB_1afabaa52e0ea25f004960aacc342b3c84" kindref="member">parser</ref>,<sp/>s.var-&gt;var,<sp/></highlight><highlight class="stringliteral">&quot;missing<sp/>var<sp/>\&quot;%s\&quot;<sp/>for<sp/>color_write<sp/>statement&quot;</highlight><highlight class="normal">,<sp/>val-&gt;text);</highlight></codeline>
<codeline lineno="719"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="720"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="721"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(is_global<sp/>||<sp/><ref refid="classShaderParser_1_1AssembleShaderEvalCB_1a2ba6fb52310a3ced7b31ede7fd8cbc8b" kindref="member">code</ref>.<ref refid="classShaderSemCode_1abe6ed6468793a4cbe55a75133a83d393" kindref="member">vars</ref>[vi].dynamic<sp/>||<sp/>vt<sp/>!=<sp/>SHVT_INT)</highlight></codeline>
<codeline lineno="722"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="723"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="shErrorReporting_8h_1a634f6d6ca9a9f22c5eea4c9b8e20ef31" kindref="member">report_error</ref>(<ref refid="classShaderParser_1_1AssembleShaderEvalCB_1afabaa52e0ea25f004960aacc342b3c84" kindref="member">parser</ref>,<sp/>s.var-&gt;var,<sp/></highlight><highlight class="stringliteral">&quot;static<sp/>int<sp/>var<sp/>\&quot;%s\&quot;<sp/>required<sp/>for<sp/>color_write<sp/>statement&quot;</highlight><highlight class="normal">,<sp/>val-&gt;text);</highlight></codeline>
<codeline lineno="724"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="725"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="726"><highlight class="normal"></highlight></codeline>
<codeline lineno="727"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>varNameId<sp/>=<sp/><ref refid="classShaderParser_1_1AssembleShaderEvalCB_1a3058e4d1c01fc25c4a62bf0e150fe6ca" kindref="member">ctx</ref>.<ref refid="classshc_1_1VariantContext_1a02952e27d2d5e304daad76b11cb1f4ad" kindref="member">tgtCtx</ref>().<ref refid="classshc_1_1TargetContext_1a64e71598c4751d165675e9e9f1f70b8e" kindref="member">varNameMap</ref>().<ref refid="classVarNameMap_1a8a6529882641e8945737456483807f7b" kindref="member">getVarId</ref>(val-&gt;text);</highlight></codeline>
<codeline lineno="728"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>sv<sp/>=<sp/><ref refid="classShaderParser_1_1AssembleShaderEvalCB_1a2e5aa16f073ae06f6d67c338553e8c6b" kindref="member">sclass</ref>.<ref refid="classShaderClass_1a50005ffa656290b8617a38a80ecda50f" kindref="member">find_static_var</ref>(varNameId);</highlight></codeline>
<codeline lineno="729"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classShaderParser_1_1AssembleShaderEvalCB_1afc3b519f4870906d37b91b0c43d9dd3d" kindref="member">curpass</ref>-&gt;<ref refid="structSemanticShaderPass_1ac0d4c616a51fc2af2ca90c2f16715d96" kindref="member">color_write</ref><sp/>=<sp/><ref refid="classShaderParser_1_1AssembleShaderEvalCB_1a2e5aa16f073ae06f6d67c338553e8c6b" kindref="member">sclass</ref>.<ref refid="classShaderClass_1af6a928a5bd7e66cc342af3b4778c280c" kindref="member">stvar</ref>[sv].defval.i;</highlight></codeline>
<codeline lineno="730"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="731"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="732"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(val-&gt;num<sp/>==<sp/>SHADER_TOKENS::SHTOK_ident)</highlight></codeline>
<codeline lineno="733"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="734"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>v<sp/>=<sp/>0,<sp/>v2<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="735"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*valStr<sp/>=<sp/>val-&gt;text;</highlight></codeline>
<codeline lineno="736"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;<sp/>valStr<sp/>&amp;&amp;<sp/>valStr[0];)</highlight></codeline>
<codeline lineno="737"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="738"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>pval<sp/>=<sp/>v;</highlight></codeline>
<codeline lineno="739"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>swizzle[]<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;rgba&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="740"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0,<sp/>bit<sp/>=<sp/>1;<sp/>i<sp/>&lt;<sp/>4;<sp/>++i,<sp/>bit<sp/>&lt;&lt;=<sp/>1)</highlight></codeline>
<codeline lineno="741"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!(v<sp/>&amp;<sp/>bit)<sp/>&amp;&amp;<sp/>valStr[0]<sp/>==<sp/>swizzle[i])</highlight></codeline>
<codeline lineno="742"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="743"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v<sp/>|=<sp/>bit;</highlight></codeline>
<codeline lineno="744"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>valStr++;</highlight></codeline>
<codeline lineno="745"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="746"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pval<sp/>==<sp/>v)</highlight></codeline>
<codeline lineno="747"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="748"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="749"><highlight class="normal"></highlight></codeline>
<codeline lineno="750"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(valStr[0]<sp/>!=<sp/>0)</highlight></codeline>
<codeline lineno="751"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="shErrorReporting_8h_1a634f6d6ca9a9f22c5eea4c9b8e20ef31" kindref="member">report_error</ref>(<ref refid="classShaderParser_1_1AssembleShaderEvalCB_1afabaa52e0ea25f004960aacc342b3c84" kindref="member">parser</ref>,<sp/>s.var-&gt;var,<sp/></highlight><highlight class="stringliteral">&quot;color_write<sp/>should<sp/>be<sp/>swizzle<sp/>of<sp/>&apos;rgba&apos;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="752"><highlight class="normal"></highlight></codeline>
<codeline lineno="753"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>color_write_mask<sp/>=<sp/>v;</highlight></codeline>
<codeline lineno="754"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="755"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!val)</highlight></codeline>
<codeline lineno="756"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="757"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="shErrorReporting_8h_1a634f6d6ca9a9f22c5eea4c9b8e20ef31" kindref="member">report_error</ref>(<ref refid="classShaderParser_1_1AssembleShaderEvalCB_1afabaa52e0ea25f004960aacc342b3c84" kindref="member">parser</ref>,<sp/>s.var-&gt;var,<sp/></highlight><highlight class="stringliteral">&quot;color_write<sp/>should<sp/>be<sp/>a<sp/>value<sp/>of<sp/>int,<sp/>rgba<sp/>swizzle,<sp/>true<sp/>or<sp/>false&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="758"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="759"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="760"><highlight class="normal"></highlight></codeline>
<codeline lineno="761"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!s.index)</highlight></codeline>
<codeline lineno="762"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="763"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classShaderParser_1_1AssembleShaderEvalCB_1afc3b519f4870906d37b91b0c43d9dd3d" kindref="member">curpass</ref>-&gt;<ref refid="structSemanticShaderPass_1ac0d4c616a51fc2af2ca90c2f16715d96" kindref="member">color_write</ref><sp/>=<sp/>color_write_mask;</highlight></codeline>
<codeline lineno="764"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>1;<sp/>i<sp/>&lt;<sp/>8;<sp/>i++)</highlight></codeline>
<codeline lineno="765"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classShaderParser_1_1AssembleShaderEvalCB_1afc3b519f4870906d37b91b0c43d9dd3d" kindref="member">curpass</ref>-&gt;<ref refid="structSemanticShaderPass_1ac0d4c616a51fc2af2ca90c2f16715d96" kindref="member">color_write</ref><sp/>|=<sp/>color_write_mask<sp/>&lt;&lt;<sp/>(i<sp/>*<sp/>4);</highlight></codeline>
<codeline lineno="766"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="767"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="768"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="769"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>idx<sp/>=<sp/><ref refid="namespacesemutils_1a6811ced6d8ed588c8946e5816ea788a0" kindref="member">semutils::int_number</ref>(s.index-&gt;text);</highlight></codeline>
<codeline lineno="770"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(idx<sp/>&gt;=<sp/>0<sp/>&amp;&amp;<sp/>idx<sp/>&lt;<sp/>8)</highlight></codeline>
<codeline lineno="771"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="772"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classShaderParser_1_1AssembleShaderEvalCB_1afc3b519f4870906d37b91b0c43d9dd3d" kindref="member">curpass</ref>-&gt;<ref refid="structSemanticShaderPass_1ac0d4c616a51fc2af2ca90c2f16715d96" kindref="member">color_write</ref><sp/>&amp;=<sp/>~(0xF<sp/>&lt;&lt;<sp/>(idx<sp/>*<sp/>4));</highlight></codeline>
<codeline lineno="773"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classShaderParser_1_1AssembleShaderEvalCB_1afc3b519f4870906d37b91b0c43d9dd3d" kindref="member">curpass</ref>-&gt;<ref refid="structSemanticShaderPass_1ac0d4c616a51fc2af2ca90c2f16715d96" kindref="member">color_write</ref><sp/>|=<sp/>color_write_mask<sp/>&lt;&lt;<sp/>(idx<sp/>*<sp/>4);</highlight></codeline>
<codeline lineno="774"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="775"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="776"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="shErrorReporting_8h_1a634f6d6ca9a9f22c5eea4c9b8e20ef31" kindref="member">report_error</ref>(<ref refid="classShaderParser_1_1AssembleShaderEvalCB_1afabaa52e0ea25f004960aacc342b3c84" kindref="member">parser</ref>,<sp/>s.var-&gt;var,<sp/></highlight><highlight class="stringliteral">&quot;bad<sp/>index<sp/>for<sp/>%s[%d]&quot;</highlight><highlight class="normal">,<sp/>s.var-&gt;var-&gt;text,<sp/>idx);</highlight></codeline>
<codeline lineno="777"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="778"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="779"><highlight class="normal"></highlight></codeline>
<codeline lineno="780"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>SHADER_TOKENS::SHTOK_z_test:<sp/><ref refid="classShaderParser_1_1AssembleShaderEvalCB_1afc3b519f4870906d37b91b0c43d9dd3d" kindref="member">curpass</ref>-&gt;<ref refid="structSemanticShaderPass_1ab0bf024e5d47d170324896dce4762b99" kindref="member">z_test</ref><sp/>=<sp/><ref refid="classShaderParser_1_1AssembleShaderEvalCB_1a424f366a6638e8386b30cead6b91f905" kindref="member">get_bool_const</ref>(*val);<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="781"><highlight class="normal"></highlight></codeline>
<codeline lineno="782"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>SHADER_TOKENS::SHTOK_z_func:</highlight></codeline>
<codeline lineno="783"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="784"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classShaderParser_1_1AssembleShaderEvalCB_1a2c157ef42d3454c48841426347e84113" kindref="member">get_depth_cmpf_k</ref>(*val,<sp/><ref refid="classShaderParser_1_1AssembleShaderEvalCB_1afc3b519f4870906d37b91b0c43d9dd3d" kindref="member">curpass</ref>-&gt;<ref refid="structSemanticShaderPass_1ad261baacf1cbe7bbced475127b318768" kindref="member">z_func</ref>);</highlight></codeline>
<codeline lineno="785"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="786"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="787"><highlight class="normal"></highlight></codeline>
<codeline lineno="788"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>SHADER_TOKENS::SHTOK_z_write:</highlight></codeline>
<codeline lineno="789"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classShaderParser_1_1AssembleShaderEvalCB_1afc3b519f4870906d37b91b0c43d9dd3d" kindref="member">curpass</ref>-&gt;<ref refid="structSemanticShaderPass_1adc658424eab012dc9714430d63be6a1f" kindref="member">z_write</ref><sp/>&gt;=<sp/>0)</highlight></codeline>
<codeline lineno="790"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="shErrorReporting_8h_1a634f6d6ca9a9f22c5eea4c9b8e20ef31" kindref="member">report_error</ref>(<ref refid="classShaderParser_1_1AssembleShaderEvalCB_1afabaa52e0ea25f004960aacc342b3c84" kindref="member">parser</ref>,<sp/>s.var-&gt;var,<sp/></highlight><highlight class="stringliteral">&quot;z_write<sp/>already<sp/>specified<sp/>for<sp/>this<sp/>render<sp/>pass&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="791"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(val-&gt;num<sp/>==<sp/>SHADER_TOKENS::SHTOK__true<sp/>||<sp/>val-&gt;num<sp/>==<sp/>SHADER_TOKENS::SHTOK__false)</highlight></codeline>
<codeline lineno="792"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="793"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classShaderParser_1_1AssembleShaderEvalCB_1afc3b519f4870906d37b91b0c43d9dd3d" kindref="member">curpass</ref>-&gt;<ref refid="structSemanticShaderPass_1adc658424eab012dc9714430d63be6a1f" kindref="member">z_write</ref><sp/>=<sp/><ref refid="classShaderParser_1_1AssembleShaderEvalCB_1a424f366a6638e8386b30cead6b91f905" kindref="member">get_bool_const</ref>(*val);</highlight></codeline>
<codeline lineno="794"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="795"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(val-&gt;num<sp/>==<sp/>SHADER_TOKENS::SHTOK_intnum)</highlight></codeline>
<codeline lineno="796"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="797"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>v<sp/>=<sp/><ref refid="namespacesemutils_1a6811ced6d8ed588c8946e5816ea788a0" kindref="member">semutils::int_number</ref>(val-&gt;text);</highlight></codeline>
<codeline lineno="798"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classShaderParser_1_1AssembleShaderEvalCB_1afc3b519f4870906d37b91b0c43d9dd3d" kindref="member">curpass</ref>-&gt;<ref refid="structSemanticShaderPass_1adc658424eab012dc9714430d63be6a1f" kindref="member">z_write</ref><sp/>=<sp/>v<sp/>?<sp/>1<sp/>:<sp/>0;</highlight></codeline>
<codeline lineno="799"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="800"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="801"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="shErrorReporting_8h_1a634f6d6ca9a9f22c5eea4c9b8e20ef31" kindref="member">report_error</ref>(<ref refid="classShaderParser_1_1AssembleShaderEvalCB_1afabaa52e0ea25f004960aacc342b3c84" kindref="member">parser</ref>,<sp/>val,<sp/></highlight><highlight class="stringliteral">&quot;expected<sp/>boolean,<sp/>integer<sp/>number<sp/>or<sp/>int<sp/>variable&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="802"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="803"><highlight class="normal"></highlight></codeline>
<codeline lineno="804"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>SHADER_TOKENS::SHTOK_slope_z_bias:</highlight></codeline>
<codeline lineno="805"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>SHADER_TOKENS::SHTOK_z_bias:</highlight></codeline>
<codeline lineno="806"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="807"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>slope<sp/>=<sp/>(s.var-&gt;var-&gt;num<sp/>==<sp/>SHADER_TOKENS::SHTOK_slope_z_bias);</highlight></codeline>
<codeline lineno="808"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((!slope<sp/>&amp;&amp;<sp/><ref refid="classShaderParser_1_1AssembleShaderEvalCB_1afc3b519f4870906d37b91b0c43d9dd3d" kindref="member">curpass</ref>-&gt;<ref refid="structSemanticShaderPass_1a9ab702fa03a317c3124275ecda1289a9" kindref="member">z_bias</ref>)<sp/>||<sp/>(slope<sp/>&amp;&amp;<sp/><ref refid="classShaderParser_1_1AssembleShaderEvalCB_1afc3b519f4870906d37b91b0c43d9dd3d" kindref="member">curpass</ref>-&gt;<ref refid="structSemanticShaderPass_1ad6663916487140d0dba2b427eef126cf" kindref="member">slope_z_bias</ref>))</highlight></codeline>
<codeline lineno="809"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="shErrorReporting_8h_1a634f6d6ca9a9f22c5eea4c9b8e20ef31" kindref="member">report_error</ref>(<ref refid="classShaderParser_1_1AssembleShaderEvalCB_1afabaa52e0ea25f004960aacc342b3c84" kindref="member">parser</ref>,<sp/>s.var-&gt;var,<sp/></highlight><highlight class="stringliteral">&quot;%sz_bias<sp/>already<sp/>specified<sp/>for<sp/>this<sp/>render<sp/>pass&quot;</highlight><highlight class="normal">,<sp/>slope<sp/>?<sp/></highlight><highlight class="stringliteral">&quot;slope_&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="810"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(val-&gt;num<sp/>==<sp/>SHADER_TOKENS::SHTOK_float<sp/>||<sp/>val-&gt;num<sp/>==<sp/>SHADER_TOKENS::SHTOK_intnum)</highlight></codeline>
<codeline lineno="811"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="812"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>real<sp/>v<sp/>=<sp/><ref refid="namespacesemutils_1a1dac415db8fc672b85f17fd11c13d3b6" kindref="member">semutils::real_number</ref>(val-&gt;text);</highlight></codeline>
<codeline lineno="813"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(slope)</highlight></codeline>
<codeline lineno="814"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="815"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classShaderParser_1_1AssembleShaderEvalCB_1afc3b519f4870906d37b91b0c43d9dd3d" kindref="member">curpass</ref>-&gt;<ref refid="structSemanticShaderPass_1ad6663916487140d0dba2b427eef126cf" kindref="member">slope_z_bias</ref><sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="816"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classShaderParser_1_1AssembleShaderEvalCB_1afc3b519f4870906d37b91b0c43d9dd3d" kindref="member">curpass</ref>-&gt;<ref refid="structSemanticShaderPass_1ab92d35f5c57fd9cd96f83b7004ae1744" kindref="member">slope_z_bias_val</ref><sp/>=<sp/>v;</highlight></codeline>
<codeline lineno="817"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="818"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="819"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="820"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classShaderParser_1_1AssembleShaderEvalCB_1afc3b519f4870906d37b91b0c43d9dd3d" kindref="member">curpass</ref>-&gt;<ref refid="structSemanticShaderPass_1a9ab702fa03a317c3124275ecda1289a9" kindref="member">z_bias</ref><sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="821"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classShaderParser_1_1AssembleShaderEvalCB_1afc3b519f4870906d37b91b0c43d9dd3d" kindref="member">curpass</ref>-&gt;<ref refid="structSemanticShaderPass_1a22e0377ab73defcfc71d7258a617c1f5" kindref="member">z_bias_val</ref><sp/>=<sp/>v;</highlight></codeline>
<codeline lineno="822"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="823"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="824"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="825"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="shErrorReporting_8h_1a634f6d6ca9a9f22c5eea4c9b8e20ef31" kindref="member">report_error</ref>(<ref refid="classShaderParser_1_1AssembleShaderEvalCB_1afabaa52e0ea25f004960aacc342b3c84" kindref="member">parser</ref>,<sp/>val,<sp/></highlight><highlight class="stringliteral">&quot;expected<sp/>real<sp/>number<sp/>or<sp/>real<sp/>variable&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="826"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="827"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="828"><highlight class="normal"></highlight></codeline>
<codeline lineno="829"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:<sp/>G_ASSERT(0);</highlight></codeline>
<codeline lineno="830"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="831"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="832"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="833"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="834"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>G_ASSERT(s.var-&gt;var-&gt;num<sp/>==<sp/>SHADER_TOKENS::SHTOK_blend_factor);</highlight></codeline>
<codeline lineno="835"><highlight class="normal"></highlight></codeline>
<codeline lineno="836"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Construct<sp/>a<sp/>fake<sp/>expression<sp/>holding<sp/>a<sp/>color<sp/>value</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="837"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>@TODO:<sp/>make<sp/>a<sp/>utility<sp/>for<sp/>constructing<sp/>fake<sp/>ast<sp/>nodes</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="838"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ShaderTerminal::arithmetic_operand<sp/>o{};</highlight></codeline>
<codeline lineno="839"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>o.unary_op<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="840"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>o.var_name<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="841"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>o.real_value<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="842"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>o.func<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="843"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>o.expr<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="844"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>o.cmask<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="845"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>o.color_value<sp/>=<sp/>s.value-&gt;color_value;</highlight></codeline>
<codeline lineno="846"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ShaderTerminal::arithmetic_expr_md<sp/>em{};</highlight></codeline>
<codeline lineno="847"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>em.lhs<sp/>=<sp/>&amp;o;</highlight></codeline>
<codeline lineno="848"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ShaderTerminal::arithmetic_expr<sp/>e{};</highlight></codeline>
<codeline lineno="849"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>e.lhs<sp/>=<sp/>&amp;em;</highlight></codeline>
<codeline lineno="850"><highlight class="normal"></highlight></codeline>
<codeline lineno="851"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Color4<sp/>val{};</highlight></codeline>
<codeline lineno="852"><highlight class="normal"></highlight></codeline>
<codeline lineno="853"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="classShaderParser_1_1AssembleShaderEvalCB_1acd8eb6b1e5a36d30cc261b2f860856e3" kindref="member">exprParser</ref>.<ref refid="classShaderParser_1_1ExpressionParser_1af038fb80abc17ef3c6f532a36642b8d7" kindref="member">parseConstExpression</ref>(e,<sp/>val,<sp/><ref refid="structShaderParser_1_1ExpressionParser_1_1Context" kindref="compound">ExpressionParser::Context</ref>{shexpr::VT_COLOR4,<sp/>false,<sp/>s.var-&gt;var}))</highlight></codeline>
<codeline lineno="854"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="855"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="shErrorReporting_8h_1a634f6d6ca9a9f22c5eea4c9b8e20ef31" kindref="member">report_error</ref>(<ref refid="classShaderParser_1_1AssembleShaderEvalCB_1afabaa52e0ea25f004960aacc342b3c84" kindref="member">parser</ref>,<sp/>s.var-&gt;var,<sp/></highlight><highlight class="stringliteral">&quot;Wrong<sp/>expression<sp/>for<sp/>blend_factor<sp/>color&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="856"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="857"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="858"><highlight class="normal"></highlight></codeline>
<codeline lineno="859"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(val.r<sp/>&lt;<sp/>0.f<sp/>||<sp/>val.g<sp/>&lt;<sp/>0.f<sp/>||<sp/>val.b<sp/>&lt;<sp/>0.f<sp/>||<sp/>val.a<sp/>&lt;<sp/>0.f<sp/>||<sp/>val.r<sp/>&gt;<sp/>1.f<sp/>||<sp/>val.g<sp/>&gt;<sp/>1.f<sp/>||<sp/>val.b<sp/>&gt;<sp/>1.f<sp/>||<sp/>val.a<sp/>&gt;<sp/>1.f)</highlight></codeline>
<codeline lineno="860"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="861"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="shErrorReporting_8h_1a634f6d6ca9a9f22c5eea4c9b8e20ef31" kindref="member">report_error</ref>(<ref refid="classShaderParser_1_1AssembleShaderEvalCB_1afabaa52e0ea25f004960aacc342b3c84" kindref="member">parser</ref>,<sp/>s.var-&gt;var,<sp/></highlight><highlight class="stringliteral">&quot;Wrong<sp/>expression<sp/>for<sp/>blend_factor<sp/>color:<sp/>all<sp/>components<sp/>must<sp/>be<sp/>in<sp/>the<sp/>[0,<sp/>1]<sp/>range&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="862"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="863"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="864"><highlight class="normal"></highlight></codeline>
<codeline lineno="865"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classShaderParser_1_1AssembleShaderEvalCB_1afc3b519f4870906d37b91b0c43d9dd3d" kindref="member">curpass</ref>-&gt;<ref refid="structSemanticShaderPass_1aaaf05343f2a887f2de92a33a329c03af" kindref="member">blend_factor</ref><sp/>=<sp/>e3dcolor(val);</highlight></codeline>
<codeline lineno="866"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classShaderParser_1_1AssembleShaderEvalCB_1afc3b519f4870906d37b91b0c43d9dd3d" kindref="member">curpass</ref>-&gt;<ref refid="structSemanticShaderPass_1a96edda45ee81cf38bb81baeec422e2b9" kindref="member">blend_factor_specified</ref><sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="867"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="868"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="869"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="870"><highlight class="normal"><sp/><sp/><sp/><sp/>G_ASSERT(0);</highlight></codeline>
<codeline lineno="871"><highlight class="normal">}</highlight></codeline>
<codeline lineno="872"><highlight class="normal"></highlight></codeline>
<codeline lineno="873"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classShaderParser_1_1AssembleShaderEvalCB_1a8d1dd1a14d6d7533dab6195ea1c0c858" kindref="member">AssembleShaderEvalCB::eval_zbias_state</ref>(zbias_state_stat<sp/>&amp;s)</highlight></codeline>
<codeline lineno="874"><highlight class="normal">{</highlight></codeline>
<codeline lineno="875"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(s.var-&gt;num)</highlight></codeline>
<codeline lineno="876"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="877"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>SHADER_TOKENS::SHTOK_slope_z_bias:</highlight></codeline>
<codeline lineno="878"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>SHADER_TOKENS::SHTOK_z_bias:</highlight></codeline>
<codeline lineno="879"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="880"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>slope<sp/>=<sp/>(s.var-&gt;num<sp/>==<sp/>SHADER_TOKENS::SHTOK_slope_z_bias);</highlight></codeline>
<codeline lineno="881"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((!slope<sp/>&amp;&amp;<sp/><ref refid="classShaderParser_1_1AssembleShaderEvalCB_1afc3b519f4870906d37b91b0c43d9dd3d" kindref="member">curpass</ref>-&gt;<ref refid="structSemanticShaderPass_1a9ab702fa03a317c3124275ecda1289a9" kindref="member">z_bias</ref>)<sp/>||<sp/>(slope<sp/>&amp;&amp;<sp/><ref refid="classShaderParser_1_1AssembleShaderEvalCB_1afc3b519f4870906d37b91b0c43d9dd3d" kindref="member">curpass</ref>-&gt;<ref refid="structSemanticShaderPass_1ad6663916487140d0dba2b427eef126cf" kindref="member">slope_z_bias</ref>))</highlight></codeline>
<codeline lineno="882"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="shErrorReporting_8h_1a634f6d6ca9a9f22c5eea4c9b8e20ef31" kindref="member">report_error</ref>(<ref refid="classShaderParser_1_1AssembleShaderEvalCB_1afabaa52e0ea25f004960aacc342b3c84" kindref="member">parser</ref>,<sp/>s.var,<sp/></highlight><highlight class="stringliteral">&quot;%sz_bias<sp/>already<sp/>specified<sp/>for<sp/>this<sp/>render<sp/>pass&quot;</highlight><highlight class="normal">,<sp/>slope<sp/>?<sp/></highlight><highlight class="stringliteral">&quot;slope_&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="883"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(s.const_value)</highlight></codeline>
<codeline lineno="884"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="885"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>real<sp/>val<sp/>=<sp/><ref refid="namespacesemutils_1a1dac415db8fc672b85f17fd11c13d3b6" kindref="member">semutils::real_number</ref>(s.const_value);</highlight></codeline>
<codeline lineno="886"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(slope)</highlight></codeline>
<codeline lineno="887"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="888"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classShaderParser_1_1AssembleShaderEvalCB_1afc3b519f4870906d37b91b0c43d9dd3d" kindref="member">curpass</ref>-&gt;<ref refid="structSemanticShaderPass_1ad6663916487140d0dba2b427eef126cf" kindref="member">slope_z_bias</ref><sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="889"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classShaderParser_1_1AssembleShaderEvalCB_1afc3b519f4870906d37b91b0c43d9dd3d" kindref="member">curpass</ref>-&gt;<ref refid="structSemanticShaderPass_1ab92d35f5c57fd9cd96f83b7004ae1744" kindref="member">slope_z_bias_val</ref><sp/>=<sp/>val;</highlight></codeline>
<codeline lineno="890"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="891"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="892"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="893"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classShaderParser_1_1AssembleShaderEvalCB_1afc3b519f4870906d37b91b0c43d9dd3d" kindref="member">curpass</ref>-&gt;<ref refid="structSemanticShaderPass_1a9ab702fa03a317c3124275ecda1289a9" kindref="member">z_bias</ref><sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="894"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classShaderParser_1_1AssembleShaderEvalCB_1afc3b519f4870906d37b91b0c43d9dd3d" kindref="member">curpass</ref>-&gt;<ref refid="structSemanticShaderPass_1a22e0377ab73defcfc71d7258a617c1f5" kindref="member">z_bias_val</ref><sp/>=<sp/>val;</highlight></codeline>
<codeline lineno="895"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="896"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="897"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="898"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="shErrorReporting_8h_1a634f6d6ca9a9f22c5eea4c9b8e20ef31" kindref="member">report_error</ref>(<ref refid="classShaderParser_1_1AssembleShaderEvalCB_1afabaa52e0ea25f004960aacc342b3c84" kindref="member">parser</ref>,<sp/>s.value,<sp/></highlight><highlight class="stringliteral">&quot;expected<sp/>real<sp/>number<sp/>or<sp/>real<sp/>variable&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="899"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="900"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="901"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:<sp/>G_ASSERT(0);</highlight></codeline>
<codeline lineno="902"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="903"><highlight class="normal">}</highlight></codeline>
<codeline lineno="904"><highlight class="normal"></highlight></codeline>
<codeline lineno="905"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classShaderParser_1_1AssembleShaderEvalCB_1ac5a6d090c23e495087cdda988448979b" kindref="member">AssembleShaderEvalCB::eval_external_block</ref>(external_state_block<sp/>&amp;state_block)</highlight></codeline>
<codeline lineno="906"><highlight class="normal">{</highlight></codeline>
<codeline lineno="907"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>stageMaybe<sp/>=<sp/><ref refid="namespacesemantic_1a86f59efe30e2fc10075f9f9ee14fbd09" kindref="member">semantic::parse_state_block_stage</ref>(state_block.scope-&gt;text);</highlight></codeline>
<codeline lineno="908"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!stageMaybe)</highlight></codeline>
<codeline lineno="909"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="shErrorReporting_8h_1a634f6d6ca9a9f22c5eea4c9b8e20ef31" kindref="member">report_error</ref>(<ref refid="classShaderParser_1_1AssembleShaderEvalCB_1afabaa52e0ea25f004960aacc342b3c84" kindref="member">parser</ref>,<sp/>state_block.scope,<sp/></highlight><highlight class="stringliteral">&quot;external<sp/>block<sp/>&lt;%s&gt;<sp/>is<sp/>not<sp/>one<sp/>of<sp/>&lt;vs,<sp/>ps,<sp/>cs&gt;&quot;</highlight><highlight class="normal">,<sp/>state_block.scope-&gt;text);</highlight></codeline>
<codeline lineno="910"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="911"><highlight class="normal"><sp/><sp/><sp/><sp/>addBlockType(state_block.scope-&gt;text,<sp/>state_block.scope);</highlight></codeline>
<codeline lineno="912"><highlight class="normal"></highlight></codeline>
<codeline lineno="913"><highlight class="normal"><sp/><sp/>ShaderStage<sp/>stage<sp/>=<sp/>*stageMaybe;</highlight></codeline>
<codeline lineno="914"><highlight class="normal"><sp/><sp/><ref refid="classShaderParser_1_1AssembleShaderEvalCB_1a3058e4d1c01fc25c4a62bf0e150fe6ca" kindref="member">ctx</ref>.<ref refid="classshc_1_1VariantContext_1a45351b6130235b4bde86f2fb2bac44fe" kindref="member">cppStcode</ref>().cppStcode.reportStageUsage(stage);</highlight></codeline>
<codeline lineno="915"><highlight class="normal"></highlight></codeline>
<codeline lineno="916"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>eval_if_stat<sp/>=<sp/>[</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>stage](state_block_if_stat<sp/>&amp;s,<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;&amp;eval_if_stat)<sp/>-&gt;<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="917"><highlight class="normal"><sp/><sp/><sp/><sp/>G_ASSERT(s.expr);</highlight></codeline>
<codeline lineno="918"><highlight class="normal"></highlight></codeline>
<codeline lineno="919"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>eval_stats<sp/>=<sp/>[&amp;,<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">](</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;stats)<sp/>{</highlight></codeline>
<codeline lineno="920"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;stat<sp/>:<sp/>stats)</highlight></codeline>
<codeline lineno="921"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="922"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(stat-&gt;stblock_if_stat)</highlight></codeline>
<codeline lineno="923"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>eval_if_stat(*stat-&gt;stblock_if_stat,<sp/>eval_if_stat);</highlight></codeline>
<codeline lineno="924"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="925"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classShaderParser_1_1AssembleShaderEvalCB_1a22833c4bc718aae5d5591acbecd69235" kindref="member">eval_external_block_stat</ref>(*stat,<sp/>stage);</highlight></codeline>
<codeline lineno="926"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="927"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="928"><highlight class="normal"></highlight></codeline>
<codeline lineno="929"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>res<sp/>=<sp/><ref refid="classShaderParser_1_1AssembleShaderEvalCB_1a5e9a6d3c7f86c43bd326f57002c3254c" kindref="member">eval_if</ref>(*s.expr);</highlight></codeline>
<codeline lineno="930"><highlight class="normal"><sp/><sp/><sp/><sp/>G_ASSERT(res<sp/>!=<sp/><ref refid="classShaderParser_1_1ShaderEvalCB_1a4e485b7ac1252d1a948698ab76ccd7cfa67354fcef9c601179eef2864b8228b76" kindref="member">ShaderEvalCB::IF_BOTH</ref>);</highlight></codeline>
<codeline lineno="931"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(res<sp/>==<sp/><ref refid="classShaderParser_1_1ShaderEvalCB_1a4e485b7ac1252d1a948698ab76ccd7cfa795199991378708f0bd9307c73262846" kindref="member">ShaderEvalCB::IF_TRUE</ref>)</highlight></codeline>
<codeline lineno="932"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="933"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>eval_stats(s.true_stat);</highlight></codeline>
<codeline lineno="934"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="935"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="936"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="937"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>eval_stats(s.false_stat);</highlight></codeline>
<codeline lineno="938"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(s.else_if)</highlight></codeline>
<codeline lineno="939"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>eval_if_stat(*s.else_if,<sp/>eval_if_stat);</highlight></codeline>
<codeline lineno="940"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="941"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="942"><highlight class="normal"></highlight></codeline>
<codeline lineno="943"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>stat<sp/>:<sp/>state_block.stblock_stat)</highlight></codeline>
<codeline lineno="944"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="945"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(stat-&gt;stblock_if_stat)</highlight></codeline>
<codeline lineno="946"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>eval_if_stat(*stat-&gt;stblock_if_stat,<sp/>eval_if_stat);</highlight></codeline>
<codeline lineno="947"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="948"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classShaderParser_1_1AssembleShaderEvalCB_1a22833c4bc718aae5d5591acbecd69235" kindref="member">eval_external_block_stat</ref>(*stat,<sp/>stage);</highlight></codeline>
<codeline lineno="949"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="950"><highlight class="normal">}</highlight></codeline>
<codeline lineno="951"><highlight class="normal"></highlight></codeline>
<codeline lineno="952"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classShaderParser_1_1AssembleShaderEvalCB_1a22833c4bc718aae5d5591acbecd69235" kindref="member">AssembleShaderEvalCB::eval_external_block_stat</ref>(state_block_stat<sp/>&amp;s,<sp/>ShaderStage<sp/>stage)</highlight></codeline>
<codeline lineno="953"><highlight class="normal">{</highlight></codeline>
<codeline lineno="954"><highlight class="normal"><sp/><sp/><ref refid="namespacesemantic_1a1fd7ba909c618ad56fbacae8b3226182" kindref="member">semantic::VariableType</ref><sp/>vt<sp/>=<sp/><ref refid="namespacesemantic_1af126f5a1c2217c70427cbebf8a43a267" kindref="member">semantic::parse_named_const_type</ref>(s);</highlight></codeline>
<codeline lineno="955"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(vt<sp/>==<sp/><ref refid="namespacesemantic_1a1fd7ba909c618ad56fbacae8b3226182a88183b946cc5f0e8c96b2e66e1c74a7e" kindref="member">semantic::VariableType::Unknown</ref>)</highlight></codeline>
<codeline lineno="956"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="957"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="shErrorReporting_8h_1a634f6d6ca9a9f22c5eea4c9b8e20ef31" kindref="member">report_error</ref>(<ref refid="classShaderParser_1_1AssembleShaderEvalCB_1afabaa52e0ea25f004960aacc342b3c84" kindref="member">parser</ref>,<sp/>&amp;s,<sp/></highlight><highlight class="stringliteral">&quot;Invalid<sp/>preshader<sp/>var<sp/>type&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="958"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="959"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="960"><highlight class="normal"></highlight></codeline>
<codeline lineno="961"><highlight class="normal"><sp/><sp/>PreshaderStat<sp/>stat{&amp;s,<sp/>stage,<sp/>vt};</highlight></codeline>
<codeline lineno="962"><highlight class="normal"></highlight></codeline>
<codeline lineno="963"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(s.reg<sp/>||<sp/>s.reg_arr)</highlight></codeline>
<codeline lineno="964"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classShaderParser_1_1AssembleShaderEvalCB_1a83ff86702f67548a6b715f02e8ebecf6" kindref="member">preshaderHardcodedStats</ref>.emplace_back(stat);</highlight></codeline>
<codeline lineno="965"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="namespacesemantic_1a68675013876f05d68c74690f9130e646" kindref="member">semantic::vt_is_numeric</ref>(vt))</highlight></codeline>
<codeline lineno="966"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classShaderParser_1_1AssembleShaderEvalCB_1a14130d2479772469a8e6df8580f83c1a" kindref="member">preshaderScalarStats</ref>.emplace_back(stat);</highlight></codeline>
<codeline lineno="967"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="namespacesemantic_1a477f00043c849605a540cfbc6ae679fa" kindref="member">semantic::vt_is_static_texture</ref>(vt))</highlight></codeline>
<codeline lineno="968"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classShaderParser_1_1AssembleShaderEvalCB_1a6ea7a67aa6b841f14f12d1b2e02759d6" kindref="member">preshaderStaticTextureStats</ref>.emplace_back(stat);</highlight></codeline>
<codeline lineno="969"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="970"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classShaderParser_1_1AssembleShaderEvalCB_1a92a00236fa1ab932b4046af012d3799b" kindref="member">preshaderDynamicResourceStats</ref>.emplace_back(stat);</highlight></codeline>
<codeline lineno="971"><highlight class="normal">}</highlight></codeline>
<codeline lineno="972"><highlight class="normal"></highlight></codeline>
<codeline lineno="973"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classShaderParser_1_1AssembleShaderEvalCB_1a5dc7b25816fae47cee7290147b0d4074" kindref="member">AssembleShaderEvalCB::process_external_block_stat</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>PreshaderStat<sp/>&amp;stat)</highlight></codeline>
<codeline lineno="974"><highlight class="normal">{</highlight></codeline>
<codeline lineno="975"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal"><ref refid="namespacesemantic_1a1fd7ba909c618ad56fbacae8b3226182" kindref="member">semantic::VariableType</ref>;</highlight></codeline>
<codeline lineno="976"><highlight class="normal"></highlight></codeline>
<codeline lineno="977"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;[st,<sp/>stage,<sp/>vt]<sp/>=<sp/>stat;</highlight></codeline>
<codeline lineno="978"><highlight class="normal"></highlight></codeline>
<codeline lineno="979"><highlight class="normal"><sp/><sp/>G_ASSERT(st-&gt;var<sp/>||<sp/>st-&gt;arr<sp/>||<sp/>st-&gt;reg<sp/>||<sp/>st-&gt;reg_arr);</highlight></codeline>
<codeline lineno="980"><highlight class="normal"></highlight></codeline>
<codeline lineno="981"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="namespaceshc_1a47efde6b3d493adbe2119a5593807d36" kindref="member">shc::config</ref>().cppStcodeMode<sp/>==<sp/>shader_layout::ExternalStcodeMode::BRANCHED_CPP)</highlight></codeline>
<codeline lineno="982"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classShaderParser_1_1AssembleShaderEvalCB_1aa0a30867edef6bbfacd9e7286672d2f2" kindref="member">usedPreshaderStatements</ref>.push_back(uintptr_t(st));</highlight></codeline>
<codeline lineno="983"><highlight class="normal"></highlight></codeline>
<codeline lineno="984"><highlight class="normal"><sp/><sp/>G_ASSERT(st-&gt;var<sp/>||<sp/>st-&gt;arr<sp/>||<sp/>st-&gt;reg<sp/>||<sp/>st-&gt;reg_arr);</highlight></codeline>
<codeline lineno="985"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!st-&gt;var<sp/>||<sp/>st-&gt;var-&gt;val-&gt;builtin_var)</highlight></codeline>
<codeline lineno="986"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classShaderParser_1_1AssembleShaderEvalCB_1a9f2c16d8833b79771315394b6abe5685" kindref="member">compile_external_block_stat</ref>(stat);</highlight></codeline>
<codeline lineno="987"><highlight class="normal"></highlight></codeline>
<codeline lineno="988"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>clang-format<sp/>off</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="989"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(vt)</highlight></codeline>
<codeline lineno="990"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="991"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>VariableType::f1:</highlight></codeline>
<codeline lineno="992"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>VariableType::f2:</highlight></codeline>
<codeline lineno="993"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>VariableType::f3:</highlight></codeline>
<codeline lineno="994"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>VariableType::i1:</highlight></codeline>
<codeline lineno="995"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>VariableType::i2:</highlight></codeline>
<codeline lineno="996"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>VariableType::i3:</highlight></codeline>
<codeline lineno="997"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>VariableType::u1:</highlight></codeline>
<codeline lineno="998"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>VariableType::u2:</highlight></codeline>
<codeline lineno="999"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>VariableType::u3:</highlight></codeline>
<codeline lineno="1000"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1001"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1002"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classShaderParser_1_1AssembleShaderEvalCB_1a9f2c16d8833b79771315394b6abe5685" kindref="member">compile_external_block_stat</ref>(stat);</highlight></codeline>
<codeline lineno="1003"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1004"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>clang-format<sp/>on</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1005"><highlight class="normal"></highlight></codeline>
<codeline lineno="1006"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>exprIsDynamic<sp/>=<sp/>[&amp;,<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">]()<sp/>{</highlight></codeline>
<codeline lineno="1007"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!st-&gt;var-&gt;val-&gt;expr)</highlight></codeline>
<codeline lineno="1008"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1009"><highlight class="normal"></highlight></codeline>
<codeline lineno="1010"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classShaderParser_1_1ComplexExpression" kindref="compound">ComplexExpression</ref><sp/>colorExpr(st-&gt;var-&gt;val-&gt;expr,<sp/>shexpr::VT_COLOR4);</highlight></codeline>
<codeline lineno="1011"><highlight class="normal"></highlight></codeline>
<codeline lineno="1012"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="classShaderParser_1_1AssembleShaderEvalCB_1acd8eb6b1e5a36d30cc261b2f860856e3" kindref="member">exprParser</ref>.<ref refid="classShaderParser_1_1ExpressionParser_1a107fbfb633c8a18c8f24fac035605fe6" kindref="member">parseExpression</ref>(*st-&gt;var-&gt;val-&gt;expr,<sp/>&amp;colorExpr,</highlight></codeline>
<codeline lineno="1013"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structShaderParser_1_1ExpressionParser_1_1Context" kindref="compound">ExpressionParser::Context</ref>{shexpr::VT_COLOR4,<sp/>vt_is_integer(vt),<sp/>st-&gt;var-&gt;var-&gt;name}))</highlight></codeline>
<codeline lineno="1014"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1015"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1016"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1017"><highlight class="normal"></highlight></codeline>
<codeline lineno="1018"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Symbol<sp/>*s<sp/>=<sp/>colorExpr.hasDynamicAndMaterialTermsAt())</highlight></codeline>
<codeline lineno="1019"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1020"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classShaderParser_1_1AssembleShaderEvalCB_1a39ca44997c80a1fdda49317b73bc8151" kindref="member">hasDynStcodeRelyingOnMaterialParams</ref><sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1021"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classShaderParser_1_1AssembleShaderEvalCB_1ab4b7f4890dc105b84683fbadd463351d" kindref="member">exprWithDynamicAndMaterialTerms</ref><sp/>=<sp/>s;</highlight></codeline>
<codeline lineno="1022"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1023"><highlight class="normal"></highlight></codeline>
<codeline lineno="1024"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!colorExpr.collapseNumbers(<ref refid="classShaderParser_1_1AssembleShaderEvalCB_1afabaa52e0ea25f004960aacc342b3c84" kindref="member">parser</ref>))</highlight></codeline>
<codeline lineno="1025"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1026"><highlight class="normal"></highlight></codeline>
<codeline lineno="1027"><highlight class="normal"><sp/><sp/><sp/><sp/>Color4<sp/>v;</highlight></codeline>
<codeline lineno="1028"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(colorExpr.evaluate(v,<sp/><ref refid="classShaderParser_1_1AssembleShaderEvalCB_1afabaa52e0ea25f004960aacc342b3c84" kindref="member">parser</ref>))</highlight></codeline>
<codeline lineno="1029"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1030"><highlight class="normal"></highlight></codeline>
<codeline lineno="1031"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>colorExpr.isDynamic();</highlight></codeline>
<codeline lineno="1032"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="1033"><highlight class="normal"></highlight></codeline>
<codeline lineno="1034"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classShaderParser_1_1AssembleShaderEvalCB_1a3058e4d1c01fc25c4a62bf0e150fe6ca" kindref="member">ctx</ref>.<ref refid="classshc_1_1VariantContext_1a1cd6c96432c33d5741b597ad37709583" kindref="member">shCtx</ref>().<ref refid="classshc_1_1ShaderContext_1a6290b6c1649dfc5f77d7fd395ed9854f" kindref="member">blockLevel</ref>()<sp/>!=<sp/><ref refid="namedConst_8h_1a8df4796c58d0d8445eaf37bb57425b6cad898411bc00251ab145d6c0d5971f3ab" kindref="member">ShaderBlockLevel::GLOBAL_CONST</ref><sp/>&amp;&amp;<sp/>exprIsDynamic())</highlight></codeline>
<codeline lineno="1035"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classShaderParser_1_1AssembleShaderEvalCB_1a34667529acbb189246a907737c79f2dd" kindref="member">varMerger</ref>.<ref refid="structShaderParser_1_1VariablesMerger_1acf31bd757796e4f7b3300dcb6e84bfbd" kindref="member">addConstStat</ref>(*st,<sp/>stage);</highlight></codeline>
<codeline lineno="1036"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1037"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classShaderParser_1_1AssembleShaderEvalCB_1a34667529acbb189246a907737c79f2dd" kindref="member">varMerger</ref>.<ref refid="structShaderParser_1_1VariablesMerger_1a92a153d67693ab2a85fb236214497778" kindref="member">addBufferedStat</ref>(*st,<sp/>stage);</highlight></codeline>
<codeline lineno="1038"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1039"><highlight class="normal"></highlight></codeline>
<codeline lineno="1040"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classShaderParser_1_1AssembleShaderEvalCB_1a9f2c16d8833b79771315394b6abe5685" kindref="member">AssembleShaderEvalCB::compile_external_block_stat</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>PreshaderStat<sp/>&amp;stat)</highlight></codeline>
<codeline lineno="1041"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1042"><highlight class="normal"><sp/><sp/>RegionMemAlloc<sp/>rm_alloc(4<sp/>&lt;&lt;<sp/>20,<sp/>4<sp/>&lt;&lt;<sp/>20);</highlight></codeline>
<codeline lineno="1043"><highlight class="normal"></highlight></codeline>
<codeline lineno="1044"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>parsedDefMaybe<sp/>=<sp/><ref refid="namespacesemantic_1af0b1e07e31a716f1a8699d9ca402b2a0" kindref="member">semantic::parse_named_const_definition</ref>(*stat.stat,<sp/>stat.stage,<sp/>stat.vt,<sp/><ref refid="classShaderParser_1_1AssembleShaderEvalCB_1a3058e4d1c01fc25c4a62bf0e150fe6ca" kindref="member">ctx</ref>,<sp/>&amp;rm_alloc);</highlight></codeline>
<codeline lineno="1045"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!parsedDefMaybe)</highlight></codeline>
<codeline lineno="1046"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1047"><highlight class="normal"></highlight></codeline>
<codeline lineno="1048"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structsemantic_1_1NamedConstDefInfo" kindref="compound">semantic::NamedConstDefInfo</ref><sp/>&amp;def<sp/>=<sp/>*parsedDefMaybe;</highlight></codeline>
<codeline lineno="1049"><highlight class="normal"></highlight></codeline>
<codeline lineno="1050"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(def.<ref refid="structsemantic_1_1NamedConstDefInfo_1a263a1698c52462d32bec85c14a4e6dd1" kindref="member">isBindless</ref>)</highlight></codeline>
<codeline lineno="1051"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classShaderParser_1_1AssembleShaderEvalCB_1a2ba6fb52310a3ced7b31ede7fd8cbc8b" kindref="member">code</ref>.<ref refid="classShaderSemCode_1abe6ed6468793a4cbe55a75133a83d393" kindref="member">vars</ref>[def.<ref refid="structsemantic_1_1NamedConstDefInfo_1a4e2837802dde1e094a88a8895010fc93" kindref="member">bindlessVarId</ref>].texType<sp/>=<sp/>def.<ref refid="structsemantic_1_1NamedConstDefInfo_1ad923eec979d61f160ba1fcaa1032894f" kindref="member">shvarTexType</ref>;</highlight></codeline>
<codeline lineno="1052"><highlight class="normal"></highlight></codeline>
<codeline lineno="1053"><highlight class="normal"><sp/><sp/><ref refid="classShaderParser_1_1AssembleShaderEvalCB_1a39ca44997c80a1fdda49317b73bc8151" kindref="member">hasDynStcodeRelyingOnMaterialParams</ref><sp/>|=<sp/>def.<ref refid="structsemantic_1_1NamedConstDefInfo_1a8fdf3096ebc54b328316c18789aa5ed7" kindref="member">hasDynStcodeRelyingOnMaterialParams</ref>;</highlight></codeline>
<codeline lineno="1054"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(def.<ref refid="structsemantic_1_1NamedConstDefInfo_1ae129b16033d7fdeabf80f748110250a1" kindref="member">exprWithDynamicAndMaterialTerms</ref>)</highlight></codeline>
<codeline lineno="1055"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classShaderParser_1_1AssembleShaderEvalCB_1ab4b7f4890dc105b84683fbadd463351d" kindref="member">exprWithDynamicAndMaterialTerms</ref><sp/>=<sp/>def.<ref refid="structsemantic_1_1NamedConstDefInfo_1ae129b16033d7fdeabf80f748110250a1" kindref="member">exprWithDynamicAndMaterialTerms</ref>;</highlight></codeline>
<codeline lineno="1056"><highlight class="normal"></highlight></codeline>
<codeline lineno="1057"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Validate<sp/>that<sp/>the<sp/>same<sp/>shadervar<sp/>has<sp/>not<sp/>been<sp/>used<sp/>both<sp/>as<sp/>a<sp/>uav<sp/>and<sp/>an<sp/>srv<sp/>resource<sp/>in<sp/>the<sp/>same<sp/>pass</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1058"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(def.<ref refid="structsemantic_1_1NamedConstDefInfo_1a779da705277912ae2c2cfe818c24c7b0" kindref="member">shvarType</ref><sp/>==<sp/>SHVT_TEXTURE<sp/>||<sp/>def.<ref refid="structsemantic_1_1NamedConstDefInfo_1a779da705277912ae2c2cfe818c24c7b0" kindref="member">shvarType</ref><sp/>==<sp/>SHVT_BUFFER)</highlight></codeline>
<codeline lineno="1059"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1060"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isRw<sp/>=<sp/>def.<ref refid="structsemantic_1_1NamedConstDefInfo_1a40a99bfe135ba6f6802136b1389a5aca" kindref="member">type</ref><sp/>==<sp/>semantic::VariableType::uav;</highlight></codeline>
<codeline lineno="1061"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>setForVar<sp/>=<sp/>[</highlight><highlight class="keyword">this</highlight><highlight class="normal">](</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isRw,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isGlobal)<sp/>-&gt;<sp/></highlight><highlight class="keyword">decltype</highlight><highlight class="normal">(<ref refid="classShaderParser_1_1AssembleShaderEvalCB_1a14bbbcbe63f36f84456a546fd36f1f2c" kindref="member">uavGlobalShadervarRefs</ref>)<sp/>&amp;<sp/>{</highlight></codeline>
<codeline lineno="1062"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>isGlobal<sp/>?<sp/>(isRw<sp/>?<sp/><ref refid="classShaderParser_1_1AssembleShaderEvalCB_1a14bbbcbe63f36f84456a546fd36f1f2c" kindref="member">uavGlobalShadervarRefs</ref><sp/>:<sp/><ref refid="classShaderParser_1_1AssembleShaderEvalCB_1a2507936d16835c9e6a9269dae3b5b9cf" kindref="member">srvGlobalShadervarRefs</ref>)</highlight></codeline>
<codeline lineno="1063"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>(isRw<sp/>?<sp/><ref refid="classShaderParser_1_1AssembleShaderEvalCB_1a1d333fad79171cbd841277824bd2fa8f" kindref="member">uavLocalShadervarRefs</ref><sp/>:<sp/><ref refid="classShaderParser_1_1AssembleShaderEvalCB_1a00e1da3808ed324516f05116b65d4794" kindref="member">srvLocalShadervarRefs</ref>);</highlight></codeline>
<codeline lineno="1064"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="1065"><highlight class="normal"></highlight></codeline>
<codeline lineno="1066"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;elem<sp/>:<sp/>def.initializer)</highlight></codeline>
<codeline lineno="1067"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1068"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>G_ASSERT(elem.isGlobalVar()<sp/>||<sp/>elem.isMaterialVar());</highlight></codeline>
<codeline lineno="1069"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isGlobal<sp/>=<sp/>elem.isGlobalVar();</highlight></codeline>
<codeline lineno="1070"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*varName<sp/>=<sp/>elem.varName();</highlight></codeline>
<codeline lineno="1071"><highlight class="normal"></highlight></codeline>
<codeline lineno="1072"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;set<sp/>=<sp/>setForVar(isRw,<sp/>isGlobal);</highlight></codeline>
<codeline lineno="1073"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;conflictSet<sp/>=<sp/>setForVar(!isRw,<sp/>isGlobal);</highlight></codeline>
<codeline lineno="1074"><highlight class="normal"></highlight></codeline>
<codeline lineno="1075"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>it<sp/>=<sp/>conflictSet.find(varName);<sp/>it<sp/>!=<sp/>conflictSet.end())</highlight></codeline>
<codeline lineno="1076"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1077"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>strForUsage<sp/>=<sp/>[](</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isRw)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>isRw<sp/>?<sp/></highlight><highlight class="stringliteral">&quot;UAV&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;SRV&quot;</highlight><highlight class="normal">;<sp/>};</highlight></codeline>
<codeline lineno="1078"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="shErrorReporting_8h_1a634f6d6ca9a9f22c5eea4c9b8e20ef31" kindref="member">report_error</ref>(<ref refid="classShaderParser_1_1AssembleShaderEvalCB_1afabaa52e0ea25f004960aacc342b3c84" kindref="member">parser</ref>,<sp/>stat.stat,<sp/></highlight><highlight class="stringliteral">&quot;The<sp/>same<sp/>%s<sp/>shadervar<sp/>is<sp/>used<sp/>as<sp/>a<sp/>%s,<sp/>while<sp/>being<sp/>previously<sp/>used<sp/>as<sp/>a<sp/>%s<sp/>at<sp/>%s(%d,<sp/>%d)&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1079"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>isGlobal<sp/>?<sp/></highlight><highlight class="stringliteral">&quot;global&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;material&quot;</highlight><highlight class="normal">,<sp/>strForUsage(isRw),<sp/>strForUsage(!isRw),</highlight></codeline>
<codeline lineno="1080"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classShaderParser_1_1AssembleShaderEvalCB_1afabaa52e0ea25f004960aacc342b3c84" kindref="member">parser</ref>.get_lexer().get_filename(it-&gt;second-&gt;file_start),<sp/>it-&gt;second-&gt;line_start,<sp/>it-&gt;second-&gt;col_start);</highlight></codeline>
<codeline lineno="1081"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1082"><highlight class="normal"></highlight></codeline>
<codeline lineno="1083"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>set.emplace(varName,<sp/>stat.stat);</highlight></codeline>
<codeline lineno="1084"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1085"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1086"><highlight class="normal"></highlight></codeline>
<codeline lineno="1087"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1088"><highlight class="normal"><sp/><sp/><sp/><sp/>Terminal<sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>var<sp/>=<sp/>def.<ref refid="structsemantic_1_1NamedConstDefInfo_1a52fd7afc7dff324248e68eb1185143a4" kindref="member">varTerm</ref>;</highlight></codeline>
<codeline lineno="1089"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>hardcoded_reg<sp/>=<sp/>def.<ref refid="structsemantic_1_1NamedConstDefInfo_1aa18633d67a9a9e2c726ad327541a55f7" kindref="member">hardcodedRegister</ref>;</highlight></codeline>
<codeline lineno="1090"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>registers_count<sp/>=<sp/>def.<ref refid="structsemantic_1_1NamedConstDefInfo_1a2538d3254a9a28c20d44a6ea0c2c2e65" kindref="member">registerSize</ref>;</highlight></codeline>
<codeline lineno="1091"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>ShaderStage<sp/>stage<sp/>=<sp/>def.<ref refid="structsemantic_1_1NamedConstDefInfo_1a17d28ce51c6f4cd40d3e731e69c63392" kindref="member">stage</ref>;</highlight></codeline>
<codeline lineno="1092"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>String<sp/>&amp;varName<sp/>=<sp/>def.<ref refid="structsemantic_1_1NamedConstDefInfo_1aa34d1200eefa8c3bfa01ad34fc659012" kindref="member">mangledName</ref>;</highlight></codeline>
<codeline lineno="1093"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="hlslRegisters_8h_1aa3a591153956a0cd6630e2d20870fb9b" kindref="member">HlslRegisterSpace</ref><sp/>reg_space<sp/>=<sp/>def.<ref refid="structsemantic_1_1NamedConstDefInfo_1a20cadfab62d2fe81e136c3c5b581a030" kindref="member">regSpace</ref>;</highlight></codeline>
<codeline lineno="1094"><highlight class="normal"></highlight></codeline>
<codeline lineno="1095"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>hnd<sp/>=<sp/><ref refid="classShaderParser_1_1AssembleShaderEvalCB_1a9fce8bcafff541a352da46dc6bb3e441" kindref="member">shConst</ref>.<ref refid="structNamedConstBlock_1a05ca2e54e5d452b311791a274b3a89c6" kindref="member">addConst</ref>(stage,<sp/>varName,<sp/>reg_space,<sp/>registers_count,<sp/>hardcoded_reg,<sp/>def.<ref refid="structsemantic_1_1NamedConstDefInfo_1a1618a590cbf1c99259813de7cb83c29a" kindref="member">isDynamic</ref>,</highlight></codeline>
<codeline lineno="1096"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classShaderParser_1_1AssembleShaderEvalCB_1a3058e4d1c01fc25c4a62bf0e150fe6ca" kindref="member">ctx</ref>.<ref refid="classshc_1_1VariantContext_1a1cd6c96432c33d5741b597ad37709583" kindref="member">shCtx</ref>().<ref refid="classshc_1_1ShaderContext_1a6290b6c1649dfc5f77d7fd395ed9854f" kindref="member">blockLevel</ref>()<sp/>==<sp/><ref refid="namedConst_8h_1a8df4796c58d0d8445eaf37bb57425b6cad898411bc00251ab145d6c0d5971f3ab" kindref="member">ShaderBlockLevel::GLOBAL_CONST</ref>);</highlight></codeline>
<codeline lineno="1097"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="hlslStage_8h_1a98ad5875b95147f4099a697360633e7d" kindref="member">is_valid</ref>(hnd))</highlight></codeline>
<codeline lineno="1098"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1099"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>@TODO:<sp/>implement<sp/>correct<sp/>expression<sp/>comparison<sp/>to<sp/>not<sp/>allow<sp/>silent<sp/>redecls</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!hnd.isBufConst)</highlight></codeline>
<codeline lineno="1101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="shErrorReporting_8h_1a634f6d6ca9a9f22c5eea4c9b8e20ef31" kindref="member">report_error</ref>(<ref refid="classShaderParser_1_1AssembleShaderEvalCB_1afabaa52e0ea25f004960aacc342b3c84" kindref="member">parser</ref>,<sp/>var,<sp/></highlight><highlight class="stringliteral">&quot;Redeclaration<sp/>for<sp/>variable<sp/>&lt;%s&gt;<sp/>in<sp/>external<sp/>block<sp/>is<sp/>not<sp/>allowed&quot;</highlight><highlight class="normal">,<sp/>varName.c_str());</highlight></codeline>
<codeline lineno="1103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="shErrorReporting_8h_1ab1481e3fe8354f93f6703076e615ee5e" kindref="member">report_debug_message</ref>(<ref refid="classShaderParser_1_1AssembleShaderEvalCB_1afabaa52e0ea25f004960aacc342b3c84" kindref="member">parser</ref>,<sp/>*var,</highlight></codeline>
<codeline lineno="1107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Redeclaration<sp/>for<sp/>variable<sp/>&lt;%s&gt;<sp/>for<sp/>%s<sp/>is<sp/>skipped.<sp/>If<sp/>it&apos;s<sp/>declaration<sp/>differs<sp/>from<sp/>previous,<sp/>this<sp/>is<sp/>UB.&quot;</highlight><highlight class="normal">,<sp/>varName.c_str(),</highlight></codeline>
<codeline lineno="1108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>def.<ref refid="structsemantic_1_1NamedConstDefInfo_1a1618a590cbf1c99259813de7cb83c29a" kindref="member">isDynamic</ref><sp/>?<sp/></highlight><highlight class="stringliteral">&quot;global<sp/>const<sp/>block&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;static<sp/>cbuf&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1111"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1112"><highlight class="normal"></highlight></codeline>
<codeline lineno="1113"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>reg<sp/>=<sp/><ref refid="classShaderParser_1_1AssembleShaderEvalCB_1a9fce8bcafff541a352da46dc6bb3e441" kindref="member">shConst</ref>.<ref refid="structNamedConstBlock_1a077cdc00515b9c76bd75371533bc4b54" kindref="member">getSlot</ref>(hnd).<ref refid="structNamedConstBlock_1_1NamedConst_1a9b72aedb4704db42efdfbd0b6afb6ae8" kindref="member">regIndex</ref>;</highlight></codeline>
<codeline lineno="1114"><highlight class="normal"></highlight></codeline>
<codeline lineno="1115"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>builtHlslMaybe<sp/>=<sp/><ref refid="namespaceassembly_1a61b2b995030f3ac4d90ea82218c3d786" kindref="member">assembly::build_hlsl_decl_for_named_const</ref>(def,<sp/><ref refid="classShaderParser_1_1AssembleShaderEvalCB_1a3058e4d1c01fc25c4a62bf0e150fe6ca" kindref="member">ctx</ref>,<sp/>reg,<sp/><ref refid="classShaderParser_1_1AssembleShaderEvalCB_1a34667529acbb189246a907737c79f2dd" kindref="member">varMerger</ref>);</highlight></codeline>
<codeline lineno="1116"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!builtHlslMaybe)</highlight></codeline>
<codeline lineno="1117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1118"><highlight class="normal"></highlight></codeline>
<codeline lineno="1119"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structassembly_1_1NamedConstDeclarationHlsl" kindref="compound">assembly::NamedConstDeclarationHlsl</ref><sp/>&amp;builtHlsl<sp/>=<sp/>*builtHlslMaybe;</highlight></codeline>
<codeline lineno="1120"><highlight class="normal"></highlight></codeline>
<codeline lineno="1121"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classShaderParser_1_1AssembleShaderEvalCB_1a3058e4d1c01fc25c4a62bf0e150fe6ca" kindref="member">ctx</ref>.<ref refid="classshc_1_1VariantContext_1ab722b76d9c32f145bd21cea293d07846" kindref="member">namedConstTable</ref>().<ref refid="structNamedConstBlock_1a0e016ca71cfa266875d521e7cb3b77c4" kindref="member">addHlslDecl</ref>(hnd,<sp/>eastl::move(builtHlsl.<ref refid="structassembly_1_1NamedConstDeclarationHlsl_1a154ac996760735289d3d84b599f62cff" kindref="member">definition</ref>),<sp/>eastl::move(builtHlsl.<ref refid="structassembly_1_1NamedConstDeclarationHlsl_1ae83faf885420920bab920464bfe40d61" kindref="member">postfix</ref>));</highlight></codeline>
<codeline lineno="1122"><highlight class="normal"></highlight></codeline>
<codeline lineno="1123"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!assembly::build_stcode_for_named_const&lt;assembly::StcodeBuildFlagsBits::ALL&gt;(def,<sp/>reg,<sp/><ref refid="classShaderParser_1_1AssembleShaderEvalCB_1a3058e4d1c01fc25c4a62bf0e150fe6ca" kindref="member">ctx</ref>,<sp/>&amp;rm_alloc))</highlight></codeline>
<codeline lineno="1124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1125"><highlight class="normal"></highlight></codeline>
<codeline lineno="1126"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classShaderParser_1_1AssembleShaderEvalCB_1ab9cab3d8f792289893c0ea004fb65110" kindref="member">stcode_vars</ref>.push_back(var);</highlight></codeline>
<codeline lineno="1127"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1128"><highlight class="normal"></highlight></codeline>
<codeline lineno="1129"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(def.<ref refid="structsemantic_1_1NamedConstDefInfo_1aeb9fefcdec41f3f6ad3e13b9b4a41ec1" kindref="member">pairSamplerTmpDecl</ref>)</highlight></codeline>
<codeline lineno="1130"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1131"><highlight class="normal"><sp/><sp/><sp/><sp/>G_ASSERT(<ref refid="classShaderParser_1_1AssembleShaderEvalCB_1a3058e4d1c01fc25c4a62bf0e150fe6ca" kindref="member">ctx</ref>.<ref refid="classshc_1_1VariantContext_1a1cd6c96432c33d5741b597ad37709583" kindref="member">shCtx</ref>().<ref refid="classshc_1_1ShaderContext_1a6290b6c1649dfc5f77d7fd395ed9854f" kindref="member">blockLevel</ref>()<sp/>!=<sp/><ref refid="namedConst_8h_1a8df4796c58d0d8445eaf37bb57425b6cad898411bc00251ab145d6c0d5971f3ab" kindref="member">ShaderBlockLevel::GLOBAL_CONST</ref>);</highlight></codeline>
<codeline lineno="1132"><highlight class="normal"></highlight></codeline>
<codeline lineno="1133"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>String<sp/>samplerConstName{0,<sp/></highlight><highlight class="stringliteral">&quot;%s%s&quot;</highlight><highlight class="normal">,<sp/>def.<ref refid="structsemantic_1_1NamedConstDefInfo_1aa34d1200eefa8c3bfa01ad34fc659012" kindref="member">mangledName</ref>.c_str(),<sp/>def.<ref refid="structsemantic_1_1NamedConstDefInfo_1a753999253bf724e84079f91eda852452" kindref="member">pairSamplerBindSuffix</ref>};</highlight></codeline>
<codeline lineno="1134"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>hnd<sp/>=<sp/><ref refid="classShaderParser_1_1AssembleShaderEvalCB_1a9fce8bcafff541a352da46dc6bb3e441" kindref="member">shConst</ref>.<ref refid="structNamedConstBlock_1a05ca2e54e5d452b311791a274b3a89c6" kindref="member">addConst</ref>(def.<ref refid="structsemantic_1_1NamedConstDefInfo_1a17d28ce51c6f4cd40d3e731e69c63392" kindref="member">stage</ref>,<sp/>samplerConstName,<sp/><ref refid="hlslRegisters_8h_1aa3a591153956a0cd6630e2d20870fb9bab0f240d14a78569ec3d3b8586fa8b0c6" kindref="member">HLSL_RSPACE_S</ref>,<sp/>1,<sp/>def.<ref refid="structsemantic_1_1NamedConstDefInfo_1aa18633d67a9a9e2c726ad327541a55f7" kindref="member">hardcodedRegister</ref>,<sp/>def.<ref refid="structsemantic_1_1NamedConstDefInfo_1a1618a590cbf1c99259813de7cb83c29a" kindref="member">isDynamic</ref>,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1135"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="hlslStage_8h_1a98ad5875b95147f4099a697360633e7d" kindref="member">is_valid</ref>(hnd))</highlight></codeline>
<codeline lineno="1136"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="shErrorReporting_8h_1a634f6d6ca9a9f22c5eea4c9b8e20ef31" kindref="member">report_error</ref>(<ref refid="classShaderParser_1_1AssembleShaderEvalCB_1afabaa52e0ea25f004960aacc342b3c84" kindref="member">parser</ref>,<sp/>def.<ref refid="structsemantic_1_1NamedConstDefInfo_1a52fd7afc7dff324248e68eb1185143a4" kindref="member">varTerm</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Redeclaration<sp/>for<sp/>variable<sp/>&lt;%s&gt;<sp/>with<sp/>implicit<sp/>pair<sp/>sampler<sp/>is<sp/>not<sp/>allowed&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>def.<ref refid="structsemantic_1_1NamedConstDefInfo_1aa34d1200eefa8c3bfa01ad34fc659012" kindref="member">mangledName</ref>.c_str());</highlight></codeline>
<codeline lineno="1139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1140"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1141"><highlight class="normal"></highlight></codeline>
<codeline lineno="1142"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>reg<sp/>=<sp/><ref refid="classShaderParser_1_1AssembleShaderEvalCB_1a9fce8bcafff541a352da46dc6bb3e441" kindref="member">shConst</ref>.<ref refid="structNamedConstBlock_1a077cdc00515b9c76bd75371533bc4b54" kindref="member">getSlot</ref>(hnd).<ref refid="structNamedConstBlock_1_1NamedConst_1a9b72aedb4704db42efdfbd0b6afb6ae8" kindref="member">regIndex</ref>;</highlight></codeline>
<codeline lineno="1143"><highlight class="normal"><sp/><sp/><sp/><sp/>String<sp/>hlsl<sp/>=<sp/><ref refid="namespaceassembly_1aa2103c4b24d97bc75908e181a4c6e4af" kindref="member">assembly::build_hlsl_for_pair_sampler</ref>(def.<ref refid="structsemantic_1_1NamedConstDefInfo_1aa34d1200eefa8c3bfa01ad34fc659012" kindref="member">mangledName</ref>.c_str(),<sp/>def.<ref refid="structsemantic_1_1NamedConstDefInfo_1a747de66f9d463bac25b0582accbbfdf1" kindref="member">pairSamplerIsShadow</ref>,<sp/>reg,<sp/><ref refid="classShaderParser_1_1AssembleShaderEvalCB_1a3058e4d1c01fc25c4a62bf0e150fe6ca" kindref="member">ctx</ref>);</highlight></codeline>
<codeline lineno="1144"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classShaderParser_1_1AssembleShaderEvalCB_1a9fce8bcafff541a352da46dc6bb3e441" kindref="member">shConst</ref>.<ref refid="structNamedConstBlock_1a0e016ca71cfa266875d521e7cb3b77c4" kindref="member">addHlslDecl</ref>(hnd,<sp/>eastl::move(hlsl),<sp/>{});</highlight></codeline>
<codeline lineno="1145"><highlight class="normal"></highlight></codeline>
<codeline lineno="1146"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(def.<ref refid="structsemantic_1_1NamedConstDefInfo_1a1618a590cbf1c99259813de7cb83c29a" kindref="member">isDynamic</ref><sp/>&amp;&amp;<sp/>def.<ref refid="structsemantic_1_1NamedConstDefInfo_1aa18633d67a9a9e2c726ad327541a55f7" kindref="member">hardcodedRegister</ref><sp/>==<sp/>-1)</highlight></codeline>
<codeline lineno="1147"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(def.<ref refid="structsemantic_1_1NamedConstDefInfo_1a4d790db1104a8bf1731013569f5fac4e" kindref="member">pairSamplerIsGlobal</ref>)</highlight></codeline>
<codeline lineno="1149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classShaderParser_1_1AssembleShaderEvalCB_1a3058e4d1c01fc25c4a62bf0e150fe6ca" kindref="member">ctx</ref>.<ref refid="classshc_1_1VariantContext_1a02952e27d2d5e304daad76b11cb1f4ad" kindref="member">tgtCtx</ref>().<ref refid="classshc_1_1TargetContext_1a752f5f70f8d04a70f87a34102a85f83a" kindref="member">samplers</ref>().<ref refid="classSamplerTable_1afe3dd516a03bff06a65ea05d9464c62a" kindref="member">add</ref>(*def.<ref refid="structsemantic_1_1NamedConstDefInfo_1aeb9fefcdec41f3f6ad3e13b9b4a41ec1" kindref="member">pairSamplerTmpDecl</ref>,<sp/><ref refid="classShaderParser_1_1AssembleShaderEvalCB_1afabaa52e0ea25f004960aacc342b3c84" kindref="member">parser</ref>);</highlight></codeline>
<codeline lineno="1150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="samplers_8cpp_1afd9387060e378c81caebfbe6d7b8f56a" kindref="member">add_dynamic_sampler_for_stcode</ref>(<ref refid="classShaderParser_1_1AssembleShaderEvalCB_1a2ba6fb52310a3ced7b31ede7fd8cbc8b" kindref="member">code</ref>,<sp/><ref refid="classShaderParser_1_1AssembleShaderEvalCB_1a2e5aa16f073ae06f6d67c338553e8c6b" kindref="member">sclass</ref>,<sp/>*def.<ref refid="structsemantic_1_1NamedConstDefInfo_1aeb9fefcdec41f3f6ad3e13b9b4a41ec1" kindref="member">pairSamplerTmpDecl</ref>,<sp/><ref refid="classShaderParser_1_1AssembleShaderEvalCB_1afabaa52e0ea25f004960aacc342b3c84" kindref="member">parser</ref>,<sp/><ref refid="classShaderParser_1_1AssembleShaderEvalCB_1a3058e4d1c01fc25c4a62bf0e150fe6ca" kindref="member">ctx</ref>.<ref refid="classshc_1_1VariantContext_1a02952e27d2d5e304daad76b11cb1f4ad" kindref="member">tgtCtx</ref>().<ref refid="classshc_1_1TargetContext_1a64e71598c4751d165675e9e9f1f70b8e" kindref="member">varNameMap</ref>());</highlight></codeline>
<codeline lineno="1152"><highlight class="normal"></highlight></codeline>
<codeline lineno="1153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>[samplerVarId,<sp/>varType,<sp/>isGlobal]<sp/>=<sp/><ref refid="namespacesemantic_1a69d749806268f5b3b7cafa16cab36787" kindref="member">semantic::lookup_state_var</ref>(*def.<ref refid="structsemantic_1_1NamedConstDefInfo_1aeb9fefcdec41f3f6ad3e13b9b4a41ec1" kindref="member">pairSamplerTmpDecl</ref>-&gt;name,<sp/><ref refid="classShaderParser_1_1AssembleShaderEvalCB_1a3058e4d1c01fc25c4a62bf0e150fe6ca" kindref="member">ctx</ref>);</highlight></codeline>
<codeline lineno="1154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>G_ASSERT(isGlobal<sp/>==<sp/>def.<ref refid="structsemantic_1_1NamedConstDefInfo_1a4d790db1104a8bf1731013569f5fac4e" kindref="member">pairSamplerIsGlobal</ref>);</highlight></codeline>
<codeline lineno="1155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>G_ASSERT(varType<sp/>==<sp/>SHVT_SAMPLER);</highlight></codeline>
<codeline lineno="1156"><highlight class="normal"></highlight></codeline>
<codeline lineno="1157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>assembly::build_stcode_for_pair_sampler&lt;assembly::StcodeBuildFlagsBits::ALL&gt;(samplerConstName.c_str(),</highlight></codeline>
<codeline lineno="1158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>def.<ref refid="structsemantic_1_1NamedConstDefInfo_1ab6549c450f83058df1a86ae188646adf" kindref="member">pairSamplerName</ref>.c_str(),<sp/>reg,<sp/>def.<ref refid="structsemantic_1_1NamedConstDefInfo_1a17d28ce51c6f4cd40d3e731e69c63392" kindref="member">stage</ref>,<sp/>samplerVarId,<sp/>def.<ref refid="structsemantic_1_1NamedConstDefInfo_1a4d790db1104a8bf1731013569f5fac4e" kindref="member">pairSamplerIsGlobal</ref>,<sp/><ref refid="classShaderParser_1_1AssembleShaderEvalCB_1a3058e4d1c01fc25c4a62bf0e150fe6ca" kindref="member">ctx</ref>);</highlight></codeline>
<codeline lineno="1159"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1160"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1161"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1162"><highlight class="normal"></highlight></codeline>
<codeline lineno="1163"><highlight class="normal"></highlight></codeline>
<codeline lineno="1164"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classShaderParser_1_1AssembleShaderEvalCB_1a2fbcfc2d67b6deefd9dd09711f92b1a3" kindref="member">AssembleShaderEvalCB::eval_supports</ref>(supports_stat<sp/>&amp;s)</highlight></codeline>
<codeline lineno="1165"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1166"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>s.name.size();<sp/>i++)</highlight></codeline>
<codeline lineno="1167"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1168"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(s.name[i]-&gt;num<sp/>!=<sp/>SHADER_TOKENS::SHTOK_none)</highlight></codeline>
<codeline lineno="1169"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal">std::string_view_literals;</highlight></codeline>
<codeline lineno="1171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(s.name[i]-&gt;text<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;__static_cbuf&quot;</highlight><highlight class="normal">sv)</highlight></codeline>
<codeline lineno="1172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>reserveSpecialCbufferAt(<ref refid="hlslRegisters_8h_1affe2e38eb7f3eb318b7e3b88697f8a42afa1a5e2ec35e986f5eb459ef29647b1a" kindref="member">HlslSlotSemantic::RESERVED_FOR_MATERIAL_PARAMS_CBUF</ref>,<sp/><ref refid="const3d_8h_1ae98ca1b68b1fb921348785a7694ed12c" kindref="member">MATERIAL_PARAMS_CONST_BUF_REGISTER</ref>);</highlight></codeline>
<codeline lineno="1174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1175"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(s.name[i]-&gt;text<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;__static_multidraw_cbuf&quot;</highlight><highlight class="normal">sv)</highlight></codeline>
<codeline lineno="1177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Currently<sp/>we<sp/>support<sp/>multidraw<sp/>constbuffers<sp/>only<sp/>for<sp/>bindless<sp/>material<sp/>version.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1179"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>reserveSpecialCbufferAt(<ref refid="hlslRegisters_8h_1affe2e38eb7f3eb318b7e3b88697f8a42afa1a5e2ec35e986f5eb459ef29647b1a" kindref="member">HlslSlotSemantic::RESERVED_FOR_MATERIAL_PARAMS_CBUF</ref>,<sp/><ref refid="const3d_8h_1ae98ca1b68b1fb921348785a7694ed12c" kindref="member">MATERIAL_PARAMS_CONST_BUF_REGISTER</ref>);</highlight></codeline>
<codeline lineno="1180"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classShaderParser_1_1AssembleShaderEvalCB_1a9fce8bcafff541a352da46dc6bb3e441" kindref="member">shConst</ref>.<ref refid="structNamedConstBlock_1a86f9ccf5deda6624677bd710d8b1dd64" kindref="member">multidrawCbuf</ref><sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1182"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(s.name[i]-&gt;text<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;__draw_id&quot;</highlight><highlight class="normal">sv)</highlight></codeline>
<codeline lineno="1184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1187"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1188"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classShaderStateBlock" kindref="compound">ShaderStateBlock</ref><sp/>*b<sp/>=<sp/>(s.name[i]-&gt;num<sp/>==<sp/>SHADER_TOKENS::SHTOK_none)<sp/>?<sp/><ref refid="classShaderParser_1_1AssembleShaderEvalCB_1a3058e4d1c01fc25c4a62bf0e150fe6ca" kindref="member">ctx</ref>.<ref refid="classshc_1_1VariantContext_1a02952e27d2d5e304daad76b11cb1f4ad" kindref="member">tgtCtx</ref>().<ref refid="classshc_1_1TargetContext_1a29da580ffb2850a459e34b407e0e57ed" kindref="member">blocks</ref>().<ref refid="classShaderBlockTable_1a4ed91dd95664704f8d17f5d6c8357ea9" kindref="member">emptyBlock</ref>()</highlight></codeline>
<codeline lineno="1189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/><ref refid="classShaderParser_1_1AssembleShaderEvalCB_1a3058e4d1c01fc25c4a62bf0e150fe6ca" kindref="member">ctx</ref>.<ref refid="classshc_1_1VariantContext_1a02952e27d2d5e304daad76b11cb1f4ad" kindref="member">tgtCtx</ref>().<ref refid="classshc_1_1TargetContext_1a29da580ffb2850a459e34b407e0e57ed" kindref="member">blocks</ref>().<ref refid="classShaderBlockTable_1a208a9d0ca182b150a9183de1d3d14f6a" kindref="member">findBlock</ref>(s.name[i]-&gt;text);</highlight></codeline>
<codeline lineno="1190"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!b)</highlight></codeline>
<codeline lineno="1191"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="shErrorReporting_8h_1a634f6d6ca9a9f22c5eea4c9b8e20ef31" kindref="member">report_error</ref>(<ref refid="classShaderParser_1_1AssembleShaderEvalCB_1afabaa52e0ea25f004960aacc342b3c84" kindref="member">parser</ref>,<sp/>s.name[i],<sp/></highlight><highlight class="stringliteral">&quot;can&apos;t<sp/>support<sp/>undefined<sp/>block<sp/>&lt;%s&gt;&quot;</highlight><highlight class="normal">,<sp/>s.name[i]-&gt;text);</highlight></codeline>
<codeline lineno="1193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1194"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1195"><highlight class="normal"></highlight></codeline>
<codeline lineno="1196"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>found<sp/>=<sp/>(b<sp/>==<sp/><ref refid="classShaderParser_1_1AssembleShaderEvalCB_1a9fce8bcafff541a352da46dc6bb3e441" kindref="member">shConst</ref>.<ref refid="structNamedConstBlock_1a0b41f4029f83c088e31ed2bdbfa5c956" kindref="member">globConstBlk</ref>);</highlight></codeline>
<codeline lineno="1197"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/><ref refid="classShaderParser_1_1AssembleShaderEvalCB_1a9fce8bcafff541a352da46dc6bb3e441" kindref="member">shConst</ref>.<ref refid="structNamedConstBlock_1ad28a319c4c4d3d6d500653d1fb7614d9" kindref="member">suppBlk</ref>.size();<sp/>j++)</highlight></codeline>
<codeline lineno="1198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classShaderParser_1_1AssembleShaderEvalCB_1a9fce8bcafff541a352da46dc6bb3e441" kindref="member">shConst</ref>.<ref refid="structNamedConstBlock_1ad28a319c4c4d3d6d500653d1fb7614d9" kindref="member">suppBlk</ref>[j]<sp/>==<sp/>b)</highlight></codeline>
<codeline lineno="1199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>found<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1203"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(found)</highlight></codeline>
<codeline lineno="1204"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="shErrorReporting_8h_1a634f6d6ca9a9f22c5eea4c9b8e20ef31" kindref="member">report_error</ref>(<ref refid="classShaderParser_1_1AssembleShaderEvalCB_1afabaa52e0ea25f004960aacc342b3c84" kindref="member">parser</ref>,<sp/>s.name[i],<sp/></highlight><highlight class="stringliteral">&quot;double<sp/>support<sp/>for<sp/>block<sp/>&lt;%s&gt;&quot;</highlight><highlight class="normal">,<sp/>s.name[i]-&gt;text);</highlight></codeline>
<codeline lineno="1206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1207"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1208"><highlight class="normal"></highlight></codeline>
<codeline lineno="1209"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(b-&gt;<ref refid="classShaderStateBlock_1a73af07c28d4a043e224c03b4dfe891cf" kindref="member">layerLevel</ref><sp/>&lt;<sp/><ref refid="namedConst_8h_1a8df4796c58d0d8445eaf37bb57425b6caa05d35337eb28027e70aef2ea40ff1df" kindref="member">ShaderBlockLevel::SHADER</ref><sp/>&amp;&amp;<sp/>!b-&gt;<ref refid="classShaderStateBlock_1ad2b6797f32084d28c04e1c6be57cd17f" kindref="member">canBeSupportedBy</ref>(<ref refid="classShaderParser_1_1AssembleShaderEvalCB_1a3058e4d1c01fc25c4a62bf0e150fe6ca" kindref="member">ctx</ref>.<ref refid="classshc_1_1VariantContext_1a1cd6c96432c33d5741b597ad37709583" kindref="member">shCtx</ref>().<ref refid="classshc_1_1ShaderContext_1a6290b6c1649dfc5f77d7fd395ed9854f" kindref="member">blockLevel</ref>()))</highlight></codeline>
<codeline lineno="1210"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="shErrorReporting_8h_1a634f6d6ca9a9f22c5eea4c9b8e20ef31" kindref="member">report_error</ref>(<ref refid="classShaderParser_1_1AssembleShaderEvalCB_1afabaa52e0ea25f004960aacc342b3c84" kindref="member">parser</ref>,<sp/>s.name[i],<sp/></highlight><highlight class="stringliteral">&quot;block<sp/>&lt;%s&gt;,<sp/>layer<sp/>%d,<sp/>cannot<sp/>be<sp/>supported<sp/>here&quot;</highlight><highlight class="normal">,<sp/>s.name[i]-&gt;text,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">(b-&gt;<ref refid="classShaderStateBlock_1a73af07c28d4a043e224c03b4dfe891cf" kindref="member">layerLevel</ref>));</highlight></codeline>
<codeline lineno="1212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1213"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1214"><highlight class="normal"></highlight></codeline>
<codeline lineno="1215"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(b-&gt;<ref refid="classShaderStateBlock_1ae5f9acfd14a6cfe151e09ca904f4805c" kindref="member">shConst</ref>.<ref refid="structNamedConstBlock_1a86f9ccf5deda6624677bd710d8b1dd64" kindref="member">multidrawCbuf</ref>)</highlight></codeline>
<codeline lineno="1216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classShaderParser_1_1AssembleShaderEvalCB_1a9fce8bcafff541a352da46dc6bb3e441" kindref="member">shConst</ref>.<ref refid="structNamedConstBlock_1a86f9ccf5deda6624677bd710d8b1dd64" kindref="member">multidrawCbuf</ref><sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1217"><highlight class="normal"></highlight></codeline>
<codeline lineno="1218"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(b-&gt;<ref refid="classShaderStateBlock_1a73af07c28d4a043e224c03b4dfe891cf" kindref="member">layerLevel</ref><sp/>==<sp/><ref refid="namedConst_8h_1a8df4796c58d0d8445eaf37bb57425b6cad898411bc00251ab145d6c0d5971f3ab" kindref="member">ShaderBlockLevel::GLOBAL_CONST</ref>)</highlight></codeline>
<codeline lineno="1219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classShaderParser_1_1AssembleShaderEvalCB_1a9fce8bcafff541a352da46dc6bb3e441" kindref="member">shConst</ref>.<ref refid="structNamedConstBlock_1a0b41f4029f83c088e31ed2bdbfa5c956" kindref="member">globConstBlk</ref><sp/>=<sp/>b;</highlight></codeline>
<codeline lineno="1220"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1221"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1222"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="hlslRegisters_8h_1a802c347459e530a935ebdc2ea2672422" kindref="member">for_each_hlsl_reg_space</ref>([</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>b](<ref refid="hlslRegisters_8h_1aa3a591153956a0cd6630e2d20870fb9b" kindref="member">HlslRegisterSpace</ref><sp/>space)<sp/>{</highlight></codeline>
<codeline lineno="1223"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>vr<sp/>=<sp/><ref refid="classShaderParser_1_1AssembleShaderEvalCB_1a9fce8bcafff541a352da46dc6bb3e441" kindref="member">shConst</ref>.<ref refid="structNamedConstBlock_1a6efd609ff10279c10300fca36972f50c" kindref="member">vertexRegAllocators</ref>[space].reserveAllFrom(b-&gt;<ref refid="classShaderStateBlock_1ae5f9acfd14a6cfe151e09ca904f4805c" kindref="member">shConst</ref>.<ref refid="structNamedConstBlock_1a6efd609ff10279c10300fca36972f50c" kindref="member">vertexRegAllocators</ref>[space]);</highlight></codeline>
<codeline lineno="1224"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>pcr<sp/>=<sp/><ref refid="classShaderParser_1_1AssembleShaderEvalCB_1a9fce8bcafff541a352da46dc6bb3e441" kindref="member">shConst</ref>.<ref refid="structNamedConstBlock_1a72e11e05584df7e760fd2722129578c7" kindref="member">pixelOrComputeRegAllocators</ref>[space].reserveAllFrom(b-&gt;<ref refid="classShaderStateBlock_1ae5f9acfd14a6cfe151e09ca904f4805c" kindref="member">shConst</ref>.<ref refid="structNamedConstBlock_1a72e11e05584df7e760fd2722129578c7" kindref="member">pixelOrComputeRegAllocators</ref>[space]);</highlight></codeline>
<codeline lineno="1225"><highlight class="normal"></highlight></codeline>
<codeline lineno="1226"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>reportFailure<sp/>=<sp/>[</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>b,<sp/>space](ShaderStage<sp/>stage)<sp/>{</highlight></codeline>
<codeline lineno="1227"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>propsField<sp/>=<sp/>stage<sp/>==<sp/>STAGE_VS<sp/>?<sp/>&amp;<ref refid="structNamedConstBlock_1af5d785154eb652eb976e9db509a5331f" kindref="member">NamedConstBlock::vertexProps</ref><sp/>:<sp/>&amp;<ref refid="structNamedConstBlock_1af2982e411fef8f5bf02905031cac0bda" kindref="member">NamedConstBlock::pixelProps</ref>;</highlight></codeline>
<codeline lineno="1228"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>regAllocsField<sp/>=</highlight></codeline>
<codeline lineno="1229"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stage<sp/>==<sp/>STAGE_VS<sp/>?<sp/>&amp;<ref refid="structNamedConstBlock_1a6efd609ff10279c10300fca36972f50c" kindref="member">NamedConstBlock::vertexRegAllocators</ref><sp/>:<sp/>&amp;<ref refid="structNamedConstBlock_1a72e11e05584df7e760fd2722129578c7" kindref="member">NamedConstBlock::pixelOrComputeRegAllocators</ref>;</highlight></codeline>
<codeline lineno="1230"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>errorMsg<sp/>=<sp/><ref refid="commonUtils_8h_1a423a5cbb08af4695251ec87aa21a5fe1" kindref="member">string_f</ref>(</highlight><highlight class="stringliteral">&quot;Supported<sp/>blk<sp/>registers<sp/>overlap<sp/>at<sp/>space<sp/>%c<sp/>for<sp/>%s<sp/>shader\n&quot;</highlight><highlight class="normal">,<sp/><ref refid="hlslRegisters_8h_1a917909bca1e293eb098449d6379e471c" kindref="member">HLSL_RSPACE_ALL_SYMBOLS</ref>[space],</highlight></codeline>
<codeline lineno="1231"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="const3d_8h_1a3abdba8616b59c9af5d39fdc5fe46d6b" kindref="member">SHADER_STAGE_NAMES</ref>[stage]);</highlight></codeline>
<codeline lineno="1232"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>errorMsg.append_sprintf(</highlight><highlight class="stringliteral">&quot;Trying<sp/>to<sp/>support<sp/>block<sp/>%s.<sp/>&quot;</highlight><highlight class="normal">,<sp/>b-&gt;<ref refid="classShaderStateBlock_1ad24cbadd146d234944b96fd320d43aad" kindref="member">name</ref>.c_str());</highlight></codeline>
<codeline lineno="1233"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>errorMsg<sp/>+=<sp/><ref refid="hlslRegisters_8h_1ac174b405cead4faedd2791ca1c8bbc1a" kindref="member">get_reg_alloc_dump</ref>((b-&gt;<ref refid="classShaderStateBlock_1ae5f9acfd14a6cfe151e09ca904f4805c" kindref="member">shConst</ref>.*regAllocsField)[stage],<sp/>space,<sp/>b-&gt;<ref refid="classShaderStateBlock_1ae5f9acfd14a6cfe151e09ca904f4805c" kindref="member">shConst</ref>.<ref refid="structNamedConstBlock_1aa33304bd77fa74220b9ca8cafb0f9ffa" kindref="member">makeInfoProvider</ref>(propsField,<sp/>space));</highlight></codeline>
<codeline lineno="1234"><highlight class="normal"></highlight></codeline>
<codeline lineno="1235"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>errorMsg.append(</highlight><highlight class="stringliteral">&quot;\nConflicting<sp/>blocks:\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1236"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>eastl::vector_set&lt;const<sp/>ShaderStateBlock<sp/>*&gt;<sp/>conflictingBlocks{};</highlight></codeline>
<codeline lineno="1237"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>collectBlocks<sp/>=<sp/>[&amp;](</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structNamedConstBlock" kindref="compound">NamedConstBlock</ref><sp/>&amp;consts,<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;&amp;self)<sp/>-&gt;<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1238"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>processOneBlock<sp/>=<sp/>[&amp;](</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>*blk)<sp/>{</highlight></codeline>
<codeline lineno="1239"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>regalloc<sp/>=<sp/>(blk-&gt;shConst.*regAllocsField)[space];<sp/></highlight><highlight class="comment">//<sp/>Copy<sp/>out<sp/>to<sp/>simulate<sp/>collision</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1240"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>allocRes<sp/>=<sp/>regalloc.reserveAllFrom((b-&gt;<ref refid="classShaderStateBlock_1ae5f9acfd14a6cfe151e09ca904f4805c" kindref="member">shConst</ref>.*regAllocsField)[space]);<sp/>!allocRes)</highlight></codeline>
<codeline lineno="1241"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1242"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>conflictingBlocks.insert(blk);</highlight></codeline>
<codeline lineno="1243"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>errorMsg.append_sprintf(</highlight><highlight class="stringliteral">&quot;%s,<sp/>&quot;</highlight><highlight class="normal">,<sp/>blk-&gt;name.c_str());</highlight></codeline>
<codeline lineno="1244"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>errorMsg<sp/>+=</highlight></codeline>
<codeline lineno="1245"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="hlslRegisters_8h_1ac174b405cead4faedd2791ca1c8bbc1a" kindref="member">get_reg_alloc_dump</ref>((blk-&gt;shConst.*regAllocsField)[stage],<sp/>space,<sp/>blk-&gt;shConst.makeInfoProvider(propsField,<sp/>space));</highlight></codeline>
<codeline lineno="1246"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1247"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="1248"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;blk<sp/>:<sp/>consts.suppBlk)</highlight></codeline>
<codeline lineno="1249"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1250"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(conflictingBlocks.find(blk.get())<sp/>!=<sp/>conflictingBlocks.end())</highlight></codeline>
<codeline lineno="1251"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1252"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self(blk-&gt;shConst,<sp/>self);</highlight></codeline>
<codeline lineno="1253"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>processOneBlock(blk.get());</highlight></codeline>
<codeline lineno="1254"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1255"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(consts.<ref refid="structNamedConstBlock_1a0b41f4029f83c088e31ed2bdbfa5c956" kindref="member">globConstBlk</ref><sp/>&amp;&amp;<sp/>conflictingBlocks.find(consts.<ref refid="structNamedConstBlock_1a0b41f4029f83c088e31ed2bdbfa5c956" kindref="member">globConstBlk</ref>)<sp/>==<sp/>conflictingBlocks.end())</highlight></codeline>
<codeline lineno="1256"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1257"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self(consts.<ref refid="structNamedConstBlock_1a0b41f4029f83c088e31ed2bdbfa5c956" kindref="member">globConstBlk</ref>-&gt;<ref refid="classShaderStateBlock_1ae5f9acfd14a6cfe151e09ca904f4805c" kindref="member">shConst</ref>,<sp/>self);</highlight></codeline>
<codeline lineno="1258"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>processOneBlock(consts.<ref refid="structNamedConstBlock_1a0b41f4029f83c088e31ed2bdbfa5c956" kindref="member">globConstBlk</ref>);</highlight></codeline>
<codeline lineno="1259"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1260"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="1261"><highlight class="normal"></highlight></codeline>
<codeline lineno="1262"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>collectBlocks(<ref refid="classShaderParser_1_1AssembleShaderEvalCB_1a9fce8bcafff541a352da46dc6bb3e441" kindref="member">shConst</ref>,<sp/>collectBlocks);</highlight></codeline>
<codeline lineno="1263"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="1264"><highlight class="normal"></highlight></codeline>
<codeline lineno="1265"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!vr)</highlight></codeline>
<codeline lineno="1266"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>reportFailure(STAGE_VS);</highlight></codeline>
<codeline lineno="1267"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!pcr)</highlight></codeline>
<codeline lineno="1268"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>reportFailure(isCompute()<sp/>?<sp/>STAGE_CS<sp/>:<sp/>STAGE_PS);</highlight></codeline>
<codeline lineno="1269"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>});</highlight></codeline>
<codeline lineno="1270"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classShaderParser_1_1AssembleShaderEvalCB_1a9fce8bcafff541a352da46dc6bb3e441" kindref="member">shConst</ref>.<ref refid="structNamedConstBlock_1ad28a319c4c4d3d6d500653d1fb7614d9" kindref="member">suppBlk</ref>.push_back(b);</highlight></codeline>
<codeline lineno="1271"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1272"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1273"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1274"><highlight class="normal"></highlight></codeline>
<codeline lineno="1275"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classShaderParser_1_1AssembleShaderEvalCB_1ac2ae9bc248d946e895701b0ed15c3ed2" kindref="member">AssembleShaderEvalCB::eval_render_stage</ref>(render_stage_stat<sp/>&amp;s)</highlight></codeline>
<codeline lineno="1276"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1277"><highlight class="normal"><sp/><sp/>String<sp/>stage_nm;</highlight></codeline>
<codeline lineno="1278"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(s.name_s)</highlight></codeline>
<codeline lineno="1279"><highlight class="normal"><sp/><sp/><sp/><sp/>stage_nm.printf(0,<sp/></highlight><highlight class="stringliteral">&quot;%.*s&quot;</highlight><highlight class="normal">,<sp/>strlen(s.name_s-&gt;text)<sp/>-<sp/>2,<sp/>s.name_s-&gt;text<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="1280"><highlight class="normal"></highlight></codeline>
<codeline lineno="1281"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*nm<sp/>=<sp/>s.name<sp/>?<sp/>s.name-&gt;text<sp/>:<sp/>stage_nm;</highlight></codeline>
<codeline lineno="1282"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>idx<sp/>=<sp/><ref refid="namespaceShaderParser_1ab4b8a9d96a5cf3248e842617aa3fe8a7" kindref="member">renderStageToIdxMap</ref>.getNameId(nm);</highlight></codeline>
<codeline lineno="1283"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(idx<sp/>&lt;<sp/>0)</highlight></codeline>
<codeline lineno="1284"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="shErrorReporting_8h_1a634f6d6ca9a9f22c5eea4c9b8e20ef31" kindref="member">report_error</ref>(<ref refid="classShaderParser_1_1AssembleShaderEvalCB_1afabaa52e0ea25f004960aacc342b3c84" kindref="member">parser</ref>,<sp/>s.name,<sp/></highlight><highlight class="stringliteral">&quot;bad<sp/>renderStage<sp/>&lt;%s&gt;&quot;</highlight><highlight class="normal">,<sp/>nm);</highlight></codeline>
<codeline lineno="1285"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classShaderParser_1_1AssembleShaderEvalCB_1a2ba6fb52310a3ced7b31ede7fd8cbc8b" kindref="member">code</ref>.<ref refid="classShaderSemCode_1acbae3ddeaf15f11dbef5e0de44097ea0" kindref="member">renderStageIdx</ref><sp/>&lt;<sp/>0)</highlight></codeline>
<codeline lineno="1286"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1287"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classShaderParser_1_1AssembleShaderEvalCB_1a2ba6fb52310a3ced7b31ede7fd8cbc8b" kindref="member">code</ref>.<ref refid="classShaderSemCode_1acbae3ddeaf15f11dbef5e0de44097ea0" kindref="member">renderStageIdx</ref><sp/>=<sp/>idx;</highlight></codeline>
<codeline lineno="1288"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classShaderParser_1_1AssembleShaderEvalCB_1a2ba6fb52310a3ced7b31ede7fd8cbc8b" kindref="member">code</ref>.<ref refid="classShaderSemCode_1ac5254af5ecdf0f52e2d648e94a90d2e8" kindref="member">flags</ref><sp/>=<sp/>(idx<sp/>&amp;<sp/>SC_STAGE_IDX_MASK)<sp/>|<sp/>(<ref refid="classShaderParser_1_1AssembleShaderEvalCB_1a2ba6fb52310a3ced7b31ede7fd8cbc8b" kindref="member">code</ref>.<ref refid="classShaderSemCode_1ac5254af5ecdf0f52e2d648e94a90d2e8" kindref="member">flags</ref><sp/>&amp;<sp/>~SC_STAGE_IDX_MASK);</highlight></codeline>
<codeline lineno="1289"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classShaderParser_1_1AssembleShaderEvalCB_1a2ba6fb52310a3ced7b31ede7fd8cbc8b" kindref="member">code</ref>.<ref refid="classShaderSemCode_1acbae3ddeaf15f11dbef5e0de44097ea0" kindref="member">renderStageIdx</ref>)</highlight></codeline>
<codeline lineno="1290"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classShaderParser_1_1AssembleShaderEvalCB_1a2ba6fb52310a3ced7b31ede7fd8cbc8b" kindref="member">code</ref>.<ref refid="classShaderSemCode_1ac5254af5ecdf0f52e2d648e94a90d2e8" kindref="member">flags</ref><sp/>|=<sp/>SC_NEW_STAGE_FMT;</highlight></codeline>
<codeline lineno="1291"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1292"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classShaderParser_1_1AssembleShaderEvalCB_1a2ba6fb52310a3ced7b31ede7fd8cbc8b" kindref="member">code</ref>.<ref refid="classShaderSemCode_1acbae3ddeaf15f11dbef5e0de44097ea0" kindref="member">renderStageIdx</ref><sp/>!=<sp/>idx)</highlight></codeline>
<codeline lineno="1293"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1294"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="shErrorReporting_8h_1a634f6d6ca9a9f22c5eea4c9b8e20ef31" kindref="member">report_error</ref>(<ref refid="classShaderParser_1_1AssembleShaderEvalCB_1afabaa52e0ea25f004960aacc342b3c84" kindref="member">parser</ref>,<sp/>s.name,<sp/></highlight><highlight class="stringliteral">&quot;renderStageIdx<sp/>tries<sp/>to<sp/>change<sp/>from<sp/>%d<sp/>(%s)<sp/>to<sp/>%d<sp/>(%s)&quot;</highlight><highlight class="normal">,<sp/><ref refid="classShaderParser_1_1AssembleShaderEvalCB_1a2ba6fb52310a3ced7b31ede7fd8cbc8b" kindref="member">code</ref>.<ref refid="classShaderSemCode_1acbae3ddeaf15f11dbef5e0de44097ea0" kindref="member">renderStageIdx</ref>,</highlight></codeline>
<codeline lineno="1295"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceShaderParser_1ab4b8a9d96a5cf3248e842617aa3fe8a7" kindref="member">renderStageToIdxMap</ref>.getName(<ref refid="classShaderParser_1_1AssembleShaderEvalCB_1a2ba6fb52310a3ced7b31ede7fd8cbc8b" kindref="member">code</ref>.<ref refid="classShaderSemCode_1acbae3ddeaf15f11dbef5e0de44097ea0" kindref="member">renderStageIdx</ref>),<sp/>idx,<sp/><ref refid="namespaceShaderParser_1ab4b8a9d96a5cf3248e842617aa3fe8a7" kindref="member">renderStageToIdxMap</ref>.getName(idx));</highlight></codeline>
<codeline lineno="1296"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1297"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1298"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classShaderParser_1_1AssembleShaderEvalCB_1a8bc58fb62ecbcc9971c041aa354c25ff" kindref="member">AssembleShaderEvalCB::eval_command</ref>(shader_directive<sp/>&amp;s)</highlight></codeline>
<codeline lineno="1299"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1300"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(s.command-&gt;num)</highlight></codeline>
<codeline lineno="1301"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1302"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>SHADER_TOKENS::SHTOK_no_ablend:<sp/><ref refid="classShaderParser_1_1AssembleShaderEvalCB_1afc3b519f4870906d37b91b0c43d9dd3d" kindref="member">curpass</ref>-&gt;<ref refid="structSemanticShaderPass_1afe3a630185f7c1448f9f50ac3a9108f5" kindref="member">force_noablend</ref><sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1303"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>SHADER_TOKENS::SHTOK_dont_render:</highlight></codeline>
<codeline lineno="1304"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classShaderParser_1_1AssembleShaderEvalCB_1a4c3cbc6db4d70ab44ab3c36ae1592827" kindref="member">dont_render</ref><sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1305"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>GsclStopProcessingException();</highlight></codeline>
<codeline lineno="1306"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1307"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>SHADER_TOKENS::SHTOK_no_dynstcode:<sp/><ref refid="classShaderParser_1_1AssembleShaderEvalCB_1a427ca9934008b70bad704563c42c617b" kindref="member">no_dynstcode</ref><sp/>=<sp/>s.command;<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1308"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>SHADER_TOKENS::SHTOK_render_trans:</highlight></codeline>
<codeline lineno="1309"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1310"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>idx<sp/>=<sp/><ref refid="namespaceShaderParser_1ab4b8a9d96a5cf3248e842617aa3fe8a7" kindref="member">renderStageToIdxMap</ref>.getNameId(</highlight><highlight class="stringliteral">&quot;trans&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1311"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(idx<sp/>&lt;<sp/>0)</highlight></codeline>
<codeline lineno="1312"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="shErrorReporting_8h_1a634f6d6ca9a9f22c5eea4c9b8e20ef31" kindref="member">report_error</ref>(<ref refid="classShaderParser_1_1AssembleShaderEvalCB_1afabaa52e0ea25f004960aacc342b3c84" kindref="member">parser</ref>,<sp/>s.command,<sp/></highlight><highlight class="stringliteral">&quot;bad<sp/>renderStage<sp/>&lt;%s&gt;&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;trans&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1313"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classShaderParser_1_1AssembleShaderEvalCB_1a2ba6fb52310a3ced7b31ede7fd8cbc8b" kindref="member">code</ref>.<ref refid="classShaderSemCode_1acbae3ddeaf15f11dbef5e0de44097ea0" kindref="member">renderStageIdx</ref><sp/>&lt;<sp/>0)</highlight></codeline>
<codeline lineno="1314"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1315"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classShaderParser_1_1AssembleShaderEvalCB_1a2ba6fb52310a3ced7b31ede7fd8cbc8b" kindref="member">code</ref>.<ref refid="classShaderSemCode_1acbae3ddeaf15f11dbef5e0de44097ea0" kindref="member">renderStageIdx</ref><sp/>=<sp/>idx;</highlight></codeline>
<codeline lineno="1316"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classShaderParser_1_1AssembleShaderEvalCB_1a2ba6fb52310a3ced7b31ede7fd8cbc8b" kindref="member">code</ref>.<ref refid="classShaderSemCode_1ac5254af5ecdf0f52e2d648e94a90d2e8" kindref="member">flags</ref><sp/>=<sp/>(idx<sp/>&amp;<sp/>SC_STAGE_IDX_MASK)<sp/>|<sp/>(<ref refid="classShaderParser_1_1AssembleShaderEvalCB_1a2ba6fb52310a3ced7b31ede7fd8cbc8b" kindref="member">code</ref>.<ref refid="classShaderSemCode_1ac5254af5ecdf0f52e2d648e94a90d2e8" kindref="member">flags</ref><sp/>&amp;<sp/>~SC_STAGE_IDX_MASK);</highlight></codeline>
<codeline lineno="1317"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classShaderParser_1_1AssembleShaderEvalCB_1a2ba6fb52310a3ced7b31ede7fd8cbc8b" kindref="member">code</ref>.<ref refid="classShaderSemCode_1ac5254af5ecdf0f52e2d648e94a90d2e8" kindref="member">flags</ref><sp/>|=<sp/>SC_NEW_STAGE_FMT;</highlight></codeline>
<codeline lineno="1318"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1319"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classShaderParser_1_1AssembleShaderEvalCB_1a2ba6fb52310a3ced7b31ede7fd8cbc8b" kindref="member">code</ref>.<ref refid="classShaderSemCode_1acbae3ddeaf15f11dbef5e0de44097ea0" kindref="member">renderStageIdx</ref><sp/>!=<sp/>idx)</highlight></codeline>
<codeline lineno="1320"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1321"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="shErrorReporting_8h_1a634f6d6ca9a9f22c5eea4c9b8e20ef31" kindref="member">report_error</ref>(<ref refid="classShaderParser_1_1AssembleShaderEvalCB_1afabaa52e0ea25f004960aacc342b3c84" kindref="member">parser</ref>,<sp/>s.command,<sp/></highlight><highlight class="stringliteral">&quot;renderStageIdx<sp/>tries<sp/>to<sp/>change<sp/>from<sp/>%d<sp/>(%s)<sp/>to<sp/>%d<sp/>(%s)&quot;</highlight><highlight class="normal">,<sp/><ref refid="classShaderParser_1_1AssembleShaderEvalCB_1a2ba6fb52310a3ced7b31ede7fd8cbc8b" kindref="member">code</ref>.<ref refid="classShaderSemCode_1acbae3ddeaf15f11dbef5e0de44097ea0" kindref="member">renderStageIdx</ref>,</highlight></codeline>
<codeline lineno="1322"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceShaderParser_1ab4b8a9d96a5cf3248e842617aa3fe8a7" kindref="member">renderStageToIdxMap</ref>.getName(<ref refid="classShaderParser_1_1AssembleShaderEvalCB_1a2ba6fb52310a3ced7b31ede7fd8cbc8b" kindref="member">code</ref>.<ref refid="classShaderSemCode_1acbae3ddeaf15f11dbef5e0de44097ea0" kindref="member">renderStageIdx</ref>),<sp/>idx,<sp/><ref refid="namespaceShaderParser_1ab4b8a9d96a5cf3248e842617aa3fe8a7" kindref="member">renderStageToIdxMap</ref>.getName(idx));</highlight></codeline>
<codeline lineno="1323"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1324"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1325"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1326"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:<sp/>G_ASSERT(0);</highlight></codeline>
<codeline lineno="1327"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1328"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1329"><highlight class="normal"></highlight></codeline>
<codeline lineno="1330"><highlight class="normal"></highlight><highlight class="comment">//<sp/>clang-format<sp/>off</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1331"><highlight class="normal"></highlight><highlight class="comment">//<sp/>clang-format<sp/>linearizes<sp/>this<sp/>function</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1332"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classShaderParser_1_1AssembleShaderEvalCB_1aba32b080ce1cb3cf207c3c19affa6fba" kindref="member">AssembleShaderEvalCB::eval_error_stat</ref>(error_stat<sp/>&amp;s)</highlight></codeline>
<codeline lineno="1333"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1334"><highlight class="normal"><sp/><sp/><ref refid="shErrorReporting_8h_1a634f6d6ca9a9f22c5eea4c9b8e20ef31" kindref="member">report_error</ref>(<ref refid="classShaderParser_1_1AssembleShaderEvalCB_1afabaa52e0ea25f004960aacc342b3c84" kindref="member">parser</ref>,<sp/>s.message,<sp/>s.message-&gt;text);</highlight></codeline>
<codeline lineno="1335"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1336"><highlight class="normal"></highlight><highlight class="comment">//<sp/>clang-format<sp/>on</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1337"><highlight class="normal"></highlight></codeline>
<codeline lineno="1338"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classShaderParser_1_1AssembleShaderEvalCB_1a7659036a957a8b26ecaa6c9b1e9d9b76" kindref="member">AssembleShaderEvalCB::compilePreshader</ref>()</highlight></codeline>
<codeline lineno="1339"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1340"><highlight class="normal"><sp/><sp/>G_ASSERT(<ref refid="classShaderParser_1_1AssembleShaderEvalCB_1a13773638b08aa98d58ad65a92533a4e8" kindref="member">stBytecodeAccum</ref>.<ref refid="structStcodeBytecodeAccumulator_1a0548df4771375aa02b7d292da657c62a" kindref="member">stcode</ref>.empty());</highlight></codeline>
<codeline lineno="1341"><highlight class="normal"><sp/><sp/>G_ASSERT(<ref refid="classShaderParser_1_1AssembleShaderEvalCB_1a13773638b08aa98d58ad65a92533a4e8" kindref="member">stBytecodeAccum</ref>.<ref refid="structStcodeBytecodeAccumulator_1a6398fb138d9b59883d7640a8533126f0" kindref="member">stblkcode</ref>.empty());</highlight></codeline>
<codeline lineno="1342"><highlight class="normal"><sp/><sp/>G_ASSERT(!<ref refid="classShaderParser_1_1AssembleShaderEvalCB_1ae6d873c03dd1eb2d1d3df5df90875819" kindref="member">stCppcodeAccum</ref>.<ref refid="structStcodePass_1afa8af3e7f8aeba50095318fbd536a0c4" kindref="member">cppStcode</ref>.<ref refid="structStcodeRoutine_1a27f002069a52afa2d7d73f73727455b4" kindref="member">hasCode</ref>());</highlight></codeline>
<codeline lineno="1343"><highlight class="normal"><sp/><sp/>G_ASSERT(!<ref refid="classShaderParser_1_1AssembleShaderEvalCB_1ae6d873c03dd1eb2d1d3df5df90875819" kindref="member">stCppcodeAccum</ref>.<ref refid="structStcodePass_1ab7862ff68f12bb13c123a66f608226a2" kindref="member">cppStblkcode</ref>.<ref refid="structStcodeRoutine_1a27f002069a52afa2d7d73f73727455b4" kindref="member">hasCode</ref>());</highlight></codeline>
<codeline lineno="1344"><highlight class="normal"></highlight></codeline>
<codeline lineno="1345"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Push<sp/>header<sp/>for<sp/>static<sp/>stcode<sp/>straight<sp/>away<sp/>to<sp/>avoid<sp/>push-front<sp/>copies</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1346"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Format:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1347"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>1:<sp/>SHCOD_STATIC_MULTIDRAW_BLOCK/SHCOD_STATIC_BLOCK,<sp/>#consts</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1348"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>2:<sp/>if<sp/>not<sp/>bindless:<sp/>vsTexBase<sp/>[8],<sp/>vsSamplerBase<sp/>[4],<sp/>vsTexCount<sp/>[4],<sp/>psTexBase<sp/>[8],<sp/>psSamplerBase<sp/>[4],<sp/>psTexCount<sp/>[4]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1349"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>else:<sp/>0,<sp/>0,<sp/>0,<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1350"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>needsStblkcodeHeader<sp/>=<sp/><ref refid="classShaderParser_1_1AssembleShaderEvalCB_1a3058e4d1c01fc25c4a62bf0e150fe6ca" kindref="member">ctx</ref>.<ref refid="classshc_1_1VariantContext_1a1cd6c96432c33d5741b597ad37709583" kindref="member">shCtx</ref>().<ref refid="classshc_1_1ShaderContext_1a6290b6c1649dfc5f77d7fd395ed9854f" kindref="member">blockLevel</ref>()<sp/>==<sp/><ref refid="namedConst_8h_1a8df4796c58d0d8445eaf37bb57425b6caa05d35337eb28027e70aef2ea40ff1df" kindref="member">ShaderBlockLevel::SHADER</ref><sp/>&amp;&amp;<sp/>!isCompute();</highlight></codeline>
<codeline lineno="1351"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(needsStblkcodeHeader)</highlight></codeline>
<codeline lineno="1352"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1353"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classShaderParser_1_1AssembleShaderEvalCB_1a13773638b08aa98d58ad65a92533a4e8" kindref="member">stBytecodeAccum</ref>.<ref refid="structStcodeBytecodeAccumulator_1a81e7776e1af220968a4c58f1ed27346d" kindref="member">push_stblkcode</ref>(shaderopcode::makeOp1(0,<sp/>0));</highlight></codeline>
<codeline lineno="1354"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classShaderParser_1_1AssembleShaderEvalCB_1a13773638b08aa98d58ad65a92533a4e8" kindref="member">stBytecodeAccum</ref>.<ref refid="structStcodeBytecodeAccumulator_1a81e7776e1af220968a4c58f1ed27346d" kindref="member">push_stblkcode</ref>(shaderopcode::makeData4(0,<sp/>0,<sp/>0,<sp/>0));</highlight></codeline>
<codeline lineno="1355"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1356"><highlight class="normal"></highlight></codeline>
<codeline lineno="1357"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Then,<sp/>process<sp/>hardcoded<sp/>preshader<sp/>stats<sp/>(to<sp/>be<sp/>able<sp/>to<sp/>allocate<sp/>around<sp/>them)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1358"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;s<sp/>:<sp/><ref refid="classShaderParser_1_1AssembleShaderEvalCB_1a83ff86702f67548a6b715f02e8ebecf6" kindref="member">preshaderHardcodedStats</ref>)</highlight></codeline>
<codeline lineno="1359"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classShaderParser_1_1AssembleShaderEvalCB_1a9f2c16d8833b79771315394b6abe5685" kindref="member">compile_external_block_stat</ref>(s);</highlight></codeline>
<codeline lineno="1360"><highlight class="normal"></highlight></codeline>
<codeline lineno="1361"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Then,<sp/>process<sp/>all<sp/>numeric<sp/>stats.<sp/>By<sp/>doing<sp/>them<sp/>first,<sp/>we<sp/>can<sp/>infer<sp/>whether<sp/>special<sp/>constbuffers<sp/>are<sp/>actually<sp/>required,<sp/>thus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1362"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>obtaining<sp/>all<sp/>the<sp/>info<sp/>needed<sp/>to<sp/>allocate<sp/>other<sp/>cbuffer<sp/>registers.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1363"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;s<sp/>:<sp/><ref refid="classShaderParser_1_1AssembleShaderEvalCB_1a14130d2479772469a8e6df8580f83c1a" kindref="member">preshaderScalarStats</ref>)</highlight></codeline>
<codeline lineno="1364"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1365"><highlight class="normal"><sp/><sp/><sp/><sp/>eastl::visit(</highlight></codeline>
<codeline lineno="1366"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>[</highlight><highlight class="keyword">this</highlight><highlight class="normal">](</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;&amp;s)<sp/>{</highlight></codeline>
<codeline lineno="1367"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>(eastl::is_same_v&lt;eastl::remove_reference_t&lt;</highlight><highlight class="keyword">decltype</highlight><highlight class="normal">(s)&gt;,<sp/>PreshaderStat&gt;)</highlight></codeline>
<codeline lineno="1368"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classShaderParser_1_1AssembleShaderEvalCB_1a5dc7b25816fae47cee7290147b0d4074" kindref="member">process_external_block_stat</ref>(s);</highlight></codeline>
<codeline lineno="1369"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1370"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classShaderParser_1_1AssembleShaderEvalCB_1a88b1d93ad602d078e0bd1a764309f6e7" kindref="member">process_shader_locdecl</ref>(*s);</highlight></codeline>
<codeline lineno="1371"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>},</highlight></codeline>
<codeline lineno="1372"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>s);</highlight></codeline>
<codeline lineno="1373"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1374"><highlight class="normal"></highlight></codeline>
<codeline lineno="1375"><highlight class="normal"><sp/><sp/><ref refid="classShaderParser_1_1AssembleShaderEvalCB_1a34667529acbb189246a907737c79f2dd" kindref="member">varMerger</ref>.<ref refid="structShaderParser_1_1VariablesMerger_1ad2e11edcf1bbad9c52da74741be55717" kindref="member">mergeAllVars</ref>(</highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1376"><highlight class="normal"></highlight></codeline>
<codeline lineno="1377"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Then,<sp/>if<sp/>bindless<sp/>is<sp/>used,<sp/>we<sp/>just<sp/>compile<sp/>the<sp/>stats<sp/>for<sp/>static<sp/>textures,<sp/>as<sp/>they<sp/>are<sp/>going<sp/>to<sp/>emit<sp/>uint2<sp/>elements<sp/>to<sp/>the<sp/>material</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1378"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>cbuf.<sp/>@TODO:<sp/>introduce<sp/>packing<sp/>with<sp/>other<sp/>material<sp/>consts.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1379"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(needsStblkcodeHeader)</highlight></codeline>
<codeline lineno="1380"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1381"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>@TODO:<sp/>validate<sp/>that<sp/>compute<sp/>stuff<sp/>does<sp/>NOT<sp/>need<sp/>an<sp/>stblkcode<sp/>header</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1382"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="namespaceshc_1a47efde6b3d493adbe2119a5593807d36" kindref="member">shc::config</ref>().<ref refid="structshc_1_1CompilerConfig_1a4b837b76cbc27d82052a7d67d8d138c1" kindref="member">enableBindless</ref>)</highlight></codeline>
<codeline lineno="1383"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1384"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;s<sp/>:<sp/><ref refid="classShaderParser_1_1AssembleShaderEvalCB_1a6ea7a67aa6b841f14f12d1b2e02759d6" kindref="member">preshaderStaticTextureStats</ref>)</highlight></codeline>
<codeline lineno="1385"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classShaderParser_1_1AssembleShaderEvalCB_1a5dc7b25816fae47cee7290147b0d4074" kindref="member">process_external_block_stat</ref>(s);</highlight></codeline>
<codeline lineno="1386"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1387"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Otherwise,<sp/>we<sp/>need<sp/>to<sp/>procure<sp/>a<sp/>contiguous<sp/>range<sp/>in<sp/>the<sp/>t<sp/>space<sp/>for<sp/>slot<sp/>textures<sp/>and<sp/>a<sp/>range<sp/>in<sp/>the<sp/>s<sp/>space<sp/>for<sp/>samplers</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1388"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1389"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1390"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static_assert</highlight><highlight class="normal">(STAGE_PS<sp/>&lt;<sp/>STAGE_VS<sp/>&amp;&amp;<sp/>STAGE_CS<sp/>&lt;<sp/>STAGE_VS);</highlight></codeline>
<codeline lineno="1391"><highlight class="normal"></highlight></codeline>
<codeline lineno="1392"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>fast_sort(<ref refid="classShaderParser_1_1AssembleShaderEvalCB_1a6ea7a67aa6b841f14f12d1b2e02759d6" kindref="member">preshaderStaticTextureStats</ref>,<sp/>[](</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>PreshaderStat<sp/>&amp;s1,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>PreshaderStat<sp/>&amp;s2)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>s1.stage<sp/>&lt;<sp/>s2.stage;<sp/>});</highlight></codeline>
<codeline lineno="1393"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>pivot<sp/>=<sp/>eastl::find_if(<ref refid="classShaderParser_1_1AssembleShaderEvalCB_1a6ea7a67aa6b841f14f12d1b2e02759d6" kindref="member">preshaderStaticTextureStats</ref>.begin(),<sp/><ref refid="classShaderParser_1_1AssembleShaderEvalCB_1a6ea7a67aa6b841f14f12d1b2e02759d6" kindref="member">preshaderStaticTextureStats</ref>.end(),</highlight></codeline>
<codeline lineno="1394"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[](</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>PreshaderStat<sp/>&amp;s)<sp/>{<sp/>return<sp/>s.stage<sp/>==<sp/>STAGE_VS;<sp/>});</highlight></codeline>
<codeline lineno="1395"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>dag::Span&lt;PreshaderStat&gt;<sp/>psTexStats{<ref refid="classShaderParser_1_1AssembleShaderEvalCB_1a6ea7a67aa6b841f14f12d1b2e02759d6" kindref="member">preshaderStaticTextureStats</ref>.begin(),<sp/>pivot<sp/>-<sp/><ref refid="classShaderParser_1_1AssembleShaderEvalCB_1a6ea7a67aa6b841f14f12d1b2e02759d6" kindref="member">preshaderStaticTextureStats</ref>.begin()},</highlight></codeline>
<codeline lineno="1396"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vsTexStats{pivot,<sp/><ref refid="classShaderParser_1_1AssembleShaderEvalCB_1a6ea7a67aa6b841f14f12d1b2e02759d6" kindref="member">preshaderStaticTextureStats</ref>.end()<sp/>-<sp/>pivot};</highlight></codeline>
<codeline lineno="1397"><highlight class="normal"></highlight></codeline>
<codeline lineno="1398"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint32_t<sp/>vsRangeExtent<sp/>=<sp/>uint32_t{vsTexStats.size()};</highlight></codeline>
<codeline lineno="1399"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint32_t<sp/>psRangeExtent<sp/>=<sp/>uint32_t{psTexStats.size()};</highlight></codeline>
<codeline lineno="1400"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>G_ASSERT(vsRangeExtent<sp/>&lt;<sp/>(1<sp/>&lt;&lt;<sp/>4));</highlight></codeline>
<codeline lineno="1401"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>G_ASSERT(psRangeExtent<sp/>&lt;<sp/>(1<sp/>&lt;&lt;<sp/>4));</highlight></codeline>
<codeline lineno="1402"><highlight class="normal"></highlight></codeline>
<codeline lineno="1403"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="classShaderParser_1_1AssembleShaderEvalCB_1a9fce8bcafff541a352da46dc6bb3e441" kindref="member">shConst</ref>.<ref refid="structNamedConstBlock_1a634916d1d120d2df52b9c06556502874" kindref="member">initSlotTextureSuballocators</ref>(vsRangeExtent,<sp/>psRangeExtent))</highlight></codeline>
<codeline lineno="1404"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1405"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="shLog_8cpp_1a2926179632c7c86265007652d3d30b14" kindref="member">sh_debug</ref>(<ref refid="shLog_8h_1a66042048eb3ce30a1dccb2ebf8c2fd5caae3b70b41400c8a36e8a094ac1dbe43c" kindref="member">SHLOG_ERROR</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>allocate<sp/>%d<sp/>vs<sp/>static<sp/>texture<sp/>range<sp/>and<sp/>%d<sp/>ps<sp/>static<sp/>texture<sp/>range&quot;</highlight><highlight class="normal">,<sp/>vsRangeExtent,</highlight></codeline>
<codeline lineno="1406"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>psRangeExtent);</highlight></codeline>
<codeline lineno="1407"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1408"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1409"><highlight class="normal"></highlight></codeline>
<codeline lineno="1410"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;s<sp/>:<sp/><ref refid="classShaderParser_1_1AssembleShaderEvalCB_1a6ea7a67aa6b841f14f12d1b2e02759d6" kindref="member">preshaderStaticTextureStats</ref>)</highlight></codeline>
<codeline lineno="1411"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classShaderParser_1_1AssembleShaderEvalCB_1a9f2c16d8833b79771315394b6abe5685" kindref="member">compile_external_block_stat</ref>(s);</highlight></codeline>
<codeline lineno="1412"><highlight class="normal"></highlight></codeline>
<codeline lineno="1413"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>[vsTexRangeBase,<sp/>_1]<sp/>=<sp/><ref refid="classShaderParser_1_1AssembleShaderEvalCB_1a9fce8bcafff541a352da46dc6bb3e441" kindref="member">shConst</ref>.<ref refid="structNamedConstBlock_1ae6281d37edf661ab1ee8f1728c34dd54" kindref="member">slotTextureSuballocators</ref>.<ref refid="structNamedConstBlock_1_1SlotTextureSubAllocators_1a30b6c56968292c9d25ddd2425bf6a707" kindref="member">vsTex</ref>.<ref refid="classHlslRegAllocator_1af6f2fc8f858abd7ecdeaa771294f823a" kindref="member">getRange</ref>();</highlight></codeline>
<codeline lineno="1414"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>[psTexRangeBase,<sp/>_2]<sp/>=<sp/><ref refid="classShaderParser_1_1AssembleShaderEvalCB_1a9fce8bcafff541a352da46dc6bb3e441" kindref="member">shConst</ref>.<ref refid="structNamedConstBlock_1ae6281d37edf661ab1ee8f1728c34dd54" kindref="member">slotTextureSuballocators</ref>.<ref refid="structNamedConstBlock_1_1SlotTextureSubAllocators_1a29602deff0108cbe4897f27f3f77cd35" kindref="member">psTex</ref>.<ref refid="classHlslRegAllocator_1af6f2fc8f858abd7ecdeaa771294f823a" kindref="member">getRange</ref>();</highlight></codeline>
<codeline lineno="1415"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>[vsSamplerRangeBase,<sp/>_3]<sp/>=<sp/><ref refid="classShaderParser_1_1AssembleShaderEvalCB_1a9fce8bcafff541a352da46dc6bb3e441" kindref="member">shConst</ref>.<ref refid="structNamedConstBlock_1ae6281d37edf661ab1ee8f1728c34dd54" kindref="member">slotTextureSuballocators</ref>.<ref refid="structNamedConstBlock_1_1SlotTextureSubAllocators_1a52d8054a14fa2623c76bc66cbf44ab79" kindref="member">vsSamplers</ref>.<ref refid="classHlslRegAllocator_1af6f2fc8f858abd7ecdeaa771294f823a" kindref="member">getRange</ref>();</highlight></codeline>
<codeline lineno="1416"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>[psSamplerRangeBase,<sp/>_4]<sp/>=<sp/><ref refid="classShaderParser_1_1AssembleShaderEvalCB_1a9fce8bcafff541a352da46dc6bb3e441" kindref="member">shConst</ref>.<ref refid="structNamedConstBlock_1ae6281d37edf661ab1ee8f1728c34dd54" kindref="member">slotTextureSuballocators</ref>.<ref refid="structNamedConstBlock_1_1SlotTextureSubAllocators_1ae1b3ccbc2b85ecaa582df27d143294a3" kindref="member">psSamplers</ref>.<ref refid="classHlslRegAllocator_1af6f2fc8f858abd7ecdeaa771294f823a" kindref="member">getRange</ref>();</highlight></codeline>
<codeline lineno="1417"><highlight class="normal"></highlight></codeline>
<codeline lineno="1418"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/>vsSamplerBaseAndExtentPacked<sp/>=<sp/>(uint8_t(vsSamplerRangeBase<sp/>&lt;&lt;<sp/>4))<sp/>|<sp/>(uint8_t(vsRangeExtent<sp/>&amp;<sp/>0xF));</highlight></codeline>
<codeline lineno="1419"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/>psSamplerBaseAndExtentPacked<sp/>=<sp/>(uint8_t(psSamplerRangeBase<sp/>&lt;&lt;<sp/>4))<sp/>|<sp/>(uint8_t(psRangeExtent<sp/>&amp;<sp/>0xF));</highlight></codeline>
<codeline lineno="1420"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classShaderParser_1_1AssembleShaderEvalCB_1a13773638b08aa98d58ad65a92533a4e8" kindref="member">stBytecodeAccum</ref>.<ref refid="structStcodeBytecodeAccumulator_1a6398fb138d9b59883d7640a8533126f0" kindref="member">stblkcode</ref>[1]<sp/>=</highlight></codeline>
<codeline lineno="1421"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>shaderopcode::makeData4(vsTexRangeBase,<sp/>vsSamplerBaseAndExtentPacked,<sp/>psTexRangeBase,<sp/>psSamplerBaseAndExtentPacked);</highlight></codeline>
<codeline lineno="1422"><highlight class="normal"></highlight></codeline>
<codeline lineno="1423"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classShaderParser_1_1AssembleShaderEvalCB_1afc3b519f4870906d37b91b0c43d9dd3d" kindref="member">curpass</ref>)</highlight></codeline>
<codeline lineno="1424"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1425"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classShaderParser_1_1AssembleShaderEvalCB_1afc3b519f4870906d37b91b0c43d9dd3d" kindref="member">curpass</ref>-&gt;<ref refid="structSemanticShaderPass_1a1e2a4969a9c01d5d8ec9a2732f297c7a" kindref="member">vsTexSmpRange</ref><sp/>=<sp/>SlotTexturesRangeInfo{uint8_t(vsTexRangeBase),<sp/>uint8_t(vsSamplerRangeBase),<sp/>uint8_t(vsRangeExtent)};</highlight></codeline>
<codeline lineno="1426"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classShaderParser_1_1AssembleShaderEvalCB_1afc3b519f4870906d37b91b0c43d9dd3d" kindref="member">curpass</ref>-&gt;<ref refid="structSemanticShaderPass_1adbd7751cbda4b402f3cf48ad98cfee85" kindref="member">psTexSmpRange</ref><sp/>=<sp/>SlotTexturesRangeInfo{uint8_t(psTexRangeBase),<sp/>uint8_t(psSamplerRangeBase),<sp/>uint8_t(psRangeExtent)};</highlight></codeline>
<codeline lineno="1427"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1428"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1429"><highlight class="normal"></highlight></codeline>
<codeline lineno="1430"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>[constBase,<sp/>constCap]<sp/>=<sp/><ref refid="classShaderParser_1_1AssembleShaderEvalCB_1a9fce8bcafff541a352da46dc6bb3e441" kindref="member">shConst</ref>.<ref refid="structNamedConstBlock_1a95442c1d7e1d362c78e8148db109a7b0" kindref="member">bufferedConstsRegAllocator</ref>.<ref refid="classHlslRegAllocator_1af6f2fc8f858abd7ecdeaa771294f823a" kindref="member">getRange</ref>();</highlight></codeline>
<codeline lineno="1431"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(constBase<sp/>&gt;<sp/>0)</highlight></codeline>
<codeline lineno="1432"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1433"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="shLog_8cpp_1a2926179632c7c86265007652d3d30b14" kindref="member">sh_debug</ref>(<ref refid="shLog_8h_1a66042048eb3ce30a1dccb2ebf8c2fd5caae3b70b41400c8a36e8a094ac1dbe43c" kindref="member">SHLOG_ERROR</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Invalid<sp/>allocation<sp/>of<sp/>material<sp/>cbuf<sp/>registers:<sp/>range<sp/>is<sp/>[%d,<sp/>%d),<sp/>but<sp/>it<sp/>must<sp/>begin<sp/>at<sp/>0&quot;</highlight><highlight class="normal">,<sp/>constBase,</highlight></codeline>
<codeline lineno="1434"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>constCap);</highlight></codeline>
<codeline lineno="1435"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1436"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1437"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>signOpcod<sp/>=<sp/><ref refid="classShaderParser_1_1AssembleShaderEvalCB_1a9fce8bcafff541a352da46dc6bb3e441" kindref="member">shConst</ref>.<ref refid="structNamedConstBlock_1a86f9ccf5deda6624677bd710d8b1dd64" kindref="member">multidrawCbuf</ref><sp/>?<sp/>SHCOD_STATIC_MULTIDRAW_BLOCK<sp/>:<sp/>SHCOD_STATIC_BLOCK;</highlight></codeline>
<codeline lineno="1438"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classShaderParser_1_1AssembleShaderEvalCB_1a13773638b08aa98d58ad65a92533a4e8" kindref="member">stBytecodeAccum</ref>.<ref refid="structStcodeBytecodeAccumulator_1a6398fb138d9b59883d7640a8533126f0" kindref="member">stblkcode</ref>[0]<sp/>=<sp/>shaderopcode::makeOp1(signOpcod,<sp/>constCap);</highlight></codeline>
<codeline lineno="1439"><highlight class="normal"></highlight></codeline>
<codeline lineno="1440"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classShaderParser_1_1AssembleShaderEvalCB_1a9fce8bcafff541a352da46dc6bb3e441" kindref="member">shConst</ref>.<ref refid="structNamedConstBlock_1a86f9ccf5deda6624677bd710d8b1dd64" kindref="member">multidrawCbuf</ref>)</highlight></codeline>
<codeline lineno="1441"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classShaderParser_1_1AssembleShaderEvalCB_1a3058e4d1c01fc25c4a62bf0e150fe6ca" kindref="member">ctx</ref>.<ref refid="classshc_1_1VariantContext_1a45351b6130235b4bde86f2fb2bac44fe" kindref="member">cppStcode</ref>().cppStblkcode.reportMutlidrawSupport();</highlight></codeline>
<codeline lineno="1442"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1443"><highlight class="normal"></highlight></codeline>
<codeline lineno="1444"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Now,<sp/>based<sp/>on<sp/>gathered<sp/>consts<sp/>we<sp/>reserve<sp/>slots<sp/>for<sp/>cbuf-s<sp/>that<sp/>will<sp/>hold<sp/>them</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1445"><highlight class="normal"></highlight></codeline>
<codeline lineno="1446"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Concervatively<sp/>reserve<sp/>0<sp/>for<sp/>implicit<sp/>cbuf<sp/>(as<sp/>it<sp/>may<sp/>be<sp/>used<sp/>via<sp/>hlsl-hardcoded<sp/>regs)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1447"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>@TODO:<sp/>try<sp/>and<sp/>collect<sp/>hardcoded<sp/>regs<sp/>from<sp/>parsed<sp/>code<sp/>blocks<sp/>to<sp/>factor<sp/>them<sp/>into<sp/>the<sp/>allocators</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1448"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classShaderParser_1_1AssembleShaderEvalCB_1a3058e4d1c01fc25c4a62bf0e150fe6ca" kindref="member">ctx</ref>.<ref refid="classshc_1_1VariantContext_1a1cd6c96432c33d5741b597ad37709583" kindref="member">shCtx</ref>().<ref refid="classshc_1_1ShaderContext_1a6290b6c1649dfc5f77d7fd395ed9854f" kindref="member">blockLevel</ref>()<sp/>!=<sp/><ref refid="namedConst_8h_1a8df4796c58d0d8445eaf37bb57425b6cad898411bc00251ab145d6c0d5971f3ab" kindref="member">ShaderBlockLevel::GLOBAL_CONST</ref>)</highlight></codeline>
<codeline lineno="1449"><highlight class="normal"><sp/><sp/><sp/><sp/>reserveSpecialCbufferAt(<ref refid="hlslRegisters_8h_1affe2e38eb7f3eb318b7e3b88697f8a42aff97b218ef108a694dfa86cdb1a816f8" kindref="member">HlslSlotSemantic::RESERVED_FOR_IMPLICIT_CONST_CBUF</ref>,<sp/>0);</highlight></codeline>
<codeline lineno="1450"><highlight class="normal"></highlight></codeline>
<codeline lineno="1451"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Then,<sp/>reserve<sp/>material<sp/>const<sp/>buf<sp/>if<sp/>we<sp/>have<sp/>static<sp/>consts<sp/>(or<sp/>remove<sp/>reservation<sp/>if<sp/>we<sp/>don&apos;t)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1452"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classShaderParser_1_1AssembleShaderEvalCB_1a3058e4d1c01fc25c4a62bf0e150fe6ca" kindref="member">ctx</ref>.<ref refid="classshc_1_1VariantContext_1a1cd6c96432c33d5741b597ad37709583" kindref="member">shCtx</ref>().<ref refid="classshc_1_1ShaderContext_1a6290b6c1649dfc5f77d7fd395ed9854f" kindref="member">blockLevel</ref>()<sp/>==<sp/><ref refid="namedConst_8h_1a8df4796c58d0d8445eaf37bb57425b6caa05d35337eb28027e70aef2ea40ff1df" kindref="member">ShaderBlockLevel::SHADER</ref>)<sp/></highlight><highlight class="comment">//<sp/>static<sp/>cbuf<sp/>is<sp/>only<sp/>used<sp/>by<sp/>shaders,<sp/>not<sp/>blocks</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1453"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1454"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classShaderParser_1_1AssembleShaderEvalCB_1a9fce8bcafff541a352da46dc6bb3e441" kindref="member">shConst</ref>.<ref refid="structNamedConstBlock_1a95442c1d7e1d362c78e8148db109a7b0" kindref="member">bufferedConstsRegAllocator</ref>.<ref refid="classHlslRegAllocator_1a964d2f652f250019bdd65c09d8ccf81c" kindref="member">hasRegs</ref>())</highlight></codeline>
<codeline lineno="1455"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1456"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>G_ASSERT(!isCompute());</highlight></codeline>
<codeline lineno="1457"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>reserveSpecialCbufferAt(<ref refid="hlslRegisters_8h_1affe2e38eb7f3eb318b7e3b88697f8a42afa1a5e2ec35e986f5eb459ef29647b1a" kindref="member">HlslSlotSemantic::RESERVED_FOR_MATERIAL_PARAMS_CBUF</ref>,<sp/><ref refid="const3d_8h_1ae98ca1b68b1fb921348785a7694ed12c" kindref="member">MATERIAL_PARAMS_CONST_BUF_REGISTER</ref>);</highlight></codeline>
<codeline lineno="1458"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1459"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1460"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1461"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>there<sp/>are<sp/>no<sp/>regs<sp/>to<sp/>fill,<sp/>but<sp/>support<sp/>blocks<sp/>declared<sp/>supp<sp/>__static_cbuf,<sp/>we<sp/>unreserve</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1462"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>G_VERIFY(<ref refid="classShaderParser_1_1AssembleShaderEvalCB_1a9fce8bcafff541a352da46dc6bb3e441" kindref="member">shConst</ref>.<ref refid="structNamedConstBlock_1a6efd609ff10279c10300fca36972f50c" kindref="member">vertexRegAllocators</ref>[<ref refid="hlslRegisters_8h_1aa3a591153956a0cd6630e2d20870fb9ba4cd052468cc61d0e1fc36dfbea99f7ba" kindref="member">HLSL_RSPACE_B</ref>].unreserveIfUsed(<ref refid="hlslRegisters_8h_1affe2e38eb7f3eb318b7e3b88697f8a42afa1a5e2ec35e986f5eb459ef29647b1a" kindref="member">HlslSlotSemantic::RESERVED_FOR_MATERIAL_PARAMS_CBUF</ref>,</highlight></codeline>
<codeline lineno="1463"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="const3d_8h_1ae98ca1b68b1fb921348785a7694ed12c" kindref="member">MATERIAL_PARAMS_CONST_BUF_REGISTER</ref>));</highlight></codeline>
<codeline lineno="1464"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>G_VERIFY(<ref refid="classShaderParser_1_1AssembleShaderEvalCB_1a9fce8bcafff541a352da46dc6bb3e441" kindref="member">shConst</ref>.<ref refid="structNamedConstBlock_1a72e11e05584df7e760fd2722129578c7" kindref="member">pixelOrComputeRegAllocators</ref>[<ref refid="hlslRegisters_8h_1aa3a591153956a0cd6630e2d20870fb9ba4cd052468cc61d0e1fc36dfbea99f7ba" kindref="member">HLSL_RSPACE_B</ref>].unreserveIfUsed(<ref refid="hlslRegisters_8h_1affe2e38eb7f3eb318b7e3b88697f8a42afa1a5e2ec35e986f5eb459ef29647b1a" kindref="member">HlslSlotSemantic::RESERVED_FOR_MATERIAL_PARAMS_CBUF</ref>,</highlight></codeline>
<codeline lineno="1465"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="const3d_8h_1ae98ca1b68b1fb921348785a7694ed12c" kindref="member">MATERIAL_PARAMS_CONST_BUF_REGISTER</ref>));</highlight></codeline>
<codeline lineno="1466"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1467"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1468"><highlight class="normal"></highlight></codeline>
<codeline lineno="1469"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Reserve<sp/>special<sp/>global<sp/>consts<sp/>block<sp/>slot<sp/>if<sp/>such<sp/>a<sp/>block<sp/>was<sp/>declared</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1470"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>@TODO:<sp/>find<sp/>out<sp/>the<sp/>reason<sp/>why<sp/>just<sp/>checking<sp/>supp<sp/>blks<sp/>is<sp/>not<sp/>enough<sp/>(this<sp/>was<sp/>how<sp/>it<sp/>was<sp/>done<sp/>before<sp/>too)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1471"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classShaderParser_1_1AssembleShaderEvalCB_1a3058e4d1c01fc25c4a62bf0e150fe6ca" kindref="member">ctx</ref>.<ref refid="classshc_1_1VariantContext_1a02952e27d2d5e304daad76b11cb1f4ad" kindref="member">tgtCtx</ref>().<ref refid="classshc_1_1TargetContext_1a29da580ffb2850a459e34b407e0e57ed" kindref="member">blocks</ref>().<ref refid="classShaderBlockTable_1a4450c0258b8f233e2ab12aeb91abb676" kindref="member">countBlock</ref>(<ref refid="namedConst_8h_1a8df4796c58d0d8445eaf37bb57425b6cad898411bc00251ab145d6c0d5971f3ab" kindref="member">ShaderBlockLevel::GLOBAL_CONST</ref>)<sp/>&gt;<sp/>0)</highlight></codeline>
<codeline lineno="1472"><highlight class="normal"><sp/><sp/><sp/><sp/>reserveSpecialCbufferAt(<ref refid="hlslRegisters_8h_1affe2e38eb7f3eb318b7e3b88697f8a42afcf492f1625211cdff5cd89157422a93" kindref="member">HlslSlotSemantic::RESERVED_FOR_GLOBAL_CONST_CBUF</ref>,<sp/><ref refid="const3d_8h_1a516b3cf9a147c3a7f4b24934d36d3ef4" kindref="member">GLOBAL_CONST_BUF_REGISTER</ref>);</highlight></codeline>
<codeline lineno="1473"><highlight class="normal"></highlight></codeline>
<codeline lineno="1474"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Finally,<sp/>reservations<sp/>are<sp/>completed,<sp/>and<sp/>we<sp/>process<sp/>automatic<sp/>preshaders<sp/>decls<sp/>for<sp/>dynamic<sp/>resources</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1475"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>@TODO:<sp/>use<sp/>the<sp/>fact<sp/>that<sp/>we<sp/>know<sp/>these<sp/>to<sp/>be<sp/>dynamic<sp/>and<sp/>don&apos;t<sp/>recalculate</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1476"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;s<sp/>:<sp/><ref refid="classShaderParser_1_1AssembleShaderEvalCB_1a92a00236fa1ab932b4046af012d3799b" kindref="member">preshaderDynamicResourceStats</ref>)</highlight></codeline>
<codeline lineno="1477"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classShaderParser_1_1AssembleShaderEvalCB_1a5dc7b25816fae47cee7290147b0d4074" kindref="member">process_external_block_stat</ref>(s);</highlight></codeline>
<codeline lineno="1478"><highlight class="normal"></highlight></codeline>
<codeline lineno="1479"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>After<sp/>assebmling<sp/>everything,<sp/>do<sp/>validations<sp/>on<sp/>the<sp/>code<sp/>that<sp/>has<sp/>been<sp/>assembled</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1480"><highlight class="normal"><sp/><sp/>validateDynamicConstsForMultidraw();</highlight></codeline>
<codeline lineno="1481"><highlight class="normal"></highlight></codeline>
<codeline lineno="1482"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classShaderParser_1_1AssembleShaderEvalCB_1afc3b519f4870906d37b91b0c43d9dd3d" kindref="member">curpass</ref>)</highlight></codeline>
<codeline lineno="1483"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1484"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classShaderParser_1_1AssembleShaderEvalCB_1afc3b519f4870906d37b91b0c43d9dd3d" kindref="member">curpass</ref>-&gt;<ref refid="structSemanticShaderPass_1a0a93717959f273d97c583d31f37d93f4" kindref="member">psOrCsConstRange</ref><sp/>=<sp/><ref refid="classShaderParser_1_1AssembleShaderEvalCB_1a9fce8bcafff541a352da46dc6bb3e441" kindref="member">shConst</ref>.<ref refid="structNamedConstBlock_1a72e11e05584df7e760fd2722129578c7" kindref="member">pixelOrComputeRegAllocators</ref>[<ref refid="hlslRegisters_8h_1aa3a591153956a0cd6630e2d20870fb9bae4c03c06cbf9b4ae8c9407282006de68" kindref="member">HLSL_RSPACE_C</ref>].getRange(<ref refid="hlslRegisters_8h_1affe2e38eb7f3eb318b7e3b88697f8a42a3bd3560ef2b34fbdace988abac0bedc8" kindref="member">HlslSlotSemantic::ALLOCATED</ref>);</highlight></codeline>
<codeline lineno="1485"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classShaderParser_1_1AssembleShaderEvalCB_1afc3b519f4870906d37b91b0c43d9dd3d" kindref="member">curpass</ref>-&gt;<ref refid="structSemanticShaderPass_1a70495e6029e8dae0d7e1c59dcb31a17b" kindref="member">vsConstRange</ref><sp/>=<sp/><ref refid="classShaderParser_1_1AssembleShaderEvalCB_1a9fce8bcafff541a352da46dc6bb3e441" kindref="member">shConst</ref>.<ref refid="structNamedConstBlock_1a6efd609ff10279c10300fca36972f50c" kindref="member">vertexRegAllocators</ref>[<ref refid="hlslRegisters_8h_1aa3a591153956a0cd6630e2d20870fb9bae4c03c06cbf9b4ae8c9407282006de68" kindref="member">HLSL_RSPACE_C</ref>].getRange(<ref refid="hlslRegisters_8h_1affe2e38eb7f3eb318b7e3b88697f8a42a3bd3560ef2b34fbdace988abac0bedc8" kindref="member">HlslSlotSemantic::ALLOCATED</ref>);</highlight></codeline>
<codeline lineno="1486"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classShaderParser_1_1AssembleShaderEvalCB_1afc3b519f4870906d37b91b0c43d9dd3d" kindref="member">curpass</ref>-&gt;<ref refid="structSemanticShaderPass_1a30d5ae5be555e0ca2f008666c081bb00" kindref="member">bufferedConstRange</ref><sp/>=<sp/><ref refid="classShaderParser_1_1AssembleShaderEvalCB_1a9fce8bcafff541a352da46dc6bb3e441" kindref="member">shConst</ref>.<ref refid="structNamedConstBlock_1a95442c1d7e1d362c78e8148db109a7b0" kindref="member">bufferedConstsRegAllocator</ref>.<ref refid="classHlslRegAllocator_1af6f2fc8f858abd7ecdeaa771294f823a" kindref="member">getRange</ref>(<ref refid="hlslRegisters_8h_1affe2e38eb7f3eb318b7e3b88697f8a42a3bd3560ef2b34fbdace988abac0bedc8" kindref="member">HlslSlotSemantic::ALLOCATED</ref>);</highlight></codeline>
<codeline lineno="1487"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1488"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1489"><highlight class="normal"></highlight></codeline>
<codeline lineno="1490"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classShaderParser_1_1AssembleShaderEvalCB_1a177f4d3ae0d1f3a58d864ceb0df9f96e" kindref="member">AssembleShaderEvalCB::end_pass</ref>()</highlight></codeline>
<codeline lineno="1491"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1492"><highlight class="normal"><sp/><sp/>Terminal<sp/>*terminal<sp/>=<sp/><ref refid="classShaderParser_1_1AssembleShaderEvalCB_1a3058e4d1c01fc25c4a62bf0e150fe6ca" kindref="member">ctx</ref>.<ref refid="classshc_1_1VariantContext_1a1cd6c96432c33d5741b597ad37709583" kindref="member">shCtx</ref>().<ref refid="classshc_1_1ShaderContext_1a03a1d89a0bae981ff0cfb6915d0c817a" kindref="member">declTerm</ref>();</highlight></codeline>
<codeline lineno="1493"><highlight class="normal"></highlight></codeline>
<codeline lineno="1494"><highlight class="normal"><sp/><sp/><ref refid="structSemanticShaderPass" kindref="compound">SemanticShaderPass</ref><sp/>&amp;p<sp/>=<sp/>*<ref refid="classShaderParser_1_1AssembleShaderEvalCB_1afc3b519f4870906d37b91b0c43d9dd3d" kindref="member">curpass</ref>;</highlight></codeline>
<codeline lineno="1495"><highlight class="normal"></highlight></codeline>
<codeline lineno="1496"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>usesBlendFactor<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1497"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(uint32_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>shaders::RenderState::NumIndependentBlendParameters;<sp/>i++)</highlight></codeline>
<codeline lineno="1498"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1499"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(p.<ref refid="structSemanticShaderPass_1a7ddc29244ba230d69eb7475799d62090" kindref="member">blend_src</ref>[i]<sp/>*<sp/>p.<ref refid="structSemanticShaderPass_1a675a659d17bd94d8f8303752deddc5b2" kindref="member">blend_dst</ref>[i]<sp/>&lt;<sp/>0)</highlight></codeline>
<codeline lineno="1500"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="shErrorReporting_8h_1a634f6d6ca9a9f22c5eea4c9b8e20ef31" kindref="member">report_error</ref>(<ref refid="classShaderParser_1_1AssembleShaderEvalCB_1afabaa52e0ea25f004960aacc342b3c84" kindref="member">parser</ref>,<sp/>terminal,<sp/></highlight><highlight class="stringliteral">&quot;no<sp/>blend<sp/>src/dst<sp/>specified<sp/>for<sp/>attachement:<sp/>%d&quot;</highlight><highlight class="normal">,<sp/>i);</highlight></codeline>
<codeline lineno="1501"><highlight class="normal"></highlight></codeline>
<codeline lineno="1502"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(p.<ref refid="structSemanticShaderPass_1a7ddc29244ba230d69eb7475799d62090" kindref="member">blend_src</ref>[i]<sp/>==<sp/>DRV3DC::BLEND_BLENDFACTOR<sp/>||<sp/>p.<ref refid="structSemanticShaderPass_1a7ddc29244ba230d69eb7475799d62090" kindref="member">blend_src</ref>[i]<sp/>==<sp/>DRV3DC::BLEND_INVBLENDFACTOR<sp/>||</highlight></codeline>
<codeline lineno="1503"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p.<ref refid="structSemanticShaderPass_1a675a659d17bd94d8f8303752deddc5b2" kindref="member">blend_dst</ref>[i]<sp/>==<sp/>DRV3DC::BLEND_BLENDFACTOR<sp/>||<sp/>p.<ref refid="structSemanticShaderPass_1a675a659d17bd94d8f8303752deddc5b2" kindref="member">blend_dst</ref>[i]<sp/>==<sp/>DRV3DC::BLEND_INVBLENDFACTOR)</highlight></codeline>
<codeline lineno="1504"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1505"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>usesBlendFactor<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1506"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1507"><highlight class="normal"></highlight></codeline>
<codeline lineno="1508"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!p.<ref refid="structSemanticShaderPass_1afe3a630185f7c1448f9f50ac3a9108f5" kindref="member">force_noablend</ref>)</highlight></codeline>
<codeline lineno="1509"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1510"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(p.<ref refid="structSemanticShaderPass_1a69bc37ba9af5f2f50eb3202c11d9da5b" kindref="member">blend_asrc</ref>[i]<sp/>*<sp/>p.<ref refid="structSemanticShaderPass_1ab4e5c742d3d758b998dc8d58646ac019" kindref="member">blend_adst</ref>[i]<sp/>&lt;<sp/>0)</highlight></codeline>
<codeline lineno="1511"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="shErrorReporting_8h_1a634f6d6ca9a9f22c5eea4c9b8e20ef31" kindref="member">report_error</ref>(<ref refid="classShaderParser_1_1AssembleShaderEvalCB_1afabaa52e0ea25f004960aacc342b3c84" kindref="member">parser</ref>,<sp/>terminal,<sp/></highlight><highlight class="stringliteral">&quot;no<sp/>blend<sp/>asrc/adst<sp/>specified<sp/>for<sp/>attachement:<sp/>%d&quot;</highlight><highlight class="normal">,<sp/>i);</highlight></codeline>
<codeline lineno="1512"><highlight class="normal"></highlight></codeline>
<codeline lineno="1513"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(p.<ref refid="structSemanticShaderPass_1a69bc37ba9af5f2f50eb3202c11d9da5b" kindref="member">blend_asrc</ref>[i]<sp/>==<sp/>DRV3DC::BLEND_BLENDFACTOR<sp/>||<sp/>p.<ref refid="structSemanticShaderPass_1a69bc37ba9af5f2f50eb3202c11d9da5b" kindref="member">blend_asrc</ref>[i]<sp/>==<sp/>DRV3DC::BLEND_INVBLENDFACTOR<sp/>||</highlight></codeline>
<codeline lineno="1514"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p.<ref refid="structSemanticShaderPass_1ab4e5c742d3d758b998dc8d58646ac019" kindref="member">blend_adst</ref>[i]<sp/>==<sp/>DRV3DC::BLEND_BLENDFACTOR<sp/>||<sp/>p.<ref refid="structSemanticShaderPass_1ab4e5c742d3d758b998dc8d58646ac019" kindref="member">blend_adst</ref>[i]<sp/>==<sp/>DRV3DC::BLEND_INVBLENDFACTOR)</highlight></codeline>
<codeline lineno="1515"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1516"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>usesBlendFactor<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1517"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1518"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1519"><highlight class="normal"></highlight></codeline>
<codeline lineno="1520"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>https://learn.microsoft.com/en-us/windows/win32/direct3d11/d3d10-graphics-programming-guide-output-merger-stage</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1521"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>In<sp/>&apos;Dual-Source<sp/>Color<sp/>Blending&apos;<sp/>section:<sp/>Valid<sp/>blend<sp/>operations<sp/>include:<sp/>add,<sp/>subtract<sp/>and<sp/>revsubtract</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1522"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>(and<sp/>we<sp/>only<sp/>have<sp/>add/min/max).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1523"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(p.<ref refid="structSemanticShaderPass_1aba89d35638c7caa0e1c5967554c36304" kindref="member">dual_source_blending</ref><sp/>&amp;&amp;<sp/>p.<ref refid="structSemanticShaderPass_1a6c40dba0ddca2a26f062ae6ccefe32d7" kindref="member">blend_op</ref>[i]<sp/>!=<sp/>DRV3DC::BLENDOP_ADD)</highlight></codeline>
<codeline lineno="1524"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="shErrorReporting_8h_1a634f6d6ca9a9f22c5eea4c9b8e20ef31" kindref="member">report_error</ref>(<ref refid="classShaderParser_1_1AssembleShaderEvalCB_1afabaa52e0ea25f004960aacc342b3c84" kindref="member">parser</ref>,<sp/>terminal,<sp/></highlight><highlight class="stringliteral">&quot;dual<sp/>source<sp/>blending<sp/>(sc1/isc1/sa1/isa1)<sp/>only<sp/>supports<sp/>&apos;add&apos;<sp/>blend<sp/>operation&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1525"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1526"><highlight class="normal"></highlight></codeline>
<codeline lineno="1527"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(p.<ref refid="structSemanticShaderPass_1ad4ff83ab835a58805addbcca7492ebfe" kindref="member">independent_blending</ref><sp/>&amp;&amp;<sp/>p.<ref refid="structSemanticShaderPass_1aba89d35638c7caa0e1c5967554c36304" kindref="member">dual_source_blending</ref>)</highlight></codeline>
<codeline lineno="1528"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1529"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="shErrorReporting_8h_1a634f6d6ca9a9f22c5eea4c9b8e20ef31" kindref="member">report_error</ref>(<ref refid="classShaderParser_1_1AssembleShaderEvalCB_1afabaa52e0ea25f004960aacc342b3c84" kindref="member">parser</ref>,<sp/>terminal,</highlight></codeline>
<codeline lineno="1530"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;dual<sp/>source<sp/>blending<sp/>(sc1/isc1/sa1/isa1)<sp/>is<sp/>incompatible<sp/>with<sp/>independent<sp/>because<sp/>only<sp/>one<sp/>final<sp/>render<sp/>target<sp/>is<sp/>supported&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1531"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1532"><highlight class="normal"></highlight></codeline>
<codeline lineno="1533"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>_CROSS_TARGET_SPIRV</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1534"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(p.<ref refid="structSemanticShaderPass_1aba89d35638c7caa0e1c5967554c36304" kindref="member">dual_source_blending</ref>)</highlight></codeline>
<codeline lineno="1535"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1536"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="shErrorReporting_8h_1ab1481e3fe8354f93f6703076e615ee5e" kindref="member">report_debug_message</ref>(<ref refid="classShaderParser_1_1AssembleShaderEvalCB_1afabaa52e0ea25f004960aacc342b3c84" kindref="member">parser</ref>,<sp/>*terminal,</highlight></codeline>
<codeline lineno="1537"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;dual<sp/>source<sp/>blending<sp/>(sc1/isc1/sa1/isa1)<sp/>for<sp/>vulkan<sp/>is<sp/>not<sp/>supported<sp/>by<sp/>all<sp/>devices.<sp/>Be<sp/>sure<sp/>to<sp/>check<sp/>driver<sp/>caps<sp/>before<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1538"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;invoking<sp/>this<sp/>shader!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1539"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1540"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1541"><highlight class="normal"></highlight></codeline>
<codeline lineno="1542"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(usesBlendFactor<sp/>&amp;&amp;<sp/>!p.<ref refid="structSemanticShaderPass_1a96edda45ee81cf38bb81baeec422e2b9" kindref="member">blend_factor_specified</ref>)</highlight></codeline>
<codeline lineno="1543"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1544"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="shErrorReporting_8h_1ab1481e3fe8354f93f6703076e615ee5e" kindref="member">report_debug_message</ref>(<ref refid="classShaderParser_1_1AssembleShaderEvalCB_1afabaa52e0ea25f004960aacc342b3c84" kindref="member">parser</ref>,<sp/>*terminal,</highlight></codeline>
<codeline lineno="1545"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;WARNING:<sp/>blend<sp/>factor<sp/>blending<sp/>is<sp/>used<sp/>for<sp/>src/dst/asrc/adst<sp/>blending,<sp/>but<sp/>the<sp/>factor<sp/>is<sp/>not<sp/>specified.<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1546"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Make<sp/>sure<sp/>to<sp/>prepare<sp/>the<sp/>shader<sp/>invocation<sp/>with<sp/>a<sp/>call<sp/>to<sp/>d3d::set_blend_factor.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1547"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1548"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!usesBlendFactor<sp/>&amp;&amp;<sp/>p.<ref refid="structSemanticShaderPass_1a96edda45ee81cf38bb81baeec422e2b9" kindref="member">blend_factor_specified</ref>)</highlight></codeline>
<codeline lineno="1549"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1550"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="shErrorReporting_8h_1a634f6d6ca9a9f22c5eea4c9b8e20ef31" kindref="member">report_error</ref>(<ref refid="classShaderParser_1_1AssembleShaderEvalCB_1afabaa52e0ea25f004960aacc342b3c84" kindref="member">parser</ref>,<sp/>terminal,</highlight></codeline>
<codeline lineno="1551"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;blend_factor<sp/>was<sp/>specified,<sp/>but<sp/>the<sp/>blend<sp/>state<sp/>does<sp/>not<sp/>use<sp/>it.<sp/>Use<sp/>bf/ibf<sp/>to<sp/>use<sp/>blend<sp/>factor<sp/>for<sp/>blending.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1552"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1553"><highlight class="normal"></highlight></codeline>
<codeline lineno="1554"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(p.<ref refid="structSemanticShaderPass_1aa7e5cf7b15d913c7dd5d0297df99bc8f" kindref="member">cull_mode</ref><sp/>&lt;<sp/>0)</highlight></codeline>
<codeline lineno="1555"><highlight class="normal"><sp/><sp/><sp/><sp/>p.<ref refid="structSemanticShaderPass_1aa7e5cf7b15d913c7dd5d0297df99bc8f" kindref="member">cull_mode</ref><sp/>=<sp/>CULL_CCW;</highlight></codeline>
<codeline lineno="1556"><highlight class="normal"></highlight></codeline>
<codeline lineno="1557"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(p.<ref refid="structSemanticShaderPass_1a3dcbc5389573f47fcccad6dcce354c42" kindref="member">alpha_to_coverage</ref><sp/>&lt;<sp/>0)</highlight></codeline>
<codeline lineno="1558"><highlight class="normal"><sp/><sp/><sp/><sp/>p.<ref refid="structSemanticShaderPass_1a3dcbc5389573f47fcccad6dcce354c42" kindref="member">alpha_to_coverage</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1559"><highlight class="normal"></highlight></codeline>
<codeline lineno="1560"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(p.<ref refid="structSemanticShaderPass_1a3fcdfe39fe1ec4994be0ccd1b7018e6a" kindref="member">view_instances</ref><sp/>&lt;<sp/>0)</highlight></codeline>
<codeline lineno="1561"><highlight class="normal"><sp/><sp/><sp/><sp/>p.<ref refid="structSemanticShaderPass_1a3fcdfe39fe1ec4994be0ccd1b7018e6a" kindref="member">view_instances</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1562"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(p.<ref refid="structSemanticShaderPass_1a3fcdfe39fe1ec4994be0ccd1b7018e6a" kindref="member">view_instances</ref><sp/>&gt;<sp/>0)</highlight></codeline>
<codeline lineno="1563"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1564"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>!_CROSS_TARGET_DX12<sp/>&amp;&amp;<sp/>!_CROSS_TARGET_C2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1565"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="shErrorReporting_8h_1a634f6d6ca9a9f22c5eea4c9b8e20ef31" kindref="member">report_error</ref>(<ref refid="classShaderParser_1_1AssembleShaderEvalCB_1afabaa52e0ea25f004960aacc342b3c84" kindref="member">parser</ref>,<sp/>terminal,<sp/></highlight><highlight class="stringliteral">&quot;View<sp/>instances<sp/>are<sp/>only<sp/>supported<sp/>on<sp/>DX12<sp/>and<sp/>PS5<sp/>for<sp/>now!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1566"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1567"><highlight class="normal"></highlight></codeline>
<codeline lineno="1568"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>_CROSS_TARGET_DX12</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1569"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(p.<ref refid="structSemanticShaderPass_1a3fcdfe39fe1ec4994be0ccd1b7018e6a" kindref="member">view_instances</ref><sp/>&gt;<sp/>3)</highlight></codeline>
<codeline lineno="1570"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="shErrorReporting_8h_1a634f6d6ca9a9f22c5eea4c9b8e20ef31" kindref="member">report_error</ref>(<ref refid="classShaderParser_1_1AssembleShaderEvalCB_1afabaa52e0ea25f004960aacc342b3c84" kindref="member">parser</ref>,<sp/>terminal,<sp/></highlight><highlight class="stringliteral">&quot;There<sp/>can<sp/>be<sp/>a<sp/>maximum<sp/>of<sp/>4<sp/>view<sp/>instances<sp/>with<sp/>DX12!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1571"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>_CROSS_TARGET_C2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1572"><highlight class="normal"></highlight></codeline>
<codeline lineno="1573"><highlight class="normal"></highlight></codeline>
<codeline lineno="1574"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1575"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1576"><highlight class="normal"></highlight></codeline>
<codeline lineno="1577"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(p.<ref refid="structSemanticShaderPass_1adc658424eab012dc9714430d63be6a1f" kindref="member">z_write</ref><sp/>&lt;<sp/>0)</highlight></codeline>
<codeline lineno="1578"><highlight class="normal"><sp/><sp/><sp/><sp/>p.<ref refid="structSemanticShaderPass_1adc658424eab012dc9714430d63be6a1f" kindref="member">z_write</ref><sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="1579"><highlight class="normal"></highlight></codeline>
<codeline lineno="1580"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(p.<ref refid="structSemanticShaderPass_1ab0bf024e5d47d170324896dce4762b99" kindref="member">z_test</ref><sp/>&lt;<sp/>0)</highlight></codeline>
<codeline lineno="1581"><highlight class="normal"><sp/><sp/><sp/><sp/>p.<ref refid="structSemanticShaderPass_1ab0bf024e5d47d170324896dce4762b99" kindref="member">z_test</ref><sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="1582"><highlight class="normal"></highlight></codeline>
<codeline lineno="1583"><highlight class="normal"><sp/><sp/>p.<ref refid="structSemanticShaderPass_1a9ab702fa03a317c3124275ecda1289a9" kindref="member">z_bias</ref><sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1584"><highlight class="normal"></highlight></codeline>
<codeline lineno="1585"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!p.<ref refid="structSemanticShaderPass_1ad6663916487140d0dba2b427eef126cf" kindref="member">slope_z_bias</ref>)</highlight></codeline>
<codeline lineno="1586"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1587"><highlight class="normal"><sp/><sp/><sp/><sp/>p.<ref refid="structSemanticShaderPass_1ad6663916487140d0dba2b427eef126cf" kindref="member">slope_z_bias</ref><sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1588"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classShaderParser_1_1AssembleShaderEvalCB_1a13773638b08aa98d58ad65a92533a4e8" kindref="member">stBytecodeAccum</ref>.<ref refid="structStcodeBytecodeAccumulator_1a81e7776e1af220968a4c58f1ed27346d" kindref="member">push_stblkcode</ref>(shaderopcode::makeOp2_8_16(SHCOD_IMM_REAL1,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">(<ref refid="classShaderParser_1_1AssembleShaderEvalCB_1a13773638b08aa98d58ad65a92533a4e8" kindref="member">stBytecodeAccum</ref>.<ref refid="structStcodeBytecodeAccumulator_1ad0f379ff1b62a2277340b6ea463b345d" kindref="member">regAllocator</ref>-&gt;add_reg()),<sp/>0));</highlight></codeline>
<codeline lineno="1589"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1590"><highlight class="normal"></highlight></codeline>
<codeline lineno="1591"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>accept<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1592"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="classShaderParser_1_1AssembleShaderEvalCB_1a4c3cbc6db4d70ab44ab3c36ae1592827" kindref="member">dont_render</ref>)</highlight></codeline>
<codeline lineno="1593"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1594"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classShaderParser_1_1AssembleShaderEvalCB_1a6860b6f93232191e96b1ccada7510d8d" kindref="member">hlsls</ref>.forEach([&amp;accept](HlslCompile<sp/>&amp;comp)<sp/>{<sp/>accept<sp/>|=<sp/>comp.hasCompilation();<sp/>});</highlight></codeline>
<codeline lineno="1595"><highlight class="normal"></highlight></codeline>
<codeline lineno="1596"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!accept)<sp/></highlight><highlight class="comment">//<sp/>if<sp/>the<sp/>shader<sp/>has<sp/>no<sp/>compile<sp/>directives,<sp/>treat<sp/>it<sp/>as<sp/>implicit<sp/>dont_render<sp/>w/<sp/>a<sp/>breadcrumb<sp/>to<sp/>debug<sp/>log</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1597"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1598"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="shLog_8cpp_1a2926179632c7c86265007652d3d30b14" kindref="member">sh_debug</ref>(<ref refid="shLog_8h_1a66042048eb3ce30a1dccb2ebf8c2fd5ca0012c8acb382f295fe614046a64bba11" kindref="member">SHLOG_INFO</ref>,<sp/></highlight><highlight class="stringliteral">&quot;WARNING:<sp/>a<sp/>pass<sp/>doesn&apos;t<sp/>contain<sp/>compile<sp/>directives,<sp/>but<sp/>is<sp/>not<sp/>explicitly<sp/>marked<sp/>as<sp/>dont_render.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1599"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classShaderParser_1_1AssembleShaderEvalCB_1a4c3cbc6db4d70ab44ab3c36ae1592827" kindref="member">dont_render</ref><sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1600"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1601"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1602"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*shname<sp/>=<sp/><ref refid="classShaderParser_1_1AssembleShaderEvalCB_1a3058e4d1c01fc25c4a62bf0e150fe6ca" kindref="member">ctx</ref>.<ref refid="classshc_1_1VariantContext_1a1cd6c96432c33d5741b597ad37709583" kindref="member">shCtx</ref>().<ref refid="classshc_1_1ShaderContext_1a62fb814941038645a59c2668a3b01e45" kindref="member">name</ref>();</highlight></codeline>
<codeline lineno="1603"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(accept)</highlight></codeline>
<codeline lineno="1604"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1605"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classShaderParser_1_1AssembleShaderEvalCB_1a5f188611e0ec12c9ca4259dcc5ec1be5" kindref="member">curvariant</ref>-&gt;<ref refid="structShaderSemCode_1_1PassTab_1ab1dcfc9dcecf5b96d07bb11c38570f86" kindref="member">suppBlk</ref>.resize(<ref refid="classShaderParser_1_1AssembleShaderEvalCB_1a9fce8bcafff541a352da46dc6bb3e441" kindref="member">shConst</ref>.<ref refid="structNamedConstBlock_1ad28a319c4c4d3d6d500653d1fb7614d9" kindref="member">suppBlk</ref>.size());</highlight></codeline>
<codeline lineno="1606"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/><ref refid="classShaderParser_1_1AssembleShaderEvalCB_1a9fce8bcafff541a352da46dc6bb3e441" kindref="member">shConst</ref>.<ref refid="structNamedConstBlock_1ad28a319c4c4d3d6d500653d1fb7614d9" kindref="member">suppBlk</ref>.size();<sp/>i++)</highlight></codeline>
<codeline lineno="1607"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classShaderParser_1_1AssembleShaderEvalCB_1a5f188611e0ec12c9ca4259dcc5ec1be5" kindref="member">curvariant</ref>-&gt;<ref refid="structShaderSemCode_1_1PassTab_1ab1dcfc9dcecf5b96d07bb11c38570f86" kindref="member">suppBlk</ref>[i]<sp/>=<sp/><ref refid="classShaderParser_1_1AssembleShaderEvalCB_1a9fce8bcafff541a352da46dc6bb3e441" kindref="member">shConst</ref>.<ref refid="structNamedConstBlock_1ad28a319c4c4d3d6d500653d1fb7614d9" kindref="member">suppBlk</ref>[i];</highlight></codeline>
<codeline lineno="1608"><highlight class="normal"></highlight></codeline>
<codeline lineno="1609"><highlight class="normal"></highlight></codeline>
<codeline lineno="1610"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(isCompute())</highlight></codeline>
<codeline lineno="1611"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1612"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(isGraphics()<sp/>||<sp/>isMesh())</highlight></codeline>
<codeline lineno="1613"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1614"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="shErrorReporting_8h_1a634f6d6ca9a9f22c5eea4c9b8e20ef31" kindref="member">report_error</ref>(<ref refid="classShaderParser_1_1AssembleShaderEvalCB_1afabaa52e0ea25f004960aacc342b3c84" kindref="member">parser</ref>,<sp/>terminal,<sp/></highlight><highlight class="stringliteral">&quot;%s:<sp/>compute<sp/>shader<sp/>is<sp/>not<sp/>combineable<sp/>with<sp/>VS/HS/DS/GS/MS/AS/PS&quot;</highlight><highlight class="normal">,<sp/>shname);</highlight></codeline>
<codeline lineno="1615"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>accept<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1616"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>end;</highlight></codeline>
<codeline lineno="1617"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1618"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1619"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(isMesh())</highlight></codeline>
<codeline lineno="1620"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1621"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classShaderParser_1_1AssembleShaderEvalCB_1a6860b6f93232191e96b1ccada7510d8d" kindref="member">hlsls</ref>.fields.vs.hasCompilation()<sp/>||<sp/><ref refid="classShaderParser_1_1AssembleShaderEvalCB_1a6860b6f93232191e96b1ccada7510d8d" kindref="member">hlsls</ref>.fields.hs.hasCompilation()<sp/>||<sp/><ref refid="classShaderParser_1_1AssembleShaderEvalCB_1a6860b6f93232191e96b1ccada7510d8d" kindref="member">hlsls</ref>.fields.ds.hasCompilation()<sp/>||</highlight></codeline>
<codeline lineno="1622"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classShaderParser_1_1AssembleShaderEvalCB_1a6860b6f93232191e96b1ccada7510d8d" kindref="member">hlsls</ref>.fields.gs.hasCompilation())</highlight></codeline>
<codeline lineno="1623"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1624"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="shErrorReporting_8h_1a634f6d6ca9a9f22c5eea4c9b8e20ef31" kindref="member">report_error</ref>(<ref refid="classShaderParser_1_1AssembleShaderEvalCB_1afabaa52e0ea25f004960aacc342b3c84" kindref="member">parser</ref>,<sp/>terminal,<sp/></highlight><highlight class="stringliteral">&quot;%s:<sp/>mesh<sp/>shader<sp/>is<sp/>not<sp/>combineable<sp/>with<sp/>VS/HS/DS/GS&quot;</highlight><highlight class="normal">,<sp/>shname);</highlight></codeline>
<codeline lineno="1625"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>accept<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1626"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>end;</highlight></codeline>
<codeline lineno="1627"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1628"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1629"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classShaderParser_1_1AssembleShaderEvalCB_1a6860b6f93232191e96b1ccada7510d8d" kindref="member">hlsls</ref>.fields.as.hasCompilation())</highlight></codeline>
<codeline lineno="1630"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1631"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="classShaderParser_1_1AssembleShaderEvalCB_1a6860b6f93232191e96b1ccada7510d8d" kindref="member">hlsls</ref>.fields.ms.hasCompilation())</highlight></codeline>
<codeline lineno="1632"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1633"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="shErrorReporting_8h_1a634f6d6ca9a9f22c5eea4c9b8e20ef31" kindref="member">report_error</ref>(<ref refid="classShaderParser_1_1AssembleShaderEvalCB_1afabaa52e0ea25f004960aacc342b3c84" kindref="member">parser</ref>,<sp/>terminal,<sp/></highlight><highlight class="stringliteral">&quot;%s:<sp/>amplification<sp/>shader<sp/>needs<sp/>a<sp/>paired<sp/>mesh<sp/>shader&quot;</highlight><highlight class="normal">,<sp/>shname);</highlight></codeline>
<codeline lineno="1634"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>accept<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1635"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>end;</highlight></codeline>
<codeline lineno="1636"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1637"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1638"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((<ref refid="classShaderParser_1_1AssembleShaderEvalCB_1a6860b6f93232191e96b1ccada7510d8d" kindref="member">hlsls</ref>.fields.hs.hasCompilation()<sp/>||<sp/><ref refid="classShaderParser_1_1AssembleShaderEvalCB_1a6860b6f93232191e96b1ccada7510d8d" kindref="member">hlsls</ref>.fields.ds.hasCompilation())<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="1639"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>!(<ref refid="classShaderParser_1_1AssembleShaderEvalCB_1a6860b6f93232191e96b1ccada7510d8d" kindref="member">hlsls</ref>.fields.hs.hasCompilation()<sp/>&amp;&amp;<sp/><ref refid="classShaderParser_1_1AssembleShaderEvalCB_1a6860b6f93232191e96b1ccada7510d8d" kindref="member">hlsls</ref>.fields.ds.hasCompilation()))</highlight></codeline>
<codeline lineno="1640"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1641"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="shErrorReporting_8h_1a634f6d6ca9a9f22c5eea4c9b8e20ef31" kindref="member">report_error</ref>(<ref refid="classShaderParser_1_1AssembleShaderEvalCB_1afabaa52e0ea25f004960aacc342b3c84" kindref="member">parser</ref>,<sp/>terminal,<sp/></highlight><highlight class="stringliteral">&quot;%s:<sp/>incomplete<sp/>hull-tessellation/domain<sp/>shader<sp/>stage&quot;</highlight><highlight class="normal">,<sp/>shname);</highlight></codeline>
<codeline lineno="1642"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>accept<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1643"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>end;</highlight></codeline>
<codeline lineno="1644"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1645"><highlight class="normal"></highlight></codeline>
<codeline lineno="1646"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="hlslStage_8h_1a7f2e4e87bc7bcc49da79ea59b3934634" kindref="member">for_each_hlsl_stage</ref>([</highlight><highlight class="keyword">this</highlight><highlight class="normal">](<ref refid="hlslStage_8h_1a2c05326871fdf863346c90daec291c82" kindref="member">HlslCompilationStage</ref><sp/>stage)<sp/>{<sp/><ref refid="classShaderParser_1_1AssembleShaderEvalCB_1af4b1bf80be2b69362e8632392b14649f" kindref="member">hlsl_compile</ref>(stage);<sp/>});</highlight></codeline>
<codeline lineno="1647"><highlight class="normal"></highlight></codeline>
<codeline lineno="1648"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="structErrorCounter_1a16e83af848da6b273387e7f9078aff89" kindref="member">ErrorCounter::curShader</ref>().<ref refid="structErrorCounter_1ab283c399f4e862a8a02b0c684af1bc9b" kindref="member">err</ref><sp/>&gt;<sp/>0)</highlight></codeline>
<codeline lineno="1649"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1650"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="shLog_8cpp_1a1645d310ca3c7fe3e3dc882fb7962e9d" kindref="member">sh_process_errors</ref>();</highlight></codeline>
<codeline lineno="1651"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>accept<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1652"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>end;</highlight></codeline>
<codeline lineno="1653"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1654"><highlight class="normal"></highlight></codeline>
<codeline lineno="1655"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!isCompute())</highlight></codeline>
<codeline lineno="1656"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1657"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="classShaderParser_1_1AssembleShaderEvalCB_1afc3b519f4870906d37b91b0c43d9dd3d" kindref="member">curpass</ref>-&gt;<ref refid="structSemanticShaderPass_1acb62a27643b4702f2a0a4ae7b96b6b8b" kindref="member">fsh</ref>.data()<sp/>&amp;&amp;<sp/><ref refid="classShaderParser_1_1AssembleShaderEvalCB_1a6860b6f93232191e96b1ccada7510d8d" kindref="member">hlsls</ref>.fields.ps.hasCompilation())</highlight></codeline>
<codeline lineno="1658"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1659"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="shErrorReporting_8h_1a634f6d6ca9a9f22c5eea4c9b8e20ef31" kindref="member">report_error</ref>(<ref refid="classShaderParser_1_1AssembleShaderEvalCB_1afabaa52e0ea25f004960aacc342b3c84" kindref="member">parser</ref>,<sp/>terminal,<sp/></highlight><highlight class="stringliteral">&quot;%s:<sp/>missing<sp/>pixel<sp/>shader&quot;</highlight><highlight class="normal">,<sp/>shname);</highlight></codeline>
<codeline lineno="1660"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>accept<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1661"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1662"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="classShaderParser_1_1AssembleShaderEvalCB_1afc3b519f4870906d37b91b0c43d9dd3d" kindref="member">curpass</ref>-&gt;<ref refid="structSemanticShaderPass_1a4bd46214be93642551ae341082d9c150" kindref="member">vpr</ref>.data())</highlight></codeline>
<codeline lineno="1663"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1664"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="shErrorReporting_8h_1a634f6d6ca9a9f22c5eea4c9b8e20ef31" kindref="member">report_error</ref>(<ref refid="classShaderParser_1_1AssembleShaderEvalCB_1afabaa52e0ea25f004960aacc342b3c84" kindref="member">parser</ref>,<sp/>terminal,<sp/></highlight><highlight class="stringliteral">&quot;%s:<sp/>missing<sp/>vertex<sp/>shader&quot;</highlight><highlight class="normal">,<sp/>shname);</highlight></codeline>
<codeline lineno="1665"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>accept<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1666"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1667"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(accept<sp/>&amp;&amp;<sp/><ref refid="classShaderParser_1_1AssembleShaderEvalCB_1afc3b519f4870906d37b91b0c43d9dd3d" kindref="member">curpass</ref>-&gt;<ref refid="structSemanticShaderPass_1a1a76224b7f7f66632a9ac54cdbde7f46" kindref="member">ps30</ref><sp/>!=<sp/><ref refid="classShaderParser_1_1AssembleShaderEvalCB_1afc3b519f4870906d37b91b0c43d9dd3d" kindref="member">curpass</ref>-&gt;<ref refid="structSemanticShaderPass_1a04ae58c79551385255c790150847373e" kindref="member">vs30</ref><sp/>&amp;&amp;<sp/><ref refid="classShaderParser_1_1AssembleShaderEvalCB_1a6860b6f93232191e96b1ccada7510d8d" kindref="member">hlsls</ref>.fields.ps.hasCompilation())</highlight></codeline>
<codeline lineno="1668"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1669"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="shErrorReporting_8h_1a634f6d6ca9a9f22c5eea4c9b8e20ef31" kindref="member">report_error</ref>(<ref refid="classShaderParser_1_1AssembleShaderEvalCB_1afabaa52e0ea25f004960aacc342b3c84" kindref="member">parser</ref>,<sp/>terminal,<sp/></highlight><highlight class="stringliteral">&quot;%s:<sp/>PS/VS<sp/>3.0<sp/>mismatch:<sp/>vs30=%s<sp/>and<sp/>ps30=%s&quot;</highlight><highlight class="normal">,<sp/>shname,<sp/><ref refid="classShaderParser_1_1AssembleShaderEvalCB_1afc3b519f4870906d37b91b0c43d9dd3d" kindref="member">curpass</ref>-&gt;<ref refid="structSemanticShaderPass_1a04ae58c79551385255c790150847373e" kindref="member">vs30</ref><sp/>?<sp/></highlight><highlight class="stringliteral">&quot;yes&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;no&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1670"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classShaderParser_1_1AssembleShaderEvalCB_1afc3b519f4870906d37b91b0c43d9dd3d" kindref="member">curpass</ref>-&gt;ps30<sp/>?<sp/></highlight><highlight class="stringliteral">&quot;yes&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;no&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1671"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>accept<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1672"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1673"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1674"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1675"><highlight class="normal"></highlight></codeline>
<codeline lineno="1676"><highlight class="normal">end:</highlight></codeline>
<codeline lineno="1677"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(accept)</highlight></codeline>
<codeline lineno="1678"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1679"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceassembly_1ad3e505f51d3620ecfe672ffa1b7e9c99" kindref="member">assembly::build_cpp_declarations_for_used_local_vars</ref>(<ref refid="classShaderParser_1_1AssembleShaderEvalCB_1a3058e4d1c01fc25c4a62bf0e150fe6ca" kindref="member">ctx</ref>);</highlight></codeline>
<codeline lineno="1680"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;cache<sp/>=<sp/><ref refid="classShaderParser_1_1AssembleShaderEvalCB_1a3058e4d1c01fc25c4a62bf0e150fe6ca" kindref="member">ctx</ref>.<ref refid="classshc_1_1VariantContext_1a02952e27d2d5e304daad76b11cb1f4ad" kindref="member">tgtCtx</ref>().<ref refid="classshc_1_1TargetContext_1a5f070e84881b4d153dff671834fe7866" kindref="member">stcodeCache</ref>();</highlight></codeline>
<codeline lineno="1681"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>cacheRefs<sp/>=<sp/>cache.<ref refid="classStcodeBytecodeCache_1a3c2709681f13853105debfbff7177d0b" kindref="member">findOrPost</ref>(eastl::move(<ref refid="classShaderParser_1_1AssembleShaderEvalCB_1a3058e4d1c01fc25c4a62bf0e150fe6ca" kindref="member">ctx</ref>.<ref refid="classshc_1_1VariantContext_1a4d4c5240b72856d0eeaccfc5ae8d976f" kindref="member">stBytecode</ref>()));</highlight></codeline>
<codeline lineno="1682"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classShaderParser_1_1AssembleShaderEvalCB_1afc3b519f4870906d37b91b0c43d9dd3d" kindref="member">curpass</ref>-&gt;<ref refid="structSemanticShaderPass_1a3be6b5c08d771a3e5e57d89b08f9315d" kindref="member">stcode</ref><sp/>=<sp/>cacheRefs.stcode;</highlight></codeline>
<codeline lineno="1683"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classShaderParser_1_1AssembleShaderEvalCB_1afc3b519f4870906d37b91b0c43d9dd3d" kindref="member">curpass</ref>-&gt;<ref refid="structSemanticShaderPass_1a95cfbada8dc84fc6b43cc084c21ec41c" kindref="member">stblkcode</ref><sp/>=<sp/>cacheRefs.stblkcode;</highlight></codeline>
<codeline lineno="1684"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classShaderParser_1_1AssembleShaderEvalCB_1afc3b519f4870906d37b91b0c43d9dd3d" kindref="member">curpass</ref>-&gt;<ref refid="structSemanticShaderPass_1aa6d1866ac1ab96035a152f7cde16925e" kindref="member">cppstcode</ref><sp/>=<sp/>eastl::move(<ref refid="classShaderParser_1_1AssembleShaderEvalCB_1a3058e4d1c01fc25c4a62bf0e150fe6ca" kindref="member">ctx</ref>.<ref refid="classshc_1_1VariantContext_1a45351b6130235b4bde86f2fb2bac44fe" kindref="member">cppStcode</ref>());</highlight></codeline>
<codeline lineno="1685"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="namespaceshc_1a47efde6b3d493adbe2119a5593807d36" kindref="member">shc::config</ref>().cppStcodeMode<sp/>==<sp/>shader_layout::ExternalStcodeMode::BRANCHED_CPP)</highlight></codeline>
<codeline lineno="1686"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1687"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classShaderParser_1_1AssembleShaderEvalCB_1afc3b519f4870906d37b91b0c43d9dd3d" kindref="member">curpass</ref>-&gt;<ref refid="structSemanticShaderPass_1a7d7d388fa23d82e6986e5400093c4a17" kindref="member">constPackedVarsMaps</ref><sp/>=<sp/>eastl::move(<ref refid="classShaderParser_1_1AssembleShaderEvalCB_1a34667529acbb189246a907737c79f2dd" kindref="member">varMerger</ref>.<ref refid="structShaderParser_1_1VariablesMerger_1af8c33fc6e22fb27cf413376e6f0938d8" kindref="member">constVarsMaps</ref>);</highlight></codeline>
<codeline lineno="1688"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classShaderParser_1_1AssembleShaderEvalCB_1afc3b519f4870906d37b91b0c43d9dd3d" kindref="member">curpass</ref>-&gt;<ref refid="structSemanticShaderPass_1a5225fbd044d643fbea249c74b7acc8d3" kindref="member">bufferedPackedVarsMap</ref><sp/>=<sp/>eastl::move(<ref refid="classShaderParser_1_1AssembleShaderEvalCB_1a34667529acbb189246a907737c79f2dd" kindref="member">varMerger</ref>.<ref refid="structShaderParser_1_1VariablesMerger_1accceae9931a5f8e682e208a17583c699" kindref="member">bufferedVarsMap</ref>);</highlight></codeline>
<codeline lineno="1689"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classShaderParser_1_1AssembleShaderEvalCB_1afc3b519f4870906d37b91b0c43d9dd3d" kindref="member">curpass</ref>-&gt;<ref refid="structSemanticShaderPass_1ab03570130a7945edd74b4fca3b26c6cc" kindref="member">usedConstStatAstNodes</ref><sp/>=<sp/>eastl::move(<ref refid="classShaderParser_1_1AssembleShaderEvalCB_1aa0a30867edef6bbfacd9e7286672d2f2" kindref="member">usedPreshaderStatements</ref>);</highlight></codeline>
<codeline lineno="1690"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classShaderParser_1_1AssembleShaderEvalCB_1afc3b519f4870906d37b91b0c43d9dd3d" kindref="member">curpass</ref>-&gt;<ref refid="structSemanticShaderPass_1af8339973cd8d164abb08d2e783f80a77" kindref="member">boolAstNodesEvaluationResults</ref><sp/>=<sp/>eastl::move(<ref refid="classShaderParser_1_1AssembleShaderEvalCB_1a78718c8e3e4a81b09d11890c5d7f362b" kindref="member">boolElementsEvaluationResults</ref>);</highlight></codeline>
<codeline lineno="1691"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1692"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1693"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(accept<sp/>&amp;&amp;<sp/><ref refid="classShaderParser_1_1AssembleShaderEvalCB_1a427ca9934008b70bad704563c42c617b" kindref="member">no_dynstcode</ref><sp/>&amp;&amp;<sp/><ref refid="classShaderParser_1_1AssembleShaderEvalCB_1afc3b519f4870906d37b91b0c43d9dd3d" kindref="member">curpass</ref>-&gt;<ref refid="structSemanticShaderPass_1a3be6b5c08d771a3e5e57d89b08f9315d" kindref="member">stcode</ref>.size())</highlight></codeline>
<codeline lineno="1694"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1695"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="shErrorReporting_8h_1a634f6d6ca9a9f22c5eea4c9b8e20ef31" kindref="member">report_error</ref>(<ref refid="classShaderParser_1_1AssembleShaderEvalCB_1afabaa52e0ea25f004960aacc342b3c84" kindref="member">parser</ref>,<sp/><ref refid="classShaderParser_1_1AssembleShaderEvalCB_1a427ca9934008b70bad704563c42c617b" kindref="member">no_dynstcode</ref>,<sp/></highlight><highlight class="stringliteral">&quot;%s:<sp/>has<sp/>dynstcode,<sp/>while<sp/>it<sp/>was<sp/>required<sp/>to<sp/>have<sp/>none<sp/>with<sp/>no_dynstcode:&quot;</highlight><highlight class="normal">,<sp/>shname);</highlight></codeline>
<codeline lineno="1696"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(Terminal<sp/>*var<sp/>:<sp/><ref refid="classShaderParser_1_1AssembleShaderEvalCB_1ab9cab3d8f792289893c0ea004fb65110" kindref="member">stcode_vars</ref>)</highlight></codeline>
<codeline lineno="1697"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="shErrorReporting_8h_1a634f6d6ca9a9f22c5eea4c9b8e20ef31" kindref="member">report_error</ref>(<ref refid="classShaderParser_1_1AssembleShaderEvalCB_1afabaa52e0ea25f004960aacc342b3c84" kindref="member">parser</ref>,<sp/>var,<sp/></highlight><highlight class="stringliteral">&quot;&apos;%s&apos;&quot;</highlight><highlight class="normal">,<sp/>var-&gt;text);</highlight></codeline>
<codeline lineno="1698"><highlight class="normal"><sp/><sp/><sp/><sp/>debug(</highlight><highlight class="stringliteral">&quot;\n*******<sp/>State<sp/>code<sp/>shader<sp/>--s--&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1699"><highlight class="normal"><sp/><sp/><sp/><sp/>ShUtils::shcod_dump(<ref refid="classShaderParser_1_1AssembleShaderEvalCB_1afc3b519f4870906d37b91b0c43d9dd3d" kindref="member">curpass</ref>-&gt;<ref refid="structSemanticShaderPass_1a3be6b5c08d771a3e5e57d89b08f9315d" kindref="member">stcode</ref>,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);<sp/></highlight><highlight class="comment">//<sp/>todo:<sp/>we<sp/>need<sp/>variable<sp/>names!</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1700"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1701"><highlight class="normal"><sp/><sp/><ref refid="classShaderParser_1_1AssembleShaderEvalCB_1afc3b519f4870906d37b91b0c43d9dd3d" kindref="member">curpass</ref><sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1702"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1703"><highlight class="normal"></highlight></codeline>
<codeline lineno="1704"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>AssembleShaderEvalCB::validateDynamicConstsForMultidraw()</highlight></codeline>
<codeline lineno="1705"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1706"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="classShaderParser_1_1AssembleShaderEvalCB_1a9fce8bcafff541a352da46dc6bb3e441" kindref="member">shConst</ref>.<ref refid="structNamedConstBlock_1a86f9ccf5deda6624677bd710d8b1dd64" kindref="member">multidrawCbuf</ref>)</highlight></codeline>
<codeline lineno="1707"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1708"><highlight class="normal"></highlight></codeline>
<codeline lineno="1709"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classShaderParser_1_1AssembleShaderEvalCB_1a39ca44997c80a1fdda49317b73bc8151" kindref="member">hasDynStcodeRelyingOnMaterialParams</ref>)</highlight></codeline>
<codeline lineno="1710"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1711"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="shErrorReporting_8h_1a634f6d6ca9a9f22c5eea4c9b8e20ef31" kindref="member">report_error</ref>(<ref refid="classShaderParser_1_1AssembleShaderEvalCB_1afabaa52e0ea25f004960aacc342b3c84" kindref="member">parser</ref>,<sp/><ref refid="classShaderParser_1_1AssembleShaderEvalCB_1ab4b7f4890dc105b84683fbadd463351d" kindref="member">exprWithDynamicAndMaterialTerms</ref>,</highlight></codeline>
<codeline lineno="1712"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Encountered<sp/>both<sp/>static<sp/>and<sp/>dynamic<sp/>operands<sp/>in<sp/>an<sp/>stcode<sp/>expression!\n\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1713"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>With<sp/>bindless<sp/>enabled<sp/>this<sp/>can<sp/>break<sp/>multidraw,<sp/>as<sp/>dynstcode<sp/>is<sp/>run<sp/>once<sp/>per<sp/>combined<sp/>draw<sp/>call.\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1714"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>Consider<sp/>splitting<sp/>the<sp/>expression<sp/>into<sp/>separate<sp/>parts.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1715"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1716"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1717"><highlight class="normal"></highlight></codeline>
<codeline lineno="1718"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1719"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1720"><highlight class="normal"></highlight></codeline>
<codeline lineno="1721"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classShaderParser_1_1AssembleShaderEvalCB_1adaeffdf412eba643b05832b77de2f83c" kindref="member">AssembleShaderEvalCB::end_eval</ref>(shader_decl<sp/>&amp;sh)</highlight></codeline>
<codeline lineno="1722"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1723"><highlight class="normal"><sp/><sp/><ref refid="classShaderParser_1_1AssembleShaderEvalCB_1a7659036a957a8b26ecaa6c9b1e9d9b76" kindref="member">compilePreshader</ref>();</highlight></codeline>
<codeline lineno="1724"><highlight class="normal"><sp/><sp/><ref refid="classShaderParser_1_1AssembleShaderEvalCB_1a2ba6fb52310a3ced7b31ede7fd8cbc8b" kindref="member">code</ref>.<ref refid="classShaderSemCode_1af8edbdef53e3a9de78f27f09f1611ddd" kindref="member">regsize</ref><sp/>=<sp/><ref refid="classShaderParser_1_1AssembleShaderEvalCB_1a3058e4d1c01fc25c4a62bf0e150fe6ca" kindref="member">ctx</ref>.<ref refid="classshc_1_1VariantContext_1a4d4c5240b72856d0eeaccfc5ae8d976f" kindref="member">stBytecode</ref>().regAllocator-&gt;requiredRegCount();</highlight></codeline>
<codeline lineno="1725"><highlight class="normal"></highlight></codeline>
<codeline lineno="1726"><highlight class="normal"><sp/><sp/><ref refid="classShaderParser_1_1AssembleShaderEvalCB_1a6860b6f93232191e96b1ccada7510d8d" kindref="member">hlsls</ref>.forEach([</highlight><highlight class="keyword">this</highlight><highlight class="normal">](HlslCompile<sp/>&amp;comp)<sp/>{<sp/>evalHlslCompileClass(&amp;comp);<sp/>});</highlight></codeline>
<codeline lineno="1727"><highlight class="normal"><sp/><sp/><ref refid="classShaderParser_1_1AssembleShaderEvalCB_1a177f4d3ae0d1f3a58d864ceb0df9f96e" kindref="member">end_pass</ref>();</highlight></codeline>
<codeline lineno="1728"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1729"><highlight class="normal"></highlight></codeline>
<codeline lineno="1730"><highlight class="normal"></highlight></codeline>
<codeline lineno="1731"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classShaderParser_1_1AssembleShaderEvalCB_1a88b1d93ad602d078e0bd1a764309f6e7" kindref="member">AssembleShaderEvalCB::process_shader_locdecl</ref>(local_var_decl<sp/>&amp;s)</highlight></codeline>
<codeline lineno="1732"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1733"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>parseResMaybe<sp/>=<sp/><ref refid="namespacesemantic_1aa7d8cdb06eb014e4ae6ba3205f29b555" kindref="member">semantic::parse_local_var_decl</ref>(s,<sp/><ref refid="classShaderParser_1_1AssembleShaderEvalCB_1a3058e4d1c01fc25c4a62bf0e150fe6ca" kindref="member">ctx</ref>);</highlight></codeline>
<codeline lineno="1734"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!parseResMaybe)</highlight></codeline>
<codeline lineno="1735"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1736"><highlight class="normal"></highlight></codeline>
<codeline lineno="1737"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!parseResMaybe-&gt;var-&gt;isConst)</highlight></codeline>
<codeline lineno="1738"><highlight class="normal"><sp/><sp/><sp/><sp/>assembly::assemble_local_var&lt;assembly::StcodeBuildFlagsBits::ALL&gt;(parseResMaybe-&gt;var,<sp/>parseResMaybe-&gt;expr.get(),<sp/>s.name,<sp/><ref refid="classShaderParser_1_1AssembleShaderEvalCB_1a3058e4d1c01fc25c4a62bf0e150fe6ca" kindref="member">ctx</ref>);</highlight></codeline>
<codeline lineno="1739"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1740"><highlight class="normal"></highlight></codeline>
<codeline lineno="1741"><highlight class="normal"></highlight></codeline>
<codeline lineno="1742"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classShaderParser_1_1AssembleShaderEvalCB_1a000c2b52b77e52c55bf9f6c535f2983d" kindref="member">AssembleShaderEvalCB::eval_hlsl_compile</ref>(hlsl_compile_class<sp/>&amp;hlsl_compile)</highlight></codeline>
<codeline lineno="1743"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1744"><highlight class="normal"><sp/><sp/><ref refid="structsemantic_1_1HlslCompileClass" kindref="compound">semantic::HlslCompileClass</ref><sp/>compile<sp/>=<sp/><ref refid="namespacesemantic_1ac0a87d8d130643580eaf930d7536c42f" kindref="member">semantic::parse_hlsl_compilation_info</ref>(<ref refid="classShaderParser_1_1AssembleShaderEvalCB_1af4b1bf80be2b69362e8632392b14649f" kindref="member">hlsl_compile</ref>,<sp/><ref refid="classShaderParser_1_1AssembleShaderEvalCB_1afabaa52e0ea25f004960aacc342b3c84" kindref="member">parser</ref>,<sp/><ref refid="classShaderParser_1_1AssembleShaderEvalCB_1a3058e4d1c01fc25c4a62bf0e150fe6ca" kindref="member">ctx</ref>.<ref refid="classshc_1_1VariantContext_1a02952e27d2d5e304daad76b11cb1f4ad" kindref="member">tgtCtx</ref>().<ref refid="classshc_1_1TargetContext_1a72ea1e47e9286a2dfdf513c56e495712" kindref="member">compCtx</ref>());</highlight></codeline>
<codeline lineno="1745"><highlight class="normal"></highlight></codeline>
<codeline lineno="1746"><highlight class="normal"><sp/><sp/>HlslCompile<sp/>&amp;hlslXS<sp/>=<sp/><ref refid="classShaderParser_1_1AssembleShaderEvalCB_1a6860b6f93232191e96b1ccada7510d8d" kindref="member">hlsls</ref>.all[compile.<ref refid="structsemantic_1_1HlslCompileClass_1a56396c8ab24f1a2f799dba5562ef5f5b" kindref="member">stage</ref>];</highlight></codeline>
<codeline lineno="1747"><highlight class="normal"></highlight></codeline>
<codeline lineno="1748"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>*def<sp/>=<sp/>compile.<ref refid="structsemantic_1_1HlslCompileClass_1ab890a6f0fe04566163ac6b2745e7a5fb" kindref="member">tryGetDefaultTarget</ref>())</highlight></codeline>
<codeline lineno="1749"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1750"><highlight class="normal"><sp/><sp/><sp/><sp/>hlslXS.defaultTarget<sp/>=<sp/>eastl::move(def-&gt;target);</highlight></codeline>
<codeline lineno="1751"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1752"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1753"><highlight class="normal"></highlight></codeline>
<codeline lineno="1754"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(hlslXS.hasCompilation())</highlight></codeline>
<codeline lineno="1755"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1756"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="shErrorReporting_8h_1a634f6d6ca9a9f22c5eea4c9b8e20ef31" kindref="member">report_error</ref>(<ref refid="classShaderParser_1_1AssembleShaderEvalCB_1afabaa52e0ea25f004960aacc342b3c84" kindref="member">parser</ref>,<sp/><ref refid="classShaderParser_1_1AssembleShaderEvalCB_1af4b1bf80be2b69362e8632392b14649f" kindref="member">hlsl_compile</ref>.profile,<sp/></highlight><highlight class="stringliteral">&quot;duplicate<sp/>%s<sp/>shader&quot;</highlight><highlight class="normal">,<sp/><ref refid="hlslStage_8h_1afeb860bf66359ec5fafb97e81987d27b" kindref="member">HLSL_ALL_NAMES</ref>[compile.<ref refid="structsemantic_1_1HlslCompileClass_1a56396c8ab24f1a2f799dba5562ef5f5b" kindref="member">stage</ref>]);</highlight></codeline>
<codeline lineno="1757"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1758"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1759"><highlight class="normal"></highlight></codeline>
<codeline lineno="1760"><highlight class="normal"><sp/><sp/>hlslXS.symbol<sp/>=<sp/>&amp;<ref refid="classShaderParser_1_1AssembleShaderEvalCB_1af4b1bf80be2b69362e8632392b14649f" kindref="member">hlsl_compile</ref>;</highlight></codeline>
<codeline lineno="1761"><highlight class="normal"></highlight></codeline>
<codeline lineno="1762"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>*compDirective<sp/>=<sp/>compile.<ref refid="structsemantic_1_1HlslCompileClass_1ad6f2b6aae25267d75d9826c1c54fd8e8" kindref="member">tryGetCompile</ref>())</highlight></codeline>
<codeline lineno="1763"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1764"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(compDirective-&gt;useDefaultProfileIfExists<sp/>&amp;&amp;<sp/>!hlslXS.defaultTarget.empty())</highlight></codeline>
<codeline lineno="1765"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>compDirective-&gt;profile<sp/>=<sp/>hlslXS.defaultTarget;</highlight></codeline>
<codeline lineno="1766"><highlight class="normal"></highlight></codeline>
<codeline lineno="1767"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(compile.<ref refid="structsemantic_1_1HlslCompileClass_1a56396c8ab24f1a2f799dba5562ef5f5b" kindref="member">stage</ref>)</highlight></codeline>
<codeline lineno="1768"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1769"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="hlslStage_8h_1a2c05326871fdf863346c90daec291c82a3578afaccb178aabb4a9be24ebac96ab" kindref="member">HLSL_PS</ref>:</highlight></codeline>
<codeline lineno="1770"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="hlslStage_8h_1a2c05326871fdf863346c90daec291c82a650263c7ccac846d596bd102f8731e45" kindref="member">HLSL_CS</ref>:<sp/><ref refid="classShaderParser_1_1AssembleShaderEvalCB_1afc3b519f4870906d37b91b0c43d9dd3d" kindref="member">curpass</ref>-&gt;<ref refid="structSemanticShaderPass_1a9bf7beb92808cc36ccdefe438f102444" kindref="member">enableFp16</ref>.<ref refid="structSemanticShaderPass_1_1EnableFp16State_1a31cd4803eafd7de81f1d3b0d87b2a7ca" kindref="member">psOrCs</ref><sp/>=<sp/>compDirective-&gt;useHalfs;<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1771"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="hlslStage_8h_1a2c05326871fdf863346c90daec291c82ac96f3b48f3e701b6668d5c1322e48687" kindref="member">HLSL_VS</ref>:</highlight></codeline>
<codeline lineno="1772"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="hlslStage_8h_1a2c05326871fdf863346c90daec291c82a9b00fd134e3a16ccea975e6308ac0407" kindref="member">HLSL_MS</ref>:<sp/><ref refid="classShaderParser_1_1AssembleShaderEvalCB_1afc3b519f4870906d37b91b0c43d9dd3d" kindref="member">curpass</ref>-&gt;<ref refid="structSemanticShaderPass_1a9bf7beb92808cc36ccdefe438f102444" kindref="member">enableFp16</ref>.<ref refid="structSemanticShaderPass_1_1EnableFp16State_1ad591dd4b977e7e7a832c8a6ef9e3b6bf" kindref="member">vsOrMs</ref><sp/>=<sp/>compDirective-&gt;useHalfs;<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1773"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="hlslStage_8h_1a2c05326871fdf863346c90daec291c82acb03fb145091e474ac4b31e58b9c69b5" kindref="member">HLSL_HS</ref>:<sp/><ref refid="classShaderParser_1_1AssembleShaderEvalCB_1afc3b519f4870906d37b91b0c43d9dd3d" kindref="member">curpass</ref>-&gt;<ref refid="structSemanticShaderPass_1a9bf7beb92808cc36ccdefe438f102444" kindref="member">enableFp16</ref>.<ref refid="structSemanticShaderPass_1_1EnableFp16State_1a7ce49d8670320a52b4713a0eccd344e9" kindref="member">hs</ref><sp/>=<sp/>compDirective-&gt;useHalfs;<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1774"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="hlslStage_8h_1a2c05326871fdf863346c90daec291c82a7ffcc28eb1a93bf900e4e3907d25abf9" kindref="member">HLSL_DS</ref>:<sp/><ref refid="classShaderParser_1_1AssembleShaderEvalCB_1afc3b519f4870906d37b91b0c43d9dd3d" kindref="member">curpass</ref>-&gt;<ref refid="structSemanticShaderPass_1a9bf7beb92808cc36ccdefe438f102444" kindref="member">enableFp16</ref>.<ref refid="structSemanticShaderPass_1_1EnableFp16State_1af03ad92139661849917571bc27bd483b" kindref="member">ds</ref><sp/>=<sp/>compDirective-&gt;useHalfs;<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1775"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="hlslStage_8h_1a2c05326871fdf863346c90daec291c82a6c417fb1d5e6a3788a384cb63b730e1c" kindref="member">HLSL_GS</ref>:</highlight></codeline>
<codeline lineno="1776"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="hlslStage_8h_1a2c05326871fdf863346c90daec291c82a817ee5a4475f199b5cd88655ac66d6c9" kindref="member">HLSL_AS</ref>:<sp/><ref refid="classShaderParser_1_1AssembleShaderEvalCB_1afc3b519f4870906d37b91b0c43d9dd3d" kindref="member">curpass</ref>-&gt;<ref refid="structSemanticShaderPass_1a9bf7beb92808cc36ccdefe438f102444" kindref="member">enableFp16</ref>.<ref refid="structSemanticShaderPass_1_1EnableFp16State_1a896e356f854a95da3e6dcd9231e9ba18" kindref="member">gsOrAs</ref><sp/>=<sp/>compDirective-&gt;useHalfs;<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1777"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1778"><highlight class="normal"></highlight></codeline>
<codeline lineno="1779"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>!_CROSS_TARGET_C1<sp/>&amp;&amp;<sp/>!_CROSS_TARGET_C2<sp/>&amp;&amp;<sp/>!_CROSS_TARGET_DX11<sp/>&amp;&amp;<sp/>!_CROSS_TARGET_EMPTY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1780"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strcmp(compDirective-&gt;profile,<sp/></highlight><highlight class="stringliteral">&quot;ps_3_0&quot;</highlight><highlight class="normal">)<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="1781"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classShaderParser_1_1AssembleShaderEvalCB_1afc3b519f4870906d37b91b0c43d9dd3d" kindref="member">curpass</ref>-&gt;<ref refid="structSemanticShaderPass_1a1a76224b7f7f66632a9ac54cdbde7f46" kindref="member">ps30</ref><sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1782"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strcmp(compDirective-&gt;profile,<sp/></highlight><highlight class="stringliteral">&quot;vs_3_0&quot;</highlight><highlight class="normal">)<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="1783"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classShaderParser_1_1AssembleShaderEvalCB_1afc3b519f4870906d37b91b0c43d9dd3d" kindref="member">curpass</ref>-&gt;<ref refid="structSemanticShaderPass_1a04ae58c79551385255c790150847373e" kindref="member">vs30</ref><sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1784"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1785"><highlight class="normal"></highlight></codeline>
<codeline lineno="1786"><highlight class="normal"><sp/><sp/><sp/><sp/>hlslXS.compile.emplace(eastl::move(*compDirective));</highlight></codeline>
<codeline lineno="1787"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1788"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1789"><highlight class="normal"></highlight></codeline>
<codeline lineno="1790"><highlight class="normal"></highlight></codeline>
<codeline lineno="1791"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classShaderParser_1_1AssembleShaderEvalCB_1a94c02339e46e46ec8270f2f7f59bd68f" kindref="member">AssembleShaderEvalCB::eval_hlsl_decl</ref>(hlsl_local_decl_class<sp/>&amp;sh)</highlight></codeline>
<codeline lineno="1792"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1793"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sh.ident)</highlight></codeline>
<codeline lineno="1794"><highlight class="normal"><sp/><sp/><sp/><sp/>addBlockType(sh.ident-&gt;text,<sp/>sh.ident);</highlight></codeline>
<codeline lineno="1795"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1796"><highlight class="normal"></highlight></codeline>
<codeline lineno="1797"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>AssembleShaderEvalCB::addBlockType(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*name,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Terminal<sp/>*t)</highlight></codeline>
<codeline lineno="1798"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1799"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!name)</highlight></codeline>
<codeline lineno="1800"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1801"><highlight class="normal"></highlight></codeline>
<codeline lineno="1802"><highlight class="normal"><sp/><sp/>BlockPipelineType<sp/>type<sp/>=<sp/>BLOCK_MAX;</highlight></codeline>
<codeline lineno="1803"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>From<sp/>earlier<sp/>evalution<sp/>we<sp/>know<sp/>that<sp/>name<sp/>is<sp/>in<sp/>{cs,<sp/>ps,<sp/>vs,<sp/>hs,<sp/>ds,<sp/>gs,<sp/>ms,<sp/>as}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1804"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strstr(</highlight><highlight class="stringliteral">&quot;cs&quot;</highlight><highlight class="normal">,<sp/>name)<sp/>!=<sp/>0)</highlight></codeline>
<codeline lineno="1805"><highlight class="normal"><sp/><sp/><sp/><sp/>type<sp/>=<sp/>BLOCK_COMPUTE;</highlight></codeline>
<codeline lineno="1806"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strstr(</highlight><highlight class="stringliteral">&quot;ps&quot;</highlight><highlight class="normal">,<sp/>name)<sp/>!=<sp/>0)</highlight></codeline>
<codeline lineno="1807"><highlight class="normal"><sp/><sp/><sp/><sp/>type<sp/>=<sp/>BLOCK_GRAPHICS_PS;</highlight></codeline>
<codeline lineno="1808"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strstr(</highlight><highlight class="stringliteral">&quot;ms/as&quot;</highlight><highlight class="normal">,<sp/>name)<sp/>!=<sp/>0)</highlight></codeline>
<codeline lineno="1809"><highlight class="normal"><sp/><sp/><sp/><sp/>type<sp/>=<sp/>BLOCK_GRAPHICS_MESH;</highlight></codeline>
<codeline lineno="1810"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strstr(</highlight><highlight class="stringliteral">&quot;vs/hs/ds/gs&quot;</highlight><highlight class="normal">,<sp/>name)<sp/>!=<sp/>0)</highlight></codeline>
<codeline lineno="1811"><highlight class="normal"><sp/><sp/><sp/><sp/>type<sp/>=<sp/>BLOCK_GRAPHICS_VERTEX;</highlight></codeline>
<codeline lineno="1812"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1813"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1814"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="shErrorReporting_8h_1a634f6d6ca9a9f22c5eea4c9b8e20ef31" kindref="member">report_error</ref>(<ref refid="classShaderParser_1_1AssembleShaderEvalCB_1afabaa52e0ea25f004960aacc342b3c84" kindref="member">parser</ref>,<sp/>t,<sp/></highlight><highlight class="stringliteral">&quot;Unknown<sp/>block<sp/>type<sp/>(%s)&quot;</highlight><highlight class="normal">,<sp/>name);</highlight></codeline>
<codeline lineno="1815"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1816"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1817"><highlight class="normal"></highlight></codeline>
<codeline lineno="1818"><highlight class="normal"><sp/><sp/>declaredBlockTypes[type]<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1819"><highlight class="normal"></highlight></codeline>
<codeline lineno="1820"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>for<sp/>conflicting<sp/>block<sp/>types</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1821"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(declaredBlockTypes[BLOCK_COMPUTE]<sp/>&amp;&amp;<sp/>hasDeclaredGraphicsBlocks())</highlight></codeline>
<codeline lineno="1822"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="shErrorReporting_8h_1a634f6d6ca9a9f22c5eea4c9b8e20ef31" kindref="member">report_error</ref>(<ref refid="classShaderParser_1_1AssembleShaderEvalCB_1afabaa52e0ea25f004960aacc342b3c84" kindref="member">parser</ref>,<sp/>t,<sp/></highlight><highlight class="stringliteral">&quot;It<sp/>is<sp/>illegal<sp/>to<sp/>declare<sp/>both<sp/>(cs)<sp/>and<sp/>(ps/vs/hs/ds/gs/ms/as)<sp/>blocks<sp/>in<sp/>one<sp/>shader&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1823"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(declaredBlockTypes[BLOCK_GRAPHICS_VERTEX]<sp/>&amp;&amp;<sp/>declaredBlockTypes[BLOCK_GRAPHICS_MESH])</highlight></codeline>
<codeline lineno="1824"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="shErrorReporting_8h_1a634f6d6ca9a9f22c5eea4c9b8e20ef31" kindref="member">report_error</ref>(<ref refid="classShaderParser_1_1AssembleShaderEvalCB_1afabaa52e0ea25f004960aacc342b3c84" kindref="member">parser</ref>,<sp/>t,<sp/></highlight><highlight class="stringliteral">&quot;It<sp/>is<sp/>illegal<sp/>to<sp/>declare<sp/>both<sp/>(vs/hs/ds/gs)<sp/>and<sp/>(ms/as)<sp/>blocks<sp/>in<sp/>one<sp/>shader&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1825"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1826"><highlight class="normal"></highlight></codeline>
<codeline lineno="1827"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>AssembleShaderEvalCB::hasDeclaredGraphicsBlocks()</highlight></codeline>
<codeline lineno="1828"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1829"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>declaredBlockTypes[BLOCK_GRAPHICS_PS]<sp/>||<sp/>declaredBlockTypes[BLOCK_GRAPHICS_VERTEX]<sp/>||<sp/>declaredBlockTypes[BLOCK_GRAPHICS_MESH];</highlight></codeline>
<codeline lineno="1830"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1831"><highlight class="normal"></highlight></codeline>
<codeline lineno="1832"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>AssembleShaderEvalCB::hasDeclaredMeshPipelineBlocks()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>declaredBlockTypes[BLOCK_GRAPHICS_MESH];<sp/>}</highlight></codeline>
<codeline lineno="1833"><highlight class="normal"></highlight></codeline>
<codeline lineno="1834"><highlight class="normal"></highlight></codeline>
<codeline lineno="1835"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>AssembleShaderEvalCB::evalHlslCompileClass(HlslCompile<sp/>*comp)</highlight></codeline>
<codeline lineno="1836"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1837"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!comp-&gt;hasCompilation())</highlight></codeline>
<codeline lineno="1838"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1839"><highlight class="normal"></highlight></codeline>
<codeline lineno="1840"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isCompute<sp/>=<sp/>comp<sp/>==<sp/>&amp;<ref refid="classShaderParser_1_1AssembleShaderEvalCB_1a6860b6f93232191e96b1ccada7510d8d" kindref="member">hlsls</ref>.fields.cs;</highlight></codeline>
<codeline lineno="1841"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(isCompute<sp/>&amp;&amp;<sp/>hasDeclaredGraphicsBlocks())</highlight></codeline>
<codeline lineno="1842"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1843"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="shErrorReporting_8h_1a634f6d6ca9a9f22c5eea4c9b8e20ef31" kindref="member">report_error</ref>(<ref refid="classShaderParser_1_1AssembleShaderEvalCB_1afabaa52e0ea25f004960aacc342b3c84" kindref="member">parser</ref>,<sp/>comp-&gt;symbol,<sp/></highlight><highlight class="stringliteral">&quot;Can<sp/>not<sp/>compile<sp/>%s<sp/>shader<sp/>with<sp/>(ps/vs/hs/ds/gs/ms/as)<sp/>blocks<sp/>declared&quot;</highlight><highlight class="normal">,<sp/>comp-&gt;stageName);</highlight></codeline>
<codeline lineno="1844"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1845"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1846"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!isCompute)</highlight></codeline>
<codeline lineno="1847"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1848"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(declaredBlockTypes[BLOCK_COMPUTE])</highlight></codeline>
<codeline lineno="1849"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1850"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="shErrorReporting_8h_1a634f6d6ca9a9f22c5eea4c9b8e20ef31" kindref="member">report_error</ref>(<ref refid="classShaderParser_1_1AssembleShaderEvalCB_1afabaa52e0ea25f004960aacc342b3c84" kindref="member">parser</ref>,<sp/>comp-&gt;symbol,<sp/></highlight><highlight class="stringliteral">&quot;Can<sp/>not<sp/>compile<sp/>%s<sp/>shader<sp/>with<sp/>(cs)<sp/>blocks<sp/>declared&quot;</highlight><highlight class="normal">,<sp/>comp-&gt;stageName);</highlight></codeline>
<codeline lineno="1851"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1852"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1853"><highlight class="normal"></highlight></codeline>
<codeline lineno="1854"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isMesh<sp/>=<sp/>comp<sp/>==<sp/>&amp;<ref refid="classShaderParser_1_1AssembleShaderEvalCB_1a6860b6f93232191e96b1ccada7510d8d" kindref="member">hlsls</ref>.fields.ms<sp/>||<sp/>comp<sp/>==<sp/>&amp;<ref refid="classShaderParser_1_1AssembleShaderEvalCB_1a6860b6f93232191e96b1ccada7510d8d" kindref="member">hlsls</ref>.fields.as;</highlight></codeline>
<codeline lineno="1855"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isVertex<sp/>=<sp/>!isMesh<sp/>&amp;&amp;<sp/>comp<sp/>!=<sp/>&amp;<ref refid="classShaderParser_1_1AssembleShaderEvalCB_1a6860b6f93232191e96b1ccada7510d8d" kindref="member">hlsls</ref>.fields.ps;</highlight></codeline>
<codeline lineno="1856"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(isMesh<sp/>&amp;&amp;<sp/>declaredBlockTypes[BLOCK_GRAPHICS_VERTEX])</highlight></codeline>
<codeline lineno="1857"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1858"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="shErrorReporting_8h_1a634f6d6ca9a9f22c5eea4c9b8e20ef31" kindref="member">report_error</ref>(<ref refid="classShaderParser_1_1AssembleShaderEvalCB_1afabaa52e0ea25f004960aacc342b3c84" kindref="member">parser</ref>,<sp/>comp-&gt;symbol,<sp/></highlight><highlight class="stringliteral">&quot;Can<sp/>not<sp/>compile<sp/>%s<sp/>shader<sp/>with<sp/>(vs/hs/ds/gs)<sp/>blocks<sp/>declared&quot;</highlight><highlight class="normal">,<sp/>comp-&gt;stageName);</highlight></codeline>
<codeline lineno="1859"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1860"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1861"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(isVertex<sp/>&amp;&amp;<sp/>declaredBlockTypes[BLOCK_GRAPHICS_MESH])</highlight></codeline>
<codeline lineno="1862"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1863"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="shErrorReporting_8h_1a634f6d6ca9a9f22c5eea4c9b8e20ef31" kindref="member">report_error</ref>(<ref refid="classShaderParser_1_1AssembleShaderEvalCB_1afabaa52e0ea25f004960aacc342b3c84" kindref="member">parser</ref>,<sp/>comp-&gt;symbol,<sp/></highlight><highlight class="stringliteral">&quot;Can<sp/>not<sp/>compile<sp/>%s<sp/>shader<sp/>with<sp/>(ms/as)<sp/>blocks<sp/>declared&quot;</highlight><highlight class="normal">,<sp/>comp-&gt;stageName);</highlight></codeline>
<codeline lineno="1864"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1865"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1866"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1867"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1868"><highlight class="normal"></highlight></codeline>
<codeline lineno="1869"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>AssembleShaderEvalCB::reserveSpecialCbufferAt(<ref refid="hlslRegisters_8h_1affe2e38eb7f3eb318b7e3b88697f8a42" kindref="member">HlslSlotSemantic</ref><sp/>cbuffer_sem,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>reg)</highlight></codeline>
<codeline lineno="1870"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1871"><highlight class="normal"><sp/><sp/>G_ASSERT(cbuffer_sem<sp/>&gt;=<sp/><ref refid="hlslRegisters_8h_1affe2e38eb7f3eb318b7e3b88697f8a42aff97b218ef108a694dfa86cdb1a816f8" kindref="member">HlslSlotSemantic::RESERVED_FOR_IMPLICIT_CONST_CBUF</ref>);</highlight></codeline>
<codeline lineno="1872"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>vr<sp/>=<sp/><ref refid="classShaderParser_1_1AssembleShaderEvalCB_1a9fce8bcafff541a352da46dc6bb3e441" kindref="member">shConst</ref>.<ref refid="structNamedConstBlock_1a6efd609ff10279c10300fca36972f50c" kindref="member">vertexRegAllocators</ref>[<ref refid="hlslRegisters_8h_1aa3a591153956a0cd6630e2d20870fb9ba4cd052468cc61d0e1fc36dfbea99f7ba" kindref="member">HLSL_RSPACE_B</ref>].reserve(cbuffer_sem,<sp/>reg);</highlight></codeline>
<codeline lineno="1873"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>pcr<sp/>=<sp/><ref refid="classShaderParser_1_1AssembleShaderEvalCB_1a9fce8bcafff541a352da46dc6bb3e441" kindref="member">shConst</ref>.<ref refid="structNamedConstBlock_1a72e11e05584df7e760fd2722129578c7" kindref="member">pixelOrComputeRegAllocators</ref>[<ref refid="hlslRegisters_8h_1aa3a591153956a0cd6630e2d20870fb9ba4cd052468cc61d0e1fc36dfbea99f7ba" kindref="member">HLSL_RSPACE_B</ref>].reserve(cbuffer_sem,<sp/>reg);</highlight></codeline>
<codeline lineno="1874"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!vr)</highlight></codeline>
<codeline lineno="1875"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1876"><highlight class="normal"><sp/><sp/><sp/><sp/>G_ASSERT(!vr.error().outOfRange);</highlight></codeline>
<codeline lineno="1877"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="hlslRegisters_8h_1ab7aa4d43a1a7da5a09a35cb23d5a2771" kindref="member">report_reg_reserve_failed</ref>(</highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">,<sp/>reg,<sp/>1,<sp/><ref refid="hlslRegisters_8h_1aa3a591153956a0cd6630e2d20870fb9ba4cd052468cc61d0e1fc36dfbea99f7ba" kindref="member">HLSL_RSPACE_B</ref>,<sp/>cbuffer_sem,<sp/>vr.error(),<sp/><ref refid="classShaderParser_1_1AssembleShaderEvalCB_1a9fce8bcafff541a352da46dc6bb3e441" kindref="member">shConst</ref>.<ref refid="structNamedConstBlock_1a6efd609ff10279c10300fca36972f50c" kindref="member">vertexRegAllocators</ref>[<ref refid="hlslRegisters_8h_1aa3a591153956a0cd6630e2d20870fb9ba4cd052468cc61d0e1fc36dfbea99f7ba" kindref="member">HLSL_RSPACE_B</ref>],</highlight></codeline>
<codeline lineno="1878"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classShaderParser_1_1AssembleShaderEvalCB_1a9fce8bcafff541a352da46dc6bb3e441" kindref="member">shConst</ref>.<ref refid="structNamedConstBlock_1aa33304bd77fa74220b9ca8cafb0f9ffa" kindref="member">makeInfoProvider</ref>(&amp;<ref refid="structNamedConstBlock_1af5d785154eb652eb976e9db509a5331f" kindref="member">NamedConstBlock::vertexProps</ref>,<sp/><ref refid="hlslRegisters_8h_1aa3a591153956a0cd6630e2d20870fb9ba4cd052468cc61d0e1fc36dfbea99f7ba" kindref="member">HLSL_RSPACE_B</ref>));</highlight></codeline>
<codeline lineno="1879"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1880"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!pcr)</highlight></codeline>
<codeline lineno="1881"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1882"><highlight class="normal"><sp/><sp/><sp/><sp/>G_ASSERT(!pcr.error().outOfRange);</highlight></codeline>
<codeline lineno="1883"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="hlslRegisters_8h_1ab7aa4d43a1a7da5a09a35cb23d5a2771" kindref="member">report_reg_reserve_failed</ref>(</highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">,<sp/>reg,<sp/>1,<sp/><ref refid="hlslRegisters_8h_1aa3a591153956a0cd6630e2d20870fb9ba4cd052468cc61d0e1fc36dfbea99f7ba" kindref="member">HLSL_RSPACE_B</ref>,<sp/>cbuffer_sem,<sp/>pcr.error(),</highlight></codeline>
<codeline lineno="1884"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classShaderParser_1_1AssembleShaderEvalCB_1a9fce8bcafff541a352da46dc6bb3e441" kindref="member">shConst</ref>.<ref refid="structNamedConstBlock_1a72e11e05584df7e760fd2722129578c7" kindref="member">pixelOrComputeRegAllocators</ref>[<ref refid="hlslRegisters_8h_1aa3a591153956a0cd6630e2d20870fb9ba4cd052468cc61d0e1fc36dfbea99f7ba" kindref="member">HLSL_RSPACE_B</ref>],<sp/><ref refid="classShaderParser_1_1AssembleShaderEvalCB_1a9fce8bcafff541a352da46dc6bb3e441" kindref="member">shConst</ref>.<ref refid="structNamedConstBlock_1aa33304bd77fa74220b9ca8cafb0f9ffa" kindref="member">makeInfoProvider</ref>(&amp;<ref refid="structNamedConstBlock_1af2982e411fef8f5bf02905031cac0bda" kindref="member">NamedConstBlock::pixelProps</ref>,<sp/><ref refid="hlslRegisters_8h_1aa3a591153956a0cd6630e2d20870fb9ba4cd052468cc61d0e1fc36dfbea99f7ba" kindref="member">HLSL_RSPACE_B</ref>));</highlight></codeline>
<codeline lineno="1885"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1886"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1887"><highlight class="normal"></highlight></codeline>
<codeline lineno="1888" refid="classCompileShaderJob" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classCompileShaderJob" kindref="compound">CompileShaderJob</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="structshc_1_1Job" kindref="compound">shc::Job</ref></highlight></codeline>
<codeline lineno="1889"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1890"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1891"><highlight class="normal"><sp/><sp/><ref refid="classCompileShaderJob" kindref="compound">CompileShaderJob</ref>(<ref refid="classShaderParser_1_1AssembleShaderEvalCB" kindref="compound">AssembleShaderEvalCB</ref><sp/>*ascb,<sp/><ref refid="structShaderParser_1_1AssembleShaderEvalCB_1_1HlslCompile" kindref="compound">AssembleShaderEvalCB::HlslCompile</ref><sp/>&amp;hlsl,<sp/><ref refid="hlslStage_8h_1a2c05326871fdf863346c90daec291c82" kindref="member">HlslCompilationStage</ref><sp/>stage,</highlight></codeline>
<codeline lineno="1892"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>hlsl_compile_class<sp/>*compile_symbol,<sp/>dag::ConstSpan&lt;CodeSourceBlocks::Unconditional<sp/>*&gt;<sp/>code_blocks,<sp/>uint64_t<sp/>variant_hash)<sp/>:</highlight></codeline>
<codeline lineno="1893"><highlight class="normal"><sp/><sp/><sp/><sp/>ctx{ascb-&gt;<ref refid="classShaderParser_1_1AssembleShaderEvalCB_1a3058e4d1c01fc25c4a62bf0e150fe6ca" kindref="member">ctx</ref>.<ref refid="classshc_1_1VariantContext_1a1cd6c96432c33d5741b597ad37709583" kindref="member">shCtx</ref>()},<sp/>dynVariant{ascb-&gt;<ref refid="classShaderParser_1_1AssembleShaderEvalCB_1a3058e4d1c01fc25c4a62bf0e150fe6ca" kindref="member">ctx</ref>.<ref refid="classshc_1_1VariantContext_1ae3d33ced2be05ff880614e636bfacb94" kindref="member">variant</ref>().<ref refid="structShaderVariant_1_1VariantInfo_1ad4fccf953d3032b53c1bb675298d4d6e" kindref="member">dyn</ref>},<sp/>stage{stage}</highlight></codeline>
<codeline lineno="1894"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1895"><highlight class="normal"><sp/><sp/><sp/><sp/>G_ASSERT(<ref refid="hlslStage_8h_1a98ad5875b95147f4099a697360633e7d" kindref="member">is_valid</ref>(stage));</highlight></codeline>
<codeline lineno="1896"><highlight class="normal"></highlight></codeline>
<codeline lineno="1897"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*def_cg_args[]<sp/>=<sp/>{</highlight><highlight class="stringliteral">&quot;--assembly&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;--mcgb&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;--fenable-bx2&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;--nobcolor&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;--fastmath&quot;</highlight><highlight class="normal">,<sp/>NULL};</highlight></codeline>
<codeline lineno="1898"><highlight class="normal"></highlight></codeline>
<codeline lineno="1899"><highlight class="normal"><sp/><sp/><sp/><sp/>entry<sp/>=<sp/>hlsl.<ref refid="structShaderParser_1_1AssembleShaderEvalCB_1_1HlslCompile_1a45c6bf0047fc5f3bbca3976db9a9f775" kindref="member">compile</ref>-&gt;entry;</highlight></codeline>
<codeline lineno="1900"><highlight class="normal"><sp/><sp/><sp/><sp/>profile<sp/>=<sp/>hlsl.<ref refid="structShaderParser_1_1AssembleShaderEvalCB_1_1HlslCompile_1a45c6bf0047fc5f3bbca3976db9a9f775" kindref="member">compile</ref>-&gt;profile;</highlight></codeline>
<codeline lineno="1901"><highlight class="normal"><sp/><sp/><sp/><sp/>hlsl_compile_token<sp/>=<sp/>compile_symbol-&gt;profile;</highlight></codeline>
<codeline lineno="1902"><highlight class="normal"><sp/><sp/><sp/><sp/>enableFp16<sp/>=<sp/>hlsl.<ref refid="structShaderParser_1_1AssembleShaderEvalCB_1_1HlslCompile_1a45c6bf0047fc5f3bbca3976db9a9f775" kindref="member">compile</ref>-&gt;useHalfs;</highlight></codeline>
<codeline lineno="1903"><highlight class="normal"><sp/><sp/><sp/><sp/>curpass<sp/>=<sp/>ascb-&gt;<ref refid="classShaderParser_1_1AssembleShaderEvalCB_1afc3b519f4870906d37b91b0c43d9dd3d" kindref="member">curpass</ref>;</highlight></codeline>
<codeline lineno="1904"><highlight class="normal"><sp/><sp/><sp/><sp/>lexer<sp/>=<sp/>&amp;ascb-&gt;<ref refid="classShaderParser_1_1AssembleShaderEvalCB_1afabaa52e0ea25f004960aacc342b3c84" kindref="member">parser</ref>.<ref refid="structParser_1a9e9bc1e12aec4ba300d71598132ae8ec" kindref="member">get_lexer</ref>();</highlight></codeline>
<codeline lineno="1905"><highlight class="normal"><sp/><sp/><sp/><sp/>shaderName<sp/>=<sp/>ctx.name();</highlight></codeline>
<codeline lineno="1906"><highlight class="normal"><sp/><sp/><sp/><sp/>cgArgs<sp/>=<sp/><ref refid="namespaceshc_1a47efde6b3d493adbe2119a5593807d36" kindref="member">shc::config</ref>().<ref refid="structshc_1_1CompilerConfig_1ad20fef357d0d0359d9a1cfce88ec9f2f" kindref="member">hlslNoDisassembly</ref><sp/>?<sp/>def_cg_args<sp/>+<sp/>1<sp/>:<sp/>def_cg_args;</highlight></codeline>
<codeline lineno="1907"><highlight class="normal"></highlight></codeline>
<codeline lineno="1908"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classCodeSourceBlocks" kindref="compound">CodeSourceBlocks</ref><sp/>&amp;code<sp/>=<sp/>*<ref refid="namespaceShaderParser_1a5a3210b2d749584757e6b05160d0ebd8" kindref="member">getSourceBlocks</ref>(profile);</highlight></codeline>
<codeline lineno="1909"><highlight class="normal"><sp/><sp/><sp/><sp/>dag::ConstSpan&lt;char&gt;<sp/>main_src<sp/>=<sp/>code.<ref refid="classCodeSourceBlocks_1a6b7e88fe6e26dbe946f23fb45be76f7a" kindref="member">buildSourceCode</ref>(code_blocks);</highlight></codeline>
<codeline lineno="1910"><highlight class="normal"><sp/><sp/><sp/><sp/>source.setStr(main_src.data(),<sp/>main_src.size());</highlight></codeline>
<codeline lineno="1911"><highlight class="normal"></highlight></codeline>
<codeline lineno="1912"><highlight class="normal"><sp/><sp/><sp/><sp/>eastl::string<sp/>src_predefines<sp/>=<sp/><ref refid="namespaceassembly_1a07f2c200251b6e2fc46997a991093302" kindref="member">assembly::build_hardware_defines_hlsl</ref>(profile.c_str(),<sp/>enableFp16,<sp/>ascb-&gt;<ref refid="classShaderParser_1_1AssembleShaderEvalCB_1a3058e4d1c01fc25c4a62bf0e150fe6ca" kindref="member">ctx</ref>.<ref refid="classshc_1_1VariantContext_1a02952e27d2d5e304daad76b11cb1f4ad" kindref="member">tgtCtx</ref>().<ref refid="classshc_1_1TargetContext_1a72ea1e47e9286a2dfdf513c56e495712" kindref="member">compCtx</ref>());</highlight></codeline>
<codeline lineno="1913"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>_CROSS_TARGET_C2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1914"><highlight class="normal"></highlight></codeline>
<codeline lineno="1915"><highlight class="normal"></highlight></codeline>
<codeline lineno="1916"><highlight class="normal"></highlight></codeline>
<codeline lineno="1917"><highlight class="normal"></highlight></codeline>
<codeline lineno="1918"><highlight class="normal"></highlight></codeline>
<codeline lineno="1919"><highlight class="normal"></highlight></codeline>
<codeline lineno="1920"><highlight class="normal"></highlight></codeline>
<codeline lineno="1921"><highlight class="normal"></highlight></codeline>
<codeline lineno="1922"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1923"><highlight class="normal"></highlight></codeline>
<codeline lineno="1924"><highlight class="normal"><sp/><sp/><sp/><sp/>ascb-&gt;<ref refid="classShaderParser_1_1AssembleShaderEvalCB_1a9fce8bcafff541a352da46dc6bb3e441" kindref="member">shConst</ref>.<ref refid="structNamedConstBlock_1affe5e403512a894df27f0e2332c6fa0d" kindref="member">patchHlsl</ref>(source,<sp/><ref refid="hlslStage_8h_1add8a8e3c89146e88b5072801af762964" kindref="member">HLSL_STAGE_TO_SHADER_STAGE</ref>[stage],<sp/>ascb-&gt;<ref refid="classShaderParser_1_1AssembleShaderEvalCB_1a34667529acbb189246a907737c79f2dd" kindref="member">varMerger</ref>,<sp/>max_constants_no,</highlight></codeline>
<codeline lineno="1925"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>eastl::string_view{src_predefines},<sp/>curpass-&gt;dual_source_blending);</highlight></codeline>
<codeline lineno="1926"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>base<sp/>=<sp/>append_items(source,<sp/>16);</highlight></codeline>
<codeline lineno="1927"><highlight class="normal"><sp/><sp/><sp/><sp/>memset(&amp;source[base],<sp/>0,<sp/>16);</highlight></codeline>
<codeline lineno="1928"><highlight class="normal"></highlight></codeline>
<codeline lineno="1929"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="namespaceshc_1a47efde6b3d493adbe2119a5593807d36" kindref="member">shc::config</ref>().hlslDumpCodeAlways<sp/>||<sp/><ref refid="namespaceshc_1a47efde6b3d493adbe2119a5593807d36" kindref="member">shc::config</ref>().validateIdenticalBytecode<sp/>||<sp/><ref refid="debugSpitfile_8cpp_1adee5e5812073317d58c113be5cead4e3" kindref="member">debug_output_dir_shader_name</ref>)</highlight></codeline>
<codeline lineno="1930"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>compileCtx<sp/>=<sp/><ref refid="shLog_8cpp_1ab80b7ea7af8abc6c90ad6a2773972358" kindref="member">sh_get_compile_context</ref>();</highlight></codeline>
<codeline lineno="1931"><highlight class="normal"></highlight></codeline>
<codeline lineno="1932"><highlight class="normal"><sp/><sp/><sp/><sp/>shader_variant_hash<sp/>=<sp/>variant_hash;</highlight></codeline>
<codeline lineno="1933"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1934"><highlight class="normal"></highlight></codeline>
<codeline lineno="1935"><highlight class="normal"></highlight><highlight class="keyword">protected</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1936"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>doJobBody()<sp/></highlight><highlight class="keyword">override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1937"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>releaseJobBody()<sp/></highlight><highlight class="keyword">override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1938"><highlight class="normal"><sp/><sp/>eastl::optional&lt;dxil::StreamOutputComponentInfo&gt;<sp/>parsePragmaStreamOutput(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*pragma);</highlight></codeline>
<codeline lineno="1939"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>skipEmptyPragmaSpaces(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*&amp;pragma);</highlight></codeline>
<codeline lineno="1940"><highlight class="normal"></highlight></codeline>
<codeline lineno="1941"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>addResults();</highlight></codeline>
<codeline lineno="1942"><highlight class="normal"></highlight></codeline>
<codeline lineno="1943"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>@TODO:<sp/>this<sp/>is<sp/>not<sp/>a<sp/>good<sp/>solution<sp/>(as<sp/>is<sp/>keeping<sp/>other<sp/>mutable<sp/>refs<sp/>in<sp/>this<sp/>job&apos;s<sp/>fields)<sp/>--<sp/>we<sp/>have<sp/>to<sp/>make<sp/>sure<sp/>this<sp/>is<sp/>only</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1944"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>used<sp/>in<sp/>the<sp/>constructor<sp/>&amp;<sp/>addResults.<sp/>Also,<sp/>currently<sp/>jobs<sp/>outlive<sp/>VariantContext,<sp/>which<sp/>also<sp/>should<sp/>be<sp/>fixed,<sp/>for<sp/>now<sp/>we<sp/>keep</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1945"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>a<sp/>pointer<sp/>to<sp/>VariantSrc.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1946"><highlight class="normal"><sp/><sp/><ref refid="classshc_1_1ShaderContext" kindref="compound">shc::ShaderContext</ref><sp/>&amp;ctx;</highlight></codeline>
<codeline lineno="1947"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classShaderVariant_1_1VariantSrc" kindref="compound">ShaderVariant::VariantSrc</ref><sp/>*dynVariant;</highlight></codeline>
<codeline lineno="1948"><highlight class="normal"></highlight></codeline>
<codeline lineno="1949"><highlight class="normal"><sp/><sp/><ref refid="hlslStage_8h_1a2c05326871fdf863346c90daec291c82" kindref="member">HlslCompilationStage</ref><sp/>stage<sp/>=<sp/><ref refid="hlslStage_8h_1a2c05326871fdf863346c90daec291c82a122ff6a6ec14da30f15afba301d36b4c" kindref="member">HLSL_INVALID</ref>;</highlight></codeline>
<codeline lineno="1950"><highlight class="normal"></highlight></codeline>
<codeline lineno="1951"><highlight class="normal"><sp/><sp/><ref refid="structSemanticShaderPass" kindref="compound">SemanticShaderPass</ref><sp/>*curpass;</highlight></codeline>
<codeline lineno="1952"><highlight class="normal"><sp/><sp/>SimpleString<sp/>entry,<sp/>profile;</highlight></codeline>
<codeline lineno="1953"><highlight class="normal"><sp/><sp/>String<sp/>source;</highlight></codeline>
<codeline lineno="1954"><highlight class="normal"><sp/><sp/>String<sp/>compileCtx;</highlight></codeline>
<codeline lineno="1955"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**cgArgs;</highlight></codeline>
<codeline lineno="1956"><highlight class="normal"><sp/><sp/><ref refid="structCompileResult" kindref="compound">CompileResult</ref><sp/>compile_result;</highlight></codeline>
<codeline lineno="1957"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>max_constants_no;</highlight></codeline>
<codeline lineno="1958"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>enableFp16;</highlight></codeline>
<codeline lineno="1959"><highlight class="normal"></highlight></codeline>
<codeline lineno="1960"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*shaderName;</highlight></codeline>
<codeline lineno="1961"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>SHTOK_string<sp/>*hlsl_compile_token;</highlight></codeline>
<codeline lineno="1962"><highlight class="normal"><sp/><sp/><ref refid="classLexer" kindref="compound">Lexer</ref><sp/>*lexer;</highlight></codeline>
<codeline lineno="1963"><highlight class="normal"></highlight></codeline>
<codeline lineno="1964"><highlight class="normal"><sp/><sp/>uint64_t<sp/>shader_variant_hash;</highlight></codeline>
<codeline lineno="1965"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1966"><highlight class="normal"></highlight></codeline>
<codeline lineno="1967"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classShaderParser_1_1AssembleShaderEvalCB_1af4b1bf80be2b69362e8632392b14649f" kindref="member">AssembleShaderEvalCB::hlsl_compile</ref>(<ref refid="hlslStage_8h_1a2c05326871fdf863346c90daec291c82" kindref="member">HlslCompilationStage</ref><sp/>stage)</highlight></codeline>
<codeline lineno="1968"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1969"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;hlsl<sp/>=<sp/><ref refid="classShaderParser_1_1AssembleShaderEvalCB_1a6860b6f93232191e96b1ccada7510d8d" kindref="member">hlsls</ref>.all[stage];</highlight></codeline>
<codeline lineno="1970"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!hlsl.compile)</highlight></codeline>
<codeline lineno="1971"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1972"><highlight class="normal"></highlight></codeline>
<codeline lineno="1973"><highlight class="normal"><sp/><sp/>G_ASSERT(hlsl.hasCompilation());</highlight></codeline>
<codeline lineno="1974"><highlight class="normal"><sp/><sp/><ref refid="structsemantic_1_1HlslCompileDirective" kindref="compound">semantic::HlslCompileDirective</ref><sp/>&amp;compile<sp/>=<sp/>hlsl.compile.value();</highlight></codeline>
<codeline lineno="1975"><highlight class="normal"></highlight></codeline>
<codeline lineno="1976"><highlight class="normal"><sp/><sp/><ref refid="classCodeSourceBlocks" kindref="compound">CodeSourceBlocks</ref><sp/>*codeP<sp/>=<sp/><ref refid="namespaceShaderParser_1a5a3210b2d749584757e6b05160d0ebd8" kindref="member">getSourceBlocks</ref>(compile.<ref refid="structsemantic_1_1HlslCompileDirective_1aede7021514904bedf9276925187e8178" kindref="member">profile</ref>);</highlight></codeline>
<codeline lineno="1977"><highlight class="normal"><sp/><sp/>G_ASSERT(codeP<sp/>&amp;&amp;<sp/></highlight><highlight class="stringliteral">&quot;ShaderParser::curXsCode<sp/>must<sp/>be<sp/>non<sp/>null<sp/>here<sp/>by<sp/>design&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1978"><highlight class="normal"><sp/><sp/><ref refid="classCodeSourceBlocks" kindref="compound">CodeSourceBlocks</ref><sp/>&amp;<ref refid="classShaderParser_1_1AssembleShaderEvalCB_1a2ba6fb52310a3ced7b31ede7fd8cbc8b" kindref="member">code</ref><sp/>=<sp/>*codeP;</highlight></codeline>
<codeline lineno="1979"><highlight class="normal"></highlight></codeline>
<codeline lineno="1980"><highlight class="normal"><sp/><sp/><ref refid="classShaderBytecodeCache" kindref="compound">ShaderBytecodeCache</ref><sp/>&amp;cache<sp/>=<sp/><ref refid="classShaderParser_1_1AssembleShaderEvalCB_1a3058e4d1c01fc25c4a62bf0e150fe6ca" kindref="member">ctx</ref>.<ref refid="classshc_1_1VariantContext_1a02952e27d2d5e304daad76b11cb1f4ad" kindref="member">tgtCtx</ref>().<ref refid="classshc_1_1TargetContext_1a8b7f13535e319e9ea56d78ee1931ae82" kindref="member">bytecodeCache</ref>();</highlight></codeline>
<codeline lineno="1981"><highlight class="normal"></highlight></codeline>
<codeline lineno="1982"><highlight class="normal"><sp/><sp/>dag::ConstSpan&lt;CodeSourceBlocks::Unconditional<sp/>*&gt;<sp/>code_blocks<sp/>=<sp/><ref refid="classShaderParser_1_1AssembleShaderEvalCB_1a2ba6fb52310a3ced7b31ede7fd8cbc8b" kindref="member">code</ref>.getPreprocessedCode(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1983"><highlight class="normal"><sp/><sp/><ref refid="structCryptoHash" kindref="compound">CryptoHash</ref><sp/>code_digest<sp/>=<sp/><ref refid="classShaderParser_1_1AssembleShaderEvalCB_1a2ba6fb52310a3ced7b31ede7fd8cbc8b" kindref="member">code</ref>.getCodeDigest(code_blocks);</highlight></codeline>
<codeline lineno="1984"><highlight class="normal"><sp/><sp/><ref refid="structCryptoHash" kindref="compound">CryptoHash</ref><sp/>const_digest<sp/>=<sp/><ref refid="classShaderParser_1_1AssembleShaderEvalCB_1a9fce8bcafff541a352da46dc6bb3e441" kindref="member">shConst</ref>.<ref refid="structNamedConstBlock_1ad773aa86a998987a7974eee310517ebf" kindref="member">getDigest</ref>(<ref refid="hlslStage_8h_1add8a8e3c89146e88b5072801af762964" kindref="member">HLSL_STAGE_TO_SHADER_STAGE</ref>[stage],<sp/><ref refid="classShaderParser_1_1AssembleShaderEvalCB_1a34667529acbb189246a907737c79f2dd" kindref="member">varMerger</ref>);</highlight></codeline>
<codeline lineno="1985"><highlight class="normal"></highlight></codeline>
<codeline lineno="1986"><highlight class="normal"><sp/><sp/><ref refid="namespaceShaderCompilerStat_1a983c8037ae29bbf6a3ec0a21c34df598" kindref="member">ShaderCompilerStat::hlslCompileCount</ref>++;</highlight></codeline>
<codeline lineno="1987"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>[cacheIdx,<sp/>entryIds]<sp/>=<sp/>cache.<ref refid="classShaderBytecodeCache_1a59f62e38c3b8d202eb7777a68247f4b9" kindref="member">find</ref>(code_digest,<sp/>const_digest,<sp/>compile.<ref refid="structsemantic_1_1HlslCompileDirective_1a8bca245d2e3ca5d199cffac8cf0381dd" kindref="member">entry</ref>,<sp/>compile.<ref refid="structsemantic_1_1HlslCompileDirective_1aede7021514904bedf9276925187e8178" kindref="member">profile</ref>);</highlight></codeline>
<codeline lineno="1988"><highlight class="normal"></highlight></codeline>
<codeline lineno="1989"><highlight class="normal"><sp/><sp/><ref refid="classShaderParser_1_1AssembleShaderEvalCB_1afc3b519f4870906d37b91b0c43d9dd3d" kindref="member">curpass</ref>-&gt;<ref refid="structSemanticShaderPass_1aa25a041dc6f1fb543eac3e5dbc3e21ee" kindref="member">setCidx</ref>(stage,<sp/>entryIds);</highlight></codeline>
<codeline lineno="1990"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cacheIdx<sp/>!=<sp/><ref refid="shaderBytecodeCache_8h_1a6718db94551d267a6848c7a6ecaa9697aba2b45bdc11e2a4a6e86aab2ac693cbb" kindref="member">ShaderCacheIndex::EMPTY</ref>)</highlight></codeline>
<codeline lineno="1991"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1992"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Reuse<sp/>cached<sp/>shader.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1993"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceShaderCompilerStat_1a340a1c254f203e96131e622ecdaf17e7" kindref="member">ShaderCompilerStat::hlslCacheHitCount</ref>++;</highlight></codeline>
<codeline lineno="1994"><highlight class="normal"></highlight></codeline>
<codeline lineno="1995"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cacheIdx<sp/>==<sp/><ref refid="shaderBytecodeCache_8h_1a6718db94551d267a6848c7a6ecaa9697ac69f06e1a9b016d133907b4e5f5864d2" kindref="member">ShaderCacheIndex::PENDING</ref>)<sp/></highlight><highlight class="comment">//<sp/>not<sp/>ready<sp/>yet,<sp/>add<sp/>to<sp/>pending<sp/>list<sp/>to<sp/>update<sp/>later</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1996"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cache.<ref refid="classShaderBytecodeCache_1aeb96c34e97bf8b805ceceea6f3ea4d1c" kindref="member">registerPendingPass</ref>(*<ref refid="classShaderParser_1_1AssembleShaderEvalCB_1afc3b519f4870906d37b91b0c43d9dd3d" kindref="member">curpass</ref>);</highlight></codeline>
<codeline lineno="1997"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1998"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="shaderBytecodeCache_8cpp_1a53df41b64958672c8ba7bfecc65bf0fa" kindref="member">apply_shader_from_cache</ref>(*<ref refid="classShaderParser_1_1AssembleShaderEvalCB_1afc3b519f4870906d37b91b0c43d9dd3d" kindref="member">curpass</ref>,<sp/>stage,<sp/>entryIds,<sp/>cache);</highlight></codeline>
<codeline lineno="1999"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2000"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2001"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="2002"><highlight class="normal"><sp/><sp/><sp/><sp/>cache.<ref refid="classShaderBytecodeCache_1ae350c1069643f21cee52cb928aa80aa3" kindref="member">markEntryAsPending</ref>(entryIds);</highlight></codeline>
<codeline lineno="2003"><highlight class="normal"></highlight></codeline>
<codeline lineno="2004"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>hash_variant_src<sp/>=<sp/>[](</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classShaderVariant_1_1VariantSrc" kindref="compound">ShaderVariant::VariantSrc</ref><sp/>&amp;src,<sp/>uint64_t<sp/>&amp;result)<sp/>{</highlight></codeline>
<codeline lineno="2005"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classShaderVariant_1_1TypeTable" kindref="compound">ShaderVariant::TypeTable</ref><sp/>&amp;types<sp/>=<sp/>src.<ref refid="classShaderVariant_1_1SearchInfo_1ae7ab7b41c1350b7d0cc422832d4481c6" kindref="member">getTypes</ref>();</highlight></codeline>
<codeline lineno="2006"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>types.<ref refid="classShaderVariant_1_1TypeTable_1ad107f77c534bdad10abcdea8f7709a04" kindref="member">getCount</ref>();<sp/>i++)</highlight></codeline>
<codeline lineno="2007"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2008"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>String<sp/>type_name<sp/>=<sp/>types.<ref refid="classShaderVariant_1_1TypeTable_1afb28959c55f9b0b6d2c9feb59c3d08e8" kindref="member">getTypeName</ref>(i);</highlight></codeline>
<codeline lineno="2009"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>eastl::string_view<sp/>type_name_view(type_name.c_str(),<sp/>type_name.size());</highlight></codeline>
<codeline lineno="2010"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>=<sp/>fnv1a_step&lt;64&gt;(</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">uint64_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(eastl::hash&lt;eastl::string_view&gt;()(type_name_view)),<sp/>result);</highlight></codeline>
<codeline lineno="2011"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>=<sp/>fnv1a_step&lt;64&gt;(</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">uint64_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(src.<ref refid="classShaderVariant_1_1SearchInfo_1aa1f92a9c7c4f6e24c9be422636519e8d" kindref="member">getNormalizedValue</ref>(i)),<sp/>result);</highlight></codeline>
<codeline lineno="2012"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2013"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="2014"><highlight class="normal"></highlight></codeline>
<codeline lineno="2015"><highlight class="normal"><sp/><sp/><sp/><sp/>uint64_t<sp/>shader_variant_hash<sp/>=<sp/>0u;</highlight></codeline>
<codeline lineno="2016"><highlight class="normal"><sp/><sp/><sp/><sp/>hash_variant_src(<ref refid="classShaderParser_1_1AssembleShaderEvalCB_1a7c80bebc9e0a9217fa0568c9e7ab1ec9" kindref="member">variant</ref>.<ref refid="structShaderVariant_1_1VariantInfo_1aeba13a45242d5103ce06de0d54b64ed7" kindref="member">stat</ref>,<sp/>shader_variant_hash);</highlight></codeline>
<codeline lineno="2017"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classShaderParser_1_1AssembleShaderEvalCB_1a7c80bebc9e0a9217fa0568c9e7ab1ec9" kindref="member">variant</ref>.<ref refid="structShaderVariant_1_1VariantInfo_1ad4fccf953d3032b53c1bb675298d4d6e" kindref="member">dyn</ref>)</highlight></codeline>
<codeline lineno="2018"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>hash_variant_src(*<ref refid="classShaderParser_1_1AssembleShaderEvalCB_1a7c80bebc9e0a9217fa0568c9e7ab1ec9" kindref="member">variant</ref>.<ref refid="structShaderVariant_1_1VariantInfo_1ad4fccf953d3032b53c1bb675298d4d6e" kindref="member">dyn</ref>,<sp/>shader_variant_hash);</highlight></codeline>
<codeline lineno="2019"><highlight class="normal"></highlight></codeline>
<codeline lineno="2020"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classCompileShaderJob" kindref="compound">CompileShaderJob</ref><sp/>*job<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="classCompileShaderJob" kindref="compound">CompileShaderJob</ref>{</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>hlsl,<sp/>stage,<sp/>hlsl.symbol,<sp/>code_blocks,<sp/>shader_variant_hash};</highlight></codeline>
<codeline lineno="2021"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceshc_1a196bec5ea00287d23be548089457adff" kindref="member">shc::add_job</ref>(job,<sp/><ref refid="namespaceshc_1a053e03af98ca26e8ba24b8ac5f78fa45a1ebd8dbf8c34e255f5cbf28f35860b71" kindref="member">shc::JobMgrChoiceStrategy::ROUND_ROBIN</ref>);</highlight></codeline>
<codeline lineno="2022"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2023"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2024"><highlight class="normal"></highlight></codeline>
<codeline lineno="2025"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="hashed__cache_8h" kindref="compound">hashed_cache.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2026"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;osApiWrappers/dag_direct.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2027"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;osApiWrappers/dag_files.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2028"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;debug/dag_logSys.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2029"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="sha1__cache__version_8h" kindref="compound">sha1_cache_version.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2030"><highlight class="normal"></highlight></codeline>
<codeline lineno="2031"><highlight class="normal"></highlight><highlight class="comment">//<sp/>@TODO:<sp/>refactor<sp/>hlsl<sp/>stage<sp/>handling<sp/>in<sp/>compilation<sp/>jobs/caching<sp/>code,<sp/>and<sp/>move<sp/>it<sp/>to<sp/>a<sp/>separate<sp/>module.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2032"><highlight class="normal"></highlight></codeline>
<codeline lineno="2033"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*find_line_comment(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*s1,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*s1_end)</highlight></codeline>
<codeline lineno="2034"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2035"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*p<sp/>=<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)memchr(s1,<sp/></highlight><highlight class="charliteral">&apos;/&apos;</highlight><highlight class="normal">,<sp/>s1_end<sp/>-<sp/>s1);</highlight></codeline>
<codeline lineno="2036"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(p<sp/>&amp;&amp;<sp/>p<sp/>+<sp/>1<sp/>&lt;<sp/>s1_end)</highlight></codeline>
<codeline lineno="2037"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="2038"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(p[1]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;/&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="2039"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>p;</highlight></codeline>
<codeline lineno="2040"><highlight class="normal"><sp/><sp/><sp/><sp/>p<sp/>=<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)memchr(p<sp/>+<sp/>2,<sp/></highlight><highlight class="charliteral">&apos;/&apos;</highlight><highlight class="normal">,<sp/>s1_end<sp/>-<sp/>p<sp/>-<sp/>2);</highlight></codeline>
<codeline lineno="2041"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2042"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2043"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2044"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*get_next_line_trail_to_strip(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*c_start,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>hold_file_line)</highlight></codeline>
<codeline lineno="2045"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2046"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*next_line<sp/>=<sp/>strstr(c_start,<sp/></highlight><highlight class="stringliteral">&quot;\n#line<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2047"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*next_line2<sp/>=<sp/>next_line<sp/>?<sp/>find_line_comment(c_start,<sp/>next_line)<sp/>:<sp/>strstr(c_start,<sp/></highlight><highlight class="stringliteral">&quot;//&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2048"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(next_line2<sp/>&amp;&amp;<sp/>(!next_line<sp/>||<sp/>next_line2<sp/>&lt;<sp/>next_line))</highlight></codeline>
<codeline lineno="2049"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="2050"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(next_line2<sp/>&gt;<sp/>c_start<sp/>&amp;&amp;<sp/>(*(next_line2<sp/>-<sp/>1)<sp/>==<sp/></highlight><highlight class="charliteral">&apos;<sp/>&apos;</highlight><highlight class="normal"><sp/>||<sp/>*(next_line2<sp/>-<sp/>1)<sp/>==<sp/></highlight><highlight class="charliteral">&apos;\t&apos;</highlight><highlight class="normal">))</highlight></codeline>
<codeline lineno="2051"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>next_line2--;</highlight></codeline>
<codeline lineno="2052"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(next_line2<sp/>&gt;<sp/>c_start<sp/>&amp;&amp;<sp/>*(next_line2<sp/>-<sp/>1)<sp/>==<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="2053"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>next_line2--;</highlight></codeline>
<codeline lineno="2054"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>next_line2;</highlight></codeline>
<codeline lineno="2055"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2056"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(hold_file_line<sp/>&amp;&amp;<sp/>next_line<sp/>&amp;&amp;<sp/>strncmp(next_line,<sp/></highlight><highlight class="stringliteral">&quot;\n#line<sp/>1<sp/>\&quot;precompiled\&quot;&quot;</highlight><highlight class="normal">,<sp/>22)<sp/>!=<sp/>0)</highlight></codeline>
<codeline lineno="2057"><highlight class="normal"><sp/><sp/><sp/><sp/>next_line<sp/>=<sp/>strchr(next_line<sp/>+<sp/>7,<sp/></highlight><highlight class="charliteral">&apos;<sp/>&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2058"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>next_line;</highlight></codeline>
<codeline lineno="2059"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2060"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>calc_sha1_stripped(<ref refid="hashed__cache_8h_1a570b3b725357770701d8b56ea8518aea" kindref="member">HASH_CONTEXT</ref><sp/>&amp;sha1,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*src,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>total_len,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>hold_file_line,</highlight></codeline>
<codeline lineno="2061"><highlight class="normal"><sp/><sp/>String<sp/>*out_stripped<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="2062"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2063"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*c_start<sp/>=<sp/>src,<sp/>*next_line<sp/>=<sp/>src;</highlight></codeline>
<codeline lineno="2064"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(out_stripped)</highlight></codeline>
<codeline lineno="2065"><highlight class="normal"><sp/><sp/><sp/><sp/>out_stripped-&gt;clear();</highlight></codeline>
<codeline lineno="2066"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(c_start<sp/>&amp;&amp;<sp/>(next_line<sp/>=<sp/>get_next_line_trail_to_strip(c_start,<sp/>hold_file_line)))</highlight></codeline>
<codeline lineno="2067"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="2068"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="hashed__cache_8h_1aff56e6812dd2a8d0b940648e0fa81ad0" kindref="member">HASH_UPDATE</ref>(&amp;sha1,<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)c_start,<sp/>(uint32_t)(next_line<sp/>-<sp/>c_start));</highlight></codeline>
<codeline lineno="2069"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(out_stripped)</highlight></codeline>
<codeline lineno="2070"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>out_stripped-&gt;append(c_start,<sp/>(uint32_t)(next_line<sp/>-<sp/>c_start));</highlight></codeline>
<codeline lineno="2071"><highlight class="normal"><sp/><sp/><sp/><sp/>c_start<sp/>=<sp/>strstr(next_line<sp/>+<sp/>1,<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2072"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="2073"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>at<sp/>=<sp/>(c_start<sp/>-<sp/>src);</highlight></codeline>
<codeline lineno="2074"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(c_start<sp/>!=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal"><sp/>&amp;&amp;<sp/>at<sp/>&lt;<sp/>total_len)</highlight></codeline>
<codeline lineno="2075"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="2076"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="hashed__cache_8h_1aff56e6812dd2a8d0b940648e0fa81ad0" kindref="member">HASH_UPDATE</ref>(&amp;sha1,<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)c_start,<sp/>(uint32_t)(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">(total_len)<sp/>-<sp/>at));</highlight></codeline>
<codeline lineno="2077"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(out_stripped)</highlight></codeline>
<codeline lineno="2078"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>out_stripped-&gt;append(c_start,<sp/>(uint32_t)(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">(total_len)<sp/>-<sp/>at));</highlight></codeline>
<codeline lineno="2079"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2080"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2081"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>String<sp/>make_dump_filepath(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*shaderName,<sp/>uint64_t<sp/>shader_variant_hash,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*shader_sha1)</highlight></codeline>
<codeline lineno="2082"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2083"><highlight class="normal"><sp/><sp/>String<sp/>filepath;</highlight></codeline>
<codeline lineno="2084"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*log_fn<sp/>=<sp/>get_log_filename())</highlight></codeline>
<codeline lineno="2085"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="2086"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*ext<sp/>=<sp/>dd_get_fname_ext(log_fn))</highlight></codeline>
<codeline lineno="2087"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>filepath.printf(0,<sp/></highlight><highlight class="stringliteral">&quot;%.*s/&quot;</highlight><highlight class="normal">,<sp/>ext<sp/>-<sp/>log_fn,<sp/>log_fn);</highlight></codeline>
<codeline lineno="2088"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*p<sp/>=<sp/>dd_get_fname(log_fn))</highlight></codeline>
<codeline lineno="2089"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>filepath.printf(0,<sp/></highlight><highlight class="stringliteral">&quot;%.*s./dumps/&quot;</highlight><highlight class="normal">,<sp/>p<sp/>-<sp/>log_fn,<sp/>log_fn);</highlight></codeline>
<codeline lineno="2090"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2091"><highlight class="normal"><sp/><sp/>filepath.aprintf(0,<sp/></highlight><highlight class="stringliteral">&quot;%s_%08x_%s&quot;</highlight><highlight class="normal">,<sp/>shaderName,<sp/>shader_variant_hash,<sp/>shader_sha1);</highlight></codeline>
<codeline lineno="2092"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>filepath;</highlight></codeline>
<codeline lineno="2093"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2094"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>dump_hlsl_src(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*compileCtx,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*source,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>eastl::vector&lt;uint8_t&gt;<sp/>&amp;bytecode,<sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2095"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*sha1SrcPath,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>reused,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*shaderName,<sp/>uint64_t<sp/>shader_variant_hash)</highlight></codeline>
<codeline lineno="2096"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2097"><highlight class="normal"><sp/><sp/><ref refid="hashed__cache_8h_1a570b3b725357770701d8b56ea8518aea" kindref="member">HASH_CONTEXT</ref><sp/>sha1;</highlight></codeline>
<codeline lineno="2098"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>shader_sha1[<ref refid="hashed__cache_8h_1ad6074dd11ab3c97c8135c43aab03ae95" kindref="member">HASH_SIZE</ref>];</highlight></codeline>
<codeline lineno="2099"><highlight class="normal"><sp/><sp/>String<sp/>shader_sha1_s,<sp/>status;</highlight></codeline>
<codeline lineno="2100"><highlight class="normal"><sp/><sp/><ref refid="hashed__cache_8h_1adcd60db457233e4a407009f6d4ceea48" kindref="member">HASH_INIT</ref>(&amp;sha1);</highlight></codeline>
<codeline lineno="2101"><highlight class="normal"><sp/><sp/><ref refid="hashed__cache_8h_1aff56e6812dd2a8d0b940648e0fa81ad0" kindref="member">HASH_UPDATE</ref>(&amp;sha1,<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)bytecode.data(),<sp/>bytecode.size());</highlight></codeline>
<codeline lineno="2102"><highlight class="normal"><sp/><sp/><ref refid="hashed__cache_8h_1a8fb0342e9d1a05b36d12bd79eee1b769" kindref="member">HASH_FINISH</ref>(&amp;sha1,<sp/>shader_sha1);</highlight></codeline>
<codeline lineno="2103"><highlight class="normal"><sp/><sp/>data_to_str_hex(shader_sha1_s,<sp/>shader_sha1,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(shader_sha1));</highlight></codeline>
<codeline lineno="2104"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(bytecode.empty())</highlight></codeline>
<codeline lineno="2105"><highlight class="normal"><sp/><sp/><sp/><sp/>status<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;failed<sp/>to<sp/>compile&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2106"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(reused)</highlight></codeline>
<codeline lineno="2107"><highlight class="normal"><sp/><sp/><sp/><sp/>status.printf(0,<sp/></highlight><highlight class="stringliteral">&quot;reused<sp/>built<sp/>%s<sp/>from<sp/>(%s)&quot;</highlight><highlight class="normal">,<sp/>shader_sha1_s,<sp/>sha1SrcPath);</highlight></codeline>
<codeline lineno="2108"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sha1SrcPath<sp/>&amp;&amp;<sp/>*sha1SrcPath)</highlight></codeline>
<codeline lineno="2109"><highlight class="normal"><sp/><sp/><sp/><sp/>status.printf(0,<sp/></highlight><highlight class="stringliteral">&quot;built<sp/>%s<sp/>and<sp/>stored<sp/>as<sp/>(%s)&quot;</highlight><highlight class="normal">,<sp/>shader_sha1_s,<sp/>sha1SrcPath);</highlight></codeline>
<codeline lineno="2110"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2111"><highlight class="normal"><sp/><sp/><sp/><sp/>status.printf(0,<sp/></highlight><highlight class="stringliteral">&quot;built<sp/>%s&quot;</highlight><highlight class="normal">,<sp/>shader_sha1_s);</highlight></codeline>
<codeline lineno="2112"><highlight class="normal"></highlight></codeline>
<codeline lineno="2113"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="namespaceshc_1a47efde6b3d493adbe2119a5593807d36" kindref="member">shc::config</ref>().hlslDumpCodeSeparate)</highlight></codeline>
<codeline lineno="2114"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="2115"><highlight class="normal"><sp/><sp/><sp/><sp/>String<sp/>fn<sp/>=<sp/>make_dump_filepath(shaderName,<sp/>shader_variant_hash,<sp/>shader_sha1_s);</highlight></codeline>
<codeline lineno="2116"><highlight class="normal"><sp/><sp/><sp/><sp/>dd_mkpath(fn);</highlight></codeline>
<codeline lineno="2117"><highlight class="normal"><sp/><sp/><sp/><sp/>FullFileSaveCB<sp/>cwr(fn);</highlight></codeline>
<codeline lineno="2118"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cwr.fileHandle)</highlight></codeline>
<codeline lineno="2119"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*prolog_str<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;===<sp/>compiling<sp/>code:\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*epilog_str<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;\n==&gt;<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cwr.write(prolog_str,<sp/>strlen(prolog_str));</highlight></codeline>
<codeline lineno="2123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cwr.write(compileCtx,<sp/>strlen(compileCtx));</highlight></codeline>
<codeline lineno="2124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cwr.write(</highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">,<sp/>1);</highlight></codeline>
<codeline lineno="2125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cwr.write(source,<sp/>strlen(source));</highlight></codeline>
<codeline lineno="2126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cwr.write(epilog_str,<sp/>strlen(epilog_str));</highlight></codeline>
<codeline lineno="2127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cwr.write(status,<sp/>strlen(status));</highlight></codeline>
<codeline lineno="2128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cwr.write(</highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">,<sp/>1);</highlight></codeline>
<codeline lineno="2129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>String<sp/>src_stripped;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>calc_sha1_stripped(sha1,<sp/>source,<sp/>strlen(source),<sp/>false,<sp/>&amp;src_stripped);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>cwr.write(src_stripped,<sp/>strlen(src_stripped));</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>debug(</highlight><highlight class="stringliteral">&quot;===<sp/>written<sp/>dump<sp/>to:%s&quot;</highlight><highlight class="normal">,<sp/>fn);</highlight></codeline>
<codeline lineno="2133"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2134"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>logwarn(</highlight><highlight class="stringliteral">&quot;===<sp/>cannot<sp/>write<sp/>dump<sp/>to:%s&quot;</highlight><highlight class="normal">,<sp/>fn);</highlight></codeline>
<codeline lineno="2136"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!bytecode.empty())<sp/></highlight><highlight class="comment">//<sp/>when<sp/>successfl<sp/>build<sp/>we<sp/>don&apos;t<sp/>need<sp/>to<sp/>duplicate<sp/>dump<sp/>to<sp/>log</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2138"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2139"><highlight class="normal"></highlight></codeline>
<codeline lineno="2140"><highlight class="normal"><sp/><sp/>debug(</highlight><highlight class="stringliteral">&quot;===<sp/>compiling<sp/>code:\n%s\n%s\n%s&quot;</highlight><highlight class="normal">,<sp/>compileCtx,<sp/>source,<sp/>status);</highlight></codeline>
<codeline lineno="2141"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2142"><highlight class="normal"></highlight></codeline>
<codeline lineno="2143"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classCompileShaderJob_1adfe72ca3945bf4e769508e3ed6e3e7c2" kindref="member">CompileShaderJob::doJobBody</ref>()</highlight></codeline>
<codeline lineno="2144"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2145"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>@TODO:<sp/>it<sp/>should<sp/>be<sp/>const<sp/>in<sp/>fields!</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2146"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classshc_1_1ShaderContext" kindref="compound">shc::ShaderContext</ref><sp/>&amp;sctx<sp/>=<sp/>ctx;</highlight></codeline>
<codeline lineno="2147"><highlight class="normal"></highlight></codeline>
<codeline lineno="2148"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>sha1SrcPath[420];</highlight></codeline>
<codeline lineno="2149"><highlight class="normal"><sp/><sp/>sha1SrcPath[0]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2150"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>srcSha1[<ref refid="hashed__cache_8h_1ad6074dd11ab3c97c8135c43aab03ae95" kindref="member">HASH_SIZE</ref>];</highlight></codeline>
<codeline lineno="2151"><highlight class="normal"></highlight></codeline>
<codeline lineno="2152"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>_CROSS_TARGET_DX12</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2153"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strstr(source,<sp/></highlight><highlight class="stringliteral">&quot;SV_ViewID&quot;</highlight><highlight class="normal">))</highlight></codeline>
<codeline lineno="2154"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="2155"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(profile[3]<sp/>&lt;<sp/></highlight><highlight class="charliteral">&apos;6&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="2156"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>profile[3]<sp/>=<sp/></highlight><highlight class="charliteral">&apos;6&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>profile[5]<sp/>=<sp/></highlight><highlight class="charliteral">&apos;1&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2159"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2160"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(profile[3]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;6&apos;</highlight><highlight class="normal"><sp/>&amp;&amp;<sp/>profile[5]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;0&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="2161"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>profile[5]<sp/>=<sp/></highlight><highlight class="charliteral">&apos;1&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2163"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2164"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2165"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2166"><highlight class="normal"></highlight></codeline>
<codeline lineno="2167"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>sourceLen<sp/>=<sp/>(unsigned)strlen(source);</highlight></codeline>
<codeline lineno="2168"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="namespaceshc_1a47efde6b3d493adbe2119a5593807d36" kindref="member">shc::config</ref>().<ref refid="structshc_1_1CompilerConfig_1a75998b9323a200903938d4e6761d4598" kindref="member">useSha1Cache</ref>)</highlight></codeline>
<codeline lineno="2169"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="2170"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>enableBindlessVar<sp/>=<sp/><ref refid="namespaceshc_1a47efde6b3d493adbe2119a5593807d36" kindref="member">shc::config</ref>().<ref refid="structshc_1_1CompilerConfig_1a4b837b76cbc27d82052a7d67d8d138c1" kindref="member">enableBindless</ref>;</highlight></codeline>
<codeline lineno="2171"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isDebugModeEnabledVar<sp/>=<sp/>sctx.<ref refid="classshc_1_1ShaderContext_1a3a6d8c9c28e9c7bd6dfd806d77b1ced9" kindref="member">isDebugModeEnabled</ref>();</highlight></codeline>
<codeline lineno="2172"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>hlslOptimizationLevelVar<sp/>=<sp/><ref refid="namespaceshc_1a47efde6b3d493adbe2119a5593807d36" kindref="member">shc::config</ref>().<ref refid="structshc_1_1CompilerConfig_1a07709c18553c05f849ca4119010a3525" kindref="member">hlslOptimizationLevel</ref>;</highlight></codeline>
<codeline lineno="2173"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>hlsl2021Var<sp/>=<sp/><ref refid="namespaceshc_1a47efde6b3d493adbe2119a5593807d36" kindref="member">shc::config</ref>().<ref refid="structshc_1_1CompilerConfig_1a7931cab87a121710b0a7cc62aaf71609" kindref="member">hlsl2021</ref>;</highlight></codeline>
<codeline lineno="2174"><highlight class="normal"></highlight></codeline>
<codeline lineno="2175"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="hashed__cache_8h_1a570b3b725357770701d8b56ea8518aea" kindref="member">HASH_CONTEXT</ref><sp/>sha1;</highlight></codeline>
<codeline lineno="2176"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="hashed__cache_8h_1adcd60db457233e4a407009f6d4ceea48" kindref="member">HASH_INIT</ref>(&amp;sha1);</highlight></codeline>
<codeline lineno="2177"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="hashed__cache_8h_1aff56e6812dd2a8d0b940648e0fa81ad0" kindref="member">HASH_UPDATE</ref>(&amp;sha1,<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)&amp;sha1_cache_version,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(sha1_cache_version));</highlight></codeline>
<codeline lineno="2178"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>HASH_UPDATE(<sp/>&amp;sha1,<sp/>(const<sp/>unsigned<sp/>char*)source.c_str(),<sp/>(uint32_t)sourceLen<sp/>);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2179"><highlight class="normal"><sp/><sp/><sp/><sp/>calc_sha1_stripped(sha1,<sp/>source.c_str(),<sp/>(uint32_t)sourceLen,<sp/>isDebugModeEnabledVar);</highlight></codeline>
<codeline lineno="2180"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="hashed__cache_8h_1aff56e6812dd2a8d0b940648e0fa81ad0" kindref="member">HASH_UPDATE</ref>(&amp;sha1,<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)profile.c_str(),<sp/>(uint32_t)strlen(profile));</highlight></codeline>
<codeline lineno="2181"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="hashed__cache_8h_1aff56e6812dd2a8d0b940648e0fa81ad0" kindref="member">HASH_UPDATE</ref>(&amp;sha1,<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)entry.c_str(),<sp/>(uint32_t)strlen(entry));</highlight></codeline>
<codeline lineno="2182"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>optimization<sp/>level<sp/>is<sp/>a<sp/>part<sp/>of<sp/>output<sp/>dir,<sp/>but<sp/>still</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2183"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="hashed__cache_8h_1aff56e6812dd2a8d0b940648e0fa81ad0" kindref="member">HASH_UPDATE</ref>(&amp;sha1,<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)&amp;hlslOptimizationLevelVar,<sp/>(uint32_t)</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(hlslOptimizationLevelVar));</highlight></codeline>
<codeline lineno="2184"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="hashed__cache_8h_1aff56e6812dd2a8d0b940648e0fa81ad0" kindref="member">HASH_UPDATE</ref>(&amp;sha1,<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)&amp;hlsl2021Var,<sp/>(uint32_t)</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(hlsl2021Var));</highlight></codeline>
<codeline lineno="2185"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="hashed__cache_8h_1aff56e6812dd2a8d0b940648e0fa81ad0" kindref="member">HASH_UPDATE</ref>(&amp;sha1,<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)&amp;enableFp16,<sp/>(uint32_t)</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(enableFp16));</highlight></codeline>
<codeline lineno="2186"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="hashed__cache_8h_1aff56e6812dd2a8d0b940648e0fa81ad0" kindref="member">HASH_UPDATE</ref>(&amp;sha1,<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)&amp;enableBindlessVar,<sp/>(uint32_t)</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(enableBindlessVar));</highlight></codeline>
<codeline lineno="2187"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>_CROSS_TARGET_SPIRV</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2188"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>mode<sp/>=</highlight></codeline>
<codeline lineno="2189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceshc_1a47efde6b3d493adbe2119a5593807d36" kindref="member">shc::config</ref>().compilerDXC<sp/>?<sp/>CompilerMode::DXC<sp/>:<sp/>(<ref refid="namespaceshc_1a47efde6b3d493adbe2119a5593807d36" kindref="member">shc::config</ref>().compilerHlslCc<sp/>?<sp/>CompilerMode::HLSLCC<sp/>:<sp/>CompilerMode::DEFAULT);</highlight></codeline>
<codeline lineno="2190"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="hashed__cache_8h_1aff56e6812dd2a8d0b940648e0fa81ad0" kindref="member">HASH_UPDATE</ref>(&amp;sha1,<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)&amp;mode,<sp/>(uint32_t)</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(mode));</highlight></codeline>
<codeline lineno="2191"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>_CROSS_TARGET_DX12</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2192"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>platform<sp/>=<sp/><ref refid="namespaceshc_1a47efde6b3d493adbe2119a5593807d36" kindref="member">shc::config</ref>().targetPlatform;</highlight></codeline>
<codeline lineno="2193"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="hashed__cache_8h_1aff56e6812dd2a8d0b940648e0fa81ad0" kindref="member">HASH_UPDATE</ref>(&amp;sha1,<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)&amp;platform,<sp/>(uint32_t)</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(platform));</highlight></codeline>
<codeline lineno="2194"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="hashed__cache_8h_1aff56e6812dd2a8d0b940648e0fa81ad0" kindref="member">HASH_UPDATE</ref>(&amp;sha1,<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)&amp;<ref refid="assemblyShader_8h_1a0f794d6b691ebbcb2261a57b0844976f" kindref="member">useScarlettWave32</ref>,<sp/>(uint32_t)</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="assemblyShader_8h_1a0f794d6b691ebbcb2261a57b0844976f" kindref="member">useScarlettWave32</ref>));</highlight></codeline>
<codeline lineno="2195"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2196"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>_CROSS_TARGET_SPIRV<sp/>|<sp/>_CROSS_TARGET_METAL</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2197"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*dxcVer<sp/>=<sp/>spirv::getDXCVerString(<ref refid="namespaceshc_1a47efde6b3d493adbe2119a5593807d36" kindref="member">shc::config</ref>().dxcContext);</highlight></codeline>
<codeline lineno="2198"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="hashed__cache_8h_1aff56e6812dd2a8d0b940648e0fa81ad0" kindref="member">HASH_UPDATE</ref>(&amp;sha1,<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)dxcVer,<sp/>(uint32_t)strlen(dxcVer));</highlight></codeline>
<codeline lineno="2199"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>String<sp/>&amp;i<sp/>:<sp/><ref refid="namespaceshc" kindref="compound">shc</ref>::<ref refid="namespaceshc_1a47efde6b3d493adbe2119a5593807d36" kindref="member">config</ref>().dxcParams)</highlight></codeline>
<codeline lineno="2200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="hashed__cache_8h_1aff56e6812dd2a8d0b940648e0fa81ad0" kindref="member">HASH_UPDATE</ref>(&amp;sha1,<sp/>(const<sp/>unsigned<sp/>char<sp/>*)i.c_str(),<sp/>(uint32_t)i.size());</highlight></codeline>
<codeline lineno="2201"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2202"><highlight class="normal"></highlight></codeline>
<codeline lineno="2203"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(isDebugModeEnabledVar)</highlight></codeline>
<codeline lineno="2204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="hashed__cache_8h_1aff56e6812dd2a8d0b940648e0fa81ad0" kindref="member">HASH_UPDATE</ref>(&amp;sha1,<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)&amp;isDebugModeEnabledVar,<sp/>(uint32_t)</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(isDebugModeEnabledVar));</highlight></codeline>
<codeline lineno="2205"><highlight class="normal"></highlight></codeline>
<codeline lineno="2206"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="hashed__cache_8h_1a8fb0342e9d1a05b36d12bd79eee1b769" kindref="member">HASH_FINISH</ref>(&amp;sha1,<sp/>srcSha1);</highlight></codeline>
<codeline lineno="2207"><highlight class="normal"></highlight></codeline>
<codeline lineno="2208"><highlight class="normal"><sp/><sp/><sp/><sp/>SNPRINTF(sha1SrcPath,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(sha1SrcPath),<sp/></highlight><highlight class="stringliteral">&quot;%s/src/%s/&quot;</highlight><highlight class="normal"><sp/><ref refid="hashed__cache_8h_1a3b3a37e25c4d802885e54d4dba344be3" kindref="member">HASH_LIST_STRING</ref>,<sp/><ref refid="namespaceshc_1a47efde6b3d493adbe2119a5593807d36" kindref="member">shc::config</ref>().sha1CacheDir,</highlight></codeline>
<codeline lineno="2209"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>profile.c_str(),<sp/></highlight><highlight class="comment">//<sp/>sources<sp/>and<sp/>binaries<sp/>lives<sp/>in<sp/>different<sp/>subfolders.<sp/>that<sp/>is<sp/>to<sp/>reduce<sp/>risk<sp/>of<sp/>collision,<sp/>while<sp/>probably<sp/>not</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>needed</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="hashed__cache_8h_1a15a19082058efde09fbefa1a13bb96e3" kindref="member">HASH_LIST</ref>(srcSha1));</highlight></codeline>
<codeline lineno="2212"><highlight class="normal"><sp/><sp/><sp/><sp/>file_ptr_t<sp/>sha1LinkFile<sp/>=<sp/>df_open(sha1SrcPath,<sp/>DF_READ);</highlight></codeline>
<codeline lineno="2213"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sha1LinkFile)</highlight></codeline>
<codeline lineno="2214"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>sha1BinPath[420];</highlight></codeline>
<codeline lineno="2216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>sha1BinPath[0]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2217"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>buf[132];</highlight></codeline>
<codeline lineno="2218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*binSha1Read<sp/>=<sp/>df_gets((</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)buf,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(buf),<sp/>sha1LinkFile))</highlight></codeline>
<codeline lineno="2219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>sources<sp/>and<sp/>binaries<sp/>lives<sp/>in<sp/>different<sp/>subfolders.<sp/>that<sp/>is<sp/>to<sp/>reduce<sp/>risk<sp/>of<sp/>collision,<sp/>while<sp/>probably<sp/>not<sp/>needed</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2221"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SNPRINTF(sha1BinPath,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(sha1BinPath),<sp/></highlight><highlight class="stringliteral">&quot;%s/bin/%s/%s&quot;</highlight><highlight class="normal">,<sp/><ref refid="namespaceshc_1a47efde6b3d493adbe2119a5593807d36" kindref="member">shc::config</ref>().sha1CacheDir,<sp/>profile.c_str(),<sp/>binSha1Read);</highlight></codeline>
<codeline lineno="2222"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>df_close(sha1LinkFile);</highlight></codeline>
<codeline lineno="2223"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>file_ptr_t<sp/>sha1BinFile<sp/>=<sp/>df_open(sha1BinPath,<sp/>DF_READ);</highlight></codeline>
<codeline lineno="2224"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!sha1BinFile)</highlight></codeline>
<codeline lineno="2225"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2226"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>debug(</highlight><highlight class="stringliteral">&quot;Sha1<sp/>link<sp/>%s<sp/>in<sp/>%s<sp/>is<sp/>invalid.&quot;</highlight><highlight class="normal">,<sp/>sha1BinPath,<sp/>sha1SrcPath);</highlight></codeline>
<codeline lineno="2227"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2228"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2229"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2230"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>sha1FileLen;</highlight></codeline>
<codeline lineno="2231"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*content<sp/>=<sp/>df_mmap(sha1BinFile,<sp/>&amp;sha1FileLen);</highlight></codeline>
<codeline lineno="2232"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!sha1FileLen)</highlight></codeline>
<codeline lineno="2233"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2234"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>debug(</highlight><highlight class="stringliteral">&quot;link<sp/>is<sp/>broken?&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2235"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>df_close(sha1BinFile);</highlight></codeline>
<codeline lineno="2236"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2237"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2238"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2239"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint8_t<sp/>*end_bytecode<sp/>=<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint8_t<sp/>*)content<sp/>+<sp/>sha1FileLen<sp/>-<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="structComputeShaderInfo" kindref="compound">ComputeShaderInfo</ref>);</highlight></codeline>
<codeline lineno="2240"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>compile_result.bytecode.assign((</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint8_t<sp/>*)content,<sp/>end_bytecode);</highlight></codeline>
<codeline lineno="2241"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memcpy(&amp;compile_result.computeShaderInfo,<sp/>end_bytecode,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="structComputeShaderInfo" kindref="compound">ComputeShaderInfo</ref>));</highlight></codeline>
<codeline lineno="2242"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>df_unmap(content,<sp/>sha1FileLen);</highlight></codeline>
<codeline lineno="2243"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>df_close(sha1BinFile);</highlight></codeline>
<codeline lineno="2244"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="namespaceshc_1a47efde6b3d493adbe2119a5593807d36" kindref="member">shc::config</ref>().hlslDumpCodeAlways)</highlight></codeline>
<codeline lineno="2245"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dump_hlsl_src(compileCtx,<sp/>source,<sp/>compile_result.bytecode,<sp/>sha1SrcPath,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/>shaderName,<sp/>shader_variant_hash);</highlight></codeline>
<codeline lineno="2246"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceShaderCompilerStat_1aa075abe041ad03cfb185adebfabe378f" kindref="member">ShaderCompilerStat::hlslExternalCacheHitCount</ref>.fetch_add(1);</highlight></codeline>
<codeline lineno="2247"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2248"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2249"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2250"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2251"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2252"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2253"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>debug(</highlight><highlight class="stringliteral">&quot;Sha1<sp/>link<sp/>in<sp/>%s<sp/>is<sp/>missing.&quot;</highlight><highlight class="normal">,<sp/>sha1SrcPath);</highlight></codeline>
<codeline lineno="2254"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>df_close(sha1LinkFile);</highlight></codeline>
<codeline lineno="2255"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2256"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2257"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2258"><highlight class="normal"></highlight></codeline>
<codeline lineno="2259"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>localHlslOptimizationLevel<sp/>=</highlight></codeline>
<codeline lineno="2260"><highlight class="normal"><sp/><sp/><sp/><sp/>(<ref refid="namespaceshc_1a47efde6b3d493adbe2119a5593807d36" kindref="member">shc::config</ref>().<ref refid="structshc_1_1CompilerConfig_1a1ef797efe3855bf413cd788a87b4d6a5" kindref="member">hlslDebugLevel</ref><sp/>==<sp/><ref refid="DebugLevel_8h_1a1a2e78e667f5d5bd44be96e3abc8a3eea3ae7d840362552f1fc531c00c91a83b4" kindref="member">DebugLevel::FULL_DEBUG_INFO</ref>)<sp/>?<sp/>0<sp/>:<sp/><ref refid="namespaceshc" kindref="compound">shc</ref>::<ref refid="namespaceshc_1a47efde6b3d493adbe2119a5593807d36" kindref="member">config</ref>().hlslOptimizationLevel;</highlight></codeline>
<codeline lineno="2261"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>optimizationLevelHasBeenOverriden<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2262"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>lastOptimizationLevel<sp/>=<sp/>localHlslOptimizationLevel;</highlight></codeline>
<codeline lineno="2263"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>full_debug<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/>forceDisableWarnings<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2264"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>embed_source<sp/>=<sp/><ref refid="namespaceshc_1a47efde6b3d493adbe2119a5593807d36" kindref="member">shc::config</ref>().<ref refid="structshc_1_1CompilerConfig_1ab8150f9586651e5eee7b9c1237c43a93" kindref="member">hlslEmbedSource</ref>;</highlight></codeline>
<codeline lineno="2265"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>useWave32<sp/>=<sp/><ref refid="assemblyShader_8h_1a0f794d6b691ebbcb2261a57b0844976f" kindref="member">useScarlettWave32</ref>;</highlight></codeline>
<codeline lineno="2266"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>waveSpecification<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2267"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>useHlsl2021<sp/>=<sp/><ref refid="namespaceshc_1a47efde6b3d493adbe2119a5593807d36" kindref="member">shc::config</ref>().<ref refid="structshc_1_1CompilerConfig_1a7931cab87a121710b0a7cc62aaf71609" kindref="member">hlsl2021</ref>;</highlight></codeline>
<codeline lineno="2268"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>usePsInvariantPos<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2269"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>_CROSS_TARGET_DX12</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2270"><highlight class="normal"><sp/><sp/>dag::Vector&lt;dxil::StreamOutputComponentInfo&gt;<sp/>streamOutputComponents;</highlight></codeline>
<codeline lineno="2271"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2272"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*pragma<sp/>=<sp/>strstr(source,<sp/></highlight><highlight class="stringliteral">&quot;#pragma<sp/>&quot;</highlight><highlight class="normal">);<sp/>pragma;<sp/>pragma<sp/>=<sp/>strstr(pragma,<sp/></highlight><highlight class="stringliteral">&quot;#pragma<sp/>&quot;</highlight><highlight class="normal">))</highlight></codeline>
<codeline lineno="2273"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="2274"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*original<sp/>=<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)pragma;</highlight></codeline>
<codeline lineno="2275"><highlight class="normal"><sp/><sp/><sp/><sp/>pragma<sp/>+=<sp/>strlen(</highlight><highlight class="stringliteral">&quot;#pragma<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2276"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PRAGMA(b)<sp/>(strncmp(pragma,<sp/>b,<sp/>strlen(b))<sp/>==<sp/>0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2277"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(PRAGMA(</highlight><highlight class="stringliteral">&quot;debugfull&quot;</highlight><highlight class="normal">)<sp/>||<sp/>PRAGMA(</highlight><highlight class="stringliteral">&quot;dfull&quot;</highlight><highlight class="normal">))</highlight></codeline>
<codeline lineno="2278"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2279"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>full_debug<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2280"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>localHlslOptimizationLevel<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2281"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2282"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(PRAGMA(</highlight><highlight class="stringliteral">&quot;embed_source&quot;</highlight><highlight class="normal">))</highlight></codeline>
<codeline lineno="2283"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2284"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>embed_source<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2285"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2286"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(PRAGMA(</highlight><highlight class="stringliteral">&quot;force_disable_warnings&quot;</highlight><highlight class="normal">))</highlight></codeline>
<codeline lineno="2287"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2288"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>forceDisableWarnings<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2289"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2290"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(PRAGMA(</highlight><highlight class="stringliteral">&quot;hlsl2021&quot;</highlight><highlight class="normal">))</highlight></codeline>
<codeline lineno="2291"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2292"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>useHlsl2021<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2293"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2294"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(PRAGMA(</highlight><highlight class="stringliteral">&quot;force_min_opt_level<sp/>&quot;</highlight><highlight class="normal">))</highlight></codeline>
<codeline lineno="2295"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2296"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>pragma<sp/>+=<sp/>strlen(</highlight><highlight class="stringliteral">&quot;force_min_opt_level<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2297"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>localHlslOptimizationLevel<sp/>=<sp/>max(atoi(pragma),<sp/><ref refid="namespaceshc_1a47efde6b3d493adbe2119a5593807d36" kindref="member">shc::config</ref>().hlslOptimizationLevel);</highlight></codeline>
<codeline lineno="2298"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(eastl::exchange(optimizationLevelHasBeenOverriden,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">)<sp/>&amp;&amp;<sp/>localHlslOptimizationLevel<sp/>!=<sp/>lastOptimizationLevel)</highlight></codeline>
<codeline lineno="2299"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2300"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>compile_result.errors.append_sprintf(</highlight><highlight class="stringliteral">&quot;#pragma<sp/>force_min_opt_level<sp/>redefined<sp/>with<sp/>value<sp/>%d<sp/>(previous=%d)&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="2301"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lastOptimizationLevel,<sp/>localHlslOptimizationLevel);</highlight></codeline>
<codeline lineno="2302"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2303"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>lastOptimizationLevel<sp/>=<sp/>localHlslOptimizationLevel;</highlight></codeline>
<codeline lineno="2304"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2305"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>_CROSS_TARGET_C1<sp/>||<sp/>_CROSS_TARGET_C2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2306"><highlight class="normal"></highlight></codeline>
<codeline lineno="2307"><highlight class="normal"></highlight></codeline>
<codeline lineno="2308"><highlight class="normal"></highlight></codeline>
<codeline lineno="2309"><highlight class="normal"></highlight></codeline>
<codeline lineno="2310"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2311"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(PRAGMA(</highlight><highlight class="stringliteral">&quot;wave&quot;</highlight><highlight class="normal">))</highlight></codeline>
<codeline lineno="2312"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2313"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>pragma<sp/>+=<sp/>strlen(</highlight><highlight class="stringliteral">&quot;wave&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2314"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strncmp(pragma,<sp/></highlight><highlight class="stringliteral">&quot;32&quot;</highlight><highlight class="normal">,<sp/>2)<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="2315"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2316"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(waveSpecification<sp/>==<sp/>64)</highlight></codeline>
<codeline lineno="2317"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2318"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>compile_result.errors<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;wave64<sp/>was<sp/>already<sp/>specified,<sp/>now<sp/>seeing<sp/>wave32&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2319"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>debug(</highlight><highlight class="stringliteral">&quot;Hlsl<sp/>compilation<sp/>failed,<sp/>exiting<sp/>job...&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2320"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2321"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2322"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>useWave32<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2323"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>waveSpecification<sp/>=<sp/>32;</highlight></codeline>
<codeline lineno="2324"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2325"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strncmp(pragma,<sp/></highlight><highlight class="stringliteral">&quot;64&quot;</highlight><highlight class="normal">,<sp/>2)<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="2326"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2327"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(waveSpecification<sp/>==<sp/>32)</highlight></codeline>
<codeline lineno="2328"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2329"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>compile_result.errors<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;wave32<sp/>was<sp/>already<sp/>specified,<sp/>now<sp/>seeing<sp/>wave64&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2330"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>debug(</highlight><highlight class="stringliteral">&quot;Hlsl<sp/>compilation<sp/>failed,<sp/>exiting<sp/>job...&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2331"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2332"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2333"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>useWave32<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2334"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>waveSpecification<sp/>=<sp/>64;</highlight></codeline>
<codeline lineno="2335"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2336"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strncmp(pragma,<sp/></highlight><highlight class="stringliteral">&quot;def&quot;</highlight><highlight class="normal">,<sp/>3)<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="2337"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2338"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>waves<sp/>=<sp/><ref refid="assemblyShader_8h_1a0f794d6b691ebbcb2261a57b0844976f" kindref="member">useScarlettWave32</ref><sp/>?<sp/>32<sp/>:<sp/>64;</highlight></codeline>
<codeline lineno="2339"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(waveSpecification<sp/>==<sp/>32<sp/>&amp;&amp;<sp/>waves<sp/>!=<sp/>32)</highlight></codeline>
<codeline lineno="2340"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2341"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>compile_result.errors<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;wave32<sp/>was<sp/>already<sp/>specified,<sp/>now<sp/>seeing<sp/>wave64<sp/>as<sp/>def&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2342"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>debug(</highlight><highlight class="stringliteral">&quot;Hlsl<sp/>compilation<sp/>failed,<sp/>exiting<sp/>job...&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2343"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2344"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2345"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(waveSpecification<sp/>==<sp/>64<sp/>&amp;&amp;<sp/>waves<sp/>!=<sp/>64)</highlight></codeline>
<codeline lineno="2346"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2347"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>compile_result.errors<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;wave64<sp/>was<sp/>already<sp/>specified,<sp/>now<sp/>seeing<sp/>wave32<sp/>as<sp/>def&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2348"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>debug(</highlight><highlight class="stringliteral">&quot;Hlsl<sp/>compilation<sp/>failed,<sp/>exiting<sp/>job...&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2349"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2350"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2351"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>useWave32<sp/>=<sp/><ref refid="assemblyShader_8h_1a0f794d6b691ebbcb2261a57b0844976f" kindref="member">useScarlettWave32</ref>;</highlight></codeline>
<codeline lineno="2352"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>waveSpecification<sp/>=<sp/>waves;</highlight></codeline>
<codeline lineno="2353"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2354"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2355"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(PRAGMA(</highlight><highlight class="stringliteral">&quot;stream_output&quot;</highlight><highlight class="normal">)<sp/>&amp;&amp;<sp/>isspace(*(pragma<sp/>+<sp/><ref refid="commonUtils_8h_1a514d093bec84d424a39236e710bb0245" kindref="member">LITSTR_LEN</ref>(</highlight><highlight class="stringliteral">&quot;stream_output&quot;</highlight><highlight class="normal">))))</highlight></codeline>
<codeline lineno="2356"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2357"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Stream<sp/>output<sp/>is<sp/>implemented<sp/>only<sp/>for<sp/>DX12<sp/>now.<sp/>This<sp/>pragma<sp/>is<sp/>ignored<sp/>for<sp/>other<sp/>targets.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2358"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>_CROSS_TARGET_DX12</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2359"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>streamOutputComponent<sp/>=<sp/>parsePragmaStreamOutput(pragma);</highlight></codeline>
<codeline lineno="2360"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!streamOutputComponent)</highlight></codeline>
<codeline lineno="2361"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;<sp/></highlight><highlight class="comment">//<sp/>Compilation<sp/>failed<sp/>due<sp/>to<sp/>invalid<sp/>stream<sp/>output<sp/>declaration</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2362"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>streamOutputComponents.push_back(*streamOutputComponent);</highlight></codeline>
<codeline lineno="2363"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2364"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2365"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2366"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2367"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>replace<sp/>#pragma<sp/>with<sp/>comment</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2368"><highlight class="normal"><sp/><sp/><sp/><sp/>memcpy(original,<sp/></highlight><highlight class="stringliteral">&quot;//<sp/><sp/><sp/><sp/><sp/>&quot;</highlight><highlight class="normal">,<sp/><ref refid="commonUtils_8h_1a514d093bec84d424a39236e710bb0245" kindref="member">LITSTR_LEN</ref>(</highlight><highlight class="stringliteral">&quot;#pragma&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="2369"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2370"><highlight class="normal"></highlight></codeline>
<codeline lineno="2371"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>_CROSS_TARGET_METAL<sp/>||<sp/>_CROSS_TARGET_SPIRV</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2372"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="debugSpitfile_8cpp_1adee5e5812073317d58c113be5cead4e3" kindref="member">debug_output_dir_shader_name</ref>)</highlight></codeline>
<codeline lineno="2373"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="debugSpitfile_8cpp_1a480f0a5136f98bbdc1f03c3902a71922" kindref="member">spitfile</ref>(shaderName,<sp/>entry,<sp/></highlight><highlight class="stringliteral">&quot;intervals&quot;</highlight><highlight class="normal">,<sp/>shader_variant_hash,<sp/>compileCtx.data(),<sp/>data_size(compileCtx),</highlight></codeline>
<codeline lineno="2374"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="debugSpitfile_8cpp_1adee5e5812073317d58c113be5cead4e3" kindref="member">debug_output_dir_shader_name</ref>);</highlight></codeline>
<codeline lineno="2375"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2376"><highlight class="normal"></highlight></codeline>
<codeline lineno="2377"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>Compile.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2378"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>_CROSS_TARGET_EMPTY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2379"><highlight class="normal"><sp/><sp/>compile_result.bytecode.resize(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(uint64_t));</highlight></codeline>
<codeline lineno="2380"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>_CROSS_TARGET_C1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2381"><highlight class="normal"></highlight></codeline>
<codeline lineno="2382"><highlight class="normal"></highlight></codeline>
<codeline lineno="2383"><highlight class="normal"></highlight></codeline>
<codeline lineno="2384"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>_CROSS_TARGET_C2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2385"><highlight class="normal"></highlight></codeline>
<codeline lineno="2386"><highlight class="normal"></highlight></codeline>
<codeline lineno="2387"><highlight class="normal"></highlight></codeline>
<codeline lineno="2388"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>_CROSS_TARGET_METAL</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2389"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="namespaceshc_1a47efde6b3d493adbe2119a5593807d36" kindref="member">shc::config</ref>().dxcContext)</highlight></codeline>
<codeline lineno="2390"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="2391"><highlight class="normal"><sp/><sp/><sp/><sp/>compile_result<sp/>=<sp/>compileShaderMetal(<ref refid="namespaceshc_1a47efde6b3d493adbe2119a5593807d36" kindref="member">shc::config</ref>().dxcContext,<sp/>source,<sp/>profile,<sp/>entry,<sp/>!<ref refid="namespaceshc_1a47efde6b3d493adbe2119a5593807d36" kindref="member">shc::config</ref>().hlslNoDisassembly,</highlight></codeline>
<codeline lineno="2392"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>useHlsl2021,<sp/>enableFp16,<sp/><ref refid="namespaceshc_1a47efde6b3d493adbe2119a5593807d36" kindref="member">shc::config</ref>().hlslSkipValidation,<sp/>localHlslOptimizationLevel<sp/>?<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal"><sp/>:<sp/>false,<sp/>max_constants_no,</highlight></codeline>
<codeline lineno="2393"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>shaderName,<sp/><ref refid="namespaceshc" kindref="compound">shc</ref>::<ref refid="namespaceshc_1a47efde6b3d493adbe2119a5593807d36" kindref="member">config</ref>().useIosToken,<sp/><ref refid="namespaceshc" kindref="compound">shc</ref>::<ref refid="namespaceshc_1a47efde6b3d493adbe2119a5593807d36" kindref="member">config</ref>().useBinaryMsl,<sp/>shader_variant_hash,<sp/><ref refid="namespaceshc" kindref="compound">shc</ref>::<ref refid="namespaceshc_1a47efde6b3d493adbe2119a5593807d36" kindref="member">config</ref>().enableBindless);</highlight></codeline>
<codeline lineno="2394"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2395"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2396"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="2397"><highlight class="normal"><sp/><sp/><sp/><sp/>compile_result.bytecode.resize(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(uint64_t));</highlight></codeline>
<codeline lineno="2398"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2399"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>_CROSS_TARGET_SPIRV</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2400"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="namespaceshc_1a47efde6b3d493adbe2119a5593807d36" kindref="member">shc::config</ref>().dxcContext)</highlight></codeline>
<codeline lineno="2401"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="2402"><highlight class="normal"><sp/><sp/><sp/><sp/>compile_result<sp/>=</highlight></codeline>
<codeline lineno="2403"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>compileShaderSpirV(<ref refid="namespaceshc_1a47efde6b3d493adbe2119a5593807d36" kindref="member">shc::config</ref>().dxcContext,<sp/>source,<sp/>profile,<sp/>entry,<sp/>!<ref refid="namespaceshc_1a47efde6b3d493adbe2119a5593807d36" kindref="member">shc::config</ref>().hlslNoDisassembly,<sp/>useHlsl2021,<sp/>enableFp16,</highlight></codeline>
<codeline lineno="2404"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceshc_1a47efde6b3d493adbe2119a5593807d36" kindref="member">shc::config</ref>().hlslSkipValidation,<sp/>localHlslOptimizationLevel<sp/>?<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal"><sp/>:<sp/>false,<sp/>max_constants_no,<sp/>shaderName,</highlight></codeline>
<codeline lineno="2405"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceshc" kindref="compound">shc</ref>::<ref refid="namespaceshc_1a47efde6b3d493adbe2119a5593807d36" kindref="member">config</ref>().compilerDXC<sp/><sp/><sp/><sp/><sp/><sp/>?<sp/>CompilerMode::DXC</highlight></codeline>
<codeline lineno="2406"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/><ref refid="namespaceshc" kindref="compound">shc</ref>::<ref refid="namespaceshc_1a47efde6b3d493adbe2119a5593807d36" kindref="member">config</ref>().compilerHlslCc<sp/>?<sp/>CompilerMode::HLSLCC</highlight></codeline>
<codeline lineno="2407"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>CompilerMode::<ref refid="cppStcodePlatformInfo_8h_1a67d6bd111736197f5943a0493f1dbf05a5b39c8b553c821e7cddc6da64b5bd2ee" kindref="member">DEFAULT</ref>,</highlight></codeline>
<codeline lineno="2408"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>shader_variant_hash,<sp/><ref refid="namespaceshc" kindref="compound">shc</ref>::<ref refid="namespaceshc_1a47efde6b3d493adbe2119a5593807d36" kindref="member">config</ref>().enableBindless,<sp/>full_debug<sp/>||<sp/><ref refid="namespaceshc" kindref="compound">shc</ref>::<ref refid="namespaceshc_1a47efde6b3d493adbe2119a5593807d36" kindref="member">config</ref>().hlslDebugLevel<sp/>!=<sp/><ref refid="DebugLevel_8h_1a1a2e78e667f5d5bd44be96e3abc8a3ee" kindref="member">DebugLevel</ref>::<ref refid="DebugLevel_8h_1a1a2e78e667f5d5bd44be96e3abc8a3eeab50339a10e1de285ac99d4c3990b8693" kindref="member">NONE</ref>,</highlight></codeline>
<codeline lineno="2409"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceshc" kindref="compound">shc</ref>::<ref refid="namespaceshc_1a47efde6b3d493adbe2119a5593807d36" kindref="member">config</ref>().dumpSpirvOnly);</highlight></codeline>
<codeline lineno="2410"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2411"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2412"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="2413"><highlight class="normal"><sp/><sp/><sp/><sp/>compile_result.bytecode.resize(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(uint64_t));</highlight></codeline>
<codeline lineno="2414"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2415"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>_CROSS_TARGET_DX12</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2416"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>NOTE:<sp/>when<sp/>we<sp/>support<sp/>this<sp/>kind<sp/>of<sp/>switch<sp/>somehow<sp/>this<sp/>can<sp/>be<sp/>replaced<sp/>with<sp/>actual<sp/>information</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2417"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>of<sp/>use<sp/>or<sp/>not</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2418"><highlight class="normal"><sp/><sp/>compile_result<sp/>=<sp/>dx12::dxil::compileShader(make_span_const(source).first(sourceLen),<sp/></highlight><highlight class="comment">//<sp/>source<sp/>length<sp/>includes<sp/>trailing<sp/>zeros</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2419"><highlight class="normal"><sp/><sp/><sp/><sp/>profile,<sp/>entry,<sp/>!<ref refid="namespaceshc_1a47efde6b3d493adbe2119a5593807d36" kindref="member">shc::config</ref>().hlslNoDisassembly,<sp/>useHlsl2021,<sp/>enableFp16,<sp/><ref refid="namespaceshc_1a47efde6b3d493adbe2119a5593807d36" kindref="member">shc::config</ref>().hlslSkipValidation,</highlight></codeline>
<codeline lineno="2420"><highlight class="normal"><sp/><sp/><sp/><sp/>localHlslOptimizationLevel<sp/>?<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal"><sp/>:<sp/>false,<sp/>is_hlsl_debug(),<sp/><ref refid="namespaceshc" kindref="compound">shc</ref>::<ref refid="namespaceshc_1a47efde6b3d493adbe2119a5593807d36" kindref="member">config</ref>().dx12PdbCacheDir,<sp/>max_constants_no,<sp/>shaderName,</highlight></codeline>
<codeline lineno="2421"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceshc" kindref="compound">shc</ref>::<ref refid="namespaceshc_1a47efde6b3d493adbe2119a5593807d36" kindref="member">config</ref>().targetPlatform,<sp/>useWave32,<sp/>!forceDisableWarnings<sp/>&amp;&amp;<sp/><ref refid="namespaceshc" kindref="compound">shc</ref>::<ref refid="namespaceshc_1a47efde6b3d493adbe2119a5593807d36" kindref="member">config</ref>().hlslWarningsAsErrors,</highlight></codeline>
<codeline lineno="2422"><highlight class="normal"><sp/><sp/><sp/><sp/>full_debug<sp/>?<sp/><ref refid="DebugLevel_8h_1a1a2e78e667f5d5bd44be96e3abc8a3ee" kindref="member">DebugLevel</ref>::<ref refid="DebugLevel_8h_1a1a2e78e667f5d5bd44be96e3abc8a3eea3ae7d840362552f1fc531c00c91a83b4" kindref="member">FULL_DEBUG_INFO</ref><sp/>:<sp/><ref refid="namespaceshc" kindref="compound">shc</ref>::<ref refid="namespaceshc_1a47efde6b3d493adbe2119a5593807d36" kindref="member">config</ref>().hlslDebugLevel,<sp/>embed_source,<sp/>streamOutputComponents);</highlight></codeline>
<codeline lineno="2423"><highlight class="normal"></highlight><highlight class="preprocessor">#else<sp/></highlight><highlight class="comment">//_CROSS_TARGET_DX11</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2424"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>flags<sp/>=<sp/>is_hlsl_debug()<sp/>?<sp/>D3DCOMPILE_DEBUG<sp/>:<sp/>0;</highlight></codeline>
<codeline lineno="2425"><highlight class="normal"><sp/><sp/>flags<sp/>|=<sp/><ref refid="namespaceshc_1a47efde6b3d493adbe2119a5593807d36" kindref="member">shc::config</ref>().<ref refid="structshc_1_1CompilerConfig_1ae33db9d93363e2138ff51d9ecc66d555" kindref="member">hlslSkipValidation</ref><sp/>?<sp/>D3DCOMPILE_SKIP_VALIDATION<sp/>:<sp/>0;</highlight></codeline>
<codeline lineno="2426"><highlight class="normal"><sp/><sp/>flags<sp/>|=<sp/>is_hlsl_debug()</highlight></codeline>
<codeline lineno="2427"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>?<sp/>D3DCOMPILE_SKIP_OPTIMIZATION</highlight></codeline>
<codeline lineno="2428"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>(localHlslOptimizationLevel<sp/>&gt;=<sp/>3</highlight></codeline>
<codeline lineno="2429"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>?<sp/>D3DCOMPILE_OPTIMIZATION_LEVEL3</highlight></codeline>
<codeline lineno="2430"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>(localHlslOptimizationLevel<sp/>&gt;=<sp/>2</highlight></codeline>
<codeline lineno="2431"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>?<sp/>D3DCOMPILE_OPTIMIZATION_LEVEL2</highlight></codeline>
<codeline lineno="2432"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>(localHlslOptimizationLevel<sp/>&gt;=<sp/>1<sp/>?<sp/>D3DCOMPILE_OPTIMIZATION_LEVEL0<sp/>:<sp/>D3DCOMPILE_SKIP_OPTIMIZATION)));</highlight></codeline>
<codeline lineno="2433"><highlight class="normal"><sp/><sp/>flags<sp/>|=<sp/><ref refid="namespaceshc_1a47efde6b3d493adbe2119a5593807d36" kindref="member">shc::config</ref>().<ref refid="structshc_1_1CompilerConfig_1a89228dc27f00e0dcd758e022564f55e8" kindref="member">hlslWarningsAsErrors</ref><sp/>?<sp/>D3DCOMPILE_WARNINGS_ARE_ERRORS<sp/>:<sp/>0;</highlight></codeline>
<codeline lineno="2434"><highlight class="normal"><sp/><sp/>compile_result<sp/>=<sp/>compileShaderDX11(shaderName,<sp/>source,<sp/>NULL,<sp/>profile,<sp/>entry,<sp/>!<ref refid="namespaceshc_1a47efde6b3d493adbe2119a5593807d36" kindref="member">shc::config</ref>().hlslNoDisassembly,</highlight></codeline>
<codeline lineno="2435"><highlight class="normal"><sp/><sp/><sp/><sp/>full_debug<sp/>?<sp/><ref refid="DebugLevel_8h_1a1a2e78e667f5d5bd44be96e3abc8a3eea3ae7d840362552f1fc531c00c91a83b4" kindref="member">DebugLevel::FULL_DEBUG_INFO</ref><sp/>:<sp/><ref refid="namespaceshc" kindref="compound">shc</ref>::<ref refid="namespaceshc_1a47efde6b3d493adbe2119a5593807d36" kindref="member">config</ref>().hlslDebugLevel,<sp/><ref refid="namespaceshc" kindref="compound">shc</ref>::<ref refid="namespaceshc_1a47efde6b3d493adbe2119a5593807d36" kindref="member">config</ref>().hlslSkipValidation,<sp/>embed_source,<sp/>flags,</highlight></codeline>
<codeline lineno="2436"><highlight class="normal"><sp/><sp/><sp/><sp/>max_constants_no);</highlight></codeline>
<codeline lineno="2437"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2438"><highlight class="normal"></highlight></codeline>
<codeline lineno="2439"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="namespaceshc_1a47efde6b3d493adbe2119a5593807d36" kindref="member">shc::config</ref>().hlslDumpCodeAlways)</highlight></codeline>
<codeline lineno="2440"><highlight class="normal"><sp/><sp/><sp/><sp/>dump_hlsl_src(compileCtx,<sp/>source,<sp/>compile_result.bytecode,<sp/>sha1SrcPath,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/>shaderName,<sp/>shader_variant_hash);</highlight></codeline>
<codeline lineno="2441"><highlight class="normal"></highlight></codeline>
<codeline lineno="2442"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(compile_result.bytecode.empty())</highlight></codeline>
<codeline lineno="2443"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="2444"><highlight class="normal"><sp/><sp/><sp/><sp/>debug(</highlight><highlight class="stringliteral">&quot;Hlsl<sp/>compilation<sp/>failed,<sp/>exiting<sp/>job...&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2445"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2446"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2447"><highlight class="normal"></highlight></codeline>
<codeline lineno="2448"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="namespaceshc_1a47efde6b3d493adbe2119a5593807d36" kindref="member">shc::config</ref>().writeSha1Cache<sp/>&amp;&amp;<sp/><ref refid="namespaceshc_1a47efde6b3d493adbe2119a5593807d36" kindref="member">shc::config</ref>().useSha1Cache<sp/>&amp;&amp;<sp/>!compile_result.bytecode.empty()<sp/>&amp;&amp;<sp/>dd_mkpath(sha1SrcPath))</highlight></codeline>
<codeline lineno="2449"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="2450"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>binSha1[<ref refid="hashed__cache_8h_1ad6074dd11ab3c97c8135c43aab03ae95" kindref="member">HASH_SIZE</ref>];</highlight></codeline>
<codeline lineno="2451"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="hashed__cache_8h_1a570b3b725357770701d8b56ea8518aea" kindref="member">HASH_CONTEXT</ref><sp/>sha1;</highlight></codeline>
<codeline lineno="2452"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="hashed__cache_8h_1adcd60db457233e4a407009f6d4ceea48" kindref="member">HASH_INIT</ref>(&amp;sha1);</highlight></codeline>
<codeline lineno="2453"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="hashed__cache_8h_1aff56e6812dd2a8d0b940648e0fa81ad0" kindref="member">HASH_UPDATE</ref>(&amp;sha1,<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)compile_result.bytecode.data(),<sp/>compile_result.bytecode.size());</highlight></codeline>
<codeline lineno="2454"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="hashed__cache_8h_1aff56e6812dd2a8d0b940648e0fa81ad0" kindref="member">HASH_UPDATE</ref>(&amp;sha1,<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)&amp;compile_result.computeShaderInfo,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(compile_result.computeShaderInfo));</highlight></codeline>
<codeline lineno="2455"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="hashed__cache_8h_1a8fb0342e9d1a05b36d12bd79eee1b769" kindref="member">HASH_FINISH</ref>(&amp;sha1,<sp/>binSha1);</highlight></codeline>
<codeline lineno="2456"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>sha1BinPath[420];</highlight></codeline>
<codeline lineno="2457"><highlight class="normal"><sp/><sp/><sp/><sp/>sha1BinPath[0]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2458"><highlight class="normal"><sp/><sp/><sp/><sp/>SNPRINTF(sha1BinPath,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(sha1BinPath),<sp/></highlight><highlight class="stringliteral">&quot;%s/bin/%s/&quot;</highlight><highlight class="normal"><sp/><ref refid="hashed__cache_8h_1a3b3a37e25c4d802885e54d4dba344be3" kindref="member">HASH_LIST_STRING</ref>,<sp/><ref refid="namespaceshc_1a47efde6b3d493adbe2119a5593807d36" kindref="member">shc::config</ref>().sha1CacheDir,</highlight></codeline>
<codeline lineno="2459"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>profile.c_str(),<sp/></highlight><highlight class="comment">//<sp/>sources<sp/>and<sp/>binaries<sp/>lives<sp/>in<sp/>different<sp/>subfolders.<sp/>that<sp/>is<sp/>to<sp/>reduce<sp/>risk<sp/>of<sp/>collision,<sp/>while<sp/>probably<sp/>not</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2460"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>needed</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2461"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="hashed__cache_8h_1a15a19082058efde09fbefa1a13bb96e3" kindref="member">HASH_LIST</ref>(binSha1));</highlight></codeline>
<codeline lineno="2462"><highlight class="normal"><sp/><sp/><sp/><sp/>DagorStat<sp/>binbuf;</highlight></codeline>
<codeline lineno="2463"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(df_stat(sha1BinPath,<sp/>&amp;binbuf)<sp/>!=<sp/>-1<sp/>&amp;&amp;<sp/>binbuf.size<sp/>==<sp/>compile_result.bytecode.size()<sp/>+<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="structComputeShaderInfo" kindref="compound">ComputeShaderInfo</ref>))</highlight></codeline>
<codeline lineno="2464"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2465"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>blob<sp/>is<sp/>already<sp/>saved</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2466"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2467"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2468"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2469"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>save<sp/>blob</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2470"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>dd_mkpath(sha1BinPath);</highlight></codeline>
<codeline lineno="2471"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>tmpFileName[DAGOR_MAX_PATH];</highlight></codeline>
<codeline lineno="2472"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>SNPRINTF(tmpFileName,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(tmpFileName),</highlight></codeline>
<codeline lineno="2473"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;%s/&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2474"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;%s_bin_&quot;</highlight><highlight class="normal"><sp/><ref refid="hashed__cache_8h_1af6dcd12177a796015d8c3fefb0cbc208" kindref="member">HASH_TEMP_STRING</ref><sp/></highlight><highlight class="stringliteral">&quot;XXXXXX&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="2475"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceshc_1a47efde6b3d493adbe2119a5593807d36" kindref="member">shc::config</ref>().sha1CacheDir,<sp/>profile.c_str(),<sp/><ref refid="hashed__cache_8h_1a15a19082058efde09fbefa1a13bb96e3" kindref="member">HASH_LIST</ref>(binSha1));</highlight></codeline>
<codeline lineno="2476"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>file_ptr_t<sp/>tmpF<sp/>=<sp/>df_mkstemp(tmpFileName);</highlight></codeline>
<codeline lineno="2477"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>written<sp/>=<sp/>df_write(tmpF,<sp/>compile_result.bytecode.data(),<sp/>compile_result.bytecode.size());</highlight></codeline>
<codeline lineno="2478"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>written<sp/>+=<sp/>df_write(tmpF,<sp/>&amp;compile_result.computeShaderInfo,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="structComputeShaderInfo" kindref="compound">ComputeShaderInfo</ref>));</highlight></codeline>
<codeline lineno="2479"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(written<sp/>==<sp/>compile_result.bytecode.size()<sp/>+<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="structComputeShaderInfo" kindref="compound">ComputeShaderInfo</ref>))</highlight></codeline>
<codeline lineno="2480"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2481"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>df_close(tmpF);</highlight></codeline>
<codeline lineno="2482"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!dd_rename(tmpFileName,<sp/>sha1BinPath))</highlight></codeline>
<codeline lineno="2483"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dd_erase(tmpFileName);</highlight></codeline>
<codeline lineno="2484"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2485"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2486"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2487"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>df_close(tmpF);</highlight></codeline>
<codeline lineno="2488"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dd_erase(tmpFileName);</highlight></codeline>
<codeline lineno="2489"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dd_erase(sha1SrcPath);</highlight></codeline>
<codeline lineno="2490"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2491"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2492"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2493"><highlight class="normal"></highlight></codeline>
<codeline lineno="2494"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>tmpFileName[DAGOR_MAX_PATH];</highlight></codeline>
<codeline lineno="2495"><highlight class="normal"><sp/><sp/><sp/><sp/>SNPRINTF(tmpFileName,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(tmpFileName),</highlight></codeline>
<codeline lineno="2496"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;%s/&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2497"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;%s_src_&quot;</highlight><highlight class="normal"><sp/><ref refid="hashed__cache_8h_1af6dcd12177a796015d8c3fefb0cbc208" kindref="member">HASH_TEMP_STRING</ref><sp/></highlight><highlight class="stringliteral">&quot;XXXXXX&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="2498"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceshc_1a47efde6b3d493adbe2119a5593807d36" kindref="member">shc::config</ref>().sha1CacheDir,<sp/>profile.c_str(),<sp/><ref refid="hashed__cache_8h_1a15a19082058efde09fbefa1a13bb96e3" kindref="member">HASH_LIST</ref>(srcSha1));</highlight></codeline>
<codeline lineno="2499"><highlight class="normal"><sp/><sp/><sp/><sp/>file_ptr_t<sp/>tmpF<sp/>=<sp/>df_mkstemp(tmpFileName);</highlight></codeline>
<codeline lineno="2500"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(tmpF)</highlight></codeline>
<codeline lineno="2501"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2502"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>buf[132];</highlight></codeline>
<codeline lineno="2503"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>SNPRINTF(buf,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(buf),<sp/><ref refid="hashed__cache_8h_1a3b3a37e25c4d802885e54d4dba344be3" kindref="member">HASH_LIST_STRING</ref>,<sp/><ref refid="hashed__cache_8h_1a15a19082058efde09fbefa1a13bb96e3" kindref="member">HASH_LIST</ref>(binSha1));</highlight></codeline>
<codeline lineno="2504"><highlight class="normal"></highlight></codeline>
<codeline lineno="2505"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>bufLen<sp/>=<sp/>(int)strlen(buf);</highlight></codeline>
<codeline lineno="2506"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(df_write(tmpF,<sp/>buf,<sp/>bufLen)<sp/>==<sp/>bufLen)</highlight></codeline>
<codeline lineno="2507"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2508"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>df_close(tmpF);</highlight></codeline>
<codeline lineno="2509"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!dd_rename(tmpFileName,<sp/>sha1SrcPath))</highlight></codeline>
<codeline lineno="2510"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dd_erase(tmpFileName);</highlight></codeline>
<codeline lineno="2511"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2512"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2513"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2514"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>df_close(tmpF);</highlight></codeline>
<codeline lineno="2515"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dd_erase(tmpFileName);</highlight></codeline>
<codeline lineno="2516"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2517"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2518"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2519"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2520"><highlight class="normal"></highlight></codeline>
<codeline lineno="2521"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classCompileShaderJob_1a5b45bfc7e2851fe1b8930c7fb52e477b" kindref="member">CompileShaderJob::releaseJobBody</ref>()</highlight></codeline>
<codeline lineno="2522"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2523"><highlight class="normal"><sp/><sp/><ref refid="cppStcode_8cpp_1afa2f02cf7da6a0b58c4f01e20ccd1384" kindref="member">DEFER</ref>([</highlight><highlight class="keyword">this</highlight><highlight class="normal">]<sp/>{<sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">;<sp/>});</highlight></codeline>
<codeline lineno="2524"><highlight class="normal"></highlight></codeline>
<codeline lineno="2525"><highlight class="normal"><sp/><sp/><ref refid="shLog_8cpp_1a13c739ae2e3faaa3cf559a75d265cd5c" kindref="member">sh_set_current_dyn_variant</ref>(dynVariant);</highlight></codeline>
<codeline lineno="2526"><highlight class="normal"><sp/><sp/><ref refid="cppStcode_8cpp_1afa2f02cf7da6a0b58c4f01e20ccd1384" kindref="member">DEFER</ref>([]<sp/>{<sp/><ref refid="shLog_8cpp_1a13c739ae2e3faaa3cf559a75d265cd5c" kindref="member">sh_set_current_dyn_variant</ref>(</highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);<sp/>});</highlight></codeline>
<codeline lineno="2527"><highlight class="normal"></highlight></codeline>
<codeline lineno="2528"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!compile_result.logs.empty())</highlight></codeline>
<codeline lineno="2529"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="shLog_8cpp_1a2926179632c7c86265007652d3d30b14" kindref="member">sh_debug</ref>(<ref refid="shLog_8h_1a66042048eb3ce30a1dccb2ebf8c2fd5ca0012c8acb382f295fe614046a64bba11" kindref="member">SHLOG_INFO</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Compilation<sp/>log:\n%s&quot;</highlight><highlight class="normal">,<sp/>compile_result.logs.c_str());</highlight></codeline>
<codeline lineno="2530"><highlight class="normal"></highlight></codeline>
<codeline lineno="2531"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>failed<sp/>=<sp/>compile_result.bytecode.empty()<sp/>||<sp/>(<ref refid="namespaceshc_1a47efde6b3d493adbe2119a5593807d36" kindref="member">shc::config</ref>().<ref refid="structshc_1_1CompilerConfig_1a89228dc27f00e0dcd758e022564f55e8" kindref="member">hlslWarningsAsErrors</ref><sp/>&amp;&amp;<sp/>!compile_result.errors.empty());</highlight></codeline>
<codeline lineno="2532"><highlight class="normal"></highlight></codeline>
<codeline lineno="2533"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(failed)</highlight></codeline>
<codeline lineno="2534"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="2535"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Display<sp/>error<sp/>message.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2536"><highlight class="normal"><sp/><sp/><sp/><sp/>lexer-&gt;set_error(hlsl_compile_token-&gt;file_start,<sp/>hlsl_compile_token-&gt;line_start,<sp/>hlsl_compile_token-&gt;col_start,</highlight></codeline>
<codeline lineno="2537"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>String(256,<sp/></highlight><highlight class="stringliteral">&quot;compile(%s,<sp/>%s)<sp/>failed:&quot;</highlight><highlight class="normal">,<sp/>profile.str(),<sp/>entry.str()));</highlight></codeline>
<codeline lineno="2538"><highlight class="normal"></highlight></codeline>
<codeline lineno="2539"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!compile_result.errors.empty())</highlight></codeline>
<codeline lineno="2540"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2541"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>debug(&quot;errors<sp/>compiling<sp/>HLSL<sp/>code:\n%s&quot;,<sp/>source.str());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2542"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*es<sp/>=<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)compile_result.errors.c_str(),<sp/>*ep<sp/>=<sp/>strchr(es,<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2543"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(es)</highlight></codeline>
<codeline lineno="2544"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ep)</highlight></codeline>
<codeline lineno="2545"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2546"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>profile_to_assert_stage<sp/>=<sp/>[](</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>SimpleString<sp/>&amp;profile)<sp/>{</highlight></codeline>
<codeline lineno="2547"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strstr(profile,<sp/></highlight><highlight class="stringliteral">&quot;vs&quot;</highlight><highlight class="normal">))</highlight></codeline>
<codeline lineno="2548"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;ps&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2549"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>profile.c_str();</highlight></codeline>
<codeline lineno="2550"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="2551"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="shLog_8cpp_1a2926179632c7c86265007652d3d30b14" kindref="member">sh_debug</ref>(<ref refid="shLog_8h_1a66042048eb3ce30a1dccb2ebf8c2fd5ca5395b0c35e96d97ae9ac7f83b0665310" kindref="member">SHLOG_NORMAL</ref>,<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>%.*s&quot;</highlight><highlight class="normal">,<sp/>ep<sp/>-<sp/>es,<sp/>es);</highlight></codeline>
<codeline lineno="2552"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>link_error<sp/>=<sp/>eastl::string_view(es,<sp/>ep<sp/>-<sp/>es).find(</highlight><highlight class="stringliteral">&quot;External<sp/>function<sp/>used<sp/>in<sp/>non-library<sp/>profile&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2553"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(link_error<sp/>!=<sp/>eastl::string::npos<sp/>&amp;&amp;<sp/>eastl::string_view(es,<sp/>ep<sp/>-<sp/>es).find(</highlight><highlight class="stringliteral">&quot;_assert&quot;</highlight><highlight class="normal">,<sp/>link_error)<sp/>!=<sp/>eastl::string::npos)</highlight></codeline>
<codeline lineno="2554"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2555"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="shLog_8cpp_1a2926179632c7c86265007652d3d30b14" kindref="member">sh_debug</ref>(<ref refid="shLog_8h_1a66042048eb3ce30a1dccb2ebf8c2fd5ca5395b0c35e96d97ae9ac7f83b0665310" kindref="member">SHLOG_NORMAL</ref>,</highlight></codeline>
<codeline lineno="2556"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;\nNote:<sp/>the<sp/>shader<sp/>uses<sp/>assert,<sp/>but<sp/>it<sp/>was<sp/>not<sp/>enabled.\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2557"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Tip:<sp/>add<sp/>a<sp/>macro<sp/>`ENABLE_ASSERT(%.*s)`<sp/>to<sp/>the<sp/>shader&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="2558"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>2,<sp/>profile_to_assert_stage(profile));</highlight></codeline>
<codeline lineno="2559"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strstr(profile,<sp/></highlight><highlight class="stringliteral">&quot;vs&quot;</highlight><highlight class="normal">))</highlight></codeline>
<codeline lineno="2560"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="shLog_8cpp_1a2926179632c7c86265007652d3d30b14" kindref="member">sh_debug</ref>(<ref refid="shLog_8h_1a66042048eb3ce30a1dccb2ebf8c2fd5ca5395b0c35e96d97ae9ac7f83b0665310" kindref="member">SHLOG_NORMAL</ref>,</highlight></codeline>
<codeline lineno="2561"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Tip<sp/>2:<sp/>ENABLE_ASSERT(vs)<sp/>is<sp/>not<sp/>allowed.<sp/>Rather,<sp/>ENABLE_ASSERT(ps)<sp/>enables<sp/>asserts<sp/>for<sp/>both<sp/>ps<sp/>and<sp/>vs&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2562"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2563"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>es<sp/>=<sp/>ep<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="2564"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ep<sp/>=<sp/>strchr(es,<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2565"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2566"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2567"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2568"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="shLog_8cpp_1a2926179632c7c86265007652d3d30b14" kindref="member">sh_debug</ref>(<ref refid="shLog_8h_1a66042048eb3ce30a1dccb2ebf8c2fd5ca5395b0c35e96d97ae9ac7f83b0665310" kindref="member">SHLOG_NORMAL</ref>,<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>%s\n&quot;</highlight><highlight class="normal">,<sp/>es);</highlight></codeline>
<codeline lineno="2569"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2570"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2571"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="shLog_8cpp_1a2926179632c7c86265007652d3d30b14" kindref="member">sh_debug</ref>(<ref refid="shLog_8h_1a66042048eb3ce30a1dccb2ebf8c2fd5ca5395b0c35e96d97ae9ac7f83b0665310" kindref="member">SHLOG_NORMAL</ref>,<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>D3DXCompileShader<sp/>error&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2572"><highlight class="normal"></highlight></codeline>
<codeline lineno="2573"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="namespaceshc_1a47efde6b3d493adbe2119a5593807d36" kindref="member">shc::config</ref>().hlslDumpCodeAlways<sp/>&amp;&amp;<sp/><ref refid="namespaceshc_1a47efde6b3d493adbe2119a5593807d36" kindref="member">shc::config</ref>().hlslDumpCodeOnError)</highlight></codeline>
<codeline lineno="2574"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>debug(</highlight><highlight class="stringliteral">&quot;===<sp/>compiling<sp/>code:\n%s====<sp/>code<sp/>end&quot;</highlight><highlight class="normal">,<sp/>source.str());</highlight></codeline>
<codeline lineno="2575"><highlight class="normal"></highlight></codeline>
<codeline lineno="2576"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2577"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2578"><highlight class="normal"></highlight></codeline>
<codeline lineno="2579"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!compile_result.errors.empty()<sp/>&amp;&amp;<sp/><ref refid="namespaceshc_1a47efde6b3d493adbe2119a5593807d36" kindref="member">shc::config</ref>().<ref refid="structshc_1_1CompilerConfig_1a0d190625f18c010a9e4d3bad6a9ced6e" kindref="member">hlslShowWarnings</ref>)</highlight></codeline>
<codeline lineno="2580"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="2581"><highlight class="normal"><sp/><sp/><sp/><sp/>lexer-&gt;set_warning(hlsl_compile_token-&gt;file_start,<sp/>hlsl_compile_token-&gt;line_start,<sp/>hlsl_compile_token-&gt;col_start,</highlight></codeline>
<codeline lineno="2582"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>String(256,<sp/></highlight><highlight class="stringliteral">&quot;compile(%s,<sp/>%s)<sp/>finished<sp/>with<sp/>warnings:&quot;</highlight><highlight class="normal">,<sp/>profile.str(),<sp/>entry.str()));</highlight></codeline>
<codeline lineno="2583"><highlight class="normal"></highlight></codeline>
<codeline lineno="2584"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*es<sp/>=<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)compile_result.errors.c_str(),<sp/>*ep<sp/>=<sp/>strchr(es,<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2585"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(es)</highlight></codeline>
<codeline lineno="2586"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ep)</highlight></codeline>
<codeline lineno="2587"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2588"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="shLog_8cpp_1a2926179632c7c86265007652d3d30b14" kindref="member">sh_debug</ref>(<ref refid="shLog_8h_1a66042048eb3ce30a1dccb2ebf8c2fd5ca5395b0c35e96d97ae9ac7f83b0665310" kindref="member">SHLOG_NORMAL</ref>,<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>%.*s&quot;</highlight><highlight class="normal">,<sp/>ep<sp/>-<sp/>es,<sp/>es);</highlight></codeline>
<codeline lineno="2589"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>es<sp/>=<sp/>ep<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="2590"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ep<sp/>=<sp/>strchr(es,<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2591"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2592"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2593"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2594"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="shLog_8cpp_1a2926179632c7c86265007652d3d30b14" kindref="member">sh_debug</ref>(<ref refid="shLog_8h_1a66042048eb3ce30a1dccb2ebf8c2fd5ca5395b0c35e96d97ae9ac7f83b0665310" kindref="member">SHLOG_NORMAL</ref>,<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>%s&quot;</highlight><highlight class="normal">,<sp/>es);</highlight></codeline>
<codeline lineno="2595"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2596"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2597"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2598"><highlight class="normal"></highlight></codeline>
<codeline lineno="2599"><highlight class="normal"><sp/><sp/>addResults();</highlight></codeline>
<codeline lineno="2600"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2601"><highlight class="normal"></highlight></codeline>
<codeline lineno="2602"><highlight class="normal">eastl::optional&lt;dxil::StreamOutputComponentInfo&gt;<sp/><ref refid="classCompileShaderJob_1a4d7cd36218d36b4124b3cdd66863da04" kindref="member">CompileShaderJob::parsePragmaStreamOutput</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*pragma)</highlight></codeline>
<codeline lineno="2603"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2604"><highlight class="normal"><sp/><sp/>dxil::StreamOutputComponentInfo<sp/>result<sp/>=<sp/>{};</highlight></codeline>
<codeline lineno="2605"><highlight class="normal"><sp/><sp/>pragma<sp/>+=<sp/><ref refid="commonUtils_8h_1a514d093bec84d424a39236e710bb0245" kindref="member">LITSTR_LEN</ref>(</highlight><highlight class="stringliteral">&quot;stream_output&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2606"><highlight class="normal"></highlight></codeline>
<codeline lineno="2607"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!skipEmptyPragmaSpaces(pragma))</highlight></codeline>
<codeline lineno="2608"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="2609"><highlight class="normal"><sp/><sp/><sp/><sp/>compile_result.errors.sprintf(</highlight></codeline>
<codeline lineno="2610"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Pragma<sp/>stream_output<sp/>parsing<sp/>failed<sp/>(space<sp/>after<sp/>`stream_output`<sp/>is<sp/>not<sp/>found),<sp/>symbol:<sp/>%c<sp/>(0x%02X)&quot;</highlight><highlight class="normal">,<sp/>*pragma,<sp/>*pragma);</highlight></codeline>
<codeline lineno="2611"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>eastl::nullopt;</highlight></codeline>
<codeline lineno="2612"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2613"><highlight class="normal"></highlight></codeline>
<codeline lineno="2614"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(isdigit(*pragma))</highlight></codeline>
<codeline lineno="2615"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="2616"><highlight class="normal"><sp/><sp/><sp/><sp/>result.slot<sp/>=<sp/>*pragma<sp/>-<sp/></highlight><highlight class="charliteral">&apos;0&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2617"><highlight class="normal"><sp/><sp/><sp/><sp/>pragma++;</highlight></codeline>
<codeline lineno="2618"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2619"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2620"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="2621"><highlight class="normal"><sp/><sp/><sp/><sp/>compile_result.errors.sprintf(</highlight><highlight class="stringliteral">&quot;Pragma<sp/>stream_output<sp/>parsing<sp/>failed<sp/>(slot<sp/>is<sp/>not<sp/>found),<sp/>symbol:<sp/>%c<sp/>(0x%02X)&quot;</highlight><highlight class="normal">,<sp/>*pragma,<sp/>*pragma);</highlight></codeline>
<codeline lineno="2622"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>eastl::nullopt;</highlight></codeline>
<codeline lineno="2623"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2624"><highlight class="normal"></highlight></codeline>
<codeline lineno="2625"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!skipEmptyPragmaSpaces(pragma))</highlight></codeline>
<codeline lineno="2626"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="2627"><highlight class="normal"><sp/><sp/><sp/><sp/>compile_result.errors.sprintf(</highlight><highlight class="stringliteral">&quot;Pragma<sp/>stream_output<sp/>parsing<sp/>failed<sp/>(space<sp/>after<sp/>slot<sp/>is<sp/>not<sp/>found),<sp/>symbol:<sp/>%c<sp/>(0x%02X)&quot;</highlight><highlight class="normal">,<sp/>*pragma,</highlight></codeline>
<codeline lineno="2628"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*pragma);</highlight></codeline>
<codeline lineno="2629"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>eastl::nullopt;</highlight></codeline>
<codeline lineno="2630"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2631"><highlight class="normal"></highlight></codeline>
<codeline lineno="2632"><highlight class="normal"><sp/><sp/>uint32_t<sp/>idx<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2633"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>((isalpha(*pragma)<sp/>||<sp/>*pragma<sp/>==<sp/></highlight><highlight class="charliteral">&apos;_&apos;</highlight><highlight class="normal">)<sp/>&amp;&amp;<sp/>idx<sp/>&lt;<sp/>dxil::MAX_SEMANTIC_NAME_SIZE<sp/>-<sp/>1)</highlight></codeline>
<codeline lineno="2634"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="2635"><highlight class="normal"><sp/><sp/><sp/><sp/>result.semanticName[idx++]<sp/>=<sp/>*pragma;</highlight></codeline>
<codeline lineno="2636"><highlight class="normal"><sp/><sp/><sp/><sp/>pragma++;</highlight></codeline>
<codeline lineno="2637"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2638"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(idx<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="2639"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="2640"><highlight class="normal"><sp/><sp/><sp/><sp/>compile_result.errors.sprintf(</highlight><highlight class="stringliteral">&quot;Pragma<sp/>stream_output<sp/>parsing<sp/>failed<sp/>(semantic<sp/>name<sp/>is<sp/>empty),<sp/>symbol:<sp/>%c<sp/>(0x%02X)&quot;</highlight><highlight class="normal">,<sp/>*pragma,</highlight></codeline>
<codeline lineno="2641"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*pragma);</highlight></codeline>
<codeline lineno="2642"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>eastl::nullopt;</highlight></codeline>
<codeline lineno="2643"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2644"><highlight class="normal"><sp/><sp/>result.semanticName[idx]<sp/>=<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2645"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(isdigit(*pragma))</highlight></codeline>
<codeline lineno="2646"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="2647"><highlight class="normal"><sp/><sp/><sp/><sp/>result.semanticIndex<sp/>=<sp/>atoi(pragma);</highlight></codeline>
<codeline lineno="2648"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(isdigit(*pragma))</highlight></codeline>
<codeline lineno="2649"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>pragma++;</highlight></codeline>
<codeline lineno="2650"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2651"><highlight class="normal"></highlight></codeline>
<codeline lineno="2652"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!skipEmptyPragmaSpaces(pragma))</highlight></codeline>
<codeline lineno="2653"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="2654"><highlight class="normal"><sp/><sp/><sp/><sp/>compile_result.errors.sprintf(</highlight><highlight class="stringliteral">&quot;Pragma<sp/>stream_output<sp/>parsing<sp/>failed<sp/>(space<sp/>after<sp/>semantic<sp/>is<sp/>not<sp/>found),<sp/>symbol:<sp/>%c<sp/>(0x%02X)&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="2655"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*pragma,<sp/>*pragma);</highlight></codeline>
<codeline lineno="2656"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>eastl::nullopt;</highlight></codeline>
<codeline lineno="2657"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2658"><highlight class="normal"></highlight></codeline>
<codeline lineno="2659"><highlight class="normal"><sp/><sp/>result.mask<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2660"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(*pragma<sp/>==<sp/></highlight><highlight class="charliteral">&apos;X&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="2661"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="2662"><highlight class="normal"><sp/><sp/><sp/><sp/>result.mask<sp/>|=<sp/>0x1;</highlight></codeline>
<codeline lineno="2663"><highlight class="normal"><sp/><sp/><sp/><sp/>pragma++;</highlight></codeline>
<codeline lineno="2664"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2665"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(*pragma<sp/>==<sp/></highlight><highlight class="charliteral">&apos;Y&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="2666"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="2667"><highlight class="normal"><sp/><sp/><sp/><sp/>result.mask<sp/>|=<sp/>0x2;</highlight></codeline>
<codeline lineno="2668"><highlight class="normal"><sp/><sp/><sp/><sp/>pragma++;</highlight></codeline>
<codeline lineno="2669"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2670"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(*pragma<sp/>==<sp/></highlight><highlight class="charliteral">&apos;Z&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="2671"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="2672"><highlight class="normal"><sp/><sp/><sp/><sp/>result.mask<sp/>|=<sp/>0x4;</highlight></codeline>
<codeline lineno="2673"><highlight class="normal"><sp/><sp/><sp/><sp/>pragma++;</highlight></codeline>
<codeline lineno="2674"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2675"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(*pragma<sp/>==<sp/></highlight><highlight class="charliteral">&apos;W&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="2676"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="2677"><highlight class="normal"><sp/><sp/><sp/><sp/>result.mask<sp/>|=<sp/>0x8;</highlight></codeline>
<codeline lineno="2678"><highlight class="normal"><sp/><sp/><sp/><sp/>pragma++;</highlight></codeline>
<codeline lineno="2679"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2680"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(result.mask<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="2681"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="2682"><highlight class="normal"><sp/><sp/><sp/><sp/>compile_result.errors.sprintf(</highlight><highlight class="stringliteral">&quot;Pragma<sp/>stream_output<sp/>parsing<sp/>failed<sp/>(mask<sp/>is<sp/>not<sp/>found),<sp/>symbol:<sp/>%c<sp/>(0x%02X)&quot;</highlight><highlight class="normal">,<sp/>*pragma,<sp/>*pragma);</highlight></codeline>
<codeline lineno="2683"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>eastl::nullopt;</highlight></codeline>
<codeline lineno="2684"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2685"><highlight class="normal"></highlight></codeline>
<codeline lineno="2686"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(isspace(*pragma)<sp/>&amp;&amp;<sp/>*pragma<sp/>!=<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="2687"><highlight class="normal"><sp/><sp/><sp/><sp/>pragma++;</highlight></codeline>
<codeline lineno="2688"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(*pragma<sp/>!=<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="2689"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="2690"><highlight class="normal"><sp/><sp/><sp/><sp/>compile_result.errors.sprintf(</highlight><highlight class="stringliteral">&quot;Pragma<sp/>stream_output<sp/>parsing<sp/>failed<sp/>(end<sp/>of<sp/>line<sp/>is<sp/>not<sp/>found),<sp/>symbol:<sp/>%c<sp/>(0x%02X)&quot;</highlight><highlight class="normal">,<sp/>*pragma,</highlight></codeline>
<codeline lineno="2691"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*pragma);</highlight></codeline>
<codeline lineno="2692"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>eastl::nullopt;</highlight></codeline>
<codeline lineno="2693"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2694"><highlight class="normal"></highlight></codeline>
<codeline lineno="2695"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="2696"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2697"><highlight class="normal"></highlight></codeline>
<codeline lineno="2698"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classCompileShaderJob_1a01dc0282beb4e58cf0eba0c35c86f22e" kindref="member">CompileShaderJob::skipEmptyPragmaSpaces</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*&amp;pragma)</highlight></codeline>
<codeline lineno="2699"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2700"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!isspace(*pragma))</highlight></codeline>
<codeline lineno="2701"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2702"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(isspace(*pragma)<sp/>&amp;&amp;<sp/>*pragma<sp/>!=<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="2703"><highlight class="normal"><sp/><sp/><sp/><sp/>pragma++;</highlight></codeline>
<codeline lineno="2704"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2705"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2706"><highlight class="normal"></highlight></codeline>
<codeline lineno="2707"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classCompileShaderJob_1a0a0bb2911cf727ee6a74db4cbba99f5f" kindref="member">CompileShaderJob::addResults</ref>()</highlight></codeline>
<codeline lineno="2708"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2709"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>entryIdsMaybe<sp/>=<sp/>curpass-&gt;getCidx(stage,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2710"><highlight class="normal"><sp/><sp/>G_VERIFY(entryIdsMaybe.has_value());</highlight></codeline>
<codeline lineno="2711"><highlight class="normal"><sp/><sp/><ref refid="structShaderCacheLevelIds" kindref="compound">ShaderCacheLevelIds</ref><sp/>entryIds<sp/>=<sp/>entryIdsMaybe.value();</highlight></codeline>
<codeline lineno="2712"><highlight class="normal"></highlight></codeline>
<codeline lineno="2713"><highlight class="normal"><sp/><sp/><ref refid="classShaderBytecodeCache" kindref="compound">ShaderBytecodeCache</ref><sp/>&amp;cache<sp/>=<sp/>ctx.tgtCtx().bytecodeCache();</highlight></codeline>
<codeline lineno="2714"><highlight class="normal"></highlight></codeline>
<codeline lineno="2715"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Fill<sp/>cache<sp/>entry</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2716"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>added_new<sp/>=<sp/>cache.<ref refid="classShaderBytecodeCache_1a8bd68a0f8c8fab2483d536e09d187fb3" kindref="member">post</ref>(entryIds,<sp/>compile_result,<sp/>stage,<sp/>compileCtx);</highlight></codeline>
<codeline lineno="2717"><highlight class="normal"></highlight></codeline>
<codeline lineno="2718"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!added_new)</highlight></codeline>
<codeline lineno="2719"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="2720"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceShaderCompilerStat_1a295e64377cae808b0d8df8af7a6e3f44" kindref="member">ShaderCompilerStat::hlslEqResultCount</ref>++;</highlight></codeline>
<codeline lineno="2721"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="namespaceshc_1a47efde6b3d493adbe2119a5593807d36" kindref="member">shc::config</ref>().validateIdenticalBytecode)</highlight></codeline>
<codeline lineno="2722"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2723"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;cachedShader<sp/>=<sp/>cache.<ref refid="classShaderBytecodeCache_1aae7fd205f02b77f3a46bd7820fb26018" kindref="member">resolveEntry</ref>(entryIds);</highlight></codeline>
<codeline lineno="2724"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="shLog_8cpp_1a2926179632c7c86265007652d3d30b14" kindref="member">sh_debug</ref>(<ref refid="shLog_8h_1a66042048eb3ce30a1dccb2ebf8c2fd5ca0012c8acb382f295fe614046a64bba11" kindref="member">SHLOG_INFO</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Equal<sp/>shaders<sp/>for<sp/>profile<sp/>%s<sp/>were<sp/>found:\n\nThe<sp/>first<sp/>one:\n%s\nThe<sp/>second<sp/>one:\n%s\n&quot;</highlight><highlight class="normal">,<sp/>profile,</highlight></codeline>
<codeline lineno="2725"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cachedShader.compileCtx,<sp/>compileCtx);</highlight></codeline>
<codeline lineno="2726"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2727"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2728"><highlight class="normal"></highlight></codeline>
<codeline lineno="2729"><highlight class="normal"><sp/><sp/><ref refid="shaderBytecodeCache_8cpp_1a53df41b64958672c8ba7bfecc65bf0fa" kindref="member">apply_shader_from_cache</ref>(*curpass,<sp/>stage,<sp/>entryIds,<sp/>cache);</highlight></codeline>
<codeline lineno="2730"><highlight class="normal"></highlight></codeline>
<codeline lineno="2731"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Disassembly<sp/>for<sp/>debug.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2732"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="namespaceshc_1a47efde6b3d493adbe2119a5593807d36" kindref="member">shc::config</ref>().hlslNoDisassembly<sp/>&amp;&amp;<sp/>!compile_result.bytecode.empty())</highlight></codeline>
<codeline lineno="2733"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="2734"><highlight class="normal"><sp/><sp/><sp/><sp/>debug(</highlight><highlight class="stringliteral">&quot;HLSL:<sp/>profile=&apos;%s&apos;,<sp/>entry=&apos;%s&apos;&quot;</highlight><highlight class="normal">,<sp/>profile,<sp/>entry);</highlight></codeline>
<codeline lineno="2735"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!compile_result.disassembly.empty())</highlight></codeline>
<codeline lineno="2736"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2737"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>totalInstructionsNum<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2738"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>textureInstructionsNum<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2739"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>arithmeticInstructionsNum<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2740"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>flowInstructionsNum<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2741"><highlight class="normal"></highlight></codeline>
<codeline lineno="2742"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>debug(</highlight><highlight class="stringliteral">&quot;disassembly:\n%s&quot;</highlight><highlight class="normal">,<sp/>compile_result.disassembly.c_str());</highlight></codeline>
<codeline lineno="2743"><highlight class="normal"></highlight></codeline>
<codeline lineno="2744"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Add<sp/>statistics.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2745"><highlight class="normal"></highlight></codeline>
<codeline lineno="2746"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*str1<sp/>=<sp/>strstr(compile_result.disassembly.c_str(),<sp/></highlight><highlight class="stringliteral">&quot;//<sp/>approximately<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2747"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!str1)</highlight></codeline>
<codeline lineno="2748"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>str1<sp/>=<sp/>strstr(compile_result.disassembly.c_str(),<sp/></highlight><highlight class="stringliteral">&quot;//<sp/>Approximately<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2749"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(str1)</highlight></codeline>
<codeline lineno="2750"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2751"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>totalInstructionsNum<sp/>=<sp/>atoi(str1<sp/>+<sp/>strlen(</highlight><highlight class="stringliteral">&quot;//<sp/>approximately<sp/>&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="2752"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*str2<sp/>=<sp/>strstr(str1,<sp/></highlight><highlight class="stringliteral">&quot;instruction<sp/>slots<sp/>used<sp/>(&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2753"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(str2)</highlight></codeline>
<codeline lineno="2754"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2755"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>textureInstructionsNum<sp/>=<sp/>atoi(str2<sp/>+<sp/>strlen(</highlight><highlight class="stringliteral">&quot;instruction<sp/>slots<sp/>used<sp/>(&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="2756"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*str3<sp/>=<sp/>strstr(str2,<sp/></highlight><highlight class="stringliteral">&quot;texture,<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2757"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(str3)</highlight></codeline>
<codeline lineno="2758"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>arithmeticInstructionsNum<sp/>=<sp/>atoi(str3<sp/>+<sp/>strlen(</highlight><highlight class="stringliteral">&quot;texture,<sp/>&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="2759"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*str4<sp/>=<sp/>strstr(str2,<sp/></highlight><highlight class="stringliteral">&quot;ALU,<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2760"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(str4)</highlight></codeline>
<codeline lineno="2761"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>flowInstructionsNum<sp/>=<sp/>atoi(str4<sp/>+<sp/>strlen(</highlight><highlight class="stringliteral">&quot;ALU,<sp/>&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="2762"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2763"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2764"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structShaderCompilerStat_1_1ShaderStatistics" kindref="compound">ShaderCompilerStat::ShaderStatistics</ref><sp/>*stat<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="2765"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/><ref refid="namespaceShaderCompilerStat_1a7356b1efb5e0167af1ddb433a0372e67" kindref="member">ShaderCompilerStat::shaderStatisticsList</ref>.size();<sp/>i++)</highlight></codeline>
<codeline lineno="2766"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2767"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(dd_stricmp(<ref refid="namespaceShaderCompilerStat_1a7356b1efb5e0167af1ddb433a0372e67" kindref="member">ShaderCompilerStat::shaderStatisticsList</ref>[i].name,<sp/>shaderName)<sp/>==<sp/>0<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="2768"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dd_stricmp(<ref refid="namespaceShaderCompilerStat_1a7356b1efb5e0167af1ddb433a0372e67" kindref="member">ShaderCompilerStat::shaderStatisticsList</ref>[i].entry,<sp/>entry)<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="2769"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2770"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stat<sp/>=<sp/>&amp;<ref refid="namespaceShaderCompilerStat_1a7356b1efb5e0167af1ddb433a0372e67" kindref="member">ShaderCompilerStat::shaderStatisticsList</ref>[i];</highlight></codeline>
<codeline lineno="2771"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2772"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2773"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2774"><highlight class="normal"></highlight></codeline>
<codeline lineno="2775"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!stat)</highlight></codeline>
<codeline lineno="2776"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2777"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>append_items(<ref refid="namespaceShaderCompilerStat_1a7356b1efb5e0167af1ddb433a0372e67" kindref="member">ShaderCompilerStat::shaderStatisticsList</ref>,<sp/>1);</highlight></codeline>
<codeline lineno="2778"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stat<sp/>=<sp/>&amp;<ref refid="namespaceShaderCompilerStat_1a7356b1efb5e0167af1ddb433a0372e67" kindref="member">ShaderCompilerStat::shaderStatisticsList</ref>.back();</highlight></codeline>
<codeline lineno="2779"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stat-&gt;<ref refid="structShaderCompilerStat_1_1ShaderStatistics_1a54562683de52ae284d9a1df43d980948" kindref="member">minInstructions</ref><sp/>=<sp/>totalInstructionsNum;</highlight></codeline>
<codeline lineno="2780"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stat-&gt;<ref refid="structShaderCompilerStat_1_1ShaderStatistics_1ac8efe77c5772b0ab9f9741335324e560" kindref="member">minTextureInstructions</ref><sp/>=<sp/>textureInstructionsNum;</highlight></codeline>
<codeline lineno="2781"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stat-&gt;<ref refid="structShaderCompilerStat_1_1ShaderStatistics_1a2c1bcf5a679936e44ea077d14449c9c2" kindref="member">minArithmeticInstructions</ref><sp/>=<sp/>arithmeticInstructionsNum;</highlight></codeline>
<codeline lineno="2782"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stat-&gt;<ref refid="structShaderCompilerStat_1_1ShaderStatistics_1a1576b005c2468f7209614cd9fd67bd72" kindref="member">minFlowInstructions</ref><sp/>=<sp/>flowInstructionsNum;</highlight></codeline>
<codeline lineno="2783"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2784"><highlight class="normal"></highlight></codeline>
<codeline lineno="2785"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>stat-&gt;<ref refid="structShaderCompilerStat_1_1ShaderStatistics_1aa5c9044a71066bb641116a3de3fa8923" kindref="member">name</ref><sp/>=<sp/>shaderName;</highlight></codeline>
<codeline lineno="2786"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>stat-&gt;<ref refid="structShaderCompilerStat_1_1ShaderStatistics_1a605ba93dab49b3166db203ae22e315ca" kindref="member">entry</ref><sp/>=<sp/>entry;</highlight></codeline>
<codeline lineno="2787"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>stat-&gt;<ref refid="structShaderCompilerStat_1_1ShaderStatistics_1a103b80d70da4e9d99992abfa7ea967aa" kindref="member">hlslVariants</ref>++;</highlight></codeline>
<codeline lineno="2788"><highlight class="normal"></highlight></codeline>
<codeline lineno="2789"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(totalInstructionsNum<sp/>&lt;<sp/>stat-&gt;minInstructions)</highlight></codeline>
<codeline lineno="2790"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stat-&gt;<ref refid="structShaderCompilerStat_1_1ShaderStatistics_1a54562683de52ae284d9a1df43d980948" kindref="member">minInstructions</ref><sp/>=<sp/>totalInstructionsNum;</highlight></codeline>
<codeline lineno="2791"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(totalInstructionsNum<sp/>&gt;<sp/>stat-&gt;<ref refid="structShaderCompilerStat_1_1ShaderStatistics_1acd791c9885a64db14bf6fa4241d4c87e" kindref="member">maxInstructions</ref>)</highlight></codeline>
<codeline lineno="2792"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stat-&gt;<ref refid="structShaderCompilerStat_1_1ShaderStatistics_1acd791c9885a64db14bf6fa4241d4c87e" kindref="member">maxInstructions</ref><sp/>=<sp/>totalInstructionsNum;</highlight></codeline>
<codeline lineno="2793"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>stat-&gt;<ref refid="structShaderCompilerStat_1_1ShaderStatistics_1a2b74e9a938f0db2c8a44f08085ffd3b3" kindref="member">totalInstructions</ref><sp/>+=<sp/>totalInstructionsNum;</highlight></codeline>
<codeline lineno="2794"><highlight class="normal"></highlight></codeline>
<codeline lineno="2795"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(textureInstructionsNum<sp/>&lt;<sp/>stat-&gt;minTextureInstructions)</highlight></codeline>
<codeline lineno="2796"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stat-&gt;<ref refid="structShaderCompilerStat_1_1ShaderStatistics_1ac8efe77c5772b0ab9f9741335324e560" kindref="member">minTextureInstructions</ref><sp/>=<sp/>textureInstructionsNum;</highlight></codeline>
<codeline lineno="2797"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(textureInstructionsNum<sp/>&gt;<sp/>stat-&gt;<ref refid="structShaderCompilerStat_1_1ShaderStatistics_1a34a456387b3403c07afae5a1c41a8e27" kindref="member">maxTextureInstructions</ref>)</highlight></codeline>
<codeline lineno="2798"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stat-&gt;<ref refid="structShaderCompilerStat_1_1ShaderStatistics_1a34a456387b3403c07afae5a1c41a8e27" kindref="member">maxTextureInstructions</ref><sp/>=<sp/>textureInstructionsNum;</highlight></codeline>
<codeline lineno="2799"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>stat-&gt;<ref refid="structShaderCompilerStat_1_1ShaderStatistics_1a6da71ee2fb7a65af38aa98411ddba516" kindref="member">totalTextureInstructions</ref><sp/>+=<sp/>textureInstructionsNum;</highlight></codeline>
<codeline lineno="2800"><highlight class="normal"></highlight></codeline>
<codeline lineno="2801"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(arithmeticInstructionsNum<sp/>&lt;<sp/>stat-&gt;minArithmeticInstructions)</highlight></codeline>
<codeline lineno="2802"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stat-&gt;<ref refid="structShaderCompilerStat_1_1ShaderStatistics_1a2c1bcf5a679936e44ea077d14449c9c2" kindref="member">minArithmeticInstructions</ref><sp/>=<sp/>arithmeticInstructionsNum;</highlight></codeline>
<codeline lineno="2803"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(arithmeticInstructionsNum<sp/>&gt;<sp/>stat-&gt;<ref refid="structShaderCompilerStat_1_1ShaderStatistics_1a7e4fd8beef72b6de324b05322e48b2a8" kindref="member">maxArithmeticInstructions</ref>)</highlight></codeline>
<codeline lineno="2804"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stat-&gt;<ref refid="structShaderCompilerStat_1_1ShaderStatistics_1a7e4fd8beef72b6de324b05322e48b2a8" kindref="member">maxArithmeticInstructions</ref><sp/>=<sp/>arithmeticInstructionsNum;</highlight></codeline>
<codeline lineno="2805"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>stat-&gt;<ref refid="structShaderCompilerStat_1_1ShaderStatistics_1abad71e21182d1caaf1bbd1e39e9d6651" kindref="member">totalArithmeticInstructions</ref><sp/>+=<sp/>arithmeticInstructionsNum;</highlight></codeline>
<codeline lineno="2806"><highlight class="normal"></highlight></codeline>
<codeline lineno="2807"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>stat-&gt;<ref refid="structShaderCompilerStat_1_1ShaderStatistics_1a1576b005c2468f7209614cd9fd67bd72" kindref="member">minFlowInstructions</ref><sp/>=<sp/>min(flowInstructionsNum,<sp/>stat-&gt;<ref refid="structShaderCompilerStat_1_1ShaderStatistics_1a1576b005c2468f7209614cd9fd67bd72" kindref="member">minFlowInstructions</ref>);</highlight></codeline>
<codeline lineno="2808"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>stat-&gt;<ref refid="structShaderCompilerStat_1_1ShaderStatistics_1af21186d7913714102f8c05e42b7ae785" kindref="member">maxFlowInstructions</ref><sp/>=<sp/>max(flowInstructionsNum,<sp/>stat-&gt;<ref refid="structShaderCompilerStat_1_1ShaderStatistics_1af21186d7913714102f8c05e42b7ae785" kindref="member">maxFlowInstructions</ref>);</highlight></codeline>
<codeline lineno="2809"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>stat-&gt;<ref refid="structShaderCompilerStat_1_1ShaderStatistics_1af17d0f518e1bd974a4ec88614f2beb3e" kindref="member">totalFlowInstructions</ref><sp/>+=<sp/>flowInstructionsNum;</highlight></codeline>
<codeline lineno="2810"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2811"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2812"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2813"><highlight class="normal"></highlight></codeline>
<codeline lineno="2814"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceShaderParser_1a8d3720af0f21bad15c0361671744eb12" kindref="member">ShaderParser::clear_per_file_caches</ref>()<sp/>{<sp/><ref refid="classCodeSourceBlocks_1aa9580c5ad7a0f07a5066c9a4c90074bf" kindref="member">CodeSourceBlocks::resetCompilation</ref>();<sp/>}</highlight></codeline>
    </programlisting>
    <location file="assemblyShader.cpp"/>
  </compounddef>
</doxygen>
