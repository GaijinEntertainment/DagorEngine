<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.7" xml:lang="en-US">
  <compounddef id="makeShBinDump_8cpp" kind="file" language="C++">
    <compoundname>makeShBinDump.cpp</compoundname>
    <includes refid="makeShBinDump_8h" local="yes">makeShBinDump.h</includes>
    <includes refid="linkShaders_8h" local="yes">linkShaders.h</includes>
    <includes refid="loadShaders_8h" local="yes">loadShaders.h</includes>
    <includes refid="shTargetContext_8h" local="yes">shTargetContext.h</includes>
    <includes refid="globVar_8h" local="yes">globVar.h</includes>
    <includes refid="varMap_8h" local="yes">varMap.h</includes>
    <includes refid="shcode_8h" local="yes">shcode.h</includes>
    <includes refid="namedConst_8h" local="yes">namedConst.h</includes>
    <includes refid="samplers_8h" local="yes">samplers.h</includes>
    <includes refid="shCompiler_8h" local="yes">shCompiler.h</includes>
    <includes refid="globalConfig_8h" local="yes">globalConfig.h</includes>
    <includes refid="cppStcode_8h" local="yes">cppStcode.h</includes>
    <includes local="no">shaders/cppStcodeVer.h</includes>
    <includes refid="shLog_8h" local="yes">shLog.h</includes>
    <includes local="no">osApiWrappers/dag_files.h</includes>
    <includes local="no">generic/dag_sort.h</includes>
    <includes local="no">libTools/util/makeBindump.h</includes>
    <includes local="no">shaders/shader_ver.h</includes>
    <includes local="no">shaders/shader_layout.h</includes>
    <includes local="no">shaders/shLimits.h</includes>
    <includes refid="transcodeShader_8h" local="yes">transcodeShader.h</includes>
    <includes refid="binDumpUtils_8h" local="yes">binDumpUtils.h</includes>
    <includes local="no">ioSys/dag_zstdIo.h</includes>
    <includes local="no">util/dag_hash.h</includes>
    <includes local="no">debug/dag_debug.h</includes>
    <includes local="no">stdlib.h</includes>
    <includes local="no">drv/3d/dag_renderStates.h</includes>
    <includes local="no">drv/3d/dag_sampler.h</includes>
    <includes local="no">EASTL/unordered_map.h</includes>
    <includes local="no">dag/dag_vector.h</includes>
    <includes local="no">generic/dag_enumerate.h</includes>
    <includes local="no">hash/sha256.h</includes>
    <includes local="no">util/dag_threadPool.h</includes>
    <includes local="no">perfMon/dag_cpuFreq.h</includes>
    <incdepgraph>
      <node id="89">
        <label>DebugLevel.h</label>
        <link refid="DebugLevel_8h"/>
        <childnode refid="29" relation="include">
        </childnode>
      </node>
      <node id="108">
        <label>binDumpUtils.h</label>
        <link refid="binDumpUtils_8h"/>
        <childnode refid="107" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="46">
        <label>blkHash.h</label>
        <link refid="blkHash_8h"/>
      </node>
      <node id="82">
        <label>boolVar.h</label>
        <link refid="boolVar_8h"/>
        <childnode refid="63" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>commonUtils.h</label>
        <link refid="commonUtils_8h"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="74">
        <label>compileResult.h</label>
        <link refid="compileResult_8h"/>
        <childnode refid="75" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="71">
        <label>const3d.h</label>
        <link refid="const3d_8h"/>
        <childnode refid="35" relation="include">
        </childnode>
      </node>
      <node id="43">
        <label>cppStcode.h</label>
        <link refid="cppStcode_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="44" relation="include">
        </childnode>
        <childnode refid="46" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="38" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>cppStcodeAssembly.h</label>
        <link refid="cppStcodeAssembly_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
        <childnode refid="38" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>cppStcodeBuilder.h</label>
        <link refid="cppStcodeBuilder_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
      </node>
      <node id="90">
        <label>cppStcodePlatformInfo.h</label>
        <link refid="cppStcodePlatformInfo_8h"/>
        <childnode refid="29" relation="include">
        </childnode>
      </node>
      <node id="65">
        <label>cppStcodeUtils.h</label>
        <link refid="cppStcodeUtils_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="66" relation="include">
        </childnode>
      </node>
      <node id="53">
        <label>globVar.h</label>
        <link refid="globVar_8h"/>
        <childnode refid="54" relation="include">
        </childnode>
        <childnode refid="55" relation="include">
        </childnode>
        <childnode refid="47" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="56" relation="include">
        </childnode>
        <childnode refid="57" relation="include">
        </childnode>
        <childnode refid="58" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="59" relation="include">
        </childnode>
        <childnode refid="60" relation="include">
        </childnode>
      </node>
      <node id="88">
        <label>globalConfig.h</label>
        <link refid="globalConfig_8h"/>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="89" relation="include">
        </childnode>
        <childnode refid="90" relation="include">
        </childnode>
        <childnode refid="50" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
      </node>
      <node id="21">
        <label>hash.h</label>
        <link refid="hash_8h"/>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
      </node>
      <node id="51">
        <label>hashStrings.h</label>
        <link refid="hashStrings_8h"/>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="47" relation="include">
        </childnode>
        <childnode refid="52" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
      </node>
      <node id="24">
        <label>hlslRegisters.h</label>
        <link refid="hlslRegisters_8h"/>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
      </node>
      <node id="70">
        <label>hlslStage.h</label>
        <link refid="hlslStage_8h"/>
        <childnode refid="71" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="72" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="73" relation="include">
        </childnode>
      </node>
      <node id="49">
        <label>hwAssembly.h</label>
        <link refid="hwAssembly_8h"/>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="60">
        <label>intervals.h</label>
        <link refid="intervals_8h"/>
      </node>
      <node id="39">
        <label>linkShaders.h</label>
        <link refid="linkShaders_8h"/>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
        <childnode refid="60" relation="include">
        </childnode>
        <childnode refid="53" relation="include">
        </childnode>
        <childnode refid="61" relation="include">
        </childnode>
        <childnode refid="77" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="93" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="38" relation="include">
        </childnode>
      </node>
      <node id="94">
        <label>loadShaders.h</label>
        <link refid="loadShaders_8h"/>
        <childnode refid="95" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="61" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>makeShBinDump.cpp</label>
        <link refid="makeShBinDump_8cpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="39" relation="include">
        </childnode>
        <childnode refid="94" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
        <childnode refid="53" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="96" relation="include">
        </childnode>
        <childnode refid="83" relation="include">
        </childnode>
        <childnode refid="61" relation="include">
        </childnode>
        <childnode refid="95" relation="include">
        </childnode>
        <childnode refid="88" relation="include">
        </childnode>
        <childnode refid="43" relation="include">
        </childnode>
        <childnode refid="100" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="101" relation="include">
        </childnode>
        <childnode refid="102" relation="include">
        </childnode>
        <childnode refid="103" relation="include">
        </childnode>
        <childnode refid="104" relation="include">
        </childnode>
        <childnode refid="38" relation="include">
        </childnode>
        <childnode refid="105" relation="include">
        </childnode>
        <childnode refid="106" relation="include">
        </childnode>
        <childnode refid="108" relation="include">
        </childnode>
        <childnode refid="109" relation="include">
        </childnode>
        <childnode refid="110" relation="include">
        </childnode>
        <childnode refid="80" relation="include">
        </childnode>
        <childnode refid="111" relation="include">
        </childnode>
        <childnode refid="68" relation="include">
        </childnode>
        <childnode refid="57" relation="include">
        </childnode>
        <childnode refid="112" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="113" relation="include">
        </childnode>
        <childnode refid="114" relation="include">
        </childnode>
        <childnode refid="115" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>makeShBinDump.h</label>
        <link refid="makeShBinDump_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="14">
        <label>nameMap.h</label>
        <link refid="nameMap_8h"/>
        <childnode refid="15" relation="include">
        </childnode>
      </node>
      <node id="83">
        <label>namedConst.h</label>
        <link refid="namedConst_8h"/>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="84" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="88" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="47" relation="include">
        </childnode>
        <childnode refid="91" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
      </node>
      <node id="44">
        <label>processes.h</label>
        <link refid="processes_8h"/>
        <childnode refid="45" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="61">
        <label>samplers.h</label>
        <link refid="samplers_8h"/>
        <childnode refid="62" relation="include">
        </childnode>
        <childnode refid="63" relation="include">
        </childnode>
        <childnode refid="53" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="57" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
      </node>
      <node id="92">
        <label>shAssumes.h</label>
        <link refid="shAssumes_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="60" relation="include">
        </childnode>
        <childnode refid="63" relation="include">
        </childnode>
        <childnode refid="50" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
      </node>
      <node id="41">
        <label>shCompContext.h</label>
        <link refid="shCompContext_8h"/>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="49" relation="include">
        </childnode>
        <childnode refid="50" relation="include">
        </childnode>
      </node>
      <node id="42">
        <label>shCompilationInfo.h</label>
        <link refid="shCompilationInfo_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="43" relation="include">
        </childnode>
        <childnode refid="46" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="47" relation="include">
        </childnode>
        <childnode refid="48" relation="include">
        </childnode>
      </node>
      <node id="95">
        <label>shCompiler.h</label>
        <link refid="shCompiler_8h"/>
      </node>
      <node id="79">
        <label>shErrorReporting.h</label>
        <link refid="shErrorReporting_8h"/>
        <childnode refid="62" relation="include">
        </childnode>
        <childnode refid="63" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="25">
        <label>shLog.h</label>
        <link refid="shLog_8h"/>
      </node>
      <node id="64">
        <label>shMacro.h</label>
        <link refid="shMacro_8h"/>
      </node>
      <node id="93">
        <label>shSemCode.h</label>
        <link refid="shSemCode_8h"/>
      </node>
      <node id="40">
        <label>shTargetContext.h</label>
        <link refid="shTargetContext_8h"/>
        <childnode refid="41" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="51" relation="include">
        </childnode>
        <childnode refid="53" relation="include">
        </childnode>
        <childnode refid="61" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="65" relation="include">
        </childnode>
        <childnode refid="63" relation="include">
        </childnode>
        <childnode refid="67" relation="include">
        </childnode>
        <childnode refid="69" relation="include">
        </childnode>
        <childnode refid="78" relation="include">
        </childnode>
        <childnode refid="82" relation="include">
        </childnode>
        <childnode refid="70" relation="include">
        </childnode>
        <childnode refid="83" relation="include">
        </childnode>
        <childnode refid="92" relation="include">
        </childnode>
        <childnode refid="88" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="67">
        <label>shTargetStorage.h</label>
        <link refid="shTargetStorage_8h"/>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="68" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="38" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
      </node>
      <node id="59">
        <label>shVarVecTypes.h</label>
        <link refid="shVarVecTypes_8h"/>
      </node>
      <node id="69">
        <label>shaderBytecodeCache.h</label>
        <link refid="shaderBytecodeCache_8h"/>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="70" relation="include">
        </childnode>
        <childnode refid="74" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="76" relation="include">
        </childnode>
        <childnode refid="47" relation="include">
        </childnode>
        <childnode refid="77" relation="include">
        </childnode>
      </node>
      <node id="12">
        <label>shaderSave.h</label>
        <link refid="shaderSave_8h"/>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
      </node>
      <node id="11">
        <label>shaderTab.h</label>
        <link refid="shaderTab_8h"/>
        <childnode refid="12" relation="include">
        </childnode>
      </node>
      <node id="98">
        <label>shaderVariant.h</label>
        <link refid="shaderVariant_8h"/>
        <childnode refid="60" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
        <childnode refid="80" relation="include">
        </childnode>
        <childnode refid="58" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="52" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
      </node>
      <node id="96">
        <label>shcode.h</label>
        <link refid="shcode_8h"/>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="52" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="97" relation="include">
        </childnode>
        <childnode refid="54" relation="include">
        </childnode>
        <childnode refid="55" relation="include">
        </childnode>
        <childnode refid="87" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="98" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="83" relation="include">
        </childnode>
        <childnode refid="99" relation="include">
        </childnode>
        <childnode refid="59" relation="include">
        </childnode>
      </node>
      <node id="63">
        <label>shlexterm.h</label>
        <link refid="shlexterm_8h"/>
        <childnode refid="62" relation="include">
        </childnode>
        <childnode refid="64" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="78">
        <label>stcodeBytecode.h</label>
        <link refid="stcodeBytecode_8h"/>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="79" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
        <childnode refid="80" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="81" relation="include">
        </childnode>
      </node>
      <node id="106">
        <label>transcodeShader.h</label>
        <link refid="transcodeShader_8h"/>
        <childnode refid="107" relation="include">
        </childnode>
        <childnode refid="71" relation="include">
        </childnode>
      </node>
      <node id="13">
        <label>varMap.h</label>
        <link refid="varMap_8h"/>
        <childnode refid="14" relation="include">
        </childnode>
      </node>
      <node id="58">
        <label>varTypes.h</label>
        <link refid="varTypes_8h"/>
      </node>
      <node id="84">
        <label>variablesMerger.h</label>
        <link refid="variablesMerger_8h"/>
        <childnode refid="62" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="75" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="85" relation="include">
        </childnode>
        <childnode refid="86" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="87" relation="include">
        </childnode>
      </node>
      <node id="56">
        <label>3d/dag_texMgr.h</label>
      </node>
      <node id="20">
        <label>EASTL/algorithm.h</label>
      </node>
      <node id="28">
        <label>EASTL/array.h</label>
      </node>
      <node id="87">
        <label>EASTL/bitvector.h</label>
      </node>
      <node id="85">
        <label>EASTL/fixed_vector.h</label>
      </node>
      <node id="86">
        <label>EASTL/map.h</label>
      </node>
      <node id="10">
        <label>EASTL/optional.h</label>
      </node>
      <node id="9">
        <label>EASTL/string.h</label>
      </node>
      <node id="66">
        <label>EASTL/string_view.h</label>
      </node>
      <node id="72">
        <label>EASTL/type_traits.h</label>
      </node>
      <node id="36">
        <label>EASTL/unique_ptr.h</label>
      </node>
      <node id="112">
        <label>EASTL/unordered_map.h</label>
      </node>
      <node id="75">
        <label>EASTL/vector.h</label>
      </node>
      <node id="81">
        <label>EASTL/vector_map.h</label>
      </node>
      <node id="91">
        <label>EASTL/vector_set.h</label>
      </node>
      <node id="29">
        <label>cstdint</label>
      </node>
      <node id="23">
        <label>cstring</label>
      </node>
      <node id="19">
        <label>dag/dag_vector.h</label>
      </node>
      <node id="18">
        <label>debug/dag_assert.h</label>
      </node>
      <node id="80">
        <label>debug/dag_debug.h</label>
      </node>
      <node id="35">
        <label>drv/3d/dag_consts.h</label>
      </node>
      <node id="68">
        <label>drv/3d/dag_renderStates.h</label>
      </node>
      <node id="57">
        <label>drv/3d/dag_sampler.h</label>
      </node>
      <node id="26">
        <label>generic/dag_enumerate.h</label>
      </node>
      <node id="27">
        <label>generic/dag_expected.h</label>
      </node>
      <node id="45">
        <label>generic/dag_fixedMoveOnlyFunction.h</label>
      </node>
      <node id="97">
        <label>generic/dag_smallTab.h</label>
      </node>
      <node id="102">
        <label>generic/dag_sort.h</label>
      </node>
      <node id="107">
        <label>generic/dag_span.h</label>
      </node>
      <node id="16">
        <label>generic/dag_tab.h</label>
      </node>
      <node id="22">
        <label>hash/BLAKE3/blake3.h</label>
      </node>
      <node id="113">
        <label>hash/sha256.h</label>
      </node>
      <node id="50">
        <label>ioSys/dag_dataBlock.h</label>
      </node>
      <node id="109">
        <label>ioSys/dag_zstdIo.h</label>
      </node>
      <node id="103">
        <label>libTools/util/makeBindump.h</label>
      </node>
      <node id="54">
        <label>math/dag_color.h</label>
      </node>
      <node id="55">
        <label>math/integer/dag_IPoint4.h</label>
      </node>
      <node id="73">
        <label>memory</label>
      </node>
      <node id="31">
        <label>memory/dag_mem.h</label>
      </node>
      <node id="76">
        <label>memory/dag_memBase.h</label>
      </node>
      <node id="101">
        <label>osApiWrappers/dag_files.h</label>
      </node>
      <node id="115">
        <label>perfMon/dag_cpuFreq.h</label>
      </node>
      <node id="100">
        <label>shaders/cppStcodeVer.h</label>
      </node>
      <node id="99">
        <label>shaders/dag_shaderCommon.h</label>
      </node>
      <node id="34">
        <label>shaders/dag_shaderVarType.h</label>
      </node>
      <node id="48">
        <label>shaders/dag_shaders.h</label>
      </node>
      <node id="32">
        <label>shaders/shExprTypes.h</label>
      </node>
      <node id="33">
        <label>shaders/shFunc.h</label>
      </node>
      <node id="105">
        <label>shaders/shLimits.h</label>
      </node>
      <node id="38">
        <label>shaders/shader_layout.h</label>
      </node>
      <node id="104">
        <label>shaders/shader_ver.h</label>
      </node>
      <node id="30">
        <label>shaders/slotTexturesRange.h</label>
      </node>
      <node id="62">
        <label>shsyn.h</label>
      </node>
      <node id="37">
        <label>ska_hash_map/flat_hash_map2.hpp</label>
      </node>
      <node id="111">
        <label>stdlib.h</label>
      </node>
      <node id="17">
        <label>util/dag_bindump_ext.h</label>
      </node>
      <node id="8">
        <label>util/dag_globDef.h</label>
      </node>
      <node id="110">
        <label>util/dag_hash.h</label>
      </node>
      <node id="15">
        <label>util/dag_oaHashNameMap.h</label>
      </node>
      <node id="7">
        <label>util/dag_safeArg.h</label>
      </node>
      <node id="77">
        <label>util/dag_simpleString.h</label>
      </node>
      <node id="52">
        <label>util/dag_stdint.h</label>
      </node>
      <node id="47">
        <label>util/dag_string.h</label>
      </node>
      <node id="114">
        <label>util/dag_threadPool.h</label>
      </node>
      <node id="6">
        <label>utility</label>
      </node>
    </incdepgraph>
    <innerclass refid="structsemicooked_1_1Variables" prot="public">semicooked::Variables</innerclass>
    <innerclass refid="structsemicooked_1_1Variants" prot="public">semicooked::Variants</innerclass>
    <innerclass refid="structsemicooked_1_1Variants_1_1VariantPair" prot="public">semicooked::Variants::VariantPair</innerclass>
    <innerclass refid="structsemicooked_1_1ShaderCodes" prot="public">semicooked::ShaderCodes</innerclass>
    <innerclass refid="structsemicooked_1_1ShaderClassRecEx" prot="public">semicooked::ShaderClassRecEx</innerclass>
    <innernamespace refid="namespacesemicooked">semicooked</innernamespace>
    <innernamespace refid="namespaceshader__layout">shader_layout</innernamespace>
      <sectiondef kind="define">
      <memberdef kind="define" id="makeShBinDump_8cpp_1ac0b059bd069e88a5ab58aa8266c4416c" prot="public" static="no">
        <name>_DEBUG_TAB_</name>
        <initializer>1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="makeShBinDump.cpp" line="3" column="9" bodyfile="makeShBinDump.cpp" bodystart="3" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="makeShBinDump_8cpp_1ae7f4166574586836d89736ca05ad6090" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool make_scripted_shaders_dump</definition>
        <argsstring>(const char *dump_name, const char *cache_filename, bool strip_shaders_and_stcode, BindumpPackingFlags packing_flags, const shc::CompilationContext &amp;ctx)</argsstring>
        <name>make_scripted_shaders_dump</name>
        <param>
          <type>const char *</type>
          <declname>dump_name</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>cache_filename</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>strip_shaders_and_stcode</declname>
        </param>
        <param>
          <type><ref refid="makeShBinDump_8h_1a7e4c9039c4d793938486d7f1c089329f" kindref="member">BindumpPackingFlags</ref></type>
          <declname>packing_flags</declname>
        </param>
        <param>
          <type>const <ref refid="classshc_1_1CompilationContext" kindref="compound">shc::CompilationContext</ref> &amp;</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="makeShBinDump.cpp" line="935" column="6" bodyfile="makeShBinDump.cpp" bodystart="935" bodyend="1791"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/>Copyright<sp/>(C)<sp/>Gaijin<sp/>Games<sp/>KFT.<sp/><sp/>All<sp/>rights<sp/>reserved.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_DEBUG_TAB_<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="makeShBinDump_8h" kindref="compound">makeShBinDump.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="linkShaders_8h" kindref="compound">linkShaders.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="loadShaders_8h" kindref="compound">loadShaders.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="shTargetContext_8h" kindref="compound">shTargetContext.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="globVar_8h" kindref="compound">globVar.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="varMap_8h" kindref="compound">varMap.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="shcode_8h" kindref="compound">shcode.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="namedConst_8h" kindref="compound">namedConst.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="samplers_8h" kindref="compound">samplers.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="shCompiler_8h" kindref="compound">shCompiler.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="globalConfig_8h" kindref="compound">globalConfig.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="cppStcode_8h" kindref="compound">cppStcode.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;shaders/cppStcodeVer.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="shLog_8h" kindref="compound">shLog.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;osApiWrappers/dag_files.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;generic/dag_sort.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;libTools/util/makeBindump.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;shaders/shader_ver.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;shaders/shader_layout.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;shaders/shLimits.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="transcodeShader_8h" kindref="compound">transcodeShader.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="binDumpUtils_8h" kindref="compound">binDumpUtils.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;ioSys/dag_zstdIo.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;util/dag_hash.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>_CROSS_TARGET_DX12</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;drv/shadersMetaData/dxil/compiled_shader_header.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;debug/dag_debug.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdlib.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;drv/3d/dag_renderStates.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;drv/3d/dag_sampler.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;EASTL/unordered_map.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;dag/dag_vector.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;generic/dag_enumerate.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;hash/sha256.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;util/dag_threadPool.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;perfMon/dag_cpuFreq.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal"><ref refid="namespacemkbindump" kindref="compound">mkbindump</ref>;</highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal">shader_layout;</highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight></codeline>
<codeline lineno="50" refid="namespacesemicooked" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespacesemicooked" kindref="compound">semicooked</ref></highlight></codeline>
<codeline lineno="51"><highlight class="normal">{</highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight><highlight class="comment">//<sp/>alphabetically<sp/>sorted<sp/>list<sp/>of<sp/>hardcoded<sp/>names<sp/>(describes<sp/>nil<sp/>block<sp/>for<sp/>each<sp/>level)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*hardcodedBlkName[<ref refid="namedConst_8h_1ad736eaf66e63df63fdef8ab710d6f88e" kindref="member">SHADER_BLOCK_HIER_LEVELS</ref>]<sp/>=<sp/>{</highlight><highlight class="stringliteral">&quot;!frame&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;!obj&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;!scene&quot;</highlight><highlight class="normal">};</highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="namedConst_8h_1a8df4796c58d0d8445eaf37bb57425b6c" kindref="member">ShaderBlockLevel</ref><sp/>hardcodedBlkLayer[<ref refid="namedConst_8h_1ad736eaf66e63df63fdef8ab710d6f88e" kindref="member">SHADER_BLOCK_HIER_LEVELS</ref>]<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><ref refid="namedConst_8h_1a8df4796c58d0d8445eaf37bb57425b6cac57e921596445b99ab85558984966184" kindref="member">ShaderBlockLevel::FRAME</ref>,<sp/><ref refid="namedConst_8h_1a8df4796c58d0d8445eaf37bb57425b6ca8eee8e217391199668cbac89472ace53" kindref="member">ShaderBlockLevel::OBJECT</ref>,<sp/><ref refid="namedConst_8h_1a8df4796c58d0d8445eaf37bb57425b6caf151a543099185593a5a87339c552698" kindref="member">ShaderBlockLevel::SCENE</ref>};</highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structShaderStateBlock_1_1BuildTimeData" kindref="compound">ShaderStateBlock::BuildTimeData</ref><sp/>hardcodedBlk[<ref refid="namedConst_8h_1ad736eaf66e63df63fdef8ab710d6f88e" kindref="member">SHADER_BLOCK_HIER_LEVELS</ref>];</highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>fullBlkLayerMask<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>addSuppCodes(Tab&lt;const<sp/>ShaderStateBlock<sp/>*&gt;<sp/>&amp;ssbHier,<sp/>Tab&lt;blk_word_t&gt;<sp/>&amp;codes)</highlight></codeline>
<codeline lineno="60"><highlight class="normal">{</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classShaderStateBlock" kindref="compound">ShaderStateBlock</ref><sp/>&amp;lb<sp/>=<sp/>*ssbHier.back();</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!lb.<ref refid="classShaderStateBlock_1ae5f9acfd14a6cfe151e09ca904f4805c" kindref="member">shConst</ref>.<ref refid="structNamedConstBlock_1ad28a319c4c4d3d6d500653d1fb7614d9" kindref="member">suppBlk</ref>.size())</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/>blk_word_t<sp/>c<sp/>=<sp/>BLK_WORD_FULLMASK;</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>1;<sp/>i<sp/>&lt;<sp/>ssbHier.size();<sp/>i++)</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>c<sp/>=<sp/>(c<sp/>&amp;<sp/>~ssbHier[i]-&gt;btd.uidMask)<sp/>|<sp/>ssbHier[i]-&gt;btd.uidVal;</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/>codes.push_back(c);</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>lb.<ref refid="classShaderStateBlock_1ae5f9acfd14a6cfe151e09ca904f4805c" kindref="member">shConst</ref>.<ref refid="structNamedConstBlock_1ad28a319c4c4d3d6d500653d1fb7614d9" kindref="member">suppBlk</ref>.size();<sp/>i++)</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ssbHier.push_back(lb.<ref refid="classShaderStateBlock_1ae5f9acfd14a6cfe151e09ca904f4805c" kindref="member">shConst</ref>.<ref refid="structNamedConstBlock_1ad28a319c4c4d3d6d500653d1fb7614d9" kindref="member">suppBlk</ref>[i]);</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>addSuppCodes(ssbHier,<sp/>codes);</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ssbHier.pop_back();</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="76"><highlight class="normal">}</highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>processShaderBlocks(dag::Span&lt;ShaderStateBlock<sp/>*&gt;<sp/>blocks,<sp/>SharedStorage&lt;blk_word_t&gt;<sp/>&amp;blkPartSign)</highlight></codeline>
<codeline lineno="79"><highlight class="normal">{</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>blk_count[<ref refid="namedConst_8h_1ad736eaf66e63df63fdef8ab710d6f88e" kindref="member">SHADER_BLOCK_HIER_LEVELS</ref>];</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/>memset(blk_count,<sp/>0,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(blk_count));</highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>blocks.size();<sp/>i++)</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/>G_ASSERT(blocks[i]);</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(blocks[i]-&gt;layerLevel<sp/>==<sp/><ref refid="namedConst_8h_1a8df4796c58d0d8445eaf37bb57425b6cad898411bc00251ab145d6c0d5971f3ab" kindref="member">ShaderBlockLevel::GLOBAL_CONST</ref>)</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/>G_ASSERT(blocks[i]-&gt;layerLevel<sp/>!=<sp/><ref refid="namedConst_8h_1a8df4796c58d0d8445eaf37bb57425b6ca0db45d2a4141101bdfe48e3314cfbca3" kindref="member">ShaderBlockLevel::UNDEFINED</ref><sp/>&amp;&amp;<sp/>blocks[i]-&gt;layerLevel<sp/>&lt;<sp/><ref refid="namedConst_8h_1a8df4796c58d0d8445eaf37bb57425b6caa05d35337eb28027e70aef2ea40ff1df" kindref="member">ShaderBlockLevel::SHADER</ref>);</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/>blk_count[size_t(blocks[i]-&gt;layerLevel)]++;</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/>fast_sort(blocks[i]-&gt;shConst.suppBlk,</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>[](</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>bindump::Address&lt;ShaderStateBlock&gt;<sp/>&amp;a,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>bindump::Address&lt;ShaderStateBlock&gt;<sp/>&amp;b)<sp/>{<sp/>return<sp/>a.get()<sp/>&lt;<sp/>b.get();<sp/>});</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/>fast_sort(blocks,</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/>[](</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classShaderStateBlock" kindref="compound">ShaderStateBlock</ref><sp/>*b1,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classShaderStateBlock" kindref="compound">ShaderStateBlock</ref><sp/>*b2)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>strcmp(b1-&gt;<ref refid="classShaderStateBlock_1ad24cbadd146d234944b96fd320d43aad" kindref="member">name</ref>.c_str(),<sp/>b2-&gt;<ref refid="classShaderStateBlock_1ad24cbadd146d234944b96fd320d43aad" kindref="member">name</ref>.c_str())<sp/>&lt;<sp/>0;<sp/>});</highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>bit_per_layer[<ref refid="namedConst_8h_1ad736eaf66e63df63fdef8ab710d6f88e" kindref="member">SHADER_BLOCK_HIER_LEVELS</ref>];</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>sum_shift[<ref refid="namedConst_8h_1ad736eaf66e63df63fdef8ab710d6f88e" kindref="member">SHADER_BLOCK_HIER_LEVELS</ref>];</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>total_bits<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/><ref refid="namedConst_8h_1ad736eaf66e63df63fdef8ab710d6f88e" kindref="member">SHADER_BLOCK_HIER_LEVELS</ref>;<sp/>i++)</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/>blk_count[i]++;</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/>bit_per_layer[i]<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>((1<sp/>&lt;&lt;<sp/>bit_per_layer[i])<sp/>&lt;<sp/>blk_count[i])</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>bit_per_layer[i]++;</highlight></codeline>
<codeline lineno="105"><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/>sum_shift[i]<sp/>=<sp/>total_bits;</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/>total_bits<sp/>+=<sp/>bit_per_layer[i];</highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/>hardcodedBlk[i].<ref refid="structShaderStateBlock_1_1BuildTimeData_1a5f1b5c86064dc9718210739a768dca7f" kindref="member">uidMask</ref><sp/>=<sp/>((1<sp/>&lt;&lt;<sp/>bit_per_layer[i])<sp/>-<sp/>1)<sp/>&lt;&lt;<sp/>sum_shift[i];</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/>hardcodedBlk[i].<ref refid="structShaderStateBlock_1_1BuildTimeData_1a0bd87a2635b1c508da73fc9196415c6c" kindref="member">uidVal</ref><sp/>=<sp/>0xFFFFFFFF<sp/>&amp;<sp/>hardcodedBlk[i].<ref refid="structShaderStateBlock_1_1BuildTimeData_1a5f1b5c86064dc9718210739a768dca7f" kindref="member">uidMask</ref>;</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>check<sp/>total<sp/>bit<sp/>count<sp/>is<sp/>LESS<sp/>than<sp/>word<sp/>bit<sp/>count,<sp/>since<sp/>we<sp/>need<sp/>1<sp/>more<sp/>bit<sp/>to<sp/>signify<sp/>invalid<sp/>word</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/>G_ASSERT(total_bits<sp/>&lt;<sp/>BLK_WORD_BITS);</highlight></codeline>
<codeline lineno="114"><highlight class="normal"></highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/>fullBlkLayerMask<sp/>=<sp/>(1<sp/>&lt;&lt;<sp/>total_bits)<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="116"><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/>memset(blk_count,<sp/>0,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(blk_count));</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>blocks.size();<sp/>i++)</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(blocks[i]-&gt;layerLevel<sp/>==<sp/><ref refid="namedConst_8h_1a8df4796c58d0d8445eaf37bb57425b6cad898411bc00251ab145d6c0d5971f3ab" kindref="member">ShaderBlockLevel::GLOBAL_CONST</ref>)</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>blocks[i]-&gt;btd.uidMask<sp/>=<sp/>blocks[i]-&gt;btd.uidVal<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>layer<sp/>=<sp/>size_t(blocks[i]-&gt;layerLevel);</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/>blocks[i]-&gt;btd.uidMask<sp/>=<sp/>((1<sp/>&lt;&lt;<sp/>bit_per_layer[layer])<sp/>-<sp/>1)<sp/>&lt;&lt;<sp/>sum_shift[layer];</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/>blocks[i]-&gt;btd.uidVal<sp/>=<sp/>blk_count[layer]<sp/>&lt;&lt;<sp/>sum_shift[layer];</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/>blk_count[layer]++;</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="130"><highlight class="normal"></highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/>Tab&lt;blk_word_t&gt;<sp/>codes(tmpmem);</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/>Tab&lt;const<sp/>ShaderStateBlock<sp/>*&gt;<sp/>ssbHier(tmpmem);</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>blocks.size();<sp/>i++)</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>layer<sp/>=<sp/>blocks[i]-&gt;layerLevel;</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(layer<sp/>==<sp/><ref refid="namedConst_8h_1a8df4796c58d0d8445eaf37bb57425b6cac57e921596445b99ab85558984966184" kindref="member">ShaderBlockLevel::FRAME</ref><sp/>||<sp/>layer<sp/>==<sp/><ref refid="namedConst_8h_1a8df4796c58d0d8445eaf37bb57425b6cad898411bc00251ab145d6c0d5971f3ab" kindref="member">ShaderBlockLevel::GLOBAL_CONST</ref>)</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>blocks[i]-&gt;btd.suppMask<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>blocks[i]-&gt;btd.suppListOfs<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="142"><highlight class="normal"></highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/>codes.clear();</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/>ssbHier.clear();</highlight></codeline>
<codeline lineno="145"><highlight class="normal"></highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/>ssbHier.push_back(blocks[i]);</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/>addSuppCodes(ssbHier,<sp/>codes);</highlight></codeline>
<codeline lineno="148"><highlight class="normal"></highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>mask<sp/>=<sp/>(1<sp/>&lt;&lt;<sp/>sum_shift[size_t(layer)])<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>codes.size();<sp/>j++)</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>codes[j]<sp/>&amp;=<sp/>mask;</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/>codes.push_back(BLK_WORD_FULLMASK);</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(codes.size()<sp/>&gt;<sp/>2)</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>fast_sort(codes,<sp/>[](blk_word_t<sp/>a,<sp/>blk_word_t<sp/>b)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>a<sp/>&lt;<sp/>b;<sp/>});</highlight></codeline>
<codeline lineno="155"><highlight class="normal"></highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/>blkPartSign.getRef(blocks[i]-&gt;btd.suppListOfs,<sp/>codes.data(),<sp/>codes.size(),<sp/>64);</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/>blocks[i]-&gt;btd.suppMask<sp/>=<sp/>mask;</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="159"><highlight class="normal">}</highlight></codeline>
<codeline lineno="160"><highlight class="normal"></highlight></codeline>
<codeline lineno="161"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="162"><highlight class="normal"></highlight><highlight class="comment">//<sp/>binary<sp/>dump<sp/>builder</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="163"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="164"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="namespacesemicooked_1a512be2e649522fe663e5bf44fe19eb45" kindref="member">areIntervalsEqual</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>shader_layout::Interval&lt;&gt;<sp/>&amp;a,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>shader_layout::Interval&lt;&gt;<sp/>&amp;b)</highlight></codeline>
<codeline lineno="165"><highlight class="normal">{</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>a.nameId<sp/>==<sp/>b.nameId<sp/>&amp;&amp;<sp/>a.type<sp/>==<sp/>b.type<sp/>&amp;&amp;<sp/>a.maxVal<sp/>==<sp/>b.maxVal;</highlight></codeline>
<codeline lineno="167"><highlight class="normal">}</highlight></codeline>
<codeline lineno="168"><highlight class="normal"></highlight></codeline>
<codeline lineno="169" refid="structsemicooked_1_1Variables" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structsemicooked_1_1Variables" kindref="compound">Variables</ref></highlight></codeline>
<codeline lineno="170"><highlight class="normal">{</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><ref refid="structsemicooked_1_1Variables" kindref="compound">Variables</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>GatherNameMap<sp/>&amp;vmap,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classshc_1_1TargetContext" kindref="compound">shc::TargetContext</ref><sp/>&amp;a_ctx)<sp/>:<sp/><ref refid="structsemicooked_1_1Variables_1a32fdd4474378ba21fffe4339fe33e319" kindref="member">ctx</ref>{a_ctx},<sp/><ref refid="structsemicooked_1_1Variables_1aebd08ea6cdd24c727edcdbe144657b4b" kindref="member">varLists</ref>(tmpmem),<sp/><ref refid="structsemicooked_1_1Variables_1acc934bd5e7499d2d77f7b2c2348398ea" kindref="member">varMap</ref>(vmap)<sp/>{}</highlight></codeline>
<codeline lineno="172"><highlight class="normal"></highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="structsemicooked_1_1Variables_1ac9434f69a9263b5a5cd5e063de849dbc" kindref="member">addGlobVars</ref>(Tab&lt;int&gt;<sp/>&amp;remappingTable)</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Tab&lt;ShaderGlobal::Var&gt;<sp/>&amp;globvars<sp/>=<sp/><ref refid="structsemicooked_1_1Variables_1a32fdd4474378ba21fffe4339fe33e319" kindref="member">ctx</ref>.<ref refid="classshc_1_1TargetContext_1a77a4453b2a7ddead5199305bd6205fa1" kindref="member">globVars</ref>().<ref refid="classShaderGlobal_1_1VarTable_1abe0f36dbf6ab831e9a00a9afef6aa972" kindref="member">getVariableList</ref>();</highlight></codeline>
<codeline lineno="176"><highlight class="normal"></highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>count<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>remappingTable.size();<sp/>i++)</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(remappingTable[i]<sp/>!=<sp/>-1)</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>count++;</highlight></codeline>
<codeline lineno="181"><highlight class="normal"></highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal"><sp/>=<sp/>append_items(<ref refid="structsemicooked_1_1Variables_1aebd08ea6cdd24c727edcdbe144657b4b" kindref="member">varLists</ref>,<sp/>1);</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!count)</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>id;</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;vl<sp/>=<sp/><ref refid="structsemicooked_1_1Variables_1aebd08ea6cdd24c727edcdbe144657b4b" kindref="member">varLists</ref>[id];</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/>vl.v<sp/>=<sp/><ref refid="structsemicooked_1_1Variables_1ad1a852a79cf94b4894aec56fadaaa20a" kindref="member">vars</ref>.getElementAddress(<ref refid="structsemicooked_1_1Variables_1ad1a852a79cf94b4894aec56fadaaa20a" kindref="member">vars</ref>.size());</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/>vl.v.setCount(count);</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structsemicooked_1_1Variables_1ad1a852a79cf94b4894aec56fadaaa20a" kindref="member">vars</ref>.resize(<ref refid="structsemicooked_1_1Variables_1ad1a852a79cf94b4894aec56fadaaa20a" kindref="member">vars</ref>.size()<sp/>+<sp/>count);</highlight></codeline>
<codeline lineno="189"><highlight class="normal"></highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>gv_ind<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>remappingTable.size();<sp/>i++)</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(remappingTable[i]<sp/>!=<sp/>-1)</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classShaderGlobal_1_1Var" kindref="compound">ShaderGlobal::Var</ref><sp/>&amp;v<sp/>=<sp/>globvars[i];</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>G_ASSERT(v.<ref refid="classShaderGlobal_1_1Var_1a6be99f3c9b6f487404d17919a34e5f68" kindref="member">nameId</ref><sp/>&gt;=<sp/>0<sp/>&amp;&amp;<sp/>v.<ref refid="classShaderGlobal_1_1Var_1a6be99f3c9b6f487404d17919a34e5f68" kindref="member">nameId</ref><sp/>&lt;<sp/><ref refid="structsemicooked_1_1Variables_1acc934bd5e7499d2d77f7b2c2348398ea" kindref="member">varMap</ref>.xmap.size());</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vl.v[gv_ind].nameId<sp/>=<sp/><ref refid="structsemicooked_1_1Variables_1acc934bd5e7499d2d77f7b2c2348398ea" kindref="member">varMap</ref>.xmap[v.<ref refid="classShaderGlobal_1_1Var_1a6be99f3c9b6f487404d17919a34e5f68" kindref="member">nameId</ref>];</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vl.v[gv_ind].type<sp/>=<sp/>v.<ref refid="classShaderGlobal_1_1Var_1aa0609c924a6e9ca2c3b5bbad89877fe3" kindref="member">type</ref>;</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vl.v[gv_ind].isPublic<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gv_ind++;</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="203"><highlight class="normal"></highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/>debug(</highlight><highlight class="stringliteral">&quot;Global<sp/>vars<sp/>count<sp/>after<sp/>remapping<sp/>=<sp/>%d&quot;</highlight><highlight class="normal">,<sp/>vl.v.size());</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structsemicooked_1_1Variables_1a9d2b2a7481875d0f8304764beb0e09a4" kindref="member">fillStorage</ref>(vl,<sp/>4,<sp/>remappingTable);</highlight></codeline>
<codeline lineno="206"><highlight class="normal"></highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Checking<sp/>that<sp/>the<sp/>array<sp/>elements<sp/>are<sp/>in<sp/>the<sp/>correct<sp/>order</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>remappingTable.size();<sp/>i++)</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(remappingTable[i]<sp/>==<sp/>-1)</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="212"><highlight class="normal"></highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classShaderGlobal_1_1Var" kindref="compound">ShaderGlobal::Var</ref><sp/>&amp;v<sp/>=<sp/>globvars[i];</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(v.<ref refid="classShaderGlobal_1_1Var_1acaaeaf1082772680c6d059565eba21ca" kindref="member">array_size</ref><sp/>==<sp/>1<sp/>||<sp/>v.<ref refid="classShaderGlobal_1_1Var_1a215fdcf749e52594b2ea408fd03f3f30" kindref="member">index</ref><sp/>!=<sp/>0)</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="216"><highlight class="normal"></highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>find_var<sp/>=<sp/>[&amp;,<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">](</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classShaderGlobal_1_1Var" kindref="compound">ShaderGlobal::Var</ref><sp/>&amp;v)<sp/>-&gt;<sp/>shader_layout::Var&lt;&gt;<sp/>*<sp/>{</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;var<sp/>:<sp/>vl.v)</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(var.nameId<sp/>==<sp/><ref refid="structsemicooked_1_1Variables_1acc934bd5e7499d2d77f7b2c2348398ea" kindref="member">varMap</ref>.xmap[v.<ref refid="classShaderGlobal_1_1Var_1a6be99f3c9b6f487404d17919a34e5f68" kindref="member">nameId</ref>])</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>&amp;var;</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>G_ASSERT(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="224"><highlight class="normal"></highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>first_var<sp/>=<sp/>find_var(v);</highlight></codeline>
<codeline lineno="226"><highlight class="normal"></highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>i<sp/>+<sp/>1;<sp/>j<sp/>&lt;<sp/>i<sp/>+<sp/>v.<ref refid="classShaderGlobal_1_1Var_1acaaeaf1082772680c6d059565eba21ca" kindref="member">array_size</ref>;<sp/>j++)</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classShaderGlobal_1_1Var" kindref="compound">ShaderGlobal::Var</ref><sp/>&amp;elem<sp/>=<sp/>globvars[j];</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>next_var<sp/>=<sp/>find_var(elem);</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)&amp;next_var-&gt;valPtr.get()<sp/>-<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)&amp;first_var-&gt;valPtr.get()<sp/>!=<sp/>(j<sp/>-<sp/>i)<sp/>*<sp/>4<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">))</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="shLog_8cpp_1a2926179632c7c86265007652d3d30b14" kindref="member">sh_debug</ref>(<ref refid="shLog_8h_1a66042048eb3ce30a1dccb2ebf8c2fd5caae3b70b41400c8a36e8a094ac1dbe43c" kindref="member">SHLOG_ERROR</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Wrong<sp/>element<sp/>array<sp/>order<sp/>for<sp/>`%s`&quot;</highlight><highlight class="normal">,<sp/><ref refid="structsemicooked_1_1Variables_1acc934bd5e7499d2d77f7b2c2348398ea" kindref="member">varMap</ref>.getOrdinalName(first_var-&gt;nameId));</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="235"><highlight class="normal"></highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>id;</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="238"><highlight class="normal"></highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="structsemicooked_1_1Variables_1a7cd591f31dada36a25e50170b303e78e" kindref="member">addLocalVars</ref>(dag::ConstSpan&lt;::ShaderClass::Var&gt;<sp/>locvar)</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal"><sp/>=<sp/>append_items(<ref refid="structsemicooked_1_1Variables_1aebd08ea6cdd24c727edcdbe144657b4b" kindref="member">varLists</ref>,<sp/>1);</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(locvar.empty())</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>id;</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;vl<sp/>=<sp/><ref refid="structsemicooked_1_1Variables_1aebd08ea6cdd24c727edcdbe144657b4b" kindref="member">varLists</ref>[id];</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/>vl.v<sp/>=<sp/><ref refid="structsemicooked_1_1Variables_1ad1a852a79cf94b4894aec56fadaaa20a" kindref="member">vars</ref>.getElementAddress(<ref refid="structsemicooked_1_1Variables_1ad1a852a79cf94b4894aec56fadaaa20a" kindref="member">vars</ref>.size());</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/>vl.v.setCount(locvar.size());</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structsemicooked_1_1Variables_1ad1a852a79cf94b4894aec56fadaaa20a" kindref="member">vars</ref>.resize(<ref refid="structsemicooked_1_1Variables_1ad1a852a79cf94b4894aec56fadaaa20a" kindref="member">vars</ref>.size()<sp/>+<sp/>locvar.size());</highlight></codeline>
<codeline lineno="248"><highlight class="normal"></highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>locvar.size();<sp/>i++)</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>::ShaderClass::Var<sp/>&amp;v<sp/>=<sp/>locvar[i];</highlight></codeline>
<codeline lineno="252"><highlight class="normal"></highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>G_ASSERT(v.nameId<sp/>&gt;=<sp/>0<sp/>&amp;&amp;<sp/>v.nameId<sp/>&lt;<sp/><ref refid="structsemicooked_1_1Variables_1acc934bd5e7499d2d77f7b2c2348398ea" kindref="member">varMap</ref>.xmap.size());</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>vl.v[i].nameId<sp/>=<sp/><ref refid="structsemicooked_1_1Variables_1acc934bd5e7499d2d77f7b2c2348398ea" kindref="member">varMap</ref>.xmap[v.nameId];</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>vl.v[i].type<sp/>=<sp/>v.type;</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>vl.v[i].isPublic<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="258"><highlight class="normal"></highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structsemicooked_1_1Variables_1a51bfb256f0299be20c0320a50cde721d" kindref="member">allocStorage</ref>(vl,<sp/>1);</highlight></codeline>
<codeline lineno="260"><highlight class="normal"></highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>locvar.size();<sp/>i++)</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>::ShaderClass::Var<sp/>&amp;v<sp/>=<sp/>locvar[i];</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>sz<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(v.type)</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>SHVT_INT:</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>SHVT_REAL:<sp/>*vl.v[i].valPtr<sp/>=<sp/>v.defval.i;<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>SHVT_INT4:</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>SHVT_COLOR4:<sp/>memcpy(&amp;vl.v[i].valPtr.get(),<sp/>&amp;v.defval,<sp/>16);<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>SHVT_FLOAT4X4:<sp/>memset(&amp;vl.v[i].valPtr.get(),<sp/>0,<sp/>16<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">));<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>SHVT_TEXTURE:<sp/>*(TEXTUREID<sp/>*)&amp;vl.v[i].valPtr.get()<sp/>=<sp/>BAD_TEXTUREID;<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>SHVT_BUFFER:<sp/>*(D3DRESID<sp/>*)&amp;vl.v[i].valPtr.get()<sp/>=<sp/>BAD_D3DRESID;<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>SHVT_SAMPLER:<sp/>*(d3d::SamplerHandle<sp/>*)&amp;vl.v[i].valPtr.get()<sp/>=<sp/>d3d::INVALID_SAMPLER_HANDLE;<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>SHVT_TLAS:<sp/>*(RaytraceTopAccelerationStructure<sp/>**)&amp;vl.v[i].valPtr.get()<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="278"><highlight class="normal"></highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>id;</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="281"><highlight class="normal"></highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="structsemicooked_1_1Variables_1a9d2b2a7481875d0f8304764beb0e09a4" kindref="member">fillStorage</ref>(shader_layout::VarList&lt;&gt;<sp/>&amp;vl,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>tex_size,<sp/>Tab&lt;int&gt;<sp/>&amp;remapTable)</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Tab&lt;ShaderGlobal::Var&gt;<sp/>&amp;globvars<sp/>=<sp/><ref refid="structsemicooked_1_1Variables_1a32fdd4474378ba21fffe4339fe33e319" kindref="member">ctx</ref>.<ref refid="classshc_1_1TargetContext_1a77a4453b2a7ddead5199305bd6205fa1" kindref="member">globVars</ref>().<ref refid="classShaderGlobal_1_1VarTable_1abe0f36dbf6ab831e9a00a9afef6aa972" kindref="member">getVariableList</ref>();</highlight></codeline>
<codeline lineno="285"><highlight class="normal"></highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structsemicooked_1_1Variables_1a51bfb256f0299be20c0320a50cde721d" kindref="member">allocStorage</ref>(vl,<sp/>tex_size);</highlight></codeline>
<codeline lineno="287"><highlight class="normal"></highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>globvars.size();<sp/>i++)</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(remapTable[i]<sp/>==<sp/>-1)</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classShaderGlobal_1_1Var" kindref="compound">ShaderGlobal::Var</ref><sp/>&amp;v<sp/>=<sp/>globvars[i];</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;var<sp/>:<sp/>vl.v)</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(var.nameId<sp/>==<sp/><ref refid="structsemicooked_1_1Variables_1acc934bd5e7499d2d77f7b2c2348398ea" kindref="member">varMap</ref>.xmap[v.<ref refid="classShaderGlobal_1_1Var_1a6be99f3c9b6f487404d17919a34e5f68" kindref="member">nameId</ref>])</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>G_ASSERT(v.<ref refid="classShaderGlobal_1_1Var_1aa0609c924a6e9ca2c3b5bbad89877fe3" kindref="member">type</ref><sp/>==<sp/>var.type);</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(v.<ref refid="classShaderGlobal_1_1Var_1aa0609c924a6e9ca2c3b5bbad89877fe3" kindref="member">type</ref>)</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>SHVT_INT:</highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>SHVT_REAL:<sp/>*var.valPtr<sp/>=<sp/>v.<ref refid="classShaderGlobal_1_1Var_1a089a05dad5177dca4aab1dd018732f87" kindref="member">value</ref>.<ref refid="unionShaderGlobal_1_1StVarValue_1abcf4d3bfc37c8a74a77806e229585e52" kindref="member">i</ref>;<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>SHVT_INT4:</highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>SHVT_COLOR4:<sp/>memcpy(&amp;var.valPtr.get(),<sp/>&amp;v.<ref refid="classShaderGlobal_1_1Var_1a089a05dad5177dca4aab1dd018732f87" kindref="member">value</ref>,<sp/>16);<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>SHVT_FLOAT4X4:<sp/>memset(&amp;var.valPtr.get(),<sp/>0,<sp/>16<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">));<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>SHVT_TEXTURE:<sp/>*(TEXTUREID<sp/>*)&amp;var.valPtr.get()<sp/>=<sp/>BAD_TEXTUREID;<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>SHVT_BUFFER:<sp/>*(D3DRESID<sp/>*)&amp;var.valPtr.get()<sp/>=<sp/>BAD_D3DRESID;<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>SHVT_SAMPLER:<sp/>*(d3d::SamplerHandle<sp/>*)&amp;var.valPtr.get()<sp/>=<sp/>d3d::INVALID_SAMPLER_HANDLE;<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>SHVT_TLAS:<sp/>*(RaytraceTopAccelerationStructure<sp/>**)&amp;var.valPtr.get()<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="314"><highlight class="normal"></highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="structsemicooked_1_1Variables_1a51bfb256f0299be20c0320a50cde721d" kindref="member">allocStorage</ref>(shader_layout::VarList&lt;&gt;<sp/>&amp;vl,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>tex_size<sp/>=<sp/>1)</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stor_start<sp/>=<sp/><ref refid="structsemicooked_1_1Variables_1a0cb15dc49e3a72e065e2002852714eda" kindref="member">storage</ref>.size();</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stor_p<sp/>=<sp/>stor_start;</highlight></codeline>
<codeline lineno="319"><highlight class="normal"></highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;var<sp/>:<sp/>vl.v)</highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(var.type<sp/>==<sp/>SHVT_COLOR4<sp/>||<sp/>var.type<sp/>==<sp/>SHVT_INT4<sp/>||<sp/>var.type<sp/>==<sp/>SHVT_FLOAT4X4)</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(stor_p<sp/>&amp;<sp/>3)</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stor_p<sp/>=<sp/>(stor_p<sp/>+<sp/>4)<sp/>&amp;<sp/>~3;</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var.valPtr<sp/>=<sp/><ref refid="structsemicooked_1_1Variables_1a0cb15dc49e3a72e065e2002852714eda" kindref="member">storage</ref>.getElementAddress(stor_p);</highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stor_p<sp/>+=<sp/>var.type<sp/>==<sp/>SHVT_FLOAT4X4<sp/>?<sp/>4<sp/>*<sp/>4<sp/>:<sp/>4;</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="328"><highlight class="normal"></highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;var<sp/>:<sp/>vl.v)</highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(var.type<sp/>==<sp/>SHVT_TEXTURE<sp/>||<sp/>var.type<sp/>==<sp/>SHVT_BUFFER)</highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(tex_size<sp/>==<sp/>4<sp/>&amp;&amp;<sp/>(stor_p<sp/>&amp;<sp/>3))</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stor_p<sp/>=<sp/>(stor_p<sp/>+<sp/>4)<sp/>&amp;<sp/>~3;</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var.valPtr<sp/>=<sp/><ref refid="structsemicooked_1_1Variables_1a0cb15dc49e3a72e065e2002852714eda" kindref="member">storage</ref>.getElementAddress(stor_p);</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stor_p<sp/>+=<sp/>tex_size;</highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="337"><highlight class="normal"></highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;var<sp/>:<sp/>vl.v)</highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(var.type<sp/>==<sp/>SHVT_TLAS)</highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(stor_p<sp/>&amp;<sp/>3)</highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stor_p<sp/>=<sp/>(stor_p<sp/>+<sp/>4)<sp/>&amp;<sp/>~3;</highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var.valPtr<sp/>=<sp/><ref refid="structsemicooked_1_1Variables_1a0cb15dc49e3a72e065e2002852714eda" kindref="member">storage</ref>.getElementAddress(stor_p);</highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stor_p<sp/>+=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(RaytraceTopAccelerationStructure<sp/>*)<sp/>/<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="346"><highlight class="normal"></highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;var<sp/>:<sp/>vl.v)</highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(var.type<sp/>==<sp/>SHVT_SAMPLER)</highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(stor_p<sp/>&amp;<sp/>3)</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stor_p<sp/>=<sp/>(stor_p<sp/>+<sp/>4)<sp/>&amp;<sp/>~3;</highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var.valPtr<sp/>=<sp/><ref refid="structsemicooked_1_1Variables_1a0cb15dc49e3a72e065e2002852714eda" kindref="member">storage</ref>.getElementAddress(stor_p);</highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stor_p<sp/>+=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(d3d::SamplerHandle)<sp/>/<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="355"><highlight class="normal"></highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;var<sp/>:<sp/>vl.v)</highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(var.type<sp/>==<sp/>SHVT_REAL<sp/>||<sp/>var.type<sp/>==<sp/>SHVT_INT)</highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var.valPtr<sp/>=<sp/><ref refid="structsemicooked_1_1Variables_1a0cb15dc49e3a72e065e2002852714eda" kindref="member">storage</ref>.getElementAddress(stor_p++);</highlight></codeline>
<codeline lineno="359"><highlight class="normal"></highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;var<sp/>:<sp/>vl.v)</highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(var.type<sp/>!=<sp/>SHVT_INT<sp/>&amp;&amp;<sp/>var.type<sp/>!=<sp/>SHVT_INT4<sp/>&amp;&amp;<sp/>var.type<sp/>!=<sp/>SHVT_REAL<sp/>&amp;&amp;<sp/>var.type<sp/>!=<sp/>SHVT_COLOR4<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var.type<sp/>!=<sp/>SHVT_TEXTURE<sp/>&amp;&amp;<sp/>var.type<sp/>!=<sp/>SHVT_BUFFER<sp/>&amp;&amp;<sp/>var.type<sp/>!=<sp/>SHVT_TLAS<sp/>&amp;&amp;<sp/>var.type<sp/>!=<sp/>SHVT_FLOAT4X4<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var.type<sp/>!=<sp/>SHVT_SAMPLER)</highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>debug(</highlight><highlight class="stringliteral">&quot;[vErr]<sp/>unknown<sp/>type<sp/>%d<sp/>for<sp/>var<sp/>=<sp/>%s&quot;</highlight><highlight class="normal">,<sp/>var.type,<sp/><ref refid="structsemicooked_1_1Variables_1acc934bd5e7499d2d77f7b2c2348398ea" kindref="member">varMap</ref>.getOrdinalName(var.nameId));</highlight></codeline>
<codeline lineno="365"><highlight class="normal"></highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structsemicooked_1_1Variables_1a0cb15dc49e3a72e065e2002852714eda" kindref="member">storage</ref>.resize(<ref refid="structsemicooked_1_1Variables_1a0cb15dc49e3a72e065e2002852714eda" kindref="member">storage</ref>.size()<sp/>+<sp/>stor_p<sp/>-<sp/>stor_start);</highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="368"><highlight class="normal"></highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classshc_1_1TargetContext" kindref="compound">shc::TargetContext</ref><sp/>&amp;<ref refid="structsemicooked_1_1Variables_1a32fdd4474378ba21fffe4339fe33e319" kindref="member">ctx</ref>;</highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/>bindump::VecHolder&lt;int,<sp/>4<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(int)&gt;<sp/><ref refid="structsemicooked_1_1Variables_1a0cb15dc49e3a72e065e2002852714eda" kindref="member">storage</ref>;</highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/>Tab&lt;shader_layout::VarList&lt;&gt;&gt;<sp/><ref refid="structsemicooked_1_1Variables_1aebd08ea6cdd24c727edcdbe144657b4b" kindref="member">varLists</ref>;</highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/>bindump::VecHolder&lt;shader_layout::Var&lt;&gt;&gt;<sp/><ref refid="structsemicooked_1_1Variables_1ad1a852a79cf94b4894aec56fadaaa20a" kindref="member">vars</ref>;</highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>GatherNameMap<sp/>&amp;<ref refid="structsemicooked_1_1Variables_1acc934bd5e7499d2d77f7b2c2348398ea" kindref="member">varMap</ref>;</highlight></codeline>
<codeline lineno="374"><highlight class="normal">};</highlight></codeline>
<codeline lineno="375"><highlight class="normal"></highlight></codeline>
<codeline lineno="376" refid="structsemicooked_1_1Variants" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structsemicooked_1_1Variants" kindref="compound">Variants</ref></highlight></codeline>
<codeline lineno="377"><highlight class="normal">{</highlight></codeline>
<codeline lineno="378" refid="structsemicooked_1_1Variants_1_1VariantPair" refkind="compound"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structsemicooked_1_1Variants_1_1VariantPair" kindref="compound">VariantPair</ref></highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="structsemicooked_1_1Variants_1_1VariantPair_1a64f8e16b8d52663174eda3e5d1d21f27" kindref="member">code</ref>;</highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="structsemicooked_1_1Variants_1_1VariantPair_1a1721d68d06c95c2a30dd68eff714ec7b" kindref="member">codeId</ref>;</highlight></codeline>
<codeline lineno="382"><highlight class="normal"></highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="structsemicooked_1_1Variants_1_1VariantPair_1a24cbda98827b35cad3a0900ca8afd73f" kindref="member">cmpCode</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structsemicooked_1_1Variants_1_1VariantPair" kindref="compound">VariantPair</ref><sp/>*a,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structsemicooked_1_1Variants_1_1VariantPair" kindref="compound">VariantPair</ref><sp/>*b)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>a-&gt;<ref refid="structsemicooked_1_1Variants_1_1VariantPair_1a64f8e16b8d52663174eda3e5d1d21f27" kindref="member">code</ref><sp/>-<sp/>b-&gt;<ref refid="structsemicooked_1_1Variants_1_1VariantPair_1a64f8e16b8d52663174eda3e5d1d21f27" kindref="member">code</ref>;<sp/>}</highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="385"><highlight class="normal"></highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/><ref refid="structsemicooked_1_1Variants" kindref="compound">Variants</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>GatherNameMap<sp/>&amp;vmap,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classshc_1_1TargetContext" kindref="compound">shc::TargetContext</ref><sp/>&amp;a_ctx)<sp/>:</highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structsemicooked_1_1Variants_1aa5ad341c73b80c78f02228ae37683772" kindref="member">ctx</ref>{a_ctx},<sp/><ref refid="structsemicooked_1_1Variants_1a4223a892ef4750ce1a17fe4492a94ab8" kindref="member">intervals</ref>(tmpmem),<sp/><ref refid="structsemicooked_1_1Variants_1a5643b133654063957c7b16ab67842bfc" kindref="member">subintervals_by_interval</ref>(tmpmem),<sp/><ref refid="structsemicooked_1_1Variants_1a64285910c1136b5cd0cbb7bf2793d372" kindref="member">varMap</ref>(vmap)</highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/>{}</highlight></codeline>
<codeline lineno="389"><highlight class="normal"></highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="structsemicooked_1_1Variants_1a4316e0db025caf7165e6d357880c993f" kindref="member">clearTemp</ref>()</highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/><sp/><sp/>clear_and_shrink(<ref refid="structsemicooked_1_1Variants_1a888ad476c9ebea27dc14ec21a772e1b2" kindref="member">tmpVpDir</ref>);</highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/><sp/><sp/>clear_and_shrink(<ref refid="structsemicooked_1_1Variants_1aaa904e2a6a87e02ac91fae94504da404" kindref="member">tmpVpInt</ref>);</highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/><sp/><sp/>clear_and_shrink(<ref refid="structsemicooked_1_1Variants_1a86a65bd8433f54f09068e387b7bbbb94" kindref="member">tmpMapData</ref>);</highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="396"><highlight class="normal"></highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/>shader_layout::VariantTable&lt;&gt;<sp/><ref refid="structsemicooked_1_1Variants_1adf6ed1a5c905aa72b49214e3fb358731" kindref="member">addVariantTable</ref>(<ref refid="classShaderVariant_1_1VariantTable" kindref="compound">ShaderVariant::VariantTable</ref><sp/>&amp;vt,<sp/>dag::ConstSpan&lt;int&gt;<sp/>codeRemap,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>codenum,</highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*shader_nm)</highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classShaderVariant_1_1TypeTable" kindref="compound">ShaderVariant::TypeTable</ref><sp/>&amp;typeList<sp/>=<sp/>vt.<ref refid="classShaderVariant_1_1VariantTable_1a0e06f60a5de8eccb50f3ece208778fb6" kindref="member">getTypes</ref>();</highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>maxVal[256];</highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/><sp/><sp/>shader_layout::VariantTable&lt;&gt;::IntervalBind<sp/>ib[64];</highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>vremap[64];</highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>mul<sp/>=<sp/>1,<sp/>pcs<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="405"><highlight class="normal"></highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>fill<sp/>interval<sp/>values</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ti<sp/>=<sp/>0;<sp/>ti<sp/>&lt;<sp/>typeList.<ref refid="classShaderVariant_1_1TypeTable_1ad107f77c534bdad10abcdea8f7709a04" kindref="member">getCount</ref>();<sp/>ti++)</highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structShaderVariant_1_1VariantType" kindref="compound">ShaderVariant::VariantType</ref><sp/>&amp;ct<sp/>=<sp/>typeList.<ref refid="classShaderVariant_1_1TypeTable_1af90d2bea0949d3dc5bc616d54e419c31" kindref="member">getType</ref>(ti);</highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>shader_layout::Interval&lt;&gt;<sp/>ival;</highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>bindump::VecHolder&lt;bindump::StrHolder&lt;&gt;&gt;<sp/>subintervals;</highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>var_num<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="413"><highlight class="normal"></highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ct.<ref refid="structShaderVariant_1_1VariantType_1ac41c9fcfa36cd0e994689c101666a7bd" kindref="member">type</ref><sp/>==<sp/><ref refid="namespaceShaderVariant_1a4cc81bf315e35fb912c2033de934e6cfa4d49e14b2742d348bc6aff506284e60b" kindref="member">ShaderVariant::VARTYPE_MODE</ref>)</highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ival.<ref refid="structShaderVariant_1_1VariantType_1ac41c9fcfa36cd0e994689c101666a7bd" kindref="member">type</ref><sp/>=<sp/>ival.TYPE_MODE;</highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(ct.<ref refid="structShaderVariant_1_1VariantType_1a0bfde85cc8794c633c641e3aa4f32051" kindref="member">extType</ref>)</highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="namespaceShaderVariant_1acba053c05d6132228610c748ab655e27a0869757dbb6efe5a2870cbc7b2df5a38" kindref="member">ShaderVariant::TWO_SIDED</ref>:</highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ival.nameId<sp/>=<sp/>ival.MODE_2SIDED;</highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var_num<sp/>=<sp/>2;</highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="namespaceShaderVariant_1acba053c05d6132228610c748ab655e27a68463dca0990df6b3c699d05b2272845" kindref="member">ShaderVariant::REAL_TWO_SIDED</ref>:</highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ival.nameId<sp/>=<sp/>ival.MODE_REAL2SIDED;</highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var_num<sp/>=<sp/>2;</highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>debug(</highlight><highlight class="stringliteral">&quot;[iOpt]<sp/>skip<sp/>unknown<sp/>mode:<sp/>%d&quot;</highlight><highlight class="normal">,<sp/>ct.<ref refid="structShaderVariant_1_1VariantType_1a0bfde85cc8794c633c641e3aa4f32051" kindref="member">extType</ref>);</highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ival.nameId<sp/>=<sp/>255;</highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="432"><highlight class="normal"></highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ival.nameId<sp/>==<sp/>255)</highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="435"><highlight class="normal"></highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>G_ASSERT(!ct.interval);</highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>maxVal[0]<sp/>=<sp/>maxVal[1]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structsemicooked_1_1Variants_1a31c33168fb761377e8045bf4183439f5" kindref="member">iValStorage</ref>.getRef(ival.maxVal,<sp/>maxVal,<sp/>var_num<sp/>-<sp/>1);</highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*ivalname<sp/>=<sp/><ref refid="intervals_8cpp_1aef12bc53dd9c642c4a8f7fa17dd50e0a" kindref="member">get_interval_name</ref>(*ct.interval,<sp/><ref refid="structsemicooked_1_1Variants_1aa5ad341c73b80c78f02228ae37683772" kindref="member">ctx</ref>);</highlight></codeline>
<codeline lineno="443"><highlight class="normal"></highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ct.<ref refid="structShaderVariant_1_1VariantType_1ac41c9fcfa36cd0e994689c101666a7bd" kindref="member">type</ref><sp/>==<sp/><ref refid="namespaceShaderVariant_1a4cc81bf315e35fb912c2033de934e6cfa9315b7bd780786690166d34c4a9841ac" kindref="member">ShaderVariant::VARTYPE_INTERVAL</ref>)</highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ival.type<sp/>=<sp/>ival.TYPE_INTERVAL;</highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ct.<ref refid="structShaderVariant_1_1VariantType_1ac41c9fcfa36cd0e994689c101666a7bd" kindref="member">type</ref><sp/>==<sp/><ref refid="namespaceShaderVariant_1a4cc81bf315e35fb912c2033de934e6cfa7f3628fe65b99b6d908e5238c40bc485" kindref="member">ShaderVariant::VARTYPE_GLOBAL_INTERVAL</ref><sp/>||<sp/>ct.<ref refid="structShaderVariant_1_1VariantType_1ac41c9fcfa36cd0e994689c101666a7bd" kindref="member">type</ref><sp/>==<sp/><ref refid="namespaceShaderVariant_1a4cc81bf315e35fb912c2033de934e6cfac22d8297449dcba859360b19c391cd08" kindref="member">ShaderVariant::VARTYPE_GL_OVERRIDE_INTERVAL</ref>)</highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ival.type<sp/>=<sp/>ival.TYPE_GLOBAL_INTERVAL;</highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>debug(</highlight><highlight class="stringliteral">&quot;[iOpt]<sp/>skip<sp/>unknown<sp/>interval<sp/>type:<sp/>%d&quot;</highlight><highlight class="normal">,<sp/>ct.<ref refid="structShaderVariant_1_1VariantType_1ac41c9fcfa36cd0e994689c101666a7bd" kindref="member">type</ref>);</highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="453"><highlight class="normal"></highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ct.interval-&gt;getValueCount()<sp/>&lt;<sp/>2)</highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>debug(</highlight><highlight class="stringliteral">&quot;[iOpt]<sp/>skip<sp/>redundunt<sp/>interval[1]&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="459"><highlight class="normal"></highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>G_ASSERT(ct.interval);</highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal"><sp/>=<sp/><ref refid="structsemicooked_1_1Variants_1a64285910c1136b5cd0cbb7bf2793d372" kindref="member">varMap</ref>.getNameId(ivalname);</highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>G_ASSERT(</highlight><highlight class="keywordtype">id</highlight><highlight class="normal"><sp/>&gt;=<sp/>0);</highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ival.nameId<sp/>=<sp/><ref refid="structsemicooked_1_1Variants_1a64285910c1136b5cd0cbb7bf2793d372" kindref="member">varMap</ref>.xmap[id];</highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>G_ASSERTF(strcmp(<ref refid="structsemicooked_1_1Variants_1a64285910c1136b5cd0cbb7bf2793d372" kindref="member">varMap</ref>.getOrdinalName(ival.nameId),<sp/>ivalname)<sp/>==<sp/>0,</highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;varMap.nameCount()=%d<sp/>varMap.getOrdinalName(%d-&gt;%d)=%s<sp/>ivalname=%s&quot;</highlight><highlight class="normal">,<sp/><ref refid="structsemicooked_1_1Variants_1a64285910c1136b5cd0cbb7bf2793d372" kindref="member">varMap</ref>.nameCount(),<sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">,<sp/>ival.nameId,</highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structsemicooked_1_1Variants_1a64285910c1136b5cd0cbb7bf2793d372" kindref="member">varMap</ref>.getOrdinalName(ival.nameId),<sp/>ivalname);</highlight></codeline>
<codeline lineno="467"><highlight class="normal"></highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var_num<sp/>=<sp/>ct.interval-&gt;getValueCount();</highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>G_ASSERT(var_num<sp/>&lt;<sp/>256);</highlight></codeline>
<codeline lineno="470"><highlight class="normal"></highlight></codeline>
<codeline lineno="471"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>subintervals.resize(ct.interval-&gt;getValueCount());</highlight></codeline>
<codeline lineno="472"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>ct.interval-&gt;getValueCount();<sp/>i++)</highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>subintervals[i]<sp/>=<sp/><ref refid="intervals_8cpp_1aadba5cb8f5f04d0596dae7f2b3129a46" kindref="member">get_interval_value_name</ref>(*ct.interval,<sp/>i,<sp/><ref refid="structsemicooked_1_1Variants_1aa5ad341c73b80c78f02228ae37683772" kindref="member">ctx</ref>);</highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="intervals_8h_1aeab0906da24b432454f0cbb287972c24" kindref="member">RealValueRange</ref><sp/>r<sp/>=<sp/>ct.interval-&gt;getValueRange(i);</highlight></codeline>
<codeline lineno="476"><highlight class="normal"></highlight></codeline>
<codeline lineno="477"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="478"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>G_ASSERT(r.getMin()<sp/>&lt;<sp/>-1e+6);</highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i<sp/>==<sp/>ct.interval-&gt;getValueCount()<sp/>-<sp/>1)</highlight></codeline>
<codeline lineno="480"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>G_ASSERT(r.getMax()<sp/>&gt;<sp/>1e+6);</highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="482"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>G_ASSERT(r.getMax()<sp/>==<sp/>ct.interval-&gt;getValueRange(i<sp/>+<sp/>1).getMin());</highlight></codeline>
<codeline lineno="483"><highlight class="normal"></highlight></codeline>
<codeline lineno="484"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i<sp/>&lt;<sp/>ct.interval-&gt;getValueCount()<sp/>-<sp/>1)</highlight></codeline>
<codeline lineno="485"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="486"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>maxVal[i]<sp/>=<sp/>r.getMax();</highlight></codeline>
<codeline lineno="487"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="488"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="489"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structsemicooked_1_1Variants_1a31c33168fb761377e8045bf4183439f5" kindref="member">iValStorage</ref>.getRef(ival.maxVal,<sp/>maxVal,<sp/>var_num<sp/>-<sp/>1);</highlight></codeline>
<codeline lineno="490"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="491"><highlight class="normal"></highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>G_ASSERT(pcs<sp/>&lt;<sp/>64);</highlight></codeline>
<codeline lineno="493"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>G_ASSERT(mul<sp/>&lt;<sp/>65535);</highlight></codeline>
<codeline lineno="494"><highlight class="normal"></highlight></codeline>
<codeline lineno="495"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ib[pcs].intervalId<sp/>=<sp/><ref refid="structsemicooked_1_1Variants_1ad445fa7f534fdcd1686a0786febe2d78" kindref="member">getIntervalId</ref>(ival);</highlight></codeline>
<codeline lineno="496"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ib[pcs].totalMul<sp/>=<sp/>mul;</highlight></codeline>
<codeline lineno="497"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>vremap[pcs]<sp/>=<sp/>ti;</highlight></codeline>
<codeline lineno="498"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>mul<sp/>*=<sp/>var_num;</highlight></codeline>
<codeline lineno="499"><highlight class="normal"></highlight></codeline>
<codeline lineno="500"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ib[pcs].intervalId<sp/>&gt;=<sp/><ref refid="structsemicooked_1_1Variants_1a5643b133654063957c7b16ab67842bfc" kindref="member">subintervals_by_interval</ref>.size())</highlight></codeline>
<codeline lineno="501"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structsemicooked_1_1Variants_1a5643b133654063957c7b16ab67842bfc" kindref="member">subintervals_by_interval</ref>.resize(ib[pcs].intervalId<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="502"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structsemicooked_1_1Variants_1a5643b133654063957c7b16ab67842bfc" kindref="member">subintervals_by_interval</ref>[ib[pcs].intervalId]<sp/>=<sp/>eastl::move(subintervals);</highlight></codeline>
<codeline lineno="503"><highlight class="normal"></highlight></codeline>
<codeline lineno="504"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>pcs++;</highlight></codeline>
<codeline lineno="505"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="506"><highlight class="normal"></highlight></codeline>
<codeline lineno="507"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>prepare<sp/>variant<sp/>table</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="508"><highlight class="normal"><sp/><sp/><sp/><sp/>shader_layout::VariantTable&lt;&gt;<sp/>vtr;</highlight></codeline>
<codeline lineno="509"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pcs)</highlight></codeline>
<codeline lineno="510"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="511"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structsemicooked_1_1Variants_1abf79dc07be19526795b474f05a7156d3" kindref="member">vtPcsStorage</ref>.getRef(vtr.codePieces,<sp/>ib,<sp/>pcs,<sp/>0);</highlight></codeline>
<codeline lineno="512"><highlight class="normal"></highlight></codeline>
<codeline lineno="513"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>convert<sp/>variant<sp/>codes</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="514"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>dag::ConstSpan&lt;ShaderVariant::Variant&gt;<sp/>sv<sp/>=<sp/>vt.<ref refid="classShaderVariant_1_1VariantTable_1a91006b0393841dc0b711a6da435596ed" kindref="member">getVariants</ref>();</highlight></codeline>
<codeline lineno="515"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structsemicooked_1_1Variants_1a888ad476c9ebea27dc14ec21a772e1b2" kindref="member">tmpVpDir</ref>.resize(sv.size());</highlight></codeline>
<codeline lineno="516"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>vi<sp/>=<sp/>0;<sp/>vi<sp/>&lt;<sp/><ref refid="structsemicooked_1_1Variants_1a888ad476c9ebea27dc14ec21a772e1b2" kindref="member">tmpVpDir</ref>.size();<sp/>vi++)</highlight></codeline>
<codeline lineno="517"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="518"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structShaderVariant_1_1Variant" kindref="compound">ShaderVariant::Variant</ref><sp/>&amp;cvar<sp/>=<sp/>sv[vi];</highlight></codeline>
<codeline lineno="519"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>code<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="520"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>pcs;<sp/>j++)</highlight></codeline>
<codeline lineno="521"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="522"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>val<sp/>=<sp/>cvar.<ref refid="structShaderVariant_1_1Variant_1ab3dc4394c3f41040c8a77e4d9d4e0b03" kindref="member">getValue</ref>(vremap[j]);</highlight></codeline>
<codeline lineno="523"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>G_ASSERT(val<sp/>&lt;<sp/><ref refid="structsemicooked_1_1Variants_1a4223a892ef4750ce1a17fe4492a94ab8" kindref="member">intervals</ref>[ib[j].intervalId].maxVal.size()<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="524"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>code<sp/>+=<sp/>val<sp/>*<sp/>ib[j].totalMul;</highlight></codeline>
<codeline lineno="525"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="526"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(code<sp/>&gt;=<sp/>65535)</highlight></codeline>
<codeline lineno="527"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="528"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>pcs;<sp/>j++)</highlight></codeline>
<codeline lineno="529"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="530"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>shader_layout::Interval&lt;&gt;<sp/>&amp;ir<sp/>=<sp/><ref refid="structsemicooked_1_1Variants_1a4223a892ef4750ce1a17fe4492a94ab8" kindref="member">intervals</ref>[ib[j].intervalId];</highlight></codeline>
<codeline lineno="531"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>val<sp/>=<sp/>cvar.<ref refid="structShaderVariant_1_1Variant_1ab3dc4394c3f41040c8a77e4d9d4e0b03" kindref="member">getValue</ref>(vremap[j]);</highlight></codeline>
<codeline lineno="532"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>G_ASSERT(val<sp/>&lt;<sp/>ir.maxVal.size()<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="533"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>debug_(</highlight><highlight class="stringliteral">&quot;piece[%2d]<sp/>mul=%-5d<sp/>range=0..%-2d<sp/><sp/>val=%2d<sp/>(+%5d<sp/>total);<sp/>intervalNameId=&quot;</highlight><highlight class="normal">,<sp/>j,<sp/>ib[j].totalMul,<sp/>ir.maxVal.size(),</highlight></codeline>
<codeline lineno="534"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>val,<sp/>val<sp/>*<sp/>ib[j].totalMul);</highlight></codeline>
<codeline lineno="535"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ir.type<sp/>==<sp/>ir.TYPE_MODE)</highlight></codeline>
<codeline lineno="536"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>debug(</highlight><highlight class="stringliteral">&quot;MODE/%d&quot;</highlight><highlight class="normal">,<sp/>ir.nameId);</highlight></codeline>
<codeline lineno="537"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="538"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>debug((ir.type<sp/>==<sp/>ir.TYPE_INTERVAL)<sp/>?<sp/></highlight><highlight class="stringliteral">&quot;LOCAL/%s&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;GLOBAL/%s&quot;</highlight><highlight class="normal">,<sp/><ref refid="structsemicooked_1_1Variants_1a64285910c1136b5cd0cbb7bf2793d372" kindref="member">varMap</ref>.getOrdinalName(ir.nameId));</highlight></codeline>
<codeline lineno="539"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="540"><highlight class="normal"></highlight></codeline>
<codeline lineno="541"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="shLog_8cpp_1a2926179632c7c86265007652d3d30b14" kindref="member">sh_debug</ref>(<ref refid="shLog_8h_1a66042048eb3ce30a1dccb2ebf8c2fd5ca6112bd3e7c5d175bac1569c33c1630ad" kindref="member">SHLOG_FATAL</ref>,</highlight></codeline>
<codeline lineno="542"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Variant<sp/>space<sp/>in<sp/>shader<sp/>%s<sp/>is<sp/>too<sp/>large:<sp/>encountered<sp/>variant<sp/>code=%d<sp/>&gt;=<sp/>65535,<sp/>with<sp/>last<sp/>interval<sp/>multiplier<sp/>=<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="543"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;%d\nConsider<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="544"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;reducing<sp/>the<sp/>number<sp/>of<sp/>intervals/interval<sp/>values.<sp/>See<sp/>more<sp/>details<sp/>in<sp/>ShaderLog*\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="545"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>shader_nm,<sp/>code,<sp/>ib[pcs<sp/>-<sp/>1].totalMul);</highlight></codeline>
<codeline lineno="546"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>{};</highlight></codeline>
<codeline lineno="547"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="548"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>G_ASSERT(cvar.<ref refid="structShaderVariant_1_1Variant_1a3ea5741fd601096a3f6df3883b67940a" kindref="member">codeId</ref><sp/>&lt;<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)codeRemap.size());</highlight></codeline>
<codeline lineno="549"><highlight class="normal"></highlight></codeline>
<codeline lineno="550"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structsemicooked_1_1Variants_1a888ad476c9ebea27dc14ec21a772e1b2" kindref="member">tmpVpDir</ref>[vi].code<sp/>=<sp/>code;</highlight></codeline>
<codeline lineno="551"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cvar.<ref refid="structShaderVariant_1_1Variant_1a3ea5741fd601096a3f6df3883b67940a" kindref="member">codeId</ref><sp/>==<sp/>-2)</highlight></codeline>
<codeline lineno="552"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structsemicooked_1_1Variants_1a888ad476c9ebea27dc14ec21a772e1b2" kindref="member">tmpVpDir</ref>[vi].codeId<sp/>=<sp/>vtr.FIND_NOTFOUND;</highlight></codeline>
<codeline lineno="553"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="554"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structsemicooked_1_1Variants_1a888ad476c9ebea27dc14ec21a772e1b2" kindref="member">tmpVpDir</ref>[vi].codeId<sp/>=<sp/>(cvar.<ref refid="structShaderVariant_1_1Variant_1a3ea5741fd601096a3f6df3883b67940a" kindref="member">codeId</ref><sp/>&lt;<sp/>0)<sp/>?<sp/>vtr.FIND_NULL<sp/>:<sp/>codeRemap[cvar.codeId];</highlight></codeline>
<codeline lineno="555"><highlight class="normal"></highlight></codeline>
<codeline lineno="556"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="structsemicooked_1_1Variants_1a888ad476c9ebea27dc14ec21a772e1b2" kindref="member">tmpVpDir</ref>[vi].codeId<sp/>==<sp/>-2)</highlight></codeline>
<codeline lineno="557"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structsemicooked_1_1Variants_1a888ad476c9ebea27dc14ec21a772e1b2" kindref="member">tmpVpDir</ref>[vi].codeId<sp/>=<sp/>vtr.FIND_NOTFOUND;</highlight></codeline>
<codeline lineno="558"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="structsemicooked_1_1Variants_1a888ad476c9ebea27dc14ec21a772e1b2" kindref="member">tmpVpDir</ref>[vi].codeId<sp/>&lt;<sp/>0)</highlight></codeline>
<codeline lineno="559"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structsemicooked_1_1Variants_1a888ad476c9ebea27dc14ec21a772e1b2" kindref="member">tmpVpDir</ref>[vi].codeId<sp/>=<sp/>vtr.FIND_NULL;</highlight></codeline>
<codeline lineno="560"><highlight class="normal"></highlight></codeline>
<codeline lineno="561"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>G_ASSERT((<ref refid="structsemicooked_1_1Variants_1a888ad476c9ebea27dc14ec21a772e1b2" kindref="member">tmpVpDir</ref>[vi].codeId<sp/>&gt;=<sp/>0<sp/>&amp;&amp;<sp/><ref refid="structsemicooked_1_1Variants_1a888ad476c9ebea27dc14ec21a772e1b2" kindref="member">tmpVpDir</ref>[vi].codeId<sp/>&lt;<sp/>codenum)<sp/>||<sp/><ref refid="structsemicooked_1_1Variants_1a888ad476c9ebea27dc14ec21a772e1b2" kindref="member">tmpVpDir</ref>[vi].codeId<sp/>==<sp/>vtr.FIND_NULL<sp/>||</highlight></codeline>
<codeline lineno="562"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structsemicooked_1_1Variants_1a888ad476c9ebea27dc14ec21a772e1b2" kindref="member">tmpVpDir</ref>[vi].codeId<sp/>==<sp/>vtr.FIND_NOTFOUND);</highlight></codeline>
<codeline lineno="563"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="564"><highlight class="normal"></highlight></codeline>
<codeline lineno="565"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mul<sp/>&lt;=<sp/>8)<sp/></highlight><highlight class="comment">//<sp/>don&apos;t<sp/>bother<sp/>to<sp/>even<sp/>try<sp/>using<sp/>qmap</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="566"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>choose_lookup;</highlight></codeline>
<codeline lineno="567"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mul<sp/>&gt;<sp/>0x10000)<sp/></highlight><highlight class="comment">//<sp/>can&apos;t<sp/>use<sp/>qmap<sp/>due<sp/>to<sp/>16-bit<sp/>overflow</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="568"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="569"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>debug(</highlight><highlight class="stringliteral">&quot;switch<sp/>to<sp/>LOOKUP:<sp/>sv.count=%d<sp/>mul=%d&quot;</highlight><highlight class="normal">,<sp/>sv.size(),<sp/>mul);</highlight></codeline>
<codeline lineno="570"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>choose_lookup;</highlight></codeline>
<codeline lineno="571"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="572"><highlight class="normal"></highlight></codeline>
<codeline lineno="573"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>sort<sp/>and<sp/>get<sp/>direct<sp/>map</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="574"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>sort(<ref refid="structsemicooked_1_1Variants_1a888ad476c9ebea27dc14ec21a772e1b2" kindref="member">tmpVpDir</ref>,<sp/>&amp;<ref refid="structsemicooked_1_1Variants_1_1VariantPair_1a24cbda98827b35cad3a0900ca8afd73f" kindref="member">VariantPair::cmpCode</ref>);</highlight></codeline>
<codeline lineno="575"><highlight class="normal"></highlight></codeline>
<codeline lineno="576"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>prepare<sp/>interval<sp/>map<sp/>and<sp/>reduce<sp/>duplicated<sp/>variants</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="577"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mul<sp/>==<sp/><ref refid="structsemicooked_1_1Variants_1a888ad476c9ebea27dc14ec21a772e1b2" kindref="member">tmpVpDir</ref>.size())</highlight></codeline>
<codeline lineno="578"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structsemicooked_1_1Variants_1aaa904e2a6a87e02ac91fae94504da404" kindref="member">tmpVpInt</ref><sp/>=<sp/><ref refid="structsemicooked_1_1Variants_1a888ad476c9ebea27dc14ec21a772e1b2" kindref="member">tmpVpDir</ref>;</highlight></codeline>
<codeline lineno="579"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="580"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="581"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>fill<sp/>missing<sp/>values</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="582"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>VariantPair<sp/>v_pair;</highlight></codeline>
<codeline lineno="583"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Ref<sp/>v_range;</highlight></codeline>
<codeline lineno="584"><highlight class="normal"></highlight></codeline>
<codeline lineno="585"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structsemicooked_1_1Variants_1aaa904e2a6a87e02ac91fae94504da404" kindref="member">tmpVpInt</ref>.clear();</highlight></codeline>
<codeline lineno="586"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structsemicooked_1_1Variants_1aaa904e2a6a87e02ac91fae94504da404" kindref="member">tmpVpInt</ref>.reserve(mul);</highlight></codeline>
<codeline lineno="587"><highlight class="normal"></highlight></codeline>
<codeline lineno="588"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v_pair.codeId<sp/>=<sp/>vtr.FIND_NOTFOUND;</highlight></codeline>
<codeline lineno="589"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v_range.set(0,<sp/>1);</highlight></codeline>
<codeline lineno="590"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>(int)<ref refid="structsemicooked_1_1Variants_1a888ad476c9ebea27dc14ec21a772e1b2" kindref="member">tmpVpDir</ref>.size()<sp/>-<sp/>1;<sp/>i++)</highlight></codeline>
<codeline lineno="591"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="structsemicooked_1_1Variants_1a888ad476c9ebea27dc14ec21a772e1b2" kindref="member">tmpVpDir</ref>[i].code<sp/>+<sp/>1<sp/>==<sp/><ref refid="structsemicooked_1_1Variants_1a888ad476c9ebea27dc14ec21a772e1b2" kindref="member">tmpVpDir</ref>[i<sp/>+<sp/>1].code)</highlight></codeline>
<codeline lineno="592"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v_range.count++;</highlight></codeline>
<codeline lineno="593"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="594"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="595"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>append_items(<ref refid="structsemicooked_1_1Variants_1aaa904e2a6a87e02ac91fae94504da404" kindref="member">tmpVpInt</ref>,<sp/>v_range.count,<sp/>&amp;<ref refid="structsemicooked_1_1Variants_1a888ad476c9ebea27dc14ec21a772e1b2" kindref="member">tmpVpDir</ref>[v_range.start]);</highlight></codeline>
<codeline lineno="596"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v_pair.code<sp/>=<sp/><ref refid="structsemicooked_1_1Variants_1a888ad476c9ebea27dc14ec21a772e1b2" kindref="member">tmpVpDir</ref>[i].code<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="597"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="structsemicooked_1_1Variants_1a888ad476c9ebea27dc14ec21a772e1b2" kindref="member">tmpVpDir</ref>[i].code<sp/>+<sp/>1<sp/>&lt;<sp/><ref refid="structsemicooked_1_1Variants_1a888ad476c9ebea27dc14ec21a772e1b2" kindref="member">tmpVpDir</ref>[i<sp/>+<sp/>1].code<sp/>-<sp/>1)</highlight></codeline>
<codeline lineno="598"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="599"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structsemicooked_1_1Variants_1aaa904e2a6a87e02ac91fae94504da404" kindref="member">tmpVpInt</ref>.push_back(v_pair);</highlight></codeline>
<codeline lineno="600"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v_pair.code<sp/>=<sp/><ref refid="structsemicooked_1_1Variants_1a888ad476c9ebea27dc14ec21a772e1b2" kindref="member">tmpVpDir</ref>[i<sp/>+<sp/>1].code<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="601"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="602"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structsemicooked_1_1Variants_1aaa904e2a6a87e02ac91fae94504da404" kindref="member">tmpVpInt</ref>.push_back(v_pair);</highlight></codeline>
<codeline lineno="603"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v_range.set(i<sp/>+<sp/>1,<sp/>1);</highlight></codeline>
<codeline lineno="604"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="605"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>append_items(<ref refid="structsemicooked_1_1Variants_1aaa904e2a6a87e02ac91fae94504da404" kindref="member">tmpVpInt</ref>,<sp/>v_range.count,<sp/>&amp;<ref refid="structsemicooked_1_1Variants_1a888ad476c9ebea27dc14ec21a772e1b2" kindref="member">tmpVpDir</ref>[v_range.start]);</highlight></codeline>
<codeline lineno="606"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="607"><highlight class="normal"></highlight></codeline>
<codeline lineno="608"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/><ref refid="structsemicooked_1_1Variants_1aaa904e2a6a87e02ac91fae94504da404" kindref="member">tmpVpInt</ref>.size()<sp/>-<sp/>2;<sp/>i<sp/>&gt;<sp/>0;<sp/>i--)</highlight></codeline>
<codeline lineno="609"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="structsemicooked_1_1Variants_1aaa904e2a6a87e02ac91fae94504da404" kindref="member">tmpVpInt</ref>[i].codeId<sp/>==<sp/><ref refid="structsemicooked_1_1Variants_1aaa904e2a6a87e02ac91fae94504da404" kindref="member">tmpVpInt</ref>[i<sp/>-<sp/>1].codeId)</highlight></codeline>
<codeline lineno="610"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>erase_items(<ref refid="structsemicooked_1_1Variants_1aaa904e2a6a87e02ac91fae94504da404" kindref="member">tmpVpInt</ref>,<sp/>i,<sp/>1);</highlight></codeline>
<codeline lineno="611"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="structsemicooked_1_1Variants_1aaa904e2a6a87e02ac91fae94504da404" kindref="member">tmpVpInt</ref>.size()<sp/>&amp;&amp;<sp/><ref refid="structsemicooked_1_1Variants_1aaa904e2a6a87e02ac91fae94504da404" kindref="member">tmpVpInt</ref>[0].codeId<sp/>==<sp/>vtr.FIND_NOTFOUND)</highlight></codeline>
<codeline lineno="612"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>erase_items(<ref refid="structsemicooked_1_1Variants_1aaa904e2a6a87e02ac91fae94504da404" kindref="member">tmpVpInt</ref>,<sp/>0,<sp/>1);</highlight></codeline>
<codeline lineno="613"><highlight class="normal"></highlight></codeline>
<codeline lineno="614"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>compare<sp/>different<sp/>packs</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="615"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="structsemicooked_1_1Variants_1aaa904e2a6a87e02ac91fae94504da404" kindref="member">tmpVpInt</ref>.size()<sp/>*<sp/>2<sp/>&gt;<sp/>mul<sp/>*<sp/>2<sp/>/<sp/>3<sp/>&amp;&amp;<sp/><ref refid="structsemicooked_1_1Variants_1a888ad476c9ebea27dc14ec21a772e1b2" kindref="member">tmpVpDir</ref>.size()<sp/>*<sp/>2<sp/>&gt;<sp/>mul<sp/>*<sp/>2<sp/>/<sp/>3)</highlight></codeline>
<codeline lineno="616"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="617"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>select<sp/>lookup</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="618"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>choose_lookup:</highlight></codeline>
<codeline lineno="619"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vtr.mapType<sp/>=<sp/>vtr.MAPTYPE_LOOKUP;</highlight></codeline>
<codeline lineno="620"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structsemicooked_1_1Variants_1a86a65bd8433f54f09068e387b7bbbb94" kindref="member">tmpMapData</ref>.resize(mul);</highlight></codeline>
<codeline lineno="621"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="structsemicooked_1_1Variants_1a888ad476c9ebea27dc14ec21a772e1b2" kindref="member">tmpVpDir</ref>.size()<sp/>&lt;<sp/>mul)</highlight></codeline>
<codeline lineno="622"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mem_set_ff(<ref refid="structsemicooked_1_1Variants_1a86a65bd8433f54f09068e387b7bbbb94" kindref="member">tmpMapData</ref>);</highlight></codeline>
<codeline lineno="623"><highlight class="normal"></highlight></codeline>
<codeline lineno="624"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/><ref refid="structsemicooked_1_1Variants_1a888ad476c9ebea27dc14ec21a772e1b2" kindref="member">tmpVpDir</ref>.size();<sp/>i++)</highlight></codeline>
<codeline lineno="625"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structsemicooked_1_1Variants_1a86a65bd8433f54f09068e387b7bbbb94" kindref="member">tmpMapData</ref>[<ref refid="structsemicooked_1_1Variants_1a888ad476c9ebea27dc14ec21a772e1b2" kindref="member">tmpVpDir</ref>[i].code]<sp/>=<sp/><ref refid="structsemicooked_1_1Variants_1a888ad476c9ebea27dc14ec21a772e1b2" kindref="member">tmpVpDir</ref>[i].codeId;</highlight></codeline>
<codeline lineno="626"><highlight class="normal"></highlight></codeline>
<codeline lineno="627"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="structsemicooked_1_1Variants_1a86a65bd8433f54f09068e387b7bbbb94" kindref="member">tmpMapData</ref>.size()<sp/>&lt;<sp/>1)</highlight></codeline>
<codeline lineno="628"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vtr.mapType<sp/>=<sp/>vtr.MAPTYPE_QDIRECT;<sp/></highlight><highlight class="comment">//<sp/>effectively<sp/>MAPTYPE_VOID</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="629"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="structsemicooked_1_1Variants_1a86a65bd8433f54f09068e387b7bbbb94" kindref="member">tmpMapData</ref>.size()<sp/>==<sp/>codenum)</highlight></codeline>
<codeline lineno="630"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="631"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vtr.mapType<sp/>=<sp/>vtr.MAPTYPE_EQUAL;</highlight></codeline>
<codeline lineno="632"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/><ref refid="structsemicooked_1_1Variants_1a86a65bd8433f54f09068e387b7bbbb94" kindref="member">tmpMapData</ref>.size();<sp/>i++)</highlight></codeline>
<codeline lineno="633"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="structsemicooked_1_1Variants_1a86a65bd8433f54f09068e387b7bbbb94" kindref="member">tmpMapData</ref>[i]<sp/>!=<sp/>i)</highlight></codeline>
<codeline lineno="634"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="635"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vtr.mapType<sp/>=<sp/>vtr.MAPTYPE_LOOKUP;</highlight></codeline>
<codeline lineno="636"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="637"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="638"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="639"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="640"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="structsemicooked_1_1Variants_1aaa904e2a6a87e02ac91fae94504da404" kindref="member">tmpVpInt</ref>.size()<sp/>+<sp/>1<sp/>&lt;<sp/><ref refid="structsemicooked_1_1Variants_1a888ad476c9ebea27dc14ec21a772e1b2" kindref="member">tmpVpDir</ref>.size())</highlight></codeline>
<codeline lineno="641"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="642"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>select<sp/>qinterval</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="643"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vtr.mapType<sp/>=<sp/>vtr.MAPTYPE_QINTERVAL;</highlight></codeline>
<codeline lineno="644"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structsemicooked_1_1Variants_1a86a65bd8433f54f09068e387b7bbbb94" kindref="member">tmpMapData</ref>.resize(<ref refid="structsemicooked_1_1Variants_1aaa904e2a6a87e02ac91fae94504da404" kindref="member">tmpVpInt</ref>.size()<sp/>*<sp/>2);</highlight></codeline>
<codeline lineno="645"><highlight class="normal"></highlight></codeline>
<codeline lineno="646"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/><ref refid="structsemicooked_1_1Variants_1aaa904e2a6a87e02ac91fae94504da404" kindref="member">tmpVpInt</ref>.size();<sp/>i++)</highlight></codeline>
<codeline lineno="647"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="648"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structsemicooked_1_1Variants_1a86a65bd8433f54f09068e387b7bbbb94" kindref="member">tmpMapData</ref>[i]<sp/>=<sp/><ref refid="structsemicooked_1_1Variants_1aaa904e2a6a87e02ac91fae94504da404" kindref="member">tmpVpInt</ref>[i].code;</highlight></codeline>
<codeline lineno="649"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structsemicooked_1_1Variants_1a86a65bd8433f54f09068e387b7bbbb94" kindref="member">tmpMapData</ref>[i<sp/>+<sp/><ref refid="structsemicooked_1_1Variants_1aaa904e2a6a87e02ac91fae94504da404" kindref="member">tmpVpInt</ref>.size()]<sp/>=<sp/><ref refid="structsemicooked_1_1Variants_1aaa904e2a6a87e02ac91fae94504da404" kindref="member">tmpVpInt</ref>[i].codeId;</highlight></codeline>
<codeline lineno="650"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>G_ASSERTF(<ref refid="structsemicooked_1_1Variants_1aaa904e2a6a87e02ac91fae94504da404" kindref="member">tmpVpInt</ref>[i].code<sp/>&lt;<sp/>0x10000<sp/>&amp;&amp;<sp/><ref refid="structsemicooked_1_1Variants_1aaa904e2a6a87e02ac91fae94504da404" kindref="member">tmpVpInt</ref>[i].codeId<sp/>&lt;<sp/>0x10000,<sp/></highlight><highlight class="stringliteral">&quot;code=%d<sp/>codeId=%d&quot;</highlight><highlight class="normal">,<sp/><ref refid="structsemicooked_1_1Variants_1aaa904e2a6a87e02ac91fae94504da404" kindref="member">tmpVpInt</ref>[i].code,</highlight></codeline>
<codeline lineno="651"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structsemicooked_1_1Variants_1aaa904e2a6a87e02ac91fae94504da404" kindref="member">tmpVpInt</ref>[i].codeId);</highlight></codeline>
<codeline lineno="652"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="653"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="654"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="655"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="656"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>select<sp/>qdirect</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="657"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vtr.mapType<sp/>=<sp/>vtr.MAPTYPE_QDIRECT;</highlight></codeline>
<codeline lineno="658"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structsemicooked_1_1Variants_1a86a65bd8433f54f09068e387b7bbbb94" kindref="member">tmpMapData</ref>.resize(<ref refid="structsemicooked_1_1Variants_1a888ad476c9ebea27dc14ec21a772e1b2" kindref="member">tmpVpDir</ref>.size()<sp/>*<sp/>2);</highlight></codeline>
<codeline lineno="659"><highlight class="normal"></highlight></codeline>
<codeline lineno="660"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/><ref refid="structsemicooked_1_1Variants_1a888ad476c9ebea27dc14ec21a772e1b2" kindref="member">tmpVpDir</ref>.size();<sp/>i++)</highlight></codeline>
<codeline lineno="661"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="662"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structsemicooked_1_1Variants_1a86a65bd8433f54f09068e387b7bbbb94" kindref="member">tmpMapData</ref>[i]<sp/>=<sp/><ref refid="structsemicooked_1_1Variants_1a888ad476c9ebea27dc14ec21a772e1b2" kindref="member">tmpVpDir</ref>[i].code;</highlight></codeline>
<codeline lineno="663"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structsemicooked_1_1Variants_1a86a65bd8433f54f09068e387b7bbbb94" kindref="member">tmpMapData</ref>[i<sp/>+<sp/><ref refid="structsemicooked_1_1Variants_1a888ad476c9ebea27dc14ec21a772e1b2" kindref="member">tmpVpDir</ref>.size()]<sp/>=<sp/><ref refid="structsemicooked_1_1Variants_1a888ad476c9ebea27dc14ec21a772e1b2" kindref="member">tmpVpDir</ref>[i].codeId;</highlight></codeline>
<codeline lineno="664"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>G_ASSERTF(<ref refid="structsemicooked_1_1Variants_1a888ad476c9ebea27dc14ec21a772e1b2" kindref="member">tmpVpDir</ref>[i].code<sp/>&lt;<sp/>0x10000<sp/>&amp;&amp;<sp/><ref refid="structsemicooked_1_1Variants_1a888ad476c9ebea27dc14ec21a772e1b2" kindref="member">tmpVpDir</ref>[i].codeId<sp/>&lt;<sp/>0x10000,<sp/></highlight><highlight class="stringliteral">&quot;code=%d<sp/>codeId=%d&quot;</highlight><highlight class="normal">,<sp/><ref refid="structsemicooked_1_1Variants_1a888ad476c9ebea27dc14ec21a772e1b2" kindref="member">tmpVpDir</ref>[i].code,</highlight></codeline>
<codeline lineno="665"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structsemicooked_1_1Variants_1a888ad476c9ebea27dc14ec21a772e1b2" kindref="member">tmpVpDir</ref>[i].codeId);</highlight></codeline>
<codeline lineno="666"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="667"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="668"><highlight class="normal"></highlight></codeline>
<codeline lineno="669"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>finish<sp/>VarantTable<sp/>construction</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="670"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(vtr.mapType<sp/>==<sp/>vtr.MAPTYPE_EQUAL<sp/>||<sp/><ref refid="structsemicooked_1_1Variants_1a86a65bd8433f54f09068e387b7bbbb94" kindref="member">tmpMapData</ref>.size()<sp/>&lt;<sp/>1)</highlight></codeline>
<codeline lineno="671"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="672"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vtr.mapData<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="673"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="674"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="675"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="676"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>G_ASSERT(<ref refid="structsemicooked_1_1Variants_1a86a65bd8433f54f09068e387b7bbbb94" kindref="member">tmpMapData</ref>.size());</highlight></codeline>
<codeline lineno="677"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>ret<sp/>=<sp/>(vtr.mapType<sp/>==<sp/>vtr.MAPTYPE_LOOKUP)<sp/>?<sp/><ref refid="structsemicooked_1_1Variants_1ae252c81018e98f87369ff5fd9953f977" kindref="member">vtLmapStorage</ref>.getRef(vtr.mapData,<sp/><ref refid="structsemicooked_1_1Variants_1a86a65bd8433f54f09068e387b7bbbb94" kindref="member">tmpMapData</ref>.data(),<sp/><ref refid="structsemicooked_1_1Variants_1a86a65bd8433f54f09068e387b7bbbb94" kindref="member">tmpMapData</ref>.size(),<sp/>2,<sp/>2)</highlight></codeline>
<codeline lineno="678"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/><ref refid="structsemicooked_1_1Variants_1a1a27d308dbac0626042543bf50b6019d" kindref="member">vtQmapStorage</ref>.getRef(vtr.mapData,<sp/><ref refid="structsemicooked_1_1Variants_1a86a65bd8433f54f09068e387b7bbbb94" kindref="member">tmpMapData</ref>.data(),<sp/><ref refid="structsemicooked_1_1Variants_1a86a65bd8433f54f09068e387b7bbbb94" kindref="member">tmpMapData</ref>.size(),<sp/>2,<sp/>2);</highlight></codeline>
<codeline lineno="679"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="680"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="681"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>vtr;</highlight></codeline>
<codeline lineno="682"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="683"><highlight class="normal"></highlight></codeline>
<codeline lineno="684"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="structsemicooked_1_1Variants_1ad445fa7f534fdcd1686a0786febe2d78" kindref="member">getIntervalId</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>shader_layout::Interval&lt;&gt;<sp/>&amp;ival)</highlight></codeline>
<codeline lineno="685"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="686"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/><ref refid="structsemicooked_1_1Variants_1a4223a892ef4750ce1a17fe4492a94ab8" kindref="member">intervals</ref>.size()<sp/>-<sp/>1;<sp/>i<sp/>&gt;=<sp/>0;<sp/>i--)</highlight></codeline>
<codeline lineno="687"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="namespacesemicooked_1a512be2e649522fe663e5bf44fe19eb45" kindref="member">areIntervalsEqual</ref>(ival,<sp/><ref refid="structsemicooked_1_1Variants_1a4223a892ef4750ce1a17fe4492a94ab8" kindref="member">intervals</ref>[i]))</highlight></codeline>
<codeline lineno="688"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="689"><highlight class="normal"><sp/><sp/><sp/><sp/>G_ASSERT(<ref refid="structsemicooked_1_1Variants_1a4223a892ef4750ce1a17fe4492a94ab8" kindref="member">intervals</ref>.size()<sp/>&lt;<sp/>32768);</highlight></codeline>
<codeline lineno="690"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structsemicooked_1_1Variants_1a4223a892ef4750ce1a17fe4492a94ab8" kindref="member">intervals</ref>.push_back(ival);</highlight></codeline>
<codeline lineno="691"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structsemicooked_1_1Variants_1a4223a892ef4750ce1a17fe4492a94ab8" kindref="member">intervals</ref>.size()<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="692"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="693"><highlight class="normal"></highlight></codeline>
<codeline lineno="694"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classshc_1_1TargetContext" kindref="compound">shc::TargetContext</ref><sp/>&amp;<ref refid="structsemicooked_1_1Variants_1aa5ad341c73b80c78f02228ae37683772" kindref="member">ctx</ref>;</highlight></codeline>
<codeline lineno="695"><highlight class="normal"><sp/><sp/>Tab&lt;shader_layout::Interval&lt;&gt;&gt;<sp/><ref refid="structsemicooked_1_1Variants_1a4223a892ef4750ce1a17fe4492a94ab8" kindref="member">intervals</ref>;</highlight></codeline>
<codeline lineno="696"><highlight class="normal"><sp/><sp/>Tab&lt;bindump::VecHolder&lt;bindump::StrHolder&lt;&gt;&gt;&gt;<sp/><ref refid="structsemicooked_1_1Variants_1a5643b133654063957c7b16ab67842bfc" kindref="member">subintervals_by_interval</ref>;</highlight></codeline>
<codeline lineno="697"><highlight class="normal"><sp/><sp/>SharedStorage&lt;real&gt;<sp/><ref refid="structsemicooked_1_1Variants_1a31c33168fb761377e8045bf4183439f5" kindref="member">iValStorage</ref>;</highlight></codeline>
<codeline lineno="698"><highlight class="normal"><sp/><sp/>SharedStorage&lt;shader_layout::VariantTable&lt;&gt;::IntervalBind&gt;<sp/><ref refid="structsemicooked_1_1Variants_1abf79dc07be19526795b474f05a7156d3" kindref="member">vtPcsStorage</ref>;</highlight></codeline>
<codeline lineno="699"><highlight class="normal"><sp/><sp/>SharedStorage&lt;uint16_t&gt;<sp/><ref refid="structsemicooked_1_1Variants_1ae252c81018e98f87369ff5fd9953f977" kindref="member">vtLmapStorage</ref>;</highlight></codeline>
<codeline lineno="700"><highlight class="normal"><sp/><sp/>SharedStorage&lt;uint16_t&gt;<sp/><ref refid="structsemicooked_1_1Variants_1a1a27d308dbac0626042543bf50b6019d" kindref="member">vtQmapStorage</ref>;</highlight></codeline>
<codeline lineno="701"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>GatherNameMap<sp/>&amp;<ref refid="structsemicooked_1_1Variants_1a64285910c1136b5cd0cbb7bf2793d372" kindref="member">varMap</ref>;</highlight></codeline>
<codeline lineno="702"><highlight class="normal"></highlight></codeline>
<codeline lineno="703"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>Tab&lt;VariantPair&gt;<sp/><ref refid="structsemicooked_1_1Variants_1a888ad476c9ebea27dc14ec21a772e1b2" kindref="member">tmpVpDir</ref>,<sp/><ref refid="structsemicooked_1_1Variants_1aaa904e2a6a87e02ac91fae94504da404" kindref="member">tmpVpInt</ref>;</highlight></codeline>
<codeline lineno="704"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>Tab&lt;uint16_t&gt;<sp/><ref refid="structsemicooked_1_1Variants_1a86a65bd8433f54f09068e387b7bbbb94" kindref="member">tmpMapData</ref>;</highlight></codeline>
<codeline lineno="705"><highlight class="normal">};</highlight></codeline>
<codeline lineno="706"><highlight class="normal">Tab&lt;Variants::VariantPair&gt;<sp/><ref refid="structsemicooked_1_1Variants_1a888ad476c9ebea27dc14ec21a772e1b2" kindref="member">Variants::tmpVpDir</ref>(tmpmem_ptr());</highlight></codeline>
<codeline lineno="707"><highlight class="normal">Tab&lt;Variants::VariantPair&gt;<sp/><ref refid="structsemicooked_1_1Variants_1aaa904e2a6a87e02ac91fae94504da404" kindref="member">Variants::tmpVpInt</ref>(tmpmem_ptr());</highlight></codeline>
<codeline lineno="708"><highlight class="normal">Tab&lt;uint16_t&gt;<sp/><ref refid="structsemicooked_1_1Variants_1a86a65bd8433f54f09068e387b7bbbb94" kindref="member">Variants::tmpMapData</ref>(tmpmem_ptr());</highlight></codeline>
<codeline lineno="709"><highlight class="normal"></highlight></codeline>
<codeline lineno="710"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cmpPacked2uint16Map(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint32_t<sp/>*a,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint32_t<sp/>*b)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(a[0]<sp/>&amp;<sp/>0xFFFF)<sp/>-<sp/>(b[0]<sp/>&amp;<sp/>0xFFFF);<sp/>}</highlight></codeline>
<codeline lineno="711"><highlight class="normal"></highlight></codeline>
<codeline lineno="712"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>SharedStorage&lt;blk_word_t&gt;<sp/>globalSuppBlkSign;</highlight></codeline>
<codeline lineno="713"><highlight class="normal"></highlight></codeline>
<codeline lineno="714" refid="structsemicooked_1_1ShaderCodes" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structsemicooked_1_1ShaderCodes" kindref="compound">ShaderCodes</ref></highlight></codeline>
<codeline lineno="715"><highlight class="normal">{</highlight></codeline>
<codeline lineno="716"><highlight class="normal"><sp/><sp/><ref refid="structsemicooked_1_1ShaderCodes_1ace180d5eb097b29d7612be65ae3b632a" kindref="member">ShaderCodes</ref>()<sp/>:<sp/><ref refid="structsemicooked_1_1ShaderCodes_1a80b2344fa6218e56466c40d67c5004aa" kindref="member">codes</ref>(tmpmem)<sp/>{}</highlight></codeline>
<codeline lineno="717"><highlight class="normal"></highlight></codeline>
<codeline lineno="718"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="structsemicooked_1_1ShaderCodes_1afcc6c9333dcdcd4a2b89c7be31a2c12d" kindref="member">clearTemp</ref>()<sp/>{<sp/>clear_and_shrink(<ref refid="structsemicooked_1_1ShaderCodes_1ae988b66c7f71e34f1b7d6c0635d025c4" kindref="member">tmpPasses</ref>);<sp/>}</highlight></codeline>
<codeline lineno="719"><highlight class="normal"></highlight></codeline>
<codeline lineno="720"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="structsemicooked_1_1ShaderCodes_1a3ce6296d40b3824c85be8521675f3824" kindref="member">addCode</ref>(<ref refid="classShaderCode" kindref="compound">::ShaderCode</ref><sp/>&amp;scode,<sp/><ref refid="structsemicooked_1_1Variants" kindref="compound">Variants</ref><sp/>&amp;vt,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*shader_name,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>code_idx)</highlight></codeline>
<codeline lineno="721"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="722"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structsemicooked_1_1ShaderCodes_1ae988b66c7f71e34f1b7d6c0635d025c4" kindref="member">tmpPasses</ref>.clear();</highlight></codeline>
<codeline lineno="723"><highlight class="normal"><sp/><sp/><sp/><sp/>Tab&lt;int&gt;<sp/>tmpPassesRemap(tmpmem_ptr());</highlight></codeline>
<codeline lineno="724"><highlight class="normal"><sp/><sp/><sp/><sp/>tmpPassesRemap.resize(scode.<ref refid="classShaderCode_1af53120898b8c255961827e8bef4f5b5f" kindref="member">passes</ref>.size());</highlight></codeline>
<codeline lineno="725"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>k<sp/>=<sp/>0;<sp/>k<sp/>&lt;<sp/>scode.<ref refid="classShaderCode_1af53120898b8c255961827e8bef4f5b5f" kindref="member">passes</ref>.size();<sp/>k++)</highlight></codeline>
<codeline lineno="726"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(scode.<ref refid="classShaderCode_1af53120898b8c255961827e8bef4f5b5f" kindref="member">passes</ref>[k])</highlight></codeline>
<codeline lineno="727"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tmpPassesRemap[k]<sp/>=<sp/><ref refid="structsemicooked_1_1ShaderCodes_1aefb43083af241640426c53804c0c52b3" kindref="member">addCodePasses</ref>(*scode.<ref refid="classShaderCode_1af53120898b8c255961827e8bef4f5b5f" kindref="member">passes</ref>[k]);</highlight></codeline>
<codeline lineno="728"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="729"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tmpPassesRemap[k]<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="730"><highlight class="normal"></highlight></codeline>
<codeline lineno="731"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>contruct<sp/>shader<sp/>code</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="732"><highlight class="normal"><sp/><sp/><sp/><sp/>shader_layout::ShaderCode&lt;&gt;<sp/>scr;</highlight></codeline>
<codeline lineno="733"><highlight class="normal"></highlight></codeline>
<codeline lineno="734"><highlight class="normal"><sp/><sp/><sp/><sp/>scr.dynVariants<sp/>=<sp/>vt.<ref refid="structsemicooked_1_1Variants_1adf6ed1a5c905aa72b49214e3fb358731" kindref="member">addVariantTable</ref>(scode.<ref refid="classShaderCode_1ae2d89e351341ad71ff1ddf415730a61a" kindref="member">dynVariants</ref>,<sp/>tmpPassesRemap,<sp/><ref refid="structsemicooked_1_1ShaderCodes_1ae988b66c7f71e34f1b7d6c0635d025c4" kindref="member">tmpPasses</ref>.size(),<sp/>shader_name);</highlight></codeline>
<codeline lineno="735"><highlight class="normal"><sp/><sp/><sp/><sp/>scr.passes<sp/>=<sp/>make_span(<ref refid="structsemicooked_1_1ShaderCodes_1ae988b66c7f71e34f1b7d6c0635d025c4" kindref="member">tmpPasses</ref>);</highlight></codeline>
<codeline lineno="736"><highlight class="normal"></highlight></codeline>
<codeline lineno="737"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structsemicooked_1_1ShaderCodes_1a557e7e08893ab2a8467a59b293e8ea5a" kindref="member">chanStorage</ref>.getRef(scr.channel,<sp/>scode.<ref refid="classShaderCode_1a769c07a6bbe80c0b095305767e65b453" kindref="member">channel</ref>.data(),<sp/>scode.<ref refid="classShaderCode_1a769c07a6bbe80c0b095305767e65b453" kindref="member">channel</ref>.size(),<sp/>8);</highlight></codeline>
<codeline lineno="738"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structsemicooked_1_1ShaderCodes_1a00c7307e7491c15b80f4871daca952b3" kindref="member">icStorage</ref>.getRef(scr.initCode,<sp/>scode.<ref refid="classShaderCode_1ac99942179d18ba4169439667d7682396" kindref="member">initcode</ref>.data(),<sp/>scode.<ref refid="classShaderCode_1ac99942179d18ba4169439667d7682396" kindref="member">initcode</ref>.size(),<sp/>8);</highlight></codeline>
<codeline lineno="739"><highlight class="normal"></highlight></codeline>
<codeline lineno="740"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>sort<sp/>stVarMap<sp/>indices</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="741"><highlight class="normal"><sp/><sp/><sp/><sp/>Tab&lt;uint32_t&gt;<sp/>tmpPair(tmpmem_ptr());</highlight></codeline>
<codeline lineno="742"><highlight class="normal"><sp/><sp/><sp/><sp/>tmpPair.resize(scode.<ref refid="classShaderCode_1a8f3bcc390fc20994f8679e0d7b207788" kindref="member">stvarmap</ref>.size());</highlight></codeline>
<codeline lineno="743"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>tmpPair.size();<sp/>i++)</highlight></codeline>
<codeline lineno="744"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="745"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>G_ASSERT(scode.<ref refid="classShaderCode_1a8f3bcc390fc20994f8679e0d7b207788" kindref="member">stvarmap</ref>[i].v<sp/>&gt;=<sp/>0<sp/>&amp;&amp;<sp/>scode.<ref refid="classShaderCode_1a8f3bcc390fc20994f8679e0d7b207788" kindref="member">stvarmap</ref>[i].v<sp/>&lt;<sp/>65535);</highlight></codeline>
<codeline lineno="746"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>G_ASSERT(scode.<ref refid="classShaderCode_1a8f3bcc390fc20994f8679e0d7b207788" kindref="member">stvarmap</ref>[i].sv<sp/>&gt;=<sp/>0<sp/>&amp;&amp;<sp/>scode.<ref refid="classShaderCode_1a8f3bcc390fc20994f8679e0d7b207788" kindref="member">stvarmap</ref>[i].sv<sp/>&lt;<sp/>65535);</highlight></codeline>
<codeline lineno="747"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>tmpPair[i]<sp/>=<sp/>(scode.<ref refid="classShaderCode_1a8f3bcc390fc20994f8679e0d7b207788" kindref="member">stvarmap</ref>[i].v<sp/>&lt;&lt;<sp/>16)<sp/>|<sp/>(scode.<ref refid="classShaderCode_1a8f3bcc390fc20994f8679e0d7b207788" kindref="member">stvarmap</ref>[i].sv<sp/>&amp;<sp/>0xFFFF);</highlight></codeline>
<codeline lineno="748"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="749"><highlight class="normal"><sp/><sp/><sp/><sp/>sort(tmpPair,<sp/>&amp;cmpPacked2uint16Map);</highlight></codeline>
<codeline lineno="750"><highlight class="normal"></highlight></codeline>
<codeline lineno="751"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structsemicooked_1_1ShaderCodes_1a25ee9dd2e234ddb1163149c09c988013" kindref="member">svStorage</ref>.getRef(scr.stVarMap,<sp/>tmpPair.data(),<sp/>tmpPair.size(),<sp/>8);</highlight></codeline>
<codeline lineno="752"><highlight class="normal"></highlight></codeline>
<codeline lineno="753"><highlight class="normal"><sp/><sp/><sp/><sp/>G_ASSERT(scode.<ref refid="classShaderCode_1af08607fbfc2596265f1479a33b708bfd" kindref="member">varsize</ref><sp/>&gt;=<sp/>0<sp/>&amp;&amp;<sp/>scode.<ref refid="classShaderCode_1af08607fbfc2596265f1479a33b708bfd" kindref="member">varsize</ref><sp/>&lt;<sp/>32768);</highlight></codeline>
<codeline lineno="754"><highlight class="normal"><sp/><sp/><sp/><sp/>G_ASSERT(scode.<ref refid="classShaderCode_1a036e9771fd21e59f772c4f71eb9a25e5" kindref="member">flags</ref><sp/>&gt;=<sp/>0<sp/>&amp;&amp;<sp/>scode.<ref refid="classShaderCode_1a036e9771fd21e59f772c4f71eb9a25e5" kindref="member">flags</ref><sp/>&lt;<sp/>32768);</highlight></codeline>
<codeline lineno="755"><highlight class="normal"><sp/><sp/><sp/><sp/>G_ASSERT(scode.<ref refid="classShaderCode_1a98ad21f12fb5b2c653362fa4e3912c1f" kindref="member">getVertexStride</ref>()<sp/>&lt;<sp/>32768);</highlight></codeline>
<codeline lineno="756"><highlight class="normal"></highlight></codeline>
<codeline lineno="757"><highlight class="normal"><sp/><sp/><sp/><sp/>scr.varSize<sp/>=<sp/>scode.<ref refid="classShaderCode_1af08607fbfc2596265f1479a33b708bfd" kindref="member">varsize</ref>;</highlight></codeline>
<codeline lineno="758"><highlight class="normal"><sp/><sp/><sp/><sp/>scr.codeFlags<sp/>=<sp/>scode.<ref refid="classShaderCode_1a036e9771fd21e59f772c4f71eb9a25e5" kindref="member">flags</ref>;</highlight></codeline>
<codeline lineno="759"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="namespaceshc_1a47efde6b3d493adbe2119a5593807d36" kindref="member">shc::config</ref>().cppStcodeMode<sp/>==<sp/>shader_layout::ExternalStcodeMode::BRANCHED_CPP)</highlight></codeline>
<codeline lineno="760"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>scr.branchedCppStcodeId<sp/>=<sp/>scode.<ref refid="classShaderCode_1a227fbd7a7e7ff62446e82fbd70256c13" kindref="member">branchedCppStcodeId</ref>;</highlight></codeline>
<codeline lineno="761"><highlight class="normal"><sp/><sp/><sp/><sp/>scr.vertexStride<sp/>=<sp/>scode.<ref refid="classShaderCode_1a98ad21f12fb5b2c653362fa4e3912c1f" kindref="member">getVertexStride</ref>();</highlight></codeline>
<codeline lineno="762"><highlight class="normal"></highlight></codeline>
<codeline lineno="763"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="structsemicooked_1_1ShaderCodes_1ae988b66c7f71e34f1b7d6c0635d025c4" kindref="member">tmpPasses</ref>.size())</highlight></codeline>
<codeline lineno="764"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="765"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>scr.suppBlockUid.resize(<ref refid="structsemicooked_1_1ShaderCodes_1ae988b66c7f71e34f1b7d6c0635d025c4" kindref="member">tmpPasses</ref>.size());</highlight></codeline>
<codeline lineno="766"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>k<sp/>=<sp/>0;<sp/>k<sp/>&lt;<sp/>scode.<ref refid="classShaderCode_1af53120898b8c255961827e8bef4f5b5f" kindref="member">passes</ref>.size();<sp/>k++)</highlight></codeline>
<codeline lineno="767"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(scode.<ref refid="classShaderCode_1af53120898b8c255961827e8bef4f5b5f" kindref="member">passes</ref>[k])</highlight></codeline>
<codeline lineno="768"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>scr.suppBlockUid[tmpPassesRemap[k]]<sp/>=<sp/><ref refid="structsemicooked_1_1ShaderCodes_1a9108afbf0a824fdc04732b6494207686" kindref="member">addSuppBlkCodes</ref>(scode.<ref refid="classShaderCode_1af53120898b8c255961827e8bef4f5b5f" kindref="member">passes</ref>[k]-&gt;suppBlk);</highlight></codeline>
<codeline lineno="769"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="770"><highlight class="normal"></highlight></codeline>
<codeline lineno="771"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structsemicooked_1_1ShaderCodes_1ad1505da66ee86b2aa941e40e197f93d4" kindref="member">staticTextureTypesByCode</ref>.emplace_back(scode.<ref refid="classShaderCode_1a49dad6ed8f7f32427b944b5fc4f3d617" kindref="member">staticTextureTypes</ref>);</highlight></codeline>
<codeline lineno="772"><highlight class="normal"></highlight></codeline>
<codeline lineno="773"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structsemicooked_1_1ShaderCodes_1a80b2344fa6218e56466c40d67c5004aa" kindref="member">codes</ref>.push_back(scr);</highlight></codeline>
<codeline lineno="774"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structsemicooked_1_1ShaderCodes_1a80b2344fa6218e56466c40d67c5004aa" kindref="member">codes</ref>.size()<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="775"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="776"><highlight class="normal"></highlight></codeline>
<codeline lineno="777"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="structsemicooked_1_1ShaderCodes_1aefb43083af241640426c53804c0c52b3" kindref="member">addCodePasses</ref>(<ref refid="structShaderCode_1_1PassTab" kindref="compound">::ShaderCode::PassTab</ref><sp/>&amp;pt)</highlight></codeline>
<codeline lineno="778"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="779"><highlight class="normal"><sp/><sp/><sp/><sp/>shader_layout::Pass&lt;&gt;<sp/>p;</highlight></codeline>
<codeline lineno="780"><highlight class="normal"><sp/><sp/><sp/><sp/>shader_layout::ShaderCode&lt;&gt;::ShRef<sp/>sr{};</highlight></codeline>
<codeline lineno="781"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!pt.<ref refid="structShaderCode_1_1PassTab_1ae6a673af2561707440b5b16ee1af51a3" kindref="member">rpass</ref>)</highlight></codeline>
<codeline lineno="782"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>p.rpass<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="783"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="784"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="785"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>G_ASSERT(pt.<ref refid="structShaderCode_1_1PassTab_1ae6a673af2561707440b5b16ee1af51a3" kindref="member">rpass</ref>-&gt;vprog<sp/>&gt;=<sp/>-1);</highlight></codeline>
<codeline lineno="786"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>G_ASSERT(pt.<ref refid="structShaderCode_1_1PassTab_1ae6a673af2561707440b5b16ee1af51a3" kindref="member">rpass</ref>-&gt;fsh<sp/>&gt;=<sp/>-1);</highlight></codeline>
<codeline lineno="787"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>G_ASSERT(pt.<ref refid="structShaderCode_1_1PassTab_1ae6a673af2561707440b5b16ee1af51a3" kindref="member">rpass</ref>-&gt;stcodeNo<sp/>&gt;=<sp/>-1<sp/>&amp;&amp;<sp/>pt.<ref refid="structShaderCode_1_1PassTab_1ae6a673af2561707440b5b16ee1af51a3" kindref="member">rpass</ref>-&gt;stcodeNo<sp/>&lt;<sp/>65535);</highlight></codeline>
<codeline lineno="788"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>G_ASSERT(pt.<ref refid="structShaderCode_1_1PassTab_1ae6a673af2561707440b5b16ee1af51a3" kindref="member">rpass</ref>-&gt;stblkcodeNo<sp/>&gt;=<sp/>-1<sp/>&amp;&amp;<sp/>pt.<ref refid="structShaderCode_1_1PassTab_1ae6a673af2561707440b5b16ee1af51a3" kindref="member">rpass</ref>-&gt;stblkcodeNo<sp/>&lt;<sp/>65535);</highlight></codeline>
<codeline lineno="789"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>G_ASSERT(pt.<ref refid="structShaderCode_1_1PassTab_1ae6a673af2561707440b5b16ee1af51a3" kindref="member">rpass</ref>-&gt;renderStateNo<sp/>&gt;=<sp/>-1<sp/>&amp;&amp;<sp/>pt.<ref refid="structShaderCode_1_1PassTab_1ae6a673af2561707440b5b16ee1af51a3" kindref="member">rpass</ref>-&gt;renderStateNo<sp/>&lt;<sp/>65535);</highlight></codeline>
<codeline lineno="790"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>sr.vprId<sp/>=<sp/>pt.<ref refid="structShaderCode_1_1PassTab_1ae6a673af2561707440b5b16ee1af51a3" kindref="member">rpass</ref>-&gt;vprog;</highlight></codeline>
<codeline lineno="791"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>sr.fshId<sp/>=<sp/>pt.<ref refid="structShaderCode_1_1PassTab_1ae6a673af2561707440b5b16ee1af51a3" kindref="member">rpass</ref>-&gt;fsh;</highlight></codeline>
<codeline lineno="792"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>sr.stcodeId<sp/>=<sp/>pt.<ref refid="structShaderCode_1_1PassTab_1ae6a673af2561707440b5b16ee1af51a3" kindref="member">rpass</ref>-&gt;stcodeNo;</highlight></codeline>
<codeline lineno="793"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>sr.stblkcodeId<sp/>=<sp/>pt.<ref refid="structShaderCode_1_1PassTab_1ae6a673af2561707440b5b16ee1af51a3" kindref="member">rpass</ref>-&gt;stblkcodeNo;</highlight></codeline>
<codeline lineno="794"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>sr.renderStateNo<sp/>=<sp/>pt.<ref refid="structShaderCode_1_1PassTab_1ae6a673af2561707440b5b16ee1af51a3" kindref="member">rpass</ref>-&gt;renderStateNo;</highlight></codeline>
<codeline lineno="795"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>sr.threadGroupSizeX<sp/>=<sp/>pt.<ref refid="structShaderCode_1_1PassTab_1ae6a673af2561707440b5b16ee1af51a3" kindref="member">rpass</ref>-&gt;threadGroupSizes[0];</highlight></codeline>
<codeline lineno="796"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>sr.threadGroupSizeY<sp/>=<sp/>pt.<ref refid="structShaderCode_1_1PassTab_1ae6a673af2561707440b5b16ee1af51a3" kindref="member">rpass</ref>-&gt;threadGroupSizes[1];</highlight></codeline>
<codeline lineno="797"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>sr.threadGroupSizeZ<sp/>=<sp/>pt.<ref refid="structShaderCode_1_1PassTab_1ae6a673af2561707440b5b16ee1af51a3" kindref="member">rpass</ref>-&gt;threadGroupSizes[2];</highlight></codeline>
<codeline lineno="798"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>sr.branchlessCppStblkcodeId<sp/>=<sp/>pt.<ref refid="structShaderCode_1_1PassTab_1ae6a673af2561707440b5b16ee1af51a3" kindref="member">rpass</ref>-&gt;branchlessCppStblkcodeId;</highlight></codeline>
<codeline lineno="799"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="namespaceshc_1a47efde6b3d493adbe2119a5593807d36" kindref="member">shc::config</ref>().cppStcodeMode<sp/>==<sp/>shader_layout::ExternalStcodeMode::BRANCHED_CPP)</highlight></codeline>
<codeline lineno="800"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sr.branchedCppStcodeRegisterTableOffset<sp/>=<sp/>pt.<ref refid="structShaderCode_1_1PassTab_1ae6a673af2561707440b5b16ee1af51a3" kindref="member">rpass</ref>-&gt;branchedCppStcodeTableOffset;</highlight></codeline>
<codeline lineno="801"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="802"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sr.branchlessCppStcodeId<sp/>=<sp/>pt.<ref refid="structShaderCode_1_1PassTab_1ae6a673af2561707440b5b16ee1af51a3" kindref="member">rpass</ref>-&gt;branchlessCppStcodeId;</highlight></codeline>
<codeline lineno="803"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>G_ASSERT(pt.<ref refid="structShaderCode_1_1PassTab_1ae6a673af2561707440b5b16ee1af51a3" kindref="member">rpass</ref>-&gt;threadGroupSizes[2]<sp/>&lt;<sp/>(1<sp/>&lt;&lt;<sp/>15));</highlight></codeline>
<codeline lineno="804"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>sr.scarlettWave32<sp/>=<sp/>pt.<ref refid="structShaderCode_1_1PassTab_1ae6a673af2561707440b5b16ee1af51a3" kindref="member">rpass</ref>-&gt;scarlettWave32;</highlight></codeline>
<codeline lineno="805"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>bindump::Span&lt;shader_layout::ShaderCode&lt;&gt;::ShRef&gt;<sp/>rpass;</highlight></codeline>
<codeline lineno="806"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structsemicooked_1_1ShaderCodes_1ad1124941d048e0384e8f14b8a390b026" kindref="member">shrefStorage</ref>.getRef(rpass,<sp/>&amp;sr,<sp/>1);</highlight></codeline>
<codeline lineno="807"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>p.rpass<sp/>=<sp/>rpass;</highlight></codeline>
<codeline lineno="808"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="809"><highlight class="normal"></highlight></codeline>
<codeline lineno="810"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structsemicooked_1_1ShaderCodes_1ae988b66c7f71e34f1b7d6c0635d025c4" kindref="member">tmpPasses</ref>.push_back(p);</highlight></codeline>
<codeline lineno="811"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structsemicooked_1_1ShaderCodes_1ae988b66c7f71e34f1b7d6c0635d025c4" kindref="member">tmpPasses</ref>.size()<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="812"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="813"><highlight class="normal"></highlight></codeline>
<codeline lineno="814"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>bindump::Span&lt;blk_word_t&gt;<sp/><ref refid="structsemicooked_1_1ShaderCodes_1a9108afbf0a824fdc04732b6494207686" kindref="member">addSuppBlkCodes</ref>(dag::ConstSpan&lt;bindump::Address&lt;ShaderStateBlock&gt;&gt;<sp/>blocks)</highlight></codeline>
<codeline lineno="815"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="816"><highlight class="normal"><sp/><sp/><sp/><sp/>Tab&lt;blk_word_t&gt;<sp/><ref refid="structsemicooked_1_1ShaderCodes_1a80b2344fa6218e56466c40d67c5004aa" kindref="member">codes</ref>(tmpmem);</highlight></codeline>
<codeline lineno="817"><highlight class="normal"><sp/><sp/><sp/><sp/>Tab&lt;const<sp/>ShaderStateBlock<sp/>*&gt;<sp/>ssbHier(tmpmem);</highlight></codeline>
<codeline lineno="818"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>blocks.size();<sp/>i++)</highlight></codeline>
<codeline lineno="819"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="820"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classShaderStateBlock" kindref="compound">ShaderStateBlock</ref><sp/>&amp;sb<sp/>=<sp/>*blocks[i];</highlight></codeline>
<codeline lineno="821"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ssbHier.resize(1);</highlight></codeline>
<codeline lineno="822"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ssbHier[0]<sp/>=<sp/>blocks[i];</highlight></codeline>
<codeline lineno="823"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>st_code_idx<sp/>=<sp/><ref refid="structsemicooked_1_1ShaderCodes_1a80b2344fa6218e56466c40d67c5004aa" kindref="member">codes</ref>.size();</highlight></codeline>
<codeline lineno="824"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>addSuppCodes(ssbHier,<sp/><ref refid="structsemicooked_1_1ShaderCodes_1a80b2344fa6218e56466c40d67c5004aa" kindref="member">codes</ref>);</highlight></codeline>
<codeline lineno="825"><highlight class="normal"></highlight></codeline>
<codeline lineno="826"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>st_code_idx;<sp/>j<sp/>&lt;<sp/><ref refid="structsemicooked_1_1ShaderCodes_1a80b2344fa6218e56466c40d67c5004aa" kindref="member">codes</ref>.size();<sp/>j++)</highlight></codeline>
<codeline lineno="827"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structsemicooked_1_1ShaderCodes_1a80b2344fa6218e56466c40d67c5004aa" kindref="member">codes</ref>[j]<sp/>=<sp/>((<ref refid="structsemicooked_1_1ShaderCodes_1a80b2344fa6218e56466c40d67c5004aa" kindref="member">codes</ref>[j]<sp/>&amp;<sp/>~sb.btd.uidMask)<sp/>|<sp/>sb.btd.uidVal)<sp/>&amp;<sp/>fullBlkLayerMask;</highlight></codeline>
<codeline lineno="828"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="829"><highlight class="normal"></highlight></codeline>
<codeline lineno="830"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="structsemicooked_1_1ShaderCodes_1a80b2344fa6218e56466c40d67c5004aa" kindref="member">codes</ref>.size())</highlight></codeline>
<codeline lineno="831"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structsemicooked_1_1ShaderCodes_1a80b2344fa6218e56466c40d67c5004aa" kindref="member">codes</ref>.push_back(BLK_WORD_FULLMASK<sp/>&amp;<sp/>fullBlkLayerMask);</highlight></codeline>
<codeline lineno="832"><highlight class="normal"></highlight></codeline>
<codeline lineno="833"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structsemicooked_1_1ShaderCodes_1a80b2344fa6218e56466c40d67c5004aa" kindref="member">codes</ref>.push_back(BLK_WORD_FULLMASK);</highlight></codeline>
<codeline lineno="834"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="structsemicooked_1_1ShaderCodes_1a80b2344fa6218e56466c40d67c5004aa" kindref="member">codes</ref>.size()<sp/>&gt;<sp/>2)</highlight></codeline>
<codeline lineno="835"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>fast_sort(<ref refid="structsemicooked_1_1ShaderCodes_1a80b2344fa6218e56466c40d67c5004aa" kindref="member">codes</ref>,<sp/>[](blk_word_t<sp/>a,<sp/>blk_word_t<sp/>b)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>a<sp/>&lt;<sp/>b;<sp/>});</highlight></codeline>
<codeline lineno="836"><highlight class="normal"></highlight></codeline>
<codeline lineno="837"><highlight class="normal"><sp/><sp/><sp/><sp/>bindump::Span&lt;blk_word_t&gt;<sp/>idx;</highlight></codeline>
<codeline lineno="838"><highlight class="normal"><sp/><sp/><sp/><sp/>globalSuppBlkSign.getRef(idx,<sp/><ref refid="structsemicooked_1_1ShaderCodes_1a80b2344fa6218e56466c40d67c5004aa" kindref="member">codes</ref>.data(),<sp/><ref refid="structsemicooked_1_1ShaderCodes_1a80b2344fa6218e56466c40d67c5004aa" kindref="member">codes</ref>.size(),<sp/>64);</highlight></codeline>
<codeline lineno="839"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>idx;</highlight></codeline>
<codeline lineno="840"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="841"><highlight class="normal"></highlight></codeline>
<codeline lineno="842"><highlight class="normal"><sp/><sp/>Tab&lt;shader_layout::ShaderCode&lt;&gt;&gt;<sp/><ref refid="structsemicooked_1_1ShaderCodes_1a80b2344fa6218e56466c40d67c5004aa" kindref="member">codes</ref>;</highlight></codeline>
<codeline lineno="843"><highlight class="normal"><sp/><sp/>SharedStorage&lt;shader_layout::ShaderCode&lt;&gt;::ShRef&gt;<sp/><ref refid="structsemicooked_1_1ShaderCodes_1ad1124941d048e0384e8f14b8a390b026" kindref="member">shrefStorage</ref>;</highlight></codeline>
<codeline lineno="844"><highlight class="normal"><sp/><sp/>SharedStorage&lt;ShaderChannelId&gt;<sp/><ref refid="structsemicooked_1_1ShaderCodes_1a557e7e08893ab2a8467a59b293e8ea5a" kindref="member">chanStorage</ref>;</highlight></codeline>
<codeline lineno="845"><highlight class="normal"><sp/><sp/>SharedStorage&lt;int&gt;<sp/><ref refid="structsemicooked_1_1ShaderCodes_1a00c7307e7491c15b80f4871daca952b3" kindref="member">icStorage</ref>;</highlight></codeline>
<codeline lineno="846"><highlight class="normal"><sp/><sp/>SharedStorage&lt;uint32_t&gt;<sp/><ref refid="structsemicooked_1_1ShaderCodes_1a25ee9dd2e234ddb1163149c09c988013" kindref="member">svStorage</ref>;</highlight></codeline>
<codeline lineno="847"><highlight class="normal"><sp/><sp/>Tab&lt;Tab&lt;ShaderVarTextureType&gt;&gt;<sp/><ref refid="structsemicooked_1_1ShaderCodes_1ad1505da66ee86b2aa941e40e197f93d4" kindref="member">staticTextureTypesByCode</ref>;</highlight></codeline>
<codeline lineno="848"><highlight class="normal"></highlight></codeline>
<codeline lineno="849"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>Tab&lt;shader_layout::Pass&lt;&gt;&gt;<sp/><ref refid="structsemicooked_1_1ShaderCodes_1ae988b66c7f71e34f1b7d6c0635d025c4" kindref="member">tmpPasses</ref>;</highlight></codeline>
<codeline lineno="850"><highlight class="normal">};</highlight></codeline>
<codeline lineno="851"><highlight class="normal">Tab&lt;shader_layout::Pass&lt;&gt;&gt;<sp/><ref refid="structsemicooked_1_1ShaderCodes_1ae988b66c7f71e34f1b7d6c0635d025c4" kindref="member">ShaderCodes::tmpPasses</ref>(tmpmem_ptr());</highlight></codeline>
<codeline lineno="852"><highlight class="normal"></highlight></codeline>
<codeline lineno="853" refid="structsemicooked_1_1ShaderClassRecEx" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structsemicooked_1_1ShaderClassRecEx" kindref="compound">ShaderClassRecEx</ref></highlight></codeline>
<codeline lineno="854"><highlight class="normal">{</highlight></codeline>
<codeline lineno="855"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="structsemicooked_1_1ShaderClassRecEx_1a5633d61098cb551c4e9acd73ce7d35c8" kindref="member">initShaderClass</ref>(<ref refid="classShaderClass" kindref="compound">::ShaderClass</ref><sp/>&amp;sc,<sp/>GatherNameMap<sp/>&amp;shNameMap,<sp/><ref refid="structsemicooked_1_1Variants" kindref="compound">Variants</ref><sp/>&amp;vt,<sp/><ref refid="structsemicooked_1_1Variables" kindref="compound">Variables</ref><sp/>&amp;vars)</highlight></codeline>
<codeline lineno="856"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="857"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>add<sp/>shader<sp/>codes</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="858"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structsemicooked_1_1ShaderClassRecEx_1a2ec31498817879a693c9718aa97a5884" kindref="member">tmpCodeRemap</ref>.resize(sc.<ref refid="classShaderClass_1afd05a0478ecbe5c13b066e4456580359" kindref="member">code</ref>.size());</highlight></codeline>
<codeline lineno="859"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>sc.<ref refid="classShaderClass_1afd05a0478ecbe5c13b066e4456580359" kindref="member">code</ref>.size();<sp/>i++)</highlight></codeline>
<codeline lineno="860"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sc.<ref refid="classShaderClass_1afd05a0478ecbe5c13b066e4456580359" kindref="member">code</ref>[i])</highlight></codeline>
<codeline lineno="861"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structsemicooked_1_1ShaderClassRecEx_1a2ec31498817879a693c9718aa97a5884" kindref="member">tmpCodeRemap</ref>[i]<sp/>=<sp/><ref refid="structsemicooked_1_1ShaderClassRecEx_1aa8b8fd7860dab7b61da6435752dacda0" kindref="member">codes</ref>.<ref refid="structsemicooked_1_1ShaderCodes_1a3ce6296d40b3824c85be8521675f3824" kindref="member">addCode</ref>(*sc.<ref refid="classShaderClass_1afd05a0478ecbe5c13b066e4456580359" kindref="member">code</ref>[i],<sp/>vt,<sp/>sc.<ref refid="classShaderClass_1a7dade6337edb610925324439779864b4" kindref="member">name</ref>.c_str(),<sp/>i);</highlight></codeline>
<codeline lineno="862"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="863"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structsemicooked_1_1ShaderClassRecEx_1a2ec31498817879a693c9718aa97a5884" kindref="member">tmpCodeRemap</ref>[i]<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="864"><highlight class="normal"></highlight></codeline>
<codeline lineno="865"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>setup<sp/>other<sp/>data</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="866"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structsemicooked_1_1ShaderClassRecEx_1a637e5f42cc5bb783ca59f23f3c8dacbc" kindref="member">shClass</ref>.nameId<sp/>=<sp/>shNameMap.getNameId(sc.<ref refid="classShaderClass_1a7dade6337edb610925324439779864b4" kindref="member">name</ref>.c_str());</highlight></codeline>
<codeline lineno="867"><highlight class="normal"><sp/><sp/><sp/><sp/>G_ASSERT(<ref refid="structsemicooked_1_1ShaderClassRecEx_1a637e5f42cc5bb783ca59f23f3c8dacbc" kindref="member">shClass</ref>.nameId<sp/>&gt;=<sp/>0);</highlight></codeline>
<codeline lineno="868"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structsemicooked_1_1ShaderClassRecEx_1a637e5f42cc5bb783ca59f23f3c8dacbc" kindref="member">shClass</ref>.nameId<sp/>=<sp/>shNameMap.xmap[<ref refid="structsemicooked_1_1ShaderClassRecEx_1a637e5f42cc5bb783ca59f23f3c8dacbc" kindref="member">shClass</ref>.nameId];</highlight></codeline>
<codeline lineno="869"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structsemicooked_1_1ShaderClassRecEx_1a637e5f42cc5bb783ca59f23f3c8dacbc" kindref="member">shClass</ref>.timestamp<sp/>=<sp/>{sc.<ref refid="classShaderClass_1aa05c7b177b55b9d479cf7cea255a3677" kindref="member">timestamp</ref>};</highlight></codeline>
<codeline lineno="870"><highlight class="normal"></highlight></codeline>
<codeline lineno="871"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structsemicooked_1_1ShaderClassRecEx_1a637e5f42cc5bb783ca59f23f3c8dacbc" kindref="member">shClass</ref>.stVariants<sp/>=<sp/>vt.<ref refid="structsemicooked_1_1Variants_1adf6ed1a5c905aa72b49214e3fb358731" kindref="member">addVariantTable</ref>(sc.<ref refid="classShaderClass_1abb3479bae66a8a5da2f495d7c6dde8db" kindref="member">staticVariants</ref>,<sp/><ref refid="structsemicooked_1_1ShaderClassRecEx_1a2ec31498817879a693c9718aa97a5884" kindref="member">tmpCodeRemap</ref>,<sp/><ref refid="structsemicooked_1_1ShaderClassRecEx_1aa8b8fd7860dab7b61da6435752dacda0" kindref="member">codes</ref>.<ref refid="structsemicooked_1_1ShaderCodes_1a80b2344fa6218e56466c40d67c5004aa" kindref="member">codes</ref>.size(),<sp/>sc.<ref refid="classShaderClass_1a7dade6337edb610925324439779864b4" kindref="member">name</ref>.c_str());</highlight></codeline>
<codeline lineno="872"><highlight class="normal"><sp/><sp/><sp/><sp/>vars.<ref refid="structsemicooked_1_1Variables_1a7cd591f31dada36a25e50170b303e78e" kindref="member">addLocalVars</ref>(sc.<ref refid="classShaderClass_1af6a928a5bd7e66cc342af3b4778c280c" kindref="member">stvar</ref>);</highlight></codeline>
<codeline lineno="873"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="874"><highlight class="normal"></highlight></codeline>
<codeline lineno="875"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="structsemicooked_1_1ShaderClassRecEx_1a135f890458e8155a9952222f9eea9480" kindref="member">clearTemp</ref>()</highlight></codeline>
<codeline lineno="876"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="877"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structsemicooked_1_1ShaderCodes_1afcc6c9333dcdcd4a2b89c7be31a2c12d" kindref="member">ShaderCodes::clearTemp</ref>();</highlight></codeline>
<codeline lineno="878"><highlight class="normal"><sp/><sp/><sp/><sp/>clear_and_shrink(<ref refid="structsemicooked_1_1ShaderClassRecEx_1a2ec31498817879a693c9718aa97a5884" kindref="member">tmpCodeRemap</ref>);</highlight></codeline>
<codeline lineno="879"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="880"><highlight class="normal"></highlight></codeline>
<codeline lineno="881"><highlight class="normal"><sp/><sp/>shader_layout::ShaderClass&lt;&gt;<sp/><ref refid="structsemicooked_1_1ShaderClassRecEx_1a637e5f42cc5bb783ca59f23f3c8dacbc" kindref="member">shClass</ref>;</highlight></codeline>
<codeline lineno="882"><highlight class="normal"><sp/><sp/><ref refid="structsemicooked_1_1ShaderCodes" kindref="compound">ShaderCodes</ref><sp/><ref refid="structsemicooked_1_1ShaderClassRecEx_1aa8b8fd7860dab7b61da6435752dacda0" kindref="member">codes</ref>;</highlight></codeline>
<codeline lineno="883"><highlight class="normal"></highlight></codeline>
<codeline lineno="884"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>Tab&lt;int&gt;<sp/><ref refid="structsemicooked_1_1ShaderClassRecEx_1a2ec31498817879a693c9718aa97a5884" kindref="member">tmpCodeRemap</ref>;</highlight></codeline>
<codeline lineno="885"><highlight class="normal">};</highlight></codeline>
<codeline lineno="886"><highlight class="normal">Tab&lt;int&gt;<sp/><ref refid="structsemicooked_1_1ShaderClassRecEx_1a2ec31498817879a693c9718aa97a5884" kindref="member">ShaderClassRecEx::tmpCodeRemap</ref>(tmpmem_ptr());</highlight></codeline>
<codeline lineno="887"><highlight class="normal"></highlight></codeline>
<codeline lineno="888"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespacesemicooked_1aeb6dadc2e04aa3fb6dca39d22bff3412" kindref="member">addRemappedStrData</ref>(GatherNameMap<sp/>&amp;varMap,<sp/><ref refid="structsemicooked_1_1Variables" kindref="compound">Variables</ref><sp/>&amp;vars,<sp/><ref refid="structsemicooked_1_1Variants" kindref="compound">Variants</ref><sp/>&amp;vt,<sp/>bindump::VecHolder&lt;bindump::StrHolder&lt;&gt;&gt;<sp/>&amp;var_names)</highlight></codeline>
<codeline lineno="889"><highlight class="normal">{</highlight></codeline>
<codeline lineno="890"><highlight class="normal"><sp/><sp/>var_names.resize(varMap.xmap.size());</highlight></codeline>
<codeline lineno="891"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>remapNameId<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="892"><highlight class="normal"><sp/><sp/>Tab&lt;int&gt;<sp/>remapNameIdTable(tmpmem);</highlight></codeline>
<codeline lineno="893"><highlight class="normal"><sp/><sp/>remapNameIdTable.resize(varMap.xmap.size());</highlight></codeline>
<codeline lineno="894"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>varMap.xmap.size();<sp/>i++)</highlight></codeline>
<codeline lineno="895"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="896"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>not_found<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="897"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>vars.<ref refid="structsemicooked_1_1Variables_1ad1a852a79cf94b4894aec56fadaaa20a" kindref="member">vars</ref>.size();<sp/>j++)</highlight></codeline>
<codeline lineno="898"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i<sp/>==<sp/>vars.<ref refid="structsemicooked_1_1Variables_1ad1a852a79cf94b4894aec56fadaaa20a" kindref="member">vars</ref>[j].nameId)</highlight></codeline>
<codeline lineno="899"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="900"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var_names[remapNameId]<sp/>=<sp/>varMap.getOrdinalName(i);</highlight></codeline>
<codeline lineno="901"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>remapNameIdTable[i]<sp/>=<sp/>remapNameId;</highlight></codeline>
<codeline lineno="902"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>remapNameId++;</highlight></codeline>
<codeline lineno="903"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>not_found<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="904"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="905"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="906"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(not_found)</highlight></codeline>
<codeline lineno="907"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="908"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>remapNameIdTable[i]<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="909"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>debug(</highlight><highlight class="stringliteral">&quot;Name<sp/>%s<sp/>skipped&quot;</highlight><highlight class="normal">,<sp/>varMap.getOrdinalName(i));</highlight></codeline>
<codeline lineno="910"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="911"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="912"><highlight class="normal"><sp/><sp/>var_names.resize(remapNameId);</highlight></codeline>
<codeline lineno="913"><highlight class="normal"></highlight></codeline>
<codeline lineno="914"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>remap<sp/>nameId<sp/>to<sp/>synchronize<sp/>after<sp/>stripped</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="915"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>vars.<ref refid="structsemicooked_1_1Variables_1ad1a852a79cf94b4894aec56fadaaa20a" kindref="member">vars</ref>.size();<sp/>j++)</highlight></codeline>
<codeline lineno="916"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="917"><highlight class="normal"><sp/><sp/><sp/><sp/>G_ASSERT(vars.<ref refid="structsemicooked_1_1Variables_1ad1a852a79cf94b4894aec56fadaaa20a" kindref="member">vars</ref>[j].nameId<sp/>&gt;=<sp/>0<sp/>&amp;&amp;<sp/>vars.<ref refid="structsemicooked_1_1Variables_1ad1a852a79cf94b4894aec56fadaaa20a" kindref="member">vars</ref>[j].nameId<sp/>&lt;<sp/>remapNameIdTable.size());</highlight></codeline>
<codeline lineno="918"><highlight class="normal"><sp/><sp/><sp/><sp/>vars.<ref refid="structsemicooked_1_1Variables_1ad1a852a79cf94b4894aec56fadaaa20a" kindref="member">vars</ref>[j].nameId<sp/>=<sp/>remapNameIdTable[vars.<ref refid="structsemicooked_1_1Variables_1ad1a852a79cf94b4894aec56fadaaa20a" kindref="member">vars</ref>[j].nameId];</highlight></codeline>
<codeline lineno="919"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="920"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>vt.<ref refid="structsemicooked_1_1Variants_1a4223a892ef4750ce1a17fe4492a94ab8" kindref="member">intervals</ref>.size();<sp/>j++)</highlight></codeline>
<codeline lineno="921"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="922"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(vt.<ref refid="structsemicooked_1_1Variants_1a4223a892ef4750ce1a17fe4492a94ab8" kindref="member">intervals</ref>[j].type<sp/>==<sp/>shader_layout::Interval&lt;&gt;::TYPE_MODE)</highlight></codeline>
<codeline lineno="923"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="924"><highlight class="normal"><sp/><sp/><sp/><sp/>G_ASSERT(vt.<ref refid="structsemicooked_1_1Variants_1a4223a892ef4750ce1a17fe4492a94ab8" kindref="member">intervals</ref>[j].nameId<sp/>&gt;=<sp/>0<sp/>&amp;&amp;<sp/>vt.<ref refid="structsemicooked_1_1Variants_1a4223a892ef4750ce1a17fe4492a94ab8" kindref="member">intervals</ref>[j].nameId<sp/>&lt;<sp/>remapNameIdTable.size());</highlight></codeline>
<codeline lineno="925"><highlight class="normal"><sp/><sp/><sp/><sp/>vt.<ref refid="structsemicooked_1_1Variants_1a4223a892ef4750ce1a17fe4492a94ab8" kindref="member">intervals</ref>[j].nameId<sp/>=<sp/>remapNameIdTable[vt.<ref refid="structsemicooked_1_1Variants_1a4223a892ef4750ce1a17fe4492a94ab8" kindref="member">intervals</ref>[j].nameId];</highlight></codeline>
<codeline lineno="926"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="927"><highlight class="normal">}</highlight></codeline>
<codeline lineno="928"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>semicooked</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="929"><highlight class="normal"></highlight></codeline>
<codeline lineno="930"><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal"><ref refid="namespacesemicooked" kindref="compound">semicooked</ref>;</highlight></codeline>
<codeline lineno="931"><highlight class="normal"></highlight></codeline>
<codeline lineno="932"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="933"><highlight class="normal"></highlight><highlight class="comment">//<sp/>shaders<sp/>binary<sp/>dump<sp/>builder</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="934"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="935"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="makeShBinDump_8cpp_1ae7f4166574586836d89736ca05ad6090" kindref="member">make_scripted_shaders_dump</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*dump_name,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*cache_filename,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>strip_shaders_and_stcode,</highlight></codeline>
<codeline lineno="936"><highlight class="normal"><sp/><sp/><ref refid="makeShBinDump_8h_1a7e4c9039c4d793938486d7f1c089329f" kindref="member">BindumpPackingFlags</ref><sp/>packing_flags,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classshc_1_1CompilationContext" kindref="compound">shc::CompilationContext</ref><sp/>&amp;ctx)</highlight></codeline>
<codeline lineno="937"><highlight class="normal">{</highlight></codeline>
<codeline lineno="938"><highlight class="normal"><sp/><sp/>int64_t<sp/>reft;</highlight></codeline>
<codeline lineno="939"><highlight class="normal"><sp/><sp/>String<sp/>finalReport{};</highlight></codeline>
<codeline lineno="940"><highlight class="normal"></highlight></codeline>
<codeline lineno="941"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="942"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Load<sp/>shaders<sp/>and<sp/>construct<sp/>bindump<sp/>from<sp/>them</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="943"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="944"><highlight class="normal"><sp/><sp/><ref refid="classshc_1_1TargetContext" kindref="compound">shc::TargetContext</ref><sp/>targetCtx<sp/>=<sp/>ctx.<ref refid="classshc_1_1CompilationContext_1a54c6fe92110c82a2d44d8cff82f28261" kindref="member">makeTargetContext</ref>(dump_name);</highlight></codeline>
<codeline lineno="945"><highlight class="normal"></highlight></codeline>
<codeline lineno="946"><highlight class="normal"><sp/><sp/>Tab&lt;uint32_t&gt;<sp/>gvmap(tmpmem);</highlight></codeline>
<codeline lineno="947"><highlight class="normal"></highlight></codeline>
<codeline lineno="948"><highlight class="normal"><sp/><sp/>GatherNameMap<sp/>varMap,<sp/>shNameMap;</highlight></codeline>
<codeline lineno="949"><highlight class="normal"><sp/><sp/><ref refid="structsemicooked_1_1Variants" kindref="compound">Variants</ref><sp/>vt(varMap,<sp/>targetCtx);</highlight></codeline>
<codeline lineno="950"><highlight class="normal"><sp/><sp/><ref refid="structsemicooked_1_1Variables" kindref="compound">Variables</ref><sp/>vars(varMap,<sp/>targetCtx);</highlight></codeline>
<codeline lineno="951"><highlight class="normal"><sp/><sp/>Tab&lt;ShaderClassRecEx&gt;<sp/>dumpClasses(tmpmem);</highlight></codeline>
<codeline lineno="952"><highlight class="normal"></highlight></codeline>
<codeline lineno="953"><highlight class="normal"><sp/><sp/><ref refid="shLog_8cpp_1a2926179632c7c86265007652d3d30b14" kindref="member">sh_debug</ref>(<ref refid="shLog_8h_1a66042048eb3ce30a1dccb2ebf8c2fd5ca5395b0c35e96d97ae9ac7f83b0665310" kindref="member">SHLOG_NORMAL</ref>,<sp/></highlight><highlight class="stringliteral">&quot;[INFO]<sp/>Building<sp/>bindump<sp/>at<sp/>&apos;%s&apos;...&quot;</highlight><highlight class="normal">,<sp/>dump_name);</highlight></codeline>
<codeline lineno="954"><highlight class="normal"><sp/><sp/>reft<sp/>=<sp/>ref_time_ticks();</highlight></codeline>
<codeline lineno="955"><highlight class="normal"></highlight></codeline>
<codeline lineno="956"><highlight class="normal"><sp/><sp/>FullFileSaveCB<sp/>fileWriter{dump_name};</highlight></codeline>
<codeline lineno="957"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!fileWriter.fileHandle)</highlight></codeline>
<codeline lineno="958"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="959"><highlight class="normal"></highlight></codeline>
<codeline lineno="960"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="961"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>read<sp/>data<sp/>from<sp/>intermediate<sp/>shader<sp/>file<sp/>(.lib.bin)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="962"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="963"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="loadShaders_8cpp_1add9a3119f005c170f026531f77d0827e" kindref="member">load_scripted_shaders</ref>(cache_filename,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/>targetCtx))</highlight></codeline>
<codeline lineno="964"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="965"><highlight class="normal"></highlight></codeline>
<codeline lineno="966"><highlight class="normal"><sp/><sp/><ref refid="shLog_8cpp_1a2926179632c7c86265007652d3d30b14" kindref="member">sh_debug</ref>(<ref refid="shLog_8h_1a66042048eb3ce30a1dccb2ebf8c2fd5ca5395b0c35e96d97ae9ac7f83b0665310" kindref="member">SHLOG_NORMAL</ref>,<sp/></highlight><highlight class="stringliteral">&quot;[INFO]<sp/>Loaded<sp/>linker<sp/>output<sp/>in<sp/>%gms&quot;</highlight><highlight class="normal">,<sp/>get_time_usec(reft)<sp/>/<sp/>1000.);</highlight></codeline>
<codeline lineno="967"><highlight class="normal"><sp/><sp/>reft<sp/>=<sp/>ref_time_ticks();</highlight></codeline>
<codeline lineno="968"><highlight class="normal"></highlight></codeline>
<codeline lineno="969"><highlight class="normal"><sp/><sp/><ref refid="structShaderTargetStorage" kindref="compound">ShaderTargetStorage</ref><sp/>&amp;stor<sp/>=<sp/>targetCtx.<ref refid="classshc_1_1TargetContext_1a6c0de720a215829591233164a231d188" kindref="member">storage</ref>();</highlight></codeline>
<codeline lineno="970"><highlight class="normal"></highlight></codeline>
<codeline lineno="971"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strip_shaders_and_stcode)</highlight></codeline>
<codeline lineno="972"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="973"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>stor.<ref refid="structShaderTargetStorage_1a579932c02829dc347f03fcd70e4bc267" kindref="member">shadersStcode</ref>.size();<sp/>i++)</highlight></codeline>
<codeline lineno="974"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>clear_and_shrink(stor.<ref refid="structShaderTargetStorage_1a579932c02829dc347f03fcd70e4bc267" kindref="member">shadersStcode</ref>[i]);</highlight></codeline>
<codeline lineno="975"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>stor.<ref refid="structShaderTargetStorage_1a1ecbcf175060ab78685c7bfb1ada6d3f" kindref="member">ldShVpr</ref>.size();<sp/>i++)</highlight></codeline>
<codeline lineno="976"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>clear_and_shrink(stor.<ref refid="structShaderTargetStorage_1a1ecbcf175060ab78685c7bfb1ada6d3f" kindref="member">ldShVpr</ref>[i]);</highlight></codeline>
<codeline lineno="977"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>stor.<ref refid="structShaderTargetStorage_1a515df00f7403d2a15584b3a8e4bb691d" kindref="member">ldShFsh</ref>.size();<sp/>i++)</highlight></codeline>
<codeline lineno="978"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>clear_and_shrink(stor.<ref refid="structShaderTargetStorage_1a515df00f7403d2a15584b3a8e4bb691d" kindref="member">ldShFsh</ref>[i]);</highlight></codeline>
<codeline lineno="979"><highlight class="normal"><sp/><sp/><sp/><sp/>clear_and_shrink(stor.<ref refid="structShaderTargetStorage_1a579932c02829dc347f03fcd70e4bc267" kindref="member">shadersStcode</ref>);</highlight></codeline>
<codeline lineno="980"><highlight class="normal"><sp/><sp/><sp/><sp/>clear_and_shrink(stor.<ref refid="structShaderTargetStorage_1a1ecbcf175060ab78685c7bfb1ada6d3f" kindref="member">ldShVpr</ref>);</highlight></codeline>
<codeline lineno="981"><highlight class="normal"><sp/><sp/><sp/><sp/>clear_and_shrink(stor.<ref refid="structShaderTargetStorage_1a515df00f7403d2a15584b3a8e4bb691d" kindref="member">ldShFsh</ref>);</highlight></codeline>
<codeline lineno="982"><highlight class="normal"><sp/><sp/><sp/><sp/>clear_and_shrink(stor.<ref refid="structShaderTargetStorage_1a190fcb4bc8b6b40e11e3df50a8ad41a3" kindref="member">renderStates</ref>);</highlight></codeline>
<codeline lineno="983"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>*&amp;ptr<sp/>:<sp/>stor.shadersCompProg)</highlight></codeline>
<codeline lineno="984"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>delete<sp/>eastl::exchange(ptr,<sp/>nullptr);</highlight></codeline>
<codeline lineno="985"><highlight class="normal"><sp/><sp/><sp/><sp/>clear_and_shrink(stor.<ref refid="structShaderTargetStorage_1a4448da2fd12af15508e56628b9576d66" kindref="member">shadersCompProg</ref>);</highlight></codeline>
<codeline lineno="986"><highlight class="normal"><sp/><sp/><sp/><sp/>targetCtx.<ref refid="classshc_1_1TargetContext_1a77a4453b2a7ddead5199305bd6205fa1" kindref="member">globVars</ref>().<ref refid="classShaderGlobal_1_1VarTable_1a0a64bbc239150ab70707959e5bbc011e" kindref="member">clear</ref>();</highlight></codeline>
<codeline lineno="987"><highlight class="normal"><sp/><sp/><sp/><sp/>targetCtx.<ref refid="classshc_1_1TargetContext_1a752f5f70f8d04a70f87a34102a85f83a" kindref="member">samplers</ref>().<ref refid="classSamplerTable_1aefae0ffd54c1adbe26f005ec41a46be1" kindref="member">clear</ref>();</highlight></codeline>
<codeline lineno="988"><highlight class="normal"><sp/><sp/><sp/><sp/>targetCtx.<ref refid="classshc_1_1TargetContext_1a29da580ffb2850a459e34b407e0e57ed" kindref="member">blocks</ref>()<sp/>=<sp/>{};</highlight></codeline>
<codeline lineno="989"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<ref refid="classShaderClass" kindref="compound">::ShaderClass</ref><sp/>*sc<sp/>:<sp/>stor.shaderClass)</highlight></codeline>
<codeline lineno="990"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="991"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classSerializableTab" kindref="compound">SerializableTab&lt;::ShaderCode *&gt;</ref><sp/>uniqueCodes{};</highlight></codeline>
<codeline lineno="992"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Tab&lt;int&gt;<sp/>codeIdRemapping(sc-&gt;code.size(),<sp/>-1);</highlight></codeline>
<codeline lineno="993"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>[ind,<sp/>cd]<sp/>:<sp/>enumerate(sc-&gt;code))</highlight></codeline>
<codeline lineno="994"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="995"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cd-&gt;passes.size()<sp/>&gt;<sp/>1)</highlight></codeline>
<codeline lineno="996"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cd-&gt;passes.resize(1);</highlight></codeline>
<codeline lineno="997"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cd-&gt;allPasses.size()<sp/>&gt;<sp/>1)</highlight></codeline>
<codeline lineno="998"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cd-&gt;allPasses.resize(1);</highlight></codeline>
<codeline lineno="999"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cd-&gt;passes.size())</highlight></codeline>
<codeline lineno="1000"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1001"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>*pt<sp/>=<sp/>cd-&gt;passes[0])</highlight></codeline>
<codeline lineno="1002"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1003"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>clear_and_shrink(pt-&gt;suppBlk);</highlight></codeline>
<codeline lineno="1004"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cd-&gt;allPasses.size())</highlight></codeline>
<codeline lineno="1005"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pt-&gt;rpass<sp/>=<sp/>&amp;cd-&gt;allPasses[0];</highlight></codeline>
<codeline lineno="1006"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1007"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1008"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cd-&gt;allPasses.size())</highlight></codeline>
<codeline lineno="1009"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1010"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;p<sp/>=<sp/>cd-&gt;allPasses[0];</highlight></codeline>
<codeline lineno="1011"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p.stblkcodeNo<sp/>=<sp/>p.stcodeNo<sp/>=<sp/>p.branchlessCppStblkcodeId<sp/>=<sp/>p.branchlessCppStcodeId<sp/>=<sp/>p.renderStateNo<sp/>=<sp/>p.fsh<sp/>=<sp/>p.vprog<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="1012"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p.branchedCppStblkcodeTableOffset<sp/>=<sp/>p.branchedCppStcodeTableOffset<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="1013"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p.threadGroupSizes<sp/>=<sp/>{};</highlight></codeline>
<codeline lineno="1014"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p.scarlettWave32<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1015"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1016"><highlight class="normal"></highlight></codeline>
<codeline lineno="1017"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cd-&gt;dynVariants.reset();</highlight></codeline>
<codeline lineno="1018"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cd-&gt;branchedCppStblkcodeId<sp/>=<sp/>cd-&gt;branchedCppStcodeId<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="1019"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>clear_and_shrink(cd-&gt;stvarmap);</highlight></codeline>
<codeline lineno="1020"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cd-&gt;varsize<sp/>=<sp/>cd-&gt;regsize<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1021"><highlight class="normal"></highlight></codeline>
<codeline lineno="1022"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>strippedCodesIsEq<sp/>=<sp/>[cd](const<sp/>::ShaderCode<sp/>*other)<sp/>{</highlight></codeline>
<codeline lineno="1023"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>dataArraysAreEq<sp/>=<sp/>[](</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;arr1,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;arr2)<sp/>{</highlight></codeline>
<codeline lineno="1024"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>G_ASSERT(elem_size(arr1)<sp/>==<sp/>elem_size(arr2));</highlight></codeline>
<codeline lineno="1025"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>arr1.size()<sp/>==<sp/>arr2.size()<sp/>&amp;&amp;<sp/>memcmp(arr1.data(),<sp/>arr2.data(),<sp/>arr1.size()<sp/>*<sp/>elem_size(arr1))<sp/>==<sp/>0;</highlight></codeline>
<codeline lineno="1026"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="1027"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>dataArraysAreEq(other-&gt;channel,<sp/>cd-&gt;channel)<sp/>&amp;&amp;<sp/>other-&gt;initcode<sp/>==<sp/>cd-&gt;initcode<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="1028"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>other-&gt;staticTextureTypes<sp/>==<sp/>cd-&gt;staticTextureTypes<sp/>&amp;&amp;<sp/>other-&gt;flags<sp/>==<sp/>cd-&gt;flags;</highlight></codeline>
<codeline lineno="1029"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="1030"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>it<sp/>=<sp/>eastl::find_if(uniqueCodes.begin(),<sp/>uniqueCodes.end(),<sp/>strippedCodesIsEq);<sp/>it<sp/>!=<sp/>uniqueCodes.end())</highlight></codeline>
<codeline lineno="1031"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1032"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>codeIdRemapping[ind]<sp/>=<sp/>eastl::distance(uniqueCodes.begin(),<sp/>it);</highlight></codeline>
<codeline lineno="1033"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>cd;</highlight></codeline>
<codeline lineno="1034"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1035"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1036"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1037"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>codeIdRemapping[ind]<sp/>=<sp/>uniqueCodes.size();</highlight></codeline>
<codeline lineno="1038"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uniqueCodes.push_back(cd);</highlight></codeline>
<codeline lineno="1039"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1040"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1041"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>sc-&gt;code<sp/>=<sp/>eastl::move(uniqueCodes);</highlight></codeline>
<codeline lineno="1042"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>sc-&gt;staticVariants.getVarCount();<sp/>++i)</highlight></codeline>
<codeline lineno="1043"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1044"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;var<sp/>=<sp/>*sc-&gt;staticVariants.getVariant(i);</highlight></codeline>
<codeline lineno="1045"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(var.codeId<sp/>&gt;=<sp/>0)</highlight></codeline>
<codeline lineno="1046"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var.codeId<sp/>=<sp/>codeIdRemapping[var.codeId];</highlight></codeline>
<codeline lineno="1047"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1048"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1049"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1050"><highlight class="normal"></highlight></codeline>
<codeline lineno="1051"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>process<sp/>shader<sp/>blocks</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1052"><highlight class="normal"><sp/><sp/>Tab&lt;ShaderStateBlock<sp/>*&gt;<sp/>blocks<sp/>=<sp/>strip_shaders_and_stcode<sp/>?<sp/>Tab&lt;ShaderStateBlock<sp/>*&gt;{}<sp/>:<sp/>targetCtx.<ref refid="classshc_1_1TargetContext_1a29da580ffb2850a459e34b407e0e57ed" kindref="member">blocks</ref>().<ref refid="classShaderBlockTable_1a2d59b777ab3d6b7e1875d8ad295fe560" kindref="member">release</ref>();</highlight></codeline>
<codeline lineno="1053"><highlight class="normal"><sp/><sp/>SharedStorage&lt;blk_word_t&gt;<sp/>blkPartSign;</highlight></codeline>
<codeline lineno="1054"><highlight class="normal"><sp/><sp/>processShaderBlocks(make_span(blocks),<sp/>blkPartSign);</highlight></codeline>
<codeline lineno="1055"><highlight class="normal"><sp/><sp/>globalSuppBlkSign.clear();</highlight></codeline>
<codeline lineno="1056"><highlight class="normal"></highlight></codeline>
<codeline lineno="1057"><highlight class="normal"><sp/><sp/><ref refid="namespacebindumphlp_1ae539afd87e6c691c3a927938038c27d8" kindref="member">bindumphlp::sortShaders</ref>(blocks,<sp/>targetCtx);</highlight></codeline>
<codeline lineno="1058"><highlight class="normal"></highlight></codeline>
<codeline lineno="1059"><highlight class="normal"><sp/><sp/>dag::Vector&lt;int&gt;<sp/>stcode_type(stor.<ref refid="structShaderTargetStorage_1a579932c02829dc347f03fcd70e4bc267" kindref="member">shadersStcode</ref>.size());<sp/></highlight><highlight class="comment">//<sp/>1<sp/>-<sp/>blk,<sp/>2<sp/>-<sp/>shclass<sp/>blk,<sp/>3<sp/>--<sp/>shclass</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1060"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>blocks.size();<sp/>i++)</highlight></codeline>
<codeline lineno="1061"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1062"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal"><sp/>=<sp/>blocks[i]-&gt;stcodeId;</highlight></codeline>
<codeline lineno="1063"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">id</highlight><highlight class="normal"><sp/>&lt;<sp/>0)</highlight></codeline>
<codeline lineno="1064"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1065"><highlight class="normal"><sp/><sp/><sp/><sp/>G_ASSERT(</highlight><highlight class="keywordtype">id</highlight><highlight class="normal"><sp/>&lt;<sp/>stor.<ref refid="structShaderTargetStorage_1a579932c02829dc347f03fcd70e4bc267" kindref="member">shadersStcode</ref>.size());</highlight></codeline>
<codeline lineno="1066"><highlight class="normal"><sp/><sp/><sp/><sp/>stcode_type[id]<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="1067"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1068"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>stor.<ref refid="structShaderTargetStorage_1abfaaaacd1519890b902eb99112e8b850" kindref="member">shaderClass</ref>.size();<sp/>i++)</highlight></codeline>
<codeline lineno="1069"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1070"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classShaderClass" kindref="compound">::ShaderClass</ref><sp/>&amp;sc<sp/>=<sp/>*stor.<ref refid="structShaderTargetStorage_1abfaaaacd1519890b902eb99112e8b850" kindref="member">shaderClass</ref>[i];</highlight></codeline>
<codeline lineno="1071"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>sc.<ref refid="classShaderClass_1afd05a0478ecbe5c13b066e4456580359" kindref="member">code</ref>.size();<sp/>j++)</highlight></codeline>
<codeline lineno="1072"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sc.<ref refid="classShaderClass_1afd05a0478ecbe5c13b066e4456580359" kindref="member">code</ref>[j])</highlight></codeline>
<codeline lineno="1073"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>k<sp/>=<sp/>0;<sp/>k<sp/>&lt;<sp/>sc.<ref refid="classShaderClass_1afd05a0478ecbe5c13b066e4456580359" kindref="member">code</ref>[j]-&gt;allPasses.size();<sp/>k++)</highlight></codeline>
<codeline lineno="1074"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1075"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal"><sp/>=<sp/>sc.<ref refid="classShaderClass_1afd05a0478ecbe5c13b066e4456580359" kindref="member">code</ref>[j]-&gt;allPasses[k].stblkcodeNo;</highlight></codeline>
<codeline lineno="1076"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">id</highlight><highlight class="normal"><sp/>&lt;<sp/>0)</highlight></codeline>
<codeline lineno="1077"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1078"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>G_ASSERT(</highlight><highlight class="keywordtype">id</highlight><highlight class="normal"><sp/>&lt;<sp/>stor.<ref refid="structShaderTargetStorage_1a579932c02829dc347f03fcd70e4bc267" kindref="member">shadersStcode</ref>.size());</highlight></codeline>
<codeline lineno="1079"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(stcode_type[</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">]<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="1080"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stcode_type[id]<sp/>=<sp/>2;</highlight></codeline>
<codeline lineno="1081"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1082"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1083"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>stor.<ref refid="structShaderTargetStorage_1abfaaaacd1519890b902eb99112e8b850" kindref="member">shaderClass</ref>.size();<sp/>i++)</highlight></codeline>
<codeline lineno="1084"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1085"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classShaderClass" kindref="compound">::ShaderClass</ref><sp/>&amp;sc<sp/>=<sp/>*stor.<ref refid="structShaderTargetStorage_1abfaaaacd1519890b902eb99112e8b850" kindref="member">shaderClass</ref>[i];</highlight></codeline>
<codeline lineno="1086"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>sc.<ref refid="classShaderClass_1afd05a0478ecbe5c13b066e4456580359" kindref="member">code</ref>.size();<sp/>j++)</highlight></codeline>
<codeline lineno="1087"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sc.<ref refid="classShaderClass_1afd05a0478ecbe5c13b066e4456580359" kindref="member">code</ref>[j])</highlight></codeline>
<codeline lineno="1088"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>k<sp/>=<sp/>0;<sp/>k<sp/>&lt;<sp/>sc.<ref refid="classShaderClass_1afd05a0478ecbe5c13b066e4456580359" kindref="member">code</ref>[j]-&gt;allPasses.size();<sp/>k++)</highlight></codeline>
<codeline lineno="1089"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1090"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal"><sp/>=<sp/>sc.<ref refid="classShaderClass_1afd05a0478ecbe5c13b066e4456580359" kindref="member">code</ref>[j]-&gt;allPasses[k].stcodeNo;</highlight></codeline>
<codeline lineno="1091"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">id</highlight><highlight class="normal"><sp/>&lt;<sp/>0)</highlight></codeline>
<codeline lineno="1092"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1093"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>G_ASSERT(</highlight><highlight class="keywordtype">id</highlight><highlight class="normal"><sp/>&lt;<sp/>stor.<ref refid="structShaderTargetStorage_1a579932c02829dc347f03fcd70e4bc267" kindref="member">shadersStcode</ref>.size());</highlight></codeline>
<codeline lineno="1094"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(stcode_type[</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">]<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="1095"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stcode_type[id]<sp/>=<sp/>3;</highlight></codeline>
<codeline lineno="1096"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1097"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1098"><highlight class="normal"></highlight></codeline>
<codeline lineno="1099"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>prepare<sp/>new<sp/>sorted<sp/>varMap</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1100"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>targetCtx.<ref refid="classshc_1_1TargetContext_1a64e71598c4751d165675e9e9f1f70b8e" kindref="member">varNameMap</ref>().getIdCount();<sp/>i++)</highlight></codeline>
<codeline lineno="1101"><highlight class="normal"><sp/><sp/><sp/><sp/>varMap.addNameId(targetCtx.<ref refid="classshc_1_1TargetContext_1a64e71598c4751d165675e9e9f1f70b8e" kindref="member">varNameMap</ref>().<ref refid="classVarNameMap_1a67d66b5cb5d304dcceafb08083f0f839" kindref="member">getName</ref>(i));</highlight></codeline>
<codeline lineno="1102"><highlight class="normal"><sp/><sp/>varMap.prepareXmap();</highlight></codeline>
<codeline lineno="1103"><highlight class="normal"></highlight></codeline>
<codeline lineno="1104"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>prepare<sp/>new<sp/>sorted<sp/>shaderNameMap</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1105"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>stor.<ref refid="structShaderTargetStorage_1abfaaaacd1519890b902eb99112e8b850" kindref="member">shaderClass</ref>.size();<sp/>i++)</highlight></codeline>
<codeline lineno="1106"><highlight class="normal"><sp/><sp/><sp/><sp/>shNameMap.addNameId(stor.<ref refid="structShaderTargetStorage_1abfaaaacd1519890b902eb99112e8b850" kindref="member">shaderClass</ref>[i]-&gt;name.c_str());</highlight></codeline>
<codeline lineno="1107"><highlight class="normal"><sp/><sp/>shNameMap.prepareXmap();</highlight></codeline>
<codeline lineno="1108"><highlight class="normal"></highlight></codeline>
<codeline lineno="1109"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(stor.<ref refid="structShaderTargetStorage_1abfaaaacd1519890b902eb99112e8b850" kindref="member">shaderClass</ref>.size()<sp/>!=<sp/>shNameMap.xmap.size())</highlight></codeline>
<codeline lineno="1110"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1111"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="shLog_8cpp_1a2926179632c7c86265007652d3d30b14" kindref="member">sh_debug</ref>(<ref refid="shLog_8h_1a66042048eb3ce30a1dccb2ebf8c2fd5caae3b70b41400c8a36e8a094ac1dbe43c" kindref="member">SHLOG_ERROR</ref>,<sp/></highlight><highlight class="stringliteral">&quot;%d<sp/>shaders,<sp/>only<sp/>%d<sp/>unique,<sp/>duplicates<sp/>are:&quot;</highlight><highlight class="normal">,<sp/>stor.<ref refid="structShaderTargetStorage_1abfaaaacd1519890b902eb99112e8b850" kindref="member">shaderClass</ref>.size(),<sp/>shNameMap.xmap.size());</highlight></codeline>
<codeline lineno="1112"><highlight class="normal"></highlight></codeline>
<codeline lineno="1113"><highlight class="normal"><sp/><sp/><sp/><sp/>SmallTab&lt;int,<sp/>TmpmemAlloc&gt;<sp/>cnt;</highlight></codeline>
<codeline lineno="1114"><highlight class="normal"><sp/><sp/><sp/><sp/>clear_and_resize(cnt,<sp/>shNameMap.nameCount());</highlight></codeline>
<codeline lineno="1115"><highlight class="normal"><sp/><sp/><sp/><sp/>mem_set_0(cnt);</highlight></codeline>
<codeline lineno="1116"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>stor.<ref refid="structShaderTargetStorage_1abfaaaacd1519890b902eb99112e8b850" kindref="member">shaderClass</ref>.size();<sp/>i++)</highlight></codeline>
<codeline lineno="1117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cnt[shNameMap.getNameId(stor.<ref refid="structShaderTargetStorage_1abfaaaacd1519890b902eb99112e8b850" kindref="member">shaderClass</ref>[i]-&gt;name.c_str())]++;</highlight></codeline>
<codeline lineno="1118"><highlight class="normal"></highlight></codeline>
<codeline lineno="1119"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>shNameMap.xmap.size();<sp/>i++)</highlight></codeline>
<codeline lineno="1120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cnt[i]<sp/>&gt;<sp/>1)</highlight></codeline>
<codeline lineno="1121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="shLog_8cpp_1a2926179632c7c86265007652d3d30b14" kindref="member">sh_debug</ref>(<ref refid="shLog_8h_1a66042048eb3ce30a1dccb2ebf8c2fd5ca0012c8acb382f295fe614046a64bba11" kindref="member">SHLOG_INFO</ref>,<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/>%s<sp/>-<sp/>%d<sp/>times&quot;</highlight><highlight class="normal">,<sp/>shNameMap.getOrdinalName(i),<sp/>cnt[i]);</highlight></codeline>
<codeline lineno="1122"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1123"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1124"><highlight class="normal"></highlight></codeline>
<codeline lineno="1125"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>remap<sp/>shader<sp/>classes<sp/>to<sp/>be<sp/>in<sp/>sync<sp/>with<sp/>shaderNameMap</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1126"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1127"><highlight class="normal"><sp/><sp/><sp/><sp/>SmallTab&lt;::ShaderClass<sp/>*,<sp/>TmpmemAlloc&gt;<sp/>n_shClass;</highlight></codeline>
<codeline lineno="1128"><highlight class="normal"><sp/><sp/><sp/><sp/>clear_and_resize(n_shClass,<sp/>stor.<ref refid="structShaderTargetStorage_1abfaaaacd1519890b902eb99112e8b850" kindref="member">shaderClass</ref>.size());</highlight></codeline>
<codeline lineno="1129"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>stor.<ref refid="structShaderTargetStorage_1abfaaaacd1519890b902eb99112e8b850" kindref="member">shaderClass</ref>.size();<sp/>i++)</highlight></codeline>
<codeline lineno="1130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>n_shClass[shNameMap.xmap[i]]<sp/>=<sp/>stor.<ref refid="structShaderTargetStorage_1abfaaaacd1519890b902eb99112e8b850" kindref="member">shaderClass</ref>[i];</highlight></codeline>
<codeline lineno="1131"><highlight class="normal"><sp/><sp/><sp/><sp/>mem_copy_from(stor.<ref refid="structShaderTargetStorage_1abfaaaacd1519890b902eb99112e8b850" kindref="member">shaderClass</ref>,<sp/>n_shClass.data());</highlight></codeline>
<codeline lineno="1132"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1133"><highlight class="normal"></highlight></codeline>
<codeline lineno="1134"><highlight class="normal"><sp/><sp/>Tab&lt;int&gt;<sp/>remapTable(tmpmem);</highlight></codeline>
<codeline lineno="1135"><highlight class="normal"><sp/><sp/><ref refid="namespacebindumphlp_1aa0b036af2c3b907f9d9c484f1b3b0256" kindref="member">bindumphlp::countRefAndRemapGlobalVars</ref>(remapTable,<sp/>stor.<ref refid="structShaderTargetStorage_1abfaaaacd1519890b902eb99112e8b850" kindref="member">shaderClass</ref>,<sp/>varMap,<sp/>targetCtx);</highlight></codeline>
<codeline lineno="1136"><highlight class="normal"></highlight></codeline>
<codeline lineno="1137"><highlight class="normal"><sp/><sp/>bindump::VecHolder&lt;bindump::StrHolder&lt;&gt;&gt;<sp/>shader_names;</highlight></codeline>
<codeline lineno="1138"><highlight class="normal"><sp/><sp/>bindump::VecHolder&lt;bindump::StrHolder&lt;&gt;&gt;<sp/>blk_names;</highlight></codeline>
<codeline lineno="1139"><highlight class="normal"><sp/><sp/>bindump::VecHolder&lt;bindump::StrHolder&lt;&gt;&gt;<sp/>var_names;</highlight></codeline>
<codeline lineno="1140"><highlight class="normal"></highlight></codeline>
<codeline lineno="1141"><highlight class="normal"><sp/><sp/>shader_names.resize(shNameMap.xmap.size());</highlight></codeline>
<codeline lineno="1142"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>shNameMap.xmap.size();<sp/>i++)</highlight></codeline>
<codeline lineno="1143"><highlight class="normal"><sp/><sp/><sp/><sp/>shader_names[i]<sp/>=<sp/>shNameMap.getOrdinalName(i);</highlight></codeline>
<codeline lineno="1144"><highlight class="normal"></highlight></codeline>
<codeline lineno="1145"><highlight class="normal"><sp/><sp/>blk_names.resize(blocks.size()<sp/>+<sp/><ref refid="namedConst_8h_1ad736eaf66e63df63fdef8ab710d6f88e" kindref="member">SHADER_BLOCK_HIER_LEVELS</ref>);</highlight></codeline>
<codeline lineno="1146"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/><ref refid="namedConst_8h_1ad736eaf66e63df63fdef8ab710d6f88e" kindref="member">SHADER_BLOCK_HIER_LEVELS</ref>;<sp/>i++)</highlight></codeline>
<codeline lineno="1147"><highlight class="normal"><sp/><sp/><sp/><sp/>blk_names[i]<sp/>=<sp/>hardcodedBlkName[i];</highlight></codeline>
<codeline lineno="1148"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>blocks.size();<sp/>i++)</highlight></codeline>
<codeline lineno="1149"><highlight class="normal"><sp/><sp/><sp/><sp/>blk_names[i<sp/>+<sp/><ref refid="namedConst_8h_1ad736eaf66e63df63fdef8ab710d6f88e" kindref="member">SHADER_BLOCK_HIER_LEVELS</ref>]<sp/>=<sp/>blocks[i]-&gt;name;</highlight></codeline>
<codeline lineno="1150"><highlight class="normal"></highlight></codeline>
<codeline lineno="1151"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>prepare<sp/>global<sp/>vars</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1152"><highlight class="normal"><sp/><sp/>vars.<ref refid="structsemicooked_1_1Variables_1ac9434f69a9263b5a5cd5e063de849dbc" kindref="member">addGlobVars</ref>(remapTable);</highlight></codeline>
<codeline lineno="1153"><highlight class="normal"></highlight></codeline>
<codeline lineno="1154"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Generate<sp/>the<sp/>cpp<sp/>stcode<sp/>file<sp/>for<sp/>them</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1155"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="namespaceshc_1a47efde6b3d493adbe2119a5593807d36" kindref="member">shc::config</ref>().compileCppStcode()<sp/>&amp;&amp;<sp/>!strip_shaders_and_stcode)</highlight></codeline>
<codeline lineno="1156"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1157"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structStcodeGlobalVars" kindref="compound">StcodeGlobalVars</ref><sp/>stcodeGlobvars(<ref refid="structStcodeGlobalVars_1a9d13cdcc3efc084d3f6ed74206268112a2eca6bbd79604d1d742efa40e3a9a82a" kindref="member">StcodeGlobalVars::Type::MAIN_COLLECTION</ref>);</highlight></codeline>
<codeline lineno="1158"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>vars.<ref refid="structsemicooked_1_1Variables_1aebd08ea6cdd24c727edcdbe144657b4b" kindref="member">varLists</ref>.back().v.size();<sp/>++i)</highlight></codeline>
<codeline lineno="1159"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;var<sp/>=<sp/>vars.<ref refid="structsemicooked_1_1Variables_1aebd08ea6cdd24c727edcdbe144657b4b" kindref="member">varLists</ref>.back().v[i];</highlight></codeline>
<codeline lineno="1161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*name<sp/>=<sp/>vars.<ref refid="structsemicooked_1_1Variables_1acc934bd5e7499d2d77f7b2c2348398ea" kindref="member">varMap</ref>.getOrdinalName(var.nameId);</highlight></codeline>
<codeline lineno="1162"><highlight class="normal"></highlight></codeline>
<codeline lineno="1163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Skip<sp/>fake<sp/>vars:<sp/>array<sp/>size<sp/>getters<sp/>and<sp/>elements</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strchr(name,<sp/></highlight><highlight class="charliteral">&apos;(&apos;</highlight><highlight class="normal">)<sp/>||<sp/>strchr(name,<sp/></highlight><highlight class="charliteral">&apos;[&apos;</highlight><highlight class="normal">))</highlight></codeline>
<codeline lineno="1165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1166"><highlight class="normal"></highlight></codeline>
<codeline lineno="1167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>stcodeGlobvars.setVar((ShaderVarType)var.type,<sp/>name,<sp/>i);</highlight></codeline>
<codeline lineno="1168"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1169"><highlight class="normal"></highlight></codeline>
<codeline lineno="1170"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="cppStcode_8cpp_1a669b5fcc096a21d2ba3c4114c5383036" kindref="member">save_stcode_global_vars</ref>(eastl::move(stcodeGlobvars),<sp/>ctx.<ref refid="classshc_1_1CompilationContext_1a8994f2ef66560adc7db8cae292c5ec65" kindref="member">compInfo</ref>());</highlight></codeline>
<codeline lineno="1171"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1172"><highlight class="normal"></highlight></codeline>
<codeline lineno="1173"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>convert<sp/>data<sp/>into<sp/>binary<sp/>dump<sp/>prefabs</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1174"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>classnum<sp/>=<sp/>0,<sp/>codenum<sp/>=<sp/>0,<sp/>codepasses<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1175"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>new_codenum<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1176"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>max_reg_size<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1177"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>vpr_bytes<sp/>=<sp/>0,<sp/>fsh_bytes<sp/>=<sp/>0,<sp/>stcode_bytes0<sp/>=<sp/>0,<sp/>stcode_bytes1<sp/>=<sp/>0,<sp/>stcode_bytes2<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1178"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>hs_ds_gs_bytes<sp/>=<sp/>0,<sp/>cs_bytes<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1179"><highlight class="normal"></highlight></codeline>
<codeline lineno="1180"><highlight class="normal"><sp/><sp/>dumpClasses.resize(stor.<ref refid="structShaderTargetStorage_1abfaaaacd1519890b902eb99112e8b850" kindref="member">shaderClass</ref>.size());</highlight></codeline>
<codeline lineno="1181"><highlight class="normal"><sp/><sp/>eastl::unordered_map&lt;eastl::string,<sp/>uint8_t&gt;<sp/>assumedIntervals;</highlight></codeline>
<codeline lineno="1182"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>stor.<ref refid="structShaderTargetStorage_1abfaaaacd1519890b902eb99112e8b850" kindref="member">shaderClass</ref>.size();<sp/>i++)</highlight></codeline>
<codeline lineno="1183"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1184"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classShaderClass" kindref="compound">::ShaderClass</ref><sp/>&amp;sc<sp/>=<sp/>*stor.<ref refid="structShaderTargetStorage_1abfaaaacd1519890b902eb99112e8b850" kindref="member">shaderClass</ref>[i];</highlight></codeline>
<codeline lineno="1185"><highlight class="normal"></highlight></codeline>
<codeline lineno="1186"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;inter<sp/>:<sp/>sc.assumedIntervals)</highlight></codeline>
<codeline lineno="1187"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>assumedIntervals[inter.name]<sp/>=<sp/>inter.value;</highlight></codeline>
<codeline lineno="1188"><highlight class="normal"></highlight></codeline>
<codeline lineno="1189"><highlight class="normal"><sp/><sp/><sp/><sp/>dumpClasses[i].initShaderClass(sc,<sp/>shNameMap,<sp/>vt,<sp/>vars);</highlight></codeline>
<codeline lineno="1190"><highlight class="normal"><sp/><sp/><sp/><sp/>new_codenum<sp/>+=<sp/>dumpClasses[i].codes.codes.size();</highlight></codeline>
<codeline lineno="1191"><highlight class="normal"></highlight></codeline>
<codeline lineno="1192"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>sc.<ref refid="classShaderClass_1afd05a0478ecbe5c13b066e4456580359" kindref="member">code</ref>.size();<sp/>j++)</highlight></codeline>
<codeline lineno="1193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sc.<ref refid="classShaderClass_1afd05a0478ecbe5c13b066e4456580359" kindref="member">code</ref>[j])</highlight></codeline>
<codeline lineno="1194"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1195"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(max_reg_size<sp/>&lt;<sp/>sc.<ref refid="classShaderClass_1afd05a0478ecbe5c13b066e4456580359" kindref="member">code</ref>[j]-&gt;regsize)</highlight></codeline>
<codeline lineno="1196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>max_reg_size<sp/>=<sp/>sc.<ref refid="classShaderClass_1afd05a0478ecbe5c13b066e4456580359" kindref="member">code</ref>[j]-&gt;regsize;</highlight></codeline>
<codeline lineno="1197"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sc.<ref refid="classShaderClass_1afd05a0478ecbe5c13b066e4456580359" kindref="member">code</ref>[j]-&gt;regsize<sp/>&gt;<sp/>MAX_TEMP_REGS)</highlight></codeline>
<codeline lineno="1198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="shLog_8cpp_1a2926179632c7c86265007652d3d30b14" kindref="member">sh_debug</ref>(<ref refid="shLog_8h_1a66042048eb3ce30a1dccb2ebf8c2fd5ca6112bd3e7c5d175bac1569c33c1630ad" kindref="member">SHLOG_FATAL</ref>,<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>ShaderClass=%s<sp/>has<sp/>too<sp/>many<sp/>registers<sp/>%d,<sp/>limit<sp/>is<sp/>%d&quot;</highlight><highlight class="normal">,<sp/>sc.<ref refid="classShaderClass_1a7dade6337edb610925324439779864b4" kindref="member">name</ref>,<sp/>sc.<ref refid="classShaderClass_1afd05a0478ecbe5c13b066e4456580359" kindref="member">code</ref>[j]-&gt;regsize,</highlight></codeline>
<codeline lineno="1199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MAX_TEMP_REGS);</highlight></codeline>
<codeline lineno="1200"><highlight class="normal"></highlight></codeline>
<codeline lineno="1201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>k<sp/>=<sp/>0;<sp/>k<sp/>&lt;<sp/>sc.<ref refid="classShaderClass_1afd05a0478ecbe5c13b066e4456580359" kindref="member">code</ref>[j]-&gt;passes.size();<sp/>k++)</highlight></codeline>
<codeline lineno="1202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sc.<ref refid="classShaderClass_1afd05a0478ecbe5c13b066e4456580359" kindref="member">code</ref>[j]-&gt;passes[k])</highlight></codeline>
<codeline lineno="1203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>codepasses++;</highlight></codeline>
<codeline lineno="1204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>codenum++;</highlight></codeline>
<codeline lineno="1205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1206"><highlight class="normal"><sp/><sp/><sp/><sp/>classnum++;</highlight></codeline>
<codeline lineno="1207"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1208"><highlight class="normal"></highlight></codeline>
<codeline lineno="1209"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;interval<sp/>:<sp/>vt.intervals)</highlight></codeline>
<codeline lineno="1210"><highlight class="normal"><sp/><sp/><sp/><sp/>assumedIntervals.erase(varMap.getOrdinalName(interval.nameId));</highlight></codeline>
<codeline lineno="1211"><highlight class="normal"></highlight></codeline>
<codeline lineno="1212"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;[name,<sp/>value]<sp/>:<sp/>assumedIntervals)</highlight></codeline>
<codeline lineno="1213"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1214"><highlight class="normal"><sp/><sp/><sp/><sp/>shader_layout::Interval&lt;&gt;<sp/>ival;</highlight></codeline>
<codeline lineno="1215"><highlight class="normal"><sp/><sp/><sp/><sp/>ival.type<sp/>=<sp/>ival.TYPE_ASSUMED_INTERVAL;</highlight></codeline>
<codeline lineno="1216"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal"><sp/>=<sp/>varMap.getNameId(name.c_str());</highlight></codeline>
<codeline lineno="1217"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">id</highlight><highlight class="normal"><sp/>&lt;<sp/>0)</highlight></codeline>
<codeline lineno="1218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Don&apos;t<sp/>have<sp/>correspond<sp/>variable<sp/>for<sp/>interval</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1220"><highlight class="normal"><sp/><sp/><sp/><sp/>ival.nameId<sp/>=<sp/>varMap.xmap[id];</highlight></codeline>
<codeline lineno="1221"><highlight class="normal"><sp/><sp/><sp/><sp/>ival.maxVal.setCount(value);</highlight></codeline>
<codeline lineno="1222"><highlight class="normal"><sp/><sp/><sp/><sp/>vt.<ref refid="structsemicooked_1_1Variants_1ad445fa7f534fdcd1686a0786febe2d78" kindref="member">getIntervalId</ref>(ival);</highlight></codeline>
<codeline lineno="1223"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1224"><highlight class="normal"></highlight></codeline>
<codeline lineno="1225"><highlight class="normal"><sp/><sp/><ref refid="namespacesemicooked_1aeb6dadc2e04aa3fb6dca39d22bff3412" kindref="member">addRemappedStrData</ref>(varMap,<sp/>vars,<sp/>vt,<sp/>var_names);</highlight></codeline>
<codeline lineno="1226"><highlight class="normal"></highlight></codeline>
<codeline lineno="1227"><highlight class="normal"><sp/><sp/>gvmap.resize(vars.<ref refid="structsemicooked_1_1Variables_1aebd08ea6cdd24c727edcdbe144657b4b" kindref="member">varLists</ref>[0].v.size());</highlight></codeline>
<codeline lineno="1228"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>gvmap.size();<sp/>i++)</highlight></codeline>
<codeline lineno="1229"><highlight class="normal"><sp/><sp/><sp/><sp/>gvmap[i]<sp/>=<sp/>(i<sp/>&lt;&lt;<sp/>16)<sp/>|<sp/>(vars.<ref refid="structsemicooked_1_1Variables_1aebd08ea6cdd24c727edcdbe144657b4b" kindref="member">varLists</ref>[0].v[i].nameId<sp/>&amp;<sp/>0xFFFF);</highlight></codeline>
<codeline lineno="1230"><highlight class="normal"><sp/><sp/>sort(gvmap,<sp/>&amp;cmpPacked2uint16Map);</highlight></codeline>
<codeline lineno="1231"><highlight class="normal"></highlight></codeline>
<codeline lineno="1232"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>blocks.size();<sp/>i++)</highlight></codeline>
<codeline lineno="1233"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(max_reg_size<sp/>&lt;<sp/>blocks[i]-&gt;regSize)</highlight></codeline>
<codeline lineno="1234"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>max_reg_size<sp/>=<sp/>blocks[i]-&gt;regSize;</highlight></codeline>
<codeline lineno="1235"><highlight class="normal"><sp/><sp/><ref refid="structsemicooked_1_1ShaderClassRecEx_1a135f890458e8155a9952222f9eea9480" kindref="member">ShaderClassRecEx::clearTemp</ref>();</highlight></codeline>
<codeline lineno="1236"><highlight class="normal"><sp/><sp/><ref refid="structsemicooked_1_1Variants_1a4316e0db025caf7165e6d357880c993f" kindref="member">Variants::clearTemp</ref>();</highlight></codeline>
<codeline lineno="1237"><highlight class="normal"></highlight></codeline>
<codeline lineno="1238"><highlight class="normal"><sp/><sp/><ref refid="shLog_8cpp_1a2926179632c7c86265007652d3d30b14" kindref="member">sh_debug</ref>(<ref refid="shLog_8h_1a66042048eb3ce30a1dccb2ebf8c2fd5ca0012c8acb382f295fe614046a64bba11" kindref="member">SHLOG_INFO</ref>,<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>ShaderClasses=%d<sp/>CodeNum=%d-&gt;%d<sp/>CodePasses=%d&quot;</highlight><highlight class="normal">,<sp/>classnum,<sp/>codenum,<sp/>new_codenum,<sp/>codepasses);</highlight></codeline>
<codeline lineno="1239"><highlight class="normal"><sp/><sp/><ref refid="shLog_8cpp_1a2926179632c7c86265007652d3d30b14" kindref="member">sh_debug</ref>(<ref refid="shLog_8h_1a66042048eb3ce30a1dccb2ebf8c2fd5ca0012c8acb382f295fe614046a64bba11" kindref="member">SHLOG_INFO</ref>,<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>VPR.num=%d<sp/>FSH.num=%d<sp/>stcode.num=%d&quot;</highlight><highlight class="normal">,<sp/>stor.<ref refid="structShaderTargetStorage_1a1ecbcf175060ab78685c7bfb1ada6d3f" kindref="member">ldShVpr</ref>.size(),<sp/>stor.<ref refid="structShaderTargetStorage_1a515df00f7403d2a15584b3a8e4bb691d" kindref="member">ldShFsh</ref>.size(),<sp/>stor.<ref refid="structShaderTargetStorage_1a579932c02829dc347f03fcd70e4bc267" kindref="member">shadersStcode</ref>.size());</highlight></codeline>
<codeline lineno="1240"><highlight class="normal"></highlight></codeline>
<codeline lineno="1241"><highlight class="normal"><sp/><sp/><ref refid="shLog_8cpp_1a2926179632c7c86265007652d3d30b14" kindref="member">sh_debug</ref>(<ref refid="shLog_8h_1a66042048eb3ce30a1dccb2ebf8c2fd5ca0012c8acb382f295fe614046a64bba11" kindref="member">SHLOG_INFO</ref>,<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>intervals=%d<sp/><sp/>iValStor=%d<sp/>pcsStor=%d<sp/><sp/>lmap/qmap=%d/%d&quot;</highlight><highlight class="normal">,<sp/>vt.<ref refid="structsemicooked_1_1Variants_1a4223a892ef4750ce1a17fe4492a94ab8" kindref="member">intervals</ref>.size(),<sp/>vt.<ref refid="structsemicooked_1_1Variants_1a31c33168fb761377e8045bf4183439f5" kindref="member">iValStorage</ref>.data.size(),</highlight></codeline>
<codeline lineno="1242"><highlight class="normal"><sp/><sp/><sp/><sp/>vt.<ref refid="structsemicooked_1_1Variants_1abf79dc07be19526795b474f05a7156d3" kindref="member">vtPcsStorage</ref>.data.size(),<sp/>vt.<ref refid="structsemicooked_1_1Variants_1ae252c81018e98f87369ff5fd9953f977" kindref="member">vtLmapStorage</ref>.data.size(),<sp/>vt.<ref refid="structsemicooked_1_1Variants_1a1a27d308dbac0626042543bf50b6019d" kindref="member">vtQmapStorage</ref>.data.size());</highlight></codeline>
<codeline lineno="1243"><highlight class="normal"></highlight></codeline>
<codeline lineno="1244"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1245"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>write<sp/>shaders<sp/>binary<sp/>dump</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1246"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1247"><highlight class="normal"><sp/><sp/>bindump::Master&lt;shader_layout::ScriptedShadersBinDumpCompressed&gt;<sp/>shaders_dump_compressed;</highlight></codeline>
<codeline lineno="1248"><highlight class="normal"><sp/><sp/>bindump::Master&lt;shader_layout::ScriptedShadersBinDumpV3&gt;<sp/>shaders_dump;</highlight></codeline>
<codeline lineno="1249"><highlight class="normal"></highlight></codeline>
<codeline lineno="1250"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>write<sp/>dump<sp/>header</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1251"><highlight class="normal"><sp/><sp/>shaders_dump_compressed.header.magicPart1<sp/>=<sp/>_MAKE4C(</highlight><highlight class="stringliteral">&apos;VSPS&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1252"><highlight class="normal"><sp/><sp/>shaders_dump_compressed.header.magicPart2<sp/>=<sp/>_MAKE4C(</highlight><highlight class="stringliteral">&apos;dump&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1253"><highlight class="normal"><sp/><sp/>shaders_dump_compressed.header.version<sp/>=<sp/>SHADER_BINDUMP_VER;</highlight></codeline>
<codeline lineno="1254"><highlight class="normal"></highlight></codeline>
<codeline lineno="1255"><highlight class="normal"><sp/><sp/>shaders_dump.maxRegSize<sp/>=<sp/>max_reg_size;</highlight></codeline>
<codeline lineno="1256"><highlight class="normal"></highlight></codeline>
<codeline lineno="1257"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>write<sp/>render<sp/>states</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1258"><highlight class="normal"><sp/><sp/>shaders_dump.renderStates<sp/>=<sp/>make_span(stor.<ref refid="structShaderTargetStorage_1a190fcb4bc8b6b40e11e3df50a8ad41a3" kindref="member">renderStates</ref>);</highlight></codeline>
<codeline lineno="1259"><highlight class="normal"></highlight></codeline>
<codeline lineno="1260"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>write<sp/>stcode<sp/>data</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1261"><highlight class="normal"><sp/><sp/>shaders_dump.stcode.resize(stor.<ref refid="structShaderTargetStorage_1a579932c02829dc347f03fcd70e4bc267" kindref="member">shadersStcode</ref>.size());</highlight></codeline>
<codeline lineno="1262"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>stor.<ref refid="structShaderTargetStorage_1a579932c02829dc347f03fcd70e4bc267" kindref="member">shadersStcode</ref>.size();<sp/>i++)</highlight></codeline>
<codeline lineno="1263"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1264"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(stcode_type[i]<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="1265"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1266"><highlight class="normal"><sp/><sp/><sp/><sp/>dag::ConstSpan&lt;int&gt;<sp/>st<sp/>=<sp/><ref refid="transcodeShader_8cpp_1aaeaa2e6dbedebab40b3cad05b8a1dada" kindref="member">::transcode_stcode</ref>(make_span_const(stor.<ref refid="structShaderTargetStorage_1a579932c02829dc347f03fcd70e4bc267" kindref="member">shadersStcode</ref>[i]));</highlight></codeline>
<codeline lineno="1267"><highlight class="normal"></highlight></codeline>
<codeline lineno="1268"><highlight class="normal"><sp/><sp/><sp/><sp/>shaders_dump.stcode[i]<sp/>=<sp/>st;</highlight></codeline>
<codeline lineno="1269"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(stcode_type[i]<sp/>==<sp/>1)</highlight></codeline>
<codeline lineno="1270"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>stcode_bytes0<sp/>+=<sp/>data_size(st);</highlight></codeline>
<codeline lineno="1271"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(stcode_type[i]<sp/>==<sp/>2)</highlight></codeline>
<codeline lineno="1272"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>stcode_bytes1<sp/>+=<sp/>data_size(st);</highlight></codeline>
<codeline lineno="1273"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1274"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>stcode_bytes2<sp/>+=<sp/>data_size(st);</highlight></codeline>
<codeline lineno="1275"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1276"><highlight class="normal"></highlight></codeline>
<codeline lineno="1277"><highlight class="normal"><sp/><sp/>shaders_dump.externalStcodeMode<sp/>=<sp/><ref refid="namespaceshc_1a47efde6b3d493adbe2119a5593807d36" kindref="member">shc::config</ref>().<ref refid="structshc_1_1CompilerConfig_1a4abc6b3b94503bccc387b5c46cc55272" kindref="member">cppStcodeMode</ref>;</highlight></codeline>
<codeline lineno="1278"><highlight class="normal"><sp/><sp/>shaders_dump.externalStcodeVersion<sp/>=<sp/>uint32_t(CPP_STCODE_COMMON_VER);</highlight></codeline>
<codeline lineno="1279"><highlight class="normal"><sp/><sp/><ref refid="structCryptoHash" kindref="compound">CryptoHash</ref><sp/>externalStcodeHash{};</highlight></codeline>
<codeline lineno="1280"><highlight class="normal"><sp/><sp/>memset(externalStcodeHash.data,<sp/>0,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(externalStcodeHash.data));</highlight></codeline>
<codeline lineno="1281"><highlight class="normal"></highlight></codeline>
<codeline lineno="1282"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="namespaceshc_1a47efde6b3d493adbe2119a5593807d36" kindref="member">shc::config</ref>().compileCppStcode()<sp/>&amp;&amp;<sp/>!strip_shaders_and_stcode)</highlight></codeline>
<codeline lineno="1283"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1284"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Calculate<sp/>overall<sp/>cpp<sp/>stcode<sp/>hash<sp/>for<sp/>matching.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1285"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structCryptoHasher" kindref="compound">CryptoHasher</ref><sp/>hasher{};</highlight></codeline>
<codeline lineno="1286"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;hash<sp/>:<sp/>targetCtx.cppStcode().dynamicRoutineHashes)</highlight></codeline>
<codeline lineno="1287"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>hasher.update(hash);</highlight></codeline>
<codeline lineno="1288"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;hash<sp/>:<sp/>targetCtx.cppStcode().staticRoutineHashes)</highlight></codeline>
<codeline lineno="1289"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>hasher.update(hash);</highlight></codeline>
<codeline lineno="1290"><highlight class="normal"><sp/><sp/><sp/><sp/>externalStcodeHash<sp/>=<sp/>hasher.<ref refid="structCryptoHasher_1a41176760e73b4f0594213f1e197c98fa" kindref="member">hash</ref>();</highlight></codeline>
<codeline lineno="1291"><highlight class="normal"></highlight></codeline>
<codeline lineno="1292"><highlight class="normal"><sp/><sp/><sp/><sp/>eastl::string<sp/>logHash{};</highlight></codeline>
<codeline lineno="1293"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(uint8_t<sp/></highlight><highlight class="keywordtype">byte</highlight><highlight class="normal"><sp/>:<sp/>externalStcodeHash.data)</highlight></codeline>
<codeline lineno="1294"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>logHash.append_sprintf(</highlight><highlight class="stringliteral">&quot;%02x&quot;</highlight><highlight class="normal">,<sp/>byte);</highlight></codeline>
<codeline lineno="1295"><highlight class="normal"><sp/><sp/><sp/><sp/>finalReport.aprintf(0,<sp/></highlight><highlight class="stringliteral">&quot;\nGenerated<sp/>stcode<sp/>with\n<sp/><sp/>|<sp/>version<sp/>:<sp/>%d\n<sp/><sp/>|<sp/>hash<sp/><sp/><sp/><sp/>:<sp/>%s\n&quot;</highlight><highlight class="normal">,<sp/>CPP_STCODE_COMMON_VER,<sp/>logHash.c_str());</highlight></codeline>
<codeline lineno="1296"><highlight class="normal"></highlight></codeline>
<codeline lineno="1297"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>validation<sp/>masks<sp/>are<sp/>present,<sp/>save<sp/>them<sp/>to<sp/>the<sp/>bindump</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1298"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="namespaceshc_1a47efde6b3d493adbe2119a5593807d36" kindref="member">shc::config</ref>().generateCppStcodeValidationData)</highlight></codeline>
<codeline lineno="1299"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1300"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>G_ASSERT(stor.<ref refid="structShaderTargetStorage_1a41bea837412e12aed8b376ca3180fd07" kindref="member">stcodeConstValidationMasks</ref>.size()<sp/>==<sp/>shaders_dump.stcode.size());</highlight></codeline>
<codeline lineno="1301"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>shaders_dump.stcodeConstValidationMasks.resize(stor.<ref refid="structShaderTargetStorage_1a41bea837412e12aed8b376ca3180fd07" kindref="member">stcodeConstValidationMasks</ref>.size());</highlight></codeline>
<codeline lineno="1302"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;[</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">,<sp/>mask]<sp/>:<sp/>enumerate(stor.stcodeConstValidationMasks))</highlight></codeline>
<codeline lineno="1303"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1304"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>G_ASSERT(mask);</highlight></codeline>
<codeline lineno="1305"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>shaders_dump.stcodeConstValidationMasks[id]<sp/>=<sp/>*mask;</highlight></codeline>
<codeline lineno="1306"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>mask;</highlight></codeline>
<codeline lineno="1307"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1308"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1309"><highlight class="normal"></highlight></codeline>
<codeline lineno="1310"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Generate<sp/>stcode<sp/>main<sp/>file<sp/>w/<sp/>the<sp/>final<sp/>stcode<sp/>hash</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1311"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="cppStcode_8cpp_1a373bc6f0b6f954179718361bfddd80eb" kindref="member">save_stcode_dll_main</ref>(eastl::move(targetCtx.<ref refid="classshc_1_1TargetContext_1a27d8cc3aa5ee309d0c1e3fca7ea3cbdf" kindref="member">cppStcode</ref>()),<sp/>externalStcodeHash,<sp/>ctx.<ref refid="classshc_1_1CompilationContext_1a8994f2ef66560adc7db8cae292c5ec65" kindref="member">compInfo</ref>());</highlight></codeline>
<codeline lineno="1312"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1313"><highlight class="normal"></highlight></codeline>
<codeline lineno="1314"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static_assert</highlight><highlight class="normal">(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(shaders_dump.externalStcodeHash)<sp/>==<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(externalStcodeHash.data));</highlight></codeline>
<codeline lineno="1315"><highlight class="normal"><sp/><sp/>memcpy(shaders_dump.externalStcodeHash,<sp/>externalStcodeHash.data,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(shaders_dump.externalStcodeHash));</highlight></codeline>
<codeline lineno="1316"><highlight class="normal"></highlight></codeline>
<codeline lineno="1317"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;iValStorage<sp/>=<sp/>vt.<ref refid="structsemicooked_1_1Variants_1a31c33168fb761377e8045bf4183439f5" kindref="member">iValStorage</ref>.getVecHolder();</highlight></codeline>
<codeline lineno="1318"><highlight class="normal"></highlight></codeline>
<codeline lineno="1319"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>createHashTable<sp/>=<sp/>[](</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>dag::Vector&lt;uint32_t&gt;<sp/>&amp;hashes,<sp/>uint32_t<sp/>table_size,<sp/>uint32_t<sp/>shift,<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>create_hash_table)<sp/>{</highlight></codeline>
<codeline lineno="1320"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(shift<sp/>==<sp/>32)</highlight></codeline>
<codeline lineno="1321"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>eastl::pair{dag::Vector&lt;uint32_t&gt;{},<sp/>shift};</highlight></codeline>
<codeline lineno="1322"><highlight class="normal"><sp/><sp/><sp/><sp/>dag::Vector&lt;uint32_t&gt;<sp/>table(table_size);</highlight></codeline>
<codeline lineno="1323"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(uint32_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>hashes.size();<sp/>i++)</highlight></codeline>
<codeline lineno="1324"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1325"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>index<sp/>=<sp/>(hashes[i]<sp/>&gt;&gt;<sp/>shift)<sp/>%<sp/>table_size;</highlight></codeline>
<codeline lineno="1326"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(table[index]<sp/>!=<sp/>0)</highlight></codeline>
<codeline lineno="1327"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>create_hash_table(hashes,<sp/>table_size,<sp/>shift<sp/>+<sp/>1,<sp/>create_hash_table);</highlight></codeline>
<codeline lineno="1328"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>table[index]<sp/>=<sp/>i<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="1329"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1330"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>eastl::pair{table,<sp/>shift};</highlight></codeline>
<codeline lineno="1331"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="1332"><highlight class="normal"></highlight></codeline>
<codeline lineno="1333"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>nextPowerOfTwo<sp/>=<sp/>[](uint32_t<sp/>u)<sp/>{</highlight></codeline>
<codeline lineno="1334"><highlight class="normal"><sp/><sp/><sp/><sp/>--u;</highlight></codeline>
<codeline lineno="1335"><highlight class="normal"><sp/><sp/><sp/><sp/>u<sp/>|=<sp/>u<sp/>&gt;&gt;<sp/>1;</highlight></codeline>
<codeline lineno="1336"><highlight class="normal"><sp/><sp/><sp/><sp/>u<sp/>|=<sp/>u<sp/>&gt;&gt;<sp/>2;</highlight></codeline>
<codeline lineno="1337"><highlight class="normal"><sp/><sp/><sp/><sp/>u<sp/>|=<sp/>u<sp/>&gt;&gt;<sp/>4;</highlight></codeline>
<codeline lineno="1338"><highlight class="normal"><sp/><sp/><sp/><sp/>u<sp/>|=<sp/>u<sp/>&gt;&gt;<sp/>8;</highlight></codeline>
<codeline lineno="1339"><highlight class="normal"><sp/><sp/><sp/><sp/>u<sp/>|=<sp/>u<sp/>&gt;&gt;<sp/>16;</highlight></codeline>
<codeline lineno="1340"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>++u;</highlight></codeline>
<codeline lineno="1341"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="1342"><highlight class="normal"></highlight></codeline>
<codeline lineno="1343"><highlight class="normal"><sp/><sp/>uint32_t<sp/>bucketsCount<sp/>=<sp/>nextPowerOfTwo(vt.<ref refid="structsemicooked_1_1Variants_1a5643b133654063957c7b16ab67842bfc" kindref="member">subintervals_by_interval</ref>.size());</highlight></codeline>
<codeline lineno="1344"><highlight class="normal"><sp/><sp/>shaders_dump.intervalInfosBuckets.resize(bucketsCount);</highlight></codeline>
<codeline lineno="1345"><highlight class="normal"></highlight></codeline>
<codeline lineno="1346"><highlight class="normal"><sp/><sp/>dag::Vector&lt;uint32_t&gt;<sp/>intervalNameHashes(vt.<ref refid="structsemicooked_1_1Variants_1a5643b133654063957c7b16ab67842bfc" kindref="member">subintervals_by_interval</ref>.size());</highlight></codeline>
<codeline lineno="1347"><highlight class="normal"><sp/><sp/>eastl::unordered_map&lt;uint32_t,<sp/>bindump::StrHolder&lt;&gt;<sp/>&amp;&gt;<sp/>intervalNameUniqueHashes;</highlight></codeline>
<codeline lineno="1348"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>vt.<ref refid="structsemicooked_1_1Variants_1a5643b133654063957c7b16ab67842bfc" kindref="member">subintervals_by_interval</ref>.size();<sp/>i++)</highlight></codeline>
<codeline lineno="1349"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1350"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(vt.<ref refid="structsemicooked_1_1Variants_1a4223a892ef4750ce1a17fe4492a94ab8" kindref="member">intervals</ref>[i].type<sp/>!=<sp/>shader_layout::Interval&lt;&gt;::TYPE_GLOBAL_INTERVAL)</highlight></codeline>
<codeline lineno="1351"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1352"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;name<sp/>=<sp/>var_names[vt.<ref refid="structsemicooked_1_1Variants_1a4223a892ef4750ce1a17fe4492a94ab8" kindref="member">intervals</ref>[i].nameId];</highlight></codeline>
<codeline lineno="1353"><highlight class="normal"><sp/><sp/><sp/><sp/>intervalNameHashes[i]<sp/>=<sp/>mem_hash_fnv1&lt;32&gt;(name.c_str(),<sp/>name.length());</highlight></codeline>
<codeline lineno="1354"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(intervalNameHashes[i]<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="1355"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="shLog_8cpp_1a2926179632c7c86265007652d3d30b14" kindref="member">sh_debug</ref>(<ref refid="shLog_8h_1a66042048eb3ce30a1dccb2ebf8c2fd5caae3b70b41400c8a36e8a094ac1dbe43c" kindref="member">SHLOG_ERROR</ref>,<sp/></highlight><highlight class="stringliteral">&quot;The<sp/>hash<sp/>is<sp/>zero<sp/>for<sp/>the<sp/>interval<sp/>&apos;%s&apos;,<sp/>try<sp/>renaming<sp/>it&quot;</highlight><highlight class="normal">,<sp/>name.c_str());</highlight></codeline>
<codeline lineno="1356"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>[it,<sp/>inserted]<sp/>=<sp/>intervalNameUniqueHashes.emplace(intervalNameHashes[i],<sp/>name);</highlight></codeline>
<codeline lineno="1357"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!inserted)</highlight></codeline>
<codeline lineno="1358"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="shLog_8cpp_1a2926179632c7c86265007652d3d30b14" kindref="member">sh_debug</ref>(<ref refid="shLog_8h_1a66042048eb3ce30a1dccb2ebf8c2fd5caae3b70b41400c8a36e8a094ac1dbe43c" kindref="member">SHLOG_ERROR</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Hash<sp/>collision<sp/>detected<sp/>for<sp/>the<sp/>intervals<sp/>&apos;%s&apos;<sp/>and<sp/>&apos;%s&apos;,<sp/>try<sp/>renaming<sp/>the<sp/>intervals&quot;</highlight><highlight class="normal">,<sp/>name.c_str(),</highlight></codeline>
<codeline lineno="1359"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>it-&gt;second.c_str());</highlight></codeline>
<codeline lineno="1360"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1361"><highlight class="normal"></highlight></codeline>
<codeline lineno="1362"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>bucket<sp/>=<sp/>0;<sp/>bucket<sp/>&lt;<sp/>bucketsCount;<sp/>bucket++)</highlight></codeline>
<codeline lineno="1363"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1364"><highlight class="normal"><sp/><sp/><sp/><sp/>dag::Vector&lt;uint32_t&gt;<sp/>hashes;</highlight></codeline>
<codeline lineno="1365"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(uint32_t<sp/>hash<sp/>:<sp/>intervalNameHashes)</highlight></codeline>
<codeline lineno="1366"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1367"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(hash<sp/>!=<sp/>0<sp/>&amp;&amp;<sp/>hash<sp/>%<sp/>bucketsCount<sp/>==<sp/>bucket)</highlight></codeline>
<codeline lineno="1368"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hashes.emplace_back(hash);</highlight></codeline>
<codeline lineno="1369"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1370"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(hashes.empty())</highlight></codeline>
<codeline lineno="1371"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1372"><highlight class="normal"></highlight></codeline>
<codeline lineno="1373"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>tableSize<sp/>=<sp/>nextPowerOfTwo(hashes.size());</highlight></codeline>
<codeline lineno="1374"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>uint32_t<sp/>MAX_TABLE_SIZE<sp/>=<sp/>16;</highlight></codeline>
<codeline lineno="1375"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;<sp/>tableSize<sp/>&lt;=<sp/>MAX_TABLE_SIZE;<sp/>tableSize<sp/>*=<sp/>2)</highlight></codeline>
<codeline lineno="1376"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1377"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>[table,<sp/>shift]<sp/>=<sp/>createHashTable(hashes,<sp/>tableSize,<sp/>0,<sp/>createHashTable);</highlight></codeline>
<codeline lineno="1378"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!table.empty())</highlight></codeline>
<codeline lineno="1379"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1380"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>shaders_dump.intervalInfosBuckets[bucket].hashShift<sp/>=<sp/>shift;</highlight></codeline>
<codeline lineno="1381"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>shaders_dump.intervalInfosBuckets[bucket].intervalInfoByHash.resize(table.size());</highlight></codeline>
<codeline lineno="1382"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1383"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1384"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1385"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(tableSize<sp/>&gt;<sp/>MAX_TABLE_SIZE)</highlight></codeline>
<codeline lineno="1386"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1387"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="shLog_8cpp_1a2926179632c7c86265007652d3d30b14" kindref="member">sh_debug</ref>(<ref refid="shLog_8h_1a66042048eb3ce30a1dccb2ebf8c2fd5caae3b70b41400c8a36e8a094ac1dbe43c" kindref="member">SHLOG_ERROR</ref>,<sp/></highlight><highlight class="stringliteral">&quot;The<sp/>hash<sp/>table<sp/>for<sp/>intervals<sp/>is<sp/>too<sp/>large<sp/>(bucket<sp/>size<sp/>%i<sp/>for<sp/>%i<sp/>hashes),<sp/>try<sp/>renaming<sp/>the<sp/>intervals&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1388"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tableSize,<sp/>hashes.size());</highlight></codeline>
<codeline lineno="1389"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1390"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1391"><highlight class="normal"></highlight></codeline>
<codeline lineno="1392"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>vt.<ref refid="structsemicooked_1_1Variants_1a5643b133654063957c7b16ab67842bfc" kindref="member">subintervals_by_interval</ref>.size();<sp/>i++)</highlight></codeline>
<codeline lineno="1393"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1394"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(intervalNameHashes[i]<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="1395"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1396"><highlight class="normal"></highlight></codeline>
<codeline lineno="1397"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;info<sp/>=<sp/>shaders_dump.getIntervalInfoByHash(intervalNameHashes[i]);</highlight></codeline>
<codeline lineno="1398"><highlight class="normal"><sp/><sp/><sp/><sp/>G_ASSERT(info.intervalId<sp/>==<sp/>0);</highlight></codeline>
<codeline lineno="1399"><highlight class="normal"></highlight></codeline>
<codeline lineno="1400"><highlight class="normal"><sp/><sp/><sp/><sp/>dag::Vector&lt;uint32_t&gt;<sp/>hashes;</highlight></codeline>
<codeline lineno="1401"><highlight class="normal"><sp/><sp/><sp/><sp/>eastl::unordered_map&lt;uint32_t,<sp/>bindump::StrHolder&lt;&gt;<sp/>&amp;&gt;<sp/>uniqueHashes;</highlight></codeline>
<codeline lineno="1402"><highlight class="normal"><sp/><sp/><sp/><sp/>hashes.reserve(vt.<ref refid="structsemicooked_1_1Variants_1a5643b133654063957c7b16ab67842bfc" kindref="member">subintervals_by_interval</ref>[i].size());</highlight></codeline>
<codeline lineno="1403"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;subinterval<sp/>:<sp/>vt.subintervals_by_interval[i])</highlight></codeline>
<codeline lineno="1404"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1405"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>hashes.emplace_back(mem_hash_fnv1&lt;32&gt;(subinterval.c_str(),<sp/>subinterval.length()));</highlight></codeline>
<codeline lineno="1406"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>[it,<sp/>inserted]<sp/>=<sp/>uniqueHashes.emplace(hashes.back(),<sp/>subinterval);</highlight></codeline>
<codeline lineno="1407"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!inserted)</highlight></codeline>
<codeline lineno="1408"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1409"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="shLog_8cpp_1a2926179632c7c86265007652d3d30b14" kindref="member">sh_debug</ref>(<ref refid="shLog_8h_1a66042048eb3ce30a1dccb2ebf8c2fd5caae3b70b41400c8a36e8a094ac1dbe43c" kindref="member">SHLOG_ERROR</ref>,</highlight></codeline>
<codeline lineno="1410"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Hash<sp/>collision<sp/>detected<sp/>for<sp/>the<sp/>interval<sp/>&apos;%s&apos;,<sp/>subintervals<sp/>&apos;%s&apos;<sp/>and<sp/>&apos;%s&apos;,<sp/>try<sp/>renaming<sp/>the<sp/>subintervals&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1411"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var_names[vt.<ref refid="structsemicooked_1_1Variants_1a4223a892ef4750ce1a17fe4492a94ab8" kindref="member">intervals</ref>[i].nameId].c_str(),<sp/>subinterval.c_str(),<sp/>it-&gt;second.c_str());</highlight></codeline>
<codeline lineno="1412"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1413"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1414"><highlight class="normal"></highlight></codeline>
<codeline lineno="1415"><highlight class="normal"><sp/><sp/><sp/><sp/>info.intervalId<sp/>=<sp/>i;</highlight></codeline>
<codeline lineno="1416"><highlight class="normal"><sp/><sp/><sp/><sp/>info.intervalNameHash<sp/>=<sp/>intervalNameHashes[i];</highlight></codeline>
<codeline lineno="1417"><highlight class="normal"><sp/><sp/><sp/><sp/>info.subintervals<sp/>=<sp/>vt.<ref refid="structsemicooked_1_1Variants_1a5643b133654063957c7b16ab67842bfc" kindref="member">subintervals_by_interval</ref>[i];</highlight></codeline>
<codeline lineno="1418"><highlight class="normal"><sp/><sp/><sp/><sp/>info.subintervalHashes<sp/>=<sp/>hashes;</highlight></codeline>
<codeline lineno="1419"><highlight class="normal"></highlight></codeline>
<codeline lineno="1420"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>tableSize<sp/>=<sp/>nextPowerOfTwo(hashes.size());</highlight></codeline>
<codeline lineno="1421"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>uint32_t<sp/>MAX_TABLE_SIZE<sp/>=<sp/>256;</highlight></codeline>
<codeline lineno="1422"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;<sp/>tableSize<sp/>&lt;=<sp/>MAX_TABLE_SIZE;<sp/>tableSize<sp/>*=<sp/>2)</highlight></codeline>
<codeline lineno="1423"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1424"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>[table,<sp/>shift]<sp/>=<sp/>createHashTable(hashes,<sp/>tableSize,<sp/>0,<sp/>createHashTable);</highlight></codeline>
<codeline lineno="1425"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!table.empty())</highlight></codeline>
<codeline lineno="1426"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1427"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dag::Vector&lt;uint8_t&gt;<sp/>values;</highlight></codeline>
<codeline lineno="1428"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(uint32_t<sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal"><sp/>:<sp/>table)</highlight></codeline>
<codeline lineno="1429"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1430"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/>index<sp/>=<sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal"><sp/>==<sp/>0<sp/>?<sp/>0<sp/>:<sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal"><sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="1431"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>values.emplace_back(index);</highlight></codeline>
<codeline lineno="1432"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1433"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>info.subintervalIndexByHash<sp/>=<sp/>values;</highlight></codeline>
<codeline lineno="1434"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>info.hashShift<sp/>=<sp/>shift;</highlight></codeline>
<codeline lineno="1435"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1436"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1437"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1438"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(tableSize<sp/>&gt;<sp/>MAX_TABLE_SIZE)</highlight></codeline>
<codeline lineno="1439"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1440"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="shLog_8cpp_1a2926179632c7c86265007652d3d30b14" kindref="member">sh_debug</ref>(<ref refid="shLog_8h_1a66042048eb3ce30a1dccb2ebf8c2fd5caae3b70b41400c8a36e8a094ac1dbe43c" kindref="member">SHLOG_ERROR</ref>,</highlight></codeline>
<codeline lineno="1441"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;The<sp/>hash<sp/>table<sp/>for<sp/>interval<sp/>&apos;%s&apos;<sp/>is<sp/>too<sp/>large<sp/>(size<sp/>%i<sp/>for<sp/>%i<sp/>subintervals),<sp/>try<sp/>renaming<sp/>the<sp/>subintervals&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1442"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var_names[vt.<ref refid="structsemicooked_1_1Variants_1a4223a892ef4750ce1a17fe4492a94ab8" kindref="member">intervals</ref>[i].nameId].c_str(),<sp/>tableSize,<sp/>hashes.size());</highlight></codeline>
<codeline lineno="1443"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1444"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1445"><highlight class="normal"></highlight></codeline>
<codeline lineno="1446"><highlight class="normal"><sp/><sp/>shaders_dump.iValStorage<sp/>=<sp/>eastl::move(iValStorage);</highlight></codeline>
<codeline lineno="1447"><highlight class="normal"><sp/><sp/>shaders_dump.intervals<sp/>=<sp/>make_span(vt.<ref refid="structsemicooked_1_1Variants_1a4223a892ef4750ce1a17fe4492a94ab8" kindref="member">intervals</ref>);</highlight></codeline>
<codeline lineno="1448"><highlight class="normal"></highlight></codeline>
<codeline lineno="1449"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>write<sp/>data<sp/>accessed<sp/>by<sp/>variant<sp/>table</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1450"><highlight class="normal"><sp/><sp/>shaders_dump.vtPcsStorage<sp/>=<sp/>eastl::move(vt.<ref refid="structsemicooked_1_1Variants_1abf79dc07be19526795b474f05a7156d3" kindref="member">vtPcsStorage</ref>.getVecHolder());</highlight></codeline>
<codeline lineno="1451"><highlight class="normal"><sp/><sp/>shaders_dump.vtQmapStorage<sp/>=<sp/>eastl::move(vt.<ref refid="structsemicooked_1_1Variants_1a1a27d308dbac0626042543bf50b6019d" kindref="member">vtQmapStorage</ref>.getVecHolder());</highlight></codeline>
<codeline lineno="1452"><highlight class="normal"><sp/><sp/>shaders_dump.vtLmapStorage<sp/>=<sp/>eastl::move(vt.<ref refid="structsemicooked_1_1Variants_1ae252c81018e98f87369ff5fd9953f977" kindref="member">vtLmapStorage</ref>.getVecHolder());</highlight></codeline>
<codeline lineno="1453"><highlight class="normal"></highlight></codeline>
<codeline lineno="1454"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>write<sp/>storage<sp/>sizes<sp/>for<sp/>vprId/fshId</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1455"><highlight class="normal"><sp/><sp/>shaders_dump.vprCount<sp/>=<sp/>stor.<ref refid="structShaderTargetStorage_1a1ecbcf175060ab78685c7bfb1ada6d3f" kindref="member">ldShVpr</ref>.size();</highlight></codeline>
<codeline lineno="1456"><highlight class="normal"><sp/><sp/>shaders_dump.fshCount<sp/>=<sp/>stor.<ref refid="structShaderTargetStorage_1a515df00f7403d2a15584b3a8e4bb691d" kindref="member">ldShFsh</ref>.size();</highlight></codeline>
<codeline lineno="1457"><highlight class="normal"></highlight></codeline>
<codeline lineno="1458"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>write<sp/>global<sp/>vars<sp/>data</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1459"><highlight class="normal"><sp/><sp/>shaders_dump.gvMap<sp/>=<sp/>make_span(gvmap);</highlight></codeline>
<codeline lineno="1460"><highlight class="normal"></highlight></codeline>
<codeline lineno="1461"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>write<sp/>vars<sp/>storage</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1462"><highlight class="normal"><sp/><sp/>shaders_dump.varStorage<sp/>=<sp/>eastl::move(vars.<ref refid="structsemicooked_1_1Variables_1a0cb15dc49e3a72e065e2002852714eda" kindref="member">storage</ref>);</highlight></codeline>
<codeline lineno="1463"><highlight class="normal"><sp/><sp/>shaders_dump.variables<sp/>=<sp/>vars.<ref refid="structsemicooked_1_1Variables_1ad1a852a79cf94b4894aec56fadaaa20a" kindref="member">vars</ref>;</highlight></codeline>
<codeline lineno="1464"><highlight class="normal"><sp/><sp/>shaders_dump.globVars.v<sp/>=<sp/>vars.<ref refid="structsemicooked_1_1Variables_1aebd08ea6cdd24c727edcdbe144657b4b" kindref="member">varLists</ref>[0].v;</highlight></codeline>
<codeline lineno="1465"><highlight class="normal"></highlight></codeline>
<codeline lineno="1466"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>write<sp/>strings</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1467"><highlight class="normal"><sp/><sp/>shaders_dump.varMap<sp/>=<sp/>var_names;</highlight></codeline>
<codeline lineno="1468"><highlight class="normal"><sp/><sp/>shaders_dump.shaderNameMap<sp/>=<sp/>shader_names;</highlight></codeline>
<codeline lineno="1469"><highlight class="normal"><sp/><sp/>shaders_dump.blockNameMap<sp/>=<sp/>blk_names;</highlight></codeline>
<codeline lineno="1470"><highlight class="normal"></highlight></codeline>
<codeline lineno="1471"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>write<sp/>shader<sp/>blocks<sp/>test<sp/>codes</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1472"><highlight class="normal"><sp/><sp/>shaders_dump.blkPartSign<sp/>=<sp/>eastl::move(blkPartSign.getVecHolder());</highlight></codeline>
<codeline lineno="1473"><highlight class="normal"><sp/><sp/>shaders_dump.globalSuppBlkSign<sp/>=<sp/>eastl::move(globalSuppBlkSign.getVecHolder());</highlight></codeline>
<codeline lineno="1474"><highlight class="normal"></highlight></codeline>
<codeline lineno="1475"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>write<sp/>shader<sp/>blocks</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1476"><highlight class="normal"><sp/><sp/>shaders_dump.blocks.resize(<ref refid="namedConst_8h_1ad736eaf66e63df63fdef8ab710d6f88e" kindref="member">SHADER_BLOCK_HIER_LEVELS</ref><sp/>+<sp/>blocks.size());</highlight></codeline>
<codeline lineno="1477"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/><ref refid="namedConst_8h_1ad736eaf66e63df63fdef8ab710d6f88e" kindref="member">SHADER_BLOCK_HIER_LEVELS</ref>;<sp/>i++)</highlight></codeline>
<codeline lineno="1478"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1479"><highlight class="normal"><sp/><sp/><sp/><sp/>shaders_dump.blocks[i].uidMask<sp/>=<sp/>hardcodedBlk[size_t(hardcodedBlkLayer[i])].<ref refid="structShaderStateBlock_1_1BuildTimeData_1a5f1b5c86064dc9718210739a768dca7f" kindref="member">uidMask</ref>;</highlight></codeline>
<codeline lineno="1480"><highlight class="normal"><sp/><sp/><sp/><sp/>shaders_dump.blocks[i].uidVal<sp/>=<sp/>hardcodedBlk[size_t(hardcodedBlkLayer[i])].<ref refid="structShaderStateBlock_1_1BuildTimeData_1a0bd87a2635b1c508da73fc9196415c6c" kindref="member">uidVal</ref>;</highlight></codeline>
<codeline lineno="1481"><highlight class="normal"><sp/><sp/><sp/><sp/>shaders_dump.blocks[i].stcodeId<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="1482"><highlight class="normal"><sp/><sp/><sp/><sp/>shaders_dump.blocks[i].cppStcodeId<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="1483"><highlight class="normal"><sp/><sp/><sp/><sp/>shaders_dump.blocks[i].nameId<sp/>=<sp/>i;</highlight></codeline>
<codeline lineno="1484"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1485"><highlight class="normal"></highlight></codeline>
<codeline lineno="1486"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>blocks.size();<sp/>i++)</highlight></codeline>
<codeline lineno="1487"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1488"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classShaderStateBlock" kindref="compound">ShaderStateBlock</ref><sp/>&amp;b<sp/>=<sp/>*blocks[i];</highlight></codeline>
<codeline lineno="1489"><highlight class="normal"></highlight></codeline>
<codeline lineno="1490"><highlight class="normal"><sp/><sp/><sp/><sp/>shaders_dump.blocks[i<sp/>+<sp/><ref refid="namedConst_8h_1ad736eaf66e63df63fdef8ab710d6f88e" kindref="member">SHADER_BLOCK_HIER_LEVELS</ref>].uidMask<sp/>=<sp/>b.btd.uidMask;</highlight></codeline>
<codeline lineno="1491"><highlight class="normal"><sp/><sp/><sp/><sp/>shaders_dump.blocks[i<sp/>+<sp/><ref refid="namedConst_8h_1ad736eaf66e63df63fdef8ab710d6f88e" kindref="member">SHADER_BLOCK_HIER_LEVELS</ref>].uidVal<sp/>=<sp/>b.btd.uidVal;</highlight></codeline>
<codeline lineno="1492"><highlight class="normal"><sp/><sp/><sp/><sp/>shaders_dump.blocks[i<sp/>+<sp/><ref refid="namedConst_8h_1ad736eaf66e63df63fdef8ab710d6f88e" kindref="member">SHADER_BLOCK_HIER_LEVELS</ref>].suppBlkMask<sp/>=<sp/>b.btd.suppMask;</highlight></codeline>
<codeline lineno="1493"><highlight class="normal"><sp/><sp/><sp/><sp/>shaders_dump.blocks[i<sp/>+<sp/><ref refid="namedConst_8h_1ad736eaf66e63df63fdef8ab710d6f88e" kindref="member">SHADER_BLOCK_HIER_LEVELS</ref>].<ref refid="classShaderStateBlock_1ad840fa4cfc4c554037e143bb93fd056b" kindref="member">stcodeId</ref><sp/>=<sp/>b.<ref refid="classShaderStateBlock_1ad840fa4cfc4c554037e143bb93fd056b" kindref="member">stcodeId</ref>;</highlight></codeline>
<codeline lineno="1494"><highlight class="normal"><sp/><sp/><sp/><sp/>shaders_dump.blocks[i<sp/>+<sp/><ref refid="namedConst_8h_1ad736eaf66e63df63fdef8ab710d6f88e" kindref="member">SHADER_BLOCK_HIER_LEVELS</ref>].cppStcodeId<sp/>=<sp/>b.<ref refid="classShaderStateBlock_1a1ba5283efd19f83cb3c8ee1211b0197f" kindref="member">cppStcodeId</ref>;</highlight></codeline>
<codeline lineno="1495"><highlight class="normal"><sp/><sp/><sp/><sp/>shaders_dump.blocks[i<sp/>+<sp/><ref refid="namedConst_8h_1ad736eaf66e63df63fdef8ab710d6f88e" kindref="member">SHADER_BLOCK_HIER_LEVELS</ref>].nameId<sp/>=<sp/>i<sp/>+<sp/><ref refid="namedConst_8h_1ad736eaf66e63df63fdef8ab710d6f88e" kindref="member">SHADER_BLOCK_HIER_LEVELS</ref>;</highlight></codeline>
<codeline lineno="1496"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(b.btd.suppListOfs<sp/>&gt;=<sp/>0)</highlight></codeline>
<codeline lineno="1497"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>shaders_dump.blocks[i<sp/>+<sp/><ref refid="namedConst_8h_1ad736eaf66e63df63fdef8ab710d6f88e" kindref="member">SHADER_BLOCK_HIER_LEVELS</ref>].suppBlockUid<sp/>=<sp/>shaders_dump.blkPartSign.getElementAddress(b.btd.suppListOfs);</highlight></codeline>
<codeline lineno="1498"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1499"><highlight class="normal"></highlight></codeline>
<codeline lineno="1500"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1501"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>samplers<sp/>=<sp/>targetCtx.<ref refid="classshc_1_1TargetContext_1a752f5f70f8d04a70f87a34102a85f83a" kindref="member">samplers</ref>().<ref refid="classSamplerTable_1a4385cbae1f97351063aa29390f99d48c" kindref="member">releaseSamplers</ref>();</highlight></codeline>
<codeline lineno="1502"><highlight class="normal"><sp/><sp/><sp/><sp/>shaders_dump.samplers.resize(samplers.size());</highlight></codeline>
<codeline lineno="1503"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>smp_id<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1504"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;s<sp/>:<sp/>samplers)</highlight></codeline>
<codeline lineno="1505"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>shaders_dump.samplers[smp_id++]<sp/>=<sp/>s.mSamplerInfo;</highlight></codeline>
<codeline lineno="1506"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1507"><highlight class="normal"></highlight></codeline>
<codeline lineno="1508"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>write<sp/>shader<sp/>classes</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1509"><highlight class="normal"><sp/><sp/>SharedStorage&lt;int&gt;<sp/>shInitCodeStorage;</highlight></codeline>
<codeline lineno="1510"><highlight class="normal"><sp/><sp/>shaders_dump.classes.resize(dumpClasses.size());</highlight></codeline>
<codeline lineno="1511"><highlight class="normal"><sp/><sp/>shaders_dump.messagesByShclass.resize(dumpClasses.size());</highlight></codeline>
<codeline lineno="1512"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>dumpClasses.size();<sp/>i++)</highlight></codeline>
<codeline lineno="1513"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1514"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structsemicooked_1_1ShaderCodes" kindref="compound">ShaderCodes</ref><sp/>&amp;code<sp/>=<sp/>dumpClasses[i].<ref refid="structsemicooked_1_1ShaderCodes_1a80b2344fa6218e56466c40d67c5004aa" kindref="member">codes</ref>;</highlight></codeline>
<codeline lineno="1515"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;out_c<sp/>=<sp/>shaders_dump.classes[i];</highlight></codeline>
<codeline lineno="1516"><highlight class="normal"><sp/><sp/><sp/><sp/>out_c<sp/>=<sp/>dumpClasses[i].shClass;</highlight></codeline>
<codeline lineno="1517"><highlight class="normal"></highlight></codeline>
<codeline lineno="1518"><highlight class="normal"><sp/><sp/><sp/><sp/>out_c.shrefStorage<sp/>=<sp/>eastl::move(code.<ref refid="structsemicooked_1_1ShaderCodes_1ad1124941d048e0384e8f14b8a390b026" kindref="member">shrefStorage</ref>.getVecHolder());</highlight></codeline>
<codeline lineno="1519"><highlight class="normal"></highlight></codeline>
<codeline lineno="1520"><highlight class="normal"><sp/><sp/><sp/><sp/>out_c.chanStorage<sp/>=<sp/>eastl::move(code.<ref refid="structsemicooked_1_1ShaderCodes_1a557e7e08893ab2a8467a59b293e8ea5a" kindref="member">chanStorage</ref>.getVecHolder());</highlight></codeline>
<codeline lineno="1521"><highlight class="normal"><sp/><sp/><sp/><sp/>out_c.icStorage<sp/>=<sp/>eastl::move(code.<ref refid="structsemicooked_1_1ShaderCodes_1a00c7307e7491c15b80f4871daca952b3" kindref="member">icStorage</ref>.getVecHolder());</highlight></codeline>
<codeline lineno="1522"><highlight class="normal"><sp/><sp/><sp/><sp/>out_c.svStorage<sp/>=<sp/>eastl::move(code.<ref refid="structsemicooked_1_1ShaderCodes_1a25ee9dd2e234ddb1163149c09c988013" kindref="member">svStorage</ref>.getVecHolder());</highlight></codeline>
<codeline lineno="1523"><highlight class="normal"><sp/><sp/><sp/><sp/>out_c.localVars.v<sp/>=<sp/>vars.<ref refid="structsemicooked_1_1Variables_1aebd08ea6cdd24c727edcdbe144657b4b" kindref="member">varLists</ref>[i<sp/>+<sp/>1].v;</highlight></codeline>
<codeline lineno="1524"><highlight class="normal"><sp/><sp/><sp/><sp/>out_c.code<sp/>=<sp/>make_span(code.<ref refid="structsemicooked_1_1ShaderCodes_1a80b2344fa6218e56466c40d67c5004aa" kindref="member">codes</ref>);</highlight></codeline>
<codeline lineno="1525"><highlight class="normal"><sp/><sp/><sp/><sp/>out_c.name<sp/>=<sp/>shaders_dump.shaderNameMap[out_c.nameId].getElementAddress(0);</highlight></codeline>
<codeline lineno="1526"><highlight class="normal"><sp/><sp/><sp/><sp/>out_c.name.setCount(shaders_dump.shaderNameMap[out_c.nameId].size());</highlight></codeline>
<codeline lineno="1527"><highlight class="normal"></highlight></codeline>
<codeline lineno="1528"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="namespaceshc_1a47efde6b3d493adbe2119a5593807d36" kindref="member">shc::config</ref>().addTextureType<sp/>&amp;&amp;<sp/>!code.<ref refid="structsemicooked_1_1ShaderCodes_1ad1505da66ee86b2aa941e40e197f93d4" kindref="member">staticTextureTypesByCode</ref>.empty())</highlight></codeline>
<codeline lineno="1529"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>out_c.staticTextureTypeBySlot<sp/>=<sp/>code.<ref refid="structsemicooked_1_1ShaderCodes_1ad1505da66ee86b2aa941e40e197f93d4" kindref="member">staticTextureTypesByCode</ref>.front();</highlight></codeline>
<codeline lineno="1530"><highlight class="normal"></highlight></codeline>
<codeline lineno="1531"><highlight class="normal"><sp/><sp/><sp/><sp/>shInitCodeStorage.getRef(out_c.initCode,<sp/>stor.<ref refid="structShaderTargetStorage_1abfaaaacd1519890b902eb99112e8b850" kindref="member">shaderClass</ref>[i]-&gt;shInitCode.data(),<sp/>stor.<ref refid="structShaderTargetStorage_1abfaaaacd1519890b902eb99112e8b850" kindref="member">shaderClass</ref>[i]-&gt;shInitCode.size(),<sp/>8);</highlight></codeline>
<codeline lineno="1532"><highlight class="normal"></highlight></codeline>
<codeline lineno="1533"><highlight class="normal"><sp/><sp/><sp/><sp/>shaders_dump.messagesByShclass[i].resize(stor.<ref refid="structShaderTargetStorage_1abfaaaacd1519890b902eb99112e8b850" kindref="member">shaderClass</ref>[i]-&gt;messages.size());</highlight></codeline>
<codeline lineno="1534"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>stor.<ref refid="structShaderTargetStorage_1abfaaaacd1519890b902eb99112e8b850" kindref="member">shaderClass</ref>[i]-&gt;messages.size();<sp/>j++)</highlight></codeline>
<codeline lineno="1535"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>shaders_dump.messagesByShclass[i][j]<sp/>=<sp/>stor.<ref refid="structShaderTargetStorage_1abfaaaacd1519890b902eb99112e8b850" kindref="member">shaderClass</ref>[i]-&gt;messages[j];</highlight></codeline>
<codeline lineno="1536"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1537"><highlight class="normal"><sp/><sp/>shaders_dump.shInitCodeStorage<sp/>=<sp/>eastl::move(shInitCodeStorage.getVecHolder());</highlight></codeline>
<codeline lineno="1538"><highlight class="normal"></highlight></codeline>
<codeline lineno="1539"><highlight class="normal"><sp/><sp/><ref refid="shLog_8cpp_1a2926179632c7c86265007652d3d30b14" kindref="member">sh_debug</ref>(<ref refid="shLog_8h_1a66042048eb3ce30a1dccb2ebf8c2fd5ca5395b0c35e96d97ae9ac7f83b0665310" kindref="member">SHLOG_NORMAL</ref>,<sp/></highlight><highlight class="stringliteral">&quot;[INFO]<sp/>Built<sp/>bindump<sp/>data<sp/>in<sp/>%gms&quot;</highlight><highlight class="normal">,<sp/>get_time_usec(reft)<sp/>/<sp/>1000.);</highlight></codeline>
<codeline lineno="1540"><highlight class="normal"></highlight></codeline>
<codeline lineno="1541"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>write<sp/>vpr/fsh<sp/>data</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1542"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>1)<sp/>collecting<sp/>all<sp/>transcoded<sp/>shader<sp/>codes<sp/>into<sp/>one<sp/>container</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1543"><highlight class="normal"></highlight></codeline>
<codeline lineno="1544"><highlight class="normal"><sp/><sp/>reft<sp/>=<sp/>ref_time_ticks();</highlight></codeline>
<codeline lineno="1545"><highlight class="normal"></highlight></codeline>
<codeline lineno="1546"><highlight class="normal"><sp/><sp/>dag::Vector&lt;dag::ConstSpan&lt;uint32_t&gt;&gt;<sp/><ref refid="namespaceshaders" kindref="compound">shaders</ref>(stor.<ref refid="structShaderTargetStorage_1a1ecbcf175060ab78685c7bfb1ada6d3f" kindref="member">ldShVpr</ref>.size()<sp/>+<sp/>stor.<ref refid="structShaderTargetStorage_1a515df00f7403d2a15584b3a8e4bb691d" kindref="member">ldShFsh</ref>.size());</highlight></codeline>
<codeline lineno="1547"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>stor.<ref refid="structShaderTargetStorage_1a1ecbcf175060ab78685c7bfb1ada6d3f" kindref="member">ldShVpr</ref>.size();<sp/>i++)</highlight></codeline>
<codeline lineno="1548"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1549"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>combi_type<sp/>=<sp/>stor.<ref refid="structShaderTargetStorage_1a1ecbcf175060ab78685c7bfb1ada6d3f" kindref="member">ldShVpr</ref>[i].size()<sp/>&gt;<sp/>4<sp/>&amp;&amp;<sp/>stor.<ref refid="structShaderTargetStorage_1a1ecbcf175060ab78685c7bfb1ada6d3f" kindref="member">ldShVpr</ref>[i][0]<sp/>==<sp/>_MAKE4C(</highlight><highlight class="stringliteral">&apos;DX11&apos;</highlight><highlight class="normal">)<sp/>&amp;&amp;<sp/>stor.<ref refid="structShaderTargetStorage_1a1ecbcf175060ab78685c7bfb1ada6d3f" kindref="member">ldShVpr</ref>[i][4]<sp/>==<sp/>_MAKE4C(</highlight><highlight class="stringliteral">&apos;DX11&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1550"><highlight class="normal"><sp/><sp/><sp/><sp/>dag::ConstSpan&lt;uint32_t&gt;<sp/>sh<sp/>=<sp/><ref refid="transcodeShader_8cpp_1a9ac3fb74a20f910c49c481260f200e40" kindref="member">::transcode_vertex_shader</ref>(stor.<ref refid="structShaderTargetStorage_1a1ecbcf175060ab78685c7bfb1ada6d3f" kindref="member">ldShVpr</ref>[i]);</highlight></codeline>
<codeline lineno="1551"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceshaders" kindref="compound">shaders</ref>[i]<sp/>=<sp/>sh;</highlight></codeline>
<codeline lineno="1552"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!combi_type)</highlight></codeline>
<codeline lineno="1553"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>vpr_bytes<sp/>+=<sp/>data_size(sh);</highlight></codeline>
<codeline lineno="1554"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1555"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1556"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>vpr_bytes<sp/>+=<sp/>sh[4]<sp/>*<sp/>4;</highlight></codeline>
<codeline lineno="1557"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>hs_ds_gs_bytes<sp/>+=<sp/>(sh[5]<sp/>+<sp/>sh[6]<sp/>+<sp/>sh[7])<sp/>*<sp/>4;</highlight></codeline>
<codeline lineno="1558"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1559"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1560"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>stor.<ref refid="structShaderTargetStorage_1a515df00f7403d2a15584b3a8e4bb691d" kindref="member">ldShFsh</ref>.size();<sp/>i++)</highlight></codeline>
<codeline lineno="1561"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1562"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>type<sp/>=<sp/>stor.<ref refid="structShaderTargetStorage_1a515df00f7403d2a15584b3a8e4bb691d" kindref="member">ldShFsh</ref>[i].size()<sp/>?<sp/>stor.<ref refid="structShaderTargetStorage_1a515df00f7403d2a15584b3a8e4bb691d" kindref="member">ldShFsh</ref>[i][0]<sp/>:<sp/>0;</highlight></codeline>
<codeline lineno="1563"><highlight class="normal"><sp/><sp/><sp/><sp/>dag::ConstSpan&lt;uint32_t&gt;<sp/>sh<sp/>=<sp/><ref refid="transcodeShader_8cpp_1a0973956bfd1c50e1264f57992fc58a81" kindref="member">::transcode_pixel_shader</ref>(stor.<ref refid="structShaderTargetStorage_1a515df00f7403d2a15584b3a8e4bb691d" kindref="member">ldShFsh</ref>[i]);</highlight></codeline>
<codeline lineno="1564"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceshaders" kindref="compound">shaders</ref>[i<sp/>+<sp/>stor.<ref refid="structShaderTargetStorage_1a1ecbcf175060ab78685c7bfb1ada6d3f" kindref="member">ldShVpr</ref>.size()]<sp/>=<sp/>sh;</highlight></codeline>
<codeline lineno="1565"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(type<sp/>!=<sp/>_MAKE4C(</highlight><highlight class="stringliteral">&apos;D11c&apos;</highlight><highlight class="normal">))</highlight></codeline>
<codeline lineno="1566"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>fsh_bytes<sp/>+=<sp/>data_size(sh);</highlight></codeline>
<codeline lineno="1567"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1568"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cs_bytes<sp/>+=<sp/>data_size(sh);</highlight></codeline>
<codeline lineno="1569"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1570"><highlight class="normal"></highlight></codeline>
<codeline lineno="1571"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>_CROSS_TARGET_DX12</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1572"><highlight class="normal"><sp/><sp/>shaders_dump.shaderHashes.resize(<ref refid="namespaceshaders" kindref="compound">shaders</ref>.size());</highlight></codeline>
<codeline lineno="1573"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/><ref refid="namespaceshaders" kindref="compound">shaders</ref>.size();<sp/>i++)</highlight></codeline>
<codeline lineno="1574"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1575"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>*mapped<sp/>=<sp/>bindump::map&lt;::dxil::ShaderContainer&gt;((</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint8_t<sp/>*)<ref refid="namespaceshaders" kindref="compound">shaders</ref>[i].data());</highlight></codeline>
<codeline lineno="1576"><highlight class="normal"><sp/><sp/><sp/><sp/>shaders_dump.shaderHashes[i]<sp/>=<sp/>mapped-&gt;dataHash;</highlight></codeline>
<codeline lineno="1577"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1578"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1579"><highlight class="normal"></highlight></codeline>
<codeline lineno="1580"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>2)<sp/>rearranging<sp/>shaders<sp/>into<sp/>groups<sp/>and<sp/>creating<sp/>a<sp/>mapping<sp/>to<sp/>get<sp/>the<sp/>original<sp/>shader<sp/>by<sp/>index</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1581"><highlight class="normal"></highlight></codeline>
<codeline lineno="1582"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">GroupInfo</highlight></codeline>
<codeline lineno="1583"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1584"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>size<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1585"><highlight class="normal"><sp/><sp/><sp/><sp/>dag::Vector&lt;int&gt;<sp/>sh_ids;</highlight></codeline>
<codeline lineno="1586"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="1587"><highlight class="normal"></highlight></codeline>
<codeline lineno="1588"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>packGroups<sp/>=<sp/>(packing_flags<sp/>&amp;<sp/><ref refid="structBindumpPackingFlagsBits_1af6ce521b95d1ea33e3463753a874e8da" kindref="member">BindumpPackingFlagsBits::SHADER_GROUPS</ref>);</highlight></codeline>
<codeline lineno="1589"><highlight class="normal"></highlight></codeline>
<codeline lineno="1590"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>dictSizeBytes<sp/>=<sp/>packGroups<sp/>?<sp/><ref refid="namespaceshc_1a47efde6b3d493adbe2119a5593807d36" kindref="member">shc::config</ref>().<ref refid="structshc_1_1CompilerConfig_1a4290fd2d9d6d398410c276f59ca2b426" kindref="member">dictionarySizeInKb</ref><sp/>&lt;&lt;<sp/>10<sp/>:<sp/>0;</highlight></codeline>
<codeline lineno="1591"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>needToTrainDict<sp/>=<sp/>dictSizeBytes<sp/>&gt;<sp/>0;</highlight></codeline>
<codeline lineno="1592"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>groupThresholdBytes<sp/>=<sp/>packGroups<sp/>?<sp/><ref refid="namespaceshc_1a47efde6b3d493adbe2119a5593807d36" kindref="member">shc::config</ref>().<ref refid="structshc_1_1CompilerConfig_1aed1ba3b0ae73d6131eaa001213c6f678" kindref="member">shGroupSizeInKb</ref><sp/>&lt;&lt;<sp/>10<sp/>:<sp/>0;</highlight></codeline>
<codeline lineno="1593"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>packEachShaderIntoSeparateGroup<sp/>=<sp/>groupThresholdBytes<sp/>==<sp/>0;</highlight></codeline>
<codeline lineno="1594"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>groupCompressionLevel<sp/>=<sp/><ref refid="namespaceshc_1a47efde6b3d493adbe2119a5593807d36" kindref="member">shc::config</ref>().<ref refid="structshc_1_1CompilerConfig_1afb929004f50ede58325934b69b9d57e7" kindref="member">shGroupCompressionLevel</ref>;</highlight></codeline>
<codeline lineno="1595"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dumpCompressionLevel<sp/>=<sp/><ref refid="namespaceshc_1a47efde6b3d493adbe2119a5593807d36" kindref="member">shc::config</ref>().<ref refid="structshc_1_1CompilerConfig_1a9c99fa0fe1d7ce4437589196efc646da" kindref="member">shDumpCompressionLevel</ref>;</highlight></codeline>
<codeline lineno="1596"><highlight class="normal"></highlight></codeline>
<codeline lineno="1597"><highlight class="normal"><sp/><sp/>dag::Vector&lt;GroupInfo&gt;<sp/>groups;</highlight></codeline>
<codeline lineno="1598"><highlight class="normal"><sp/><sp/>groups.reserve(<ref refid="namespaceshaders" kindref="compound">shaders</ref>.size());</highlight></codeline>
<codeline lineno="1599"><highlight class="normal"><sp/><sp/>shaders_dump.shGroupsMapping.resize(<ref refid="namespaceshaders" kindref="compound">shaders</ref>.size());</highlight></codeline>
<codeline lineno="1600"><highlight class="normal"></highlight></codeline>
<codeline lineno="1601"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>sh<sp/>=<sp/>0;<sp/>sh<sp/>&lt;<sp/><ref refid="namespaceshaders" kindref="compound">shaders</ref>.size();<sp/>sh++)</highlight></codeline>
<codeline lineno="1602"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1603"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>index<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="1604"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!packEachShaderIntoSeparateGroup)</highlight></codeline>
<codeline lineno="1605"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1606"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>groups.size();<sp/>i++)</highlight></codeline>
<codeline lineno="1607"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(groups[i].size<sp/>+<sp/>data_size(<ref refid="namespaceshaders" kindref="compound">shaders</ref>[sh])<sp/>&lt;<sp/>groupThresholdBytes)</highlight></codeline>
<codeline lineno="1608"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1609"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>index<sp/>=<sp/>i;</highlight></codeline>
<codeline lineno="1610"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1611"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1612"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1613"><highlight class="normal"></highlight></codeline>
<codeline lineno="1614"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;group_elem<sp/>=<sp/>index<sp/>==<sp/>-1<sp/>?<sp/>groups.emplace_back()<sp/>:<sp/>groups[index];</highlight></codeline>
<codeline lineno="1615"><highlight class="normal"><sp/><sp/><sp/><sp/>shaders_dump.shGroupsMapping[sh].groupId<sp/>=<sp/>eastl::distance(groups.begin(),<sp/>&amp;group_elem);</highlight></codeline>
<codeline lineno="1616"><highlight class="normal"><sp/><sp/><sp/><sp/>shaders_dump.shGroupsMapping[sh].indexInGroup<sp/>=<sp/>group_elem.sh_ids.size();</highlight></codeline>
<codeline lineno="1617"><highlight class="normal"><sp/><sp/><sp/><sp/>group_elem.size<sp/>+=<sp/>data_size(<ref refid="namespaceshaders" kindref="compound">shaders</ref>[sh]);</highlight></codeline>
<codeline lineno="1618"><highlight class="normal"><sp/><sp/><sp/><sp/>group_elem.sh_ids.push_back(sh);</highlight></codeline>
<codeline lineno="1619"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1620"><highlight class="normal"></highlight></codeline>
<codeline lineno="1621"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>make_group<sp/>=<sp/>[&amp;<ref refid="namespaceshaders" kindref="compound">shaders</ref>](</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>GroupInfo<sp/>&amp;gi)<sp/>{</highlight></codeline>
<codeline lineno="1622"><highlight class="normal"><sp/><sp/><sp/><sp/>bindump::Master&lt;shader_layout::ShGroup&gt;<sp/>group;</highlight></codeline>
<codeline lineno="1623"><highlight class="normal"><sp/><sp/><sp/><sp/>group.shaders.resize(gi.sh_ids.size());</highlight></codeline>
<codeline lineno="1624"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>sh<sp/>=<sp/>0;<sp/>sh<sp/>&lt;<sp/>gi.sh_ids.size();<sp/>sh++)</highlight></codeline>
<codeline lineno="1625"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>group.shaders[sh]<sp/>=<sp/>make_span_const((</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint8_t<sp/>*)<ref refid="namespaceshaders" kindref="compound">shaders</ref>[gi.sh_ids[sh]].data(),<sp/>data_size(<ref refid="namespaceshaders" kindref="compound">shaders</ref>[gi.sh_ids[sh]]));</highlight></codeline>
<codeline lineno="1626"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>group;</highlight></codeline>
<codeline lineno="1627"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="1628"><highlight class="normal"></highlight></codeline>
<codeline lineno="1629"><highlight class="normal"><sp/><sp/><ref refid="shLog_8cpp_1a2926179632c7c86265007652d3d30b14" kindref="member">sh_debug</ref>(<ref refid="shLog_8h_1a66042048eb3ce30a1dccb2ebf8c2fd5ca5395b0c35e96d97ae9ac7f83b0665310" kindref="member">SHLOG_NORMAL</ref>,<sp/></highlight><highlight class="stringliteral">&quot;[INFO]<sp/>Collected<sp/>shader<sp/>groups<sp/>in<sp/>%gms&quot;</highlight><highlight class="normal">,<sp/>get_time_usec(reft)<sp/>/<sp/>1000.);</highlight></codeline>
<codeline lineno="1630"><highlight class="normal"></highlight></codeline>
<codeline lineno="1631"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>3)<sp/>forming<sp/>a<sp/>solid<sp/>array<sp/>of<sp/>all<sp/>groups<sp/>to<sp/>create<sp/>a<sp/>common<sp/>dictionary</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1632"><highlight class="normal"></highlight></codeline>
<codeline lineno="1633"><highlight class="normal"><sp/><sp/>reft<sp/>=<sp/>ref_time_ticks();</highlight></codeline>
<codeline lineno="1634"><highlight class="normal"></highlight></codeline>
<codeline lineno="1635"><highlight class="normal"><sp/><sp/>ZSTD_CDict_s<sp/>*dict<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1636"><highlight class="normal"><sp/><sp/>shaders_dump.dictionary<sp/>=<sp/>dag::Vector&lt;char&gt;{};</highlight></codeline>
<codeline lineno="1637"><highlight class="normal"></highlight></codeline>
<codeline lineno="1638"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(needToTrainDict)</highlight></codeline>
<codeline lineno="1639"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1640"><highlight class="normal"><sp/><sp/><sp/><sp/>dag::Vector&lt;char&gt;<sp/>samples_buffer;</highlight></codeline>
<codeline lineno="1641"><highlight class="normal"><sp/><sp/><sp/><sp/>dag::Vector&lt;size_t&gt;<sp/>samples_sizes;</highlight></codeline>
<codeline lineno="1642"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>samples_total_size<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1643"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;g<sp/>:<sp/>groups)</highlight></codeline>
<codeline lineno="1644"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1645"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>bindump::MemoryWriter<sp/>writer;</highlight></codeline>
<codeline lineno="1646"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>bindump::streamWrite(make_group(g),<sp/>writer);</highlight></codeline>
<codeline lineno="1647"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>samples_sizes.push_back(writer.mData.size());</highlight></codeline>
<codeline lineno="1648"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>samples_buffer.insert(samples_buffer.end(),<sp/>writer.mData.begin(),<sp/>writer.mData.end());</highlight></codeline>
<codeline lineno="1649"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>samples_total_size<sp/>+=<sp/>writer.mData.size();</highlight></codeline>
<codeline lineno="1650"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1651"><highlight class="normal"></highlight></codeline>
<codeline lineno="1652"><highlight class="normal"><sp/><sp/><sp/><sp/>dag::Vector&lt;char&gt;<sp/>dict_buffer;</highlight></codeline>
<codeline lineno="1653"><highlight class="normal"><sp/><sp/><sp/><sp/>dict_buffer.resize(dictSizeBytes);</highlight></codeline>
<codeline lineno="1654"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>dict_size<sp/>=<sp/>zstd_train_dict_buffer(make_span(dict_buffer),<sp/>groupCompressionLevel,<sp/>samples_buffer,<sp/>samples_sizes);</highlight></codeline>
<codeline lineno="1655"><highlight class="normal"><sp/><sp/><sp/><sp/>debug(</highlight><highlight class="stringliteral">&quot;using<sp/>dictionary<sp/>%dK:<sp/>trained<sp/>from<sp/>%d<sp/>samples<sp/>(%dK<sp/>total<sp/>size)<sp/>to<sp/>trained<sp/>size=%dK<sp/>(%d)&quot;</highlight><highlight class="normal">,<sp/><ref refid="namespaceshc_1a47efde6b3d493adbe2119a5593807d36" kindref="member">shc::config</ref>().dictionarySizeInKb,</highlight></codeline>
<codeline lineno="1656"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>samples_sizes.size(),<sp/>samples_total_size<sp/>&gt;&gt;<sp/>10,<sp/>dict_size<sp/>&gt;&gt;<sp/>10,<sp/>dict_size);</highlight></codeline>
<codeline lineno="1657"><highlight class="normal"><sp/><sp/><sp/><sp/>dict_buffer.resize(dict_size);</highlight></codeline>
<codeline lineno="1658"><highlight class="normal"><sp/><sp/><sp/><sp/>shaders_dump.dictionary<sp/>=<sp/>dict_buffer;</highlight></codeline>
<codeline lineno="1659"><highlight class="normal"></highlight></codeline>
<codeline lineno="1660"><highlight class="normal"><sp/><sp/><sp/><sp/>dict<sp/>=<sp/>zstd_create_cdict(dag::Span&lt;char&gt;(dict_buffer.data(),<sp/>dict_buffer.size()),<sp/>groupCompressionLevel);</highlight></codeline>
<codeline lineno="1661"><highlight class="normal"></highlight></codeline>
<codeline lineno="1662"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="shLog_8cpp_1a2926179632c7c86265007652d3d30b14" kindref="member">sh_debug</ref>(<ref refid="shLog_8h_1a66042048eb3ce30a1dccb2ebf8c2fd5ca5395b0c35e96d97ae9ac7f83b0665310" kindref="member">SHLOG_NORMAL</ref>,<sp/></highlight><highlight class="stringliteral">&quot;[INFO]<sp/>Trained<sp/>group<sp/>compression<sp/>dict<sp/>in<sp/>%gms&quot;</highlight><highlight class="normal">,<sp/>get_time_usec(reft)<sp/>/<sp/>1000.);</highlight></codeline>
<codeline lineno="1663"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1664"><highlight class="normal"></highlight></codeline>
<codeline lineno="1665"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>4)<sp/>compression<sp/>of<sp/>all<sp/>groups</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1666"><highlight class="normal"></highlight></codeline>
<codeline lineno="1667"><highlight class="normal"><sp/><sp/>reft<sp/>=<sp/>ref_time_ticks();</highlight></codeline>
<codeline lineno="1668"><highlight class="normal"></highlight></codeline>
<codeline lineno="1669"><highlight class="normal"><sp/><sp/>shaders_dump.shGroups.resize(groups.size());</highlight></codeline>
<codeline lineno="1670"><highlight class="normal"></highlight></codeline>
<codeline lineno="1671"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>just<sp/>writing<sp/>to<sp/>memory<sp/>or<sp/>not<sp/>using<sp/>threads,<sp/>just<sp/>for-loop</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1672"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!packGroups<sp/>||<sp/>!<ref refid="namespaceshc_1abe61f9b56246b7ac56d190cf23d55011" kindref="member">shc::is_multithreaded</ref>())</highlight></codeline>
<codeline lineno="1673"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1674"><highlight class="normal"><sp/><sp/><sp/><sp/>ZSTD_CCtx_s<sp/>*cctx<sp/>=<sp/>packGroups<sp/>?<sp/>zstd_create_cctx()<sp/>:<sp/>nullptr;</highlight></codeline>
<codeline lineno="1675"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>@NOTE:<sp/>calling<sp/>compress<sp/>with<sp/>level<sp/>=<sp/>-1<sp/>means<sp/>&quot;write<sp/>as<sp/>is<sp/>without<sp/>compression&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1676"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>packLevel<sp/>=<sp/>packGroups<sp/>?<sp/>groupCompressionLevel<sp/>:<sp/>-1;</highlight></codeline>
<codeline lineno="1677"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>shaders_dump.shGroups.size();<sp/>++i)</highlight></codeline>
<codeline lineno="1678"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>shaders_dump.shGroups[i].compress(make_group(groups[i]),<sp/>packLevel,<sp/>cctx,<sp/>dict);</highlight></codeline>
<codeline lineno="1679"><highlight class="normal"></highlight></codeline>
<codeline lineno="1680"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cctx)</highlight></codeline>
<codeline lineno="1681"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>zstd_destroy_cctx(cctx);</highlight></codeline>
<codeline lineno="1682"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1683"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Otherwise,<sp/>compress<sp/>in<sp/>threads</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1684"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!shaders_dump.shGroups.empty())</highlight></codeline>
<codeline lineno="1685"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1686"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">CompressionJob<sp/>:<sp/><ref refid="structshc_1_1Job" kindref="compound">shc::Job</ref></highlight></codeline>
<codeline lineno="1687"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1688"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">CompressedGroupRef<sp/>=<sp/></highlight><highlight class="keyword">decltype</highlight><highlight class="normal">(shaders_dump.shGroups[0]);</highlight></codeline>
<codeline lineno="1689"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">Group<sp/>=<sp/></highlight><highlight class="keyword">decltype</highlight><highlight class="normal">(make_group(groups[0]));</highlight></codeline>
<codeline lineno="1690"><highlight class="normal"></highlight></codeline>
<codeline lineno="1691"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>CompressedGroupRef<sp/>dest;</highlight></codeline>
<codeline lineno="1692"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Group<sp/>src;</highlight></codeline>
<codeline lineno="1693"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>ZSTD_CDict_s<sp/>*cdict;</highlight></codeline>
<codeline lineno="1694"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>groupCompressionLevel;</highlight></codeline>
<codeline lineno="1695"><highlight class="normal"></highlight></codeline>
<codeline lineno="1696"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>CompressionJob(CompressedGroupRef<sp/>shGroup,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Group<sp/>&amp;&amp;group,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>ZSTD_CDict_s<sp/>*dict,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>groupCompressionLevel)<sp/>:</highlight></codeline>
<codeline lineno="1697"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dest(shGroup),<sp/>src(group),<sp/>cdict(dict),<sp/>groupCompressionLevel(groupCompressionLevel)</highlight></codeline>
<codeline lineno="1698"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{}</highlight></codeline>
<codeline lineno="1699"><highlight class="normal"></highlight></codeline>
<codeline lineno="1700"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="structshc_1_1Job_1a511cbc0ba7e66ed3a03a31d195225e57" kindref="member">doJobBody</ref>()<sp/>final</highlight></codeline>
<codeline lineno="1701"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1702"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Using<sp/>TLS<sp/>did<sp/>not<sp/>give<sp/>any<sp/>performance<sp/>benefit<sp/>while<sp/>testing,<sp/>but<sp/>creates<sp/>a<sp/>slight<sp/>mem<sp/>leak</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1703"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ZSTD_CCtx_s<sp/>*cctx<sp/>=<sp/>zstd_create_cctx();</highlight></codeline>
<codeline lineno="1704"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dest.compress(src,<sp/>groupCompressionLevel,<sp/>cctx,<sp/>cdict);</highlight></codeline>
<codeline lineno="1705"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>zstd_destroy_cctx(cctx);</highlight></codeline>
<codeline lineno="1706"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1707"><highlight class="normal"></highlight></codeline>
<codeline lineno="1708"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="structshc_1_1Job_1af5ccf84f47357898495b7aa2a29d4971" kindref="member">releaseJobBody</ref>()<sp/>final<sp/>{}</highlight></codeline>
<codeline lineno="1709"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="1710"><highlight class="normal"></highlight></codeline>
<codeline lineno="1711"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>jobsCnt<sp/>=<sp/>shaders_dump.shGroups.size();</highlight></codeline>
<codeline lineno="1712"><highlight class="normal"><sp/><sp/><sp/><sp/>dag::Vector&lt;CompressionJob&gt;<sp/>jobs{};</highlight></codeline>
<codeline lineno="1713"><highlight class="normal"><sp/><sp/><sp/><sp/>jobs.reserve(jobsCnt);</highlight></codeline>
<codeline lineno="1714"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>queuePos;</highlight></codeline>
<codeline lineno="1715"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>jobsCnt;<sp/>++i)</highlight></codeline>
<codeline lineno="1716"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1717"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>jobs.emplace_back(shaders_dump.shGroups[i],<sp/>make_group(groups[i]),<sp/>dict,<sp/>groupCompressionLevel);</highlight></codeline>
<codeline lineno="1718"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceshc_1a196bec5ea00287d23be548089457adff" kindref="member">shc::add_job</ref>(&amp;jobs.back(),<sp/><ref refid="namespaceshc_1a053e03af98ca26e8ba24b8ac5f78fa45a1ebd8dbf8c34e255f5cbf28f35860b71" kindref="member">shc::JobMgrChoiceStrategy::ROUND_ROBIN</ref>);</highlight></codeline>
<codeline lineno="1719"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1720"><highlight class="normal"></highlight></codeline>
<codeline lineno="1721"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceshc_1aa29b1afa394d7f6e2b8d62ef87c3a88f" kindref="member">shc::await_all_jobs</ref>();</highlight></codeline>
<codeline lineno="1722"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1723"><highlight class="normal"></highlight></codeline>
<codeline lineno="1724"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(dict)</highlight></codeline>
<codeline lineno="1725"><highlight class="normal"><sp/><sp/><sp/><sp/>zstd_destroy_cdict(dict);</highlight></codeline>
<codeline lineno="1726"><highlight class="normal"></highlight></codeline>
<codeline lineno="1727"><highlight class="normal"><sp/><sp/><ref refid="shLog_8cpp_1a2926179632c7c86265007652d3d30b14" kindref="member">sh_debug</ref>(<ref refid="shLog_8h_1a66042048eb3ce30a1dccb2ebf8c2fd5ca5395b0c35e96d97ae9ac7f83b0665310" kindref="member">SHLOG_NORMAL</ref>,<sp/></highlight><highlight class="stringliteral">&quot;[INFO]<sp/>Compressed<sp/>groups<sp/>in<sp/>%gms&quot;</highlight><highlight class="normal">,<sp/>get_time_usec(reft)<sp/>/<sp/>1000.);</highlight></codeline>
<codeline lineno="1728"><highlight class="normal"><sp/><sp/>reft<sp/>=<sp/>ref_time_ticks();</highlight></codeline>
<codeline lineno="1729"><highlight class="normal"></highlight></codeline>
<codeline lineno="1730"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>packBin<sp/>=<sp/>(packing_flags<sp/>&amp;<sp/><ref refid="structBindumpPackingFlagsBits_1a62bee7765f0657bba97f2a5924cb6c5d" kindref="member">BindumpPackingFlagsBits::WHOLE_BINARY</ref>);</highlight></codeline>
<codeline lineno="1731"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>compressedSize<sp/>=</highlight></codeline>
<codeline lineno="1732"><highlight class="normal"><sp/><sp/><sp/><sp/>shaders_dump_compressed.scriptedShadersBindumpCompressed.compress(shaders_dump,<sp/>packBin<sp/>?<sp/>dumpCompressionLevel<sp/>:<sp/>-1);</highlight></codeline>
<codeline lineno="1733"><highlight class="normal"></highlight></codeline>
<codeline lineno="1734"><highlight class="normal"><sp/><sp/><ref refid="shLog_8cpp_1a2926179632c7c86265007652d3d30b14" kindref="member">sh_debug</ref>(<ref refid="shLog_8h_1a66042048eb3ce30a1dccb2ebf8c2fd5ca5395b0c35e96d97ae9ac7f83b0665310" kindref="member">SHLOG_NORMAL</ref>,<sp/></highlight><highlight class="stringliteral">&quot;[INFO]<sp/>Compressed<sp/>dump<sp/>in<sp/>%gms&quot;</highlight><highlight class="normal">,<sp/>get_time_usec(reft)<sp/>/<sp/>1000.);</highlight></codeline>
<codeline lineno="1735"><highlight class="normal"><sp/><sp/>reft<sp/>=<sp/>ref_time_ticks();</highlight></codeline>
<codeline lineno="1736"><highlight class="normal"></highlight></codeline>
<codeline lineno="1737"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Splat<sp/>data<sp/>and<sp/>calculate<sp/>sha256<sp/>hash<sp/>(of<sp/>everything<sp/>except<sp/>the<sp/>header)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1738"><highlight class="normal"></highlight></codeline>
<codeline lineno="1739"><highlight class="normal"><sp/><sp/>bindump::VectorWriter<sp/>contentWriter{};</highlight></codeline>
<codeline lineno="1740"><highlight class="normal"><sp/><sp/>bindump::streamWrite(shaders_dump_compressed,<sp/>contentWriter);</highlight></codeline>
<codeline lineno="1741"><highlight class="normal"></highlight></codeline>
<codeline lineno="1742"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>mapped<sp/>=<sp/>bindump::map&lt;ScriptedShadersBinDumpCompressed&gt;(contentWriter.mData.data());</highlight></codeline>
<codeline lineno="1743"><highlight class="normal"><sp/><sp/>G_ASSERT(mapped);</highlight></codeline>
<codeline lineno="1744"><highlight class="normal"></highlight></codeline>
<codeline lineno="1745"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static_assert</highlight><highlight class="normal">(offsetof(eastl::remove_pointer_t&lt;</highlight><highlight class="keyword">decltype</highlight><highlight class="normal">(mapped)&gt;,<sp/>scriptedShadersBindumpCompressed)<sp/>==<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(mapped-&gt;header));</highlight></codeline>
<codeline lineno="1746"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>content<sp/>=<sp/>dag::ConstSpan&lt;uint8_t&gt;{contentWriter.mData.data(),<sp/>contentWriter.mData.size()}.subspan(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(mapped-&gt;header));</highlight></codeline>
<codeline lineno="1747"><highlight class="normal"></highlight></codeline>
<codeline lineno="1748"><highlight class="normal"><sp/><sp/>uint8_t<sp/>checksum[SHA256_DIGEST_LENGTH];</highlight></codeline>
<codeline lineno="1749"><highlight class="normal"><sp/><sp/>sha256_csum(content.data(),<sp/>content.size(),<sp/>checksum);</highlight></codeline>
<codeline lineno="1750"><highlight class="normal"></highlight></codeline>
<codeline lineno="1751"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static_assert</highlight><highlight class="normal">(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(mapped-&gt;header.checksumHash)<sp/>==<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(checksum));</highlight></codeline>
<codeline lineno="1752"><highlight class="normal"><sp/><sp/>memcpy(mapped-&gt;header.checksumHash,<sp/>checksum,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(mapped-&gt;header.checksumHash));</highlight></codeline>
<codeline lineno="1753"><highlight class="normal"></highlight></codeline>
<codeline lineno="1754"><highlight class="normal"><sp/><sp/><ref refid="shLog_8cpp_1a2926179632c7c86265007652d3d30b14" kindref="member">sh_debug</ref>(<ref refid="shLog_8h_1a66042048eb3ce30a1dccb2ebf8c2fd5ca5395b0c35e96d97ae9ac7f83b0665310" kindref="member">SHLOG_NORMAL</ref>,<sp/></highlight><highlight class="stringliteral">&quot;[INFO]<sp/>Calculated<sp/>checksum<sp/>in<sp/>%gms&quot;</highlight><highlight class="normal">,<sp/>get_time_usec(reft)<sp/>/<sp/>1000.);</highlight></codeline>
<codeline lineno="1755"><highlight class="normal"><sp/><sp/>reft<sp/>=<sp/>ref_time_ticks();</highlight></codeline>
<codeline lineno="1756"><highlight class="normal"></highlight></codeline>
<codeline lineno="1757"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1758"><highlight class="normal"><sp/><sp/><sp/><sp/>eastl::string<sp/>logHash{};</highlight></codeline>
<codeline lineno="1759"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(uint8_t<sp/></highlight><highlight class="keywordtype">byte</highlight><highlight class="normal"><sp/>:<sp/>mapped-&gt;header.checksumHash)</highlight></codeline>
<codeline lineno="1760"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>logHash.append_sprintf(</highlight><highlight class="stringliteral">&quot;%02x&quot;</highlight><highlight class="normal">,<sp/>byte);</highlight></codeline>
<codeline lineno="1761"><highlight class="normal"><sp/><sp/><sp/><sp/>finalReport.aprintf(0,<sp/></highlight><highlight class="stringliteral">&quot;Scripted<sp/>shaders<sp/>bindump:\n<sp/><sp/>|<sp/>version<sp/>:<sp/>%d\n<sp/><sp/>|<sp/>csum<sp/><sp/><sp/><sp/>:<sp/>%s\n&quot;</highlight><highlight class="normal">,<sp/>mapped-&gt;header.version,<sp/>logHash.c_str());</highlight></codeline>
<codeline lineno="1762"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1763"><highlight class="normal"></highlight></codeline>
<codeline lineno="1764"><highlight class="normal"><sp/><sp/><ref refid="shLog_8cpp_1a2926179632c7c86265007652d3d30b14" kindref="member">sh_debug</ref>(<ref refid="shLog_8h_1a66042048eb3ce30a1dccb2ebf8c2fd5ca0012c8acb382f295fe614046a64bba11" kindref="member">SHLOG_INFO</ref>,<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>%d<sp/>vars<sp/>(%d<sp/>global<sp/>vars),<sp/>storage=%d&quot;</highlight><highlight class="normal">,<sp/>vars.<ref refid="structsemicooked_1_1Variables_1ad1a852a79cf94b4894aec56fadaaa20a" kindref="member">vars</ref>.size(),<sp/>vars.<ref refid="structsemicooked_1_1Variables_1aebd08ea6cdd24c727edcdbe144657b4b" kindref="member">varLists</ref>[0].v.size(),</highlight></codeline>
<codeline lineno="1765"><highlight class="normal"><sp/><sp/><sp/><sp/>vars.<ref refid="structsemicooked_1_1Variables_1a0cb15dc49e3a72e065e2002852714eda" kindref="member">storage</ref>.size()<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(vars.<ref refid="structsemicooked_1_1Variables_1a0cb15dc49e3a72e065e2002852714eda" kindref="member">storage</ref>[0]));</highlight></codeline>
<codeline lineno="1766"><highlight class="normal"><sp/><sp/><ref refid="shLog_8cpp_1a2926179632c7c86265007652d3d30b14" kindref="member">sh_debug</ref>(<ref refid="shLog_8h_1a66042048eb3ce30a1dccb2ebf8c2fd5ca0012c8acb382f295fe614046a64bba11" kindref="member">SHLOG_INFO</ref>,<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>shaders:<sp/>%d<sp/>bytes<sp/>(VS:<sp/>%d,<sp/><sp/>HS/DS/GS:<sp/>%d,<sp/><sp/>PS:<sp/>%d,<sp/><sp/>CS:<sp/>%d)&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1767"><highlight class="normal"><sp/><sp/><sp/><sp/>vpr_bytes<sp/>+<sp/>fsh_bytes<sp/>+<sp/>hs_ds_gs_bytes<sp/>+<sp/>cs_bytes,<sp/>vpr_bytes,<sp/>hs_ds_gs_bytes,<sp/>fsh_bytes,<sp/>cs_bytes);</highlight></codeline>
<codeline lineno="1768"><highlight class="normal"><sp/><sp/><ref refid="shLog_8cpp_1a2926179632c7c86265007652d3d30b14" kindref="member">sh_debug</ref>(<ref refid="shLog_8h_1a66042048eb3ce30a1dccb2ebf8c2fd5ca0012c8acb382f295fe614046a64bba11" kindref="member">SHLOG_INFO</ref>,<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>stcode:<sp/>%d/%d/%d<sp/>bytes&quot;</highlight><highlight class="normal">,<sp/>stcode_bytes0,<sp/>stcode_bytes1,<sp/>stcode_bytes2);</highlight></codeline>
<codeline lineno="1769"><highlight class="normal"></highlight></codeline>
<codeline lineno="1770"><highlight class="normal"><sp/><sp/><ref refid="shLog_8cpp_1a2926179632c7c86265007652d3d30b14" kindref="member">sh_debug</ref>(<ref refid="shLog_8h_1a66042048eb3ce30a1dccb2ebf8c2fd5ca5395b0c35e96d97ae9ac7f83b0665310" kindref="member">SHLOG_NORMAL</ref>,<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>scripted<sp/>shaders<sp/>size:<sp/>%d<sp/>bytes<sp/>(%d<sp/>K)&quot;</highlight><highlight class="normal">,<sp/>compressedSize,<sp/>compressedSize<sp/>&gt;&gt;<sp/>10);</highlight></codeline>
<codeline lineno="1771"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(shaders_dump_compressed.scriptedShadersBindumpCompressed.getDecompressedSize())</highlight></codeline>
<codeline lineno="1772"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1773"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="shLog_8cpp_1a2926179632c7c86265007652d3d30b14" kindref="member">sh_debug</ref>(<ref refid="shLog_8h_1a66042048eb3ce30a1dccb2ebf8c2fd5ca5395b0c35e96d97ae9ac7f83b0665310" kindref="member">SHLOG_NORMAL</ref>,<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>scripted<sp/>shaders<sp/>size<sp/>uncompressed:<sp/>%d<sp/>bytes<sp/>(%d<sp/>K)&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1774"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>shaders_dump_compressed.scriptedShadersBindumpCompressed.getDecompressedSize(),</highlight></codeline>
<codeline lineno="1775"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>shaders_dump_compressed.scriptedShadersBindumpCompressed.getDecompressedSize()<sp/>&gt;&gt;<sp/>10);</highlight></codeline>
<codeline lineno="1776"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1777"><highlight class="normal"></highlight></codeline>
<codeline lineno="1778"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1779"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>write<sp/>dump<sp/>to<sp/>output<sp/>stream</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1780"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1781"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="structErrorCounter_1a0d2712090dcb5df49be0c244026e048a" kindref="member">ErrorCounter::allShaders</ref>().err<sp/>!=<sp/>0)</highlight></codeline>
<codeline lineno="1782"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1783"><highlight class="normal"></highlight></codeline>
<codeline lineno="1784"><highlight class="normal"><sp/><sp/>fileWriter.seekto(0);</highlight></codeline>
<codeline lineno="1785"><highlight class="normal"><sp/><sp/>fileWriter.write(contentWriter.mData.data(),<sp/>contentWriter.mData.size());</highlight></codeline>
<codeline lineno="1786"><highlight class="normal"></highlight></codeline>
<codeline lineno="1787"><highlight class="normal"><sp/><sp/><ref refid="shLog_8cpp_1a2926179632c7c86265007652d3d30b14" kindref="member">sh_debug</ref>(<ref refid="shLog_8h_1a66042048eb3ce30a1dccb2ebf8c2fd5ca5395b0c35e96d97ae9ac7f83b0665310" kindref="member">SHLOG_NORMAL</ref>,<sp/></highlight><highlight class="stringliteral">&quot;[INFO]<sp/>Saved<sp/>bindump<sp/>in<sp/>%gms&quot;</highlight><highlight class="normal">,<sp/>get_time_usec(reft)<sp/>/<sp/>1000.);</highlight></codeline>
<codeline lineno="1788"><highlight class="normal"><sp/><sp/><ref refid="shLog_8cpp_1a2926179632c7c86265007652d3d30b14" kindref="member">sh_debug</ref>(<ref refid="shLog_8h_1a66042048eb3ce30a1dccb2ebf8c2fd5ca5395b0c35e96d97ae9ac7f83b0665310" kindref="member">SHLOG_NORMAL</ref>,<sp/></highlight><highlight class="stringliteral">&quot;%s&quot;</highlight><highlight class="normal">,<sp/>finalReport.c_str());</highlight></codeline>
<codeline lineno="1789"><highlight class="normal"></highlight></codeline>
<codeline lineno="1790"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1791"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="makeShBinDump.cpp"/>
  </compounddef>
</doxygen>
