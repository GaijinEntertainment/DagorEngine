<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.7" xml:lang="en-US">
  <compounddef id="shsem_8cpp" kind="file" language="C++">
    <compoundname>shsem.cpp</compoundname>
    <includes refid="shCompiler_8h" local="yes">shCompiler.h</includes>
    <includes refid="shTargetContext_8h" local="yes">shTargetContext.h</includes>
    <includes refid="shShaderContext_8h" local="yes">shShaderContext.h</includes>
    <includes refid="shVariantContext_8h" local="yes">shVariantContext.h</includes>
    <includes refid="shaderSemantic_8h" local="yes">shaderSemantic.h</includes>
    <includes refid="variantAssembly_8h" local="yes">variantAssembly.h</includes>
    <includes refid="cppStcodePasses_8h" local="yes">cppStcodePasses.h</includes>
    <includes refid="globalConfig_8h" local="yes">globalConfig.h</includes>
    <includes refid="shsem_8h" local="yes">shsem.h</includes>
    <includes refid="shLog_8h" local="yes">shLog.h</includes>
    <includes refid="assemblyShader_8h" local="yes">assemblyShader.h</includes>
    <includes refid="gatherVar_8h" local="yes">gatherVar.h</includes>
    <includes refid="globVar_8h" local="yes">globVar.h</includes>
    <includes refid="boolVar_8h" local="yes">boolVar.h</includes>
    <includes refid="codeBlocks_8h" local="yes">codeBlocks.h</includes>
    <includes refid="cppStcodeAssembly_8h" local="yes">cppStcodeAssembly.h</includes>
    <includes refid="cppStcode_8h" local="yes">cppStcode.h</includes>
    <includes local="no">shaders/shUtils.h</includes>
    <includes local="no">shaders/shOpcodeFormat.h</includes>
    <includes local="no">shaders/shOpcode.h</includes>
    <includes local="no">generic/dag_tabUtils.h</includes>
    <includes refid="linkShaders_8h" local="yes">linkShaders.h</includes>
    <includes local="no">osApiWrappers/dag_cpuJobs.h</includes>
    <includes local="no">osApiWrappers/dag_miscApi.h</includes>
    <includes local="no">util/dag_fastIntList.h</includes>
    <includes local="no">debug/dag_debug.h</includes>
    <includes local="no">ska_hash_map/flat_hash_map2.hpp</includes>
    <includes local="no">shaders/slotTexturesRange.h</includes>
    <incdepgraph>
      <node id="88">
        <label>DebugLevel.h</label>
        <link refid="DebugLevel_8h"/>
        <childnode refid="33" relation="include">
        </childnode>
      </node>
      <node id="111">
        <label>assemblyShader.h</label>
        <link refid="assemblyShader_8h"/>
      </node>
      <node id="45">
        <label>blkHash.h</label>
        <link refid="blkHash_8h"/>
      </node>
      <node id="81">
        <label>boolVar.h</label>
        <link refid="boolVar_8h"/>
        <childnode refid="62" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="41" relation="include">
        </childnode>
      </node>
      <node id="106">
        <label>codeBlocks.h</label>
        <link refid="codeBlocks_8h"/>
        <childnode refid="98" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>commonUtils.h</label>
        <link refid="commonUtils_8h"/>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
      </node>
      <node id="73">
        <label>compileResult.h</label>
        <link refid="compileResult_8h"/>
        <childnode refid="74" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="70">
        <label>const3d.h</label>
        <link refid="const3d_8h"/>
        <childnode refid="39" relation="include">
        </childnode>
      </node>
      <node id="12">
        <label>cppStcode.h</label>
        <link refid="cppStcode_8h"/>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="43" relation="include">
        </childnode>
        <childnode refid="45" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
      </node>
      <node id="13">
        <label>cppStcodeAssembly.h</label>
        <link refid="cppStcodeAssembly_8h"/>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
        <childnode refid="38" relation="include">
        </childnode>
        <childnode refid="39" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="41" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
      </node>
      <node id="14">
        <label>cppStcodeBuilder.h</label>
        <link refid="cppStcodeBuilder_8h"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
      </node>
      <node id="110">
        <label>cppStcodePasses.h</label>
        <link refid="cppStcodePasses_8h"/>
        <childnode refid="98" relation="include">
        </childnode>
        <childnode refid="102" relation="include">
        </childnode>
        <childnode refid="108" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="89">
        <label>cppStcodePlatformInfo.h</label>
        <link refid="cppStcodePlatformInfo_8h"/>
        <childnode refid="33" relation="include">
        </childnode>
      </node>
      <node id="64">
        <label>cppStcodeUtils.h</label>
        <link refid="cppStcodeUtils_8h"/>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="65" relation="include">
        </childnode>
      </node>
      <node id="112">
        <label>gatherVar.h</label>
        <link refid="gatherVar_8h"/>
      </node>
      <node id="52">
        <label>globVar.h</label>
        <link refid="globVar_8h"/>
        <childnode refid="53" relation="include">
        </childnode>
        <childnode refid="54" relation="include">
        </childnode>
        <childnode refid="46" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="55" relation="include">
        </childnode>
        <childnode refid="56" relation="include">
        </childnode>
        <childnode refid="57" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="58" relation="include">
        </childnode>
        <childnode refid="59" relation="include">
        </childnode>
      </node>
      <node id="87">
        <label>globalConfig.h</label>
        <link refid="globalConfig_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="88" relation="include">
        </childnode>
        <childnode refid="89" relation="include">
        </childnode>
        <childnode refid="49" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="41" relation="include">
        </childnode>
      </node>
      <node id="25">
        <label>hash.h</label>
        <link refid="hash_8h"/>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
      </node>
      <node id="50">
        <label>hashStrings.h</label>
        <link refid="hashStrings_8h"/>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="46" relation="include">
        </childnode>
        <childnode refid="51" relation="include">
        </childnode>
        <childnode refid="41" relation="include">
        </childnode>
      </node>
      <node id="28">
        <label>hlslRegisters.h</label>
        <link refid="hlslRegisters_8h"/>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
      </node>
      <node id="69">
        <label>hlslStage.h</label>
        <link refid="hlslStage_8h"/>
        <childnode refid="70" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="71" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="72" relation="include">
        </childnode>
      </node>
      <node id="48">
        <label>hwAssembly.h</label>
        <link refid="hwAssembly_8h"/>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="59">
        <label>intervals.h</label>
        <link refid="intervals_8h"/>
      </node>
      <node id="117">
        <label>linkShaders.h</label>
        <link refid="linkShaders_8h"/>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="59" relation="include">
        </childnode>
        <childnode refid="52" relation="include">
        </childnode>
        <childnode refid="60" relation="include">
        </childnode>
        <childnode refid="76" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="101" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
      </node>
      <node id="18">
        <label>nameMap.h</label>
        <link refid="nameMap_8h"/>
        <childnode refid="19" relation="include">
        </childnode>
      </node>
      <node id="82">
        <label>namedConst.h</label>
        <link refid="namedConst_8h"/>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="83" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="87" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="46" relation="include">
        </childnode>
        <childnode refid="90" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
      </node>
      <node id="43">
        <label>processes.h</label>
        <link refid="processes_8h"/>
        <childnode refid="44" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
      </node>
      <node id="60">
        <label>samplers.h</label>
        <link refid="samplers_8h"/>
        <childnode refid="61" relation="include">
        </childnode>
        <childnode refid="62" relation="include">
        </childnode>
        <childnode refid="52" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="56" relation="include">
        </childnode>
        <childnode refid="41" relation="include">
        </childnode>
      </node>
      <node id="91">
        <label>shAssumes.h</label>
        <link refid="shAssumes_8h"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="59" relation="include">
        </childnode>
        <childnode refid="62" relation="include">
        </childnode>
        <childnode refid="49" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="41" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>shCompContext.h</label>
        <link refid="shCompContext_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="48" relation="include">
        </childnode>
        <childnode refid="49" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>shCompilationInfo.h</label>
        <link refid="shCompilationInfo_8h"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="45" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="46" relation="include">
        </childnode>
        <childnode refid="47" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>shCompiler.h</label>
        <link refid="shCompiler_8h"/>
      </node>
      <node id="78">
        <label>shErrorReporting.h</label>
        <link refid="shErrorReporting_8h"/>
        <childnode refid="61" relation="include">
        </childnode>
        <childnode refid="62" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="109">
        <label>shExpr.h</label>
        <link refid="shExpr_8h"/>
      </node>
      <node id="103">
        <label>shLocVar.h</label>
        <link refid="shLocVar_8h"/>
      </node>
      <node id="29">
        <label>shLog.h</label>
        <link refid="shLog_8h"/>
      </node>
      <node id="63">
        <label>shMacro.h</label>
        <link refid="shMacro_8h"/>
      </node>
      <node id="100">
        <label>shMessages.h</label>
        <link refid="shMessages_8h"/>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="86" relation="include">
        </childnode>
      </node>
      <node id="101">
        <label>shSemCode.h</label>
        <link refid="shSemCode_8h"/>
      </node>
      <node id="92">
        <label>shShaderContext.h</label>
        <link refid="shShaderContext_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="81" relation="include">
        </childnode>
        <childnode refid="93" relation="include">
        </childnode>
        <childnode refid="91" relation="include">
        </childnode>
        <childnode refid="94" relation="include">
        </childnode>
        <childnode refid="98" relation="include">
        </childnode>
        <childnode refid="100" relation="include">
        </childnode>
        <childnode refid="96" relation="include">
        </childnode>
        <childnode refid="101" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>shTargetContext.h</label>
        <link refid="shTargetContext_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="50" relation="include">
        </childnode>
        <childnode refid="52" relation="include">
        </childnode>
        <childnode refid="60" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="64" relation="include">
        </childnode>
        <childnode refid="62" relation="include">
        </childnode>
        <childnode refid="66" relation="include">
        </childnode>
        <childnode refid="68" relation="include">
        </childnode>
        <childnode refid="77" relation="include">
        </childnode>
        <childnode refid="81" relation="include">
        </childnode>
        <childnode refid="69" relation="include">
        </childnode>
        <childnode refid="82" relation="include">
        </childnode>
        <childnode refid="91" relation="include">
        </childnode>
        <childnode refid="87" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
      </node>
      <node id="66">
        <label>shTargetStorage.h</label>
        <link refid="shTargetStorage_8h"/>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="67" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
      </node>
      <node id="99">
        <label>shVarBool.h</label>
        <link refid="shVarBool_8h"/>
      </node>
      <node id="58">
        <label>shVarVecTypes.h</label>
        <link refid="shVarVecTypes_8h"/>
      </node>
      <node id="102">
        <label>shVariantContext.h</label>
        <link refid="shVariantContext_8h"/>
        <childnode refid="92" relation="include">
        </childnode>
        <childnode refid="101" relation="include">
        </childnode>
        <childnode refid="81" relation="include">
        </childnode>
        <childnode refid="103" relation="include">
        </childnode>
        <childnode refid="104" relation="include">
        </childnode>
      </node>
      <node id="68">
        <label>shaderBytecodeCache.h</label>
        <link refid="shaderBytecodeCache_8h"/>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="69" relation="include">
        </childnode>
        <childnode refid="73" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="75" relation="include">
        </childnode>
        <childnode refid="46" relation="include">
        </childnode>
        <childnode refid="76" relation="include">
        </childnode>
      </node>
      <node id="16">
        <label>shaderSave.h</label>
        <link refid="shaderSave_8h"/>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
      </node>
      <node id="105">
        <label>shaderSemantic.h</label>
        <link refid="shaderSemantic_8h"/>
        <childnode refid="92" relation="include">
        </childnode>
        <childnode refid="102" relation="include">
        </childnode>
        <childnode refid="78" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="106" relation="include">
        </childnode>
        <childnode refid="98" relation="include">
        </childnode>
      </node>
      <node id="15">
        <label>shaderTab.h</label>
        <link refid="shaderTab_8h"/>
        <childnode refid="16" relation="include">
        </childnode>
      </node>
      <node id="96">
        <label>shaderVariant.h</label>
        <link refid="shaderVariant_8h"/>
        <childnode refid="59" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="79" relation="include">
        </childnode>
        <childnode refid="57" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="51" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
      </node>
      <node id="93">
        <label>shaderVariantSrc.h</label>
        <link refid="shaderVariantSrc_8h"/>
      </node>
      <node id="94">
        <label>shcode.h</label>
        <link refid="shcode_8h"/>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="51" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="95" relation="include">
        </childnode>
        <childnode refid="53" relation="include">
        </childnode>
        <childnode refid="54" relation="include">
        </childnode>
        <childnode refid="86" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="96" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="82" relation="include">
        </childnode>
        <childnode refid="97" relation="include">
        </childnode>
        <childnode refid="58" relation="include">
        </childnode>
      </node>
      <node id="62">
        <label>shlexterm.h</label>
        <link refid="shlexterm_8h"/>
        <childnode refid="61" relation="include">
        </childnode>
        <childnode refid="63" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>shsem.cpp</label>
        <link refid="shsem_8cpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="92" relation="include">
        </childnode>
        <childnode refid="102" relation="include">
        </childnode>
        <childnode refid="105" relation="include">
        </childnode>
        <childnode refid="107" relation="include">
        </childnode>
        <childnode refid="110" relation="include">
        </childnode>
        <childnode refid="87" relation="include">
        </childnode>
        <childnode refid="98" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="111" relation="include">
        </childnode>
        <childnode refid="112" relation="include">
        </childnode>
        <childnode refid="52" relation="include">
        </childnode>
        <childnode refid="81" relation="include">
        </childnode>
        <childnode refid="106" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="113" relation="include">
        </childnode>
        <childnode refid="114" relation="include">
        </childnode>
        <childnode refid="115" relation="include">
        </childnode>
        <childnode refid="116" relation="include">
        </childnode>
        <childnode refid="117" relation="include">
        </childnode>
        <childnode refid="118" relation="include">
        </childnode>
        <childnode refid="119" relation="include">
        </childnode>
        <childnode refid="120" relation="include">
        </childnode>
        <childnode refid="79" relation="include">
        </childnode>
        <childnode refid="41" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
      </node>
      <node id="98">
        <label>shsem.h</label>
        <link refid="shsem_8h"/>
        <childnode refid="61" relation="include">
        </childnode>
        <childnode refid="62" relation="include">
        </childnode>
        <childnode refid="99" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="76" relation="include">
        </childnode>
      </node>
      <node id="77">
        <label>stcodeBytecode.h</label>
        <link refid="stcodeBytecode_8h"/>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="78" relation="include">
        </childnode>
        <childnode refid="38" relation="include">
        </childnode>
        <childnode refid="79" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="80" relation="include">
        </childnode>
      </node>
      <node id="17">
        <label>varMap.h</label>
        <link refid="varMap_8h"/>
        <childnode refid="18" relation="include">
        </childnode>
      </node>
      <node id="57">
        <label>varTypes.h</label>
        <link refid="varTypes_8h"/>
      </node>
      <node id="83">
        <label>variablesMerger.h</label>
        <link refid="variablesMerger_8h"/>
        <childnode refid="61" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="39" relation="include">
        </childnode>
        <childnode refid="74" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="84" relation="include">
        </childnode>
        <childnode refid="85" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="86" relation="include">
        </childnode>
      </node>
      <node id="107">
        <label>variantAssembly.h</label>
        <link refid="variantAssembly_8h"/>
        <childnode refid="102" relation="include">
        </childnode>
        <childnode refid="108" relation="include">
        </childnode>
        <childnode refid="109" relation="include">
        </childnode>
      </node>
      <node id="108">
        <label>variantSemantic.h</label>
        <link refid="variantSemantic_8h"/>
        <childnode refid="102" relation="include">
        </childnode>
      </node>
      <node id="55">
        <label>3d/dag_texMgr.h</label>
      </node>
      <node id="24">
        <label>EASTL/algorithm.h</label>
      </node>
      <node id="32">
        <label>EASTL/array.h</label>
      </node>
      <node id="86">
        <label>EASTL/bitvector.h</label>
      </node>
      <node id="84">
        <label>EASTL/fixed_vector.h</label>
      </node>
      <node id="85">
        <label>EASTL/map.h</label>
      </node>
      <node id="11">
        <label>EASTL/optional.h</label>
      </node>
      <node id="10">
        <label>EASTL/string.h</label>
      </node>
      <node id="65">
        <label>EASTL/string_view.h</label>
      </node>
      <node id="71">
        <label>EASTL/type_traits.h</label>
      </node>
      <node id="40">
        <label>EASTL/unique_ptr.h</label>
      </node>
      <node id="74">
        <label>EASTL/vector.h</label>
      </node>
      <node id="80">
        <label>EASTL/vector_map.h</label>
      </node>
      <node id="90">
        <label>EASTL/vector_set.h</label>
      </node>
      <node id="33">
        <label>cstdint</label>
      </node>
      <node id="27">
        <label>cstring</label>
      </node>
      <node id="23">
        <label>dag/dag_vector.h</label>
      </node>
      <node id="22">
        <label>debug/dag_assert.h</label>
      </node>
      <node id="79">
        <label>debug/dag_debug.h</label>
      </node>
      <node id="39">
        <label>drv/3d/dag_consts.h</label>
      </node>
      <node id="67">
        <label>drv/3d/dag_renderStates.h</label>
      </node>
      <node id="56">
        <label>drv/3d/dag_sampler.h</label>
      </node>
      <node id="30">
        <label>generic/dag_enumerate.h</label>
      </node>
      <node id="31">
        <label>generic/dag_expected.h</label>
      </node>
      <node id="44">
        <label>generic/dag_fixedMoveOnlyFunction.h</label>
      </node>
      <node id="95">
        <label>generic/dag_smallTab.h</label>
      </node>
      <node id="20">
        <label>generic/dag_tab.h</label>
      </node>
      <node id="116">
        <label>generic/dag_tabUtils.h</label>
      </node>
      <node id="26">
        <label>hash/BLAKE3/blake3.h</label>
      </node>
      <node id="49">
        <label>ioSys/dag_dataBlock.h</label>
      </node>
      <node id="53">
        <label>math/dag_color.h</label>
      </node>
      <node id="54">
        <label>math/integer/dag_IPoint4.h</label>
      </node>
      <node id="72">
        <label>memory</label>
      </node>
      <node id="35">
        <label>memory/dag_mem.h</label>
      </node>
      <node id="75">
        <label>memory/dag_memBase.h</label>
      </node>
      <node id="104">
        <label>memory/dag_regionMemAlloc.h</label>
      </node>
      <node id="118">
        <label>osApiWrappers/dag_cpuJobs.h</label>
      </node>
      <node id="119">
        <label>osApiWrappers/dag_miscApi.h</label>
      </node>
      <node id="97">
        <label>shaders/dag_shaderCommon.h</label>
      </node>
      <node id="38">
        <label>shaders/dag_shaderVarType.h</label>
      </node>
      <node id="47">
        <label>shaders/dag_shaders.h</label>
      </node>
      <node id="36">
        <label>shaders/shExprTypes.h</label>
      </node>
      <node id="37">
        <label>shaders/shFunc.h</label>
      </node>
      <node id="115">
        <label>shaders/shOpcode.h</label>
      </node>
      <node id="114">
        <label>shaders/shOpcodeFormat.h</label>
      </node>
      <node id="113">
        <label>shaders/shUtils.h</label>
      </node>
      <node id="42">
        <label>shaders/shader_layout.h</label>
      </node>
      <node id="34">
        <label>shaders/slotTexturesRange.h</label>
      </node>
      <node id="61">
        <label>shsyn.h</label>
      </node>
      <node id="41">
        <label>ska_hash_map/flat_hash_map2.hpp</label>
      </node>
      <node id="21">
        <label>util/dag_bindump_ext.h</label>
      </node>
      <node id="120">
        <label>util/dag_fastIntList.h</label>
      </node>
      <node id="9">
        <label>util/dag_globDef.h</label>
      </node>
      <node id="19">
        <label>util/dag_oaHashNameMap.h</label>
      </node>
      <node id="8">
        <label>util/dag_safeArg.h</label>
      </node>
      <node id="76">
        <label>util/dag_simpleString.h</label>
      </node>
      <node id="51">
        <label>util/dag_stdint.h</label>
      </node>
      <node id="46">
        <label>util/dag_string.h</label>
      </node>
      <node id="7">
        <label>utility</label>
      </node>
    </incdepgraph>
    <innerclass refid="structShaderParser_1_1EvaluatedShaderVariant" prot="public">ShaderParser::EvaluatedShaderVariant</innerclass>
    <innernamespace refid="namespaceShaderParser">ShaderParser</innernamespace>
      <sectiondef kind="define">
      <memberdef kind="define" id="shsem_8cpp_1a5e677a23a63ceea855a3f13657eb18e7" prot="public" static="no">
        <name>FAST_BOOLEAN_EVAL</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="shsem.cpp" line="35" column="9" bodyfile="shsem.cpp" bodystart="35" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="shsem_8cpp_1a5efd1f30fdde50872091473a7e8d2961" prot="public" static="no">
        <name>COMPARE_V</name>
        <param><defname>v</defname></param>
        <initializer>  if (v != p.v)      \
    return false;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="shsem.cpp" line="157" column="9"/>
      </memberdef>
      <memberdef kind="define" id="shsem_8cpp_1a34b68d8dca65a45dfc31532f8800225d" prot="public" static="no">
        <name>REPORT_ERR</name>
        <param><defname>msg</defname></param>
        <param><defname>t</defname></param>
        <initializer>parser.get_lexer().set_error(t-&gt;file_start, t-&gt;line_start, t-&gt;col_start, msg)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="shsem.cpp" line="1017" column="9"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="shsem_8cpp_1aec8d680f6f542a3b10116ca88958bdea" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void build_condition_string</definition>
        <argsstring>(bool_expr &amp;e, String &amp;out)</argsstring>
        <name>build_condition_string</name>
        <param>
          <type>bool_expr &amp;</type>
          <declname>e</declname>
        </param>
        <param>
          <type>String &amp;</type>
          <declname>out</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="shsem.cpp" line="1230" column="13" bodyfile="shsem.cpp" bodystart="1230" bodyend="1241" declfile="shsem.cpp" declline="1119" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="shsem_8cpp_1ab33906e704734a2230385f3ff71e896b" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void build_condition_value</definition>
        <argsstring>(bool_value &amp;e, String &amp;out)</argsstring>
        <name>build_condition_value</name>
        <param>
          <type>bool_value &amp;</type>
          <declname>e</declname>
        </param>
        <param>
          <type>String &amp;</type>
          <declname>out</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="shsem.cpp" line="1121" column="13" bodyfile="shsem.cpp" bodystart="1121" bodyend="1203"/>
      </memberdef>
      <memberdef kind="function" id="shsem_8cpp_1ae1be3d56a52e71fa4268e96841d8ce17" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void build_condition_bool_not</definition>
        <argsstring>(not_expr &amp;e, String &amp;out)</argsstring>
        <name>build_condition_bool_not</name>
        <param>
          <type>not_expr &amp;</type>
          <declname>e</declname>
        </param>
        <param>
          <type>String &amp;</type>
          <declname>out</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="shsem.cpp" line="1204" column="13" bodyfile="shsem.cpp" bodystart="1204" bodyend="1216"/>
      </memberdef>
      <memberdef kind="function" id="shsem_8cpp_1aef8192f1b6d92c171b0e8447b576d578" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void build_condition_bool_and</definition>
        <argsstring>(and_expr &amp;e, String &amp;out)</argsstring>
        <name>build_condition_bool_and</name>
        <param>
          <type>and_expr &amp;</type>
          <declname>e</declname>
        </param>
        <param>
          <type>String &amp;</type>
          <declname>out</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="shsem.cpp" line="1217" column="13" bodyfile="shsem.cpp" bodystart="1217" bodyend="1228"/>
      </memberdef>
      <memberdef kind="function" id="shsem_8cpp_1ae9d738792a25c83604ceb32ebdbb56e6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void sh_report_error_cb</definition>
        <argsstring>(ShaderTerminal::shader_stat *s, GeneratedParser &amp;parser)</argsstring>
        <name>sh_report_error_cb</name>
        <param>
          <type>ShaderTerminal::shader_stat *</type>
          <declname>s</declname>
        </param>
        <param>
          <type>GeneratedParser &amp;</type>
          <declname>parser</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="shsem.cpp" line="1251" column="6" bodyfile="shsem.cpp" bodystart="1251" bodyend="1258"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/>Copyright<sp/>(C)<sp/>Gaijin<sp/>Games<sp/>KFT.<sp/><sp/>All<sp/>rights<sp/>reserved.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="shCompiler_8h" kindref="compound">shCompiler.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="shTargetContext_8h" kindref="compound">shTargetContext.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="shShaderContext_8h" kindref="compound">shShaderContext.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="shVariantContext_8h" kindref="compound">shVariantContext.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="shaderSemantic_8h" kindref="compound">shaderSemantic.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="variantAssembly_8h" kindref="compound">variantAssembly.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="cppStcodePasses_8h" kindref="compound">cppStcodePasses.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="globalConfig_8h" kindref="compound">globalConfig.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="shsem_8h" kindref="compound">shsem.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="shLog_8h" kindref="compound">shLog.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="assemblyShader_8h" kindref="compound">assemblyShader.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="gatherVar_8h" kindref="compound">gatherVar.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="globVar_8h" kindref="compound">globVar.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="boolVar_8h" kindref="compound">boolVar.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="codeBlocks_8h" kindref="compound">codeBlocks.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="cppStcodeAssembly_8h" kindref="compound">cppStcodeAssembly.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="cppStcode_8h" kindref="compound">cppStcode.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;shaders/shUtils.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;shaders/shOpcodeFormat.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;shaders/shOpcode.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;generic/dag_tabUtils.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="linkShaders_8h" kindref="compound">linkShaders.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;osApiWrappers/dag_cpuJobs.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;osApiWrappers/dag_miscApi.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;util/dag_fastIntList.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;debug/dag_debug.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;ska_hash_map/flat_hash_map2.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;shaders/slotTexturesRange.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal"><ref refid="namespaceShaderParser" kindref="compound">ShaderParser</ref>;</highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="comment">//<sp/>if<sp/>defined,<sp/>partial<sp/>boolean<sp/>expressions<sp/>evaluation<sp/>used</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>FAST_BOOLEAN_EVAL</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceShaderParser_1ab3462116b1620a58f8ada21b41e65826" kindref="member">ShaderParser::addSourceCode</ref>(String<sp/>&amp;text,<sp/>Symbol<sp/>*term,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*src,<sp/><ref refid="structParser" kindref="compound">Parser</ref><sp/>&amp;p,<sp/><ref refid="nameMap_8h_1ad3f42c540507651a7e4ce93760afc216" kindref="member">SCFastNameMap</ref><sp/>&amp;messages_table,</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>need_file_idx)</highlight></codeline>
<codeline lineno="39"><highlight class="normal">{</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!*src)</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*filename<sp/>=<sp/>p.<ref refid="structParser_1a9e9bc1e12aec4ba300d71598132ae8ec" kindref="member">get_lexer</ref>().get_input_stream()-&gt;<ref refid="classLexer_1ab26ad89867e01b9d9aecd26d1c74776c" kindref="member">get_filename</ref>(term-&gt;file_start);</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(need_file_idx)</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/>text.aprintf(32,<sp/></highlight><highlight class="stringliteral">&quot;#line<sp/>1<sp/>\&quot;precompiled\&quot;\n#undef<sp/>_FILE_\n#define<sp/>_FILE_<sp/>%d\n&quot;</highlight><highlight class="normal">,<sp/>messages_table.addNameId(filename));</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/>text.aprintf(32,<sp/></highlight><highlight class="stringliteral">&quot;#line<sp/>%d<sp/>\&quot;%s\&quot;\n%s&quot;</highlight><highlight class="normal">,<sp/>term-&gt;line_start,<sp/>filename,<sp/>src);</highlight></codeline>
<codeline lineno="46"><highlight class="normal">}</highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceShaderParser_1ab3462116b1620a58f8ada21b41e65826" kindref="member">ShaderParser::addSourceCode</ref>(String<sp/>&amp;text,<sp/>SHTOK_hlsl_text<sp/>*src,<sp/><ref refid="structParser" kindref="compound">Parser</ref><sp/>&amp;p,<sp/><ref refid="nameMap_8h_1ad3f42c540507651a7e4ce93760afc216" kindref="member">SCFastNameMap</ref><sp/>&amp;messages_table,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>need_file_idx)</highlight></codeline>
<codeline lineno="49"><highlight class="normal">{</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><ref refid="namespaceShaderParser_1ab3462116b1620a58f8ada21b41e65826" kindref="member">addSourceCode</ref>(text,<sp/>src,<sp/>src-&gt;text,<sp/>p,<sp/>messages_table,<sp/>need_file_idx);</highlight></codeline>
<codeline lineno="51"><highlight class="normal">}</highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classShaderSemCode_1abfd30ee047bb5e92b5e403ed62191bf0" kindref="member">ShaderSemCode::dump</ref>()</highlight></codeline>
<codeline lineno="55"><highlight class="normal">{</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/>debug(</highlight><highlight class="stringliteral">&quot;regsize<sp/>=<sp/>%d&quot;</highlight><highlight class="normal">,<sp/><ref refid="classShaderSemCode_1af8edbdef53e3a9de78f27f09f1611ddd" kindref="member">regsize</ref>);</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/>debug(</highlight><highlight class="stringliteral">&quot;%d<sp/>channels:&quot;</highlight><highlight class="normal">,<sp/><ref refid="classShaderSemCode_1a8b32469ee07d07ba8dd9b6a7d2d20805" kindref="member">channel</ref>.size());</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/><ref refid="classShaderSemCode_1a8b32469ee07d07ba8dd9b6a7d2d20805" kindref="member">channel</ref>.size();<sp/>++i)</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/>ShaderChannelId<sp/>&amp;c<sp/>=<sp/><ref refid="classShaderSemCode_1a8b32469ee07d07ba8dd9b6a7d2d20805" kindref="member">channel</ref>[i];</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/>debug(</highlight><highlight class="stringliteral">&quot;<sp/><sp/>%s<sp/>%s[%d]<sp/>&lt;-<sp/>%s[%d]&quot;</highlight><highlight class="normal">,<sp/>ShUtils::channel_type_name(c.t),<sp/>ShUtils::channel_usage_name(c.vbu),<sp/>c.vbui,</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ShUtils::channel_usage_name(c.u),<sp/>c.ui);</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/>debug(</highlight><highlight class="stringliteral">&quot;%d<sp/>vars:&quot;</highlight><highlight class="normal">,<sp/><ref refid="classShaderSemCode_1abe6ed6468793a4cbe55a75133a83d393" kindref="member">vars</ref>.size());</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/><ref refid="classShaderSemCode_1abe6ed6468793a4cbe55a75133a83d393" kindref="member">vars</ref>.size();<sp/>++i)</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/>Var<sp/>&amp;v<sp/>=<sp/><ref refid="classShaderSemCode_1abe6ed6468793a4cbe55a75133a83d393" kindref="member">vars</ref>[i];</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/>debug(</highlight><highlight class="stringliteral">&quot;<sp/><sp/>%s<sp/>(%s)&quot;</highlight><highlight class="normal">,<sp/><ref refid="shSemCode_8h_1a9d5126adea9eafeb93403ed8b06ebbe9" kindref="member">get_semcode_var_name</ref>(v,<sp/><ref refid="classShaderSemCode_1aac5b79e9cfe65d45977555aee81fc734" kindref="member">ctx</ref>),<sp/>ShUtils::shader_var_type_name(v.type));</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/>debug(</highlight><highlight class="stringliteral">&quot;init<sp/>code:<sp/>%d<sp/>tokens&quot;</highlight><highlight class="normal">,<sp/><ref refid="classShaderSemCode_1a63a202d1e669c2a0a09e709e8e962d93" kindref="member">initcode</ref>.size());</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/><ref refid="classShaderSemCode_1a63a202d1e669c2a0a09e709e8e962d93" kindref="member">initcode</ref>.size();<sp/>i<sp/>+=<sp/>2)</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>vi<sp/>=<sp/><ref refid="classShaderSemCode_1a63a202d1e669c2a0a09e709e8e962d93" kindref="member">initcode</ref>[i];</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>c<sp/>=<sp/><ref refid="classShaderSemCode_1a63a202d1e669c2a0a09e709e8e962d93" kindref="member">initcode</ref>[i<sp/>+<sp/>1];</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(shaderopcode::getOp(c)<sp/>==<sp/>SHCOD_TEXTURE)</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>debug(</highlight><highlight class="stringliteral">&quot;<sp/><sp/>%s<sp/>&lt;-<sp/>texture.%d&quot;</highlight><highlight class="normal">,<sp/><ref refid="shSemCode_8h_1a9d5126adea9eafeb93403ed8b06ebbe9" kindref="member">get_semcode_var_name</ref>(<ref refid="classShaderSemCode_1abe6ed6468793a4cbe55a75133a83d393" kindref="member">vars</ref>[vi],<sp/><ref refid="classShaderSemCode_1aac5b79e9cfe65d45977555aee81fc734" kindref="member">ctx</ref>),<sp/>shaderopcode::getOp1p1(c));</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>debug(</highlight><highlight class="stringliteral">&quot;<sp/><sp/>%s<sp/>&lt;-<sp/>%s&quot;</highlight><highlight class="normal">,<sp/><ref refid="shSemCode_8h_1a9d5126adea9eafeb93403ed8b06ebbe9" kindref="member">get_semcode_var_name</ref>(<ref refid="classShaderSemCode_1abe6ed6468793a4cbe55a75133a83d393" kindref="member">vars</ref>[vi],<sp/><ref refid="classShaderSemCode_1aac5b79e9cfe65d45977555aee81fc734" kindref="member">ctx</ref>),<sp/>ShUtils::shcod_tokname(shaderopcode::getOp(c)));</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/><ref refid="classShaderSemCode_1a7c17fae1acb3407d2a29e9a6d771851e" kindref="member">passes</ref>.size();<sp/>++i)</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classShaderSemCode_1a7c17fae1acb3407d2a29e9a6d771851e" kindref="member">passes</ref>[i])</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>debug(</highlight><highlight class="stringliteral">&quot;dyn<sp/>variant<sp/>%d:&quot;</highlight><highlight class="normal">,<sp/>i);</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classShaderSemCode_1a7c17fae1acb3407d2a29e9a6d771851e" kindref="member">passes</ref>[i]-&gt;pass)</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classShaderSemCode_1a7c17fae1acb3407d2a29e9a6d771851e" kindref="member">passes</ref>[i]-&gt;pass-&gt;dump(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="96"><highlight class="normal">}</highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="structSemanticShaderPass_1a97feaed74846d0d34fb15d4a4f721752" kindref="member">SemanticShaderPass::dump</ref>(<ref refid="classShaderSemCode" kindref="compound">ShaderSemCode</ref><sp/>&amp;code)</highlight></codeline>
<codeline lineno="99"><highlight class="normal">{</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/>debug(</highlight><highlight class="stringliteral">&quot;<sp/><sp/>state<sp/>code:<sp/>%d<sp/>tokens&quot;</highlight><highlight class="normal">,<sp/><ref refid="namespacestcode" kindref="compound">stcode</ref>.size());</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/><ref refid="namespacestcode" kindref="compound">stcode</ref>.size();<sp/>++i)</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/>debug(</highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/>%10d<sp/>%s&quot;</highlight><highlight class="normal">,<sp/><ref refid="namespacestcode" kindref="compound">stcode</ref>[i],<sp/>ShUtils::shcod_tokname(shaderopcode::getOp(<ref refid="namespacestcode" kindref="compound">stcode</ref>[i])));</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/>debug(</highlight><highlight class="stringliteral">&quot;<sp/><sp/>stateblk<sp/>code:<sp/>%d<sp/>tokens&quot;</highlight><highlight class="normal">,<sp/><ref refid="structSemanticShaderPass_1a95cfbada8dc84fc6b43cc084c21ec41c" kindref="member">stblkcode</ref>.size());</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/><ref refid="structSemanticShaderPass_1a95cfbada8dc84fc6b43cc084c21ec41c" kindref="member">stblkcode</ref>.size();<sp/>++i)</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/>debug(</highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/>%10d<sp/>%s&quot;</highlight><highlight class="normal">,<sp/><ref refid="structSemanticShaderPass_1a95cfbada8dc84fc6b43cc084c21ec41c" kindref="member">stblkcode</ref>[i],<sp/>ShUtils::shcod_tokname(shaderopcode::getOp(<ref refid="structSemanticShaderPass_1a95cfbada8dc84fc6b43cc084c21ec41c" kindref="member">stblkcode</ref>[i])));</highlight></codeline>
<codeline lineno="106"><highlight class="normal">}</highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="classShaderSemCode_1a65b81634f689797e098f940d0029be3f" kindref="member">ShaderSemCode::find_var</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>variable_id)</highlight></codeline>
<codeline lineno="109"><highlight class="normal">{</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/><ref refid="classShaderSemCode_1abe6ed6468793a4cbe55a75133a83d393" kindref="member">vars</ref>.size();<sp/>i++)</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classShaderSemCode_1abe6ed6468793a4cbe55a75133a83d393" kindref="member">vars</ref>[i].nameId<sp/>==<sp/>variable_id)</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="115"><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="117"><highlight class="normal">}</highlight></codeline>
<codeline lineno="118"><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="normal"></highlight></codeline>
<codeline lineno="120"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="structSemanticShaderPass_1aa79e2a0883559cc16724cd876bda852d" kindref="member">SemanticShaderPass::equal</ref>(<ref refid="structSemanticShaderPass" kindref="compound">SemanticShaderPass</ref><sp/>&amp;p)</highlight></codeline>
<codeline lineno="121"><highlight class="normal">{</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="structSemanticShaderPass_1acb62a27643b4702f2a0a4ae7b96b6b8b" kindref="member">fsh</ref>.size()<sp/>!=<sp/>p.<ref refid="structSemanticShaderPass_1acb62a27643b4702f2a0a4ae7b96b6b8b" kindref="member">fsh</ref>.size())</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="structSemanticShaderPass_1acb62a27643b4702f2a0a4ae7b96b6b8b" kindref="member">fsh</ref>.data()<sp/>!=<sp/>p.<ref refid="structSemanticShaderPass_1acb62a27643b4702f2a0a4ae7b96b6b8b" kindref="member">fsh</ref>.data()<sp/>&amp;&amp;<sp/>!mem_eq(<ref refid="structSemanticShaderPass_1acb62a27643b4702f2a0a4ae7b96b6b8b" kindref="member">fsh</ref>,<sp/>p.<ref refid="structSemanticShaderPass_1acb62a27643b4702f2a0a4ae7b96b6b8b" kindref="member">fsh</ref>.data()))</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="126"><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="structSemanticShaderPass_1a4bd46214be93642551ae341082d9c150" kindref="member">vpr</ref>.size()<sp/>!=<sp/>p.<ref refid="structSemanticShaderPass_1a4bd46214be93642551ae341082d9c150" kindref="member">vpr</ref>.size())</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="structSemanticShaderPass_1a4bd46214be93642551ae341082d9c150" kindref="member">vpr</ref>.data()<sp/>!=<sp/>p.<ref refid="structSemanticShaderPass_1a4bd46214be93642551ae341082d9c150" kindref="member">vpr</ref>.data()<sp/>&amp;&amp;<sp/>!mem_eq(<ref refid="structSemanticShaderPass_1a4bd46214be93642551ae341082d9c150" kindref="member">vpr</ref>,<sp/>p.<ref refid="structSemanticShaderPass_1a4bd46214be93642551ae341082d9c150" kindref="member">vpr</ref>.data()))</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="131"><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="structSemanticShaderPass_1a905cef4efa7c6eaf2d82a8fa149a3632" kindref="member">hs</ref>.size()<sp/>!=<sp/>p.<ref refid="structSemanticShaderPass_1a905cef4efa7c6eaf2d82a8fa149a3632" kindref="member">hs</ref>.size())</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="structSemanticShaderPass_1a905cef4efa7c6eaf2d82a8fa149a3632" kindref="member">hs</ref>.data()<sp/>!=<sp/>p.<ref refid="structSemanticShaderPass_1a905cef4efa7c6eaf2d82a8fa149a3632" kindref="member">hs</ref>.data()<sp/>&amp;&amp;<sp/>!mem_eq(<ref refid="structSemanticShaderPass_1a905cef4efa7c6eaf2d82a8fa149a3632" kindref="member">hs</ref>,<sp/>p.<ref refid="structSemanticShaderPass_1a905cef4efa7c6eaf2d82a8fa149a3632" kindref="member">hs</ref>.data()))</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="136"><highlight class="normal"></highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="structSemanticShaderPass_1a74ecb081529f9074425089932ef50a56" kindref="member">ds</ref>.size()<sp/>!=<sp/>p.<ref refid="structSemanticShaderPass_1a74ecb081529f9074425089932ef50a56" kindref="member">ds</ref>.size())</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="structSemanticShaderPass_1a74ecb081529f9074425089932ef50a56" kindref="member">ds</ref>.data()<sp/>!=<sp/>p.<ref refid="structSemanticShaderPass_1a74ecb081529f9074425089932ef50a56" kindref="member">ds</ref>.data()<sp/>&amp;&amp;<sp/>!mem_eq(<ref refid="structSemanticShaderPass_1a74ecb081529f9074425089932ef50a56" kindref="member">ds</ref>,<sp/>p.<ref refid="structSemanticShaderPass_1a74ecb081529f9074425089932ef50a56" kindref="member">ds</ref>.data()))</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="141"><highlight class="normal"></highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="structSemanticShaderPass_1aee5dbc396c3fc054f2f1349a28b22207" kindref="member">gs</ref>.size()<sp/>!=<sp/>p.<ref refid="structSemanticShaderPass_1aee5dbc396c3fc054f2f1349a28b22207" kindref="member">gs</ref>.size())</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="structSemanticShaderPass_1aee5dbc396c3fc054f2f1349a28b22207" kindref="member">gs</ref>.data()<sp/>!=<sp/>p.<ref refid="structSemanticShaderPass_1aee5dbc396c3fc054f2f1349a28b22207" kindref="member">gs</ref>.data()<sp/>&amp;&amp;<sp/>!mem_eq(<ref refid="structSemanticShaderPass_1aee5dbc396c3fc054f2f1349a28b22207" kindref="member">gs</ref>,<sp/>p.<ref refid="structSemanticShaderPass_1aee5dbc396c3fc054f2f1349a28b22207" kindref="member">gs</ref>.data()))</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="146"><highlight class="normal"></highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="namespacestcode" kindref="compound">stcode</ref>.size()<sp/>!=<sp/>p.<ref refid="structSemanticShaderPass_1a3be6b5c08d771a3e5e57d89b08f9315d" kindref="member">stcode</ref>.size())</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="namespacestcode" kindref="compound">stcode</ref>.data()<sp/>!=<sp/>p.<ref refid="structSemanticShaderPass_1a3be6b5c08d771a3e5e57d89b08f9315d" kindref="member">stcode</ref>.data()<sp/>&amp;&amp;<sp/>!mem_eq(<ref refid="namespacestcode" kindref="compound">stcode</ref>,<sp/>p.<ref refid="structSemanticShaderPass_1a3be6b5c08d771a3e5e57d89b08f9315d" kindref="member">stcode</ref>.data()))</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="151"><highlight class="normal"></highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="structSemanticShaderPass_1a95cfbada8dc84fc6b43cc084c21ec41c" kindref="member">stblkcode</ref>.size()<sp/>!=<sp/>p.<ref refid="structSemanticShaderPass_1a95cfbada8dc84fc6b43cc084c21ec41c" kindref="member">stblkcode</ref>.size())</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="structSemanticShaderPass_1a95cfbada8dc84fc6b43cc084c21ec41c" kindref="member">stblkcode</ref>.data()<sp/>!=<sp/>p.<ref refid="structSemanticShaderPass_1a95cfbada8dc84fc6b43cc084c21ec41c" kindref="member">stblkcode</ref>.data()<sp/>&amp;&amp;<sp/>!mem_eq(<ref refid="structSemanticShaderPass_1a95cfbada8dc84fc6b43cc084c21ec41c" kindref="member">stblkcode</ref>,<sp/>p.<ref refid="structSemanticShaderPass_1a95cfbada8dc84fc6b43cc084c21ec41c" kindref="member">stblkcode</ref>.data()))</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="156"><highlight class="normal"></highlight></codeline>
<codeline lineno="157"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>COMPARE_V(v)<sp/>\</highlight></codeline>
<codeline lineno="158"><highlight class="preprocessor"><sp/><sp/>if<sp/>(v<sp/>!=<sp/>p.v)<sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="159"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>return<sp/>false;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><ref refid="shsem_8cpp_1a5efd1f30fdde50872091473a7e8d2961" kindref="member">COMPARE_V</ref>(<ref refid="structSemanticShaderPass_1a7ddc29244ba230d69eb7475799d62090" kindref="member">blend_src</ref>);</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><ref refid="shsem_8cpp_1a5efd1f30fdde50872091473a7e8d2961" kindref="member">COMPARE_V</ref>(<ref refid="structSemanticShaderPass_1a675a659d17bd94d8f8303752deddc5b2" kindref="member">blend_dst</ref>);</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><ref refid="shsem_8cpp_1a5efd1f30fdde50872091473a7e8d2961" kindref="member">COMPARE_V</ref>(<ref refid="structSemanticShaderPass_1a69bc37ba9af5f2f50eb3202c11d9da5b" kindref="member">blend_asrc</ref>);</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><ref refid="shsem_8cpp_1a5efd1f30fdde50872091473a7e8d2961" kindref="member">COMPARE_V</ref>(<ref refid="structSemanticShaderPass_1ab4e5c742d3d758b998dc8d58646ac019" kindref="member">blend_adst</ref>);</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><ref refid="shsem_8cpp_1a5efd1f30fdde50872091473a7e8d2961" kindref="member">COMPARE_V</ref>(<ref refid="structSemanticShaderPass_1aaaf05343f2a887f2de92a33a329c03af" kindref="member">blend_factor</ref>);</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><ref refid="shsem_8cpp_1a5efd1f30fdde50872091473a7e8d2961" kindref="member">COMPARE_V</ref>(<ref refid="structSemanticShaderPass_1aa7e5cf7b15d913c7dd5d0297df99bc8f" kindref="member">cull_mode</ref>);</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><ref refid="shsem_8cpp_1a5efd1f30fdde50872091473a7e8d2961" kindref="member">COMPARE_V</ref>(<ref refid="structSemanticShaderPass_1a3dcbc5389573f47fcccad6dcce354c42" kindref="member">alpha_to_coverage</ref>);</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><ref refid="shsem_8cpp_1a5efd1f30fdde50872091473a7e8d2961" kindref="member">COMPARE_V</ref>(<ref refid="structSemanticShaderPass_1adc658424eab012dc9714430d63be6a1f" kindref="member">z_write</ref>);</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><ref refid="shsem_8cpp_1a5efd1f30fdde50872091473a7e8d2961" kindref="member">COMPARE_V</ref>(<ref refid="structSemanticShaderPass_1a8d0deaac5133973cdd3f198a184c4ae2" kindref="member">atest_val</ref>);</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><ref refid="shsem_8cpp_1a5efd1f30fdde50872091473a7e8d2961" kindref="member">COMPARE_V</ref>(<ref refid="structSemanticShaderPass_1a6f0804b714fb61b19395eef264d55a81" kindref="member">fog_color</ref>);</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><ref refid="shsem_8cpp_1a5efd1f30fdde50872091473a7e8d2961" kindref="member">COMPARE_V</ref>(<ref refid="structSemanticShaderPass_1ac0d4c616a51fc2af2ca90c2f16715d96" kindref="member">color_write</ref>);</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><ref refid="shsem_8cpp_1a5efd1f30fdde50872091473a7e8d2961" kindref="member">COMPARE_V</ref>(<ref refid="structSemanticShaderPass_1ab0bf024e5d47d170324896dce4762b99" kindref="member">z_test</ref>);</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><ref refid="shsem_8cpp_1a5efd1f30fdde50872091473a7e8d2961" kindref="member">COMPARE_V</ref>(<ref refid="structSemanticShaderPass_1a173e9299fe86de021056dcc04d3dcfce" kindref="member">atest_func</ref>);</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><ref refid="shsem_8cpp_1a5efd1f30fdde50872091473a7e8d2961" kindref="member">COMPARE_V</ref>(<ref refid="structSemanticShaderPass_1a7f68cf1f427cdeefc9d6f379379f9f10" kindref="member">stencil</ref>);</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><ref refid="shsem_8cpp_1a5efd1f30fdde50872091473a7e8d2961" kindref="member">COMPARE_V</ref>(<ref refid="structSemanticShaderPass_1aade5d357409294c748420181a8804bdd" kindref="member">stencil_func</ref>);</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><ref refid="shsem_8cpp_1a5efd1f30fdde50872091473a7e8d2961" kindref="member">COMPARE_V</ref>(<ref refid="structSemanticShaderPass_1afd0a12e229c1ec543d65c9646e0e680c" kindref="member">stencil_ref</ref>);</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><ref refid="shsem_8cpp_1a5efd1f30fdde50872091473a7e8d2961" kindref="member">COMPARE_V</ref>(<ref refid="structSemanticShaderPass_1a98c200dcef0d75d4551506eb1d5d48b7" kindref="member">stencil_pass</ref>);</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><ref refid="shsem_8cpp_1a5efd1f30fdde50872091473a7e8d2961" kindref="member">COMPARE_V</ref>(<ref refid="structSemanticShaderPass_1ace43b6711eb9fe520f0f02f0b6c421a2" kindref="member">stencil_fail</ref>);</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><ref refid="shsem_8cpp_1a5efd1f30fdde50872091473a7e8d2961" kindref="member">COMPARE_V</ref>(<ref refid="structSemanticShaderPass_1a0be11a73500cb0f4f5a8be6fb39076bc" kindref="member">stencil_zfail</ref>);</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><ref refid="shsem_8cpp_1a5efd1f30fdde50872091473a7e8d2961" kindref="member">COMPARE_V</ref>(<ref refid="structSemanticShaderPass_1a583438567acd98d925687a9c95e330d8" kindref="member">stencil_mask</ref>);</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><ref refid="shsem_8cpp_1a5efd1f30fdde50872091473a7e8d2961" kindref="member">COMPARE_V</ref>(<ref refid="structSemanticShaderPass_1ad261baacf1cbe7bbced475127b318768" kindref="member">z_func</ref>);</highlight></codeline>
<codeline lineno="181"><highlight class="normal"></highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><ref refid="shsem_8cpp_1a5efd1f30fdde50872091473a7e8d2961" kindref="member">COMPARE_V</ref>(<ref refid="structSemanticShaderPass_1a5d310334b7b8ec2fcbb426867ebefb34" kindref="member">fog_mode</ref>);</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><ref refid="shsem_8cpp_1a5efd1f30fdde50872091473a7e8d2961" kindref="member">COMPARE_V</ref>(<ref refid="structSemanticShaderPass_1a0e671e3a6d48ca27e51affd8de3e0a9c" kindref="member">fog_density</ref>);</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><ref refid="shsem_8cpp_1a5efd1f30fdde50872091473a7e8d2961" kindref="member">COMPARE_V</ref>(<ref refid="structSemanticShaderPass_1a9ab702fa03a317c3124275ecda1289a9" kindref="member">z_bias</ref>);</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><ref refid="shsem_8cpp_1a5efd1f30fdde50872091473a7e8d2961" kindref="member">COMPARE_V</ref>(<ref refid="structSemanticShaderPass_1ad6663916487140d0dba2b427eef126cf" kindref="member">slope_z_bias</ref>);</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><ref refid="shsem_8cpp_1a5efd1f30fdde50872091473a7e8d2961" kindref="member">COMPARE_V</ref>(<ref refid="structSemanticShaderPass_1a22e0377ab73defcfc71d7258a617c1f5" kindref="member">z_bias_val</ref>);</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><ref refid="shsem_8cpp_1a5efd1f30fdde50872091473a7e8d2961" kindref="member">COMPARE_V</ref>(<ref refid="structSemanticShaderPass_1ab92d35f5c57fd9cd96f83b7004ae1744" kindref="member">slope_z_bias_val</ref>);</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><ref refid="shsem_8cpp_1a5efd1f30fdde50872091473a7e8d2961" kindref="member">COMPARE_V</ref>(<ref refid="structSemanticShaderPass_1afe3a630185f7c1448f9f50ac3a9108f5" kindref="member">force_noablend</ref>);</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><ref refid="shsem_8cpp_1a5efd1f30fdde50872091473a7e8d2961" kindref="member">COMPARE_V</ref>(<ref refid="structSemanticShaderPass_1a04ae58c79551385255c790150847373e" kindref="member">vs30</ref>);</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><ref refid="shsem_8cpp_1a5efd1f30fdde50872091473a7e8d2961" kindref="member">COMPARE_V</ref>(<ref refid="structSemanticShaderPass_1a1a76224b7f7f66632a9ac54cdbde7f46" kindref="member">ps30</ref>);</highlight></codeline>
<codeline lineno="191"><highlight class="normal"></highlight><highlight class="preprocessor">#undef<sp/>COMPARE_V</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="192"><highlight class="normal"></highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="194"><highlight class="normal">}</highlight></codeline>
<codeline lineno="195"><highlight class="normal"></highlight></codeline>
<codeline lineno="196"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="classShaderSemCode_1add322f136e40abda10f755b23b652907" kindref="member">ShaderSemCode::equal</ref>(<ref refid="classShaderSemCode" kindref="compound">ShaderSemCode</ref><sp/>&amp;c,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>compare_passes_and_vars)</highlight></codeline>
<codeline lineno="197"><highlight class="normal">{</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classShaderSemCode_1a8b32469ee07d07ba8dd9b6a7d2d20805" kindref="member">channel</ref>.size()<sp/>!=<sp/>c.<ref refid="classShaderSemCode_1a8b32469ee07d07ba8dd9b6a7d2d20805" kindref="member">channel</ref>.size())</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;channel<sp/>count&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!mem_eq(<ref refid="classShaderSemCode_1a8b32469ee07d07ba8dd9b6a7d2d20805" kindref="member">channel</ref>,<sp/>c.<ref refid="classShaderSemCode_1a8b32469ee07d07ba8dd9b6a7d2d20805" kindref="member">channel</ref>.data()))</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;channel<sp/>data&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="202"><highlight class="normal"></highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classShaderSemCode_1af8edbdef53e3a9de78f27f09f1611ddd" kindref="member">regsize</ref><sp/>!=<sp/>c.<ref refid="classShaderSemCode_1af8edbdef53e3a9de78f27f09f1611ddd" kindref="member">regsize</ref>)</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;regsize&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="207"><highlight class="normal"></highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classShaderSemCode_1a63a202d1e669c2a0a09e709e8e962d93" kindref="member">initcode</ref>.size()<sp/>!=<sp/>c.<ref refid="classShaderSemCode_1a63a202d1e669c2a0a09e709e8e962d93" kindref="member">initcode</ref>.size())</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;initcode<sp/>count&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!mem_eq(<ref refid="classShaderSemCode_1a63a202d1e669c2a0a09e709e8e962d93" kindref="member">initcode</ref>,<sp/>c.<ref refid="classShaderSemCode_1a63a202d1e669c2a0a09e709e8e962d93" kindref="member">initcode</ref>.data()))</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;initcode<sp/>data&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="212"><highlight class="normal"></highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!compare_passes_and_vars)</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="215"><highlight class="normal"></highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classShaderSemCode_1abe6ed6468793a4cbe55a75133a83d393" kindref="member">vars</ref>.size()<sp/>!=<sp/>c.<ref refid="classShaderSemCode_1abe6ed6468793a4cbe55a75133a83d393" kindref="member">vars</ref>.size())</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;variable<sp/>count&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="218"><highlight class="normal"></highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/><ref refid="classShaderSemCode_1abe6ed6468793a4cbe55a75133a83d393" kindref="member">vars</ref>.size();<sp/>++i)</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classShaderSemCode_1abe6ed6468793a4cbe55a75133a83d393" kindref="member">vars</ref>[i].type<sp/>!=<sp/>c.<ref refid="classShaderSemCode_1abe6ed6468793a4cbe55a75133a83d393" kindref="member">vars</ref>[i].type)</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;variable<sp/>type&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classShaderSemCode_1abe6ed6468793a4cbe55a75133a83d393" kindref="member">vars</ref>[i].nameId<sp/>!=<sp/>c.<ref refid="classShaderSemCode_1abe6ed6468793a4cbe55a75133a83d393" kindref="member">vars</ref>[i].nameId)</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;variable<sp/>name&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="227"><highlight class="normal"></highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classShaderSemCode_1a22aaacb40c47624c706112ca7e107518" kindref="member">stvarmap</ref>.size()<sp/>!=<sp/>c.<ref refid="classShaderSemCode_1a22aaacb40c47624c706112ca7e107518" kindref="member">stvarmap</ref>.size())</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;stvarmap<sp/>count&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!mem_eq(<ref refid="classShaderSemCode_1a22aaacb40c47624c706112ca7e107518" kindref="member">stvarmap</ref>,<sp/>c.<ref refid="classShaderSemCode_1a22aaacb40c47624c706112ca7e107518" kindref="member">stvarmap</ref>.data()))</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;stvarmap<sp/>data&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="232"><highlight class="normal"></highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classShaderSemCode_1a7c17fae1acb3407d2a29e9a6d771851e" kindref="member">passes</ref>.size()<sp/>!=<sp/>c.<ref refid="classShaderSemCode_1a7c17fae1acb3407d2a29e9a6d771851e" kindref="member">passes</ref>.size())</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;different<sp/>number<sp/>of<sp/>dynamic<sp/>variants&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="235"><highlight class="normal"></highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>di<sp/>=<sp/>0;<sp/>di<sp/>&lt;<sp/><ref refid="classShaderSemCode_1a7c17fae1acb3407d2a29e9a6d771851e" kindref="member">passes</ref>.size();<sp/>++di)</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structShaderSemCode_1_1PassTab" kindref="compound">ShaderSemCode::PassTab</ref><sp/>*thisTab<sp/>=<sp/><ref refid="classShaderSemCode_1a7c17fae1acb3407d2a29e9a6d771851e" kindref="member">passes</ref>[di].get();</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structShaderSemCode_1_1PassTab" kindref="compound">ShaderSemCode::PassTab</ref><sp/>*otherTab<sp/>=<sp/>c.<ref refid="classShaderSemCode_1a7c17fae1acb3407d2a29e9a6d771851e" kindref="member">passes</ref>[di].get();</highlight></codeline>
<codeline lineno="240"><highlight class="normal"></highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!thisTab<sp/>&amp;&amp;<sp/>!otherTab)</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="243"><highlight class="normal"></highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!thisTab<sp/>||<sp/>!otherTab)</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;no<sp/>passes&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="246"><highlight class="normal"></highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(thisTab-&gt;<ref refid="structShaderSemCode_1_1PassTab_1a510383fcc909f26223207e76596b4e69" kindref="member">pass</ref>.has_value()<sp/>!=<sp/>otherTab-&gt;<ref refid="structShaderSemCode_1_1PassTab_1a510383fcc909f26223207e76596b4e69" kindref="member">pass</ref>.has_value())</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;diffirent<sp/>passes<sp/>count&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="249"><highlight class="normal"></highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(thisTab-&gt;<ref refid="structShaderSemCode_1_1PassTab_1a510383fcc909f26223207e76596b4e69" kindref="member">pass</ref>)</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!thisTab-&gt;<ref refid="structShaderSemCode_1_1PassTab_1a510383fcc909f26223207e76596b4e69" kindref="member">pass</ref>-&gt;equal(*otherTab-&gt;<ref refid="structShaderSemCode_1_1PassTab_1a510383fcc909f26223207e76596b4e69" kindref="member">pass</ref>))</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;pass<sp/>not<sp/>equal&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="254"><highlight class="normal"></highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="256"><highlight class="normal">}</highlight></codeline>
<codeline lineno="257"><highlight class="normal"></highlight></codeline>
<codeline lineno="258"><highlight class="normal"></highlight><highlight class="comment">//<sp/>³³³³³³³³³³³³³³³³³³³³³³³³³³³³³³³³³³³³³³³³³³³³³³³³³³³³³³³³³³³³³³³³³³³³³³³³³³//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="259"><highlight class="normal"></highlight></codeline>
<codeline lineno="260"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespaceShaderParser" kindref="compound">ShaderParser</ref></highlight></codeline>
<codeline lineno="261"><highlight class="normal">{</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><ref refid="structPerHlslStage" kindref="compound">PerHlslStage&lt;CodeSourceBlocks *&gt;</ref><sp/><ref refid="namespaceShaderParser_1aee6486690122ed0b79d805c40be4203e" kindref="member">curHlslBlks</ref>{};</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><ref refid="nameMap_8h_1ad3f42c540507651a7e4ce93760afc216" kindref="member">SCFastNameMap</ref><sp/><ref refid="namespaceShaderParser_1ab4b8a9d96a5cf3248e842617aa3fe8a7" kindref="member">renderStageToIdxMap</ref>;</highlight></codeline>
<codeline lineno="264"><highlight class="normal"></highlight></codeline>
<codeline lineno="265"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>eval_shader_stat(shader_stat<sp/>&amp;s,<sp/><ref refid="classShaderParser_1_1ShaderEvalCB" kindref="compound">ShaderEvalCB</ref><sp/>&amp;cb);</highlight></codeline>
<codeline lineno="266"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>eval_shader_stat(shader_stat<sp/>*s,<sp/><ref refid="classShaderParser_1_1ShaderEvalCB" kindref="compound">ShaderEvalCB</ref><sp/>&amp;cb);</highlight></codeline>
<codeline lineno="267"><highlight class="normal"></highlight></codeline>
<codeline lineno="268"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>eval_shader_if(shader_if<sp/>&amp;s,<sp/><ref refid="classShaderParser_1_1ShaderEvalCB" kindref="compound">ShaderEvalCB</ref><sp/>&amp;cb)</highlight></codeline>
<codeline lineno="269"><highlight class="normal">{</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/>G_ASSERT(s.expr);</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>res<sp/>=<sp/>cb.<ref refid="classShaderParser_1_1ShaderEvalCB_1a515e729e35d13de79ffbea9eacbd9d70" kindref="member">eval_if</ref>(*s.expr);</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(res<sp/>==<sp/><ref refid="classShaderParser_1_1ShaderEvalCB_1a4e485b7ac1252d1a948698ab76ccd7cfa795199991378708f0bd9307c73262846" kindref="member">ShaderEvalCB::IF_TRUE</ref><sp/>||<sp/>res<sp/>==<sp/><ref refid="classShaderParser_1_1ShaderEvalCB_1a4e485b7ac1252d1a948698ab76ccd7cfa67354fcef9c601179eef2864b8228b76" kindref="member">ShaderEvalCB::IF_BOTH</ref>)</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>s.true_stat.size();<sp/>++i)</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>eval_shader_stat(s.true_stat[i],<sp/>cb);</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(s.false_stat.size()<sp/>||<sp/>s.else_if)</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/>cb.<ref refid="classShaderParser_1_1ShaderEvalCB_1a989962b2c720c97dcfc93e7c5d60caea" kindref="member">eval_else</ref>(*s.expr);</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(res<sp/>==<sp/><ref refid="classShaderParser_1_1ShaderEvalCB_1a4e485b7ac1252d1a948698ab76ccd7cfa58399c8728006ad1e82d90527d55d3c6" kindref="member">ShaderEvalCB::IF_FALSE</ref><sp/>||<sp/>res<sp/>==<sp/><ref refid="classShaderParser_1_1ShaderEvalCB_1a4e485b7ac1252d1a948698ab76ccd7cfa67354fcef9c601179eef2864b8228b76" kindref="member">ShaderEvalCB::IF_BOTH</ref>)</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>s.false_stat.size();<sp/>++i)</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>eval_shader_stat(s.false_stat[i],<sp/>cb);</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(s.else_if)</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>eval_shader_if(*s.else_if,<sp/>cb);</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/>cb.<ref refid="classShaderParser_1_1ShaderEvalCB_1aad4f2cba55111bfe7c17380c714f3383" kindref="member">eval_endif</ref>(*s.expr);</highlight></codeline>
<codeline lineno="287"><highlight class="normal">}</highlight></codeline>
<codeline lineno="288"><highlight class="normal"></highlight></codeline>
<codeline lineno="289"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>eval_shader_stat(shader_stat<sp/>&amp;s,<sp/><ref refid="classShaderParser_1_1ShaderEvalCB" kindref="compound">ShaderEvalCB</ref><sp/>&amp;cb)</highlight></codeline>
<codeline lineno="290"><highlight class="normal">{</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(s.static_decl)</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/>cb.<ref refid="classShaderParser_1_1ShaderEvalCB_1a773524a09efd3b118970955178a69efd" kindref="member">eval_static</ref>(*s.static_decl);</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(s.interval_decl)</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/>cb.<ref refid="classShaderParser_1_1ShaderEvalCB_1ad1e613fd064621334abb0c35002af923" kindref="member">eval_interval_decl</ref>(*s.interval_decl);</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(s.state)</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/>cb.<ref refid="classShaderParser_1_1ShaderEvalCB_1a484b9919d67d330ad15f99a673aeb3f3" kindref="member">eval_state</ref>(*s.state);</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(s.zbias_state)</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/>cb.<ref refid="classShaderParser_1_1ShaderEvalCB_1a9bed93ba21bf89440d7b037f4ac2800d" kindref="member">eval_zbias_state</ref>(*s.zbias_state);</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(s.channel)</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/>cb.<ref refid="classShaderParser_1_1ShaderEvalCB_1a4342c33792df4746ba4575adeebad9e7" kindref="member">eval_channel_decl</ref>(*s.channel);</highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(s.render_stage)</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/>cb.<ref refid="classShaderParser_1_1ShaderEvalCB_1aadbbbbeee8e38a94cfbc2a59f0108b89" kindref="member">eval_render_stage</ref>(*s.render_stage);</highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(s.assume)</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/>cb.<ref refid="classShaderParser_1_1ShaderEvalCB_1a4a1e738e214667e11fc939008f4f3c95" kindref="member">eval_assume_stat</ref>(*s.assume);</highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(s.assume_if_not_assumed)</highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/>cb.<ref refid="classShaderParser_1_1ShaderEvalCB_1a5117e36e50dbf966e0e8d09d291523ff" kindref="member">eval_assume_if_not_assumed_stat</ref>(*s.assume_if_not_assumed);</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(s.dir)</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/>cb.<ref refid="classShaderParser_1_1ShaderEvalCB_1ab93a6a4886b18225c46688a355703854" kindref="member">eval_command</ref>(*s.dir);</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(s.if_stat)</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/>eval_shader_if(*s.if_stat,<sp/>cb);</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(s.local_decl)</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/>cb.<ref refid="classShaderParser_1_1ShaderEvalCB_1a4c4bdf71ee607e8951eaee08654fc954" kindref="member">eval_shader_locdecl</ref>(*s.local_decl);</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(s.hlsl_compile_var)</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/>cb.<ref refid="classShaderParser_1_1ShaderEvalCB_1a9ea4626b3b1eab41bd7a8fadfad3c349" kindref="member">eval_hlsl_compile</ref>(*s.hlsl_compile_var);</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(s.hlsl_decl_var)</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/>cb.<ref refid="classShaderParser_1_1ShaderEvalCB_1aeca67333ebe04120b20e000ee0bf826a" kindref="member">eval_hlsl_decl</ref>(*s.hlsl_decl_var);</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(s.supports)</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/>cb.<ref refid="classShaderParser_1_1ShaderEvalCB_1a6da845097d790e43f21f1d743f0b4ea7" kindref="member">eval_supports</ref>(*s.supports);</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(s.external_block)</highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/>cb.<ref refid="classShaderParser_1_1ShaderEvalCB_1af335c328a2c5792ea32c2429be3d308a" kindref="member">eval_external_block</ref>(*s.external_block);</highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(s.imm_const_block)</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/>cb.<ref refid="classShaderParser_1_1ShaderEvalCB_1a2a70eff4ba8af3b3efc57fb6eb0ac15c" kindref="member">eval</ref>(*s.imm_const_block);</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(s.boolean_decl)</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/>cb.<ref refid="classShaderParser_1_1ShaderEvalCB_1a0b1484996b87155daf73af501febbd9d" kindref="member">eval_bool_decl</ref>(*s.boolean_decl);</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(s.error)</highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/>cb.<ref refid="classShaderParser_1_1ShaderEvalCB_1a4feaa347af2510e01f37ebc31027211a" kindref="member">eval_error_stat</ref>(*s.error);</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>error</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/>G_ASSERT(0);</highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="332"><highlight class="normal">}</highlight></codeline>
<codeline lineno="333"><highlight class="normal"></highlight></codeline>
<codeline lineno="334"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>eval_shader_stat(shader_stat<sp/>*s,<sp/><ref refid="classShaderParser_1_1ShaderEvalCB" kindref="compound">ShaderEvalCB</ref><sp/>&amp;cb)</highlight></codeline>
<codeline lineno="335"><highlight class="normal">{</highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(s)</highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/><sp/>eval_shader_stat(*s,<sp/>cb);</highlight></codeline>
<codeline lineno="338"><highlight class="normal">}</highlight></codeline>
<codeline lineno="339"><highlight class="normal"></highlight></codeline>
<codeline lineno="340"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>is_compute(hlsl_compile_class<sp/>&amp;hlsl_compile)</highlight></codeline>
<codeline lineno="341"><highlight class="normal">{</highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>dd_strnicmp(hlsl_compile.profile-&gt;text,<sp/></highlight><highlight class="stringliteral">&quot;target_cs&quot;</highlight><highlight class="normal">,<sp/>9)<sp/>==<sp/>0<sp/>||<sp/>dd_strnicmp(hlsl_compile.profile-&gt;text,<sp/></highlight><highlight class="stringliteral">&quot;cs_&quot;</highlight><highlight class="normal">,<sp/>3)<sp/>==<sp/>0;</highlight></codeline>
<codeline lineno="343"><highlight class="normal">}</highlight></codeline>
<codeline lineno="344"><highlight class="normal"></highlight></codeline>
<codeline lineno="345"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceShaderParser_1a8b2de0f58f42716ceef426ff537f1c0d" kindref="member">eval_shader</ref>(shader_decl<sp/>&amp;sh,<sp/><ref refid="classShaderParser_1_1ShaderEvalCB" kindref="compound">ShaderEvalCB</ref><sp/>&amp;cb)</highlight></codeline>
<codeline lineno="346"><highlight class="normal">{</highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>sh.stat.size();<sp/>++i)</highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/><sp/>eval_shader_stat(sh.stat[i],<sp/>cb);</highlight></codeline>
<codeline lineno="349"><highlight class="normal">}</highlight></codeline>
<codeline lineno="350"><highlight class="normal"></highlight></codeline>
<codeline lineno="351"><highlight class="normal"></highlight><highlight class="comment">//<sp/>³³³³³³³³³³³³³³³³³³³³³³³³³³³³³³³³³³³³³³³³³³³³³³³³³³³³³³³³³³³³³³³³³³³³³³³³³³//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="352"><highlight class="normal"></highlight></codeline>
<codeline lineno="353"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>USE_CB_FOR_NESTED_EXPRESSIONS&gt;</highlight></codeline>
<codeline lineno="354"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="classShVarBool" kindref="compound">ShVarBool</ref><sp/>eval_shader_bool_not(not_expr<sp/>&amp;e,<sp/><ref refid="classShaderParser_1_1ShaderBoolEvalCB" kindref="compound">ShaderBoolEvalCB</ref><sp/>&amp;cb)</highlight></codeline>
<codeline lineno="355"><highlight class="normal">{</highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/>G_ASSERT(&amp;e);</highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/>G_ASSERT(e.value);</highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><ref refid="classShVarBool" kindref="compound">ShVarBool</ref><sp/>v;</highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(e.value-&gt;expr)</highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/>v<sp/>=<sp/>USE_CB_FOR_NESTED_EXPRESSIONS<sp/>?<sp/>cb.<ref refid="classShaderParser_1_1ShaderBoolEvalCB_1a9adf5ca170f128f4b53c4dce191b6e1b" kindref="member">eval_expr</ref>(*e.value-&gt;expr)<sp/>:<sp/><ref refid="namespaceShaderParser_1abe4ee9e9422afa7c95b8fdac0635a539" kindref="member">eval_shader_bool</ref>(*e.value-&gt;expr,<sp/>cb);</highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/><sp/>v<sp/>=<sp/>cb.<ref refid="classShaderParser_1_1ShaderBoolEvalCB_1a07dc087d3c096d83623b89cc7b02acc7" kindref="member">eval_bool_value</ref>(*e.value);</highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(e.is_not)</highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><sp/><sp/>v<sp/>=<sp/>!v;</highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>v;</highlight></codeline>
<codeline lineno="366"><highlight class="normal">}</highlight></codeline>
<codeline lineno="367"><highlight class="normal"></highlight></codeline>
<codeline lineno="368"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>USE_CB_FOR_NESTED_EXPRESSIONS&gt;</highlight></codeline>
<codeline lineno="369"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="classShVarBool" kindref="compound">ShVarBool</ref><sp/>eval_shader_bool_and(and_expr<sp/>&amp;e,<sp/><ref refid="classShaderParser_1_1ShaderBoolEvalCB" kindref="compound">ShaderBoolEvalCB</ref><sp/>&amp;cb)</highlight></codeline>
<codeline lineno="370"><highlight class="normal">{</highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(e.value)</highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classShVarBool" kindref="compound">ShVarBool</ref><sp/>v<sp/>=<sp/>eval_shader_bool_not&lt;USE_CB_FOR_NESTED_EXPRESSIONS&gt;(*e.value,<sp/>cb);</highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>v;</highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="376"><highlight class="normal"></highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/><ref refid="classShVarBool" kindref="compound">ShVarBool</ref><sp/>a<sp/>=<sp/>eval_shader_bool_and&lt;USE_CB_FOR_NESTED_EXPRESSIONS&gt;(*e.a,<sp/>cb);</highlight></codeline>
<codeline lineno="378"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(FAST_BOOLEAN_EVAL)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(a.<ref refid="classShVarBool_1a56bef58e491d1cb5488cd5be282fe3bc" kindref="member">isConst</ref><sp/>&amp;&amp;<sp/>!a.<ref refid="classShVarBool_1aa1e84216403109d360db42129c7f698d" kindref="member">value</ref>)</highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>a;</highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="383"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="384"><highlight class="normal"></highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/><ref refid="classShVarBool" kindref="compound">ShVarBool</ref><sp/>b<sp/>=<sp/>eval_shader_bool_not&lt;USE_CB_FOR_NESTED_EXPRESSIONS&gt;(*e.b,<sp/>cb);</highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>a<sp/>&amp;&amp;<sp/>b;</highlight></codeline>
<codeline lineno="387"><highlight class="normal">}</highlight></codeline>
<codeline lineno="388"><highlight class="normal"></highlight></codeline>
<codeline lineno="389"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>USE_CB_FOR_NESTED_EXPRESSIONS&gt;</highlight></codeline>
<codeline lineno="390"><highlight class="normal"><ref refid="classShVarBool" kindref="compound">ShVarBool</ref><sp/><ref refid="namespaceShaderParser_1abe4ee9e9422afa7c95b8fdac0635a539" kindref="member">eval_shader_bool</ref>(bool_expr<sp/>&amp;e,<sp/><ref refid="classShaderParser_1_1ShaderBoolEvalCB" kindref="compound">ShaderBoolEvalCB</ref><sp/>&amp;cb)</highlight></codeline>
<codeline lineno="391"><highlight class="normal">{</highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/>G_ASSERT(&amp;e);</highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(e.value)</highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classShVarBool" kindref="compound">ShVarBool</ref><sp/>v<sp/>=<sp/>eval_shader_bool_and&lt;USE_CB_FOR_NESTED_EXPRESSIONS&gt;(*e.value,<sp/>cb);</highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>v;</highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="398"><highlight class="normal"></highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/><ref refid="classShVarBool" kindref="compound">ShVarBool</ref><sp/>a<sp/>=<sp/>USE_CB_FOR_NESTED_EXPRESSIONS<sp/>?<sp/>cb.<ref refid="classShaderParser_1_1ShaderBoolEvalCB_1a9adf5ca170f128f4b53c4dce191b6e1b" kindref="member">eval_expr</ref>(*e.a)<sp/>:<sp/><ref refid="namespaceShaderParser_1abe4ee9e9422afa7c95b8fdac0635a539" kindref="member">eval_shader_bool</ref>(*e.a,<sp/>cb);</highlight></codeline>
<codeline lineno="400"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(FAST_BOOLEAN_EVAL)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(a.<ref refid="classShVarBool_1a56bef58e491d1cb5488cd5be282fe3bc" kindref="member">isConst</ref><sp/>&amp;&amp;<sp/>a.<ref refid="classShVarBool_1aa1e84216403109d360db42129c7f698d" kindref="member">value</ref>)</highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>a;</highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="405"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="406"><highlight class="normal"></highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/><ref refid="classShVarBool" kindref="compound">ShVarBool</ref><sp/>b<sp/>=<sp/>eval_shader_bool_and&lt;USE_CB_FOR_NESTED_EXPRESSIONS&gt;(*e.b,<sp/>cb);</highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>a<sp/>||<sp/>b;</highlight></codeline>
<codeline lineno="409"><highlight class="normal">}</highlight></codeline>
<codeline lineno="410"><highlight class="normal"></highlight></codeline>
<codeline lineno="411"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/><ref refid="classShVarBool" kindref="compound">ShVarBool</ref><sp/><ref refid="namespaceShaderParser_1a5b550ff262c6d3c7c43fd77364b80d63" kindref="member">eval_shader_bool&lt;true&gt;</ref>(bool_expr<sp/>&amp;e,<sp/><ref refid="classShaderParser_1_1ShaderBoolEvalCB" kindref="compound">ShaderBoolEvalCB</ref><sp/>&amp;cb);</highlight></codeline>
<codeline lineno="412"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/><ref refid="classShVarBool" kindref="compound">ShVarBool</ref><sp/><ref refid="namespaceShaderParser_1a654be2836a5b79c2a4f99eee45309501" kindref="member">eval_shader_bool&lt;false&gt;</ref>(bool_expr<sp/>&amp;e,<sp/><ref refid="classShaderParser_1_1ShaderBoolEvalCB" kindref="compound">ShaderBoolEvalCB</ref><sp/>&amp;cb);</highlight></codeline>
<codeline lineno="413"><highlight class="normal"></highlight></codeline>
<codeline lineno="414"><highlight class="normal"></highlight><highlight class="comment">//<sp/>³³³³³³³³³³³³³³³³³³³³³³³³³³³³³³³³³³³³³³³³³³³³³³³³³³³³³³³³³³³³³³³³³³³³³³³³³³//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="415"><highlight class="normal"></highlight></codeline>
<codeline lineno="416" refid="structShaderParser_1_1EvaluatedShaderVariant" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structShaderParser_1_1EvaluatedShaderVariant" kindref="compound">EvaluatedShaderVariant</ref></highlight></codeline>
<codeline lineno="417"><highlight class="normal">{</highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/><ref refid="classShaderSemCode" kindref="compound">ShaderSemCode</ref><sp/>semcode;</highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/>eastl::unique_ptr&lt;ShaderSemCode::PassTab&gt;<sp/>pass;</highlight></codeline>
<codeline lineno="420"><highlight class="normal"></highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="structShaderParser_1_1EvaluatedShaderVariant" kindref="compound">EvaluatedShaderVariant</ref>(<ref refid="classshc_1_1TargetContext" kindref="compound">shc::TargetContext</ref><sp/>&amp;ctx)<sp/>:<sp/>semcode{ctx},<sp/>pass{</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="structShaderSemCode_1_1PassTab" kindref="compound">ShaderSemCode::PassTab</ref>{}}<sp/>{<sp/>pass-&gt;<ref refid="structShaderSemCode_1_1PassTab_1a510383fcc909f26223207e76596b4e69" kindref="member">pass</ref>.emplace();<sp/>}</highlight></codeline>
<codeline lineno="422"><highlight class="normal">};</highlight></codeline>
<codeline lineno="423"><highlight class="normal"></highlight></codeline>
<codeline lineno="424"><highlight class="normal"></highlight><highlight class="comment">//<sp/>return<sp/>true,<sp/>if<sp/>need<sp/>render</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="425"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>eastl::optional&lt;EvaluatedShaderVariant&gt;<sp/>evalShaderVariant(shader_decl<sp/>*sh,<sp/><ref refid="structParser" kindref="compound">Parser</ref><sp/>&amp;parser,</highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structShaderVariant_1_1VariantInfo" kindref="compound">ShaderVariant::VariantInfo</ref><sp/>&amp;variant,<sp/><ref refid="classshc_1_1ShaderContext" kindref="compound">shc::ShaderContext</ref><sp/>&amp;ctx)</highlight></codeline>
<codeline lineno="427"><highlight class="normal">{</highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/><ref refid="structShaderParser_1_1EvaluatedShaderVariant" kindref="compound">EvaluatedShaderVariant</ref><sp/>res{ctx.<ref refid="classshc_1_1ShaderContext_1a8d1967ec973d0ffe1c0ddb78cec30dce" kindref="member">tgtCtx</ref>()};</highlight></codeline>
<codeline lineno="429"><highlight class="normal"></highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/><ref refid="classshc_1_1VariantContext" kindref="compound">shc::VariantContext</ref><sp/>variantCtx<sp/>=<sp/>ctx.<ref refid="classshc_1_1ShaderContext_1a62a59e2a2d91f7584650feed9e11d3bb" kindref="member">makeVariantContext</ref>(variant,<sp/>res.semcode,<sp/>res.pass.get());</highlight></codeline>
<codeline lineno="431"><highlight class="normal"></highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>evaluate<sp/>shader</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/>parser.<ref refid="structParser_1a9e9bc1e12aec4ba300d71598132ae8ec" kindref="member">get_lexer</ref>().<ref refid="classLexer_1a6995e86b55fa74bb82e81a90c4e8c407" kindref="member">begin_shader</ref>();</highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/><ref refid="classShaderParser_1_1AssembleShaderEvalCB" kindref="compound">AssembleShaderEvalCB</ref><sp/>cb{variantCtx};</highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceShaderParser_1a8b2de0f58f42716ceef426ff537f1c0d" kindref="member">eval_shader</ref>(*sh,<sp/>cb);</highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/><sp/><sp/>cb.end_eval(*sh);</highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal"><sp/>(<ref refid="structShaderParser_1_1ShaderEvalCB_1_1GsclStopProcessingException" kindref="compound">ShaderEvalCB::GsclStopProcessingException</ref><sp/>e)</highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/>{}</highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/>parser.<ref refid="structParser_1a9e9bc1e12aec4ba300d71598132ae8ec" kindref="member">get_lexer</ref>().<ref refid="classLexer_1ae4681cb946cc2cad2f9d8f4054fe4a0b" kindref="member">end_shader</ref>();</highlight></codeline>
<codeline lineno="443"><highlight class="normal"></highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cb.dont_render)</highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>render<sp/>not<sp/>needed<sp/>-<sp/>skip<sp/>shader<sp/>code<sp/>selection</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>eastl::nullopt;</highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="449"><highlight class="normal"></highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>res;</highlight></codeline>
<codeline lineno="451"><highlight class="normal">}</highlight></codeline>
<codeline lineno="452"><highlight class="normal"></highlight></codeline>
<codeline lineno="453"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>shaderError(<ref refid="structParser" kindref="compound">Parser</ref><sp/>&amp;parser,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*msg,<sp/>Terminal<sp/>*t)</highlight></codeline>
<codeline lineno="454"><highlight class="normal">{</highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(t)</highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/><sp/><sp/>parser.<ref refid="structParser_1a9e9bc1e12aec4ba300d71598132ae8ec" kindref="member">get_lexer</ref>().<ref refid="classLexer_1a15173ff3748bd39e52a74ddae376a785" kindref="member">set_error</ref>(t-&gt;file_start,<sp/>t-&gt;line_start,<sp/>t-&gt;col_start,<sp/>msg);</highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/><sp/><sp/>parser.<ref refid="structParser_1a9e9bc1e12aec4ba300d71598132ae8ec" kindref="member">get_lexer</ref>().<ref refid="classLexer_1a15173ff3748bd39e52a74ddae376a785" kindref="member">set_error</ref>(msg);</highlight></codeline>
<codeline lineno="459"><highlight class="normal">}</highlight></codeline>
<codeline lineno="460"><highlight class="normal"></highlight></codeline>
<codeline lineno="461"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>shaderWarn(<ref refid="structParser" kindref="compound">Parser</ref><sp/>&amp;parser,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*msg,<sp/>Terminal<sp/>*t)</highlight></codeline>
<codeline lineno="462"><highlight class="normal">{</highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/>G_ASSERT(t);</highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/>parser.<ref refid="structParser_1a9e9bc1e12aec4ba300d71598132ae8ec" kindref="member">get_lexer</ref>().<ref refid="classLexer_1a81f0bc82f294c9b3d4b8965c52afede6" kindref="member">set_warning</ref>(t-&gt;file_start,<sp/>t-&gt;line_start,<sp/>t-&gt;col_start,<sp/>msg);</highlight></codeline>
<codeline lineno="465"><highlight class="normal">}</highlight></codeline>
<codeline lineno="466"><highlight class="normal"></highlight></codeline>
<codeline lineno="467"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>validate_cs(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classShaderClass" kindref="compound">ShaderClass</ref><sp/>&amp;sclass,<sp/><ref refid="classShaderSemCode" kindref="compound">ShaderSemCode</ref><sp/>*ssc,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>staticVariantCount)</highlight></codeline>
<codeline lineno="468"><highlight class="normal">{</highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>has_cs<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/>has_non_cs<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/>has_void<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>m<sp/>=<sp/>0;<sp/>m<sp/>&lt;<sp/>ssc-&gt;<ref refid="classShaderSemCode_1a7c17fae1acb3407d2a29e9a6d771851e" kindref="member">passes</ref>.size();<sp/>m++)</highlight></codeline>
<codeline lineno="471"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!ssc-&gt;<ref refid="classShaderSemCode_1a7c17fae1acb3407d2a29e9a6d771851e" kindref="member">passes</ref>[m])</highlight></codeline>
<codeline lineno="472"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>has_void<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ssc-&gt;<ref refid="classShaderSemCode_1a7c17fae1acb3407d2a29e9a6d771851e" kindref="member">passes</ref>[m]-&gt;pass)</highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="477"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ssc-&gt;<ref refid="classShaderSemCode_1a7c17fae1acb3407d2a29e9a6d771851e" kindref="member">passes</ref>[m]-&gt;pass-&gt;cs.size())</highlight></codeline>
<codeline lineno="478"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>has_cs<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ssc-&gt;<ref refid="classShaderSemCode_1a7c17fae1acb3407d2a29e9a6d771851e" kindref="member">passes</ref>[m]-&gt;pass-&gt;vpr.size()<sp/>||<sp/>ssc-&gt;<ref refid="classShaderSemCode_1a7c17fae1acb3407d2a29e9a6d771851e" kindref="member">passes</ref>[m]-&gt;pass-&gt;fsh.size())</highlight></codeline>
<codeline lineno="480"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>has_non_cs<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!ssc-&gt;<ref refid="classShaderSemCode_1a7c17fae1acb3407d2a29e9a6d771851e" kindref="member">passes</ref>[m]-&gt;pass-&gt;fsh.size()<sp/>&amp;&amp;<sp/>!ssc-&gt;<ref refid="classShaderSemCode_1a7c17fae1acb3407d2a29e9a6d771851e" kindref="member">passes</ref>[m]-&gt;pass-&gt;vpr.size()<sp/>&amp;&amp;<sp/>!ssc-&gt;<ref refid="classShaderSemCode_1a7c17fae1acb3407d2a29e9a6d771851e" kindref="member">passes</ref>[m]-&gt;pass-&gt;cs.size())</highlight></codeline>
<codeline lineno="482"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>has_void<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="483"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="484"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="485"><highlight class="normal"></highlight></codeline>
<codeline lineno="486"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!has_cs)</highlight></codeline>
<codeline lineno="487"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="488"><highlight class="normal"></highlight></codeline>
<codeline lineno="489"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>validate<sp/>compute<sp/>shader<sp/>case</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="490"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stvar_cnt<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="491"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>m<sp/>=<sp/>0;<sp/>m<sp/>&lt;<sp/>ssc-&gt;<ref refid="classShaderSemCode_1abe6ed6468793a4cbe55a75133a83d393" kindref="member">vars</ref>.size();<sp/>m++)</highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!ssc-&gt;<ref refid="classShaderSemCode_1abe6ed6468793a4cbe55a75133a83d393" kindref="member">vars</ref>[m].dynamic)</highlight></codeline>
<codeline lineno="493"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>stvar_cnt++;</highlight></codeline>
<codeline lineno="494"><highlight class="normal"></highlight></codeline>
<codeline lineno="495"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(stvar_cnt)</highlight></codeline>
<codeline lineno="496"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="shLog_8cpp_1a2926179632c7c86265007652d3d30b14" kindref="member">sh_debug</ref>(<ref refid="shLog_8h_1a66042048eb3ce30a1dccb2ebf8c2fd5caae3b70b41400c8a36e8a094ac1dbe43c" kindref="member">SHLOG_ERROR</ref>,<sp/></highlight><highlight class="stringliteral">&quot;shader(%s):<sp/>Compute<sp/>shaders<sp/>shall<sp/>not<sp/>have<sp/>static<sp/>variables<sp/>(%d<sp/>found)&quot;</highlight><highlight class="normal">,<sp/>sclass.<ref refid="classShaderClass_1a7dade6337edb610925324439779864b4" kindref="member">name</ref>.c_str(),<sp/>stvar_cnt);</highlight></codeline>
<codeline lineno="497"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(staticVariantCount<sp/>&gt;<sp/>1)</highlight></codeline>
<codeline lineno="498"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="shLog_8cpp_1a2926179632c7c86265007652d3d30b14" kindref="member">sh_debug</ref>(<ref refid="shLog_8h_1a66042048eb3ce30a1dccb2ebf8c2fd5caae3b70b41400c8a36e8a094ac1dbe43c" kindref="member">SHLOG_ERROR</ref>,<sp/></highlight><highlight class="stringliteral">&quot;shader(%s):<sp/>Compute<sp/>shaders<sp/>shall<sp/>not<sp/>have<sp/>static<sp/>variants<sp/>(%d<sp/>found)&quot;</highlight><highlight class="normal">,<sp/>sclass.<ref refid="classShaderClass_1a7dade6337edb610925324439779864b4" kindref="member">name</ref>.c_str(),</highlight></codeline>
<codeline lineno="499"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>staticVariantCount);</highlight></codeline>
<codeline lineno="500"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(has_non_cs)</highlight></codeline>
<codeline lineno="501"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="shLog_8cpp_1a2926179632c7c86265007652d3d30b14" kindref="member">sh_debug</ref>(<ref refid="shLog_8h_1a66042048eb3ce30a1dccb2ebf8c2fd5caae3b70b41400c8a36e8a094ac1dbe43c" kindref="member">SHLOG_ERROR</ref>,<sp/></highlight><highlight class="stringliteral">&quot;shader(%s):<sp/>Compute<sp/>shaders<sp/>shall<sp/>not<sp/>mixed<sp/>with<sp/>other<sp/>shaders&quot;</highlight><highlight class="normal">,<sp/>sclass.<ref refid="classShaderClass_1a7dade6337edb610925324439779864b4" kindref="member">name</ref>.c_str());</highlight></codeline>
<codeline lineno="502"><highlight class="normal"></highlight></codeline>
<codeline lineno="503"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>strip<sp/>stblk<sp/>code</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="504"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="structErrorCounter_1a16e83af848da6b273387e7f9078aff89" kindref="member">ErrorCounter::curShader</ref>().err)</highlight></codeline>
<codeline lineno="505"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="506"><highlight class="normal"></highlight></codeline>
<codeline lineno="507"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>m<sp/>=<sp/>0;<sp/>m<sp/>&lt;<sp/>ssc-&gt;<ref refid="classShaderSemCode_1a7c17fae1acb3407d2a29e9a6d771851e" kindref="member">passes</ref>.size();<sp/>m++)</highlight></codeline>
<codeline lineno="508"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="509"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!ssc-&gt;<ref refid="classShaderSemCode_1a7c17fae1acb3407d2a29e9a6d771851e" kindref="member">passes</ref>[m])</highlight></codeline>
<codeline lineno="510"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="511"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*cod<sp/>=<sp/>ssc-&gt;<ref refid="classShaderSemCode_1a7c17fae1acb3407d2a29e9a6d771851e" kindref="member">passes</ref>[m]-&gt;pass-&gt;stblkcode.data(),<sp/>*cod_e<sp/>=<sp/>cod<sp/>+<sp/>ssc-&gt;<ref refid="classShaderSemCode_1a7c17fae1acb3407d2a29e9a6d771851e" kindref="member">passes</ref>[m]-&gt;pass-&gt;stblkcode.size();</highlight></codeline>
<codeline lineno="512"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>unexp_stcod<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="513"><highlight class="normal"></highlight></codeline>
<codeline lineno="514"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*codp<sp/>=<sp/>cod;<sp/>codp<sp/>&lt;<sp/>cod_e<sp/>&amp;&amp;<sp/>unexp_stcod<sp/>&lt;<sp/>0;<sp/>codp++)</highlight></codeline>
<codeline lineno="515"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(shaderopcode::getOp(*codp))</highlight></codeline>
<codeline lineno="516"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="517"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>SHCOD_IMM_REAL1:</highlight></codeline>
<codeline lineno="518"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(codp<sp/>+<sp/>1<sp/>&lt;<sp/>cod_e)</highlight></codeline>
<codeline lineno="519"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>unexp_stcod<sp/>=<sp/>codp<sp/>-<sp/>cod;</highlight></codeline>
<codeline lineno="520"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="521"><highlight class="normal"></highlight></codeline>
<codeline lineno="522"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:<sp/>unexp_stcod<sp/>=<sp/>codp<sp/>-<sp/>cod;</highlight></codeline>
<codeline lineno="523"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="524"><highlight class="normal"></highlight></codeline>
<codeline lineno="525"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(unexp_stcod<sp/>&gt;=<sp/>0)</highlight></codeline>
<codeline lineno="526"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="527"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="shLog_8cpp_1a2926179632c7c86265007652d3d30b14" kindref="member">sh_debug</ref>(<ref refid="shLog_8h_1a66042048eb3ce30a1dccb2ebf8c2fd5caae3b70b41400c8a36e8a094ac1dbe43c" kindref="member">SHLOG_ERROR</ref>,<sp/></highlight><highlight class="stringliteral">&quot;shader(%s):<sp/>Compute<sp/>shaders<sp/>contains<sp/>unexpected<sp/>STBLK<sp/>at<sp/>%d<sp/>(code<sp/>dumped<sp/>to<sp/>log)&quot;</highlight><highlight class="normal">,<sp/>sclass.<ref refid="classShaderClass_1a7dade6337edb610925324439779864b4" kindref="member">name</ref>.c_str(),</highlight></codeline>
<codeline lineno="528"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>unexp_stcod);</highlight></codeline>
<codeline lineno="529"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ShUtils::shcod_dump(dag::ConstSpan&lt;int&gt;(cod,<sp/>cod_e<sp/>-<sp/>cod));</highlight></codeline>
<codeline lineno="530"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="531"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="532"><highlight class="normal"><sp/><sp/><sp/><sp/>ssc-&gt;<ref refid="classShaderSemCode_1a7c17fae1acb3407d2a29e9a6d771851e" kindref="member">passes</ref>[m]-&gt;pass-&gt;stblkcode.reset();</highlight></codeline>
<codeline lineno="533"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="534"><highlight class="normal"></highlight></codeline>
<codeline lineno="535"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structErrorCounter_1a16e83af848da6b273387e7f9078aff89" kindref="member">ErrorCounter::curShader</ref>().<ref refid="structErrorCounter_1ab283c399f4e862a8a02b0c684af1bc9b" kindref="member">err</ref><sp/>==<sp/>0;</highlight></codeline>
<codeline lineno="536"><highlight class="normal">}</highlight></codeline>
<codeline lineno="537"><highlight class="normal"></highlight></codeline>
<codeline lineno="538"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>add_shader(shader_decl<sp/>*sh,<sp/><ref refid="structParser" kindref="compound">Parser</ref><sp/>&amp;parser,<sp/>Terminal<sp/>*shname,<sp/><ref refid="classshc_1_1TargetContext" kindref="compound">shc::TargetContext</ref><sp/>&amp;ctx)</highlight></codeline>
<codeline lineno="539"><highlight class="normal">{</highlight></codeline>
<codeline lineno="540"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="namespaceshc_1a0e6b3705eca44599c1964ff3953e6a75" kindref="member">shc::isShaderRequired</ref>(shname-&gt;text))</highlight></codeline>
<codeline lineno="541"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="542"><highlight class="normal"></highlight></codeline>
<codeline lineno="543"><highlight class="normal"><sp/><sp/><ref refid="shLog_8cpp_1a338351dd1c335633c5e57fba23710c2b" kindref="member">sh_set_current_shader</ref>(shname-&gt;text);</highlight></codeline>
<codeline lineno="544"><highlight class="normal"><sp/><sp/><ref refid="cppStcode_8cpp_1afa2f02cf7da6a0b58c4f01e20ccd1384" kindref="member">DEFER</ref>([]<sp/>{<sp/><ref refid="shLog_8cpp_1a338351dd1c335633c5e57fba23710c2b" kindref="member">sh_set_current_shader</ref>(</highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);<sp/>});</highlight></codeline>
<codeline lineno="545"><highlight class="normal"></highlight></codeline>
<codeline lineno="546"><highlight class="normal"><sp/><sp/><ref refid="classshc_1_1ShaderContext" kindref="compound">shc::ShaderContext</ref><sp/>shContext<sp/>=<sp/>ctx.<ref refid="classshc_1_1TargetContext_1ac03ec24da55f47ae4400917eb570ad91" kindref="member">makeShaderContext</ref>(shname-&gt;text,<sp/><ref refid="namedConst_8h_1a8df4796c58d0d8445eaf37bb57425b6caa05d35337eb28027e70aef2ea40ff1df" kindref="member">ShaderBlockLevel::SHADER</ref>,<sp/>shname);</highlight></codeline>
<codeline lineno="547"><highlight class="normal"><sp/><sp/><ref refid="classShaderClass" kindref="compound">ShaderClass</ref><sp/>&amp;sclass<sp/>=<sp/>shContext.compiledShader();</highlight></codeline>
<codeline lineno="548"><highlight class="normal"></highlight></codeline>
<codeline lineno="549"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="structErrorCounter_1a16e83af848da6b273387e7f9078aff89" kindref="member">ErrorCounter::curShader</ref>().<ref refid="structErrorCounter_1ab283c399f4e862a8a02b0c684af1bc9b" kindref="member">err</ref><sp/>&gt;<sp/>0)</highlight></codeline>
<codeline lineno="550"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="551"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="shLog_8cpp_1abe31b55808a17803dbb52babf0362366" kindref="member">sh_dump_warn_info</ref>();</highlight></codeline>
<codeline lineno="552"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="shLog_8cpp_1a2926179632c7c86265007652d3d30b14" kindref="member">sh_debug</ref>(<ref refid="shLog_8h_1a66042048eb3ce30a1dccb2ebf8c2fd5caae3b70b41400c8a36e8a094ac1dbe43c" kindref="member">SHLOG_ERROR</ref>,<sp/></highlight><highlight class="stringliteral">&quot;shader(%s):<sp/>semantics<sp/>not<sp/>processed:<sp/>syntax<sp/>errors<sp/>found!&quot;</highlight><highlight class="normal">,<sp/>shname-&gt;text);</highlight></codeline>
<codeline lineno="553"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="554"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="555"><highlight class="normal"></highlight></codeline>
<codeline lineno="556"><highlight class="normal"><sp/><sp/><ref refid="shLog_8cpp_1a2926179632c7c86265007652d3d30b14" kindref="member">sh_debug</ref>(<ref refid="shLog_8h_1a66042048eb3ce30a1dccb2ebf8c2fd5ca0012c8acb382f295fe614046a64bba11" kindref="member">SHLOG_INFO</ref>,<sp/></highlight><highlight class="stringliteral">&quot;shader(%s):<sp/>process<sp/>semantics&quot;</highlight><highlight class="normal">,<sp/>shname-&gt;text);</highlight></codeline>
<codeline lineno="557"><highlight class="normal"></highlight></codeline>
<codeline lineno="558"><highlight class="normal"><sp/><sp/><ref refid="namespacesemantic_1a12cb5a616e51a0afbd183d9a122b0dc1" kindref="member">semantic::initialize_debug_mode</ref>(shContext);</highlight></codeline>
<codeline lineno="559"><highlight class="normal"></highlight></codeline>
<codeline lineno="560"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>gather<sp/>static<sp/>variant<sp/>vars</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="561"><highlight class="normal"><sp/><sp/>parser.<ref refid="structParser_1a9e9bc1e12aec4ba300d71598132ae8ec" kindref="member">get_lexer</ref>().<ref refid="classLexer_1a6995e86b55fa74bb82e81a90c4e8c407" kindref="member">begin_shader</ref>();</highlight></codeline>
<codeline lineno="562"><highlight class="normal"><sp/><sp/><ref refid="classShaderParser_1_1GatherVarShaderEvalCB" kindref="compound">GatherVarShaderEvalCB</ref><sp/>stVarCB{shContext};</highlight></codeline>
<codeline lineno="563"><highlight class="normal"></highlight></codeline>
<codeline lineno="564"><highlight class="normal"><sp/><sp/><ref refid="namespaceShaderParser_1a8b2de0f58f42716ceef426ff537f1c0d" kindref="member">eval_shader</ref>(*sh,<sp/>stVarCB);</highlight></codeline>
<codeline lineno="565"><highlight class="normal"><sp/><sp/>parser.<ref refid="structParser_1a9e9bc1e12aec4ba300d71598132ae8ec" kindref="member">get_lexer</ref>().<ref refid="classLexer_1ae4681cb946cc2cad2f9d8f4054fe4a0b" kindref="member">end_shader</ref>();</highlight></codeline>
<codeline lineno="566"><highlight class="normal"></highlight></codeline>
<codeline lineno="567"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>set<sp/>globals<sp/>ShaderParser::curVsCode<sp/>etc.<sp/>for<sp/>lifetime<sp/>of<sp/>this<sp/>function</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="568"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">LocalSourceBlocks</highlight></codeline>
<codeline lineno="569"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="570"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="571"><highlight class="normal"><sp/><sp/><sp/><sp/>LocalSourceBlocks()</highlight></codeline>
<codeline lineno="572"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="573"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<ref refid="hlslStage_8h_1a2c05326871fdf863346c90daec291c82" kindref="member">HlslCompilationStage</ref><sp/>stage<sp/>:<sp/><ref refid="hlslStage_8h_1a4a8f3901eb3d47f49d8197d008c7df14" kindref="member">HLSL_ALL_LIST</ref>)</highlight></codeline>
<codeline lineno="574"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceShaderParser_1aee6486690122ed0b79d805c40be4203e" kindref="member">curHlslBlks</ref>.all[stage]<sp/>=<sp/>&amp;blks.all[stage];</highlight></codeline>
<codeline lineno="575"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="576"><highlight class="normal"><sp/><sp/><sp/><sp/>~LocalSourceBlocks()</highlight></codeline>
<codeline lineno="577"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="578"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceshc_1aa29b1afa394d7f6e2b8d62ef87c3a88f" kindref="member">shc::await_all_jobs</ref>();</highlight></codeline>
<codeline lineno="579"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceShaderParser_1aee6486690122ed0b79d805c40be4203e" kindref="member">curHlslBlks</ref><sp/>=<sp/>{};</highlight></codeline>
<codeline lineno="580"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="581"><highlight class="normal"></highlight></codeline>
<codeline lineno="582"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structPerHlslStage" kindref="compound">PerHlslStage&lt;CodeSourceBlocks&gt;</ref><sp/>blks{};</highlight></codeline>
<codeline lineno="583"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="584"><highlight class="normal"><sp/><sp/>LocalSourceBlocks<sp/>lsb;</highlight></codeline>
<codeline lineno="585"><highlight class="normal"></highlight></codeline>
<codeline lineno="586"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>parse<sp/>code<sp/>blocks</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="587"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="namespacesemantic_1a6010479c8e0bd3d4760a5022e4b3fa96" kindref="member">semantic::parse_hlsl_source_to_blocks</ref>(<ref refid="namespaceShaderParser_1aee6486690122ed0b79d805c40be4203e" kindref="member">curHlslBlks</ref>,<sp/>stVarCB,<sp/>shContext))</highlight></codeline>
<codeline lineno="588"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="589"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="shLog_8cpp_1a2926179632c7c86265007652d3d30b14" kindref="member">sh_debug</ref>(<ref refid="shLog_8h_1a66042048eb3ce30a1dccb2ebf8c2fd5caae3b70b41400c8a36e8a094ac1dbe43c" kindref="member">SHLOG_ERROR</ref>,<sp/></highlight><highlight class="stringliteral">&quot;cannot<sp/>parse<sp/>shader<sp/>code<sp/>in<sp/>&lt;%s&gt;&quot;</highlight><highlight class="normal">,<sp/>shname-&gt;text);</highlight></codeline>
<codeline lineno="590"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="591"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="592"><highlight class="normal"></highlight></codeline>
<codeline lineno="593"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structshc_1_1TypeTables" kindref="compound">shc::TypeTables</ref><sp/>&amp;types<sp/>=<sp/>shContext.typeTables();</highlight></codeline>
<codeline lineno="594"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classIntervalList" kindref="compound">IntervalList</ref><sp/>&amp;intervals<sp/>=<sp/>shContext.intervals();</highlight></codeline>
<codeline lineno="595"><highlight class="normal"></highlight></codeline>
<codeline lineno="596"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>fill<sp/>static<sp/>variants<sp/>table</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="597"><highlight class="normal"><sp/><sp/><ref refid="classShaderVariant_1_1VariantTableSrc" kindref="compound">ShaderVariant::VariantTableSrc</ref><sp/>staticVariants{ctx};</highlight></codeline>
<codeline lineno="598"><highlight class="normal"><sp/><sp/>staticVariants.generateFromTypes(types.<ref refid="structshc_1_1TypeTables_1acc96568cc401badf5dc667d49749bd59" kindref="member">allStaticTypes</ref>,<sp/>intervals,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="599"><highlight class="normal"></highlight></codeline>
<codeline lineno="600"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>staticVariantCount<sp/>=<sp/>staticVariants.getVarCount();</highlight></codeline>
<codeline lineno="601"><highlight class="normal"><sp/><sp/>G_ASSERT(staticVariantCount);</highlight></codeline>
<codeline lineno="602"><highlight class="normal"></highlight></codeline>
<codeline lineno="603"><highlight class="normal"><sp/><sp/><ref refid="shLog_8cpp_1a2926179632c7c86265007652d3d30b14" kindref="member">sh_debug</ref>(<ref refid="shLog_8h_1a66042048eb3ce30a1dccb2ebf8c2fd5ca0012c8acb382f295fe614046a64bba11" kindref="member">SHLOG_INFO</ref>,<sp/></highlight><highlight class="stringliteral">&quot;%d<sp/>interval(s)<sp/>found&quot;</highlight><highlight class="normal">,<sp/>staticVariants.getIntervals().getCount());</highlight></codeline>
<codeline lineno="604"><highlight class="normal"><sp/><sp/><ref refid="shLog_8cpp_1a2926179632c7c86265007652d3d30b14" kindref="member">sh_debug</ref>(<ref refid="shLog_8h_1a66042048eb3ce30a1dccb2ebf8c2fd5ca0012c8acb382f295fe614046a64bba11" kindref="member">SHLOG_INFO</ref>,<sp/></highlight><highlight class="stringliteral">&quot;%d<sp/>static<sp/>variants&quot;</highlight><highlight class="normal">,<sp/>staticVariantCount);</highlight></codeline>
<codeline lineno="605"><highlight class="normal"></highlight></codeline>
<codeline lineno="606"><highlight class="normal"><sp/><sp/>String<sp/>stats;</highlight></codeline>
<codeline lineno="607"><highlight class="normal"><sp/><sp/>stats.resize(2048);</highlight></codeline>
<codeline lineno="608"><highlight class="normal"><sp/><sp/>get_memory_stats(stats,<sp/>2048);</highlight></codeline>
<codeline lineno="609"><highlight class="normal"><sp/><sp/>debug(</highlight><highlight class="stringliteral">&quot;%s&quot;</highlight><highlight class="normal">,<sp/>stats.str());</highlight></codeline>
<codeline lineno="610"><highlight class="normal"></highlight></codeline>
<codeline lineno="611"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">VarUsageInfo</highlight></codeline>
<codeline lineno="612"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="613"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>used;</highlight></codeline>
<codeline lineno="614"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>noWarnings;</highlight></codeline>
<codeline lineno="615"><highlight class="normal"><sp/><sp/><sp/><sp/>Terminal<sp/>*terminal;</highlight></codeline>
<codeline lineno="616"><highlight class="normal"></highlight></codeline>
<codeline lineno="617"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>fromVar(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structShaderSemCode_1_1Var" kindref="compound">ShaderSemCode::Var</ref><sp/>&amp;var)</highlight></codeline>
<codeline lineno="618"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="619"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>terminal<sp/>=<sp/>(Terminal<sp/>*)var.<ref refid="structShaderSemCode_1_1Var_1a15d03f52a51f3979c9f6b1f08cc2d714" kindref="member">terminal</ref>;</highlight></codeline>
<codeline lineno="620"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>used<sp/>=<sp/>var.used;</highlight></codeline>
<codeline lineno="621"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>noWarnings<sp/>=<sp/>var.noWarnings;</highlight></codeline>
<codeline lineno="622"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="623"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="624"><highlight class="normal"></highlight></codeline>
<codeline lineno="625"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>const<sp/>char<sp/>*<sp/>is<sp/>ok<sp/>cause<sp/>we<sp/>use<sp/>ids<sp/>from<sp/>VarMap<sp/>inside<sp/>it&apos;s<sp/>lifetime</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="626"><highlight class="normal"><sp/><sp/>ska::flat_hash_map&lt;const<sp/>char<sp/>*,<sp/>VarUsageInfo&gt;<sp/>usageInfo{};</highlight></codeline>
<codeline lineno="627"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>addVarUsage<sp/>=<sp/>[&amp;usageInfo,<sp/>&amp;ctx](</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structShaderSemCode_1_1Var" kindref="compound">ShaderSemCode::Var</ref><sp/>&amp;var)<sp/>{</highlight></codeline>
<codeline lineno="628"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>[it,<sp/>wasNew]<sp/>=<sp/>usageInfo.insert({<ref refid="shSemCode_8cpp_1a9d5126adea9eafeb93403ed8b06ebbe9" kindref="member">get_semcode_var_name</ref>(var,<sp/>ctx),<sp/>VarUsageInfo{}});</highlight></codeline>
<codeline lineno="629"><highlight class="normal"><sp/><sp/><sp/><sp/>G_ASSERT(wasNew);</highlight></codeline>
<codeline lineno="630"><highlight class="normal"><sp/><sp/><sp/><sp/>it-&gt;second.fromVar(var);</highlight></codeline>
<codeline lineno="631"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="632"><highlight class="normal"></highlight></codeline>
<codeline lineno="633"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(shContext.isDebugModeEnabled())</highlight></codeline>
<codeline lineno="634"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="635"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structShaderMessages" kindref="compound">ShaderMessages</ref><sp/>&amp;messages<sp/>=<sp/>shContext.messages();</highlight></codeline>
<codeline lineno="636"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;table<sp/>=<sp/>messages.<ref refid="structShaderMessages_1a1ec5397cb59cd024e1d1e052cd2e5151" kindref="member">strings</ref>;</highlight></codeline>
<codeline lineno="637"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>table.nameCount();<sp/>i++)</highlight></codeline>
<codeline lineno="638"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="639"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(messages.<ref refid="structShaderMessages_1ac6d819b0da1bdeba379a76536b4915fd" kindref="member">isFilenameMessage</ref>(i))</highlight></codeline>
<codeline lineno="640"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sclass.<ref refid="classShaderClass_1a86c11cc80ea041d5a25082ef6457fca3" kindref="member">messages</ref>.emplace_back(table.getName(i));</highlight></codeline>
<codeline lineno="641"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="642"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sclass.<ref refid="classShaderClass_1a86c11cc80ea041d5a25082ef6457fca3" kindref="member">messages</ref>.emplace_back(<ref refid="commonUtils_8h_1a423a5cbb08af4695251ec87aa21a5fe1" kindref="member">string_f</ref>(</highlight><highlight class="stringliteral">&quot;%s:<sp/>%s&quot;</highlight><highlight class="normal">,<sp/>shname-&gt;text,<sp/>table.getName(i)));</highlight></codeline>
<codeline lineno="643"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="644"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="645"><highlight class="normal"></highlight></codeline>
<codeline lineno="646"><highlight class="normal"><sp/><sp/>Tab&lt;eastl::unique_ptr&lt;ShaderSemCode&gt;&gt;<sp/>semcode{};</highlight></codeline>
<codeline lineno="647"><highlight class="normal"><sp/><sp/>Tab&lt;int&gt;<sp/>shInitCodeLast{};</highlight></codeline>
<codeline lineno="648"><highlight class="normal"></highlight></codeline>
<codeline lineno="649"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>for<sp/>each<sp/>static<sp/>variant:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="650"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="651"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>has_first_static_variant<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="652"><highlight class="normal"><sp/><sp/><ref refid="namespaceshc_1a950f822ed9707332f0fb4c602ea82c32" kindref="member">shc::prepareTestVariantShader</ref>(shname-&gt;text);</highlight></codeline>
<codeline lineno="653"><highlight class="normal"><sp/><sp/><ref refid="namespaceshc_1a76cbe60a6ca21ca5a6760ce4beabca8e" kindref="member">shc::prepareTestVariant</ref>(&amp;staticVariants.getTypes(),<sp/>NULL);</highlight></codeline>
<codeline lineno="654"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>staticVariantCount;<sp/>++i)</highlight></codeline>
<codeline lineno="655"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="656"><highlight class="normal"><sp/><sp/><sp/><sp/>sclass.<ref refid="classShaderClass_1ae43775f78533c08cf3075fd7b1cf952c" kindref="member">shInitCode</ref>.clear();</highlight></codeline>
<codeline lineno="657"><highlight class="normal"></highlight></codeline>
<codeline lineno="658"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classShaderVariant_1_1VariantSrc" kindref="compound">ShaderVariant::VariantSrc</ref><sp/>*staticVariant<sp/>=<sp/>staticVariants.getVariant(i);</highlight></codeline>
<codeline lineno="659"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="namespaceshc_1aba09c71513e9342dcc4f03d128304ba2" kindref="member">shc::isValidVariant</ref>(staticVariant,<sp/>NULL))</highlight></codeline>
<codeline lineno="660"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="661"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>staticVariant-&gt;<ref refid="classShaderVariant_1_1VariantSrc_1afb146220c509e03384b1ef1ab0579fbb" kindref="member">codeId</ref><sp/>=<sp/><ref refid="namespaceshc_1af50955b1a5a2daa082f696535dbd19c3" kindref="member">shc::shouldMarkInvalidAsNull</ref>()<sp/>?<sp/>-1<sp/>:<sp/>-2;</highlight></codeline>
<codeline lineno="662"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="663"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="664"><highlight class="normal"></highlight></codeline>
<codeline lineno="665"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="shLog_8cpp_1a62eed7ecd82f09c561ab7e758e18cd60" kindref="member">sh_set_current_variant</ref>(staticVariant);</highlight></codeline>
<codeline lineno="666"><highlight class="normal"></highlight></codeline>
<codeline lineno="667"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>empty<sp/>class<sp/>for<sp/>storage</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="668"><highlight class="normal"><sp/><sp/><sp/><sp/>eastl::unique_ptr&lt;ShaderSemCode&gt;<sp/>ssc{};</highlight></codeline>
<codeline lineno="669"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>render_stage_idx<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="670"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>passCount<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="671"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structSemanticShaderPass" kindref="compound">SemanticShaderPass</ref><sp/>*lastParsedPass<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="672"><highlight class="normal"></highlight></codeline>
<codeline lineno="673"><highlight class="normal"><sp/><sp/><sp/><sp/>usageInfo.clear();</highlight></codeline>
<codeline lineno="674"><highlight class="normal"></highlight></codeline>
<codeline lineno="675"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>addVariantEvaluationResult<sp/>=<sp/>[&amp;](<ref refid="structShaderParser_1_1EvaluatedShaderVariant" kindref="compound">EvaluatedShaderVariant</ref><sp/>&amp;&amp;evaluated_variant,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>variant_id,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>variant_cnt)<sp/>{</highlight></codeline>
<codeline lineno="676"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>G_ASSERT(variant_id<sp/>&gt;=<sp/>0<sp/>&amp;&amp;<sp/>variant_id<sp/>&lt;<sp/>variant_cnt);</highlight></codeline>
<codeline lineno="677"><highlight class="normal"></highlight></codeline>
<codeline lineno="678"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;[parsedSsc,<sp/>parsedPass]<sp/>=<sp/>evaluated_variant;</highlight></codeline>
<codeline lineno="679"><highlight class="normal"></highlight></codeline>
<codeline lineno="680"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(render_stage_idx<sp/>&lt;<sp/>0)</highlight></codeline>
<codeline lineno="681"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>render_stage_idx<sp/>=<sp/>(parsedSsc.flags<sp/>&amp;<sp/>SC_STAGE_IDX_MASK);</highlight></codeline>
<codeline lineno="682"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((parsedSsc.flags<sp/>&amp;<sp/>SC_STAGE_IDX_MASK)<sp/>!=<sp/>render_stage_idx)</highlight></codeline>
<codeline lineno="683"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="shLog_8cpp_1a2926179632c7c86265007652d3d30b14" kindref="member">sh_debug</ref>(<ref refid="shLog_8h_1a66042048eb3ce30a1dccb2ebf8c2fd5caec73ac89ba721ca7dec737875111fddd" kindref="member">SHLOG_WARNING</ref>,<sp/></highlight><highlight class="stringliteral">&quot;shader(%s):<sp/>different<sp/>renderStageIdx<sp/>used<sp/>in<sp/>dynvariants:<sp/>%d<sp/>and<sp/>%d&quot;</highlight><highlight class="normal">,<sp/>shname-&gt;text,<sp/>render_stage_idx,</highlight></codeline>
<codeline lineno="684"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(parsedSsc.flags<sp/>&amp;<sp/>SC_STAGE_IDX_MASK));</highlight></codeline>
<codeline lineno="685"><highlight class="normal"></highlight></codeline>
<codeline lineno="686"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!passCount)</highlight></codeline>
<codeline lineno="687"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="688"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structShaderSemCode_1_1Var" kindref="compound">ShaderSemCode::Var</ref><sp/>&amp;var<sp/>:<sp/>parsedSsc.vars)</highlight></codeline>
<codeline lineno="689"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>addVarUsage(var);</highlight></codeline>
<codeline lineno="690"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ssc<sp/>=<sp/>eastl::make_unique&lt;ShaderSemCode&gt;(eastl::move(parsedSsc));</highlight></codeline>
<codeline lineno="691"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ssc-&gt;<ref refid="classShaderSemCode_1a7c17fae1acb3407d2a29e9a6d771851e" kindref="member">passes</ref>.resize(variant_cnt);</highlight></codeline>
<codeline lineno="692"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="693"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="694"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="695"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>check<sp/>for<sp/>variable<sp/>usage</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="696"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structShaderSemCode_1_1Var" kindref="compound">ShaderSemCode::Var</ref><sp/>&amp;var<sp/>:<sp/>parsedSsc.vars)</highlight></codeline>
<codeline lineno="697"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="698"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>it<sp/>=<sp/>usageInfo.find(<ref refid="shSemCode_8cpp_1a9d5126adea9eafeb93403ed8b06ebbe9" kindref="member">get_semcode_var_name</ref>(var,<sp/>ctx));<sp/>it<sp/>!=<sp/>usageInfo.end())</highlight></codeline>
<codeline lineno="699"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="700"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!it-&gt;second.used)</highlight></codeline>
<codeline lineno="701"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>it-&gt;second.used<sp/>=<sp/>var.used;</highlight></codeline>
<codeline lineno="702"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="703"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="704"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>addVarUsage(var);</highlight></codeline>
<codeline lineno="705"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="706"><highlight class="normal"></highlight></codeline>
<codeline lineno="707"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>correct<sp/>register<sp/>count</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="708"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ssc-&gt;<ref refid="classShaderSemCode_1af8edbdef53e3a9de78f27f09f1611ddd" kindref="member">regsize</ref><sp/>!=<sp/>parsedSsc.regsize)</highlight></codeline>
<codeline lineno="709"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="710"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ssc-&gt;<ref refid="classShaderSemCode_1af8edbdef53e3a9de78f27f09f1611ddd" kindref="member">regsize</ref><sp/>=<sp/>parsedSsc.regsize<sp/>=<sp/>(ssc-&gt;<ref refid="classShaderSemCode_1af8edbdef53e3a9de78f27f09f1611ddd" kindref="member">regsize</ref><sp/>&gt;<sp/>parsedSsc.regsize)<sp/>?<sp/>ssc-&gt;<ref refid="classShaderSemCode_1af8edbdef53e3a9de78f27f09f1611ddd" kindref="member">regsize</ref><sp/>:<sp/>parsedSsc.regsize;</highlight></codeline>
<codeline lineno="711"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="712"><highlight class="normal"></highlight></codeline>
<codeline lineno="713"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ssc-&gt;<ref refid="classShaderSemCode_1a7c17fae1acb3407d2a29e9a6d771851e" kindref="member">passes</ref>[variant_id])</highlight></codeline>
<codeline lineno="714"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="715"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="shLog_8cpp_1a2926179632c7c86265007652d3d30b14" kindref="member">sh_debug</ref>(<ref refid="shLog_8h_1a66042048eb3ce30a1dccb2ebf8c2fd5caae3b70b41400c8a36e8a094ac1dbe43c" kindref="member">SHLOG_ERROR</ref>,<sp/></highlight><highlight class="stringliteral">&quot;shader(%s):<sp/>dynamic<sp/>variant<sp/>already<sp/>exists&quot;</highlight><highlight class="normal">,<sp/>shname-&gt;text);</highlight></codeline>
<codeline lineno="716"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="717"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="718"><highlight class="normal"></highlight></codeline>
<codeline lineno="719"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>check<sp/>for<sp/>equal<sp/>static<sp/>variants<sp/>if<sp/>this<sp/>is<sp/>not<sp/>the<sp/>first<sp/>added<sp/>ssc</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="720"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*eqDesc<sp/>=<sp/>ssc-&gt;<ref refid="classShaderSemCode_1add322f136e40abda10f755b23b652907" kindref="member">equal</ref>(parsedSsc,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="721"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(passCount<sp/>&amp;&amp;<sp/>eqDesc<sp/>!=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="722"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="723"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="shLog_8cpp_1a2926179632c7c86265007652d3d30b14" kindref="member">sh_debug</ref>(<ref refid="shLog_8h_1a66042048eb3ce30a1dccb2ebf8c2fd5caae3b70b41400c8a36e8a094ac1dbe43c" kindref="member">SHLOG_ERROR</ref>,<sp/></highlight><highlight class="stringliteral">&quot;shader(%s):<sp/>illegal<sp/>dynamic<sp/>variants:<sp/>different<sp/>%s&quot;</highlight><highlight class="normal">,<sp/>shname-&gt;text,<sp/>eqDesc);</highlight></codeline>
<codeline lineno="724"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="725"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="726"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="727"><highlight class="normal"></highlight></codeline>
<codeline lineno="728"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ssc-&gt;<ref refid="classShaderSemCode_1a7c17fae1acb3407d2a29e9a6d771851e" kindref="member">passes</ref>[variant_id]<sp/>=<sp/>eastl::move(parsedPass);</highlight></codeline>
<codeline lineno="729"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>lastParsedPass<sp/>=<sp/>&amp;ssc-&gt;<ref refid="classShaderSemCode_1a7c17fae1acb3407d2a29e9a6d771851e" kindref="member">passes</ref>[variant_id]-&gt;pass.value();</highlight></codeline>
<codeline lineno="730"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!passCount)</highlight></codeline>
<codeline lineno="731"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ssc-&gt;<ref refid="classShaderSemCode_1a5152815192d39ea106f827b07955b044" kindref="member">initPassMap</ref>(variant_id);</highlight></codeline>
<codeline lineno="732"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="733"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ssc-&gt;<ref refid="classShaderSemCode_1a0f6ee922626b00aaf01a7268de9b742a" kindref="member">mergeVars</ref>(eastl::move(parsedSsc.vars),<sp/>eastl::move(parsedSsc.stvarmap),<sp/>variant_id);</highlight></codeline>
<codeline lineno="734"><highlight class="normal"></highlight></codeline>
<codeline lineno="735"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>++passCount;</highlight></codeline>
<codeline lineno="736"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="737"><highlight class="normal"></highlight></codeline>
<codeline lineno="738"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classShaderVariant_1_1VariantTableSrc" kindref="compound">ShaderVariant::VariantTableSrc</ref><sp/>dynamicVariants{ctx};</highlight></codeline>
<codeline lineno="739"><highlight class="normal"><sp/><sp/><sp/><sp/>dynamicVariants.generateFromTypes(types.<ref refid="structshc_1_1TypeTables_1afa230b1d10268a40e3340e4d867f88a9" kindref="member">allDynamicTypes</ref>,<sp/>intervals,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="740"><highlight class="normal"></highlight></codeline>
<codeline lineno="741"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(types.<ref refid="structshc_1_1TypeTables_1afa230b1d10268a40e3340e4d867f88a9" kindref="member">allDynamicTypes</ref>.<ref refid="classShaderVariant_1_1TypeTable_1ad107f77c534bdad10abcdea8f7709a04" kindref="member">getCount</ref>())</highlight></codeline>
<codeline lineno="742"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="743"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>dynamic<sp/>variants<sp/>present</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="744"><highlight class="normal"></highlight></codeline>
<codeline lineno="745"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dynamicVariantCount<sp/>=<sp/>dynamicVariants.getVarCount();</highlight></codeline>
<codeline lineno="746"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceshc_1a76cbe60a6ca21ca5a6760ce4beabca8e" kindref="member">shc::prepareTestVariant</ref>(NULL,<sp/>&amp;dynamicVariants.getTypes());</highlight></codeline>
<codeline lineno="747"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>FastIntList<sp/>invalidVariants;</highlight></codeline>
<codeline lineno="748"><highlight class="normal"></highlight></codeline>
<codeline lineno="749"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>for<sp/>each<sp/>dynamic<sp/>variant:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="750"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>d<sp/>=<sp/>0;<sp/>d<sp/>&lt;<sp/>dynamicVariantCount;<sp/>d++)</highlight></codeline>
<codeline lineno="751"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="752"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="namespaceshc_1aba09c71513e9342dcc4f03d128304ba2" kindref="member">shc::isValidVariant</ref>(staticVariant,<sp/>dynamicVariants.getVariant(d)))</highlight></codeline>
<codeline lineno="753"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="754"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="namespaceshc_1af50955b1a5a2daa082f696535dbd19c3" kindref="member">shc::shouldMarkInvalidAsNull</ref>())</highlight></codeline>
<codeline lineno="755"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>invalidVariants.addInt(d);</highlight></codeline>
<codeline lineno="756"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="757"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="758"><highlight class="normal"></highlight></codeline>
<codeline lineno="759"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classShaderVariant_1_1VariantSrc" kindref="compound">ShaderVariant::VariantSrc</ref><sp/>*dynamicVariant<sp/>=<sp/>dynamicVariants.getVariant(d);</highlight></codeline>
<codeline lineno="760"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="shLog_8cpp_1a13c739ae2e3faaa3cf559a75d265cd5c" kindref="member">sh_set_current_dyn_variant</ref>(dynamicVariant);</highlight></codeline>
<codeline lineno="761"><highlight class="normal"></highlight></codeline>
<codeline lineno="762"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>evaluatedVariantMaybe<sp/>=</highlight></codeline>
<codeline lineno="763"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>evalShaderVariant(sh,<sp/>parser,<sp/><ref refid="structShaderVariant_1_1VariantInfo" kindref="compound">ShaderVariant::VariantInfo</ref>(*staticVariant,<sp/>dynamicVariant),<sp/>shContext);</highlight></codeline>
<codeline lineno="764"><highlight class="normal"></highlight></codeline>
<codeline lineno="765"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(evaluatedVariantMaybe)</highlight></codeline>
<codeline lineno="766"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="767"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dynamicVariant-&gt;<ref refid="classShaderVariant_1_1VariantSrc_1afb146220c509e03384b1ef1ab0579fbb" kindref="member">codeId</ref><sp/>=<sp/>d;</highlight></codeline>
<codeline lineno="768"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>addVariantEvaluationResult(eastl::move(*evaluatedVariantMaybe),<sp/>d,<sp/>dynamicVariantCount);</highlight></codeline>
<codeline lineno="769"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="770"><highlight class="normal"></highlight></codeline>
<codeline lineno="771"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="shLog_8cpp_1a13c739ae2e3faaa3cf559a75d265cd5c" kindref="member">sh_set_current_dyn_variant</ref>(</highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="772"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="773"><highlight class="normal"></highlight></codeline>
<codeline lineno="774"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(invalidVariants.getList().size()<sp/>==<sp/>dynamicVariantCount)</highlight></codeline>
<codeline lineno="775"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>staticVariant-&gt;<ref refid="classShaderVariant_1_1VariantSrc_1afb146220c509e03384b1ef1ab0579fbb" kindref="member">codeId</ref><sp/>=<sp/><ref refid="namespaceshc_1af50955b1a5a2daa082f696535dbd19c3" kindref="member">shc::shouldMarkInvalidAsNull</ref>()<sp/>?<sp/>-1<sp/>:<sp/>-2;</highlight></codeline>
<codeline lineno="776"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(invalidVariants.getList().size())</highlight></codeline>
<codeline lineno="777"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="778"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>invalidVariants.getList().size();<sp/>i++)</highlight></codeline>
<codeline lineno="779"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dynamicVariants.getVariant(invalidVariants.getList()[i])-&gt;codeId<sp/>=<sp/>-2;<sp/></highlight><highlight class="comment">//<sp/>@TODO:<sp/>use<sp/>markInvalidAsNull<sp/>here<sp/>too?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="780"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="781"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="782"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="783"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="784"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>no<sp/>dynamic<sp/>variants<sp/>present</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="785"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>parsedSscMaybe<sp/>=<sp/>evalShaderVariant(sh,<sp/>parser,<sp/><ref refid="structShaderVariant_1_1VariantInfo" kindref="compound">ShaderVariant::VariantInfo</ref>{*staticVariant,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">},<sp/>shContext);</highlight></codeline>
<codeline lineno="786"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(parsedSscMaybe)</highlight></codeline>
<codeline lineno="787"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>addVariantEvaluationResult(eastl::move(*parsedSscMaybe),<sp/>0,<sp/>1);</highlight></codeline>
<codeline lineno="788"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="789"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>staticVariant-&gt;<ref refid="classShaderVariant_1_1VariantSrc_1afb146220c509e03384b1ef1ab0579fbb" kindref="member">codeId</ref><sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="790"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="791"><highlight class="normal"></highlight></codeline>
<codeline lineno="792"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(passCount)</highlight></codeline>
<codeline lineno="793"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="794"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>check<sp/>for<sp/>variable<sp/>usage</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="795"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>eastl::for_each(usageInfo.cbegin(),<sp/>usageInfo.cend(),<sp/>[&amp;](</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;pair)<sp/>{</highlight></codeline>
<codeline lineno="796"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>auto<sp/>[name,<sp/>var]<sp/>=<sp/>pair;</highlight></codeline>
<codeline lineno="797"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(!var.used<sp/>&amp;&amp;<sp/>!var.noWarnings)</highlight></codeline>
<codeline lineno="798"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="799"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(strcmp(</highlight><highlight class="stringliteral">&quot;instancing_const_begin&quot;</highlight><highlight class="normal">,<sp/>name)<sp/>!=<sp/>0<sp/>&amp;&amp;<sp/>strcmp(</highlight><highlight class="stringliteral">&quot;instancing_const_end&quot;</highlight><highlight class="normal">,<sp/>name)<sp/>!=<sp/>0)</highlight></codeline>
<codeline lineno="800"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>shaderWarn(parser,</highlight></codeline>
<codeline lineno="801"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;variable<sp/>&apos;&quot;</highlight><highlight class="normal"><sp/>+<sp/>String{name}<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;&apos;<sp/>not<sp/>used<sp/>in<sp/>static<sp/>variant<sp/>&apos;&quot;</highlight><highlight class="normal"><sp/>+<sp/>staticVariant-&gt;getVarStringInfo()<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;&apos;&quot;</highlight><highlight class="normal">,<sp/>var.terminal);</highlight></codeline>
<codeline lineno="802"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="803"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>});</highlight></codeline>
<codeline lineno="804"><highlight class="normal"></highlight></codeline>
<codeline lineno="805"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((ssc-&gt;<ref refid="classShaderSemCode_1ac5254af5ecdf0f52e2d648e94a90d2e8" kindref="member">flags</ref><sp/>&amp;<sp/>SC_STAGE_IDX_MASK)<sp/>!=<sp/>render_stage_idx)</highlight></codeline>
<codeline lineno="806"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="shLog_8cpp_1a2926179632c7c86265007652d3d30b14" kindref="member">sh_debug</ref>(<ref refid="shLog_8h_1a66042048eb3ce30a1dccb2ebf8c2fd5caec73ac89ba721ca7dec737875111fddd" kindref="member">SHLOG_WARNING</ref>,<sp/></highlight><highlight class="stringliteral">&quot;shader(%s):<sp/>staticvariant<sp/>uses<sp/>renderStageIdx=%d,<sp/>while<sp/>dynvariants<sp/>uses<sp/>%d&quot;</highlight><highlight class="normal">,<sp/>shContext.name(),</highlight></codeline>
<codeline lineno="807"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(ssc-&gt;<ref refid="classShaderSemCode_1ac5254af5ecdf0f52e2d648e94a90d2e8" kindref="member">flags</ref><sp/>&amp;<sp/>SC_STAGE_IDX_MASK),<sp/>render_stage_idx);</highlight></codeline>
<codeline lineno="808"><highlight class="normal"></highlight></codeline>
<codeline lineno="809"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>syncpoint<sp/>for<sp/>issued<sp/>compile<sp/>jobs</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="810"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceshc_1aa29b1afa394d7f6e2b8d62ef87c3a88f" kindref="member">shc::await_all_jobs</ref>(&amp;<ref refid="shLog_8cpp_1a1645d310ca3c7fe3e3dc882fb7962e9d" kindref="member">sh_process_errors</ref>);</highlight></codeline>
<codeline lineno="811"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="shLog_8cpp_1a1645d310ca3c7fe3e3dc882fb7962e9d" kindref="member">sh_process_errors</ref>();</highlight></codeline>
<codeline lineno="812"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ctx.<ref refid="classshc_1_1TargetContext_1a8b7f13535e319e9ea56d78ee1931ae82" kindref="member">bytecodeCache</ref>().<ref refid="classShaderBytecodeCache_1a456942262603af909796d18e59c56d71" kindref="member">resolvePendingPasses</ref>();</highlight></codeline>
<codeline lineno="813"><highlight class="normal"></highlight></codeline>
<codeline lineno="814"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!validate_cs(sclass,<sp/>ssc.get(),<sp/>staticVariantCount))</highlight></codeline>
<codeline lineno="815"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="816"><highlight class="normal"></highlight></codeline>
<codeline lineno="817"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>find<sp/>the<sp/>same<sp/>shader<sp/>code<sp/>variant,<sp/>add<sp/>if<sp/>not<sp/>found</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="818"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j;</highlight></codeline>
<codeline lineno="819"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>semcode.size();<sp/>++j)</highlight></codeline>
<codeline lineno="820"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(semcode[j]-&gt;equal(*ssc,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">)<sp/>==<sp/>NULL)</highlight></codeline>
<codeline lineno="821"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="822"><highlight class="normal"></highlight></codeline>
<codeline lineno="823"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(j<sp/>&gt;=<sp/>semcode.size())</highlight></codeline>
<codeline lineno="824"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="825"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>j<sp/>=<sp/>semcode.size();</highlight></codeline>
<codeline lineno="826"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classShaderCode" kindref="compound">ShaderCode</ref><sp/>*sc<sp/>=<sp/>ssc-&gt;<ref refid="classShaderSemCode_1aef25e17512cd2562d12377a47b3433b5" kindref="member">generateShaderCode</ref>(dynamicVariants);</highlight></codeline>
<codeline lineno="827"><highlight class="normal"></highlight></codeline>
<codeline lineno="828"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="namespaceshc_1a47efde6b3d493adbe2119a5593807d36" kindref="member">shc::config</ref>().cppStcodeMode<sp/>==<sp/>shader_layout::ExternalStcodeMode::BRANCHED_CPP)</highlight></codeline>
<codeline lineno="829"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="830"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(passCount<sp/>&gt;<sp/>1)</highlight></codeline>
<codeline lineno="831"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="832"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classshc_1_1VariantContext" kindref="compound">shc::VariantContext</ref><sp/>variantCtx<sp/>=</highlight></codeline>
<codeline lineno="833"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>shContext.makeVariantContext(<ref refid="structShaderVariant_1_1VariantInfo" kindref="compound">ShaderVariant::VariantInfo</ref>{*staticVariant,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">},<sp/>*ssc,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="834"><highlight class="normal"></highlight></codeline>
<codeline lineno="835"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;cppcode<sp/>=<sp/>variantCtx.<ref refid="classshc_1_1VariantContext_1a45351b6130235b4bde86f2fb2bac44fe" kindref="member">cppStcode</ref>();</highlight></codeline>
<codeline lineno="836"><highlight class="normal"></highlight></codeline>
<codeline lineno="837"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classStcodeBranchedBuildEvalCB" kindref="compound">StcodeBranchedBuildEvalCB</ref><sp/>cb{variantCtx};</highlight></codeline>
<codeline lineno="838"><highlight class="normal"></highlight></codeline>
<codeline lineno="839"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>parser.<ref refid="structParser_1a9e9bc1e12aec4ba300d71598132ae8ec" kindref="member">get_lexer</ref>().<ref refid="classLexer_1a6995e86b55fa74bb82e81a90c4e8c407" kindref="member">begin_shader</ref>();</highlight></codeline>
<codeline lineno="840"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceShaderParser_1a8b2de0f58f42716ceef426ff537f1c0d" kindref="member">eval_shader</ref>(*sh,<sp/>cb);</highlight></codeline>
<codeline lineno="841"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>parser.<ref refid="structParser_1a9e9bc1e12aec4ba300d71598132ae8ec" kindref="member">get_lexer</ref>().<ref refid="classLexer_1ae4681cb946cc2cad2f9d8f4054fe4a0b" kindref="member">end_shader</ref>();</highlight></codeline>
<codeline lineno="842"><highlight class="normal"></highlight></codeline>
<codeline lineno="843"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceassembly_1a9a8fb5d1403190cf61579a5fb05a8569" kindref="member">assembly::build_cpp_declarations_for_used_bool_vars</ref>(variantCtx);</highlight></codeline>
<codeline lineno="844"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceassembly_1ad3e505f51d3620ecfe672ffa1b7e9c99" kindref="member">assembly::build_cpp_declarations_for_used_local_vars</ref>(variantCtx);</highlight></codeline>
<codeline lineno="845"><highlight class="normal"></highlight></codeline>
<codeline lineno="846"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>the<sp/>code<sp/>is<sp/>flat,<sp/>just<sp/>use<sp/>base<sp/>variant<sp/>without<sp/>dynamic<sp/>elements</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="847"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!cppcode.cppStcode.hasCodeUnderConditions)</highlight></codeline>
<codeline lineno="848"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="849"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sc-&gt;<ref refid="classShaderCode_1a227fbd7a7e7ff62446e82fbd70256c13" kindref="member">branchedCppStcodeId</ref><sp/>=<sp/>ctx.<ref refid="classshc_1_1TargetContext_1a27d8cc3aa5ee309d0c1e3fca7ea3cbdf" kindref="member">cppStcode</ref>().<ref refid="structStcodeShader_1af574f4aa9ce369abcfeaccee84e198a6" kindref="member">addCode</ref>(eastl::move(lastParsedPass-&gt;<ref refid="structSemanticShaderPass_1aa6d1866ac1ab96035a152f7cde16925e" kindref="member">cppstcode</ref>.<ref refid="structStcodePass_1afa8af3e7f8aeba50095318fbd536a0c4" kindref="member">cppStcode</ref>),</highlight></codeline>
<codeline lineno="850"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lastParsedPass-&gt;<ref refid="structSemanticShaderPass_1a0a93717959f273d97c583d31f37d93f4" kindref="member">psOrCsConstRange</ref>,<sp/>lastParsedPass-&gt;<ref refid="structSemanticShaderPass_1a70495e6029e8dae0d7e1c59dcb31a17b" kindref="member">vsConstRange</ref>);</highlight></codeline>
<codeline lineno="851"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="852"><highlight class="normal"></highlight></codeline>
<codeline lineno="853"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sc-&gt;<ref refid="classShaderCode_1a227fbd7a7e7ff62446e82fbd70256c13" kindref="member">branchedCppStcodeId</ref><sp/>==<sp/>-1)</highlight></codeline>
<codeline lineno="854"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="855"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>passRegsTable<sp/>=<sp/><ref refid="cppStcodeAssembly_8cpp_1a49e0fce26520163288afcb011cad522e" kindref="member">build_pass_stcode_reg_table</ref>(*ssc);</highlight></codeline>
<codeline lineno="856"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>data<sp/>=<sp/><ref refid="cppStcodeAssembly_8cpp_1a220e59c8493edc513dca5d1fd94d5a28" kindref="member">build_pass_reg_tables_for_branched_dynstcode</ref>(passRegsTable,<sp/>cppcode.cppStcode);</highlight></codeline>
<codeline lineno="857"><highlight class="normal"></highlight></codeline>
<codeline lineno="858"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;&amp;[pass,<sp/>table]<sp/>:<sp/>data.passRegisterTables)</highlight></codeline>
<codeline lineno="859"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="860"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sc-&gt;<ref refid="classShaderCode_1a227fbd7a7e7ff62446e82fbd70256c13" kindref="member">branchedCppStcodeId</ref><sp/>==<sp/>-1)</highlight></codeline>
<codeline lineno="861"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pass-&gt;target-&gt;branchedCppStcodeTableOffset<sp/>=<sp/>ctx.<ref refid="classshc_1_1TargetContext_1a27d8cc3aa5ee309d0c1e3fca7ea3cbdf" kindref="member">cppStcode</ref>().<ref refid="structStcodeShader_1ae3c24ffd52b1236b13e7715878a9c387" kindref="member">addRegisterTableWithIndex</ref>(eastl::move(table));</highlight></codeline>
<codeline lineno="862"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="863"><highlight class="normal"></highlight></codeline>
<codeline lineno="864"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sc-&gt;<ref refid="classShaderCode_1a227fbd7a7e7ff62446e82fbd70256c13" kindref="member">branchedCppStcodeId</ref><sp/>==<sp/>-1)</highlight></codeline>
<codeline lineno="865"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="866"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sc-&gt;<ref refid="classShaderCode_1a227fbd7a7e7ff62446e82fbd70256c13" kindref="member">branchedCppStcodeId</ref><sp/>=</highlight></codeline>
<codeline lineno="867"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ctx.<ref refid="classshc_1_1TargetContext_1a27d8cc3aa5ee309d0c1e3fca7ea3cbdf" kindref="member">cppStcode</ref>().<ref refid="structStcodeShader_1af574f4aa9ce369abcfeaccee84e198a6" kindref="member">addCode</ref>(eastl::move(cppcode.cppStcode),<sp/>data.commonPsOrCsConstRange,<sp/>data.commonVsConstRange);</highlight></codeline>
<codeline lineno="868"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="869"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="870"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="871"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="872"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="873"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sc-&gt;<ref refid="classShaderCode_1a227fbd7a7e7ff62446e82fbd70256c13" kindref="member">branchedCppStcodeId</ref><sp/>=<sp/>ctx.<ref refid="classshc_1_1TargetContext_1a27d8cc3aa5ee309d0c1e3fca7ea3cbdf" kindref="member">cppStcode</ref>().<ref refid="structStcodeShader_1af574f4aa9ce369abcfeaccee84e198a6" kindref="member">addCode</ref>(eastl::move(lastParsedPass-&gt;<ref refid="structSemanticShaderPass_1aa6d1866ac1ab96035a152f7cde16925e" kindref="member">cppstcode</ref>.<ref refid="structStcodePass_1afa8af3e7f8aeba50095318fbd536a0c4" kindref="member">cppStcode</ref>),</highlight></codeline>
<codeline lineno="874"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lastParsedPass-&gt;<ref refid="structSemanticShaderPass_1a0a93717959f273d97c583d31f37d93f4" kindref="member">psOrCsConstRange</ref>,<sp/>lastParsedPass-&gt;<ref refid="structSemanticShaderPass_1a70495e6029e8dae0d7e1c59dcb31a17b" kindref="member">vsConstRange</ref>);</highlight></codeline>
<codeline lineno="875"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="876"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="877"><highlight class="normal"></highlight></codeline>
<codeline lineno="878"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;pt<sp/>:<sp/>ssc-&gt;passes)</highlight></codeline>
<codeline lineno="879"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(pt<sp/>&amp;&amp;<sp/>pt-&gt;pass)</highlight></codeline>
<codeline lineno="880"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pt-&gt;pass-&gt;clearCppStcodeData();</highlight></codeline>
<codeline lineno="881"><highlight class="normal"></highlight></codeline>
<codeline lineno="882"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>semcode.push_back(eastl::move(ssc));</highlight></codeline>
<codeline lineno="883"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sclass.<ref refid="classShaderClass_1afd05a0478ecbe5c13b066e4456580359" kindref="member">code</ref>.push_back(sc);</highlight></codeline>
<codeline lineno="884"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="885"><highlight class="normal"></highlight></codeline>
<codeline lineno="886"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>staticVariant-&gt;<ref refid="classShaderVariant_1_1VariantSrc_1afb146220c509e03384b1ef1ab0579fbb" kindref="member">codeId</ref><sp/>=<sp/>j;</highlight></codeline>
<codeline lineno="887"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(has_first_static_variant)</highlight></codeline>
<codeline lineno="888"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(shInitCodeLast.size()<sp/>!=<sp/>sclass.<ref refid="classShaderClass_1ae43775f78533c08cf3075fd7b1cf952c" kindref="member">shInitCode</ref>.size()<sp/>||<sp/>!mem_eq(shInitCodeLast,<sp/>sclass.<ref refid="classShaderClass_1ae43775f78533c08cf3075fd7b1cf952c" kindref="member">shInitCode</ref>.data()))</highlight></codeline>
<codeline lineno="889"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="890"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>debug(</highlight><highlight class="stringliteral">&quot;shInitCode(%d):&quot;</highlight><highlight class="normal">,<sp/>sclass.<ref refid="classShaderClass_1ae43775f78533c08cf3075fd7b1cf952c" kindref="member">shInitCode</ref>.size()<sp/>/<sp/>2);</highlight></codeline>
<codeline lineno="891"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>k<sp/>=<sp/>0;<sp/>k<sp/>&lt;<sp/>sclass.<ref refid="classShaderClass_1ae43775f78533c08cf3075fd7b1cf952c" kindref="member">shInitCode</ref>.size();<sp/>k<sp/>+=<sp/>2)</highlight></codeline>
<codeline lineno="892"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>debug(</highlight><highlight class="stringliteral">&quot;<sp/><sp/>%d<sp/>&lt;-<sp/>%d&quot;</highlight><highlight class="normal">,<sp/>sclass.<ref refid="classShaderClass_1ae43775f78533c08cf3075fd7b1cf952c" kindref="member">shInitCode</ref>[k],<sp/>sclass.<ref refid="classShaderClass_1ae43775f78533c08cf3075fd7b1cf952c" kindref="member">shInitCode</ref>[k<sp/>+<sp/>1]);</highlight></codeline>
<codeline lineno="893"><highlight class="normal"></highlight></codeline>
<codeline lineno="894"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>debug(</highlight><highlight class="stringliteral">&quot;shInitCodeLast(%d):&quot;</highlight><highlight class="normal">,<sp/>shInitCodeLast.size()<sp/>/<sp/>2);</highlight></codeline>
<codeline lineno="895"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>k<sp/>=<sp/>0;<sp/>k<sp/>&lt;<sp/>shInitCodeLast.size();<sp/>k<sp/>+=<sp/>2)</highlight></codeline>
<codeline lineno="896"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>debug(</highlight><highlight class="stringliteral">&quot;<sp/><sp/>%d<sp/>&lt;-<sp/>%d&quot;</highlight><highlight class="normal">,<sp/>shInitCodeLast[k],<sp/>shInitCodeLast[k<sp/>+<sp/>1]);</highlight></codeline>
<codeline lineno="897"><highlight class="normal"></highlight></codeline>
<codeline lineno="898"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="shLog_8cpp_1a2926179632c7c86265007652d3d30b14" kindref="member">sh_debug</ref>(<ref refid="shLog_8h_1a66042048eb3ce30a1dccb2ebf8c2fd5caae3b70b41400c8a36e8a094ac1dbe43c" kindref="member">SHLOG_ERROR</ref>,</highlight></codeline>
<codeline lineno="899"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;shader(%s):<sp/>init<sp/>code<sp/>for<sp/>textures<sp/>used<sp/>in<sp/>static<sp/>branching&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="900"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/>differs<sp/>between<sp/>static<sp/>variants&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="901"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>shContext.name());</highlight></codeline>
<codeline lineno="902"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="903"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>shInitCodeLast<sp/>=<sp/>sclass.<ref refid="classShaderClass_1ae43775f78533c08cf3075fd7b1cf952c" kindref="member">shInitCode</ref>;</highlight></codeline>
<codeline lineno="904"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>has_first_static_variant<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="905"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="906"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="907"><highlight class="normal"></highlight></codeline>
<codeline lineno="908"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(shContext.isDebugModeEnabled())</highlight></codeline>
<codeline lineno="909"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>sclass.uniqueStrings.nameCount();<sp/>i++)</highlight></codeline>
<codeline lineno="910"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>sclass.<ref refid="classShaderClass_1a86c11cc80ea041d5a25082ef6457fca3" kindref="member">messages</ref>.emplace_back(sclass.uniqueStrings.getName(i));</highlight></codeline>
<codeline lineno="911"><highlight class="normal"></highlight></codeline>
<codeline lineno="912"><highlight class="normal"><sp/><sp/><ref refid="namespaceshc_1a950f822ed9707332f0fb4c602ea82c32" kindref="member">shc::prepareTestVariantShader</ref>(NULL);</highlight></codeline>
<codeline lineno="913"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(has_first_static_variant)</highlight></codeline>
<codeline lineno="914"><highlight class="normal"><sp/><sp/><sp/><sp/>sclass.<ref refid="classShaderClass_1ae43775f78533c08cf3075fd7b1cf952c" kindref="member">shInitCode</ref><sp/>=<sp/>shInitCodeLast;</highlight></codeline>
<codeline lineno="915"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="916"><highlight class="normal"><sp/><sp/><sp/><sp/>clear_and_shrink(sclass.<ref refid="classShaderClass_1aab73a00a13fd0fb68e6001548b5de6f5" kindref="member">assumedIntervals</ref>);</highlight></codeline>
<codeline lineno="917"><highlight class="normal"></highlight></codeline>
<codeline lineno="918"><highlight class="normal"><sp/><sp/>sclass.<ref refid="classShaderClass_1a353a7b59af68266e0eb08fd3cf64e70f" kindref="member">sortStaticVarsByMode</ref>();</highlight></codeline>
<codeline lineno="919"><highlight class="normal"></highlight></codeline>
<codeline lineno="920"><highlight class="normal"><sp/><sp/>staticVariants.fillVariantTable(sclass.<ref refid="classShaderClass_1abb3479bae66a8a5da2f495d7c6dde8db" kindref="member">staticVariants</ref>);</highlight></codeline>
<codeline lineno="921"><highlight class="normal"></highlight></codeline>
<codeline lineno="922"><highlight class="normal"><sp/><sp/><ref refid="shLog_8cpp_1a62eed7ecd82f09c561ab7e758e18cd60" kindref="member">sh_set_current_variant</ref>(NULL);</highlight></codeline>
<codeline lineno="923"><highlight class="normal"><sp/><sp/><ref refid="shLog_8cpp_1a13c739ae2e3faaa3cf559a75d265cd5c" kindref="member">sh_set_current_dyn_variant</ref>(NULL);</highlight></codeline>
<codeline lineno="924"><highlight class="normal"></highlight></codeline>
<codeline lineno="925"><highlight class="normal"><sp/><sp/><ref refid="shLog_8cpp_1a2926179632c7c86265007652d3d30b14" kindref="member">sh_debug</ref>(<ref refid="shLog_8h_1a66042048eb3ce30a1dccb2ebf8c2fd5ca0012c8acb382f295fe614046a64bba11" kindref="member">SHLOG_INFO</ref>,<sp/></highlight><highlight class="stringliteral">&quot;%d<sp/>code<sp/>variants&quot;</highlight><highlight class="normal">,<sp/>sclass.<ref refid="classShaderClass_1afd05a0478ecbe5c13b066e4456580359" kindref="member">code</ref>.size());</highlight></codeline>
<codeline lineno="926"><highlight class="normal"></highlight></codeline>
<codeline lineno="927"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="structErrorCounter_1a16e83af848da6b273387e7f9078aff89" kindref="member">ErrorCounter::curShader</ref>().isEmpty())</highlight></codeline>
<codeline lineno="928"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="929"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="shLog_8cpp_1a2926179632c7c86265007652d3d30b14" kindref="member">sh_debug</ref>(<ref refid="shLog_8h_1a66042048eb3ce30a1dccb2ebf8c2fd5ca0012c8acb382f295fe614046a64bba11" kindref="member">SHLOG_INFO</ref>,<sp/></highlight><highlight class="stringliteral">&quot;%d<sp/>static/dynamic<sp/>vars\n&quot;</highlight><highlight class="normal">,<sp/>sclass.<ref refid="classShaderClass_1af6a928a5bd7e66cc342af3b4778c280c" kindref="member">stvar</ref>.size());</highlight></codeline>
<codeline lineno="930"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="931"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="932"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="933"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="shLog_8cpp_1a2926179632c7c86265007652d3d30b14" kindref="member">sh_debug</ref>(<ref refid="shLog_8h_1a66042048eb3ce30a1dccb2ebf8c2fd5ca0012c8acb382f295fe614046a64bba11" kindref="member">SHLOG_INFO</ref>,<sp/></highlight><highlight class="stringliteral">&quot;%d<sp/>static/dynamic<sp/>vars&quot;</highlight><highlight class="normal">,<sp/>sclass.<ref refid="classShaderClass_1af6a928a5bd7e66cc342af3b4778c280c" kindref="member">stvar</ref>.size());</highlight></codeline>
<codeline lineno="934"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structErrorCounter_1a16e83af848da6b273387e7f9078aff89" kindref="member">ErrorCounter::curShader</ref>().<ref refid="structErrorCounter_1ab1b9b0bb91181fa7f9c030df30326f0a" kindref="member">dumpInfo</ref>();</highlight></codeline>
<codeline lineno="935"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="936"><highlight class="normal"></highlight></codeline>
<codeline lineno="937"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>compiled<sp/>successfully,<sp/>move<sp/>to<sp/>heap<sp/>and<sp/>add<sp/>to<sp/>global<sp/>shader<sp/>classes<sp/>list</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="938"><highlight class="normal"><sp/><sp/><ref refid="linkShaders_8cpp_1a9dd11b723e582c5a303b746fde7c5efa" kindref="member">add_shader_class</ref>(shContext.releaseCompiledShader(),<sp/>ctx);</highlight></codeline>
<codeline lineno="939"><highlight class="normal"></highlight></codeline>
<codeline lineno="940"><highlight class="normal"><sp/><sp/><ref refid="structErrorCounter_1a16e83af848da6b273387e7f9078aff89" kindref="member">ErrorCounter::curShader</ref>().<ref refid="structErrorCounter_1ad8248b42e27a526ddd06e3789a44da4e" kindref="member">reset</ref>();</highlight></codeline>
<codeline lineno="941"><highlight class="normal">}</highlight></codeline>
<codeline lineno="942"><highlight class="normal"></highlight></codeline>
<codeline lineno="943"><highlight class="normal"></highlight></codeline>
<codeline lineno="944"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>add_shader(shader_decl<sp/>*sh,<sp/><ref refid="structParser" kindref="compound">Parser</ref><sp/>&amp;parser,<sp/><ref refid="classshc_1_1TargetContext" kindref="compound">shc::TargetContext</ref><sp/>&amp;ctx)</highlight></codeline>
<codeline lineno="945"><highlight class="normal">{</highlight></codeline>
<codeline lineno="946"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!sh)</highlight></codeline>
<codeline lineno="947"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="948"><highlight class="normal"></highlight></codeline>
<codeline lineno="949"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>sh-&gt;name.size();<sp/>++i)</highlight></codeline>
<codeline lineno="950"><highlight class="normal"><sp/><sp/><sp/><sp/>add_shader(sh,<sp/>parser,<sp/>sh-&gt;name[i],<sp/>ctx);</highlight></codeline>
<codeline lineno="951"><highlight class="normal">}</highlight></codeline>
<codeline lineno="952"><highlight class="normal"></highlight></codeline>
<codeline lineno="953"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>eval_block_stat(block_stat<sp/>*s,<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;cb,<sp/><ref refid="structParser" kindref="compound">Parser</ref><sp/>&amp;parser);</highlight></codeline>
<codeline lineno="954"><highlight class="normal"></highlight></codeline>
<codeline lineno="955"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>eval_block_if(block_if<sp/>&amp;s,<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;cb,<sp/><ref refid="structParser" kindref="compound">Parser</ref><sp/>&amp;parser)</highlight></codeline>
<codeline lineno="956"><highlight class="normal">{</highlight></codeline>
<codeline lineno="957"><highlight class="normal"><sp/><sp/>G_ASSERT(s.expr);</highlight></codeline>
<codeline lineno="958"><highlight class="normal"><sp/><sp/><ref refid="classShVarBool" kindref="compound">ShVarBool</ref><sp/>eTrue<sp/>=<sp/>cb.<ref refid="classShaderParser_1_1ShaderBoolEvalCB_1a9adf5ca170f128f4b53c4dce191b6e1b" kindref="member">eval_expr</ref>(*s.expr);</highlight></codeline>
<codeline lineno="959"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isTrue<sp/>=<sp/>eTrue.<ref refid="classShVarBool_1aa1e84216403109d360db42129c7f698d" kindref="member">value</ref>,<sp/>isFalse<sp/>=<sp/>!eTrue.<ref refid="classShVarBool_1aa1e84216403109d360db42129c7f698d" kindref="member">value</ref>;</highlight></codeline>
<codeline lineno="960"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!eTrue.<ref refid="classShVarBool_1a56bef58e491d1cb5488cd5be282fe3bc" kindref="member">isConst</ref>)</highlight></codeline>
<codeline lineno="961"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="962"><highlight class="normal"><sp/><sp/><sp/><sp/>parser.<ref refid="structParser_1a9e9bc1e12aec4ba300d71598132ae8ec" kindref="member">get_lexer</ref>().<ref refid="classLexer_1a15173ff3748bd39e52a74ddae376a785" kindref="member">set_error</ref>(s.expr-&gt;file_start,<sp/>s.expr-&gt;line_start,<sp/>s.expr-&gt;col_start,</highlight></codeline>
<codeline lineno="963"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;not<sp/>constant<sp/>expression<sp/>for<sp/>if&apos;s<sp/>in<sp/>shader<sp/>block&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="964"><highlight class="normal"><sp/><sp/><sp/><sp/>isTrue<sp/>=<sp/>isFalse<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="965"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="966"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(isTrue)</highlight></codeline>
<codeline lineno="967"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="968"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>s.true_stat.size();<sp/>++i)</highlight></codeline>
<codeline lineno="969"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>eval_block_stat(s.true_stat[i],<sp/>cb,<sp/>parser);</highlight></codeline>
<codeline lineno="970"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="971"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(isFalse)</highlight></codeline>
<codeline lineno="972"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="973"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(s.false_stat.size()<sp/>||<sp/>s.else_if)</highlight></codeline>
<codeline lineno="974"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="975"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>s.false_stat.size();<sp/>++i)</highlight></codeline>
<codeline lineno="976"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>eval_block_stat(s.false_stat[i],<sp/>cb,<sp/>parser);</highlight></codeline>
<codeline lineno="977"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(s.else_if)</highlight></codeline>
<codeline lineno="978"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>eval_block_if(*s.else_if,<sp/>cb,<sp/>parser);</highlight></codeline>
<codeline lineno="979"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="980"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="981"><highlight class="normal">}</highlight></codeline>
<codeline lineno="982"><highlight class="normal"></highlight></codeline>
<codeline lineno="983"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>eval_block_stat(block_stat<sp/>&amp;s,<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;cb,<sp/><ref refid="structParser" kindref="compound">Parser</ref><sp/>&amp;parser)</highlight></codeline>
<codeline lineno="984"><highlight class="normal">{</highlight></codeline>
<codeline lineno="985"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(s.external_block)</highlight></codeline>
<codeline lineno="986"><highlight class="normal"><sp/><sp/><sp/><sp/>cb.eval_external_block(*s.external_block);</highlight></codeline>
<codeline lineno="987"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(s.imm_const_block)</highlight></codeline>
<codeline lineno="988"><highlight class="normal"><sp/><sp/><sp/><sp/>cb.eval(*s.imm_const_block);</highlight></codeline>
<codeline lineno="989"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(s.if_stat)</highlight></codeline>
<codeline lineno="990"><highlight class="normal"><sp/><sp/><sp/><sp/>eval_block_if(*s.if_stat,<sp/>cb,<sp/>parser);</highlight></codeline>
<codeline lineno="991"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(s.supports)</highlight></codeline>
<codeline lineno="992"><highlight class="normal"><sp/><sp/><sp/><sp/>cb.eval_supports(*s.supports);</highlight></codeline>
<codeline lineno="993"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(s.local_decl)</highlight></codeline>
<codeline lineno="994"><highlight class="normal"><sp/><sp/><sp/><sp/>cb.eval_shader_locdecl(*s.local_decl);</highlight></codeline>
<codeline lineno="995"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(s.boolean_decl)</highlight></codeline>
<codeline lineno="996"><highlight class="normal"><sp/><sp/><sp/><sp/>cb.eval_bool_decl(*s.boolean_decl);</highlight></codeline>
<codeline lineno="997"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="998"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="999"><highlight class="normal"><sp/><sp/><sp/><sp/>G_ASSERT(0<sp/>&amp;&amp;<sp/></highlight><highlight class="stringliteral">&quot;not<sp/>implemented&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1000"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1001"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1002"><highlight class="normal"></highlight></codeline>
<codeline lineno="1003"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>eval_block_stat(block_stat<sp/>*s,<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;cb,<sp/><ref refid="structParser" kindref="compound">Parser</ref><sp/>&amp;parser)</highlight></codeline>
<codeline lineno="1004"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1005"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(s)</highlight></codeline>
<codeline lineno="1006"><highlight class="normal"><sp/><sp/><sp/><sp/>eval_block_stat(*s,<sp/>cb,<sp/>parser);</highlight></codeline>
<codeline lineno="1007"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1008"><highlight class="normal"></highlight></codeline>
<codeline lineno="1009"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>eval_block(block_decl<sp/>&amp;bl,<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;cb,<sp/><ref refid="structParser" kindref="compound">Parser</ref><sp/>&amp;parser)</highlight></codeline>
<codeline lineno="1010"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1011"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>bl.stat.size();<sp/>++i)</highlight></codeline>
<codeline lineno="1012"><highlight class="normal"><sp/><sp/><sp/><sp/>eval_block_stat(bl.stat[i],<sp/>cb,<sp/>parser);</highlight></codeline>
<codeline lineno="1013"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1014"><highlight class="normal"></highlight></codeline>
<codeline lineno="1015"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceShaderParser_1ae0f69a7c7e5d7877b4976cda83521b5b" kindref="member">add_block</ref>(block_decl<sp/>*bl,<sp/><ref refid="structParser" kindref="compound">Parser</ref><sp/>&amp;parser,<sp/><ref refid="classshc_1_1TargetContext" kindref="compound">shc::TargetContext</ref><sp/>&amp;ctx)</highlight></codeline>
<codeline lineno="1016"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1017"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>REPORT_ERR(msg,<sp/>t)<sp/>parser.get_lexer().set_error(t-&gt;file_start,<sp/>t-&gt;line_start,<sp/>t-&gt;col_start,<sp/>msg)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1018"><highlight class="normal"></highlight></codeline>
<codeline lineno="1019"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!bl)</highlight></codeline>
<codeline lineno="1020"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1021"><highlight class="normal"></highlight></codeline>
<codeline lineno="1022"><highlight class="normal"><sp/><sp/><ref refid="namedConst_8h_1a8df4796c58d0d8445eaf37bb57425b6c" kindref="member">ShaderBlockLevel</ref><sp/>level<sp/>=<sp/><ref refid="namedConst_8h_1a8df4796c58d0d8445eaf37bb57425b6ca0db45d2a4141101bdfe48e3314cfbca3" kindref="member">ShaderBlockLevel::UNDEFINED</ref>;</highlight></codeline>
<codeline lineno="1023"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strcmp(bl-&gt;block_scope-&gt;text,<sp/></highlight><highlight class="stringliteral">&quot;global_const&quot;</highlight><highlight class="normal">)<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="1024"><highlight class="normal"><sp/><sp/><sp/><sp/>level<sp/>=<sp/><ref refid="namedConst_8h_1a8df4796c58d0d8445eaf37bb57425b6cad898411bc00251ab145d6c0d5971f3ab" kindref="member">ShaderBlockLevel::GLOBAL_CONST</ref>;</highlight></codeline>
<codeline lineno="1025"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strcmp(bl-&gt;block_scope-&gt;text,<sp/></highlight><highlight class="stringliteral">&quot;frame&quot;</highlight><highlight class="normal">)<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="1026"><highlight class="normal"><sp/><sp/><sp/><sp/>level<sp/>=<sp/><ref refid="namedConst_8h_1a8df4796c58d0d8445eaf37bb57425b6cac57e921596445b99ab85558984966184" kindref="member">ShaderBlockLevel::FRAME</ref>;</highlight></codeline>
<codeline lineno="1027"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strcmp(bl-&gt;block_scope-&gt;text,<sp/></highlight><highlight class="stringliteral">&quot;scene&quot;</highlight><highlight class="normal">)<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="1028"><highlight class="normal"><sp/><sp/><sp/><sp/>level<sp/>=<sp/><ref refid="namedConst_8h_1a8df4796c58d0d8445eaf37bb57425b6caf151a543099185593a5a87339c552698" kindref="member">ShaderBlockLevel::SCENE</ref>;</highlight></codeline>
<codeline lineno="1029"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strcmp(bl-&gt;block_scope-&gt;text,<sp/></highlight><highlight class="stringliteral">&quot;object&quot;</highlight><highlight class="normal">)<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="1030"><highlight class="normal"><sp/><sp/><sp/><sp/>level<sp/>=<sp/><ref refid="namedConst_8h_1a8df4796c58d0d8445eaf37bb57425b6ca8eee8e217391199668cbac89472ace53" kindref="member">ShaderBlockLevel::OBJECT</ref>;</highlight></codeline>
<codeline lineno="1031"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1032"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1033"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="shsem_8cpp_1a34b68d8dca65a45dfc31532f8800225d" kindref="member">REPORT_ERR</ref>(</highlight><highlight class="stringliteral">&quot;invalid<sp/>block<sp/>scope&quot;</highlight><highlight class="normal">,<sp/>bl-&gt;block_scope);</highlight></codeline>
<codeline lineno="1034"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1035"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1036"><highlight class="normal"></highlight></codeline>
<codeline lineno="1037"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ctx.<ref refid="classshc_1_1TargetContext_1a29da580ffb2850a459e34b407e0e57ed" kindref="member">blocks</ref>().<ref refid="classShaderBlockTable_1a208a9d0ca182b150a9183de1d3d14f6a" kindref="member">findBlock</ref>(bl-&gt;name-&gt;text))</highlight></codeline>
<codeline lineno="1038"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1039"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="shsem_8cpp_1a34b68d8dca65a45dfc31532f8800225d" kindref="member">REPORT_ERR</ref>(</highlight><highlight class="stringliteral">&quot;invalid<sp/>redeclaration<sp/>of<sp/>block&quot;</highlight><highlight class="normal">,<sp/>bl-&gt;name);</highlight></codeline>
<codeline lineno="1040"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1041"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1042"><highlight class="normal"></highlight></codeline>
<codeline lineno="1043"><highlight class="normal"><sp/><sp/><ref refid="classIntervalList" kindref="compound">IntervalList</ref><sp/>intervals;</highlight></codeline>
<codeline lineno="1044"><highlight class="normal"><sp/><sp/><ref refid="classShaderVariant_1_1TypeTable" kindref="compound">ShaderVariant::TypeTable</ref><sp/>nullType{ctx};</highlight></codeline>
<codeline lineno="1045"><highlight class="normal"><sp/><sp/>nullType.setIntervalList(&amp;intervals);</highlight></codeline>
<codeline lineno="1046"><highlight class="normal"><sp/><sp/><ref refid="classShaderVariant_1_1VariantSrc" kindref="compound">ShaderVariant::VariantSrc</ref><sp/>stVariant(nullType);</highlight></codeline>
<codeline lineno="1047"><highlight class="normal"><sp/><sp/><ref refid="structShaderVariant_1_1VariantInfo" kindref="compound">ShaderVariant::VariantInfo</ref><sp/>variant(stVariant,<sp/>NULL);</highlight></codeline>
<codeline lineno="1048"><highlight class="normal"></highlight></codeline>
<codeline lineno="1049"><highlight class="normal"><sp/><sp/><ref refid="classShaderSemCode" kindref="compound">ShaderSemCode</ref><sp/>targetSsc{ctx};</highlight></codeline>
<codeline lineno="1050"><highlight class="normal"></highlight></codeline>
<codeline lineno="1051"><highlight class="normal"><sp/><sp/><ref refid="classshc_1_1ShaderContext" kindref="compound">shc::ShaderContext</ref><sp/>shaderBlockCtx<sp/>=<sp/>ctx.<ref refid="classshc_1_1TargetContext_1ac03ec24da55f47ae4400917eb570ad91" kindref="member">makeShaderContext</ref>(bl-&gt;name-&gt;text,<sp/>level,<sp/>bl-&gt;name);</highlight></codeline>
<codeline lineno="1052"><highlight class="normal"><sp/><sp/><ref refid="classshc_1_1VariantContext" kindref="compound">shc::VariantContext</ref><sp/>variantCtx<sp/>=<sp/>shaderBlockCtx.<ref refid="classshc_1_1ShaderContext_1a62a59e2a2d91f7584650feed9e11d3bb" kindref="member">makeVariantContext</ref>(variant,<sp/>targetSsc);</highlight></codeline>
<codeline lineno="1053"><highlight class="normal"></highlight></codeline>
<codeline lineno="1054"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>evaluate<sp/>shader</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1055"><highlight class="normal"><sp/><sp/><ref refid="classShaderParser_1_1AssembleShaderEvalCB" kindref="compound">AssembleShaderEvalCB</ref><sp/>cb{variantCtx};</highlight></codeline>
<codeline lineno="1056"><highlight class="normal"></highlight></codeline>
<codeline lineno="1057"><highlight class="normal"><sp/><sp/>parser.<ref refid="structParser_1a9e9bc1e12aec4ba300d71598132ae8ec" kindref="member">get_lexer</ref>().<ref refid="classLexer_1aba6de1ce7cc7f59bea340d75f67345b6" kindref="member">begin_block</ref>();</highlight></codeline>
<codeline lineno="1058"><highlight class="normal"><sp/><sp/>eval_block(*bl,<sp/>cb,<sp/>parser);</highlight></codeline>
<codeline lineno="1059"><highlight class="normal"><sp/><sp/>parser.<ref refid="structParser_1a9e9bc1e12aec4ba300d71598132ae8ec" kindref="member">get_lexer</ref>().<ref refid="classLexer_1a80289e58c6d3cb3ee3ac7d04f612254a" kindref="member">end_block</ref>();</highlight></codeline>
<codeline lineno="1060"><highlight class="normal"></highlight></codeline>
<codeline lineno="1061"><highlight class="normal"><sp/><sp/>cb.compilePreshader();</highlight></codeline>
<codeline lineno="1062"><highlight class="normal"></highlight></codeline>
<codeline lineno="1063"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;bytecode<sp/>=<sp/>variantCtx.<ref refid="classshc_1_1VariantContext_1a4d4c5240b72856d0eeaccfc5ae8d976f" kindref="member">stBytecode</ref>();</highlight></codeline>
<codeline lineno="1064"><highlight class="normal"></highlight></codeline>
<codeline lineno="1065"><highlight class="normal"><sp/><sp/>Tab&lt;int&gt;<sp/><ref refid="namespacestcode" kindref="compound">stcode</ref>{};</highlight></codeline>
<codeline lineno="1066"><highlight class="normal"><sp/><sp/>append_items(<ref refid="namespacestcode" kindref="compound">stcode</ref>,<sp/>bytecode.stblkcode.size(),<sp/>bytecode.stblkcode.data());</highlight></codeline>
<codeline lineno="1067"><highlight class="normal"><sp/><sp/>append_items(<ref refid="namespacestcode" kindref="compound">stcode</ref>,<sp/>bytecode.stcode.size(),<sp/>bytecode.stcode.data());</highlight></codeline>
<codeline lineno="1068"><highlight class="normal"></highlight></codeline>
<codeline lineno="1069"><highlight class="normal"><sp/><sp/><ref refid="namespaceassembly_1ad3e505f51d3620ecfe672ffa1b7e9c99" kindref="member">assembly::build_cpp_declarations_for_used_local_vars</ref>(variantCtx);</highlight></codeline>
<codeline lineno="1070"><highlight class="normal"></highlight></codeline>
<codeline lineno="1071"><highlight class="normal"><sp/><sp/><ref refid="structDynamicStcodeRoutine" kindref="compound">DynamicStcodeRoutine</ref><sp/>collectedScript<sp/>=<sp/>eastl::move(variantCtx.<ref refid="classshc_1_1VariantContext_1a45351b6130235b4bde86f2fb2bac44fe" kindref="member">cppStcode</ref>().cppStcode);</highlight></codeline>
<codeline lineno="1072"><highlight class="normal"><sp/><sp/>collectedScript.<ref refid="structStcodeRoutine_1a5830b77faa2e85d087f330c51c9d6f94" kindref="member">merge</ref>(eastl::move((<ref refid="structStcodeRoutine" kindref="compound">StcodeRoutine</ref><sp/>&amp;)variantCtx.<ref refid="classshc_1_1VariantContext_1a45351b6130235b4bde86f2fb2bac44fe" kindref="member">cppStcode</ref>().cppStblkcode));</highlight></codeline>
<codeline lineno="1073"><highlight class="normal"></highlight></codeline>
<codeline lineno="1074"><highlight class="normal"><sp/><sp/><ref refid="classShaderStateBlock" kindref="compound">ShaderStateBlock</ref><sp/>*blk<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="classShaderStateBlock" kindref="compound">ShaderStateBlock</ref>(bl-&gt;name-&gt;text,<sp/>level,<sp/>eastl::move(variantCtx.<ref refid="classshc_1_1VariantContext_1ab722b76d9c32f145bd21cea293d07846" kindref="member">namedConstTable</ref>()),<sp/>make_span(<ref refid="namespacestcode" kindref="compound">stcode</ref>),</highlight></codeline>
<codeline lineno="1075"><highlight class="normal"><sp/><sp/><sp/><sp/>&amp;collectedScript,<sp/>bytecode.regAllocator-&gt;requiredRegCount(),<sp/>ctx);</highlight></codeline>
<codeline lineno="1076"><highlight class="normal"></highlight></codeline>
<codeline lineno="1077"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!ctx.<ref refid="classshc_1_1TargetContext_1a29da580ffb2850a459e34b407e0e57ed" kindref="member">blocks</ref>().<ref refid="classShaderBlockTable_1ad5ec754c23a14e7d4f73cba66147c486" kindref="member">registerBlock</ref>(blk))</highlight></codeline>
<codeline lineno="1078"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1079"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="shsem_8cpp_1a34b68d8dca65a45dfc31532f8800225d" kindref="member">REPORT_ERR</ref>(</highlight><highlight class="stringliteral">&quot;cannot<sp/>add<sp/>block&quot;</highlight><highlight class="normal">,<sp/>bl-&gt;name);</highlight></codeline>
<codeline lineno="1080"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>blk;</highlight></codeline>
<codeline lineno="1081"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1082"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1083"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1084"><highlight class="normal"></highlight></codeline>
<codeline lineno="1085"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceShaderParser_1a590ae58ba545da701fc9fe7688bac1b9" kindref="member">add_hlsl</ref>(hlsl_global_decl_class<sp/>&amp;sh,<sp/><ref refid="structParser" kindref="compound">Parser</ref><sp/>&amp;parser,<sp/><ref refid="classshc_1_1TargetContext" kindref="compound">shc::TargetContext</ref><sp/>&amp;ctx)</highlight></codeline>
<codeline lineno="1086"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1087"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="namespacesemantic_1a6b39c1fad1298c77aa50c91779bd0413" kindref="member">semantic::validate_hardcoded_regs_in_hlsl_block</ref>(sh.text))</highlight></codeline>
<codeline lineno="1088"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1089"><highlight class="normal"></highlight></codeline>
<codeline lineno="1090"><highlight class="normal"><sp/><sp/><ref refid="hlslStage_8h_1ab27749cd2e9a40a990a73784ff99db95" kindref="member">hlsl_mask_t</ref><sp/>hlsl_types<sp/>=<sp/><ref refid="hlslStage_8h_1a611ebb9ca51bd44cb0492e2720609242a054c2098bd9404563c2217d6cd150543" kindref="member">HLSL_FLAGS_ALL</ref>;</highlight></codeline>
<codeline lineno="1091"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sh.ident)</highlight></codeline>
<codeline lineno="1092"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1093"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="hlslStage_8h_1a2c05326871fdf863346c90daec291c82" kindref="member">HlslCompilationStage</ref><sp/>stage<sp/>=<sp/><ref refid="hlslStage_8h_1a960773a0e722b1ff1ab524d174509816" kindref="member">profile_to_hlsl_stage</ref>(sh.ident-&gt;text);</highlight></codeline>
<codeline lineno="1094"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(stage<sp/>==<sp/><ref refid="hlslStage_8h_1a2c05326871fdf863346c90daec291c82a122ff6a6ec14da30f15afba301d36b4c" kindref="member">HLSL_INVALID</ref>)</highlight></codeline>
<codeline lineno="1095"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="shsem_8cpp_1a34b68d8dca65a45dfc31532f8800225d" kindref="member">REPORT_ERR</ref>(String(0,<sp/></highlight><highlight class="stringliteral">&quot;Unexpected<sp/>scope<sp/>%s&quot;</highlight><highlight class="normal">,<sp/>sh.ident-&gt;text).c_str(),<sp/>sh.ident);</highlight></codeline>
<codeline lineno="1096"><highlight class="normal"></highlight></codeline>
<codeline lineno="1097"><highlight class="normal"><sp/><sp/><sp/><sp/>hlsl_types<sp/>=<sp/><ref refid="hlslStage_8h_1adf624674936113ffe1fb67c0d1d34d7b" kindref="member">HLSL_ALL_FLAGS_LIST</ref>[stage];</highlight></codeline>
<codeline lineno="1098"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1099"><highlight class="normal"></highlight></codeline>
<codeline lineno="1100"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(hlsl_types<sp/>&amp;<sp/><ref refid="hlslStage_8h_1a611ebb9ca51bd44cb0492e2720609242a2e339f3d586fc6b119b09c398b68aa4c" kindref="member">HLSL_FLAGS_VS</ref>)</highlight></codeline>
<codeline lineno="1101"><highlight class="normal"><sp/><sp/><sp/><sp/>hlsl_types<sp/>|=<sp/><ref refid="hlslStage_8h_1a611ebb9ca51bd44cb0492e2720609242ae45fbe924f8ca9142be434a0c9b57c76" kindref="member">HLSL_FLAGS_DS</ref><sp/>|<sp/><ref refid="hlslStage_8h_1a611ebb9ca51bd44cb0492e2720609242a43a111f21920dd68b8f665a4a18e9416" kindref="member">HLSL_FLAGS_GS</ref><sp/>|<sp/><ref refid="hlslStage_8h_1a611ebb9ca51bd44cb0492e2720609242a7b423054aca91cde42b96ad6c6645490" kindref="member">HLSL_FLAGS_HS</ref>;</highlight></codeline>
<codeline lineno="1102"><highlight class="normal"></highlight></codeline>
<codeline lineno="1103"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(hlsl_types<sp/>&amp;<sp/><ref refid="hlslStage_8h_1a611ebb9ca51bd44cb0492e2720609242a0be04e2feb00c47d6b4bd599929d4f2b" kindref="member">HLSL_FLAGS_AS</ref>)</highlight></codeline>
<codeline lineno="1104"><highlight class="normal"><sp/><sp/><sp/><sp/>hlsl_types<sp/>|=<sp/><ref refid="hlslStage_8h_1a611ebb9ca51bd44cb0492e2720609242ace5a9a144f6708d48cae4ddb7dfd131f" kindref="member">HLSL_FLAGS_MS</ref>;</highlight></codeline>
<codeline lineno="1105"><highlight class="normal"></highlight></codeline>
<codeline lineno="1106"><highlight class="normal"><sp/><sp/>ctx.<ref refid="classshc_1_1TargetContext_1ab5eb91b176728c17b51fa3ed6ab11cd3" kindref="member">globHlslSrc</ref>().forEach(hlsl_types,<sp/>[&amp;](String<sp/>&amp;src)<sp/>{<sp/><ref refid="namespaceShaderParser_1ab3462116b1620a58f8ada21b41e65826" kindref="member">addSourceCode</ref>(src,<sp/>sh.text,<sp/>parser,<sp/>ctx.<ref refid="classshc_1_1TargetContext_1a50ca45dddf4a7db50606a5069f923f11" kindref="member">globMessages</ref>(),<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);<sp/>});</highlight></codeline>
<codeline lineno="1107"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1108"><highlight class="normal"></highlight><highlight class="preprocessor">#undef<sp/>REPORT_ERR</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1109"><highlight class="normal"></highlight></codeline>
<codeline lineno="1110"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceShaderParser_1aec0c601358ebb5108c2204229539df3d" kindref="member">add_global_bool</ref>(ShaderTerminal::bool_decl<sp/>&amp;bool_var,<sp/><ref refid="structParser" kindref="compound">Parser</ref><sp/>&amp;parser,<sp/><ref refid="classshc_1_1TargetContext" kindref="compound">shc::TargetContext</ref><sp/>&amp;ctx)</highlight></codeline>
<codeline lineno="1111"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1112"><highlight class="normal"><sp/><sp/>ctx.<ref refid="classshc_1_1TargetContext_1a328f404985f948f6e8038c5e4775149c" kindref="member">globBoolVars</ref>().<ref refid="classBoolVarTable_1a64619e7effcda65e6b155867dc3d45a4" kindref="member">add</ref>(bool_var,<sp/>parser);</highlight></codeline>
<codeline lineno="1113"><highlight class="normal"></highlight></codeline>
<codeline lineno="1114"><highlight class="normal"><sp/><sp/>String<sp/>hlsl_bool_var(0,<sp/></highlight><highlight class="stringliteral">&quot;##bool<sp/>%s\n&quot;</highlight><highlight class="normal">,<sp/>bool_var.name-&gt;text);</highlight></codeline>
<codeline lineno="1115"><highlight class="normal"><sp/><sp/>ctx.<ref refid="classshc_1_1TargetContext_1ab5eb91b176728c17b51fa3ed6ab11cd3" kindref="member">globHlslSrc</ref>().forEach([&amp;](String<sp/>&amp;src)<sp/>{<sp/>src.append(hlsl_bool_var);<sp/>});</highlight></codeline>
<codeline lineno="1116"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1117"><highlight class="normal">};<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>ShaderParser</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1118"><highlight class="normal"></highlight></codeline>
<codeline lineno="1119"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>build_condition_string(bool_expr<sp/>&amp;e,<sp/>String<sp/>&amp;out);</highlight></codeline>
<codeline lineno="1120"><highlight class="normal"></highlight></codeline>
<codeline lineno="1121"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>build_condition_value(bool_value<sp/>&amp;e,<sp/>String<sp/>&amp;out)</highlight></codeline>
<codeline lineno="1122"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1123"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*left<sp/>=<sp/>NULL,<sp/>*op<sp/>=<sp/>NULL,<sp/>*right<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="1124"><highlight class="normal"></highlight></codeline>
<codeline lineno="1125"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(e.cmpop)</highlight></codeline>
<codeline lineno="1126"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(e.cmpop-&gt;op-&gt;num)</highlight></codeline>
<codeline lineno="1127"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>SHADER_TOKENS::SHTOK_eq:<sp/>op<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;==&quot;</highlight><highlight class="normal">;<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1129"><highlight class="normal"></highlight></codeline>
<codeline lineno="1130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>SHADER_TOKENS::SHTOK_noteq:<sp/>op<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;!=&quot;</highlight><highlight class="normal">;<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>SHADER_TOKENS::SHTOK_greater:<sp/>op<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&gt;&quot;</highlight><highlight class="normal">;<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>SHADER_TOKENS::SHTOK_greatereq:</highlight></codeline>
<codeline lineno="1133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>op<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&gt;=&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>;</highlight></codeline>
<codeline lineno="1135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>SHADER_TOKENS::SHTOK_smaller:</highlight></codeline>
<codeline lineno="1137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>op<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&lt;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>;</highlight></codeline>
<codeline lineno="1139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>SHADER_TOKENS::SHTOK_smallereq:</highlight></codeline>
<codeline lineno="1141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>op<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&lt;=&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>;</highlight></codeline>
<codeline lineno="1143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1144"><highlight class="normal"></highlight></codeline>
<codeline lineno="1145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:<sp/>debug(</highlight><highlight class="stringliteral">&quot;%p.num=%d&quot;</highlight><highlight class="normal">,<sp/>e.cmpop-&gt;op,<sp/>e.cmpop-&gt;op-&gt;num);</highlight></codeline>
<codeline lineno="1146"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1147"><highlight class="normal"></highlight></codeline>
<codeline lineno="1148"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(e.two_sided)</highlight></codeline>
<codeline lineno="1149"><highlight class="normal"><sp/><sp/><sp/><sp/>left<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;two_sided&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1150"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(e.real_two_sided)</highlight></codeline>
<codeline lineno="1151"><highlight class="normal"><sp/><sp/><sp/><sp/>left<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;real_two_sided&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1152"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(e.shader)</highlight></codeline>
<codeline lineno="1153"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1154"><highlight class="normal"><sp/><sp/><sp/><sp/>left<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;shader&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1155"><highlight class="normal"><sp/><sp/><sp/><sp/>right<sp/>=<sp/>e.shader-&gt;text;</highlight></codeline>
<codeline lineno="1156"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1157"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(e.hw)</highlight></codeline>
<codeline lineno="1158"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1159"><highlight class="normal"><sp/><sp/><sp/><sp/>left<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;hardware&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1160"><highlight class="normal"><sp/><sp/><sp/><sp/>op<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;.&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1161"><highlight class="normal"><sp/><sp/><sp/><sp/>right<sp/>=<sp/>e.hw-&gt;var-&gt;text;</highlight></codeline>
<codeline lineno="1162"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1163"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(e.interval_ident)</highlight></codeline>
<codeline lineno="1164"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1165"><highlight class="normal"><sp/><sp/><sp/><sp/>left<sp/>=<sp/>e.interval_ident-&gt;text;</highlight></codeline>
<codeline lineno="1166"><highlight class="normal"><sp/><sp/><sp/><sp/>right<sp/>=<sp/>e.interval_value-&gt;text;</highlight></codeline>
<codeline lineno="1167"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1168"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(e.texture_name)</highlight></codeline>
<codeline lineno="1169"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1170"><highlight class="normal"><sp/><sp/><sp/><sp/>left<sp/>=<sp/>e.texture_name-&gt;text;</highlight></codeline>
<codeline lineno="1171"><highlight class="normal"><sp/><sp/><sp/><sp/>right<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;NULL&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1172"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1173"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(e.bool_var)</highlight></codeline>
<codeline lineno="1174"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1175"><highlight class="normal"><sp/><sp/><sp/><sp/>left<sp/>=<sp/>e.bool_var-&gt;text;</highlight></codeline>
<codeline lineno="1176"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1177"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(e.maybe)</highlight></codeline>
<codeline lineno="1178"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1179"><highlight class="normal"><sp/><sp/><sp/><sp/>left<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;maybe(&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1180"><highlight class="normal"><sp/><sp/><sp/><sp/>op<sp/>=<sp/>e.maybe_bool_var-&gt;text;</highlight></codeline>
<codeline lineno="1181"><highlight class="normal"><sp/><sp/><sp/><sp/>right<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;)&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1182"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1183"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(e.true_value)</highlight></codeline>
<codeline lineno="1184"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1185"><highlight class="normal"><sp/><sp/><sp/><sp/>left<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;true&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1186"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1187"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(e.false_value)</highlight></codeline>
<codeline lineno="1188"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1189"><highlight class="normal"><sp/><sp/><sp/><sp/>left<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;false&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1190"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1191"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1192"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1193"><highlight class="normal"><sp/><sp/><sp/><sp/>G_ASSERT(0);</highlight></codeline>
<codeline lineno="1194"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1195"><highlight class="normal"></highlight></codeline>
<codeline lineno="1196"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!op)</highlight></codeline>
<codeline lineno="1197"><highlight class="normal"><sp/><sp/><sp/><sp/>out.append(left);</highlight></codeline>
<codeline lineno="1198"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1199"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1200"><highlight class="normal"><sp/><sp/><sp/><sp/>G_ASSERT(right);</highlight></codeline>
<codeline lineno="1201"><highlight class="normal"><sp/><sp/><sp/><sp/>out.aprintf(64,<sp/></highlight><highlight class="stringliteral">&quot;%s%s%s&quot;</highlight><highlight class="normal">,<sp/>left,<sp/>op,<sp/>right);</highlight></codeline>
<codeline lineno="1202"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1203"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1204"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>build_condition_bool_not(not_expr<sp/>&amp;e,<sp/>String<sp/>&amp;out)</highlight></codeline>
<codeline lineno="1205"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1206"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(e.is_not)</highlight></codeline>
<codeline lineno="1207"><highlight class="normal"><sp/><sp/><sp/><sp/>out.append(</highlight><highlight class="stringliteral">&quot;!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1208"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(e.value-&gt;expr)</highlight></codeline>
<codeline lineno="1209"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1210"><highlight class="normal"><sp/><sp/><sp/><sp/>out.append(</highlight><highlight class="stringliteral">&quot;(&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1211"><highlight class="normal"><sp/><sp/><sp/><sp/>build_condition_string(*e.value-&gt;expr,<sp/>out);</highlight></codeline>
<codeline lineno="1212"><highlight class="normal"><sp/><sp/><sp/><sp/>out.append(</highlight><highlight class="stringliteral">&quot;)&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1213"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1214"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1215"><highlight class="normal"><sp/><sp/><sp/><sp/>build_condition_value(*e.value,<sp/>out);</highlight></codeline>
<codeline lineno="1216"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1217"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>build_condition_bool_and(and_expr<sp/>&amp;e,<sp/>String<sp/>&amp;out)</highlight></codeline>
<codeline lineno="1218"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1219"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(e.value)</highlight></codeline>
<codeline lineno="1220"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1221"><highlight class="normal"><sp/><sp/><sp/><sp/>build_condition_bool_not(*e.value,<sp/>out);</highlight></codeline>
<codeline lineno="1222"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1223"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1224"><highlight class="normal"></highlight></codeline>
<codeline lineno="1225"><highlight class="normal"><sp/><sp/>build_condition_bool_and(*e.a,<sp/>out);</highlight></codeline>
<codeline lineno="1226"><highlight class="normal"><sp/><sp/>out.append(</highlight><highlight class="stringliteral">&quot;<sp/>&amp;&amp;<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1227"><highlight class="normal"><sp/><sp/>build_condition_bool_not(*e.b,<sp/>out);</highlight></codeline>
<codeline lineno="1228"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1229"><highlight class="normal"></highlight></codeline>
<codeline lineno="1230"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>build_condition_string(bool_expr<sp/>&amp;e,<sp/>String<sp/>&amp;out)</highlight></codeline>
<codeline lineno="1231"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1232"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(e.value)</highlight></codeline>
<codeline lineno="1233"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1234"><highlight class="normal"><sp/><sp/><sp/><sp/>build_condition_bool_and(*e.value,<sp/>out);</highlight></codeline>
<codeline lineno="1235"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1236"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1237"><highlight class="normal"></highlight></codeline>
<codeline lineno="1238"><highlight class="normal"><sp/><sp/>build_condition_string(*e.a,<sp/>out);</highlight></codeline>
<codeline lineno="1239"><highlight class="normal"><sp/><sp/>out.append(</highlight><highlight class="stringliteral">&quot;<sp/>||<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1240"><highlight class="normal"><sp/><sp/>build_condition_bool_and(*e.b,<sp/>out);</highlight></codeline>
<codeline lineno="1241"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1242"><highlight class="normal"></highlight></codeline>
<codeline lineno="1243"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceShaderParser_1a4a17bbf595067ae88a41f034719c3ff1" kindref="member">ShaderParser::build_bool_expr_string</ref>(bool_expr<sp/>&amp;e,<sp/>String<sp/>&amp;out,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>clr_str)</highlight></codeline>
<codeline lineno="1244"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1245"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(clr_str)</highlight></codeline>
<codeline lineno="1246"><highlight class="normal"><sp/><sp/><sp/><sp/>out.clear();</highlight></codeline>
<codeline lineno="1247"><highlight class="normal"><sp/><sp/>build_condition_string(e,<sp/>out);</highlight></codeline>
<codeline lineno="1248"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1249"><highlight class="normal"></highlight></codeline>
<codeline lineno="1250"><highlight class="normal"></highlight><highlight class="comment">//<sp/>report<sp/>error,<sp/>for<sp/>plugging<sp/>into<sp/>generated<sp/>code</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1251"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="shsem_8cpp_1ae9d738792a25c83604ceb32ebdbb56e6" kindref="member">sh_report_error_cb</ref>(ShaderTerminal::shader_stat<sp/>*s,<sp/>GeneratedParser<sp/>&amp;parser)</highlight></codeline>
<codeline lineno="1252"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1253"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!s<sp/>||<sp/>!s-&gt;error_val)</highlight></codeline>
<codeline lineno="1254"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1255"><highlight class="normal"></highlight></codeline>
<codeline lineno="1256"><highlight class="normal"><sp/><sp/>parser.get_lexer().set_error(s-&gt;error_val-&gt;file_start,<sp/>s-&gt;error_val-&gt;line_start,<sp/>s-&gt;error_val-&gt;col_start,</highlight></codeline>
<codeline lineno="1257"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;shader_stat<sp/>is<sp/>not<sp/>valid!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1258"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="shsem.cpp"/>
  </compounddef>
</doxygen>
