<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.7" xml:lang="en-US">
  <compounddef id="cppStcode_8cpp" kind="file" language="C++">
    <compoundname>cppStcode.cpp</compoundname>
    <includes refid="cppStcode_8h" local="yes">cppStcode.h</includes>
    <includes refid="globalConfig_8h" local="yes">globalConfig.h</includes>
    <includes refid="defer_8h" local="yes">defer.h</includes>
    <includes refid="shLog_8h" local="yes">shLog.h</includes>
    <includes refid="semUtils_8h" local="yes">semUtils.h</includes>
    <incdepgraph>
      <node id="46">
        <label>DebugLevel.h</label>
        <link refid="DebugLevel_8h"/>
        <childnode refid="29" relation="include">
        </childnode>
      </node>
      <node id="41">
        <label>blkHash.h</label>
        <link refid="blkHash_8h"/>
      </node>
      <node id="5">
        <label>commonUtils.h</label>
        <link refid="commonUtils_8h"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>cppStcode.cpp</label>
        <link refid="cppStcode_8cpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="49" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="51" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>cppStcode.h</label>
        <link refid="cppStcode_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="39" relation="include">
        </childnode>
        <childnode refid="41" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="38" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>cppStcodeAssembly.h</label>
        <link refid="cppStcodeAssembly_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
        <childnode refid="38" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>cppStcodeBuilder.h</label>
        <link refid="cppStcodeBuilder_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
      </node>
      <node id="47">
        <label>cppStcodePlatformInfo.h</label>
        <link refid="cppStcodePlatformInfo_8h"/>
        <childnode refid="29" relation="include">
        </childnode>
      </node>
      <node id="49">
        <label>defer.h</label>
        <link refid="defer_8h"/>
        <childnode refid="50" relation="include">
        </childnode>
      </node>
      <node id="42">
        <label>globalConfig.h</label>
        <link refid="globalConfig_8h"/>
        <childnode refid="43" relation="include">
        </childnode>
        <childnode refid="46" relation="include">
        </childnode>
        <childnode refid="47" relation="include">
        </childnode>
        <childnode refid="48" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
      </node>
      <node id="21">
        <label>hash.h</label>
        <link refid="hash_8h"/>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
      </node>
      <node id="24">
        <label>hlslRegisters.h</label>
        <link refid="hlslRegisters_8h"/>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
      </node>
      <node id="14">
        <label>nameMap.h</label>
        <link refid="nameMap_8h"/>
        <childnode refid="15" relation="include">
        </childnode>
      </node>
      <node id="39">
        <label>processes.h</label>
        <link refid="processes_8h"/>
        <childnode refid="40" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="51">
        <label>semUtils.h</label>
        <link refid="semUtils_8h"/>
      </node>
      <node id="43">
        <label>shCompilationInfo.h</label>
        <link refid="shCompilationInfo_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="41" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="44" relation="include">
        </childnode>
        <childnode refid="45" relation="include">
        </childnode>
      </node>
      <node id="25">
        <label>shLog.h</label>
        <link refid="shLog_8h"/>
      </node>
      <node id="12">
        <label>shaderSave.h</label>
        <link refid="shaderSave_8h"/>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
      </node>
      <node id="11">
        <label>shaderTab.h</label>
        <link refid="shaderTab_8h"/>
        <childnode refid="12" relation="include">
        </childnode>
      </node>
      <node id="13">
        <label>varMap.h</label>
        <link refid="varMap_8h"/>
        <childnode refid="14" relation="include">
        </childnode>
      </node>
      <node id="20">
        <label>EASTL/algorithm.h</label>
      </node>
      <node id="28">
        <label>EASTL/array.h</label>
      </node>
      <node id="10">
        <label>EASTL/optional.h</label>
      </node>
      <node id="9">
        <label>EASTL/string.h</label>
      </node>
      <node id="36">
        <label>EASTL/unique_ptr.h</label>
      </node>
      <node id="29">
        <label>cstdint</label>
      </node>
      <node id="23">
        <label>cstring</label>
      </node>
      <node id="19">
        <label>dag/dag_vector.h</label>
      </node>
      <node id="18">
        <label>debug/dag_assert.h</label>
      </node>
      <node id="35">
        <label>drv/3d/dag_consts.h</label>
      </node>
      <node id="26">
        <label>generic/dag_enumerate.h</label>
      </node>
      <node id="27">
        <label>generic/dag_expected.h</label>
      </node>
      <node id="40">
        <label>generic/dag_fixedMoveOnlyFunction.h</label>
      </node>
      <node id="16">
        <label>generic/dag_tab.h</label>
      </node>
      <node id="22">
        <label>hash/BLAKE3/blake3.h</label>
      </node>
      <node id="48">
        <label>ioSys/dag_dataBlock.h</label>
      </node>
      <node id="31">
        <label>memory/dag_mem.h</label>
      </node>
      <node id="34">
        <label>shaders/dag_shaderVarType.h</label>
      </node>
      <node id="45">
        <label>shaders/dag_shaders.h</label>
      </node>
      <node id="32">
        <label>shaders/shExprTypes.h</label>
      </node>
      <node id="33">
        <label>shaders/shFunc.h</label>
      </node>
      <node id="38">
        <label>shaders/shader_layout.h</label>
      </node>
      <node id="30">
        <label>shaders/slotTexturesRange.h</label>
      </node>
      <node id="37">
        <label>ska_hash_map/flat_hash_map2.hpp</label>
      </node>
      <node id="17">
        <label>util/dag_bindump_ext.h</label>
      </node>
      <node id="8">
        <label>util/dag_globDef.h</label>
      </node>
      <node id="15">
        <label>util/dag_oaHashNameMap.h</label>
      </node>
      <node id="50">
        <label>util/dag_preprocessor.h</label>
      </node>
      <node id="7">
        <label>util/dag_safeArg.h</label>
      </node>
      <node id="44">
        <label>util/dag_string.h</label>
      </node>
      <node id="6">
        <label>utility</label>
      </node>
    </incdepgraph>
    <innerclass refid="structJamCompilationDirs" prot="public">JamCompilationDirs</innerclass>
      <sectiondef kind="define">
      <memberdef kind="define" id="cppStcode_8cpp_1afa2f02cf7da6a0b58c4f01e20ccd1384" prot="public" static="no">
        <name>DEFER</name>
        <param><defname>func_</defname></param>
        <initializer><ref refid="classdefer_1_1detail_1_1Defer" kindref="compound">defer::detail::Defer</ref> DAG_CONCAT(defer__, __COUNTER__)(func_)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="cppStcode.cpp" line="5" column="9"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="var">
      <memberdef kind="variable" id="cppStcode_8cpp_1a9b91eb550674733edd8814fa77e11bd3" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>constexpr char</type>
        <definition>constexpr char STCODE_VER_FILE_NAME[]</definition>
        <argsstring>[]</argsstring>
        <name>STCODE_VER_FILE_NAME</name>
        <initializer>= &quot;ver.txt&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="cppStcode.cpp" line="29" column="23" bodyfile="cppStcode.cpp" bodystart="29" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="cppStcode_8cpp_1ad6b4b98ad8eee6a234cd4bf715643765" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>constexpr const char *</type>
        <definition>constexpr const char* CONFIG_NAMES[]</definition>
        <argsstring>[]</argsstring>
        <name>CONFIG_NAMES</name>
        <initializer>= {&quot;dev&quot;, &quot;rel&quot;, &quot;dbg&quot;}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="cppStcode.cpp" line="41" column="29" bodyfile="cppStcode.cpp" bodystart="41" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="cppStcode_8cpp_1a299c52bcc8763adcf80d180139df41dc" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>constexpr const char *</type>
        <definition>constexpr const char* CONFIG_SUFFICES[]</definition>
        <argsstring>[]</argsstring>
        <name>CONFIG_SUFFICES</name>
        <initializer>= {&quot;-dev&quot;, &quot;&quot;, &quot;-dbg&quot;}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="cppStcode.cpp" line="42" column="29" bodyfile="cppStcode.cpp" bodystart="42" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="cppStcode_8cpp_1aac15e2901c933d722a3192ed06b0705d" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>constexpr char</type>
        <definition>constexpr char CPPFILE_HEADER_TEMPLATE[]</definition>
        <argsstring>[]</argsstring>
        <name>CPPFILE_HEADER_TEMPLATE</name>
        <initializer>= &quot;/* xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx */\n&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="cppStcode.cpp" line="318" column="23" bodyfile="cppStcode.cpp" bodystart="318" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="cppStcode_8cpp_1a59c6f79492ad86f4d46f3de71d19677c" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>constexpr size_t</type>
        <definition>constexpr size_t CPPFILE_HEADER_LEN</definition>
        <argsstring></argsstring>
        <name>CPPFILE_HEADER_LEN</name>
        <initializer>= <ref refid="commonUtils_8h_1a514d093bec84d424a39236e710bb0245" kindref="member">LITSTR_LEN</ref>(CPPFILE_HEADER_TEMPLATE)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="cppStcode.cpp" line="319" column="25" bodyfile="cppStcode.cpp" bodystart="319" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="cppStcode_8cpp_1a986294c00ce1f9ee73e712416d8a23f5" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>constexpr char</type>
        <definition>constexpr char CPPFILE_HEADER_FMT[]</definition>
        <argsstring>[]</argsstring>
        <name>CPPFILE_HEADER_FMT</name>
        <initializer>=
  &quot;/* %02hhx%02hhx%02hhx%02hhx%02hhx%02hhx%02hhx%02hhx%02hhx%02hhx%02hhx%02hhx%02hhx%02hhx%02hhx%02hhx%02hhx%02hhx%02hhx%02hhx */\n&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="cppStcode.cpp" line="320" column="23" bodyfile="cppStcode.cpp" bodystart="320" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="cppStcode_8cpp_1a439bcae731980ef8a0ab7f0e20c69189" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>constexpr char</type>
        <definition>constexpr char JAMFILE_HEADER_TEMPLATE[]</definition>
        <argsstring>[]</argsstring>
        <name>JAMFILE_HEADER_TEMPLATE</name>
        <initializer>= &quot;# xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\n&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="cppStcode.cpp" line="322" column="23" bodyfile="cppStcode.cpp" bodystart="322" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="cppStcode_8cpp_1a5a47ce6097459c2e50532035d64d2ac7" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>constexpr size_t</type>
        <definition>constexpr size_t JAMFILE_HEADER_LEN</definition>
        <argsstring></argsstring>
        <name>JAMFILE_HEADER_LEN</name>
        <initializer>= <ref refid="commonUtils_8h_1a514d093bec84d424a39236e710bb0245" kindref="member">LITSTR_LEN</ref>(JAMFILE_HEADER_TEMPLATE)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="cppStcode.cpp" line="323" column="25" bodyfile="cppStcode.cpp" bodystart="323" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="cppStcode_8cpp_1ac090e1032825c4c1fe1afb285ab7eb3f" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>constexpr char</type>
        <definition>constexpr char JAMFILE_HEADER_FMT[]</definition>
        <argsstring>[]</argsstring>
        <name>JAMFILE_HEADER_FMT</name>
        <initializer>=
  &quot;# %02hhx%02hhx%02hhx%02hhx%02hhx%02hhx%02hhx%02hhx%02hhx%02hhx%02hhx%02hhx%02hhx%02hhx%02hhx%02hhx%02hhx%02hhx%02hhx%02hhx\n&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="cppStcode.cpp" line="324" column="23" bodyfile="cppStcode.cpp" bodystart="324" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="cppStcode_8cpp_1a07cf3cb607f4acd5ec47f26270affbc8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>eastl::optional&lt; shader_layout::ExternalStcodeMode &gt;</type>
        <definition>eastl::optional&lt; shader_layout::ExternalStcodeMode &gt; arg_str_to_cpp_stcode_mode</definition>
        <argsstring>(const char *str)</argsstring>
        <name>arg_str_to_cpp_stcode_mode</name>
        <param>
          <type>const char *</type>
          <declname>str</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="cppStcode.cpp" line="31" column="17" bodyfile="cppStcode.cpp" bodystart="31" bodyend="39"/>
      </memberdef>
      <memberdef kind="function" id="cppStcode_8cpp_1af7a8aa22136002d458695935de8f4302" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>static const char * config_to_name</definition>
        <argsstring>(StcodeDynlibConfig config)</argsstring>
        <name>config_to_name</name>
        <param>
          <type><ref refid="cppStcode_8h_1a2579e1021ff8983bb1b2717f514619aa" kindref="member">StcodeDynlibConfig</ref></type>
          <declname>config</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="cppStcode.cpp" line="44" column="19" bodyfile="cppStcode.cpp" bodystart="44" bodyend="44"/>
      </memberdef>
      <memberdef kind="function" id="cppStcode_8cpp_1aeffe5964582dc75785ae4cfc55ca9fd9" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>static const char * config_to_mangled_suffix</definition>
        <argsstring>(StcodeDynlibConfig config)</argsstring>
        <name>config_to_mangled_suffix</name>
        <param>
          <type><ref refid="cppStcode_8h_1a2579e1021ff8983bb1b2717f514619aa" kindref="member">StcodeDynlibConfig</ref></type>
          <declname>config</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="cppStcode.cpp" line="45" column="19" bodyfile="cppStcode.cpp" bodystart="45" bodyend="45"/>
      </memberdef>
      <memberdef kind="function" id="cppStcode_8cpp_1aab17bb1815fb1e113813efdf4d170482" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool set_stcode_config_from_arg</definition>
        <argsstring>(const char *str, shc::CompilerConfig &amp;config_rw)</argsstring>
        <name>set_stcode_config_from_arg</name>
        <param>
          <type>const char *</type>
          <declname>str</declname>
        </param>
        <param>
          <type><ref refid="structshc_1_1CompilerConfig" kindref="compound">shc::CompilerConfig</ref> &amp;</type>
          <declname>config_rw</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="cppStcode.cpp" line="47" column="6" bodyfile="cppStcode.cpp" bodystart="47" bodyend="58"/>
      </memberdef>
      <memberdef kind="function" id="cppStcode_8cpp_1a98eaf85cc1db48f14b120e45b7fad8e9" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>static const char * arch_name</definition>
        <argsstring>(StcodeTargetArch arch)</argsstring>
        <name>arch_name</name>
        <param>
          <type><ref refid="cppStcodePlatformInfo_8h_1a67d6bd111736197f5943a0493f1dbf05" kindref="member">StcodeTargetArch</ref></type>
          <declname>arch</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="cppStcode.cpp" line="60" column="19" bodyfile="cppStcode.cpp" bodystart="60" bodyend="77"/>
      </memberdef>
      <memberdef kind="function" id="cppStcode_8cpp_1a292db23eb0b23688aa5bd60d9b861d7c" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>static const char * arch_name_for_dll_name</definition>
        <argsstring>(StcodeTargetArch arch)</argsstring>
        <name>arch_name_for_dll_name</name>
        <param>
          <type><ref refid="cppStcodePlatformInfo_8h_1a67d6bd111736197f5943a0493f1dbf05" kindref="member">StcodeTargetArch</ref></type>
          <declname>arch</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="cppStcode.cpp" line="79" column="19" bodyfile="cppStcode.cpp" bodystart="79" bodyend="96"/>
      </memberdef>
      <memberdef kind="function" id="cppStcode_8cpp_1a8c9e5991c112f7c991b9266a1d2dab72" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>static bool arch_and_platform_is_fixed_for_shaders</definition>
        <argsstring>()</argsstring>
        <name>arch_and_platform_is_fixed_for_shaders</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="cppStcode.cpp" line="98" column="13" bodyfile="cppStcode.cpp" bodystart="98" bodyend="109"/>
      </memberdef>
      <memberdef kind="function" id="cppStcode_8cpp_1a482c16299b97beb570f35b3364e8b9a5" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>static bool validate_arch</definition>
        <argsstring>(const shc::CompilerConfig &amp;config)</argsstring>
        <name>validate_arch</name>
        <param>
          <type>const <ref refid="structshc_1_1CompilerConfig" kindref="compound">shc::CompilerConfig</ref> &amp;</type>
          <declname>config</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="cppStcode.cpp" line="111" column="13" bodyfile="cppStcode.cpp" bodystart="111" bodyend="142"/>
      </memberdef>
      <memberdef kind="function" id="cppStcode_8cpp_1a76c39ae4d8c66b40e773091b3d5e68a3" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>T</type>
        <definition>static T platform_switch</definition>
        <argsstring>(T &amp;&amp;if_pc, T &amp;&amp;if_xboxone, T &amp;&amp;if_scarlett)</argsstring>
        <name>platform_switch</name>
        <param>
          <type>T &amp;&amp;</type>
          <declname>if_pc</declname>
        </param>
        <param>
          <type>T &amp;&amp;</type>
          <declname>if_xboxone</declname>
        </param>
        <param>
          <type>T &amp;&amp;</type>
          <declname>if_scarlett</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="cppStcode.cpp" line="146" column="10" bodyfile="cppStcode.cpp" bodystart="146" bodyend="155"/>
      </memberdef>
      <memberdef kind="function" id="cppStcode_8cpp_1a3328153236cf0e514b3de97f5748db17" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>static bool validate_arch_for_platform</definition>
        <argsstring>(const shc::CompilerConfig &amp;config)</argsstring>
        <name>validate_arch_for_platform</name>
        <param>
          <type>const <ref refid="structshc_1_1CompilerConfig" kindref="compound">shc::CompilerConfig</ref> &amp;</type>
          <declname>config</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="cppStcode.cpp" line="162" column="13" bodyfile="cppStcode.cpp" bodystart="162" bodyend="177" declfile="cppStcode.cpp" declline="158" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="cppStcode_8cpp_1a51806d301dca3868fbacdc33763bab2b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool set_stcode_platform_from_arg</definition>
        <argsstring>(const char *str, shc::CompilerConfig &amp;config)</argsstring>
        <name>set_stcode_platform_from_arg</name>
        <param>
          <type>const char *</type>
          <declname>str</declname>
        </param>
        <param>
          <type><ref refid="structshc_1_1CompilerConfig" kindref="compound">shc::CompilerConfig</ref> &amp;</type>
          <declname>config</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="cppStcode.cpp" line="179" column="6" bodyfile="cppStcode.cpp" bodystart="179" bodyend="191"/>
      </memberdef>
      <memberdef kind="function" id="cppStcode_8cpp_1a2bcd8f7d26913c5c6fc68f4ef2d58cca" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>static bool is_ios</definition>
        <argsstring>()</argsstring>
        <name>is_ios</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="cppStcode.cpp" line="230" column="13" bodyfile="cppStcode.cpp" bodystart="230" bodyend="230"/>
      </memberdef>
      <memberdef kind="function" id="cppStcode_8cpp_1a68654cad4a942cc3ab2bc0ba02537681" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>T</type>
        <definition>static T if_ios</definition>
        <argsstring>(T &amp;&amp;if_true, T &amp;&amp;if_false)</argsstring>
        <name>if_ios</name>
        <param>
          <type>T &amp;&amp;</type>
          <declname>if_true</declname>
        </param>
        <param>
          <type>T &amp;&amp;</type>
          <declname>if_false</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="cppStcode.cpp" line="233" column="10" bodyfile="cppStcode.cpp" bodystart="233" bodyend="239"/>
      </memberdef>
      <memberdef kind="function" id="cppStcode_8cpp_1ad2bea223f0311870fd56c694574757c1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool set_stcode_arch_from_arg</definition>
        <argsstring>(const char *str, shc::CompilerConfig &amp;config_rw)</argsstring>
        <name>set_stcode_arch_from_arg</name>
        <param>
          <type>const char *</type>
          <declname>str</declname>
        </param>
        <param>
          <type><ref refid="structshc_1_1CompilerConfig" kindref="compound">shc::CompilerConfig</ref> &amp;</type>
          <declname>config_rw</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="cppStcode.cpp" line="254" column="6" bodyfile="cppStcode.cpp" bodystart="254" bodyend="272"/>
      </memberdef>
      <memberdef kind="function" id="cppStcode_8cpp_1affa9c52574bfec0cd2de30910fc77800" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void replace_char</definition>
        <argsstring>(char *str, size_t len, char old_ch, char new_ch)</argsstring>
        <name>replace_char</name>
        <param>
          <type>char *</type>
          <declname>str</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>len</declname>
        </param>
        <param>
          <type>char</type>
          <declname>old_ch</declname>
        </param>
        <param>
          <type>char</type>
          <declname>new_ch</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="cppStcode.cpp" line="274" column="13" bodyfile="cppStcode.cpp" bodystart="274" bodyend="281"/>
      </memberdef>
      <memberdef kind="function" id="cppStcode_8cpp_1a9165f4c2b3a35ccb46f1909c4bc23597" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structStcodeCompilationDirs" kindref="compound">StcodeCompilationDirs</ref></type>
        <definition>StcodeCompilationDirs init_stcode_compilation</definition>
        <argsstring>(const char *dest_dir, const char *shortened_dest_dir_for_caching)</argsstring>
        <name>init_stcode_compilation</name>
        <param>
          <type>const char *</type>
          <declname>dest_dir</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>shortened_dest_dir_for_caching</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="cppStcode.cpp" line="283" column="23" bodyfile="cppStcode.cpp" bodystart="283" bodyend="300"/>
      </memberdef>
      <memberdef kind="function" id="cppStcode_8cpp_1a1a3933a4e1a088b36895c7e220d59c9a" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void write_file</definition>
        <argsstring>(const char *fn, const char *src, size_t src_len)</argsstring>
        <name>write_file</name>
        <param>
          <type>const char *</type>
          <declname>fn</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>src</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>src_len</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="cppStcode.cpp" line="302" column="13" bodyfile="cppStcode.cpp" bodystart="302" bodyend="316"/>
      </memberdef>
      <memberdef kind="function" id="cppStcode_8cpp_1a0b2d00085adcb5a4fee33333f334def3" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>size_t</type>
            <declname>HEADER_LEN</declname>
            <defname>HEADER_LEN</defname>
          </param>
          <param>
            <type>auto</type>
            <declname>HEADER_TEMPLATE</declname>
            <defname>HEADER_TEMPLATE</defname>
          </param>
        </templateparamlist>
        <type>eastl::optional&lt; <ref refid="blkHash_8h_1a592888f422a40aa9b9dad4c6e6dbed99" kindref="member">BlkHashBytes</ref> &gt;</type>
        <definition>static eastl::optional&lt; BlkHashBytes &gt; extract_blk_hash_from_read_header</definition>
        <argsstring>(const char(&amp;buf)[HEADER_LEN])</argsstring>
        <name>extract_blk_hash_from_read_header</name>
        <param>
          <type>const char(&amp;)</type>
          <declname>buf</declname>
          <array>[HEADER_LEN]</array>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="cppStcode.cpp" line="328" column="24" bodyfile="cppStcode.cpp" bodystart="328" bodyend="365"/>
      </memberdef>
      <memberdef kind="function" id="cppStcode_8cpp_1a2a01f1699361aca27f360d721fa6f5ac" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>size_t</type>
            <declname>HEADER_LEN</declname>
            <defname>HEADER_LEN</defname>
          </param>
          <param>
            <type>auto</type>
            <declname>HEADER_FMT</declname>
            <defname>HEADER_FMT</defname>
          </param>
          <param>
            <type>size_t...</type>
            <declname>Is</declname>
            <defname>Is</defname>
          </param>
        </templateparamlist>
        <type>eastl::string</type>
        <definition>static eastl::string make_header_from_blk_hash_impl</definition>
        <argsstring>(eastl::index_sequence&lt; Is... &gt;, const BlkHashBytes &amp;hash)</argsstring>
        <name>make_header_from_blk_hash_impl</name>
        <param>
          <type>eastl::index_sequence&lt; Is... &gt;</type>
        </param>
        <param>
          <type>const <ref refid="blkHash_8h_1a592888f422a40aa9b9dad4c6e6dbed99" kindref="member">BlkHashBytes</ref> &amp;</type>
          <declname>hash</declname>
        </param>
    <requiresclause>(sizeof...(Is) == eastl::tuple_size_v&lt;<ref refid="blkHash_8h_1a592888f422a40aa9b9dad4c6e6dbed99" kindref="member">BlkHashBytes</ref>&gt;)    </requiresclause>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="cppStcode.cpp" line="369" column="22" bodyfile="cppStcode.cpp" bodystart="369" bodyend="374"/>
      </memberdef>
      <memberdef kind="function" id="cppStcode_8cpp_1a33b47ded2bd13f8e467bb31781e38ffc" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>size_t</type>
            <declname>HEADER_LEN</declname>
            <defname>HEADER_LEN</defname>
          </param>
          <param>
            <type>auto</type>
            <declname>HEADER_FMT</declname>
            <defname>HEADER_FMT</defname>
          </param>
        </templateparamlist>
        <type>eastl::string</type>
        <definition>static eastl::string make_header_from_blk_hash</definition>
        <argsstring>(const BlkHashBytes &amp;hash)</argsstring>
        <name>make_header_from_blk_hash</name>
        <param>
          <type>const <ref refid="blkHash_8h_1a592888f422a40aa9b9dad4c6e6dbed99" kindref="member">BlkHashBytes</ref> &amp;</type>
          <declname>hash</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="cppStcode.cpp" line="377" column="22" bodyfile="cppStcode.cpp" bodystart="377" bodyend="380"/>
      </memberdef>
      <memberdef kind="function" id="cppStcode_8cpp_1ace36ac8988f8e5a8b1ca3782ad84b351" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>eastl::string</type>
        <definition>static eastl::string get_filename_from_source_name_impl</definition>
        <argsstring>(const char *shader_source_name, size_t name_len, const char *ext)</argsstring>
        <name>get_filename_from_source_name_impl</name>
        <param>
          <type>const char *</type>
          <declname>shader_source_name</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>name_len</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>ext</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="cppStcode.cpp" line="382" column="22" bodyfile="cppStcode.cpp" bodystart="382" bodyend="392"/>
      </memberdef>
      <memberdef kind="function" id="cppStcode_8cpp_1aa41ba26144a8452085b1a34aff1adf92" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>eastl::string</type>
        <definition>static eastl::string get_cpp_filename_from_source_name</definition>
        <argsstring>(const char *shader_source_name, size_t name_len)</argsstring>
        <name>get_cpp_filename_from_source_name</name>
        <param>
          <type>const char *</type>
          <declname>shader_source_name</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>name_len</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="cppStcode.cpp" line="394" column="22" bodyfile="cppStcode.cpp" bodystart="394" bodyend="397"/>
      </memberdef>
      <memberdef kind="function" id="cppStcode_8cpp_1a2473174fa8616e6577284c13111471c0" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>eastl::string</type>
        <definition>static eastl::string get_header_filename_from_source_name</definition>
        <argsstring>(const char *shader_source_name, size_t name_len)</argsstring>
        <name>get_header_filename_from_source_name</name>
        <param>
          <type>const char *</type>
          <declname>shader_source_name</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>name_len</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="cppStcode.cpp" line="399" column="22" bodyfile="cppStcode.cpp" bodystart="399" bodyend="402"/>
      </memberdef>
      <memberdef kind="function" id="cppStcode_8cpp_1a4980391e878d7fd3ebe095517f4c3b23" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void save_compiled_cpp_stcode</definition>
        <argsstring>(StcodeShader &amp;&amp;cpp_shader, const ShCompilationInfo &amp;comp)</argsstring>
        <name>save_compiled_cpp_stcode</name>
        <param>
          <type><ref refid="structStcodeShader" kindref="compound">StcodeShader</ref> &amp;&amp;</type>
          <declname>cpp_shader</declname>
        </param>
        <param>
          <type>const <ref refid="classShCompilationInfo" kindref="compound">ShCompilationInfo</ref> &amp;</type>
          <declname>comp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="cppStcode.cpp" line="404" column="6" bodyfile="cppStcode.cpp" bodystart="404" bodyend="435"/>
      </memberdef>
      <memberdef kind="function" id="cppStcode_8cpp_1a669b5fcc096a21d2ba3c4114c5383036" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void save_stcode_global_vars</definition>
        <argsstring>(StcodeGlobalVars &amp;&amp;cpp_globvars, const ShCompilationInfo &amp;comp)</argsstring>
        <name>save_stcode_global_vars</name>
        <param>
          <type><ref refid="structStcodeGlobalVars" kindref="compound">StcodeGlobalVars</ref> &amp;&amp;</type>
          <declname>cpp_globvars</declname>
        </param>
        <param>
          <type>const <ref refid="classShCompilationInfo" kindref="compound">ShCompilationInfo</ref> &amp;</type>
          <declname>comp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="cppStcode.cpp" line="437" column="6" bodyfile="cppStcode.cpp" bodystart="437" bodyend="456"/>
      </memberdef>
      <memberdef kind="function" id="cppStcode_8cpp_1ab0bc8f9b5431ae7cffc2d246f9122c2b" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>auto</type>
        <definition>static auto make_hash_byte_array_initializer</definition>
        <argsstring>(const CryptoHash &amp;hash)</argsstring>
        <name>make_hash_byte_array_initializer</name>
        <param>
          <type>const <ref refid="structCryptoHash" kindref="compound">CryptoHash</ref> &amp;</type>
          <declname>hash</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="cppStcode.cpp" line="458" column="13" bodyfile="cppStcode.cpp" bodystart="458" bodyend="464"/>
      </memberdef>
      <memberdef kind="function" id="cppStcode_8cpp_1a373bc6f0b6f954179718361bfddd80eb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void save_stcode_dll_main</definition>
        <argsstring>(StcodeShader &amp;&amp;combined_cppstcode, const CryptoHash &amp;stcode_hash, const ShCompilationInfo &amp;comp)</argsstring>
        <name>save_stcode_dll_main</name>
        <param>
          <type><ref refid="structStcodeShader" kindref="compound">StcodeShader</ref> &amp;&amp;</type>
          <declname>combined_cppstcode</declname>
        </param>
        <param>
          <type>const <ref refid="structCryptoHash" kindref="compound">CryptoHash</ref> &amp;</type>
          <declname>stcode_hash</declname>
        </param>
        <param>
          <type>const <ref refid="classShCompilationInfo" kindref="compound">ShCompilationInfo</ref> &amp;</type>
          <declname>comp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="cppStcode.cpp" line="466" column="6" bodyfile="cppStcode.cpp" bodystart="466" bodyend="517"/>
      </memberdef>
      <memberdef kind="function" id="cppStcode_8cpp_1a895741516876e0b024d566f64d2e9cd4" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>size_t</type>
            <declname>HEADER_LEN</declname>
            <defname>HEADER_LEN</defname>
          </param>
          <param>
            <type>auto</type>
            <declname>HEADER_TEMPLATE</declname>
            <defname>HEADER_TEMPLATE</defname>
          </param>
        </templateparamlist>
        <type>eastl::optional&lt; <ref refid="structStcodeSourceFileStat" kindref="compound">StcodeSourceFileStat</ref> &gt;</type>
        <definition>static eastl::optional&lt; StcodeSourceFileStat &gt; get_file_stat</definition>
        <argsstring>(const char *fn)</argsstring>
        <name>get_file_stat</name>
        <param>
          <type>const char *</type>
          <declname>fn</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="cppStcode.cpp" line="520" column="24" bodyfile="cppStcode.cpp" bodystart="520" bodyend="541"/>
      </memberdef>
      <memberdef kind="function" id="cppStcode_8cpp_1a97c1bb6e655246d0aec6d02d9160c250" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>eastl::optional&lt; <ref refid="structStcodeSourceFileStat" kindref="compound">StcodeSourceFileStat</ref> &gt;</type>
        <definition>static eastl::optional&lt; StcodeSourceFileStat &gt; get_files_pack_stat</definition>
        <argsstring>(std::initializer_list&lt; const char * &gt; filenames)</argsstring>
        <name>get_files_pack_stat</name>
        <param>
          <type>std::initializer_list&lt; const char * &gt;</type>
          <declname>filenames</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="cppStcode.cpp" line="543" column="24" bodyfile="cppStcode.cpp" bodystart="543" bodyend="569"/>
      </memberdef>
      <memberdef kind="function" id="cppStcode_8cpp_1aeb5ba2eeed332003e755e6dde9cbac47" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>eastl::optional&lt; <ref refid="structStcodeSourceFileStat" kindref="compound">StcodeSourceFileStat</ref> &gt;</type>
        <definition>eastl::optional&lt; StcodeSourceFileStat &gt; get_gencpp_files_stat</definition>
        <argsstring>(const char *target_fn, const ShCompilationInfo &amp;comp)</argsstring>
        <name>get_gencpp_files_stat</name>
        <param>
          <type>const char *</type>
          <declname>target_fn</declname>
        </param>
        <param>
          <type>const <ref refid="classShCompilationInfo" kindref="compound">ShCompilationInfo</ref> &amp;</type>
          <declname>comp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="cppStcode.cpp" line="571" column="17" bodyfile="cppStcode.cpp" bodystart="571" bodyend="579"/>
      </memberdef>
      <memberdef kind="function" id="cppStcode_8cpp_1a01338eb44e787adf597d13bf70be252d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>eastl::optional&lt; <ref refid="structStcodeSourceFileStat" kindref="compound">StcodeSourceFileStat</ref> &gt;</type>
        <definition>eastl::optional&lt; StcodeSourceFileStat &gt; get_main_cpp_files_stat</definition>
        <argsstring>(const ShCompilationInfo &amp;comp)</argsstring>
        <name>get_main_cpp_files_stat</name>
        <param>
          <type>const <ref refid="classShCompilationInfo" kindref="compound">ShCompilationInfo</ref> &amp;</type>
          <declname>comp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="cppStcode.cpp" line="581" column="17" bodyfile="cppStcode.cpp" bodystart="581" bodyend="589"/>
      </memberdef>
      <memberdef kind="function" id="cppStcode_8cpp_1ae3a97c8056e8ab949f3400cae3d6a15c" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int speculate_root_depth_from_path</definition>
        <argsstring>(const char *path)</argsstring>
        <name>speculate_root_depth_from_path</name>
        <param>
          <type>const char *</type>
          <declname>path</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="cppStcode.cpp" line="591" column="12" bodyfile="cppStcode.cpp" bodystart="591" bodyend="604"/>
      </memberdef>
      <memberdef kind="function" id="cppStcode_8cpp_1a426b4aecf24520cdf9f05af73e6cd0a0" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>eastl::string</type>
        <definition>static eastl::string build_root_rel_path</definition>
        <argsstring>(int depth)</argsstring>
        <name>build_root_rel_path</name>
        <param>
          <type>int</type>
          <declname>depth</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="cppStcode.cpp" line="606" column="22" bodyfile="cppStcode.cpp" bodystart="606" bodyend="618"/>
      </memberdef>
      <memberdef kind="function" id="cppStcode_8cpp_1a5cbee3a21f56809e9d054d2ec5063383" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>eastl::string</type>
        <definition>static eastl::string get_cwd</definition>
        <argsstring>()</argsstring>
        <name>get_cwd</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="cppStcode.cpp" line="620" column="22" bodyfile="cppStcode.cpp" bodystart="620" bodyend="631"/>
      </memberdef>
      <memberdef kind="function" id="cppStcode_8cpp_1a6e7681246f1bcd5123e6a192853b287c" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>auto</type>
        <definition>static auto split_by_lowest_dir</definition>
        <argsstring>(const char *path, size_t path_len)</argsstring>
        <name>split_by_lowest_dir</name>
        <param>
          <type>const char *</type>
          <declname>path</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>path_len</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="cppStcode.cpp" line="633" column="13" bodyfile="cppStcode.cpp" bodystart="633" bodyend="638"/>
      </memberdef>
      <memberdef kind="function" id="cppStcode_8cpp_1a447d82521ae1affc38c7834792de631f" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>static bool path_is_abs</definition>
        <argsstring>(const char *path)</argsstring>
        <name>path_is_abs</name>
        <param>
          <type>const char *</type>
          <declname>path</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="cppStcode.cpp" line="640" column="13" bodyfile="cppStcode.cpp" bodystart="640" bodyend="648"/>
      </memberdef>
      <memberdef kind="function" id="cppStcode_8cpp_1ac194cccc9b7acd1adc2ff64995cd3568" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structJamCompilationDirs" kindref="compound">JamCompilationDirs</ref></type>
        <definition>static JamCompilationDirs generate_dirs_with_provided_root</definition>
        <argsstring>(const char *engine_root, const char *out_dir, const StcodeCompilationDirs &amp;stcode_dirs)</argsstring>
        <name>generate_dirs_with_provided_root</name>
        <param>
          <type>const char *</type>
          <declname>engine_root</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>out_dir</declname>
        </param>
        <param>
          <type>const <ref refid="structStcodeCompilationDirs" kindref="compound">StcodeCompilationDirs</ref> &amp;</type>
          <declname>stcode_dirs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="cppStcode.cpp" line="658" column="27" bodyfile="cppStcode.cpp" bodystart="658" bodyend="725"/>
      </memberdef>
      <memberdef kind="function" id="cppStcode_8cpp_1a188ee3d1241d887e993ae67f3b957ae4" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structJamCompilationDirs" kindref="compound">JamCompilationDirs</ref></type>
        <definition>static JamCompilationDirs generate_dirs_with_inferred_root_from_rel_path</definition>
        <argsstring>(const char *out_dir, const StcodeCompilationDirs &amp;stcode_dirs)</argsstring>
        <name>generate_dirs_with_inferred_root_from_rel_path</name>
        <param>
          <type>const char *</type>
          <declname>out_dir</declname>
        </param>
        <param>
          <type>const <ref refid="structStcodeCompilationDirs" kindref="compound">StcodeCompilationDirs</ref> &amp;</type>
          <declname>stcode_dirs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="cppStcode.cpp" line="727" column="27" bodyfile="cppStcode.cpp" bodystart="727" bodyend="744"/>
      </memberdef>
      <memberdef kind="function" id="cppStcode_8cpp_1a40083f897841e2ac587344a195fe604c" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void cleanup_after_stcode_compilation</definition>
        <argsstring>(const char *out_dir, const char *lib_name)</argsstring>
        <name>cleanup_after_stcode_compilation</name>
        <param>
          <type>const char *</type>
          <declname>out_dir</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>lib_name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="cppStcode.cpp" line="746" column="13" bodyfile="cppStcode.cpp" bodystart="746" bodyend="773"/>
      </memberdef>
      <memberdef kind="function" id="cppStcode_8cpp_1a15b170256d831e7b6f40a33741b2eca5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>dag::Expected&lt; <ref refid="structproc_1_1ProcessTask" kindref="compound">proc::ProcessTask</ref>, <ref refid="cppStcode_8h_1a5f7b70083bba8ebd323206f2f7cf2bce" kindref="member">StcodeMakeTaskError</ref> &gt;</type>
        <definition>dag::Expected&lt; proc::ProcessTask, StcodeMakeTaskError &gt; make_stcode_compilation_task</definition>
        <argsstring>(const char *out_dir, const char *lib_name, const ShCompilationInfo &amp;comp)</argsstring>
        <name>make_stcode_compilation_task</name>
        <param>
          <type>const char *</type>
          <declname>out_dir</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>lib_name</declname>
        </param>
        <param>
          <type>const <ref refid="classShCompilationInfo" kindref="compound">ShCompilationInfo</ref> &amp;</type>
          <declname>comp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="cppStcode.cpp" line="775" column="15" bodyfile="cppStcode.cpp" bodystart="775" bodyend="1063"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/>Copyright<sp/>(C)<sp/>Gaijin<sp/>Games<sp/>KFT.<sp/><sp/>All<sp/>rights<sp/>reserved.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="cppStcode_8h" kindref="compound">cppStcode.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="globalConfig_8h" kindref="compound">globalConfig.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="defer_8h" kindref="compound">defer.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="shLog_8h" kindref="compound">shLog.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="semUtils_8h" kindref="compound">semUtils.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="commonUtils_8h" kindref="compound">commonUtils.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="loadShaders_8h" kindref="compound">loadShaders.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;shaders/cppStcodeVer.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;osApiWrappers/dag_files.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;osApiWrappers/dag_direct.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;osApiWrappers/dag_dynLib.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;osApiWrappers/dag_pathDelim.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;util/dag_hash.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;util/dag_globDef.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;EASTL/string.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;generic/dag_enumerate.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;dag/dag_vectorSet.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>_TARGET_PC_WIN</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;windows.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;direct.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;unistd.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>STCODE_VER_FILE_NAME[]<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;ver.txt&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal">eastl::optional&lt;shader_layout::ExternalStcodeMode&gt;<sp/><ref refid="cppStcode_8cpp_1a07cf3cb607f4acd5ec47f26270affbc8" kindref="member">arg_str_to_cpp_stcode_mode</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*str)</highlight></codeline>
<codeline lineno="32"><highlight class="normal">{</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="commonUtils_8h_1a421e5f914841061096ef1977d1501b32" kindref="member">streq</ref>(str,<sp/></highlight><highlight class="stringliteral">&quot;regular&quot;</highlight><highlight class="normal">))</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>shader_layout::ExternalStcodeMode::BRANCHLESS_CPP;</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="commonUtils_8h_1a421e5f914841061096ef1977d1501b32" kindref="member">streq</ref>(str,<sp/></highlight><highlight class="stringliteral">&quot;branches&quot;</highlight><highlight class="normal">))</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>shader_layout::ExternalStcodeMode::BRANCHED_CPP;</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>eastl::nullopt;</highlight></codeline>
<codeline lineno="39"><highlight class="normal">}</highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*CONFIG_NAMES[]<sp/>=<sp/>{</highlight><highlight class="stringliteral">&quot;dev&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;rel&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;dbg&quot;</highlight><highlight class="normal">};</highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*CONFIG_SUFFICES[]<sp/>=<sp/>{</highlight><highlight class="stringliteral">&quot;-dev&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;-dbg&quot;</highlight><highlight class="normal">};</highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*config_to_name(<ref refid="cppStcode_8h_1a2579e1021ff8983bb1b2717f514619aa" kindref="member">StcodeDynlibConfig</ref><sp/>config)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>CONFIG_NAMES[size_t(config)];<sp/>}</highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*config_to_mangled_suffix(<ref refid="cppStcode_8h_1a2579e1021ff8983bb1b2717f514619aa" kindref="member">StcodeDynlibConfig</ref><sp/>config)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>CONFIG_SUFFICES[size_t(config)];<sp/>}</highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="cppStcode_8cpp_1aab17bb1815fb1e113813efdf4d170482" kindref="member">set_stcode_config_from_arg</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*str,<sp/><ref refid="structshc_1_1CompilerConfig" kindref="compound">shc::CompilerConfig</ref><sp/>&amp;config_rw)</highlight></codeline>
<codeline lineno="48"><highlight class="normal">{</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>[</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">,<sp/>name]<sp/>:<sp/>enumerate(CONFIG_NAMES))</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="commonUtils_8h_1a421e5f914841061096ef1977d1501b32" kindref="member">streq</ref>(name,<sp/>str))</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>config_rw.<ref refid="structshc_1_1CompilerConfig_1af9a6c05720a36638e58ab50926fadb1a" kindref="member">cppStcodeCompConfig</ref><sp/>=<sp/><ref refid="cppStcode_8h_1a2579e1021ff8983bb1b2717f514619aa" kindref="member">StcodeDynlibConfig</ref>(</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="58"><highlight class="normal">}</highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*arch_name(<ref refid="cppStcodePlatformInfo_8h_1a67d6bd111736197f5943a0493f1dbf05" kindref="member">StcodeTargetArch</ref><sp/>arch)</highlight></codeline>
<codeline lineno="61"><highlight class="normal">{</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(arch)</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="cppStcodePlatformInfo_8h_1a67d6bd111736197f5943a0493f1dbf05a5b39c8b553c821e7cddc6da64b5bd2ee" kindref="member">StcodeTargetArch::DEFAULT</ref>:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;&lt;default&gt;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="cppStcodePlatformInfo_8h_1a67d6bd111736197f5943a0493f1dbf05afd1a4608b5b463bc7a41d86a1662d3b7" kindref="member">StcodeTargetArch::X86</ref>:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;x86&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="cppStcodePlatformInfo_8h_1a67d6bd111736197f5943a0493f1dbf05a840030b2e70cfe0155e29ee926dbd8ae" kindref="member">StcodeTargetArch::X86_64</ref>:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;x86_64&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="cppStcodePlatformInfo_8h_1a67d6bd111736197f5943a0493f1dbf05ab9b55c80d095761ac7757ced0fedadc4" kindref="member">StcodeTargetArch::ARM64</ref>:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;arm64&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="cppStcodePlatformInfo_8h_1a67d6bd111736197f5943a0493f1dbf05a200bde2af858215e5832240fa79e5f84" kindref="member">StcodeTargetArch::ARM64_E</ref>:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;arm64e&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="cppStcodePlatformInfo_8h_1a67d6bd111736197f5943a0493f1dbf05a0c2362f00f66e3ef1e9e73c437dd16ef" kindref="member">StcodeTargetArch::ARM_V7</ref>:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;armv7&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="cppStcodePlatformInfo_8h_1a67d6bd111736197f5943a0493f1dbf05ac2912942cd2efd3e3123525ad72ff744" kindref="member">StcodeTargetArch::ARM_V7S</ref>:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;armv7s&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="cppStcodePlatformInfo_8h_1a67d6bd111736197f5943a0493f1dbf05a5674918c587536ff5492728caf954590" kindref="member">StcodeTargetArch::ARMEABI_V7A</ref>:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;armeabi-v7a&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="cppStcodePlatformInfo_8h_1a67d6bd111736197f5943a0493f1dbf05aef7a7a2678567b43d0cf274d775979e0" kindref="member">StcodeTargetArch::ARM64_V8A</ref>:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;arm64-v8a&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="cppStcodePlatformInfo_8h_1a67d6bd111736197f5943a0493f1dbf05ad8b3e50d7c8ecaef026c0ebffd9b5e85" kindref="member">StcodeTargetArch::I386</ref>:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;i386&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="cppStcodePlatformInfo_8h_1a67d6bd111736197f5943a0493f1dbf05a151eb791f8401bc2f4dd1b64308466dd" kindref="member">StcodeTargetArch::E2K</ref>:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;e2k&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="77"><highlight class="normal">}</highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*arch_name_for_dll_name(<ref refid="cppStcodePlatformInfo_8h_1a67d6bd111736197f5943a0493f1dbf05" kindref="member">StcodeTargetArch</ref><sp/>arch)</highlight></codeline>
<codeline lineno="80"><highlight class="normal">{</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(arch)</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="cppStcodePlatformInfo_8h_1a67d6bd111736197f5943a0493f1dbf05a5b39c8b553c821e7cddc6da64b5bd2ee" kindref="member">StcodeTargetArch::DEFAULT</ref>:<sp/>G_ASSERTF(0,<sp/></highlight><highlight class="stringliteral">&quot;Arch<sp/>must<sp/>be<sp/>decided<sp/>for<sp/>dll<sp/>name&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="cppStcodePlatformInfo_8h_1a67d6bd111736197f5943a0493f1dbf05afd1a4608b5b463bc7a41d86a1662d3b7" kindref="member">StcodeTargetArch::X86</ref>:</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="cppStcodePlatformInfo_8h_1a67d6bd111736197f5943a0493f1dbf05ad8b3e50d7c8ecaef026c0ebffd9b5e85" kindref="member">StcodeTargetArch::I386</ref>:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;x86&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="cppStcodePlatformInfo_8h_1a67d6bd111736197f5943a0493f1dbf05a840030b2e70cfe0155e29ee926dbd8ae" kindref="member">StcodeTargetArch::X86_64</ref>:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;x86_64&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="cppStcodePlatformInfo_8h_1a67d6bd111736197f5943a0493f1dbf05ab9b55c80d095761ac7757ced0fedadc4" kindref="member">StcodeTargetArch::ARM64</ref>:</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="cppStcodePlatformInfo_8h_1a67d6bd111736197f5943a0493f1dbf05aef7a7a2678567b43d0cf274d775979e0" kindref="member">StcodeTargetArch::ARM64_V8A</ref>:</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="cppStcodePlatformInfo_8h_1a67d6bd111736197f5943a0493f1dbf05a200bde2af858215e5832240fa79e5f84" kindref="member">StcodeTargetArch::ARM64_E</ref>:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;arm64&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="cppStcodePlatformInfo_8h_1a67d6bd111736197f5943a0493f1dbf05a0c2362f00f66e3ef1e9e73c437dd16ef" kindref="member">StcodeTargetArch::ARM_V7</ref>:</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="cppStcodePlatformInfo_8h_1a67d6bd111736197f5943a0493f1dbf05ac2912942cd2efd3e3123525ad72ff744" kindref="member">StcodeTargetArch::ARM_V7S</ref>:</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="cppStcodePlatformInfo_8h_1a67d6bd111736197f5943a0493f1dbf05a5674918c587536ff5492728caf954590" kindref="member">StcodeTargetArch::ARMEABI_V7A</ref>:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;armv7&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="cppStcodePlatformInfo_8h_1a67d6bd111736197f5943a0493f1dbf05a151eb791f8401bc2f4dd1b64308466dd" kindref="member">StcodeTargetArch::E2K</ref>:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;e2k&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="96"><highlight class="normal">}</highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>arch_and_platform_is_fixed_for_shaders()</highlight></codeline>
<codeline lineno="99"><highlight class="normal">{</highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>_CROSS_TARGET_C1<sp/>|<sp/>_CROSS_TARGET_C2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>_CROSS_TARGET_DX12</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespaceshc_1a47efde6b3d493adbe2119a5593807d36" kindref="member">shc::config</ref>().targetPlatform<sp/>!=<sp/>dx12::dxil::Platform::PC;</highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>_CROSS_TARGET_SPIRV</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespaceshc_1a47efde6b3d493adbe2119a5593807d36" kindref="member">shc::config</ref>().<ref refid="structshc_1_1CompilerConfig_1a25842f4372faec252d1005f4b041332a" kindref="member">cppStcodePlatform</ref><sp/>==<sp/>StcodeTargetPlatform::NSWITCH;</highlight></codeline>
<codeline lineno="106"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal">}</highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>validate_arch(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structshc_1_1CompilerConfig" kindref="compound">shc::CompilerConfig</ref><sp/>&amp;config)</highlight></codeline>
<codeline lineno="112"><highlight class="normal">{</highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>_CROSS_TARGET_DX12</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="namespaceshc_1a47efde6b3d493adbe2119a5593807d36" kindref="member">shc::config</ref>().targetPlatform<sp/>!=<sp/>dx12::dxil::Platform::PC)</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespaceshc_1a47efde6b3d493adbe2119a5593807d36" kindref="member">config</ref>.<ref refid="structshc_1_1CompilerConfig_1abb104bd1eae00002853482d98be9ae72" kindref="member">cppStcodeArch</ref><sp/>==<sp/><ref refid="cppStcodePlatformInfo_8h_1a67d6bd111736197f5943a0493f1dbf05a840030b2e70cfe0155e29ee926dbd8ae" kindref="member">StcodeTargetArch::X86_64</ref><sp/>||<sp/><ref refid="namespaceshc_1a47efde6b3d493adbe2119a5593807d36" kindref="member">config</ref>.<ref refid="structshc_1_1CompilerConfig_1abb104bd1eae00002853482d98be9ae72" kindref="member">cppStcodeArch</ref><sp/>==<sp/><ref refid="cppStcodePlatformInfo_8h_1a67d6bd111736197f5943a0493f1dbf05ab9b55c80d095761ac7757ced0fedadc4" kindref="member">StcodeTargetArch::ARM64</ref>;</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="commonUtils_8h_1ae2667fae32711226a08120e1cc45974d" kindref="member">item_is_in</ref>(<ref refid="namespaceshc_1a47efde6b3d493adbe2119a5593807d36" kindref="member">config</ref>.<ref refid="structshc_1_1CompilerConfig_1abb104bd1eae00002853482d98be9ae72" kindref="member">cppStcodeArch</ref>,<sp/>{StcodeTargetArch::X86,<sp/>StcodeTargetArch::X86_64,<sp/>StcodeTargetArch::ARM64});</highlight></codeline>
<codeline lineno="118"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>_CROSS_TARGET_DX11</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="commonUtils_8h_1ae2667fae32711226a08120e1cc45974d" kindref="member">item_is_in</ref>(<ref refid="namespaceshc_1a47efde6b3d493adbe2119a5593807d36" kindref="member">config</ref>.<ref refid="structshc_1_1CompilerConfig_1abb104bd1eae00002853482d98be9ae72" kindref="member">cppStcodeArch</ref>,<sp/>{StcodeTargetArch::X86,<sp/>StcodeTargetArch::X86_64,<sp/>StcodeTargetArch::ARM64});</highlight></codeline>
<codeline lineno="120"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>_CROSS_TARGET_C1<sp/>|<sp/>_CROSS_TARGET_C2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal"></highlight></codeline>
<codeline lineno="122"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>_CROSS_TARGET_SPIRV</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="123"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>_TARGET_PC_WIN</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="commonUtils_8h_1ae2667fae32711226a08120e1cc45974d" kindref="member">item_is_in</ref>(<ref refid="namespaceshc_1a47efde6b3d493adbe2119a5593807d36" kindref="member">config</ref>.<ref refid="structshc_1_1CompilerConfig_1abb104bd1eae00002853482d98be9ae72" kindref="member">cppStcodeArch</ref>,</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/>{StcodeTargetArch::DEFAULT,<sp/>StcodeTargetArch::X86,<sp/>StcodeTargetArch::X86_64,<sp/>StcodeTargetArch::E2K,<sp/>StcodeTargetArch::ARM64,</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>StcodeTargetArch::ARMEABI_V7A,<sp/>StcodeTargetArch::ARM64_V8A});</highlight></codeline>
<codeline lineno="127"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>_TARGET_PC_LINUX</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="commonUtils_8h_1ae2667fae32711226a08120e1cc45974d" kindref="member">item_is_in</ref>(<ref refid="namespaceshc_1a47efde6b3d493adbe2119a5593807d36" kindref="member">config</ref>.<ref refid="structshc_1_1CompilerConfig_1abb104bd1eae00002853482d98be9ae72" kindref="member">cppStcodeArch</ref>,<sp/>{StcodeTargetArch::DEFAULT,<sp/>StcodeTargetArch::X86_64,<sp/>StcodeTargetArch::E2K,</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>StcodeTargetArch::ARM64,<sp/>StcodeTargetArch::ARMEABI_V7A,<sp/>StcodeTargetArch::ARM64_V8A});</highlight></codeline>
<codeline lineno="130"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>_TARGET_PC_MACOSX</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="commonUtils_8h_1ae2667fae32711226a08120e1cc45974d" kindref="member">item_is_in</ref>(<ref refid="namespaceshc_1a47efde6b3d493adbe2119a5593807d36" kindref="member">config</ref>.<ref refid="structshc_1_1CompilerConfig_1abb104bd1eae00002853482d98be9ae72" kindref="member">cppStcodeArch</ref>,<sp/>{StcodeTargetArch::ARMEABI_V7A,<sp/>StcodeTargetArch::ARM64_V8A});</highlight></codeline>
<codeline lineno="132"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>_CROSS_TARGET_METAL</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="commonUtils_8h_1ae2667fae32711226a08120e1cc45974d" kindref="member">item_is_in</ref>(<ref refid="namespaceshc_1a47efde6b3d493adbe2119a5593807d36" kindref="member">config</ref>.<ref refid="structshc_1_1CompilerConfig_1abb104bd1eae00002853482d98be9ae72" kindref="member">cppStcodeArch</ref>,</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/>{StcodeTargetArch::DEFAULT,<sp/>StcodeTargetArch::X86_64,<sp/>StcodeTargetArch::ARM64,<sp/>StcodeTargetArch::ARM64_E,<sp/>StcodeTargetArch::ARM_V7,</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>StcodeTargetArch::ARM_V7S,<sp/>StcodeTargetArch::I386});</highlight></codeline>
<codeline lineno="137"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>_CROSS_TARGET_EMPTY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="139"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="140"><highlight class="normal"></highlight><highlight class="preprocessor">#error<sp/>Unknown<sp/>target</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="141"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="142"><highlight class="normal">}</highlight></codeline>
<codeline lineno="143"><highlight class="normal"></highlight></codeline>
<codeline lineno="144"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>_CROSS_TARGET_DX12</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="145"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="146"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>T<sp/>platform_switch(T<sp/>&amp;&amp;if_pc,<sp/>T<sp/>&amp;&amp;if_xboxone,<sp/>T<sp/>&amp;&amp;if_scarlett)</highlight></codeline>
<codeline lineno="147"><highlight class="normal">{</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(<ref refid="namespaceshc_1a47efde6b3d493adbe2119a5593807d36" kindref="member">shc::config</ref>().targetPlatform)</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>dx12::dxil::Platform::PC:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>eastl::forward&lt;T&gt;(if_pc);</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>dx12::dxil::Platform::XBOX_ONE:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>eastl::forward&lt;T&gt;(if_xboxone);</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>dx12::dxil::Platform::XBOX_SCARLETT:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>eastl::forward&lt;T&gt;(if_scarlett);</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:<sp/>G_ASSERT_RETURN(0,<sp/>eastl::forward&lt;T&gt;(if_pc));</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="155"><highlight class="normal">}</highlight></codeline>
<codeline lineno="156"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="157"><highlight class="normal"></highlight></codeline>
<codeline lineno="158"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>validate_arch_for_platform(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structshc_1_1CompilerConfig" kindref="compound">shc::CompilerConfig</ref><sp/>&amp;config);</highlight></codeline>
<codeline lineno="159"><highlight class="normal"></highlight></codeline>
<codeline lineno="160"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>_CROSS_TARGET_SPIRV</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="161"><highlight class="normal"></highlight></codeline>
<codeline lineno="162"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>validate_arch_for_platform(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structshc_1_1CompilerConfig" kindref="compound">shc::CompilerConfig</ref><sp/>&amp;config)</highlight></codeline>
<codeline lineno="163"><highlight class="normal">{</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespaceshc_1a47efde6b3d493adbe2119a5593807d36" kindref="member">config</ref>.<ref refid="structshc_1_1CompilerConfig_1abb104bd1eae00002853482d98be9ae72" kindref="member">cppStcodeArch</ref><sp/>==<sp/><ref refid="cppStcodePlatformInfo_8h_1a67d6bd111736197f5943a0493f1dbf05a5b39c8b553c821e7cddc6da64b5bd2ee" kindref="member">StcodeTargetArch::DEFAULT</ref><sp/>||<sp/><ref refid="namespaceshc_1a47efde6b3d493adbe2119a5593807d36" kindref="member">config</ref>.<ref refid="structshc_1_1CompilerConfig_1a25842f4372faec252d1005f4b041332a" kindref="member">cppStcodePlatform</ref><sp/>==<sp/><ref refid="cppStcodePlatformInfo_8h_1a2a973a4f32d63d4f3e23ad578192cb88a5b39c8b553c821e7cddc6da64b5bd2ee" kindref="member">StcodeTargetPlatform::DEFAULT</ref><sp/>||</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<ref refid="namespaceshc_1a47efde6b3d493adbe2119a5593807d36" kindref="member">config</ref>.<ref refid="structshc_1_1CompilerConfig_1a25842f4372faec252d1005f4b041332a" kindref="member">cppStcodePlatform</ref><sp/>==<sp/>StcodeTargetPlatform::NSWITCH<sp/>&amp;&amp;<sp/><ref refid="namespaceshc_1a47efde6b3d493adbe2119a5593807d36" kindref="member">config</ref>.<ref refid="structshc_1_1CompilerConfig_1abb104bd1eae00002853482d98be9ae72" kindref="member">cppStcodeArch</ref><sp/>==<sp/><ref refid="cppStcodePlatformInfo_8h_1a67d6bd111736197f5943a0493f1dbf05ab9b55c80d095761ac7757ced0fedadc4" kindref="member">StcodeTargetArch::ARM64</ref>)<sp/>||</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<ref refid="namespaceshc_1a47efde6b3d493adbe2119a5593807d36" kindref="member">config</ref>.<ref refid="structshc_1_1CompilerConfig_1a25842f4372faec252d1005f4b041332a" kindref="member">cppStcodePlatform</ref><sp/>==<sp/>StcodeTargetPlatform::ANDROID<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="commonUtils_8h_1ae2667fae32711226a08120e1cc45974d" kindref="member">item_is_in</ref>(<ref refid="namespaceshc_1a47efde6b3d493adbe2119a5593807d36" kindref="member">config</ref>.<ref refid="structshc_1_1CompilerConfig_1abb104bd1eae00002853482d98be9ae72" kindref="member">cppStcodeArch</ref>,<sp/>{StcodeTargetArch::ARMEABI_V7A,<sp/>StcodeTargetArch::ARM64_V8A}))<sp/>||</highlight></codeline>
<codeline lineno="168"><highlight class="normal">#</highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>_TARGET_PC_WIN</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<ref refid="namespaceshc_1a47efde6b3d493adbe2119a5593807d36" kindref="member">config</ref>.<ref refid="structshc_1_1CompilerConfig_1a25842f4372faec252d1005f4b041332a" kindref="member">cppStcodePlatform</ref><sp/>==<sp/>StcodeTargetPlatform::PC<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="commonUtils_8h_1ae2667fae32711226a08120e1cc45974d" kindref="member">item_is_in</ref>(<ref refid="namespaceshc_1a47efde6b3d493adbe2119a5593807d36" kindref="member">config</ref>.<ref refid="structshc_1_1CompilerConfig_1abb104bd1eae00002853482d98be9ae72" kindref="member">cppStcodeArch</ref>,<sp/>{StcodeTargetArch::X86,<sp/>StcodeTargetArch::X86_64,<sp/>StcodeTargetArch::ARM64}));</highlight></codeline>
<codeline lineno="171"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>_TARGET_PC_LINUX</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<ref refid="namespaceshc_1a47efde6b3d493adbe2119a5593807d36" kindref="member">config</ref>.<ref refid="structshc_1_1CompilerConfig_1a25842f4372faec252d1005f4b041332a" kindref="member">cppStcodePlatform</ref><sp/>==<sp/>StcodeTargetPlatform::PC<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="commonUtils_8h_1ae2667fae32711226a08120e1cc45974d" kindref="member">item_is_in</ref>(<ref refid="namespaceshc_1a47efde6b3d493adbe2119a5593807d36" kindref="member">config</ref>.<ref refid="structshc_1_1CompilerConfig_1abb104bd1eae00002853482d98be9ae72" kindref="member">cppStcodeArch</ref>,<sp/>{StcodeTargetArch::X86_64,<sp/>StcodeTargetArch::E2K}));</highlight></codeline>
<codeline lineno="174"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>_TARGET_PC_MACOSX</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;<sp/></highlight><highlight class="comment">//<sp/>android<sp/>and<sp/>{armv7a,<sp/>armv8a}<sp/>is<sp/>already<sp/>listed<sp/>in<sp/>common<sp/>code<sp/>above</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="176"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="177"><highlight class="normal">}</highlight></codeline>
<codeline lineno="178"><highlight class="normal"></highlight></codeline>
<codeline lineno="179"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="cppStcode_8cpp_1a51806d301dca3868fbacdc33763bab2b" kindref="member">set_stcode_platform_from_arg</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*str,<sp/><ref refid="structshc_1_1CompilerConfig" kindref="compound">shc::CompilerConfig</ref><sp/>&amp;config)</highlight></codeline>
<codeline lineno="180"><highlight class="normal">{</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strcmp(str,<sp/></highlight><highlight class="stringliteral">&quot;pc&quot;</highlight><highlight class="normal">)<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceshc_1a47efde6b3d493adbe2119a5593807d36" kindref="member">config</ref>.<ref refid="structshc_1_1CompilerConfig_1a25842f4372faec252d1005f4b041332a" kindref="member">cppStcodePlatform</ref><sp/>=<sp/>StcodeTargetPlatform::PC;</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strcmp(str,<sp/></highlight><highlight class="stringliteral">&quot;android&quot;</highlight><highlight class="normal">)<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceshc_1a47efde6b3d493adbe2119a5593807d36" kindref="member">config</ref>.<ref refid="structshc_1_1CompilerConfig_1a25842f4372faec252d1005f4b041332a" kindref="member">cppStcodePlatform</ref><sp/>=<sp/>StcodeTargetPlatform::ANDROID;</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strcmp(str,<sp/></highlight><highlight class="stringliteral">&quot;nswitch&quot;</highlight><highlight class="normal">)<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceshc_1a47efde6b3d493adbe2119a5593807d36" kindref="member">config</ref>.<ref refid="structshc_1_1CompilerConfig_1a25842f4372faec252d1005f4b041332a" kindref="member">cppStcodePlatform</ref><sp/>=<sp/>StcodeTargetPlatform::NSWITCH;</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="189"><highlight class="normal"></highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>validate_arch_for_platform(config);</highlight></codeline>
<codeline lineno="191"><highlight class="normal">}</highlight></codeline>
<codeline lineno="192"><highlight class="normal"></highlight></codeline>
<codeline lineno="193"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="194"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>T<sp/>platform_switch(T<sp/>&amp;&amp;if_pc,<sp/>T<sp/>&amp;&amp;if_android,<sp/>T<sp/>&amp;&amp;if_nswitch)</highlight></codeline>
<codeline lineno="195"><highlight class="normal">{</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(<ref refid="namespaceshc_1a47efde6b3d493adbe2119a5593807d36" kindref="member">shc::config</ref>().cppStcodePlatform)</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="cppStcodePlatformInfo_8h_1a2a973a4f32d63d4f3e23ad578192cb88a5b39c8b553c821e7cddc6da64b5bd2ee" kindref="member">StcodeTargetPlatform::DEFAULT</ref>:</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>StcodeTargetPlatform::PC:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>eastl::forward&lt;T&gt;(if_pc);</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>StcodeTargetPlatform::ANDROID:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>eastl::forward&lt;T&gt;(if_android);</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>StcodeTargetPlatform::NSWITCH:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>eastl::forward&lt;T&gt;(if_nswitch);</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:<sp/>G_ASSERT_RETURN(0,<sp/>eastl::forward&lt;T&gt;(if_pc));</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="204"><highlight class="normal">}</highlight></codeline>
<codeline lineno="205"><highlight class="normal"></highlight></codeline>
<codeline lineno="206"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>_CROSS_TARGET_METAL</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="207"><highlight class="normal"></highlight></codeline>
<codeline lineno="208"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>validate_arch_for_platform(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structshc_1_1CompilerConfig" kindref="compound">shc::CompilerConfig</ref><sp/>&amp;config)</highlight></codeline>
<codeline lineno="209"><highlight class="normal">{</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespaceshc_1a47efde6b3d493adbe2119a5593807d36" kindref="member">config</ref>.<ref refid="structshc_1_1CompilerConfig_1abb104bd1eae00002853482d98be9ae72" kindref="member">cppStcodeArch</ref><sp/>==<sp/><ref refid="cppStcodePlatformInfo_8h_1a67d6bd111736197f5943a0493f1dbf05a5b39c8b553c821e7cddc6da64b5bd2ee" kindref="member">StcodeTargetArch::DEFAULT</ref><sp/>||<sp/><ref refid="namespaceshc_1a47efde6b3d493adbe2119a5593807d36" kindref="member">config</ref>.<ref refid="structshc_1_1CompilerConfig_1a25842f4372faec252d1005f4b041332a" kindref="member">cppStcodePlatform</ref><sp/>==<sp/><ref refid="cppStcodePlatformInfo_8h_1a2a973a4f32d63d4f3e23ad578192cb88a5b39c8b553c821e7cddc6da64b5bd2ee" kindref="member">StcodeTargetPlatform::DEFAULT</ref><sp/>||</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<ref refid="namespaceshc_1a47efde6b3d493adbe2119a5593807d36" kindref="member">config</ref>.<ref refid="structshc_1_1CompilerConfig_1a25842f4372faec252d1005f4b041332a" kindref="member">cppStcodePlatform</ref><sp/>==<sp/>StcodeTargetPlatform::MACOSX<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="commonUtils_8h_1ae2667fae32711226a08120e1cc45974d" kindref="member">item_is_in</ref>(<ref refid="namespaceshc_1a47efde6b3d493adbe2119a5593807d36" kindref="member">config</ref>.<ref refid="structshc_1_1CompilerConfig_1abb104bd1eae00002853482d98be9ae72" kindref="member">cppStcodeArch</ref>,<sp/>{StcodeTargetArch::X86_64,<sp/>StcodeTargetArch::ARM64}))<sp/>||</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<ref refid="namespaceshc_1a47efde6b3d493adbe2119a5593807d36" kindref="member">config</ref>.<ref refid="structshc_1_1CompilerConfig_1a25842f4372faec252d1005f4b041332a" kindref="member">cppStcodePlatform</ref><sp/>==<sp/>StcodeTargetPlatform::IOS<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="commonUtils_8h_1ae2667fae32711226a08120e1cc45974d" kindref="member">item_is_in</ref>(<ref refid="namespaceshc_1a47efde6b3d493adbe2119a5593807d36" kindref="member">config</ref>.<ref refid="structshc_1_1CompilerConfig_1abb104bd1eae00002853482d98be9ae72" kindref="member">cppStcodeArch</ref>,<sp/>{StcodeTargetArch::ARM64,<sp/>StcodeTargetArch::ARM64_E,<sp/>StcodeTargetArch::ARM_V7,</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>StcodeTargetArch::ARM_V7S,<sp/>StcodeTargetArch::I386}));</highlight></codeline>
<codeline lineno="216"><highlight class="normal">}</highlight></codeline>
<codeline lineno="217"><highlight class="normal"></highlight></codeline>
<codeline lineno="218"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="cppStcode_8cpp_1a51806d301dca3868fbacdc33763bab2b" kindref="member">set_stcode_platform_from_arg</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*str,<sp/><ref refid="structshc_1_1CompilerConfig" kindref="compound">shc::CompilerConfig</ref><sp/>&amp;config)</highlight></codeline>
<codeline lineno="219"><highlight class="normal">{</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strcmp(str,<sp/></highlight><highlight class="stringliteral">&quot;macosx&quot;</highlight><highlight class="normal">)<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceshc_1a47efde6b3d493adbe2119a5593807d36" kindref="member">config</ref>.<ref refid="structshc_1_1CompilerConfig_1a25842f4372faec252d1005f4b041332a" kindref="member">cppStcodePlatform</ref><sp/>=<sp/>StcodeTargetPlatform::MACOSX;</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strcmp(str,<sp/></highlight><highlight class="stringliteral">&quot;ios&quot;</highlight><highlight class="normal">)<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceshc_1a47efde6b3d493adbe2119a5593807d36" kindref="member">config</ref>.<ref refid="structshc_1_1CompilerConfig_1a25842f4372faec252d1005f4b041332a" kindref="member">cppStcodePlatform</ref><sp/>=<sp/>StcodeTargetPlatform::IOS;</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="226"><highlight class="normal"></highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>validate_arch_for_platform(config);</highlight></codeline>
<codeline lineno="228"><highlight class="normal">}</highlight></codeline>
<codeline lineno="229"><highlight class="normal"></highlight></codeline>
<codeline lineno="230"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>is_ios()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespaceshc_1a47efde6b3d493adbe2119a5593807d36" kindref="member">shc::config</ref>().<ref refid="structshc_1_1CompilerConfig_1a25842f4372faec252d1005f4b041332a" kindref="member">cppStcodePlatform</ref><sp/>==<sp/>StcodeTargetPlatform::IOS;<sp/>}</highlight></codeline>
<codeline lineno="231"><highlight class="normal"></highlight></codeline>
<codeline lineno="232"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="233"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>T<sp/>if_ios(T<sp/>&amp;&amp;if_true,<sp/>T<sp/>&amp;&amp;if_false)</highlight></codeline>
<codeline lineno="234"><highlight class="normal">{</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(is_ios())</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>eastl::forward&lt;T&gt;(if_true);</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>eastl::forward&lt;T&gt;(if_false);</highlight></codeline>
<codeline lineno="239"><highlight class="normal">}</highlight></codeline>
<codeline lineno="240"><highlight class="normal"></highlight></codeline>
<codeline lineno="241"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="242"><highlight class="normal"></highlight></codeline>
<codeline lineno="243"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>validate_arch_for_platform(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structshc_1_1CompilerConfig" kindref="compound">shc::CompilerConfig</ref><sp/>&amp;)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="244"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>_CROSS_TARGET_EMPTY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="245"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="246"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>T<sp/>platform_switch(T<sp/>&amp;&amp;if_pc,<sp/>T<sp/>&amp;&amp;,<sp/>T<sp/>&amp;&amp;)</highlight></codeline>
<codeline lineno="247"><highlight class="normal">{</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>if_pc;</highlight></codeline>
<codeline lineno="249"><highlight class="normal">}</highlight></codeline>
<codeline lineno="250"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="251"><highlight class="normal"></highlight></codeline>
<codeline lineno="252"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="253"><highlight class="normal"></highlight></codeline>
<codeline lineno="254"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="cppStcode_8cpp_1ad2bea223f0311870fd56c694574757c1" kindref="member">set_stcode_arch_from_arg</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*str,<sp/><ref refid="structshc_1_1CompilerConfig" kindref="compound">shc::CompilerConfig</ref><sp/>&amp;config_rw)</highlight></codeline>
<codeline lineno="255"><highlight class="normal">{</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><ref refid="cppStcodePlatformInfo_8h_1a67d6bd111736197f5943a0493f1dbf05" kindref="member">StcodeTargetArch</ref><sp/>res<sp/>=<sp/><ref refid="cppStcodePlatformInfo_8h_1a67d6bd111736197f5943a0493f1dbf05a5b39c8b553c821e7cddc6da64b5bd2ee" kindref="member">StcodeTargetArch::DEFAULT</ref>;</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<ref refid="cppStcodePlatformInfo_8h_1a67d6bd111736197f5943a0493f1dbf05" kindref="member">StcodeTargetArch</ref><sp/>arch<sp/>:<sp/><ref refid="cppStcodePlatformInfo_8h_1aa320f8a2356ec64cf8e01425419ed803" kindref="member">ALL_STCODE_ARCHS</ref>)</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(arch<sp/>!=<sp/><ref refid="cppStcodePlatformInfo_8h_1a67d6bd111736197f5943a0493f1dbf05a5b39c8b553c821e7cddc6da64b5bd2ee" kindref="member">StcodeTargetArch::DEFAULT</ref><sp/>&amp;&amp;<sp/>strcmp(str,<sp/>arch_name(arch))<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>res<sp/>=<sp/>arch;</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(res<sp/>==<sp/><ref refid="cppStcodePlatformInfo_8h_1a67d6bd111736197f5943a0493f1dbf05a5b39c8b553c821e7cddc6da64b5bd2ee" kindref="member">StcodeTargetArch::DEFAULT</ref>)<sp/></highlight><highlight class="comment">//<sp/>Not<sp/>found<sp/>or<sp/>invalid</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="267"><highlight class="normal"></highlight></codeline>
<codeline lineno="268"><highlight class="normal"></highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/>config_rw.<ref refid="structshc_1_1CompilerConfig_1abb104bd1eae00002853482d98be9ae72" kindref="member">cppStcodeArch</ref><sp/>=<sp/>res;</highlight></codeline>
<codeline lineno="270"><highlight class="normal"></highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>validate_arch(config_rw)<sp/>&amp;&amp;<sp/>validate_arch_for_platform(config_rw);</highlight></codeline>
<codeline lineno="272"><highlight class="normal">}</highlight></codeline>
<codeline lineno="273"><highlight class="normal"></highlight></codeline>
<codeline lineno="274"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>replace_char(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*str,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>len,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>old_ch,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>new_ch)</highlight></codeline>
<codeline lineno="275"><highlight class="normal">{</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*p<sp/>=<sp/>str;<sp/>p<sp/>!=<sp/>str<sp/>+<sp/>len;<sp/>++p)</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(*p<sp/>==<sp/>old_ch)</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*p<sp/>=<sp/>new_ch;</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="281"><highlight class="normal">}</highlight></codeline>
<codeline lineno="282"><highlight class="normal"></highlight></codeline>
<codeline lineno="283"><highlight class="normal"><ref refid="structStcodeCompilationDirs" kindref="compound">StcodeCompilationDirs</ref><sp/><ref refid="cppStcode_8cpp_1a9165f4c2b3a35ccb46f1909c4bc23597" kindref="member">init_stcode_compilation</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*dest_dir,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*shortened_dest_dir_for_caching)</highlight></codeline>
<codeline lineno="284"><highlight class="normal">{</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><ref refid="cppStcode_8h_1ac560d55d8ba0d82453054cbc1050fc7b" kindref="member">RET_IF_SHOULD_NOT_COMPILE</ref>({});</highlight></codeline>
<codeline lineno="286"><highlight class="normal"></highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><ref refid="structStcodeCompilationDirs" kindref="compound">StcodeCompilationDirs</ref><sp/>dirs{};</highlight></codeline>
<codeline lineno="288"><highlight class="normal"></highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/>dirs.<ref refid="structStcodeCompilationDirs_1a5ba78da158a47f4c09f42d1dee19f95a" kindref="member">stcodeDir</ref><sp/>=<sp/><ref refid="commonUtils_8h_1a423a5cbb08af4695251ec87aa21a5fe1" kindref="member">string_f</ref>(</highlight><highlight class="stringliteral">&quot;%s/stcode&quot;</highlight><highlight class="normal">,<sp/>dest_dir);</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/>dirs.stcodeCompilationCacheDirUnmangled<sp/>=<sp/>shortened_dest_dir_for_caching;</highlight></codeline>
<codeline lineno="291"><highlight class="normal"></highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/>dd_simplify_fname_c(dirs.stcodeDir.data());</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/>dirs.stcodeDir.resize(strlen(dirs.stcodeDir.c_str()));</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/>replace_char(dirs.stcodeDir.data(),<sp/>dirs.stcodeDir.length(),<sp/></highlight><highlight class="charliteral">&apos;\\&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;/&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="295"><highlight class="normal"></highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!dd_dir_exist(dirs.stcodeDir.c_str()))</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/>dd_mkdir(dirs.stcodeDir.c_str());</highlight></codeline>
<codeline lineno="298"><highlight class="normal"></highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>dirs;</highlight></codeline>
<codeline lineno="300"><highlight class="normal">}</highlight></codeline>
<codeline lineno="301"><highlight class="normal"></highlight></codeline>
<codeline lineno="302"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>write_file(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*fn,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*src,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>src_len)</highlight></codeline>
<codeline lineno="303"><highlight class="normal">{</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/>file_ptr_t<sp/>f<sp/>=<sp/>df_open(fn,<sp/>DF_WRITE<sp/>|<sp/>DF_CREATE);</highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!f)</highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="shLog_8cpp_1a2926179632c7c86265007652d3d30b14" kindref="member">sh_debug</ref>(<ref refid="shLog_8h_1a66042048eb3ce30a1dccb2ebf8c2fd5caae3b70b41400c8a36e8a094ac1dbe43c" kindref="member">SHLOG_ERROR</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>open<sp/>file<sp/>%s<sp/>for<sp/>write&quot;</highlight><highlight class="normal">,<sp/>fn);</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>charsWritten<sp/>=<sp/>df_write(f,<sp/>src,<sp/>src_len);</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(charsWritten<sp/>!=<sp/>src_len)</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="shLog_8cpp_1a2926179632c7c86265007652d3d30b14" kindref="member">sh_debug</ref>(<ref refid="shLog_8h_1a66042048eb3ce30a1dccb2ebf8c2fd5caae3b70b41400c8a36e8a094ac1dbe43c" kindref="member">SHLOG_ERROR</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>write<sp/>full<sp/>file<sp/>(%s)&quot;</highlight><highlight class="normal">,<sp/>fn);</highlight></codeline>
<codeline lineno="313"><highlight class="normal"></highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/>df_close(f);</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="316"><highlight class="normal">}</highlight></codeline>
<codeline lineno="317"><highlight class="normal"></highlight></codeline>
<codeline lineno="318"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>CPPFILE_HEADER_TEMPLATE[]<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;/*<sp/>xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx<sp/>*/\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="319"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>CPPFILE_HEADER_LEN<sp/>=<sp/><ref refid="commonUtils_8h_1a514d093bec84d424a39236e710bb0245" kindref="member">LITSTR_LEN</ref>(CPPFILE_HEADER_TEMPLATE);</highlight></codeline>
<codeline lineno="320"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>CPPFILE_HEADER_FMT[]<sp/>=</highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;/*<sp/>%02hhx%02hhx%02hhx%02hhx%02hhx%02hhx%02hhx%02hhx%02hhx%02hhx%02hhx%02hhx%02hhx%02hhx%02hhx%02hhx%02hhx%02hhx%02hhx%02hhx<sp/>*/\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="322"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>JAMFILE_HEADER_TEMPLATE[]<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;#<sp/>xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="323"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>JAMFILE_HEADER_LEN<sp/>=<sp/><ref refid="commonUtils_8h_1a514d093bec84d424a39236e710bb0245" kindref="member">LITSTR_LEN</ref>(JAMFILE_HEADER_TEMPLATE);</highlight></codeline>
<codeline lineno="324"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>JAMFILE_HEADER_FMT[]<sp/>=</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;#<sp/>%02hhx%02hhx%02hhx%02hhx%02hhx%02hhx%02hhx%02hhx%02hhx%02hhx%02hhx%02hhx%02hhx%02hhx%02hhx%02hhx%02hhx%02hhx%02hhx%02hhx\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="326"><highlight class="normal"></highlight></codeline>
<codeline lineno="327"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>HEADER_LEN,<sp/>auto<sp/>HEADER_TEMPLATE&gt;</highlight></codeline>
<codeline lineno="328"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>eastl::optional&lt;BlkHashBytes&gt;<sp/>extract_blk_hash_from_read_header(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>(&amp;buf)[HEADER_LEN])</highlight></codeline>
<codeline lineno="329"><highlight class="normal">{</highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>eastl::string_view<sp/>HT{HEADER_TEMPLATE};</highlight></codeline>
<codeline lineno="331"><highlight class="normal"></highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>@TODO:<sp/>match<sp/>other<sp/>parts<sp/>of<sp/>the<sp/>header?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="333"><highlight class="normal"></highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Only<sp/>lower-case</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>hexDigitToNum<sp/>=<sp/>[](</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>digit)<sp/>-&gt;<sp/>eastl::optional&lt;uint8_t&gt;<sp/>{</highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(digit<sp/>&gt;=<sp/></highlight><highlight class="charliteral">&apos;a&apos;</highlight><highlight class="normal"><sp/>&amp;&amp;<sp/>digit<sp/>&lt;=<sp/></highlight><highlight class="charliteral">&apos;f&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>10<sp/>+<sp/>(digit<sp/>-<sp/></highlight><highlight class="charliteral">&apos;a&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(digit<sp/>&gt;=<sp/></highlight><highlight class="charliteral">&apos;0&apos;</highlight><highlight class="normal"><sp/>&amp;&amp;<sp/>digit<sp/>&lt;=<sp/></highlight><highlight class="charliteral">&apos;9&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>digit<sp/>-<sp/></highlight><highlight class="charliteral">&apos;0&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>eastl::nullopt;</highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="343"><highlight class="normal"></highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><ref refid="blkHash_8h_1a592888f422a40aa9b9dad4c6e6dbed99" kindref="member">BlkHashBytes</ref><sp/>res{};</highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>readId<sp/>=<sp/>HT.find(</highlight><highlight class="charliteral">&apos;x&apos;</highlight><highlight class="normal">);<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>&amp;dc<sp/>:<sp/>res)</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/>G_ASSERT(HT[readId]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;x&apos;</highlight><highlight class="normal"><sp/>&amp;&amp;<sp/>HT[readId<sp/>+<sp/>1]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;x&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="348"><highlight class="normal"></highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/>hi,<sp/>lo;</highlight></codeline>
<codeline lineno="350"><highlight class="normal"></highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>hiMaybe<sp/>=<sp/>hexDigitToNum(buf[readId++]))</highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>hi<sp/>=<sp/>*hiMaybe;</highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>eastl::nullopt;</highlight></codeline>
<codeline lineno="355"><highlight class="normal"></highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>loMaybe<sp/>=<sp/>hexDigitToNum(buf[readId++]))</highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>lo<sp/>=<sp/>*loMaybe;</highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>eastl::nullopt;</highlight></codeline>
<codeline lineno="360"><highlight class="normal"></highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/><sp/><sp/>dc<sp/>=<sp/>(hi<sp/>&lt;&lt;<sp/>4)<sp/>|<sp/>lo;</highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="363"><highlight class="normal"></highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>res;</highlight></codeline>
<codeline lineno="365"><highlight class="normal">}</highlight></codeline>
<codeline lineno="366"><highlight class="normal"></highlight></codeline>
<codeline lineno="367"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>HEADER_LEN,<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>HEADER_FMT,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">...<sp/>Is&gt;</highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">requires</highlight><highlight class="normal">(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">...(Is)<sp/>==<sp/>eastl::tuple_size_v&lt;BlkHashBytes&gt;)</highlight></codeline>
<codeline lineno="369"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>eastl::string<sp/>make_header_from_blk_hash_impl(eastl::index_sequence&lt;Is...&gt;,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="blkHash_8h_1a592888f422a40aa9b9dad4c6e6dbed99" kindref="member">BlkHashBytes</ref><sp/>&amp;hash)</highlight></codeline>
<codeline lineno="370"><highlight class="normal">{</highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>res<sp/>=<sp/><ref refid="commonUtils_8h_1a423a5cbb08af4695251ec87aa21a5fe1" kindref="member">string_f</ref>(HEADER_FMT,<sp/>(hash[Is])...);</highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/>G_ASSERT(res.length()<sp/>==<sp/>HEADER_LEN);</highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>res;</highlight></codeline>
<codeline lineno="374"><highlight class="normal">}</highlight></codeline>
<codeline lineno="375"><highlight class="normal"></highlight></codeline>
<codeline lineno="376"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>HEADER_LEN,<sp/>auto<sp/>HEADER_FMT&gt;</highlight></codeline>
<codeline lineno="377"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>eastl::string<sp/>make_header_from_blk_hash(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="blkHash_8h_1a592888f422a40aa9b9dad4c6e6dbed99" kindref="member">BlkHashBytes</ref><sp/>&amp;hash)</highlight></codeline>
<codeline lineno="378"><highlight class="normal">{</highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>make_header_from_blk_hash_impl&lt;HEADER_LEN,<sp/>HEADER_FMT&gt;(eastl::make_index_sequence&lt;eastl::tuple_size_v&lt;BlkHashBytes&gt;&gt;{},<sp/>hash);</highlight></codeline>
<codeline lineno="380"><highlight class="normal">}</highlight></codeline>
<codeline lineno="381"><highlight class="normal"></highlight></codeline>
<codeline lineno="382"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>eastl::string<sp/>get_filename_from_source_name_impl(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*shader_source_name,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>name_len,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*ext)</highlight></codeline>
<codeline lineno="383"><highlight class="normal">{</highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*begin<sp/>=<sp/>dd_get_fname(shader_source_name);</highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*end<sp/>=<sp/>dd_get_fname_ext(shader_source_name);</highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!end)</highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/><sp/><sp/>end<sp/>=<sp/>shader_source_name<sp/>+<sp/>name_len;</highlight></codeline>
<codeline lineno="388"><highlight class="normal"></highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/>G_ASSERT(end<sp/>-<sp/>begin<sp/>&gt;<sp/>0);</highlight></codeline>
<codeline lineno="390"><highlight class="normal"></highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>eastl::string(begin,<sp/>end<sp/>-<sp/>begin)<sp/>+<sp/>eastl::string(ext);</highlight></codeline>
<codeline lineno="392"><highlight class="normal">}</highlight></codeline>
<codeline lineno="393"><highlight class="normal"></highlight></codeline>
<codeline lineno="394"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>eastl::string<sp/>get_cpp_filename_from_source_name(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*shader_source_name,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>name_len)</highlight></codeline>
<codeline lineno="395"><highlight class="normal">{</highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>get_filename_from_source_name_impl(shader_source_name,<sp/>name_len,<sp/></highlight><highlight class="stringliteral">&quot;.stcode.gen.cpp&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="397"><highlight class="normal">}</highlight></codeline>
<codeline lineno="398"><highlight class="normal"></highlight></codeline>
<codeline lineno="399"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>eastl::string<sp/>get_header_filename_from_source_name(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*shader_source_name,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>name_len)</highlight></codeline>
<codeline lineno="400"><highlight class="normal">{</highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>get_filename_from_source_name_impl(shader_source_name,<sp/>name_len,<sp/></highlight><highlight class="stringliteral">&quot;.stcode.gen.h&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="402"><highlight class="normal">}</highlight></codeline>
<codeline lineno="403"><highlight class="normal"></highlight></codeline>
<codeline lineno="404"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="cppStcode_8cpp_1a4980391e878d7fd3ebe095517f4c3b23" kindref="member">save_compiled_cpp_stcode</ref>(<ref refid="structStcodeShader" kindref="compound">StcodeShader</ref><sp/>&amp;&amp;cpp_shader,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classShCompilationInfo" kindref="compound">ShCompilationInfo</ref><sp/>&amp;comp)</highlight></codeline>
<codeline lineno="405"><highlight class="normal">{</highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/><ref refid="cppStcode_8h_1ac560d55d8ba0d82453054cbc1050fc7b" kindref="member">RET_IF_SHOULD_NOT_COMPILE</ref>();</highlight></codeline>
<codeline lineno="407"><highlight class="normal"></highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>@NOTE:<sp/>save<sp/>even<sp/>empty<sp/>files:<sp/>this<sp/>is<sp/>done<sp/>so<sp/>that<sp/>incremental<sp/>compilation<sp/>can<sp/>still<sp/>check<sp/>them<sp/>for<sp/>blk<sp/>hash</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="409"><highlight class="normal"></highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>headerTemplate[]<sp/>=</highlight></codeline>
<codeline lineno="411"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;_stcodeTemplates/codeFile.h.fmt&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/><sp/><sp/>;</highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>cppTemplate[]<sp/>=</highlight></codeline>
<codeline lineno="414"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;_stcodeTemplates/codeFile.cpp.fmt&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/><sp/><sp/>;</highlight></codeline>
<codeline lineno="416"><highlight class="normal"></highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/><ref refid="structStcodeStrings" kindref="compound">StcodeStrings</ref><sp/>codeStrings<sp/>=<sp/>cpp_shader.code.release();</highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/><ref refid="structStcodeGlobalVars_1_1Strings" kindref="compound">StcodeGlobalVars::Strings</ref><sp/>globvarsStrings<sp/>=<sp/>cpp_shader.globVars.releaseAssembledCode();</highlight></codeline>
<codeline lineno="419"><highlight class="normal"></highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*stcodeDir<sp/>=<sp/>comp.<ref refid="classShCompilationInfo_1aad42e5fa85eb8e1dce71a9b4d47f5ce7" kindref="member">stcodeDirs</ref>().<ref refid="structStcodeCompilationDirs_1a5ba78da158a47f4c09f42d1dee19f95a" kindref="member">stcodeDir</ref>.c_str();</highlight></codeline>
<codeline lineno="421"><highlight class="normal"></highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>eastl::string<sp/>headerFileName(eastl::string::CtorSprintf{},<sp/></highlight><highlight class="stringliteral">&quot;%s/%s.stcode.gen.h&quot;</highlight><highlight class="normal">,<sp/>stcodeDir,<sp/>cpp_shader.shaderName.c_str());</highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>eastl::string<sp/>cppFileName(eastl::string::CtorSprintf{},<sp/></highlight><highlight class="stringliteral">&quot;%s/%s.stcode.gen.cpp&quot;</highlight><highlight class="normal">,<sp/>stcodeDir,<sp/>cpp_shader.shaderName.c_str());</highlight></codeline>
<codeline lineno="424"><highlight class="normal"></highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>eastl::string<sp/>blkHashHeader<sp/>=<sp/>make_header_from_blk_hash&lt;CPPFILE_HEADER_LEN,<sp/>CPPFILE_HEADER_FMT&gt;(comp.<ref refid="classShCompilationInfo_1a51ba987b41b2c9fdbe000567104f2e26" kindref="member">targetBlkHash</ref>());</highlight></codeline>
<codeline lineno="426"><highlight class="normal"></highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>eastl::string<sp/>headerSource(eastl::string::CtorSprintf{},<sp/>headerTemplate,<sp/>blkHashHeader.c_str(),<sp/>cpp_shader.shaderName.c_str(),</highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/><sp/><sp/>cpp_shader.shaderName.c_str(),<sp/>codeStrings.<ref refid="structStcodeStrings_1a8465a0a4e47b4376dec531255c5249a7" kindref="member">headerCode</ref>.c_str());</highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>eastl::string<sp/>cppSource(eastl::string::CtorSprintf{},<sp/>cppTemplate,<sp/>blkHashHeader.c_str(),<sp/>cpp_shader.shaderName.c_str(),</highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/><sp/><sp/>cpp_shader.shaderName.c_str(),<sp/>globvarsStrings.<ref refid="structStcodeGlobalVars_1_1Strings_1a72eb4a40d8d3964701dfd71caf4f0b77" kindref="member">fetchersOrFwdCppCode</ref>.c_str(),<sp/>cpp_shader.shaderName.c_str(),</highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/><sp/><sp/>codeStrings.<ref refid="structStcodeStrings_1a568292a13c82e8eb55f47d98e963d243" kindref="member">cppCode</ref>.c_str());</highlight></codeline>
<codeline lineno="432"><highlight class="normal"></highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/>write_file(headerFileName.c_str(),<sp/>headerSource.c_str(),<sp/>headerSource.length());</highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/>write_file(cppFileName.c_str(),<sp/>cppSource.c_str(),<sp/>cppSource.length());</highlight></codeline>
<codeline lineno="435"><highlight class="normal">}</highlight></codeline>
<codeline lineno="436"><highlight class="normal"></highlight></codeline>
<codeline lineno="437"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="cppStcode_8cpp_1a669b5fcc096a21d2ba3c4114c5383036" kindref="member">save_stcode_global_vars</ref>(<ref refid="structStcodeGlobalVars" kindref="compound">StcodeGlobalVars</ref><sp/>&amp;&amp;cpp_globvars,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classShCompilationInfo" kindref="compound">ShCompilationInfo</ref><sp/>&amp;comp)</highlight></codeline>
<codeline lineno="438"><highlight class="normal">{</highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/><ref refid="cppStcode_8h_1ac560d55d8ba0d82453054cbc1050fc7b" kindref="member">RET_IF_SHOULD_NOT_COMPILE</ref>();</highlight></codeline>
<codeline lineno="440"><highlight class="normal"></highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>cppTemplate[]<sp/>=</highlight></codeline>
<codeline lineno="442"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;_stcodeTemplates/globVars.cpp.fmt&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/><sp/><sp/>;</highlight></codeline>
<codeline lineno="444"><highlight class="normal"></highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/><ref refid="structStcodeGlobalVars_1_1Strings" kindref="compound">StcodeGlobalVars::Strings</ref><sp/>code<sp/>=<sp/>cpp_globvars.releaseAssembledCode();</highlight></codeline>
<codeline lineno="446"><highlight class="normal"></highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*stcodeDir<sp/>=<sp/>comp.<ref refid="classShCompilationInfo_1aad42e5fa85eb8e1dce71a9b4d47f5ce7" kindref="member">stcodeDirs</ref>().<ref refid="structStcodeCompilationDirs_1a5ba78da158a47f4c09f42d1dee19f95a" kindref="member">stcodeDir</ref>.c_str();</highlight></codeline>
<codeline lineno="448"><highlight class="normal"></highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>eastl::string<sp/>cppFileName(eastl::string::CtorSprintf{},<sp/></highlight><highlight class="stringliteral">&quot;%s/glob_shadervars.stcode.gen.cpp&quot;</highlight><highlight class="normal">,<sp/>stcodeDir);</highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>eastl::string<sp/>blkHashHeader<sp/>=<sp/>make_header_from_blk_hash&lt;CPPFILE_HEADER_LEN,<sp/>CPPFILE_HEADER_FMT&gt;(comp.<ref refid="classShCompilationInfo_1a51ba987b41b2c9fdbe000567104f2e26" kindref="member">targetBlkHash</ref>());</highlight></codeline>
<codeline lineno="451"><highlight class="normal"></highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>eastl::string<sp/>cppSource(eastl::string::CtorSprintf{},<sp/>cppTemplate,<sp/>blkHashHeader.c_str(),<sp/>code.<ref refid="structStcodeGlobalVars_1_1Strings_1ad728d0054603665c54d7b3998ce36c60" kindref="member">cppCode</ref>.c_str(),</highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/><sp/><sp/>code.<ref refid="structStcodeGlobalVars_1_1Strings_1a72eb4a40d8d3964701dfd71caf4f0b77" kindref="member">fetchersOrFwdCppCode</ref>.c_str());</highlight></codeline>
<codeline lineno="454"><highlight class="normal"></highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/>write_file(cppFileName.c_str(),<sp/>cppSource.c_str(),<sp/>cppSource.length());</highlight></codeline>
<codeline lineno="456"><highlight class="normal">}</highlight></codeline>
<codeline lineno="457"><highlight class="normal"></highlight></codeline>
<codeline lineno="458"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>make_hash_byte_array_initializer(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structCryptoHash" kindref="compound">CryptoHash</ref><sp/>&amp;hash)</highlight></codeline>
<codeline lineno="459"><highlight class="normal">{</highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>res<sp/>=<sp/><ref refid="commonUtils_8h_1a423a5cbb08af4695251ec87aa21a5fe1" kindref="member">string_f</ref>(</highlight><highlight class="stringliteral">&quot;0x%02x&quot;</highlight><highlight class="normal">,<sp/>hash.<ref refid="structCryptoHash_1a95d5fa9df82f7c616da94401b37924ba" kindref="member">data</ref>[0]);</highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(uint8_t<sp/></highlight><highlight class="keywordtype">byte</highlight><highlight class="normal"><sp/>:<sp/>make_span_const(hash.data).subspan(1))</highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/><sp/><sp/>res.append_sprintf(</highlight><highlight class="stringliteral">&quot;,<sp/>0x%02x&quot;</highlight><highlight class="normal">,<sp/>byte);</highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>res;</highlight></codeline>
<codeline lineno="464"><highlight class="normal">}</highlight></codeline>
<codeline lineno="465"><highlight class="normal"></highlight></codeline>
<codeline lineno="466"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="cppStcode_8cpp_1a373bc6f0b6f954179718361bfddd80eb" kindref="member">save_stcode_dll_main</ref>(<ref refid="structStcodeShader" kindref="compound">StcodeShader</ref><sp/>&amp;&amp;combined_cppstcode,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structCryptoHash" kindref="compound">CryptoHash</ref><sp/>&amp;stcode_hash,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classShCompilationInfo" kindref="compound">ShCompilationInfo</ref><sp/>&amp;comp)</highlight></codeline>
<codeline lineno="467"><highlight class="normal">{</highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/><ref refid="cppStcode_8h_1ac560d55d8ba0d82453054cbc1050fc7b" kindref="member">RET_IF_SHOULD_NOT_COMPILE</ref>();</highlight></codeline>
<codeline lineno="469"><highlight class="normal"></highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>cppTemplate[]<sp/>=</highlight></codeline>
<codeline lineno="471"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;_stcodeTemplates/main.cpp.fmt&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="472"><highlight class="normal"><sp/><sp/><sp/><sp/>;</highlight></codeline>
<codeline lineno="473"><highlight class="normal"></highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>[regTableCode,<sp/>dynPointerTableCode,<sp/>statPointerTable]<sp/>=<sp/>combined_cppstcode.releaseAssembledInterfaceCode();</highlight></codeline>
<codeline lineno="475"><highlight class="normal"></highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*stcodeDir<sp/>=<sp/>comp.<ref refid="classShCompilationInfo_1aad42e5fa85eb8e1dce71a9b4d47f5ce7" kindref="member">stcodeDirs</ref>().<ref refid="structStcodeCompilationDirs_1a5ba78da158a47f4c09f42d1dee19f95a" kindref="member">stcodeDir</ref>.c_str();</highlight></codeline>
<codeline lineno="477"><highlight class="normal"></highlight></codeline>
<codeline lineno="478"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>eastl::string<sp/>cppFileName(eastl::string::CtorSprintf{},<sp/></highlight><highlight class="stringliteral">&quot;%s/stcode_main.stcode.gen.cpp&quot;</highlight><highlight class="normal">,<sp/>stcodeDir);</highlight></codeline>
<codeline lineno="479"><highlight class="normal"></highlight></codeline>
<codeline lineno="480"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>eastl::string<sp/>blkHashHeader<sp/>=<sp/>make_header_from_blk_hash&lt;CPPFILE_HEADER_LEN,<sp/>CPPFILE_HEADER_FMT&gt;(comp.<ref refid="classShCompilationInfo_1a51ba987b41b2c9fdbe000567104f2e26" kindref="member">targetBlkHash</ref>());</highlight></codeline>
<codeline lineno="481"><highlight class="normal"></highlight></codeline>
<codeline lineno="482"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>For<sp/>unity<sp/>build,<sp/>paste<sp/>cpps<sp/>as<sp/>is.<sp/>Otherwise,<sp/>use<sp/>headers<sp/>for<sp/>fwd<sp/>decl</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="483"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*includesExtForBuildType<sp/>=<sp/><ref refid="namespaceshc_1a47efde6b3d493adbe2119a5593807d36" kindref="member">shc::config</ref>().<ref refid="structshc_1_1CompilerConfig_1aeaf859650958d09e284d5915a2cccebc" kindref="member">cppStcodeUnityBuild</ref><sp/>?<sp/></highlight><highlight class="stringliteral">&quot;cpp&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;h&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="484"><highlight class="normal"></highlight></codeline>
<codeline lineno="485"><highlight class="normal"><sp/><sp/>eastl::string<sp/>includes;</highlight></codeline>
<codeline lineno="486"><highlight class="normal"></highlight></codeline>
<codeline lineno="487"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="488"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classStcodeBuilder" kindref="compound">StcodeBuilder</ref><sp/>strBuilder{};</highlight></codeline>
<codeline lineno="489"><highlight class="normal"><sp/><sp/><sp/><sp/>dag::VectorSet&lt;eastl::string&gt;<sp/>requiredHeaders{};</highlight></codeline>
<codeline lineno="490"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>String<sp/>&amp;shname<sp/>:<sp/>comp.sources())</highlight></codeline>
<codeline lineno="491"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>eastl::string<sp/>headerFileName<sp/>=<sp/>get_header_filename_from_source_name(shname.c_str(),<sp/>shname.length());</highlight></codeline>
<codeline lineno="493"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>eastl::string<sp/>filePath<sp/>=<sp/>eastl::string{stcodeDir}<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;/&quot;</highlight><highlight class="normal"><sp/>+<sp/>headerFileName;</highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(dd_file_exist(filePath.c_str()))</highlight></codeline>
<codeline lineno="495"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="496"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>strBuilder.emplaceBackFmt(</highlight><highlight class="stringliteral">&quot;#include<sp/>\&quot;%s\&quot;\n&quot;</highlight><highlight class="normal">,<sp/>headerFileName.c_str());</highlight></codeline>
<codeline lineno="497"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>requiredHeaders.insert(eastl::move(filePath));</highlight></codeline>
<codeline lineno="498"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="499"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="500"><highlight class="normal"></highlight></codeline>
<codeline lineno="501"><highlight class="normal"><sp/><sp/><sp/><sp/>includes<sp/>=<sp/>strBuilder.release();</highlight></codeline>
<codeline lineno="502"><highlight class="normal"></highlight></codeline>
<codeline lineno="503"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Cleanup<sp/>stale<sp/>files</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="504"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>alefind_t<sp/>&amp;ff<sp/>:<sp/>dd_find_iterator((eastl::string{stcodeDir}<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;/*.stcode.gen.h&quot;</highlight><highlight class="normal">).c_str(),<sp/>DA_FILE))</highlight></codeline>
<codeline lineno="505"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="506"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>eastl::string<sp/>fullPath<sp/>=<sp/>eastl::string{stcodeDir}<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;/&quot;</highlight><highlight class="normal"><sp/>+<sp/>ff.name;</highlight></codeline>
<codeline lineno="507"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(requiredHeaders.find(fullPath)<sp/>==<sp/>requiredHeaders.end())</highlight></codeline>
<codeline lineno="508"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dd_erase(fullPath.c_str());</highlight></codeline>
<codeline lineno="509"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="510"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="511"><highlight class="normal"></highlight></codeline>
<codeline lineno="512"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>eastl::string<sp/>cppSource(eastl::string::CtorSprintf{},<sp/>cppTemplate,<sp/>blkHashHeader.c_str(),<sp/>includes.c_str(),</highlight></codeline>
<codeline lineno="513"><highlight class="normal"><sp/><sp/><sp/><sp/>regTableCode.c_str(),<sp/>dynPointerTableCode.c_str(),<sp/>statPointerTable.c_str(),<sp/>make_hash_byte_array_initializer(stcode_hash).c_str(),</highlight></codeline>
<codeline lineno="514"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t(CPP_STCODE_COMMON_VER));</highlight></codeline>
<codeline lineno="515"><highlight class="normal"></highlight></codeline>
<codeline lineno="516"><highlight class="normal"><sp/><sp/>write_file(cppFileName.c_str(),<sp/>cppSource.c_str(),<sp/>cppSource.length());</highlight></codeline>
<codeline lineno="517"><highlight class="normal">}</highlight></codeline>
<codeline lineno="518"><highlight class="normal"></highlight></codeline>
<codeline lineno="519"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>HEADER_LEN,<sp/>auto<sp/>HEADER_TEMPLATE&gt;</highlight></codeline>
<codeline lineno="520"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>eastl::optional&lt;StcodeSourceFileStat&gt;<sp/>get_file_stat(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*fn)</highlight></codeline>
<codeline lineno="521"><highlight class="normal">{</highlight></codeline>
<codeline lineno="522"><highlight class="normal"><sp/><sp/><ref refid="structStcodeSourceFileStat" kindref="compound">StcodeSourceFileStat</ref><sp/>stat{};</highlight></codeline>
<codeline lineno="523"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="loadShaders_8cpp_1a8e8aeca3872c125527b1516641de7bff" kindref="member">get_file_time64</ref>(fn,<sp/>stat.mtime))</highlight></codeline>
<codeline lineno="524"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>eastl::nullopt;</highlight></codeline>
<codeline lineno="525"><highlight class="normal"></highlight></codeline>
<codeline lineno="526"><highlight class="normal"><sp/><sp/>file_ptr_t<sp/>f<sp/>=<sp/>df_open(fn,<sp/>DF_READ);</highlight></codeline>
<codeline lineno="527"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!f)</highlight></codeline>
<codeline lineno="528"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>eastl::nullopt;</highlight></codeline>
<codeline lineno="529"><highlight class="normal"><sp/><sp/><ref refid="cppStcode_8cpp_1afa2f02cf7da6a0b58c4f01e20ccd1384" kindref="member">DEFER</ref>([f]<sp/>{<sp/>df_close(f);<sp/>});</highlight></codeline>
<codeline lineno="530"><highlight class="normal"></highlight></codeline>
<codeline lineno="531"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>buf[HEADER_LEN];</highlight></codeline>
<codeline lineno="532"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(df_read(f,<sp/>buf,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(buf))<sp/>!=<sp/>HEADER_LEN)</highlight></codeline>
<codeline lineno="533"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>eastl::nullopt;</highlight></codeline>
<codeline lineno="534"><highlight class="normal"></highlight></codeline>
<codeline lineno="535"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>blkHashMaybe<sp/>=<sp/>extract_blk_hash_from_read_header&lt;HEADER_LEN,<sp/>HEADER_TEMPLATE&gt;(buf);</highlight></codeline>
<codeline lineno="536"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!blkHashMaybe)</highlight></codeline>
<codeline lineno="537"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>eastl::nullopt;</highlight></codeline>
<codeline lineno="538"><highlight class="normal"></highlight></codeline>
<codeline lineno="539"><highlight class="normal"><sp/><sp/>stat.savedBlkHash<sp/>=<sp/>*blkHashMaybe;</highlight></codeline>
<codeline lineno="540"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>stat;</highlight></codeline>
<codeline lineno="541"><highlight class="normal">}</highlight></codeline>
<codeline lineno="542"><highlight class="normal"></highlight></codeline>
<codeline lineno="543"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>eastl::optional&lt;StcodeSourceFileStat&gt;<sp/>get_files_pack_stat(std::initializer_list&lt;const<sp/>char<sp/>*&gt;<sp/>filenames)</highlight></codeline>
<codeline lineno="544"><highlight class="normal">{</highlight></codeline>
<codeline lineno="545"><highlight class="normal"><sp/><sp/><ref refid="structStcodeSourceFileStat" kindref="compound">StcodeSourceFileStat</ref><sp/>combinedStat{};</highlight></codeline>
<codeline lineno="546"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*fn<sp/>:<sp/>filenames)</highlight></codeline>
<codeline lineno="547"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="548"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isCpp<sp/>=<sp/>strstr(fn,<sp/></highlight><highlight class="stringliteral">&quot;.cpp&quot;</highlight><highlight class="normal">)<sp/>||<sp/>strstr(fn,<sp/></highlight><highlight class="stringliteral">&quot;.h&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="549"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isJam<sp/>=<sp/>strstr(fn,<sp/></highlight><highlight class="stringliteral">&quot;.jam&quot;</highlight><highlight class="normal">)<sp/>||<sp/>strstr(fn,<sp/></highlight><highlight class="stringliteral">&quot;jamfile&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="550"><highlight class="normal"><sp/><sp/><sp/><sp/>G_ASSERT(isCpp<sp/>||<sp/>isJam);</highlight></codeline>
<codeline lineno="551"><highlight class="normal"><sp/><sp/><sp/><sp/>G_ASSERT(!(isCpp<sp/>&amp;&amp;<sp/>isJam));</highlight></codeline>
<codeline lineno="552"><highlight class="normal"></highlight></codeline>
<codeline lineno="553"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>statMaybe<sp/>=<sp/>isCpp<sp/>?<sp/>get_file_stat&lt;CPPFILE_HEADER_LEN,<sp/>CPPFILE_HEADER_TEMPLATE&gt;(fn)</highlight></codeline>
<codeline lineno="554"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>get_file_stat&lt;JAMFILE_HEADER_LEN,<sp/>JAMFILE_HEADER_TEMPLATE&gt;(fn);</highlight></codeline>
<codeline lineno="555"><highlight class="normal"></highlight></codeline>
<codeline lineno="556"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!statMaybe)</highlight></codeline>
<codeline lineno="557"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>eastl::nullopt;</highlight></codeline>
<codeline lineno="558"><highlight class="normal"></highlight></codeline>
<codeline lineno="559"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;stat<sp/>=<sp/>*statMaybe;</highlight></codeline>
<codeline lineno="560"><highlight class="normal"></highlight></codeline>
<codeline lineno="561"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(combinedStat.mtime<sp/>&lt;<sp/>0)</highlight></codeline>
<codeline lineno="562"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>combinedStat<sp/>=<sp/>stat;</highlight></codeline>
<codeline lineno="563"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(combinedStat.savedBlkHash<sp/>!=<sp/>stat.savedBlkHash)</highlight></codeline>
<codeline lineno="564"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>eastl::nullopt;</highlight></codeline>
<codeline lineno="565"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="566"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>combinedStat.mtime<sp/>=<sp/>min(combinedStat.mtime,<sp/>stat.mtime);</highlight></codeline>
<codeline lineno="567"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="568"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>combinedStat;</highlight></codeline>
<codeline lineno="569"><highlight class="normal">}</highlight></codeline>
<codeline lineno="570"><highlight class="normal"></highlight></codeline>
<codeline lineno="571"><highlight class="normal">eastl::optional&lt;StcodeSourceFileStat&gt;<sp/><ref refid="cppStcode_8cpp_1aeb5ba2eeed332003e755e6dde9cbac47" kindref="member">get_gencpp_files_stat</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*target_fn,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classShCompilationInfo" kindref="compound">ShCompilationInfo</ref><sp/>&amp;comp)</highlight></codeline>
<codeline lineno="572"><highlight class="normal">{</highlight></codeline>
<codeline lineno="573"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*stcodeDir<sp/>=<sp/>comp.<ref refid="classShCompilationInfo_1aad42e5fa85eb8e1dce71a9b4d47f5ce7" kindref="member">stcodeDirs</ref>().<ref refid="structStcodeCompilationDirs_1a5ba78da158a47f4c09f42d1dee19f95a" kindref="member">stcodeDir</ref>.c_str();</highlight></codeline>
<codeline lineno="574"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>fnameBase<sp/>=<sp/><ref refid="namespacestcode_1a7f2720f98f20ceffbea919ac76eae7e3" kindref="member">stcode::extract_shader_name_from_path</ref>(target_fn);</highlight></codeline>
<codeline lineno="575"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>eastl::string<sp/>headerFileName{eastl::string::CtorSprintf{},<sp/></highlight><highlight class="stringliteral">&quot;%s/%s.stcode.gen.h&quot;</highlight><highlight class="normal">,<sp/>stcodeDir,<sp/>fnameBase.c_str()};</highlight></codeline>
<codeline lineno="576"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>eastl::string<sp/>cppFileName{eastl::string::CtorSprintf{},<sp/></highlight><highlight class="stringliteral">&quot;%s/%s.stcode.gen.cpp&quot;</highlight><highlight class="normal">,<sp/>stcodeDir,<sp/>fnameBase.c_str()};</highlight></codeline>
<codeline lineno="577"><highlight class="normal"></highlight></codeline>
<codeline lineno="578"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>get_files_pack_stat({headerFileName.c_str(),<sp/>cppFileName.c_str()});</highlight></codeline>
<codeline lineno="579"><highlight class="normal">}</highlight></codeline>
<codeline lineno="580"><highlight class="normal"></highlight></codeline>
<codeline lineno="581"><highlight class="normal">eastl::optional&lt;StcodeSourceFileStat&gt;<sp/><ref refid="cppStcode_8cpp_1a01338eb44e787adf597d13bf70be252d" kindref="member">get_main_cpp_files_stat</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classShCompilationInfo" kindref="compound">ShCompilationInfo</ref><sp/>&amp;comp)</highlight></codeline>
<codeline lineno="582"><highlight class="normal">{</highlight></codeline>
<codeline lineno="583"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*stcodeDir<sp/>=<sp/>comp.<ref refid="classShCompilationInfo_1aad42e5fa85eb8e1dce71a9b4d47f5ce7" kindref="member">stcodeDirs</ref>().<ref refid="structStcodeCompilationDirs_1a5ba78da158a47f4c09f42d1dee19f95a" kindref="member">stcodeDir</ref>.c_str();</highlight></codeline>
<codeline lineno="584"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>eastl::string<sp/>gvarFileName{eastl::string::CtorSprintf{},<sp/></highlight><highlight class="stringliteral">&quot;%s/glob_shadervars.stcode.gen.cpp&quot;</highlight><highlight class="normal">,<sp/>stcodeDir};</highlight></codeline>
<codeline lineno="585"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>eastl::string<sp/>mainFileName{eastl::string::CtorSprintf{},<sp/></highlight><highlight class="stringliteral">&quot;%s/stcode_main.stcode.gen.cpp&quot;</highlight><highlight class="normal">,<sp/>stcodeDir};</highlight></codeline>
<codeline lineno="586"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>eastl::string<sp/>jamfileName{eastl::string::CtorSprintf{},<sp/></highlight><highlight class="stringliteral">&quot;%s/jamfile&quot;</highlight><highlight class="normal">,<sp/>stcodeDir};</highlight></codeline>
<codeline lineno="587"><highlight class="normal"></highlight></codeline>
<codeline lineno="588"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>get_files_pack_stat({gvarFileName.c_str(),<sp/>mainFileName.c_str(),<sp/>jamfileName.c_str()});</highlight></codeline>
<codeline lineno="589"><highlight class="normal">}</highlight></codeline>
<codeline lineno="590"><highlight class="normal"></highlight></codeline>
<codeline lineno="591"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>speculate_root_depth_from_path(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*path)</highlight></codeline>
<codeline lineno="592"><highlight class="normal">{</highlight></codeline>
<codeline lineno="593"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*p<sp/>=<sp/>path;</highlight></codeline>
<codeline lineno="594"><highlight class="normal"></highlight></codeline>
<codeline lineno="595"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>skip<sp/>../../../<sp/>...<sp/>trail</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="596"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>tail[]<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;../&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="597"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>tailLen<sp/>=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(tail)<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="598"><highlight class="normal"></highlight></codeline>
<codeline lineno="599"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>rootDepthFromCwd<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="600"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;<sp/>strncmp(p,<sp/>tail,<sp/>tailLen)<sp/>==<sp/>0;<sp/>p<sp/>+=<sp/>tailLen)</highlight></codeline>
<codeline lineno="601"><highlight class="normal"><sp/><sp/><sp/><sp/>++rootDepthFromCwd;</highlight></codeline>
<codeline lineno="602"><highlight class="normal"></highlight></codeline>
<codeline lineno="603"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>rootDepthFromCwd;</highlight></codeline>
<codeline lineno="604"><highlight class="normal">}</highlight></codeline>
<codeline lineno="605"><highlight class="normal"></highlight></codeline>
<codeline lineno="606"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>eastl::string<sp/>build_root_rel_path(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>depth)</highlight></codeline>
<codeline lineno="607"><highlight class="normal">{</highlight></codeline>
<codeline lineno="608"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(depth<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="609"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>eastl::string(</highlight><highlight class="stringliteral">&quot;.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="610"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="611"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="612"><highlight class="normal"><sp/><sp/><sp/><sp/>eastl::string<sp/>res<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="613"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>depth<sp/>-<sp/>1;<sp/>++i)</highlight></codeline>
<codeline lineno="614"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>res<sp/>+=<sp/></highlight><highlight class="stringliteral">&quot;../&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="615"><highlight class="normal"><sp/><sp/><sp/><sp/>res<sp/>+=<sp/></highlight><highlight class="stringliteral">&quot;..&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="616"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>res;</highlight></codeline>
<codeline lineno="617"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="618"><highlight class="normal">}</highlight></codeline>
<codeline lineno="619"><highlight class="normal"></highlight></codeline>
<codeline lineno="620"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>eastl::string<sp/>get_cwd()</highlight></codeline>
<codeline lineno="621"><highlight class="normal">{</highlight></codeline>
<codeline lineno="622"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>buf[DAGOR_MAX_PATH<sp/>*<sp/>4];</highlight></codeline>
<codeline lineno="623"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(getcwd(buf,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(buf)))</highlight></codeline>
<codeline lineno="624"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="625"><highlight class="normal"><sp/><sp/><sp/><sp/>dd_simplify_fname_c(buf);</highlight></codeline>
<codeline lineno="626"><highlight class="normal"><sp/><sp/><sp/><sp/>replace_char(buf,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(buf),<sp/></highlight><highlight class="charliteral">&apos;\\&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;/&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="627"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>eastl::string(buf);</highlight></codeline>
<codeline lineno="628"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="629"><highlight class="normal"></highlight></codeline>
<codeline lineno="630"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>eastl::string();</highlight></codeline>
<codeline lineno="631"><highlight class="normal">}</highlight></codeline>
<codeline lineno="632"><highlight class="normal"></highlight></codeline>
<codeline lineno="633"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>split_by_lowest_dir(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*path,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>path_len)</highlight></codeline>
<codeline lineno="634"><highlight class="normal">{</highlight></codeline>
<codeline lineno="635"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*p<sp/>=<sp/>strchr(path,<sp/></highlight><highlight class="charliteral">&apos;/&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="636"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>p<sp/>?<sp/>eastl::make_pair(eastl::string{path,<sp/>size_t(p<sp/>-<sp/>path<sp/>+<sp/>1)},<sp/>eastl::string{p<sp/>+<sp/>1,<sp/>path_len<sp/>-<sp/>(path<sp/>-<sp/>p)<sp/>-<sp/>1})</highlight></codeline>
<codeline lineno="637"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>eastl::make_pair(eastl::string{},<sp/>eastl::string{path,<sp/>path_len});</highlight></codeline>
<codeline lineno="638"><highlight class="normal">}</highlight></codeline>
<codeline lineno="639"><highlight class="normal"></highlight></codeline>
<codeline lineno="640"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>path_is_abs(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*path)</highlight></codeline>
<codeline lineno="641"><highlight class="normal">{</highlight></codeline>
<codeline lineno="642"><highlight class="normal"><sp/><sp/>G_ASSERT(path);</highlight></codeline>
<codeline lineno="643"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>_TARGET_PC_WIN</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="644"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strchr(path,<sp/></highlight><highlight class="charliteral">&apos;:&apos;</highlight><highlight class="normal">))</highlight></codeline>
<codeline lineno="645"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="646"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="647"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>path[0]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;/&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="648"><highlight class="normal">}</highlight></codeline>
<codeline lineno="649"><highlight class="normal"></highlight></codeline>
<codeline lineno="650" refid="structJamCompilationDirs" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structJamCompilationDirs" kindref="compound">JamCompilationDirs</ref></highlight></codeline>
<codeline lineno="651"><highlight class="normal">{</highlight></codeline>
<codeline lineno="652"><highlight class="normal"><sp/><sp/>eastl::string<sp/><ref refid="structJamCompilationDirs_1a17b4455dd0a38d86dbdb8ca0ff578bb1" kindref="member">root</ref>;</highlight></codeline>
<codeline lineno="653"><highlight class="normal"><sp/><sp/>eastl::string<sp/><ref refid="structJamCompilationDirs_1ab1029d3b47ef4e2272bdb3f9cecdbe0d" kindref="member">location</ref>;</highlight></codeline>
<codeline lineno="654"><highlight class="normal"><sp/><sp/>eastl::string<sp/><ref refid="structJamCompilationDirs_1a09804a6a1959b814d4c4709171849295" kindref="member">cache</ref>;</highlight></codeline>
<codeline lineno="655"><highlight class="normal"><sp/><sp/>eastl::string<sp/><ref refid="structJamCompilationDirs_1a3378120d09def865288256fe6c6b28f5" kindref="member">outDir</ref>;</highlight></codeline>
<codeline lineno="656"><highlight class="normal">};</highlight></codeline>
<codeline lineno="657"><highlight class="normal"></highlight></codeline>
<codeline lineno="658"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structJamCompilationDirs" kindref="compound">JamCompilationDirs</ref><sp/>generate_dirs_with_provided_root(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*engine_root,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*out_dir,</highlight></codeline>
<codeline lineno="659"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structStcodeCompilationDirs" kindref="compound">StcodeCompilationDirs</ref><sp/>&amp;stcode_dirs)</highlight></codeline>
<codeline lineno="660"><highlight class="normal">{</highlight></codeline>
<codeline lineno="661"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>eastl::string<sp/>cwd<sp/>=<sp/>get_cwd();</highlight></codeline>
<codeline lineno="662"><highlight class="normal"></highlight></codeline>
<codeline lineno="663"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>toAbs<sp/>=<sp/>[&amp;cwd](</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*src)<sp/>{</highlight></codeline>
<codeline lineno="664"><highlight class="normal"><sp/><sp/><sp/><sp/>eastl::string<sp/>res{src};</highlight></codeline>
<codeline lineno="665"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!path_is_abs(src))</highlight></codeline>
<codeline lineno="666"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>res<sp/>=<sp/>cwd<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;/&quot;</highlight><highlight class="normal"><sp/>+<sp/>res;</highlight></codeline>
<codeline lineno="667"><highlight class="normal"><sp/><sp/><sp/><sp/>dd_simplify_fname_c(res.data());</highlight></codeline>
<codeline lineno="668"><highlight class="normal"><sp/><sp/><sp/><sp/>res.resize(strlen(res.c_str()));</highlight></codeline>
<codeline lineno="669"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(res.back()<sp/>==<sp/></highlight><highlight class="charliteral">&apos;/&apos;</highlight><highlight class="normal"><sp/>&amp;&amp;<sp/>res.size()<sp/>&gt;<sp/>0)</highlight></codeline>
<codeline lineno="670"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>res.pop_back();</highlight></codeline>
<codeline lineno="671"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>res;</highlight></codeline>
<codeline lineno="672"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="673"><highlight class="normal"></highlight></codeline>
<codeline lineno="674"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>tracebackPathFrom<sp/>=<sp/>[](</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*from)<sp/>{</highlight></codeline>
<codeline lineno="675"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dirCount<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="676"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*p<sp/>=<sp/>from;<sp/>p;<sp/>p<sp/>=<sp/>strchr(p,<sp/></highlight><highlight class="charliteral">&apos;/&apos;</highlight><highlight class="normal">))</highlight></codeline>
<codeline lineno="677"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="678"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>++dirCount;</highlight></codeline>
<codeline lineno="679"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>++p;</highlight></codeline>
<codeline lineno="680"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="681"><highlight class="normal"></highlight></codeline>
<codeline lineno="682"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>UNIT[]<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;../&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="683"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>UNIT_LEN<sp/>=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(UNIT)<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="684"><highlight class="normal"><sp/><sp/><sp/><sp/>eastl::string<sp/>res{};</highlight></codeline>
<codeline lineno="685"><highlight class="normal"><sp/><sp/><sp/><sp/>res.resize(UNIT_LEN<sp/>*<sp/>dirCount);</highlight></codeline>
<codeline lineno="686"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>dirCount;<sp/>++i)</highlight></codeline>
<codeline lineno="687"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>memcpy(res.data()<sp/>+<sp/>UNIT_LEN<sp/>*<sp/>i,<sp/>UNIT,<sp/>UNIT_LEN);</highlight></codeline>
<codeline lineno="688"><highlight class="normal"></highlight></codeline>
<codeline lineno="689"><highlight class="normal"><sp/><sp/><sp/><sp/>res.pop_back();</highlight></codeline>
<codeline lineno="690"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>res;</highlight></codeline>
<codeline lineno="691"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="692"><highlight class="normal"></highlight></codeline>
<codeline lineno="693"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>makeRelPath<sp/>=<sp/>[&amp;](</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*from,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*to)<sp/>{</highlight></codeline>
<codeline lineno="694"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*pf<sp/>=<sp/>from,<sp/>*pt<sp/>=<sp/>to;</highlight></codeline>
<codeline lineno="695"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;<sp/>*pf<sp/>&amp;&amp;<sp/>*pt<sp/>&amp;&amp;<sp/>*pf<sp/>==<sp/>*pt;<sp/>++pf,<sp/>++pt)</highlight></codeline>
<codeline lineno="696"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>;</highlight></codeline>
<codeline lineno="697"><highlight class="normal"></highlight></codeline>
<codeline lineno="698"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(*pf<sp/>==<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal"><sp/>&amp;&amp;<sp/>*pt<sp/>==<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="699"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>eastl::string{</highlight><highlight class="stringliteral">&quot;./&quot;</highlight><highlight class="normal">};</highlight></codeline>
<codeline lineno="700"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(*pf<sp/>==<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal"><sp/>&amp;&amp;<sp/>*pt<sp/>==<sp/></highlight><highlight class="charliteral">&apos;/&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="701"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>eastl::string{pt<sp/>+<sp/>1};</highlight></codeline>
<codeline lineno="702"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(*pf<sp/>==<sp/></highlight><highlight class="charliteral">&apos;/&apos;</highlight><highlight class="normal"><sp/>&amp;&amp;<sp/>*pt<sp/>==<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="703"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>tracebackPathFrom(pf<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="704"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="705"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="706"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="707"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="708"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>--pf,<sp/>--pt;</highlight></codeline>
<codeline lineno="709"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(*pf<sp/>!=<sp/></highlight><highlight class="charliteral">&apos;/&apos;</highlight><highlight class="normal"><sp/>&amp;&amp;<sp/>*pt<sp/>!=<sp/></highlight><highlight class="charliteral">&apos;/&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="710"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>tracebackPathFrom(pf<sp/>+<sp/>1)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;/&quot;</highlight><highlight class="normal"><sp/>+<sp/>eastl::string{pt<sp/>+<sp/>1};</highlight></codeline>
<codeline lineno="711"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="712"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="713"><highlight class="normal"></highlight></codeline>
<codeline lineno="714"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>eastl::string<sp/>outDirAbs<sp/>=<sp/>toAbs(out_dir);</highlight></codeline>
<codeline lineno="715"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>eastl::string<sp/>engineRootAbs<sp/>=<sp/>toAbs(engine_root);</highlight></codeline>
<codeline lineno="716"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>eastl::string<sp/>stcodeDirAbs<sp/>=<sp/>toAbs(stcode_dirs.<ref refid="structStcodeCompilationDirs_1a5ba78da158a47f4c09f42d1dee19f95a" kindref="member">stcodeDir</ref>.c_str());</highlight></codeline>
<codeline lineno="717"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>eastl::string<sp/>stcodeCacheDirAbs<sp/>=<sp/>toAbs(stcode_dirs.<ref refid="structStcodeCompilationDirs_1a414d7c0f7073b5fab26492df9136ca5e" kindref="member">stcodeCompilationCacheDirUnmangled</ref>.c_str());</highlight></codeline>
<codeline lineno="718"><highlight class="normal"></highlight></codeline>
<codeline lineno="719"><highlight class="normal"><sp/><sp/><ref refid="structJamCompilationDirs" kindref="compound">JamCompilationDirs</ref><sp/>res{};</highlight></codeline>
<codeline lineno="720"><highlight class="normal"><sp/><sp/>res.<ref refid="structJamCompilationDirs_1a17b4455dd0a38d86dbdb8ca0ff578bb1" kindref="member">root</ref><sp/>=<sp/>makeRelPath(cwd.c_str(),<sp/>engineRootAbs.c_str());</highlight></codeline>
<codeline lineno="721"><highlight class="normal"><sp/><sp/>res.location<sp/>=<sp/>makeRelPath(engineRootAbs.c_str(),<sp/>stcodeDirAbs.c_str());</highlight></codeline>
<codeline lineno="722"><highlight class="normal"><sp/><sp/>res.cache<sp/>=<sp/>makeRelPath(engineRootAbs.c_str(),<sp/>stcodeCacheDirAbs.c_str());</highlight></codeline>
<codeline lineno="723"><highlight class="normal"><sp/><sp/>res.outDir<sp/>=<sp/>makeRelPath(engineRootAbs.c_str(),<sp/>outDirAbs.c_str());</highlight></codeline>
<codeline lineno="724"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>res;</highlight></codeline>
<codeline lineno="725"><highlight class="normal">}</highlight></codeline>
<codeline lineno="726"><highlight class="normal"></highlight></codeline>
<codeline lineno="727"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structJamCompilationDirs" kindref="compound">JamCompilationDirs</ref><sp/>generate_dirs_with_inferred_root_from_rel_path(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*out_dir,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structStcodeCompilationDirs" kindref="compound">StcodeCompilationDirs</ref><sp/>&amp;stcode_dirs)</highlight></codeline>
<codeline lineno="728"><highlight class="normal">{</highlight></codeline>
<codeline lineno="729"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*stcodeDir<sp/>=<sp/>stcode_dirs.<ref refid="structStcodeCompilationDirs_1a5ba78da158a47f4c09f42d1dee19f95a" kindref="member">stcodeDir</ref>.c_str();</highlight></codeline>
<codeline lineno="730"><highlight class="normal"></highlight></codeline>
<codeline lineno="731"><highlight class="normal"><sp/><sp/><ref refid="shLog_8cpp_1a2926179632c7c86265007652d3d30b14" kindref="member">sh_debug</ref>(<ref refid="shLog_8h_1a66042048eb3ce30a1dccb2ebf8c2fd5ca5395b0c35e96d97ae9ac7f83b0665310" kindref="member">SHLOG_NORMAL</ref>,</highlight></codeline>
<codeline lineno="732"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;[WARNING]<sp/>engineRootDir<sp/>var<sp/>not<sp/>found<sp/>in<sp/>blk,<sp/>trying<sp/>to<sp/>generate<sp/>stcode<sp/>compilation<sp/>paths<sp/>from<sp/>output<sp/>path<sp/>(%s).<sp/>Note<sp/>that<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="733"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;this<sp/>path<sp/>must<sp/>be<sp/>relative<sp/>to<sp/>cwd<sp/>and<sp/>passing<sp/>through<sp/>engine<sp/>root,<sp/>or<sp/>the<sp/>build<sp/>will<sp/>fail!&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="734"><highlight class="normal"><sp/><sp/><sp/><sp/>stcodeDir);</highlight></codeline>
<codeline lineno="735"><highlight class="normal"></highlight></codeline>
<codeline lineno="736"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(path_is_abs(stcodeDir))</highlight></codeline>
<codeline lineno="737"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="738"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="shLog_8cpp_1a2926179632c7c86265007652d3d30b14" kindref="member">sh_debug</ref>(<ref refid="shLog_8h_1a66042048eb3ce30a1dccb2ebf8c2fd5ca6112bd3e7c5d175bac1569c33c1630ad" kindref="member">SHLOG_FATAL</ref>,<sp/></highlight><highlight class="stringliteral">&quot;output<sp/>path<sp/>(%s)<sp/>can<sp/>not<sp/>be<sp/>absolute<sp/>when<sp/>inferring<sp/>root<sp/>path&quot;</highlight><highlight class="normal">,<sp/>stcodeDir);</highlight></codeline>
<codeline lineno="739"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>{};</highlight></codeline>
<codeline lineno="740"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="741"><highlight class="normal"></highlight></codeline>
<codeline lineno="742"><highlight class="normal"><sp/><sp/>eastl::string<sp/>speculatedRelRoot<sp/>=<sp/>build_root_rel_path(speculate_root_depth_from_path(stcodeDir));</highlight></codeline>
<codeline lineno="743"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>generate_dirs_with_provided_root(speculatedRelRoot.c_str(),<sp/>out_dir,<sp/>stcode_dirs);</highlight></codeline>
<codeline lineno="744"><highlight class="normal">}</highlight></codeline>
<codeline lineno="745"><highlight class="normal"></highlight></codeline>
<codeline lineno="746"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>cleanup_after_stcode_compilation(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*out_dir,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*lib_name)</highlight></codeline>
<codeline lineno="747"><highlight class="normal">{</highlight></codeline>
<codeline lineno="748"><highlight class="normal"><sp/><sp/>G_UNUSED(out_dir);</highlight></codeline>
<codeline lineno="749"><highlight class="normal"><sp/><sp/>G_UNUSED(lib_name);</highlight></codeline>
<codeline lineno="750"><highlight class="normal"></highlight></codeline>
<codeline lineno="751"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>DEBINFO_EXT[]<sp/>=</highlight></codeline>
<codeline lineno="752"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>_TARGET_PC_WIN</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="753"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;.pdb&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="754"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>_TARGET_PC_LINUX</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="755"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;.so.debuginfo&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="756"><highlight class="normal"></highlight><highlight class="preprocessor">#else<sp/></highlight><highlight class="comment">//<sp/>_TARGET_PC_MACOSX</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="757"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;.dSYM&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="758"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="759"><highlight class="normal"><sp/><sp/><sp/><sp/>;</highlight></codeline>
<codeline lineno="760"><highlight class="normal"></highlight></codeline>
<codeline lineno="761"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>!(_CROSS_TARGET_C1<sp/>|<sp/>_CROSS_TARGET_C2)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="762"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>_CROSS_TARGET_SPIRV</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="763"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="namespaceshc_1a47efde6b3d493adbe2119a5593807d36" kindref="member">shc::config</ref>().cppStcodeDeleteDebugInfo<sp/>&amp;&amp;<sp/><ref refid="namespaceshc_1a47efde6b3d493adbe2119a5593807d36" kindref="member">shc::config</ref>().usePcToken)</highlight></codeline>
<codeline lineno="764"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="765"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="namespaceshc_1a47efde6b3d493adbe2119a5593807d36" kindref="member">shc::config</ref>().cppStcodeDeleteDebugInfo)</highlight></codeline>
<codeline lineno="766"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="767"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="768"><highlight class="normal"><sp/><sp/><sp/><sp/>eastl::string<sp/>pdbPath<sp/>=<sp/>eastl::string{out_dir}<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;/&quot;</highlight><highlight class="normal"><sp/>+<sp/>eastl::string{lib_name}<sp/>+</highlight></codeline>
<codeline lineno="769"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>config_to_mangled_suffix(<ref refid="namespaceshc_1a47efde6b3d493adbe2119a5593807d36" kindref="member">shc::config</ref>().cppStcodeCompConfig)<sp/>+<sp/>DEBINFO_EXT;</highlight></codeline>
<codeline lineno="770"><highlight class="normal"><sp/><sp/><sp/><sp/>dd_erase(pdbPath.c_str());</highlight></codeline>
<codeline lineno="771"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="772"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="773"><highlight class="normal">}</highlight></codeline>
<codeline lineno="774"><highlight class="normal"></highlight></codeline>
<codeline lineno="775"><highlight class="normal">dag::Expected&lt;proc::ProcessTask,<sp/>StcodeMakeTaskError&gt;<sp/><ref refid="cppStcode_8cpp_1a15b170256d831e7b6f40a33741b2eca5" kindref="member">make_stcode_compilation_task</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*out_dir,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*lib_name,</highlight></codeline>
<codeline lineno="776"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classShCompilationInfo" kindref="compound">ShCompilationInfo</ref><sp/>&amp;comp)</highlight></codeline>
<codeline lineno="777"><highlight class="normal">{</highlight></codeline>
<codeline lineno="778"><highlight class="normal"><sp/><sp/><ref refid="cppStcode_8h_1ac560d55d8ba0d82453054cbc1050fc7b" kindref="member">RET_IF_SHOULD_NOT_COMPILE</ref>(dag::Unexpected(<ref refid="cppStcode_8h_1a5f7b70083bba8ebd323206f2f7cf2bcea055c1a591abb0e8cd86dc969727bcc0b" kindref="member">StcodeMakeTaskError::DISABLED</ref>));</highlight></codeline>
<codeline lineno="779"><highlight class="normal"></highlight></codeline>
<codeline lineno="780"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;[stcodeDir,<sp/>stcodeDirCacheUnmangled]<sp/>=<sp/>comp.<ref refid="classShCompilationInfo_1aad42e5fa85eb8e1dce71a9b4d47f5ce7" kindref="member">stcodeDirs</ref>();</highlight></codeline>
<codeline lineno="781"><highlight class="normal"></highlight></codeline>
<codeline lineno="782"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Calculate<sp/>root<sp/>path,<sp/>stcode<sp/>path<sp/>relative<sp/>to<sp/>root<sp/>and<sp/>output<sp/>dir<sp/>relative<sp/>to<sp/>root</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="783"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*engineRoot<sp/>=<sp/><ref refid="namespaceshc_1a47efde6b3d493adbe2119a5593807d36" kindref="member">shc::config</ref>().<ref refid="structshc_1_1CompilerConfig_1ad83dbc6826aeed601bc5a22a5002efc1" kindref="member">engineRootDir</ref>.empty()<sp/>?<sp/>nullptr<sp/>:<sp/><ref refid="namespaceshc_1a47efde6b3d493adbe2119a5593807d36" kindref="member">shc::config</ref>().<ref refid="structshc_1_1CompilerConfig_1ad83dbc6826aeed601bc5a22a5002efc1" kindref="member">engineRootDir</ref>.c_str();</highlight></codeline>
<codeline lineno="784"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>[rootRelPath,<sp/>stcodeRelPath,<sp/>stcodeCacheRelPath,<sp/>outDirRelPath]<sp/>=</highlight></codeline>
<codeline lineno="785"><highlight class="normal"><sp/><sp/><sp/><sp/>engineRoot<sp/>?<sp/>generate_dirs_with_provided_root(engineRoot,<sp/>out_dir,<sp/>comp.<ref refid="classShCompilationInfo_1aad42e5fa85eb8e1dce71a9b4d47f5ce7" kindref="member">stcodeDirs</ref>())</highlight></codeline>
<codeline lineno="786"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>generate_dirs_with_inferred_root_from_rel_path(out_dir,<sp/>comp.stcodeDirs());</highlight></codeline>
<codeline lineno="787"><highlight class="normal"></highlight></codeline>
<codeline lineno="788"><highlight class="normal"><sp/><sp/>eastl::string<sp/>sourcesList;</highlight></codeline>
<codeline lineno="789"><highlight class="normal"></highlight></codeline>
<codeline lineno="790"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="namespaceshc_1a47efde6b3d493adbe2119a5593807d36" kindref="member">shc::config</ref>().cppStcodeUnityBuild)</highlight></codeline>
<codeline lineno="791"><highlight class="normal"><sp/><sp/><sp/><sp/>sourcesList<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="792"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="793"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="794"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classStcodeBuilder" kindref="compound">StcodeBuilder</ref><sp/>strBuilder{};</highlight></codeline>
<codeline lineno="795"><highlight class="normal"><sp/><sp/><sp/><sp/>dag::VectorSet&lt;eastl::string&gt;<sp/>requiredSources{};</highlight></codeline>
<codeline lineno="796"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>String<sp/>&amp;shname<sp/>:<sp/>comp.sources())</highlight></codeline>
<codeline lineno="797"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="798"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>eastl::string<sp/>srcFileName<sp/>=<sp/>get_cpp_filename_from_source_name(shname.c_str(),<sp/>shname.length());</highlight></codeline>
<codeline lineno="799"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>eastl::string<sp/>filePath<sp/>=<sp/>stcodeDir<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;/&quot;</highlight><highlight class="normal"><sp/>+<sp/>srcFileName;</highlight></codeline>
<codeline lineno="800"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(dd_file_exist(filePath.c_str()))</highlight></codeline>
<codeline lineno="801"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="802"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>strBuilder.emplaceBack(srcFileName<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="803"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>requiredSources.insert(eastl::move(filePath));</highlight></codeline>
<codeline lineno="804"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="805"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="806"><highlight class="normal"></highlight></codeline>
<codeline lineno="807"><highlight class="normal"><sp/><sp/><sp/><sp/>sourcesList<sp/>=<sp/>strBuilder.release();</highlight></codeline>
<codeline lineno="808"><highlight class="normal"></highlight></codeline>
<codeline lineno="809"><highlight class="normal"><sp/><sp/><sp/><sp/>requiredSources.insert(stcodeDir<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;/stcode_main.stcode.gen.cpp&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="810"><highlight class="normal"><sp/><sp/><sp/><sp/>requiredSources.insert(stcodeDir<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;/glob_shadervars.stcode.gen.cpp&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="811"><highlight class="normal"></highlight></codeline>
<codeline lineno="812"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Cleanup<sp/>stale<sp/>files</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="813"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>alefind_t<sp/>&amp;ff<sp/>:<sp/>dd_find_iterator((stcodeDir<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;/*.stcode.gen.cpp&quot;</highlight><highlight class="normal">).c_str(),<sp/>DA_FILE))</highlight></codeline>
<codeline lineno="814"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="815"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>eastl::string<sp/>fullPath<sp/>=<sp/>stcodeDir<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;/&quot;</highlight><highlight class="normal"><sp/>+<sp/>ff.name;</highlight></codeline>
<codeline lineno="816"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(requiredSources.find(fullPath)<sp/>==<sp/>requiredSources.end())</highlight></codeline>
<codeline lineno="817"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dd_erase(fullPath.c_str());</highlight></codeline>
<codeline lineno="818"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="819"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="820"><highlight class="normal"></highlight></codeline>
<codeline lineno="821"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Write<sp/>jamfile</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="822"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>jamTemplate[]<sp/>=</highlight></codeline>
<codeline lineno="823"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;_stcodeTemplates/jamfile.fmt&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="824"><highlight class="normal"><sp/><sp/><sp/><sp/>;</highlight></codeline>
<codeline lineno="825"><highlight class="normal"></highlight></codeline>
<codeline lineno="826"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Override<sp/>inappropriate<sp/>target<sp/>mangling<sp/>when<sp/>autocompleting<sp/>target<sp/>for<sp/>some<sp/>platforms</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="827"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*extension<sp/>=</highlight></codeline>
<codeline lineno="828"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>_TARGET_PC_LINUX<sp/>&amp;&amp;<sp/>(_CROSS_TARGET_SPIRV<sp/>|<sp/>_CROSS_TARGET_EMPTY)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="829"><highlight class="normal"><sp/><sp/><sp/><sp/>platform_switch&lt;const<sp/>char<sp/>*&gt;(</highlight><highlight class="stringliteral">&quot;.so&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="830"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>_TARGET_PC_MACOSX<sp/>&amp;&amp;<sp/>(_CROSS_TARGET_METAL<sp/>|<sp/>_CROSS_TARGET_EMPTY)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="831"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;.dylib&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="832"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="833"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="834"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="835"><highlight class="normal"><sp/><sp/><sp/><sp/>;</highlight></codeline>
<codeline lineno="836"><highlight class="normal"></highlight></codeline>
<codeline lineno="837"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>@HACK<sp/>Due<sp/>to<sp/>jam<sp/>limits<sp/>on<sp/>string<sp/>size,<sp/>the<sp/>path<sp/>needs<sp/>to<sp/>be<sp/>mangled<sp/>to<sp/>be<sp/>shortened</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="838"><highlight class="normal"><sp/><sp/>eastl::string<sp/>targetHashedRelPath{};</highlight></codeline>
<codeline lineno="839"><highlight class="normal"><sp/><sp/>eastl::string<sp/>libCodeName{};</highlight></codeline>
<codeline lineno="840"><highlight class="normal"></highlight></codeline>
<codeline lineno="841"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>version<sp/>file</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="842"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>versionsMatch<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="843"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ver<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="844"><highlight class="normal"></highlight></codeline>
<codeline lineno="845"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="846"><highlight class="normal"><sp/><sp/><sp/><sp/>eastl::string<sp/>versionFilePath<sp/>=<sp/>stcodeDir<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;/&quot;</highlight><highlight class="normal"><sp/>+<sp/>STCODE_VER_FILE_NAME;</highlight></codeline>
<codeline lineno="847"><highlight class="normal"><sp/><sp/><sp/><sp/>file_ptr_t<sp/>vf<sp/>=<sp/>df_open(versionFilePath.c_str(),<sp/>DF_READ);</highlight></codeline>
<codeline lineno="848"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(vf)</highlight></codeline>
<codeline lineno="849"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="850"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>buf[128];</highlight></codeline>
<codeline lineno="851"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>charsRead<sp/>=<sp/>df_read(vf,<sp/>buf,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(buf));</highlight></codeline>
<codeline lineno="852"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(charsRead<sp/>&lt;<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(buf))</highlight></codeline>
<codeline lineno="853"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="854"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>buf[charsRead]<sp/>=<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="855"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>ok<sp/>=<sp/><ref refid="namespacesemutils_1ad3cdae42558afe55545de2d9dff909d3" kindref="member">semutils::try_int_number</ref>(buf,<sp/>ver);</highlight></codeline>
<codeline lineno="856"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ok<sp/>&amp;&amp;<sp/>ver<sp/>==<sp/>CPP_STCODE_COMMON_VER)</highlight></codeline>
<codeline lineno="857"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>versionsMatch<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="858"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="859"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>df_close(vf);</highlight></codeline>
<codeline lineno="860"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="861"><highlight class="normal"></highlight></codeline>
<codeline lineno="862"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!versionsMatch)</highlight></codeline>
<codeline lineno="863"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="864"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>vf<sp/>=<sp/>df_open(versionFilePath.c_str(),<sp/>DF_WRITE<sp/>|<sp/>DF_CREATE);</highlight></codeline>
<codeline lineno="865"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>df_printf(vf,<sp/></highlight><highlight class="stringliteral">&quot;%d&quot;</highlight><highlight class="normal">,<sp/>CPP_STCODE_COMMON_VER);</highlight></codeline>
<codeline lineno="866"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>df_close(vf);</highlight></codeline>
<codeline lineno="867"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="868"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="869"><highlight class="normal"></highlight></codeline>
<codeline lineno="870"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!versionsMatch)</highlight></codeline>
<codeline lineno="871"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="872"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="shLog_8cpp_1a2926179632c7c86265007652d3d30b14" kindref="member">sh_debug</ref>(<ref refid="shLog_8h_1a66042048eb3ce30a1dccb2ebf8c2fd5ca5395b0c35e96d97ae9ac7f83b0665310" kindref="member">SHLOG_NORMAL</ref>,</highlight></codeline>
<codeline lineno="873"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Cpp<sp/>stcode<sp/>versions<sp/>do<sp/>not<sp/>match<sp/>(ver=%d<sp/>in<sp/>compilation<sp/>cache,<sp/>ver=%d<sp/>in<sp/>compiler<sp/>binary),<sp/>recompiling<sp/>generated<sp/>code&quot;</highlight><highlight class="normal">,<sp/>ver,</highlight></codeline>
<codeline lineno="874"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>CPP_STCODE_COMMON_VER);</highlight></codeline>
<codeline lineno="875"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="876"><highlight class="normal"></highlight></codeline>
<codeline lineno="877"><highlight class="normal"><sp/><sp/><ref refid="cppStcodePlatformInfo_8h_1a67d6bd111736197f5943a0493f1dbf05" kindref="member">StcodeTargetArch</ref><sp/>arch<sp/>=<sp/><ref refid="cppStcodePlatformInfo_8h_1a67d6bd111736197f5943a0493f1dbf05a5b39c8b553c821e7cddc6da64b5bd2ee" kindref="member">StcodeTargetArch::DEFAULT</ref>;</highlight></codeline>
<codeline lineno="878"><highlight class="normal"></highlight></codeline>
<codeline lineno="879"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SET_ARCH_WITH_DEF(default_)<sp/>\</highlight></codeline>
<codeline lineno="880"><highlight class="preprocessor"><sp/><sp/>arch<sp/>=<sp/>(shc::config().cppStcodeArch<sp/>==<sp/>StcodeTargetArch::DEFAULT<sp/>?<sp/>default_<sp/>:<sp/>shc::config().cppStcodeArch)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="881"><highlight class="normal"></highlight></codeline>
<codeline lineno="882"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>_TARGET_PC_WIN</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="883"><highlight class="normal"></highlight></codeline>
<codeline lineno="884"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>_CROSS_TARGET_SPIRV</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="885"><highlight class="normal"><sp/><sp/>SET_ARCH_WITH_DEF(platform_switch(<ref refid="cppStcodePlatformInfo_8h_1a67d6bd111736197f5943a0493f1dbf05a840030b2e70cfe0155e29ee926dbd8ae" kindref="member">StcodeTargetArch::X86_64</ref>,<sp/><ref refid="cppStcodePlatformInfo_8h_1a67d6bd111736197f5943a0493f1dbf05aef7a7a2678567b43d0cf274d775979e0" kindref="member">StcodeTargetArch::ARM64_V8A</ref>,<sp/><ref refid="cppStcodePlatformInfo_8h_1a67d6bd111736197f5943a0493f1dbf05ab9b55c80d095761ac7757ced0fedadc4" kindref="member">StcodeTargetArch::ARM64</ref>));</highlight></codeline>
<codeline lineno="886"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="887"><highlight class="normal"><sp/><sp/>SET_ARCH_WITH_DEF(<ref refid="cppStcodePlatformInfo_8h_1a67d6bd111736197f5943a0493f1dbf05a840030b2e70cfe0155e29ee926dbd8ae" kindref="member">StcodeTargetArch::X86_64</ref>);</highlight></codeline>
<codeline lineno="888"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="889"><highlight class="normal"></highlight></codeline>
<codeline lineno="890"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*jamPlatform<sp/>=</highlight></codeline>
<codeline lineno="891"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>_CROSS_TARGET_DX12</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="892"><highlight class="normal"><sp/><sp/><sp/><sp/>platform_switch&lt;const<sp/>char<sp/>*&gt;(</highlight><highlight class="stringliteral">&quot;windows&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;xboxOne&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;scarlett&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="893"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>_CROSS_TARGET_DX11</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="894"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;windows&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="895"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>_CROSS_TARGET_SPIRV</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="896"><highlight class="normal"><sp/><sp/><sp/><sp/>platform_switch&lt;const<sp/>char<sp/>*&gt;(</highlight><highlight class="stringliteral">&quot;windows&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;android&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;nswitch&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="897"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>_CROSS_TARGET_C1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="898"><highlight class="normal"></highlight></codeline>
<codeline lineno="899"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>_CROSS_TARGET_C2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="900"><highlight class="normal"></highlight></codeline>
<codeline lineno="901"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="902"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&lt;invalid&gt;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="903"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="904"><highlight class="normal"><sp/><sp/><sp/><sp/>;</highlight></codeline>
<codeline lineno="905"><highlight class="normal"></highlight></codeline>
<codeline lineno="906"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>_TARGET_PC_LINUX<sp/>|<sp/>_TARGET_PC_MACOSX</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="907"><highlight class="normal"></highlight></codeline>
<codeline lineno="908"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>_TARGET_PC_LINUX<sp/>&amp;&amp;<sp/>!(_CROSS_TARGET_SPIRV<sp/>||<sp/>_CROSS_TARGET_EMPTY)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="909"><highlight class="normal"></highlight><highlight class="preprocessor">#error<sp/>Only<sp/>spirv<sp/>should<sp/>be<sp/>compiled<sp/>on<sp/>linux</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="910"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>_TARGET_PC_MACOSX<sp/>&amp;&amp;<sp/>!(_CROSS_TARGET_METAL<sp/>||<sp/>_CROSS_TARGET_SPIRV<sp/>||<sp/>_CROSS_TARGET_EMPTY)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="911"><highlight class="normal"></highlight><highlight class="preprocessor">#error<sp/>Only<sp/>metal<sp/>and<sp/>spirv<sp/>should<sp/>be<sp/>compiled<sp/>on<sp/>mac</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="912"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="913"><highlight class="normal"></highlight></codeline>
<codeline lineno="914"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>_TARGET_PC_LINUX</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="915"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*jamPlatform<sp/>=<sp/>platform_switch&lt;const<sp/>char<sp/>*&gt;(</highlight><highlight class="stringliteral">&quot;linux&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;android&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;nswitch&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="916"><highlight class="normal"><sp/><sp/>SET_ARCH_WITH_DEF(platform_switch(<ref refid="cppStcodePlatformInfo_8h_1a67d6bd111736197f5943a0493f1dbf05a840030b2e70cfe0155e29ee926dbd8ae" kindref="member">StcodeTargetArch::X86_64</ref>,<sp/><ref refid="cppStcodePlatformInfo_8h_1a67d6bd111736197f5943a0493f1dbf05aef7a7a2678567b43d0cf274d775979e0" kindref="member">StcodeTargetArch::ARM64_V8A</ref>,<sp/><ref refid="cppStcodePlatformInfo_8h_1a67d6bd111736197f5943a0493f1dbf05ab9b55c80d095761ac7757ced0fedadc4" kindref="member">StcodeTargetArch::ARM64</ref>));</highlight></codeline>
<codeline lineno="917"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="918"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>_CROSS_TARGET_METAL</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="919"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*jamPlatform<sp/>=<sp/>if_ios&lt;const<sp/>char<sp/>*&gt;(</highlight><highlight class="stringliteral">&quot;iOS&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;macOS&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="920"><highlight class="normal"><sp/><sp/>SET_ARCH_WITH_DEF(if_ios(<ref refid="cppStcodePlatformInfo_8h_1a67d6bd111736197f5943a0493f1dbf05ab9b55c80d095761ac7757ced0fedadc4" kindref="member">StcodeTargetArch::ARM64</ref>,<sp/><ref refid="cppStcodePlatformInfo_8h_1a67d6bd111736197f5943a0493f1dbf05a840030b2e70cfe0155e29ee926dbd8ae" kindref="member">StcodeTargetArch::X86_64</ref>));</highlight></codeline>
<codeline lineno="921"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="922"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*jamPlatform<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;android&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="923"><highlight class="normal"><sp/><sp/>SET_ARCH_WITH_DEF(<ref refid="cppStcodePlatformInfo_8h_1a67d6bd111736197f5943a0493f1dbf05aef7a7a2678567b43d0cf274d775979e0" kindref="member">StcodeTargetArch::ARM64_V8A</ref>);</highlight></codeline>
<codeline lineno="924"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="925"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="926"><highlight class="normal"></highlight></codeline>
<codeline lineno="927"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="928"><highlight class="normal"></highlight></codeline>
<codeline lineno="929"><highlight class="normal"><sp/><sp/>G_ASSERT(jamPlatform);</highlight></codeline>
<codeline lineno="930"><highlight class="normal"></highlight></codeline>
<codeline lineno="931"><highlight class="normal"><sp/><sp/>eastl::string<sp/>dynlibName<sp/>=<sp/>eastl::string{lib_name};</highlight></codeline>
<codeline lineno="932"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!arch_and_platform_is_fixed_for_shaders())</highlight></codeline>
<codeline lineno="933"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="934"><highlight class="normal"><sp/><sp/><sp/><sp/>dynlibName<sp/>+=<sp/></highlight><highlight class="stringliteral">&quot;-&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="935"><highlight class="normal"><sp/><sp/><sp/><sp/>dynlibName<sp/>+=<sp/>jamPlatform;</highlight></codeline>
<codeline lineno="936"><highlight class="normal"><sp/><sp/><sp/><sp/>dynlibName<sp/>+=<sp/></highlight><highlight class="stringliteral">&quot;-&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="937"><highlight class="normal"><sp/><sp/><sp/><sp/>dynlibName<sp/>+=<sp/>arch_name_for_dll_name(arch);</highlight></codeline>
<codeline lineno="938"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="939"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="namespaceshc_1a47efde6b3d493adbe2119a5593807d36" kindref="member">shc::config</ref>().cppStcodeCustomTag)</highlight></codeline>
<codeline lineno="940"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="941"><highlight class="normal"><sp/><sp/><sp/><sp/>dynlibName<sp/>+=<sp/></highlight><highlight class="stringliteral">&quot;-&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="942"><highlight class="normal"><sp/><sp/><sp/><sp/>dynlibName<sp/>+=<sp/><ref refid="namespaceshc_1a47efde6b3d493adbe2119a5593807d36" kindref="member">shc::config</ref>().<ref refid="structshc_1_1CompilerConfig_1aef6cca6053fcdbc18e78313ea087b981" kindref="member">cppStcodeCustomTag</ref>;</highlight></codeline>
<codeline lineno="943"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="944"><highlight class="normal"></highlight></codeline>
<codeline lineno="945"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>reduceTokens<sp/>=<sp/>[](</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;s)<sp/>{</highlight></codeline>
<codeline lineno="946"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>REDUCED_TOKEN_SIZE<sp/>=<sp/>2;</highlight></codeline>
<codeline lineno="947"><highlight class="normal"><sp/><sp/><sp/><sp/>eastl::string<sp/>out{};</highlight></codeline>
<codeline lineno="948"><highlight class="normal"><sp/><sp/><sp/><sp/>out.reserve(s.size());</highlight></codeline>
<codeline lineno="949"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>charStreak<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="950"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>c<sp/>:<sp/>s)</highlight></codeline>
<codeline lineno="951"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="952"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(c<sp/>&gt;=<sp/></highlight><highlight class="charliteral">&apos;a&apos;</highlight><highlight class="normal"><sp/>&amp;&amp;<sp/>c<sp/>&lt;=<sp/></highlight><highlight class="charliteral">&apos;z&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="953"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++charStreak;</highlight></codeline>
<codeline lineno="954"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="955"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>charStreak<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="956"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(charStreak<sp/>&lt;<sp/>REDUCED_TOKEN_SIZE)</highlight></codeline>
<codeline lineno="957"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>out.push_back(c);</highlight></codeline>
<codeline lineno="958"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="959"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>out;</highlight></codeline>
<codeline lineno="960"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="961"><highlight class="normal"></highlight></codeline>
<codeline lineno="962"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="963"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>makeHashedName<sp/>=<sp/>[](</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;s)<sp/>{</highlight></codeline>
<codeline lineno="964"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>uint64_t<sp/>hash<sp/>=<sp/>str_hash_fnv1&lt;64&gt;(s.c_str());</highlight></codeline>
<codeline lineno="965"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="commonUtils_8h_1a423a5cbb08af4695251ec87aa21a5fe1" kindref="member">string_f</ref>(</highlight><highlight class="stringliteral">&quot;stc.%llx&quot;</highlight><highlight class="normal">,<sp/>hash);</highlight></codeline>
<codeline lineno="966"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="967"><highlight class="normal"></highlight></codeline>
<codeline lineno="968"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>[baseDir,<sp/>targetRelNameBase]<sp/>=<sp/>split_by_lowest_dir(stcodeCacheRelPath.c_str(),<sp/>stcodeCacheRelPath.length());</highlight></codeline>
<codeline lineno="969"><highlight class="normal"><sp/><sp/><sp/><sp/>targetHashedRelPath<sp/>=<sp/>makeHashedName(targetRelNameBase);</highlight></codeline>
<codeline lineno="970"><highlight class="normal"></highlight></codeline>
<codeline lineno="971"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Verify<sp/>that<sp/>hashes<sp/>don&apos;t<sp/>collide<sp/>w/<sp/>an<sp/>on-disk<sp/>table</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="972"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>targetHashTablePath<sp/>=<sp/>rootRelPath<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;/&quot;</highlight><highlight class="normal"><sp/>+<sp/>baseDir<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;stcode_pathes_table.blk&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="973"><highlight class="normal"><sp/><sp/><sp/><sp/>DataBlock<sp/>hashedPathesTable{};</highlight></codeline>
<codeline lineno="974"><highlight class="normal"><sp/><sp/><sp/><sp/>hashedPathesTable.load(targetHashTablePath.c_str());<sp/></highlight><highlight class="comment">//<sp/>Ok<sp/>to<sp/>fail<sp/>here<sp/>--<sp/>then<sp/>we<sp/>just<sp/>create.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="975"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal"><sp/>=<sp/>hashedPathesTable.findParam(targetHashedRelPath.c_str());<sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal"><sp/>!=<sp/>-1)</highlight></codeline>
<codeline lineno="976"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="977"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="commonUtils_8h_1a421e5f914841061096ef1977d1501b32" kindref="member">streq</ref>(hashedPathesTable.getStr(</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">),<sp/>targetRelNameBase.c_str()))</highlight></codeline>
<codeline lineno="978"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="979"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="shLog_8cpp_1a2926179632c7c86265007652d3d30b14" kindref="member">sh_debug</ref>(<ref refid="shLog_8h_1a66042048eb3ce30a1dccb2ebf8c2fd5caae3b70b41400c8a36e8a094ac1dbe43c" kindref="member">SHLOG_ERROR</ref>,</highlight></codeline>
<codeline lineno="980"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Stcode<sp/>name<sp/>hashing<sp/>collision<sp/>(%s,<sp/>%s)<sp/>-&gt;<sp/>%s.<sp/>Change<sp/>the<sp/>name<sp/>or<sp/>remove<sp/>outdated<sp/>entries<sp/>from<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="981"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;*output-dir*/stcode_pathes_table.blk&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="982"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>targetRelNameBase.c_str(),<sp/>hashedPathesTable.getStr(</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">),<sp/>targetHashedRelPath.c_str());</highlight></codeline>
<codeline lineno="983"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="984"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="985"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="986"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>hashedPathesTable.addStr(targetHashedRelPath.c_str(),<sp/>targetRelNameBase.c_str());</highlight></codeline>
<codeline lineno="987"><highlight class="normal"></highlight></codeline>
<codeline lineno="988"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!hashedPathesTable.saveToTextFile(targetHashTablePath.c_str()))</highlight></codeline>
<codeline lineno="989"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="shLog_8cpp_1a2926179632c7c86265007652d3d30b14" kindref="member">sh_debug</ref>(<ref refid="shLog_8h_1a66042048eb3ce30a1dccb2ebf8c2fd5caae3b70b41400c8a36e8a094ac1dbe43c" kindref="member">SHLOG_ERROR</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>save<sp/>stcode<sp/>path<sp/>hash<sp/>table<sp/>to<sp/>%s&quot;</highlight><highlight class="normal">,<sp/>targetHashTablePath.c_str());</highlight></codeline>
<codeline lineno="990"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="991"><highlight class="normal"></highlight></codeline>
<codeline lineno="992"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="993"><highlight class="normal"><sp/><sp/><sp/><sp/>String<sp/>libCodeNameBase{lib_name};<sp/></highlight><highlight class="comment">//<sp/>Not<sp/>dynLibName,<sp/>cause<sp/>we<sp/>don&apos;t<sp/>need<sp/>to<sp/>encode<sp/>platform/arch<sp/>in<sp/>lib<sp/>code<sp/>name</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="994"><highlight class="normal"><sp/><sp/><sp/><sp/>libCodeNameBase.replace(</highlight><highlight class="stringliteral">&quot;-stcode&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="995"><highlight class="normal"><sp/><sp/><sp/><sp/>libCodeNameBase.replace(</highlight><highlight class="stringliteral">&quot;ps&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="996"><highlight class="normal"><sp/><sp/><sp/><sp/>libCodeName<sp/>=<sp/>reduceTokens(libCodeNameBase);</highlight></codeline>
<codeline lineno="997"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="998"><highlight class="normal"></highlight></codeline>
<codeline lineno="999"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*customCppOpts<sp/>=<sp/><ref refid="namespaceshc_1a47efde6b3d493adbe2119a5593807d36" kindref="member">shc::config</ref>().<ref refid="structshc_1_1CompilerConfig_1aeaf859650958d09e284d5915a2cccebc" kindref="member">cppStcodeUnityBuild</ref><sp/>?<sp/></highlight><highlight class="stringliteral">&quot;-DROUTINE_VISIBILITY=static&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;-DROUTINE_VISIBILITY=extern&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1000"><highlight class="normal"></highlight></codeline>
<codeline lineno="1001"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>eastl::string<sp/>jamPath{eastl::string::CtorSprintf{},<sp/></highlight><highlight class="stringliteral">&quot;%s/jamfile&quot;</highlight><highlight class="normal">,<sp/>stcodeDir.c_str()};</highlight></codeline>
<codeline lineno="1002"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>eastl::string<sp/>blkHashHeader<sp/>=<sp/>make_header_from_blk_hash&lt;JAMFILE_HEADER_LEN,<sp/>JAMFILE_HEADER_FMT&gt;(comp.<ref refid="classShCompilationInfo_1a51ba987b41b2c9fdbe000567104f2e26" kindref="member">targetBlkHash</ref>());</highlight></codeline>
<codeline lineno="1003"><highlight class="normal"></highlight></codeline>
<codeline lineno="1004"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>eastl::string<sp/>jamContent{eastl::string::CtorSprintf{},<sp/>jamTemplate,<sp/>blkHashHeader.c_str(),<sp/>rootRelPath.c_str(),</highlight></codeline>
<codeline lineno="1005"><highlight class="normal"><sp/><sp/><sp/><sp/>stcodeRelPath.c_str(),<sp/>outDirRelPath.c_str(),<sp/>targetHashedRelPath.c_str(),<sp/>dynlibName.c_str(),<sp/>extension,<sp/>libCodeName.c_str(),</highlight></codeline>
<codeline lineno="1006"><highlight class="normal"><sp/><sp/><sp/><sp/>sourcesList.c_str(),<sp/>customCppOpts};</highlight></codeline>
<codeline lineno="1007"><highlight class="normal"><sp/><sp/>write_file(jamPath.c_str(),<sp/>jamContent.c_str(),<sp/>jamContent.length());</highlight></codeline>
<codeline lineno="1008"><highlight class="normal"></highlight></codeline>
<codeline lineno="1009"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*targetType<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;dll&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1010"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="namespaceshc_1a47efde6b3d493adbe2119a5593807d36" kindref="member">config</ref><sp/>=<sp/>config_to_name(<ref refid="namespaceshc_1a47efde6b3d493adbe2119a5593807d36" kindref="member">shc::config</ref>().cppStcodeCompConfig);</highlight></codeline>
<codeline lineno="1011"><highlight class="normal"></highlight></codeline>
<codeline lineno="1012"><highlight class="normal"><sp/><sp/><ref refid="structproc_1_1ProcessTask" kindref="compound">proc::ProcessTask</ref><sp/>task{};</highlight></codeline>
<codeline lineno="1013"><highlight class="normal"><sp/><sp/>task.<ref refid="structproc_1_1ProcessTask_1a54d7e4664a9712deb15a202d14e60f97" kindref="member">isExternal</ref><sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1014"><highlight class="normal"></highlight></codeline>
<codeline lineno="1015"><highlight class="normal"><sp/><sp/>task.onSuccess<sp/>=<sp/>[dynlibName,<sp/>outDir<sp/>=<sp/>eastl::string{out_dir}]<sp/>{</highlight></codeline>
<codeline lineno="1016"><highlight class="normal"><sp/><sp/><sp/><sp/>cleanup_after_stcode_compilation(outDir.c_str(),<sp/>dynlibName.c_str());</highlight></codeline>
<codeline lineno="1017"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="1018"><highlight class="normal"></highlight></codeline>
<codeline lineno="1019"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>_TARGET_PC_WIN</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1020"><highlight class="normal"></highlight></codeline>
<codeline lineno="1021"><highlight class="normal"><sp/><sp/>eastl::string<sp/>stcodeDirWin<sp/>=<sp/>stcodeDir;</highlight></codeline>
<codeline lineno="1022"><highlight class="normal"><sp/><sp/>replace_char(stcodeDirWin.data(),<sp/>stcodeDirWin.length(),<sp/></highlight><highlight class="charliteral">&apos;/&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;\\&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1023"><highlight class="normal"></highlight></codeline>
<codeline lineno="1024"><highlight class="normal"><sp/><sp/>task.argv.emplace_back(</highlight><highlight class="stringliteral">&quot;C:\\windows\\system32\\cmd.exe&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1025"><highlight class="normal"><sp/><sp/>task.argv.emplace_back(</highlight><highlight class="stringliteral">&quot;/c&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1026"><highlight class="normal"><sp/><sp/>task.argv.emplace_back(</highlight><highlight class="stringliteral">&quot;jam.exe&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1027"><highlight class="normal"><sp/><sp/>task.argv.push_back(<ref refid="commonUtils_8h_1a423a5cbb08af4695251ec87aa21a5fe1" kindref="member">string_f</ref>(</highlight><highlight class="stringliteral">&quot;-sPlatform=%s&quot;</highlight><highlight class="normal">,<sp/>jamPlatform));</highlight></codeline>
<codeline lineno="1028"><highlight class="normal"><sp/><sp/>task.argv.push_back(<ref refid="commonUtils_8h_1a423a5cbb08af4695251ec87aa21a5fe1" kindref="member">string_f</ref>(</highlight><highlight class="stringliteral">&quot;-sPlatformArch=%s&quot;</highlight><highlight class="normal">,<sp/>arch_name(arch)));</highlight></codeline>
<codeline lineno="1029"><highlight class="normal"><sp/><sp/>task.argv.push_back(<ref refid="commonUtils_8h_1a423a5cbb08af4695251ec87aa21a5fe1" kindref="member">string_f</ref>(</highlight><highlight class="stringliteral">&quot;-sTargetType=%s&quot;</highlight><highlight class="normal">,<sp/>targetType));</highlight></codeline>
<codeline lineno="1030"><highlight class="normal"><sp/><sp/>task.argv.push_back(<ref refid="commonUtils_8h_1a423a5cbb08af4695251ec87aa21a5fe1" kindref="member">string_f</ref>(</highlight><highlight class="stringliteral">&quot;-sConfig=%s&quot;</highlight><highlight class="normal">,<sp/>config));</highlight></codeline>
<codeline lineno="1031"><highlight class="normal"><sp/><sp/>task.argv.emplace_back(</highlight><highlight class="stringliteral">&quot;-f&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1032"><highlight class="normal"><sp/><sp/>task.argv.push_back(<ref refid="commonUtils_8h_1a423a5cbb08af4695251ec87aa21a5fe1" kindref="member">string_f</ref>(</highlight><highlight class="stringliteral">&quot;%s\\jamfile&quot;</highlight><highlight class="normal">,<sp/>stcodeDirWin.c_str()));</highlight></codeline>
<codeline lineno="1033"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!versionsMatch)</highlight></codeline>
<codeline lineno="1034"><highlight class="normal"><sp/><sp/><sp/><sp/>task.argv.emplace_back(</highlight><highlight class="stringliteral">&quot;-a&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1035"><highlight class="normal"></highlight></codeline>
<codeline lineno="1036"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>_TARGET_PC_LINUX<sp/>||<sp/>_TARGET_PC_MACOSX</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1037"><highlight class="normal"></highlight></codeline>
<codeline lineno="1038"><highlight class="normal"><sp/><sp/>task.argv.emplace_back(</highlight><highlight class="stringliteral">&quot;jam&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1039"><highlight class="normal"><sp/><sp/>task.argv.push_back(<ref refid="commonUtils_8h_1a423a5cbb08af4695251ec87aa21a5fe1" kindref="member">string_f</ref>(</highlight><highlight class="stringliteral">&quot;-sPlatform=%s&quot;</highlight><highlight class="normal">,<sp/>jamPlatform));</highlight></codeline>
<codeline lineno="1040"><highlight class="normal"><sp/><sp/>task.argv.push_back(<ref refid="commonUtils_8h_1a423a5cbb08af4695251ec87aa21a5fe1" kindref="member">string_f</ref>(</highlight><highlight class="stringliteral">&quot;-sPlatformArch=%s&quot;</highlight><highlight class="normal">,<sp/>arch_name(arch)));</highlight></codeline>
<codeline lineno="1041"><highlight class="normal"><sp/><sp/>task.argv.push_back(<ref refid="commonUtils_8h_1a423a5cbb08af4695251ec87aa21a5fe1" kindref="member">string_f</ref>(</highlight><highlight class="stringliteral">&quot;-sTargetType=%s&quot;</highlight><highlight class="normal">,<sp/>targetType));</highlight></codeline>
<codeline lineno="1042"><highlight class="normal"><sp/><sp/>task.argv.push_back(<ref refid="commonUtils_8h_1a423a5cbb08af4695251ec87aa21a5fe1" kindref="member">string_f</ref>(</highlight><highlight class="stringliteral">&quot;-sConfig=%s&quot;</highlight><highlight class="normal">,<sp/>config));</highlight></codeline>
<codeline lineno="1043"><highlight class="normal"><sp/><sp/>task.argv.emplace_back(</highlight><highlight class="stringliteral">&quot;-f&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1044"><highlight class="normal"><sp/><sp/>task.argv.push_back(<ref refid="commonUtils_8h_1a423a5cbb08af4695251ec87aa21a5fe1" kindref="member">string_f</ref>(</highlight><highlight class="stringliteral">&quot;%s/jamfile&quot;</highlight><highlight class="normal">,<sp/>stcodeDir.c_str()));</highlight></codeline>
<codeline lineno="1045"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!versionsMatch)</highlight></codeline>
<codeline lineno="1046"><highlight class="normal"><sp/><sp/><sp/><sp/>task.argv.emplace_back(</highlight><highlight class="stringliteral">&quot;-a&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1047"><highlight class="normal"></highlight></codeline>
<codeline lineno="1048"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>_TARGET_PC_MACOSX<sp/>&amp;&amp;<sp/>_CROSS_TARGET_METAL</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1049"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(is_ios())</highlight></codeline>
<codeline lineno="1050"><highlight class="normal"><sp/><sp/><sp/><sp/>task.argv.push_back(eastl::string(</highlight><highlight class="stringliteral">&quot;-sBuildAsFramework=yes&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1051"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1052"><highlight class="normal"></highlight></codeline>
<codeline lineno="1053"><highlight class="normal"></highlight><highlight class="preprocessor">#else<sp/></highlight><highlight class="comment">//<sp/>Stub</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1054"><highlight class="normal"></highlight></codeline>
<codeline lineno="1055"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>dag::Unexpected(<ref refid="cppStcode_8h_1a5f7b70083bba8ebd323206f2f7cf2bcea055c1a591abb0e8cd86dc969727bcc0b" kindref="member">StcodeMakeTaskError::DISABLED</ref>);</highlight></codeline>
<codeline lineno="1056"><highlight class="normal"></highlight></codeline>
<codeline lineno="1057"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1058"><highlight class="normal"></highlight></codeline>
<codeline lineno="1059"><highlight class="normal"></highlight><highlight class="preprocessor">#undef<sp/>VERIFY_AND_SET_ARCH</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1060"><highlight class="normal"></highlight><highlight class="preprocessor">#undef<sp/>SET_ARCH_WITH_DEF</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1061"><highlight class="normal"></highlight></codeline>
<codeline lineno="1062"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>task;</highlight></codeline>
<codeline lineno="1063"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="cppStcode.cpp"/>
  </compounddef>
</doxygen>
