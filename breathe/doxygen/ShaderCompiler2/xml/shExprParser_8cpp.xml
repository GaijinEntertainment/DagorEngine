<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.7" xml:lang="en-US">
  <compounddef id="shExprParser_8cpp" kind="file" language="C++">
    <compoundname>shExprParser.cpp</compoundname>
    <includes refid="shExprParser_8h" local="yes">shExprParser.h</includes>
    <includes refid="shaderSemantic_8h" local="yes">shaderSemantic.h</includes>
    <includes refid="cppStcodeAssembly_8h" local="yes">cppStcodeAssembly.h</includes>
    <includes refid="cppStcodeUtils_8h" local="yes">cppStcodeUtils.h</includes>
    <includes refid="variantAssembly_8h" local="yes">variantAssembly.h</includes>
    <includes refid="shErrorReporting_8h" local="yes">shErrorReporting.h</includes>
    <includes refid="varMap_8h" local="yes">varMap.h</includes>
    <includes refid="shcode_8h" local="yes">shcode.h</includes>
    <includes refid="semUtils_8h" local="yes">semUtils.h</includes>
    <includes local="no">debug/dag_debug.h</includes>
    <includes refid="shLog_8h" local="yes">shLog.h</includes>
    <includes refid="assemblyShader_8h" local="yes">assemblyShader.h</includes>
    <includes local="no">shaders/shFunc.h</includes>
    <includes refid="globVar_8h" local="yes">globVar.h</includes>
    <includes local="no">shaders/shOpcodeFormat.h</includes>
    <includes local="no">shaders/shOpcode.h</includes>
    <incdepgraph>
      <node id="90">
        <label>DebugLevel.h</label>
        <link refid="DebugLevel_8h"/>
        <childnode refid="35" relation="include">
        </childnode>
      </node>
      <node id="111">
        <label>assemblyShader.h</label>
        <link refid="assemblyShader_8h"/>
      </node>
      <node id="47">
        <label>blkHash.h</label>
        <link refid="blkHash_8h"/>
      </node>
      <node id="83">
        <label>boolVar.h</label>
        <link refid="boolVar_8h"/>
        <childnode refid="64" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="43" relation="include">
        </childnode>
      </node>
      <node id="106">
        <label>codeBlocks.h</label>
        <link refid="codeBlocks_8h"/>
        <childnode refid="99" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>commonUtils.h</label>
        <link refid="commonUtils_8h"/>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
      </node>
      <node id="75">
        <label>compileResult.h</label>
        <link refid="compileResult_8h"/>
        <childnode refid="76" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
      </node>
      <node id="72">
        <label>const3d.h</label>
        <link refid="const3d_8h"/>
        <childnode refid="41" relation="include">
        </childnode>
      </node>
      <node id="14">
        <label>cppStcode.h</label>
        <link refid="cppStcode_8h"/>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="45" relation="include">
        </childnode>
        <childnode refid="47" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="44" relation="include">
        </childnode>
      </node>
      <node id="15">
        <label>cppStcodeAssembly.h</label>
        <link refid="cppStcodeAssembly_8h"/>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
        <childnode refid="38" relation="include">
        </childnode>
        <childnode refid="39" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
        <childnode refid="41" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="43" relation="include">
        </childnode>
        <childnode refid="44" relation="include">
        </childnode>
      </node>
      <node id="16">
        <label>cppStcodeBuilder.h</label>
        <link refid="cppStcodeBuilder_8h"/>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
      </node>
      <node id="91">
        <label>cppStcodePlatformInfo.h</label>
        <link refid="cppStcodePlatformInfo_8h"/>
        <childnode refid="35" relation="include">
        </childnode>
      </node>
      <node id="66">
        <label>cppStcodeUtils.h</label>
        <link refid="cppStcodeUtils_8h"/>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="38" relation="include">
        </childnode>
        <childnode refid="39" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="67" relation="include">
        </childnode>
      </node>
      <node id="54">
        <label>globVar.h</label>
        <link refid="globVar_8h"/>
        <childnode refid="55" relation="include">
        </childnode>
        <childnode refid="56" relation="include">
        </childnode>
        <childnode refid="48" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="57" relation="include">
        </childnode>
        <childnode refid="58" relation="include">
        </childnode>
        <childnode refid="59" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="60" relation="include">
        </childnode>
        <childnode refid="61" relation="include">
        </childnode>
      </node>
      <node id="89">
        <label>globalConfig.h</label>
        <link refid="globalConfig_8h"/>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="90" relation="include">
        </childnode>
        <childnode refid="91" relation="include">
        </childnode>
        <childnode refid="51" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="43" relation="include">
        </childnode>
      </node>
      <node id="27">
        <label>hash.h</label>
        <link refid="hash_8h"/>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
      </node>
      <node id="52">
        <label>hashStrings.h</label>
        <link refid="hashStrings_8h"/>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="48" relation="include">
        </childnode>
        <childnode refid="53" relation="include">
        </childnode>
        <childnode refid="43" relation="include">
        </childnode>
      </node>
      <node id="30">
        <label>hlslRegisters.h</label>
        <link refid="hlslRegisters_8h"/>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
      </node>
      <node id="71">
        <label>hlslStage.h</label>
        <link refid="hlslStage_8h"/>
        <childnode refid="72" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="73" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="74" relation="include">
        </childnode>
      </node>
      <node id="50">
        <label>hwAssembly.h</label>
        <link refid="hwAssembly_8h"/>
        <childnode refid="12" relation="include">
        </childnode>
      </node>
      <node id="61">
        <label>intervals.h</label>
        <link refid="intervals_8h"/>
      </node>
      <node id="20">
        <label>nameMap.h</label>
        <link refid="nameMap_8h"/>
        <childnode refid="21" relation="include">
        </childnode>
      </node>
      <node id="84">
        <label>namedConst.h</label>
        <link refid="namedConst_8h"/>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="85" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="89" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="48" relation="include">
        </childnode>
        <childnode refid="92" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
      </node>
      <node id="45">
        <label>processes.h</label>
        <link refid="processes_8h"/>
        <childnode refid="46" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
      </node>
      <node id="62">
        <label>samplers.h</label>
        <link refid="samplers_8h"/>
        <childnode refid="63" relation="include">
        </childnode>
        <childnode refid="64" relation="include">
        </childnode>
        <childnode refid="54" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="58" relation="include">
        </childnode>
        <childnode refid="43" relation="include">
        </childnode>
      </node>
      <node id="110">
        <label>semUtils.h</label>
        <link refid="semUtils_8h"/>
      </node>
      <node id="93">
        <label>shAssumes.h</label>
        <link refid="shAssumes_8h"/>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="61" relation="include">
        </childnode>
        <childnode refid="64" relation="include">
        </childnode>
        <childnode refid="51" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="43" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>shCompContext.h</label>
        <link refid="shCompContext_8h"/>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="50" relation="include">
        </childnode>
        <childnode refid="51" relation="include">
        </childnode>
      </node>
      <node id="7">
        <label>shCompilationInfo.h</label>
        <link refid="shCompilationInfo_8h"/>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="47" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="48" relation="include">
        </childnode>
        <childnode refid="49" relation="include">
        </childnode>
      </node>
      <node id="80">
        <label>shErrorReporting.h</label>
        <link refid="shErrorReporting_8h"/>
        <childnode refid="63" relation="include">
        </childnode>
        <childnode refid="64" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="109">
        <label>shExpr.h</label>
        <link refid="shExpr_8h"/>
      </node>
      <node id="1">
        <label>shExprParser.cpp</label>
        <link refid="shExprParser_8cpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="66" relation="include">
        </childnode>
        <childnode refid="107" relation="include">
        </childnode>
        <childnode refid="80" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="95" relation="include">
        </childnode>
        <childnode refid="110" relation="include">
        </childnode>
        <childnode refid="81" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="111" relation="include">
        </childnode>
        <childnode refid="39" relation="include">
        </childnode>
        <childnode refid="54" relation="include">
        </childnode>
        <childnode refid="112" relation="include">
        </childnode>
        <childnode refid="113" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>shExprParser.h</label>
        <link refid="shExprParser_8h"/>
      </node>
      <node id="104">
        <label>shLocVar.h</label>
        <link refid="shLocVar_8h"/>
      </node>
      <node id="31">
        <label>shLog.h</label>
        <link refid="shLog_8h"/>
      </node>
      <node id="65">
        <label>shMacro.h</label>
        <link refid="shMacro_8h"/>
      </node>
      <node id="101">
        <label>shMessages.h</label>
        <link refid="shMessages_8h"/>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="88" relation="include">
        </childnode>
      </node>
      <node id="102">
        <label>shSemCode.h</label>
        <link refid="shSemCode_8h"/>
      </node>
      <node id="4">
        <label>shShaderContext.h</label>
        <link refid="shShaderContext_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="83" relation="include">
        </childnode>
        <childnode refid="94" relation="include">
        </childnode>
        <childnode refid="93" relation="include">
        </childnode>
        <childnode refid="95" relation="include">
        </childnode>
        <childnode refid="99" relation="include">
        </childnode>
        <childnode refid="101" relation="include">
        </childnode>
        <childnode refid="97" relation="include">
        </childnode>
        <childnode refid="102" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>shTargetContext.h</label>
        <link refid="shTargetContext_8h"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="52" relation="include">
        </childnode>
        <childnode refid="54" relation="include">
        </childnode>
        <childnode refid="62" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="66" relation="include">
        </childnode>
        <childnode refid="64" relation="include">
        </childnode>
        <childnode refid="68" relation="include">
        </childnode>
        <childnode refid="70" relation="include">
        </childnode>
        <childnode refid="79" relation="include">
        </childnode>
        <childnode refid="83" relation="include">
        </childnode>
        <childnode refid="71" relation="include">
        </childnode>
        <childnode refid="84" relation="include">
        </childnode>
        <childnode refid="93" relation="include">
        </childnode>
        <childnode refid="89" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
      </node>
      <node id="68">
        <label>shTargetStorage.h</label>
        <link refid="shTargetStorage_8h"/>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="69" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
        <childnode refid="44" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
      </node>
      <node id="100">
        <label>shVarBool.h</label>
        <link refid="shVarBool_8h"/>
      </node>
      <node id="60">
        <label>shVarVecTypes.h</label>
        <link refid="shVarVecTypes_8h"/>
      </node>
      <node id="103">
        <label>shVariantContext.h</label>
        <link refid="shVariantContext_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="102" relation="include">
        </childnode>
        <childnode refid="83" relation="include">
        </childnode>
        <childnode refid="104" relation="include">
        </childnode>
        <childnode refid="105" relation="include">
        </childnode>
      </node>
      <node id="70">
        <label>shaderBytecodeCache.h</label>
        <link refid="shaderBytecodeCache_8h"/>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="71" relation="include">
        </childnode>
        <childnode refid="75" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="77" relation="include">
        </childnode>
        <childnode refid="48" relation="include">
        </childnode>
        <childnode refid="78" relation="include">
        </childnode>
      </node>
      <node id="18">
        <label>shaderSave.h</label>
        <link refid="shaderSave_8h"/>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>shaderSemantic.h</label>
        <link refid="shaderSemantic_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="103" relation="include">
        </childnode>
        <childnode refid="80" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="106" relation="include">
        </childnode>
        <childnode refid="99" relation="include">
        </childnode>
      </node>
      <node id="17">
        <label>shaderTab.h</label>
        <link refid="shaderTab_8h"/>
        <childnode refid="18" relation="include">
        </childnode>
      </node>
      <node id="97">
        <label>shaderVariant.h</label>
        <link refid="shaderVariant_8h"/>
        <childnode refid="61" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="81" relation="include">
        </childnode>
        <childnode refid="59" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="53" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
      </node>
      <node id="94">
        <label>shaderVariantSrc.h</label>
        <link refid="shaderVariantSrc_8h"/>
      </node>
      <node id="95">
        <label>shcode.h</label>
        <link refid="shcode_8h"/>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="53" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="96" relation="include">
        </childnode>
        <childnode refid="55" relation="include">
        </childnode>
        <childnode refid="56" relation="include">
        </childnode>
        <childnode refid="88" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="97" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="84" relation="include">
        </childnode>
        <childnode refid="98" relation="include">
        </childnode>
        <childnode refid="60" relation="include">
        </childnode>
      </node>
      <node id="64">
        <label>shlexterm.h</label>
        <link refid="shlexterm_8h"/>
        <childnode refid="63" relation="include">
        </childnode>
        <childnode refid="65" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="99">
        <label>shsem.h</label>
        <link refid="shsem_8h"/>
        <childnode refid="63" relation="include">
        </childnode>
        <childnode refid="64" relation="include">
        </childnode>
        <childnode refid="100" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="78" relation="include">
        </childnode>
      </node>
      <node id="79">
        <label>stcodeBytecode.h</label>
        <link refid="stcodeBytecode_8h"/>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="80" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
        <childnode refid="81" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
        <childnode refid="82" relation="include">
        </childnode>
      </node>
      <node id="19">
        <label>varMap.h</label>
        <link refid="varMap_8h"/>
        <childnode refid="20" relation="include">
        </childnode>
      </node>
      <node id="59">
        <label>varTypes.h</label>
        <link refid="varTypes_8h"/>
      </node>
      <node id="85">
        <label>variablesMerger.h</label>
        <link refid="variablesMerger_8h"/>
        <childnode refid="63" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="41" relation="include">
        </childnode>
        <childnode refid="76" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
        <childnode refid="86" relation="include">
        </childnode>
        <childnode refid="87" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="88" relation="include">
        </childnode>
      </node>
      <node id="107">
        <label>variantAssembly.h</label>
        <link refid="variantAssembly_8h"/>
        <childnode refid="103" relation="include">
        </childnode>
        <childnode refid="108" relation="include">
        </childnode>
        <childnode refid="109" relation="include">
        </childnode>
      </node>
      <node id="108">
        <label>variantSemantic.h</label>
        <link refid="variantSemantic_8h"/>
        <childnode refid="103" relation="include">
        </childnode>
      </node>
      <node id="57">
        <label>3d/dag_texMgr.h</label>
      </node>
      <node id="26">
        <label>EASTL/algorithm.h</label>
      </node>
      <node id="34">
        <label>EASTL/array.h</label>
      </node>
      <node id="88">
        <label>EASTL/bitvector.h</label>
      </node>
      <node id="86">
        <label>EASTL/fixed_vector.h</label>
      </node>
      <node id="87">
        <label>EASTL/map.h</label>
      </node>
      <node id="13">
        <label>EASTL/optional.h</label>
      </node>
      <node id="12">
        <label>EASTL/string.h</label>
      </node>
      <node id="67">
        <label>EASTL/string_view.h</label>
      </node>
      <node id="73">
        <label>EASTL/type_traits.h</label>
      </node>
      <node id="42">
        <label>EASTL/unique_ptr.h</label>
      </node>
      <node id="76">
        <label>EASTL/vector.h</label>
      </node>
      <node id="82">
        <label>EASTL/vector_map.h</label>
      </node>
      <node id="92">
        <label>EASTL/vector_set.h</label>
      </node>
      <node id="35">
        <label>cstdint</label>
      </node>
      <node id="29">
        <label>cstring</label>
      </node>
      <node id="25">
        <label>dag/dag_vector.h</label>
      </node>
      <node id="24">
        <label>debug/dag_assert.h</label>
      </node>
      <node id="81">
        <label>debug/dag_debug.h</label>
      </node>
      <node id="41">
        <label>drv/3d/dag_consts.h</label>
      </node>
      <node id="69">
        <label>drv/3d/dag_renderStates.h</label>
      </node>
      <node id="58">
        <label>drv/3d/dag_sampler.h</label>
      </node>
      <node id="32">
        <label>generic/dag_enumerate.h</label>
      </node>
      <node id="33">
        <label>generic/dag_expected.h</label>
      </node>
      <node id="46">
        <label>generic/dag_fixedMoveOnlyFunction.h</label>
      </node>
      <node id="96">
        <label>generic/dag_smallTab.h</label>
      </node>
      <node id="22">
        <label>generic/dag_tab.h</label>
      </node>
      <node id="28">
        <label>hash/BLAKE3/blake3.h</label>
      </node>
      <node id="51">
        <label>ioSys/dag_dataBlock.h</label>
      </node>
      <node id="55">
        <label>math/dag_color.h</label>
      </node>
      <node id="56">
        <label>math/integer/dag_IPoint4.h</label>
      </node>
      <node id="74">
        <label>memory</label>
      </node>
      <node id="37">
        <label>memory/dag_mem.h</label>
      </node>
      <node id="77">
        <label>memory/dag_memBase.h</label>
      </node>
      <node id="105">
        <label>memory/dag_regionMemAlloc.h</label>
      </node>
      <node id="98">
        <label>shaders/dag_shaderCommon.h</label>
      </node>
      <node id="40">
        <label>shaders/dag_shaderVarType.h</label>
      </node>
      <node id="49">
        <label>shaders/dag_shaders.h</label>
      </node>
      <node id="38">
        <label>shaders/shExprTypes.h</label>
      </node>
      <node id="39">
        <label>shaders/shFunc.h</label>
      </node>
      <node id="113">
        <label>shaders/shOpcode.h</label>
      </node>
      <node id="112">
        <label>shaders/shOpcodeFormat.h</label>
      </node>
      <node id="44">
        <label>shaders/shader_layout.h</label>
      </node>
      <node id="36">
        <label>shaders/slotTexturesRange.h</label>
      </node>
      <node id="63">
        <label>shsyn.h</label>
      </node>
      <node id="43">
        <label>ska_hash_map/flat_hash_map2.hpp</label>
      </node>
      <node id="23">
        <label>util/dag_bindump_ext.h</label>
      </node>
      <node id="11">
        <label>util/dag_globDef.h</label>
      </node>
      <node id="21">
        <label>util/dag_oaHashNameMap.h</label>
      </node>
      <node id="10">
        <label>util/dag_safeArg.h</label>
      </node>
      <node id="78">
        <label>util/dag_simpleString.h</label>
      </node>
      <node id="53">
        <label>util/dag_stdint.h</label>
      </node>
      <node id="48">
        <label>util/dag_string.h</label>
      </node>
      <node id="9">
        <label>utility</label>
      </node>
    </incdepgraph>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/>Copyright<sp/>(C)<sp/>Gaijin<sp/>Games<sp/>KFT.<sp/><sp/>All<sp/>rights<sp/>reserved.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="shExprParser_8h" kindref="compound">shExprParser.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="shaderSemantic_8h" kindref="compound">shaderSemantic.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="cppStcodeAssembly_8h" kindref="compound">cppStcodeAssembly.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="cppStcodeUtils_8h" kindref="compound">cppStcodeUtils.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="variantAssembly_8h" kindref="compound">variantAssembly.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="shErrorReporting_8h" kindref="compound">shErrorReporting.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="varMap_8h" kindref="compound">varMap.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="shcode_8h" kindref="compound">shcode.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="semUtils_8h" kindref="compound">semUtils.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;debug/dag_debug.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="shLog_8h" kindref="compound">shLog.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="assemblyShader_8h" kindref="compound">assemblyShader.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;shaders/shFunc.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="globVar_8h" kindref="compound">globVar.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;shaders/shOpcodeFormat.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;shaders/shOpcode.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal"><ref refid="namespaceShaderParser" kindref="compound">ShaderParser</ref>;</highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal"><ref refid="namespaceShaderTerminal" kindref="compound">ShaderTerminal</ref>;</highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="comment">/*********************************</highlight></codeline>
<codeline lineno="25"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="26"><highlight class="comment"><sp/>*<sp/>class<sp/>ExpressionParser</highlight></codeline>
<codeline lineno="27"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="28"><highlight class="comment"><sp/>*********************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="comment">//<sp/>ctor/dtor</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"><ref refid="classShaderParser_1_1ExpressionParser_1aec9f396458f409a27c66b9b208e07f1d" kindref="member">ExpressionParser::ExpressionParser</ref>(<ref refid="classshc_1_1VariantContext" kindref="compound">shc::VariantContext</ref><sp/>&amp;ctx)<sp/>:<sp/>variantCtx{&amp;ctx},<sp/>parser{ctx.tgtCtx().sourceParseState().parser}<sp/>{}</highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="comment">//<sp/>parse<sp/>expression<sp/>-<sp/>*<sp/>and<sp/>/<sp/>operators<sp/>or<sp/>single<sp/>expression</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>ExpressionParser::parseSubExpression(ShaderTerminal::arithmetic_expr_md<sp/>&amp;s,<sp/><ref refid="classShaderParser_1_1ComplexExpression" kindref="compound">ComplexExpression</ref><sp/>*e,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Context<sp/>&amp;ctx)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="34"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/>G_ASSERT(e);</highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>parse<sp/>left<sp/>operand</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/>G_ASSERT(s.lhs);</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!parseOperand(*s.lhs,<sp/>shexpr::OPER_LEFT,<sp/>e,<sp/>ctx))</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!s.rhs.empty()<sp/>&amp;&amp;<sp/>ctx.destIsInteger)<sp/></highlight><highlight class="comment">//<sp/>@TODO:<sp/>remove<sp/>when<sp/>int<sp/>arithmetic<sp/>is<sp/>implemented</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="shErrorReporting_8h_1a634f6d6ca9a9f22c5eea4c9b8e20ef31" kindref="member">report_error</ref>(parser,<sp/>ctx.destTerm,<sp/></highlight><highlight class="stringliteral">&quot;Integer<sp/>arithmetic<sp/>is<sp/>not<sp/>supported<sp/>(in<sp/>expressions<sp/>for<sp/>local<sp/>int#<sp/>vars<sp/>and<sp/>@i#<sp/>constants)&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>parse<sp/>right<sp/>operands</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>s.rhs.size();<sp/>i++)</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>parse<sp/>operator</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/>G_ASSERT(s.op[i]);</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/>shexpr::BinaryOperator<sp/>opType;</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(s.op[i]-&gt;num)</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>SHADER_TOKENS::SHTOK_mul:<sp/>opType<sp/>=<sp/>shexpr::OP_MUL;<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>SHADER_TOKENS::SHTOK_div:<sp/>opType<sp/>=<sp/>shexpr::OP_DIV;<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:<sp/>G_ASSERT(0);</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/>e-&gt;<ref refid="classShaderParser_1_1ComplexExpression_1a4e909ce00fe124c5200e02e48e2bd41c" kindref="member">setLastBinOp</ref>(opType);</highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>parse<sp/>right<sp/>operand</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/>G_ASSERT(s.rhs[i]);</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!parseOperand(*s.rhs[i],<sp/>shexpr::OPER_USER,<sp/>e,<sp/>ctx))</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>e-&gt;<ref refid="classShaderParser_1_1ComplexExpression_1a695de7886520cd4b45f36355857a6674" kindref="member">validate</ref>(parser);</highlight></codeline>
<codeline lineno="70"><highlight class="normal">}</highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight><highlight class="comment">//<sp/>parse<sp/>expression</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classShaderParser_1_1ExpressionParser_1a107fbfb633c8a18c8f24fac035605fe6" kindref="member">ExpressionParser::parseExpression</ref>(ShaderTerminal::arithmetic_expr<sp/>&amp;s,<sp/><ref refid="classShaderParser_1_1ComplexExpression" kindref="compound">ComplexExpression</ref><sp/>*e,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Context<sp/>&amp;ctx)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="75"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/>G_ASSERT(e);</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>parse<sp/>left<sp/>operand</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/>G_ASSERT(s.lhs);</highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>this<sp/>expression<sp/>just<sp/>holds<sp/>one<sp/>subexpr,<sp/>ignore<sp/>this<sp/>one<sp/>and<sp/>don&apos;t<sp/>create<sp/>unneeded<sp/>nested<sp/>ComplexExpressions</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(s.rhs.empty())</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>parseSubExpression(*s.lhs,<sp/>e,<sp/>ctx);</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Otherwise,<sp/>validate</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ctx.destIsInteger)<sp/></highlight><highlight class="comment">//<sp/>@TODO:<sp/>remove<sp/>when<sp/>int<sp/>arithmetic<sp/>is<sp/>implemented</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="shErrorReporting_8h_1a634f6d6ca9a9f22c5eea4c9b8e20ef31" kindref="member">report_error</ref>(parser,<sp/>ctx.destTerm,<sp/></highlight><highlight class="stringliteral">&quot;Integer<sp/>arithmetic<sp/>is<sp/>not<sp/>supported<sp/>(in<sp/>expressions<sp/>for<sp/>local<sp/>int#<sp/>vars<sp/>and<sp/>@i#<sp/>constants)&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><ref refid="classShaderParser_1_1ComplexExpression" kindref="compound">ComplexExpression</ref><sp/>*newExpr<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="classShaderParser_1_1ComplexExpression" kindref="compound">ComplexExpression</ref>(s.lhs,<sp/>e-&gt;<ref refid="classShaderParser_1_1ComplexExpression_1a7f8f55c1b66662f2dd471784d111309a" kindref="member">getValueType</ref>(),<sp/>e-&gt;<ref refid="classShaderParser_1_1ComplexExpression_1a64324bc6708bb2c23085c7e26439e940" kindref="member">getCurrentChannel</ref>());</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/>e-&gt;<ref refid="classShaderParser_1_1ComplexExpression_1a1cfcdaf2ee0204346bde3a7961720734" kindref="member">setOperand</ref>(shexpr::OPER_LEFT,<sp/>newExpr);</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!parseSubExpression(*s.lhs,<sp/>newExpr,<sp/>ctx))</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>parse<sp/>right<sp/>operands</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>s.rhs.size();<sp/>i++)</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>parse<sp/>operator</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/>G_ASSERT(s.op[i]);</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/>shexpr::BinaryOperator<sp/>opType;</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(s.op[i]-&gt;num)</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>SHADER_TOKENS::SHTOK_plus:<sp/>opType<sp/>=<sp/>shexpr::OP_ADD;<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>SHADER_TOKENS::SHTOK_minus:<sp/>opType<sp/>=<sp/>shexpr::OP_SUB;<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:<sp/>G_ASSERT(0);</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>parse<sp/>right<sp/>operand</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/>G_ASSERT(s.rhs[i]);</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/>newExpr<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="classShaderParser_1_1ComplexExpression" kindref="compound">ComplexExpression</ref>(s.rhs[i],<sp/>e-&gt;<ref refid="classShaderParser_1_1ComplexExpression_1a7f8f55c1b66662f2dd471784d111309a" kindref="member">getValueType</ref>(),<sp/>e-&gt;<ref refid="classShaderParser_1_1ComplexExpression_1a64324bc6708bb2c23085c7e26439e940" kindref="member">getCurrentChannel</ref>());</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/>e-&gt;<ref refid="classShaderParser_1_1ComplexExpression_1a493d9259f604e81c3545d2c8e88b0727" kindref="member">addOperand</ref>(newExpr,<sp/>opType);</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!parseSubExpression(*s.rhs[i],<sp/>newExpr,<sp/>ctx))</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="115"><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>e-&gt;<ref refid="classShaderParser_1_1ComplexExpression_1a695de7886520cd4b45f36355857a6674" kindref="member">validate</ref>(parser);</highlight></codeline>
<codeline lineno="117"><highlight class="normal">}</highlight></codeline>
<codeline lineno="118"><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="normal"></highlight></codeline>
<codeline lineno="120"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classShaderParser_1_1ExpressionParser_1af038fb80abc17ef3c6f532a36642b8d7" kindref="member">ExpressionParser::parseConstExpression</ref>(ShaderTerminal::arithmetic_expr<sp/>&amp;s,<sp/>Color4<sp/>&amp;ret_value,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Context<sp/>&amp;ctx)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="121"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ctx.destValueType<sp/>==<sp/>shexpr::VT_BUFFER<sp/>||<sp/>ctx.destValueType<sp/>==<sp/>shexpr::VT_TEXTURE)</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="shErrorReporting_8h_1a634f6d6ca9a9f22c5eea4c9b8e20ef31" kindref="member">report_error</ref>(parser,<sp/>ctx.destTerm,<sp/></highlight><highlight class="stringliteral">&quot;Internal<sp/>error:<sp/>trying<sp/>to<sp/>parse<sp/>arithmetic<sp/>expression<sp/>for<sp/>buffer/texture<sp/>expected<sp/>type&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="127"><highlight class="normal"></highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>dest_type<sp/>is<sp/>either<sp/>color4,<sp/>real<sp/>or<sp/>undefined<sp/>(which<sp/>means<sp/>both<sp/>are<sp/>ok)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="129"><highlight class="normal"></highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>we<sp/>allow<sp/>the<sp/>expression<sp/>to<sp/>be<sp/>of<sp/>real<sp/>type,<sp/>try<sp/>to<sp/>parse<sp/>it<sp/>as<sp/>such</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ctx.destValueType<sp/>!=<sp/>shexpr::VT_COLOR4)</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classShaderParser_1_1ComplexExpression" kindref="compound">ComplexExpression</ref><sp/>real_expr(&amp;s,<sp/>shexpr::VT_REAL);</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="classShaderParser_1_1ExpressionParser_1a107fbfb633c8a18c8f24fac035605fe6" kindref="member">parseExpression</ref>(s,<sp/>&amp;real_expr,<sp/>ctx))</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(real_expr.getValueType()<sp/>==<sp/>shexpr::VT_REAL<sp/>&amp;&amp;<sp/>real_expr.evaluate(ret_value.r,<sp/>parser))</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ctx.destValueType<sp/>==<sp/>shexpr::VT_REAL)</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="141"><highlight class="normal"></highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>we<sp/>expect<sp/>the<sp/>expression<sp/>to<sp/>be<sp/>color4,<sp/>or<sp/>don&apos;t<sp/>expect<sp/>it<sp/>to<sp/>be<sp/>of<sp/>a<sp/>given<sp/>type</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>and<sp/>failed<sp/>to<sp/>parse<sp/>it<sp/>as<sp/>real,<sp/>try<sp/>to<sp/>parse<sp/>as<sp/>color4</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ctx.destValueType<sp/>!=<sp/>shexpr::VT_REAL)</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classShaderParser_1_1ComplexExpression" kindref="compound">ComplexExpression</ref><sp/>color_expr(&amp;s,<sp/>shexpr::VT_COLOR4);</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="classShaderParser_1_1ExpressionParser_1a107fbfb633c8a18c8f24fac035605fe6" kindref="member">parseExpression</ref>(s,<sp/>&amp;color_expr,<sp/>ctx))</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(color_expr.getChannels()<sp/>!=<sp/>1<sp/>&amp;&amp;<sp/>color_expr.getChannels()<sp/>!=<sp/>4)</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="shErrorReporting_8h_1a634f6d6ca9a9f22c5eea4c9b8e20ef31" kindref="member">report_error</ref>(parser,<sp/>ctx.destTerm,<sp/></highlight><highlight class="stringliteral">&quot;Invalid<sp/>number<sp/>of<sp/>channels<sp/>(%d)<sp/>for<sp/>float4<sp/>const<sp/>expression<sp/>(must<sp/>be<sp/>1<sp/>or<sp/>4)&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>color_expr.getChannels());</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>color_expr.evaluate(ret_value,<sp/>parser);</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="157"><highlight class="normal"></highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="159"><highlight class="normal">}</highlight></codeline>
<codeline lineno="160"><highlight class="normal"></highlight></codeline>
<codeline lineno="161"><highlight class="normal"></highlight><highlight class="comment">//<sp/>parse<sp/>color<sp/>mask</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="162"><highlight class="normal">shexpr::ColorChannel<sp/>ExpressionParser::parseColorMask(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>channel)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="163"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strchr(</highlight><highlight class="stringliteral">&quot;rRxX&quot;</highlight><highlight class="normal">,<sp/>channel))</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>shexpr::CC_R;</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strchr(</highlight><highlight class="stringliteral">&quot;gGyY&quot;</highlight><highlight class="normal">,<sp/>channel))</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>shexpr::CC_G;</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strchr(</highlight><highlight class="stringliteral">&quot;bBzZ&quot;</highlight><highlight class="normal">,<sp/>channel))</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>shexpr::CC_B;</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strchr(</highlight><highlight class="stringliteral">&quot;aAwW&quot;</highlight><highlight class="normal">,<sp/>channel))</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>shexpr::CC_A;</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>shexpr::_CC_UNDEFINED;</highlight></codeline>
<codeline lineno="173"><highlight class="normal">}</highlight></codeline>
<codeline lineno="174"><highlight class="normal"></highlight></codeline>
<codeline lineno="175"><highlight class="normal"></highlight></codeline>
<codeline lineno="176"><highlight class="normal"></highlight><highlight class="comment">//<sp/>parse<sp/>operand</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="177"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>ExpressionParser::parseOperand(ShaderTerminal::arithmetic_operand<sp/>&amp;s,<sp/>shexpr::OperandType<sp/>op_type,<sp/><ref refid="classShaderParser_1_1ComplexExpression" kindref="compound">ComplexExpression</ref><sp/>*e,</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Context<sp/>&amp;ctx)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="179"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!e)</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="182"><highlight class="normal"></highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>detect<sp/>unary<sp/>operator<sp/>of<sp/>this<sp/>operand</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/>shexpr::UnaryOperator<sp/>opType<sp/>=<sp/>shexpr::UOP_POSITIVE;</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(s.unary_op)</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(s.unary_op-&gt;op-&gt;num)</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>SHADER_TOKENS::SHTOK_plus:<sp/>opType<sp/>=<sp/>shexpr::UOP_POSITIVE;<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>SHADER_TOKENS::SHTOK_minus:<sp/>opType<sp/>=<sp/>shexpr::UOP_NEGATIVE;<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:<sp/>G_ASSERT(0);</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="194"><highlight class="normal"></highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(opType<sp/>==<sp/>shexpr::UOP_NEGATIVE<sp/>&amp;&amp;<sp/>ctx.destIsInteger)<sp/></highlight><highlight class="comment">//<sp/>@TODO:<sp/>remove<sp/>when<sp/>int<sp/>arithmetic<sp/>is<sp/>implemented</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="shErrorReporting_8h_1a634f6d6ca9a9f22c5eea4c9b8e20ef31" kindref="member">report_error</ref>(parser,<sp/>ctx.destTerm,<sp/></highlight><highlight class="stringliteral">&quot;Integer<sp/>arithmetic<sp/>is<sp/>not<sp/>supported<sp/>(in<sp/>expressions<sp/>for<sp/>local<sp/>int#<sp/>vars<sp/>and<sp/>@i#<sp/>constants)&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="200"><highlight class="normal"></highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>detect<sp/>color<sp/>channel<sp/>mask</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/>eastl::unique_ptr&lt;ColorChannelExpression&gt;<sp/>colorChExpr;</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>minRequiredChannels<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(s.cmask)</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>channels<sp/>=<sp/>strlen(s.cmask-&gt;channel-&gt;text);</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(e-&gt;<ref refid="classShaderParser_1_1ComplexExpression_1a64324bc6708bb2c23085c7e26439e940" kindref="member">getCurrentChannel</ref>()<sp/>&gt;<sp/>channels<sp/>-<sp/>1<sp/>&amp;&amp;<sp/>channels<sp/>&gt;<sp/>1)</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="shErrorReporting_8h_1a634f6d6ca9a9f22c5eea4c9b8e20ef31" kindref="member">report_error</ref>(parser,<sp/>s.cmask-&gt;channel,<sp/></highlight><highlight class="stringliteral">&quot;Wrong<sp/>color<sp/>mask<sp/>%s&quot;</highlight><highlight class="normal">,<sp/>s.cmask-&gt;channel-&gt;text);</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="212"><highlight class="normal"></highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>min<sp/>channels<sp/>required<sp/>for<sp/>the<sp/>mask<sp/>to<sp/>retrieve<sp/>valid<sp/>data</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>channels;<sp/>i++)</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>shexpr::ColorChannel<sp/>colorChannel<sp/>=<sp/>parseColorMask(s.cmask-&gt;channel-&gt;text[i]);</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(colorChannel<sp/>==<sp/>shexpr::_CC_UNDEFINED)</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="shErrorReporting_8h_1a634f6d6ca9a9f22c5eea4c9b8e20ef31" kindref="member">report_error</ref>(parser,<sp/>s.cmask-&gt;channel,<sp/></highlight><highlight class="stringliteral">&quot;r,g,b,a<sp/>or<sp/>x,y,z,w<sp/>expected!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>reqChannels<sp/>=<sp/>colorChannel<sp/>-<sp/>shexpr::CC_R<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>minRequiredChannels<sp/>=<sp/>eastl::max(minRequiredChannels,<sp/>reqChannels);</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="225"><highlight class="normal"></highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>index<sp/>=<sp/>(e-&gt;<ref refid="classShaderParser_1_1ComplexExpression_1a64324bc6708bb2c23085c7e26439e940" kindref="member">getCurrentChannel</ref>()<sp/>==<sp/>-1<sp/>||<sp/>channels<sp/>==<sp/>1)<sp/>?<sp/>0<sp/>:<sp/>e-&gt;getCurrentChannel();</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>channel<sp/>=<sp/>s.cmask-&gt;channel-&gt;text[index];</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/>shexpr::ColorChannel<sp/>colorChannel<sp/>=<sp/>parseColorMask(channel);</highlight></codeline>
<codeline lineno="229"><highlight class="normal"></highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/>e-&gt;<ref refid="classShaderParser_1_1ComplexExpression_1ac2d7c6dc761850ca65206441da5b880e" kindref="member">setChannels</ref>(channels);</highlight></codeline>
<codeline lineno="231"><highlight class="normal"></highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>the<sp/>current<sp/>channel<sp/>of<sp/>expression<sp/>is<sp/>defined<sp/>(!=<sp/>-1),<sp/>it<sp/>means<sp/>that<sp/>we<sp/>are</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>inside<sp/>of<sp/>a<sp/>ColorValue<sp/>expression,<sp/>and<sp/>all<sp/>the<sp/>channels<sp/>of<sp/>a<sp/>mask<sp/>are<sp/>parsed</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>separately<sp/>(see<sp/>ExpressionParser::parseColor)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(channels<sp/>==<sp/>1<sp/>||<sp/>e-&gt;<ref refid="classShaderParser_1_1ComplexExpression_1a64324bc6708bb2c23085c7e26439e940" kindref="member">getCurrentChannel</ref>()<sp/>!=<sp/>-1)</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>colorChExpr.reset(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="classShaderParser_1_1SingleColorChannelExpression" kindref="compound">SingleColorChannelExpression</ref>(s.cmask-&gt;channel,<sp/>colorChannel));</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classShaderParser_1_1MultiColorChannelExpression_1a518493115ff44c61f6ff52b00f9fa4ab" kindref="member">MultiColorChannelExpression::ChannelMask</ref><sp/>allChannels(channels);</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>index<sp/>=<sp/>0;<sp/>index<sp/>&lt;<sp/>channels;<sp/>index++)</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>allChannels[index]<sp/>=<sp/>parseColorMask(s.cmask-&gt;channel-&gt;text[index]);</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>colorChExpr.reset(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="classShaderParser_1_1MultiColorChannelExpression" kindref="compound">MultiColorChannelExpression</ref>(s.cmask-&gt;channel,<sp/>allChannels));</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="245"><highlight class="normal"></highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(s.expr)</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>it&apos;s<sp/>a<sp/>complex<sp/>expression</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/>shexpr::ValueType<sp/>valType<sp/>=<sp/>colorChExpr<sp/>?<sp/>shexpr::VT_COLOR4<sp/>:<sp/>e-&gt;<ref refid="classShaderParser_1_1ComplexExpression_1a7f8f55c1b66662f2dd471784d111309a" kindref="member">getValueType</ref>();</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classShaderParser_1_1ComplexExpression" kindref="compound">ComplexExpression</ref><sp/>*newExpr<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="classShaderParser_1_1ComplexExpression" kindref="compound">ComplexExpression</ref>(s.expr,<sp/>valType,<sp/>e-&gt;<ref refid="classShaderParser_1_1ComplexExpression_1a64324bc6708bb2c23085c7e26439e940" kindref="member">getCurrentChannel</ref>());</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/>newExpr-&gt;<ref refid="classShaderParser_1_1Expression_1a6438a4e71937292586b86d9e3e1202f9" kindref="member">setUnaryOperator</ref>(opType);</highlight></codeline>
<codeline lineno="252"><highlight class="normal"></highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(colorChExpr)</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>colorChExpr-&gt;setChild(newExpr);</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>e-&gt;<ref refid="classShaderParser_1_1ComplexExpression_1a1cfcdaf2ee0204346bde3a7961720734" kindref="member">setOperand</ref>(op_type,<sp/>colorChExpr.get());</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>colorChExpr.release();</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>e-&gt;<ref refid="classShaderParser_1_1ComplexExpression_1a1cfcdaf2ee0204346bde3a7961720734" kindref="member">setOperand</ref>(op_type,<sp/>newExpr);</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="263"><highlight class="normal"></highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="classShaderParser_1_1ExpressionParser_1a107fbfb633c8a18c8f24fac035605fe6" kindref="member">parseExpression</ref>(*s.expr,<sp/>newExpr,<sp/>ctx))</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(newExpr-&gt;<ref refid="classShaderParser_1_1ComplexExpression_1ac2fe7fc73b1e22177129c4465a6609eb" kindref="member">getChannels</ref>()<sp/>&lt;<sp/>minRequiredChannels)</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="shErrorReporting_8h_1a634f6d6ca9a9f22c5eea4c9b8e20ef31" kindref="member">report_error</ref>(parser,<sp/>s.cmask-&gt;channel,</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Expression<sp/>only<sp/>has<sp/>%d<sp/>channels<sp/>while<sp/>at<sp/>least<sp/>%d<sp/>channels<sp/>are<sp/>required<sp/>for<sp/>the<sp/>&apos;%s&apos;<sp/>mask&quot;</highlight><highlight class="normal">,<sp/>newExpr-&gt;<ref refid="classShaderParser_1_1ComplexExpression_1ac2fe7fc73b1e22177129c4465a6609eb" kindref="member">getChannels</ref>(),</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>minRequiredChannels,<sp/>s.cmask-&gt;channel-&gt;text);</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(s.var_name)</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>it&apos;s<sp/>a<sp/>variable</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>varNameId<sp/>=<sp/>variantCtx-&gt;<ref refid="classshc_1_1VariantContext_1a02952e27d2d5e304daad76b11cb1f4ad" kindref="member">tgtCtx</ref>().<ref refid="classshc_1_1TargetContext_1a64e71598c4751d165675e9e9f1f70b8e" kindref="member">varNameMap</ref>().<ref refid="classVarNameMap_1a8a6529882641e8945737456483807f7b" kindref="member">getVarId</ref>(s.var_name-&gt;text);</highlight></codeline>
<codeline lineno="279"><highlight class="normal"></highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>varId<sp/>=<sp/>variantCtx-&gt;<ref refid="classshc_1_1VariantContext_1a2d125467ea979d45d29b68dc2573b9c7" kindref="member">localStcodeVars</ref>().<ref refid="classLocalVarTable_1a89151c12d65aa70028d87fc1c64979c0" kindref="member">getVariableId</ref>(varNameId);</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structLocalVar" kindref="compound">LocalVar</ref><sp/>*locVar<sp/>=<sp/>variantCtx-&gt;<ref refid="classshc_1_1VariantContext_1a2d125467ea979d45d29b68dc2573b9c7" kindref="member">localStcodeVars</ref>().<ref refid="classLocalVarTable_1acc73e6bd975d8ac1058d7855f28fca35" kindref="member">getVariableByName</ref>(varNameId);</highlight></codeline>
<codeline lineno="282"><highlight class="normal"></highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(locVar)</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!locVar-&gt;<ref refid="structLocalVar_1add3501d79d8d7b5cdcc9c1826e9ce816" kindref="member">isInteger</ref><sp/>&amp;&amp;<sp/>ctx.destIsInteger)<sp/></highlight><highlight class="comment">//<sp/>@TODO:<sp/>remove<sp/>when<sp/>int<sp/>arithmetic<sp/>is<sp/>implemented</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="shErrorReporting_8h_1a634f6d6ca9a9f22c5eea4c9b8e20ef31" kindref="member">report_error</ref>(parser,<sp/>ctx.destTerm,<sp/></highlight><highlight class="stringliteral">&quot;Floating<sp/>point<sp/>local<sp/>var<sp/>%s<sp/>is<sp/>used<sp/>in<sp/>integer<sp/>expression&quot;</highlight><highlight class="normal">,<sp/>s.var_name-&gt;text);</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="290"><highlight class="normal"></highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>it&apos;s<sp/>a<sp/>local<sp/>variable</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(locVar-&gt;<ref refid="structLocalVar_1a731b1f0d5e66eb5ed728d819a1a5d865" kindref="member">isConst</ref>)</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Sanity<sp/>check</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>G_ASSERT(locVar-&gt;<ref refid="structLocalVar_1a28b868de52e6d5b3210f360b46d6bda7" kindref="member">valueType</ref><sp/>==<sp/>shexpr::VT_REAL<sp/>||<sp/>locVar-&gt;<ref refid="structLocalVar_1a28b868de52e6d5b3210f360b46d6bda7" kindref="member">valueType</ref><sp/>==<sp/>shexpr::VT_COLOR4);</highlight></codeline>
<codeline lineno="296"><highlight class="normal"></highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>add<sp/>this<sp/>as<sp/>numeric<sp/>constant</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(locVar-&gt;<ref refid="structLocalVar_1a28b868de52e6d5b3210f360b46d6bda7" kindref="member">valueType</ref><sp/>==<sp/>shexpr::VT_COLOR4)</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>add<sp/>this<sp/>as<sp/>color4<sp/>constant</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classShaderParser_1_1ConstColor4Value" kindref="compound">ConstColor4Value</ref><sp/>*newExpr<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="classShaderParser_1_1ConstColor4Value" kindref="compound">ConstColor4Value</ref>(s.var_name,<sp/>Color4::rgbV(locVar-&gt;<ref refid="structLocalVar_1addd5be6f538d72f7f4719be69b3cc4da" kindref="member">cv</ref>.<ref refid="unionLocalVar_1_1ConstValue_1aced328c75d3d61ec9fd44e0748aec33d" kindref="member">c</ref>,<sp/>locVar-&gt;<ref refid="structLocalVar_1addd5be6f538d72f7f4719be69b3cc4da" kindref="member">cv</ref>.<ref refid="unionLocalVar_1_1ConstValue_1aced328c75d3d61ec9fd44e0748aec33d" kindref="member">c</ref>.<ref refid="structshc_1_1Col4_1ad45d77d3ac5390ff1b74fc5dfaaa0956" kindref="member">a</ref>));</highlight></codeline>
<codeline lineno="302"><highlight class="normal"></highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(colorChExpr)</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>colorChExpr-&gt;setChild(newExpr);</highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>e-&gt;<ref refid="classShaderParser_1_1ComplexExpression_1a1cfcdaf2ee0204346bde3a7961720734" kindref="member">setOperand</ref>(op_type,<sp/>colorChExpr.get());</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>colorChExpr.release();</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>e-&gt;<ref refid="classShaderParser_1_1ComplexExpression_1a1cfcdaf2ee0204346bde3a7961720734" kindref="member">setOperand</ref>(op_type,<sp/>newExpr);</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="313"><highlight class="normal"></highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>newExpr-&gt;<ref refid="classShaderParser_1_1Expression_1a6438a4e71937292586b86d9e3e1202f9" kindref="member">setUnaryOperator</ref>(opType);</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>add<sp/>this<sp/>as<sp/>real<sp/>constant</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(colorChExpr)</highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="shErrorReporting_8h_1a634f6d6ca9a9f22c5eea4c9b8e20ef31" kindref="member">report_error</ref>(parser,<sp/>s.var_name,<sp/></highlight><highlight class="stringliteral">&quot;get<sp/>component<sp/>operator<sp/>must<sp/>be<sp/>used<sp/>with<sp/>color4()<sp/>value!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classShaderParser_1_1ConstRealValue" kindref="compound">ConstRealValue</ref><sp/>*newExpr<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="classShaderParser_1_1ConstRealValue" kindref="compound">ConstRealValue</ref>(s.var_name,<sp/>locVar-&gt;<ref refid="structLocalVar_1addd5be6f538d72f7f4719be69b3cc4da" kindref="member">cv</ref>.<ref refid="unionLocalVar_1_1ConstValue_1a684300f7837dfbd35c7b9373fb8d8b56" kindref="member">r</ref>);</highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>e-&gt;<ref refid="classShaderParser_1_1ComplexExpression_1a1cfcdaf2ee0204346bde3a7961720734" kindref="member">setOperand</ref>(op_type,<sp/>newExpr);</highlight></codeline>
<codeline lineno="327"><highlight class="normal"></highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>newExpr-&gt;<ref refid="classShaderParser_1_1Expression_1a6438a4e71937292586b86d9e3e1202f9" kindref="member">setUnaryOperator</ref>(opType);</highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>add<sp/>this<sp/>as<sp/>local<sp/>variable</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classShaderParser_1_1LVarValueExpression" kindref="compound">LVarValueExpression</ref><sp/>*newExpr<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="classShaderParser_1_1LVarValueExpression" kindref="compound">LVarValueExpression</ref>(s.var_name,<sp/>*locVar);</highlight></codeline>
<codeline lineno="336"><highlight class="normal"></highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(colorChExpr)</highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>colorChExpr-&gt;setChild(newExpr);</highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>e-&gt;<ref refid="classShaderParser_1_1ComplexExpression_1a1cfcdaf2ee0204346bde3a7961720734" kindref="member">setOperand</ref>(op_type,<sp/>colorChExpr.get());</highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>colorChExpr.release();</highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>e-&gt;<ref refid="classShaderParser_1_1ComplexExpression_1a1cfcdaf2ee0204346bde3a7961720734" kindref="member">setOperand</ref>(op_type,<sp/>newExpr);</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="347"><highlight class="normal"></highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>newExpr-&gt;<ref refid="classShaderParser_1_1Expression_1a6438a4e71937292586b86d9e3e1202f9" kindref="member">setUnaryOperator</ref>(opType);</highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="352"><highlight class="normal"></highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>check<sp/>for<sp/>another<sp/>variable</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>[varIndex,<sp/>vt,<sp/>isGlobal]<sp/>=<sp/><ref refid="namespacesemantic_1a69d749806268f5b3b7cafa16cab36787" kindref="member">semantic::lookup_state_var</ref>(*s.var_name,<sp/>*variantCtx);</highlight></codeline>
<codeline lineno="355"><highlight class="normal"></highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(varIndex<sp/>&lt;<sp/>0)</highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="shErrorReporting_8h_1a634f6d6ca9a9f22c5eea4c9b8e20ef31" kindref="member">report_error</ref>(parser,<sp/>s.var_name,<sp/></highlight><highlight class="stringliteral">&quot;variable<sp/>not<sp/>found!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="361"><highlight class="normal"></highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isDynamic<sp/>=<sp/>isGlobal;</highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/><sp/>shexpr::ValueType<sp/>varType;</highlight></codeline>
<codeline lineno="364"><highlight class="normal"></highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isInt<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="366"><highlight class="normal"></highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!isGlobal)</highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>detect<sp/>local<sp/>type</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structShaderSemCode_1_1Var" kindref="compound">ShaderSemCode::Var</ref><sp/>&amp;v<sp/>=<sp/>variantCtx-&gt;<ref refid="classshc_1_1VariantContext_1affd628ade3fe363f38863af16f5d1129" kindref="member">parsedSemCode</ref>().<ref refid="classShaderSemCode_1abe6ed6468793a4cbe55a75133a83d393" kindref="member">vars</ref>[varIndex];</highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(v.<ref refid="structShaderSemCode_1_1Var_1a88b199052f426ef5cd3573f1b5e4bd9b" kindref="member">dynamic</ref>)</highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>isDynamic<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="373"><highlight class="normal"></highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(v.<ref refid="structShaderSemCode_1_1Var_1a670250d27af8de5e58c91f0bce515ead" kindref="member">type</ref>)</highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>SHVT_REAL:<sp/>varType<sp/>=<sp/>shexpr::VT_REAL;<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>SHVT_COLOR4:<sp/>varType<sp/>=<sp/>shexpr::VT_COLOR4;<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>SHVT_INT4:</highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>varType<sp/>=<sp/>shexpr::VT_COLOR4;</highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>isInt<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="382"><highlight class="normal"></highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>SHVT_INT:</highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>varType<sp/>=<sp/>shexpr::VT_REAL;</highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>isInt<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="387"><highlight class="normal"></highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>SHVT_TEXTURE:</highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="shErrorReporting_8h_1a634f6d6ca9a9f22c5eea4c9b8e20ef31" kindref="member">report_error</ref>(parser,<sp/>s.var_name,<sp/></highlight><highlight class="stringliteral">&quot;variables<sp/>of<sp/>type<sp/>TEXTURE<sp/>are<sp/>unsupported<sp/>here!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>@TODO:<sp/>validate<sp/>all<sp/>types</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:<sp/>G_ASSERT(0);</highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>detect<sp/>global<sp/>type</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classShaderGlobal_1_1Var" kindref="compound">ShaderGlobal::Var</ref><sp/>&amp;v<sp/>=<sp/>variantCtx-&gt;<ref refid="classshc_1_1VariantContext_1a02952e27d2d5e304daad76b11cb1f4ad" kindref="member">tgtCtx</ref>().<ref refid="classshc_1_1TargetContext_1a77a4453b2a7ddead5199305bd6205fa1" kindref="member">globVars</ref>().<ref refid="classShaderGlobal_1_1VarTable_1a5af47e2e25412b7f5368160f078fa9b5" kindref="member">getVar</ref>(varIndex);</highlight></codeline>
<codeline lineno="400"><highlight class="normal"></highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(v.<ref refid="classShaderGlobal_1_1Var_1aa0609c924a6e9ca2c3b5bbad89877fe3" kindref="member">type</ref>)</highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>SHVT_REAL:<sp/>varType<sp/>=<sp/>shexpr::VT_REAL;<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>SHVT_COLOR4:<sp/>varType<sp/>=<sp/>shexpr::VT_COLOR4;<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>SHVT_INT4:</highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>varType<sp/>=<sp/>shexpr::VT_COLOR4;</highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>isInt<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="409"><highlight class="normal"></highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>SHVT_INT:</highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>varType<sp/>=<sp/>shexpr::VT_REAL;</highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>isInt<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="414"><highlight class="normal"></highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>SHVT_TEXTURE:<sp/>varType<sp/>=<sp/>shexpr::VT_TEXTURE;<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>SHVT_BUFFER:<sp/>varType<sp/>=<sp/>shexpr::VT_BUFFER;<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:<sp/>G_ASSERT(0);</highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="420"><highlight class="normal"></highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!isInt<sp/>&amp;&amp;<sp/>ctx.destIsInteger)<sp/></highlight><highlight class="comment">//<sp/>@TODO:<sp/>remove<sp/>when<sp/>int<sp/>arithmetic<sp/>is<sp/>implemented</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*varTypeText<sp/>=</highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>varType<sp/>==<sp/>shexpr::VT_TEXTURE<sp/>?<sp/></highlight><highlight class="stringliteral">&quot;Texture&quot;</highlight><highlight class="normal"><sp/>:<sp/>(varType<sp/>==<sp/>shexpr::VT_BUFFER<sp/>?<sp/></highlight><highlight class="stringliteral">&quot;Buffer&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;Floating<sp/>point&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="shErrorReporting_8h_1a634f6d6ca9a9f22c5eea4c9b8e20ef31" kindref="member">report_error</ref>(parser,<sp/>ctx.destTerm,<sp/></highlight><highlight class="stringliteral">&quot;%s<sp/>%s<sp/>var<sp/>%s<sp/>is<sp/>used<sp/>in<sp/>integer<sp/>expression&quot;</highlight><highlight class="normal">,<sp/>varTypeText,<sp/>isGlobal<sp/>?<sp/></highlight><highlight class="stringliteral">&quot;global&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;static&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s.var_name-&gt;text);</highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="429"><highlight class="normal"></highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(colorChExpr<sp/>&amp;&amp;<sp/>(varType<sp/>!=<sp/>shexpr::VT_COLOR4))</highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="shErrorReporting_8h_1a634f6d6ca9a9f22c5eea4c9b8e20ef31" kindref="member">report_error</ref>(parser,<sp/>s.var_name,<sp/></highlight><highlight class="stringliteral">&quot;get<sp/>component<sp/>operator<sp/>must<sp/>be<sp/>used<sp/>with<sp/>color4()<sp/>value!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="435"><highlight class="normal"></highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classShaderParser_1_1StVarValueExpression" kindref="compound">StVarValueExpression</ref><sp/>*newExpr<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="classShaderParser_1_1StVarValueExpression" kindref="compound">StVarValueExpression</ref>(s.var_name,<sp/>varIndex,<sp/>varType,<sp/>isDynamic,<sp/>isGlobal,<sp/>isInt);</highlight></codeline>
<codeline lineno="437"><highlight class="normal"></highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(colorChExpr)</highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>colorChExpr-&gt;setChild(newExpr);</highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>e-&gt;<ref refid="classShaderParser_1_1ComplexExpression_1a1cfcdaf2ee0204346bde3a7961720734" kindref="member">setOperand</ref>(op_type,<sp/>colorChExpr.get());</highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>colorChExpr.release();</highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>e-&gt;<ref refid="classShaderParser_1_1ComplexExpression_1a1cfcdaf2ee0204346bde3a7961720734" kindref="member">setOperand</ref>(op_type,<sp/>newExpr);</highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="448"><highlight class="normal"></highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/><sp/><sp/>newExpr-&gt;<ref refid="classShaderParser_1_1Expression_1a6438a4e71937292586b86d9e3e1202f9" kindref="member">setUnaryOperator</ref>(opType);</highlight></codeline>
<codeline lineno="450"><highlight class="normal"></highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(s.func)</highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>it&apos;s<sp/>arithmetic<sp/>function</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="456"><highlight class="normal"></highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>detect<sp/>id</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/><sp/><sp/>functional::FunctionId<sp/>func;</highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="namespacefunctional_1a7398fb0db52b383c5dce91d1b119e7c2" kindref="member">functional::getFuncId</ref>(s.func-&gt;func_name-&gt;text,<sp/>func))</highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="shErrorReporting_8h_1a634f6d6ca9a9f22c5eea4c9b8e20ef31" kindref="member">report_error</ref>(parser,<sp/>s.func-&gt;func_name,<sp/></highlight><highlight class="stringliteral">&quot;unknown<sp/>function!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="464"><highlight class="normal"></highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>check<sp/>function<sp/>return<sp/>type</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/><sp/><sp/>shexpr::ValueType<sp/>retType<sp/>=<sp/><ref refid="namespacefunctional_1a65d63b3afe8706ef5499a148b0b8990c" kindref="member">functional::getValueType</ref>(func);</highlight></codeline>
<codeline lineno="467"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>retIsInteger<sp/>=<sp/><ref refid="namespacefunctional_1abaff07d64e2df75e9aed4e6c18a9032c" kindref="member">functional::getValueTypeIsInteger</ref>(func);</highlight></codeline>
<codeline lineno="468"><highlight class="normal"></highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(colorChExpr<sp/>&amp;&amp;<sp/>(retType<sp/>!=<sp/>shexpr::VT_COLOR4))</highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="471"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="shErrorReporting_8h_1a634f6d6ca9a9f22c5eea4c9b8e20ef31" kindref="member">report_error</ref>(parser,<sp/>s.var_name,<sp/></highlight><highlight class="stringliteral">&quot;get<sp/>component<sp/>operator<sp/>must<sp/>be<sp/>used<sp/>with<sp/>color4()<sp/>value!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="472"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="474"><highlight class="normal"></highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>@TODO:<sp/>refactor<sp/>codebase<sp/>to<sp/>remove<sp/>these<sp/>cases<sp/>and<sp/>reenable,<sp/>or<sp/>do<sp/>some<sp/>of<sp/>these<sp/>functions<sp/>actually<sp/>work<sp/>properly?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>(!retIsInteger<sp/>&amp;&amp;<sp/>ctx.destIsInteger)<sp/>//<sp/>@TODO:<sp/>remove<sp/>when<sp/>int<sp/>arithmetic<sp/>is<sp/>implemented</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="477"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="478"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>const<sp/>char<sp/>*varTypeText<sp/>=</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>retType<sp/>==<sp/>shexpr::VT_TEXTURE<sp/>?<sp/>&quot;Texture&quot;<sp/>:<sp/>(retType<sp/>==<sp/>shexpr::VT_BUFFER<sp/>?<sp/>&quot;Buffer&quot;<sp/>:<sp/>&quot;Floating<sp/>point&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="480"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>report_error(parser,<sp/>ctx.destTerm,<sp/>&quot;%s-returning<sp/>function<sp/>%s<sp/>is<sp/>used<sp/>in<sp/>integer<sp/>expression&quot;,<sp/>varTypeText,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>s.func-&gt;func_name-&gt;text);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="482"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>return<sp/>false;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="483"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="484"><highlight class="normal"></highlight></codeline>
<codeline lineno="485"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>get<sp/>args<sp/>types</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="486"><highlight class="normal"><sp/><sp/><sp/><sp/>functional::ArgList<sp/>args(tmpmem);</highlight></codeline>
<codeline lineno="487"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacefunctional_1a240fedd61c46bb47cb5069b35d695c28" kindref="member">functional::prepareArgs</ref>(func,<sp/>args);</highlight></codeline>
<codeline lineno="488"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(s.func-&gt;param.size()<sp/>!=<sp/>args.size())</highlight></codeline>
<codeline lineno="489"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="490"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="shErrorReporting_8h_1a634f6d6ca9a9f22c5eea4c9b8e20ef31" kindref="member">report_error</ref>(parser,<sp/>s.func-&gt;func_name,<sp/></highlight><highlight class="stringliteral">&quot;invalid<sp/>argument<sp/>count:<sp/>required<sp/>%d,<sp/>but<sp/>found<sp/>%d&quot;</highlight><highlight class="normal">,<sp/>args.size(),<sp/>s.func-&gt;param.size());</highlight></codeline>
<codeline lineno="491"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="493"><highlight class="normal"></highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>parse<sp/>arguments</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="495"><highlight class="normal"><sp/><sp/><sp/><sp/>eastl::unique_ptr&lt;FunctionExpression&gt;<sp/>newExpr(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="classShaderParser_1_1FunctionExpression" kindref="compound">FunctionExpression</ref>(s.func-&gt;func_name,<sp/>func,<sp/>e-&gt;<ref refid="classShaderParser_1_1ComplexExpression_1a64324bc6708bb2c23085c7e26439e940" kindref="member">getCurrentChannel</ref>()));</highlight></codeline>
<codeline lineno="496"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>args.size();<sp/>i++)</highlight></codeline>
<codeline lineno="497"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="498"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>eastl::unique_ptr&lt;ComplexExpression&gt;<sp/>arg(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="classShaderParser_1_1ComplexExpression" kindref="compound">ComplexExpression</ref>(s.func-&gt;param[i],<sp/>args[i].vt,<sp/>e-&gt;<ref refid="classShaderParser_1_1ComplexExpression_1a64324bc6708bb2c23085c7e26439e940" kindref="member">getCurrentChannel</ref>()));</highlight></codeline>
<codeline lineno="499"><highlight class="normal"></highlight></codeline>
<codeline lineno="500"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Function<sp/>arguments<sp/>have<sp/>to<sp/>answer<sp/>to<sp/>the<sp/>type<sp/>requirements<sp/>of<sp/>the<sp/>function,<sp/>not<sp/>the<sp/>destination<sp/>expression</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="501"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>@TODO:<sp/>support<sp/>integer<sp/>numeric<sp/>function<sp/>args</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="502"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="classShaderParser_1_1ExpressionParser_1a107fbfb633c8a18c8f24fac035605fe6" kindref="member">parseExpression</ref>(*s.func-&gt;param[i],<sp/>arg.get(),<sp/>Context{args[i].vt,<sp/>false,<sp/>s.func-&gt;func_name}))</highlight></codeline>
<codeline lineno="503"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="504"><highlight class="normal"></highlight></codeline>
<codeline lineno="505"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>@HACK:<sp/>this<sp/>is<sp/>done<sp/>so<sp/>as<sp/>not<sp/>to<sp/>break<sp/>these<sp/>type<sp/>of<sp/>expressions:<sp/>(v.xy,<sp/>1.0/max(1,v.xy))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="506"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>i.e.<sp/>expressions<sp/>where<sp/>functions<sp/>that<sp/>take<sp/>real<sp/>args<sp/>take<sp/>vectors<sp/>instead<sp/>inside<sp/>color<sp/>values.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="507"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>max<sp/>is<sp/>a<sp/>real<sp/>(real,<sp/>real)<sp/>function,<sp/>but<sp/>due<sp/>to<sp/>the<sp/>way<sp/>color<sp/>values<sp/>work<sp/>now<sp/>this</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="508"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>expression<sp/>is<sp/>treated<sp/>as<sp/>(v.x,<sp/>v.y,<sp/>1.0/max(1,z.x),<sp/>1.0/max(1,z.y)),<sp/>and<sp/>it<sp/>works<sp/>in<sp/>existing<sp/>code.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="509"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="510"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>@TODO:<sp/>however,<sp/>this<sp/>should<sp/>be<sp/>removed,<sp/>because<sp/>doing<sp/>the<sp/>same<sp/>outside<sp/>a<sp/>color<sp/>value<sp/>does<sp/>not<sp/>work<sp/>like<sp/>that</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="511"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>and<sp/>this<sp/>would<sp/>break<sp/>if<sp/>we<sp/>were<sp/>to<sp/>call<sp/>some<sp/>function<sp/>that<sp/>should<sp/>act<sp/>on<sp/>vectors<sp/>not<sp/>coordinate-wise</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="512"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>argHasAllowedType<sp/>=<sp/>(e-&gt;<ref refid="classShaderParser_1_1ComplexExpression_1a64324bc6708bb2c23085c7e26439e940" kindref="member">getCurrentChannel</ref>()<sp/>!=<sp/>-1<sp/>&amp;&amp;<sp/>args[i].vt<sp/>==<sp/>shexpr::VT_REAL)<sp/>||<sp/>arg-&gt;canConvert(args[i].vt);</highlight></codeline>
<codeline lineno="513"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!argHasAllowedType)</highlight></codeline>
<codeline lineno="514"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="515"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="shErrorReporting_8h_1a634f6d6ca9a9f22c5eea4c9b8e20ef31" kindref="member">report_error</ref>(parser,<sp/>s.func-&gt;func_name,<sp/></highlight><highlight class="stringliteral">&quot;cannot<sp/>convert<sp/>function<sp/>arg<sp/>from<sp/>&apos;%s&apos;<sp/>to<sp/>&apos;%s&apos;<sp/>here&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="516"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classShaderParser_1_1Expression_1a68e771cf9c1584e59c0f5c5e298d3eea" kindref="member">Expression::__getName</ref>(arg-&gt;getValueType()),<sp/><ref refid="classShaderParser_1_1Expression_1a68e771cf9c1584e59c0f5c5e298d3eea" kindref="member">Expression::__getName</ref>(args[i].vt));</highlight></codeline>
<codeline lineno="517"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="518"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="519"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!arg-&gt;collapseNumbers(parser))</highlight></codeline>
<codeline lineno="520"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="521"><highlight class="normal"></highlight></codeline>
<codeline lineno="522"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>newExpr-&gt;setOperand(shexpr::OperandType(i),<sp/>arg.get());</highlight></codeline>
<codeline lineno="523"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>arg.release();</highlight></codeline>
<codeline lineno="524"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="525"><highlight class="normal"></highlight></codeline>
<codeline lineno="526"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>register<sp/>function<sp/>operand</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="527"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(colorChExpr)</highlight></codeline>
<codeline lineno="528"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="529"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>colorChExpr-&gt;setChild(newExpr.get());</highlight></codeline>
<codeline lineno="530"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>e-&gt;<ref refid="classShaderParser_1_1ComplexExpression_1a1cfcdaf2ee0204346bde3a7961720734" kindref="member">setOperand</ref>(op_type,<sp/>colorChExpr.get());</highlight></codeline>
<codeline lineno="531"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>colorChExpr.release();</highlight></codeline>
<codeline lineno="532"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="533"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="534"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="535"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>e-&gt;<ref refid="classShaderParser_1_1ComplexExpression_1a1cfcdaf2ee0204346bde3a7961720734" kindref="member">setOperand</ref>(op_type,<sp/>newExpr.get());</highlight></codeline>
<codeline lineno="536"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="537"><highlight class="normal"></highlight></codeline>
<codeline lineno="538"><highlight class="normal"><sp/><sp/><sp/><sp/>newExpr-&gt;<ref refid="classShaderParser_1_1Expression_1a6438a4e71937292586b86d9e3e1202f9" kindref="member">setUnaryOperator</ref>(opType);</highlight></codeline>
<codeline lineno="539"><highlight class="normal"><sp/><sp/><sp/><sp/>newExpr.release();</highlight></codeline>
<codeline lineno="540"><highlight class="normal"></highlight></codeline>
<codeline lineno="541"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="542"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="543"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(s.real_value)</highlight></codeline>
<codeline lineno="544"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="545"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>it&apos;s<sp/>a<sp/>real<sp/>value</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="546"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(colorChExpr)</highlight></codeline>
<codeline lineno="547"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="548"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="shErrorReporting_8h_1a634f6d6ca9a9f22c5eea4c9b8e20ef31" kindref="member">report_error</ref>(parser,<sp/>s.real_value-&gt;value,<sp/></highlight><highlight class="stringliteral">&quot;get<sp/>component<sp/>operator<sp/>must<sp/>be<sp/>used<sp/>with<sp/>color4()<sp/>value!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="549"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="550"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="551"><highlight class="normal"></highlight></codeline>
<codeline lineno="552"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classShaderParser_1_1ConstRealValue" kindref="compound">ConstRealValue</ref><sp/>*newExpr<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="classShaderParser_1_1ConstRealValue" kindref="compound">ConstRealValue</ref>(s.real_value-&gt;value);</highlight></codeline>
<codeline lineno="553"><highlight class="normal"><sp/><sp/><sp/><sp/>e-&gt;<ref refid="classShaderParser_1_1ComplexExpression_1a1cfcdaf2ee0204346bde3a7961720734" kindref="member">setOperand</ref>(op_type,<sp/>newExpr);</highlight></codeline>
<codeline lineno="554"><highlight class="normal"></highlight></codeline>
<codeline lineno="555"><highlight class="normal"><sp/><sp/><sp/><sp/>newExpr-&gt;<ref refid="classShaderParser_1_1Expression_1a6438a4e71937292586b86d9e3e1202f9" kindref="member">setUnaryOperator</ref>(opType);</highlight></codeline>
<codeline lineno="556"><highlight class="normal"></highlight></codeline>
<codeline lineno="557"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ctx.destIsInteger)</highlight></codeline>
<codeline lineno="558"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="559"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>val<sp/>=<sp/><ref refid="namespacesemutils_1a6811ced6d8ed588c8946e5816ea788a0" kindref="member">semutils::int_number</ref>(s.real_value);</highlight></codeline>
<codeline lineno="560"><highlight class="normal"></highlight></codeline>
<codeline lineno="561"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>bit<sp/>cast<sp/>is<sp/>&quot;safe&quot;<sp/>in<sp/>integer<sp/>context:<sp/>validation<sp/>disallows<sp/>arithmetic,<sp/>and<sp/>it<sp/>just<sp/>gets<sp/>passed<sp/>to<sp/>the<sp/>destination</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="562"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>newExpr-&gt;<ref refid="classShaderParser_1_1ConstRealValue_1aeb3cee6868d60a27d051c3b8da6d4013" kindref="member">setValue</ref>(*(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*)&amp;val,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/>parser);</highlight></codeline>
<codeline lineno="563"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="564"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="565"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>newExpr-&gt;<ref refid="classShaderParser_1_1ConstRealValue_1aeb3cee6868d60a27d051c3b8da6d4013" kindref="member">setValue</ref>(<ref refid="namespacesemutils_1a1dac415db8fc672b85f17fd11c13d3b6" kindref="member">semutils::real_number</ref>(s.real_value),<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/>parser);</highlight></codeline>
<codeline lineno="566"><highlight class="normal"></highlight></codeline>
<codeline lineno="567"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="568"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="569"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(s.color_value)</highlight></codeline>
<codeline lineno="570"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="571"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>it&apos;s<sp/>a<sp/>color4<sp/>value</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="572"><highlight class="normal"><sp/><sp/><sp/><sp/>eastl::unique_ptr&lt;ColorValueExpression&gt;<sp/>newExpr(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="classShaderParser_1_1ColorValueExpression" kindref="compound">ColorValueExpression</ref>(s.color_value-&gt;decl));</highlight></codeline>
<codeline lineno="573"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!parseColor(*s.color_value,<sp/>newExpr.get(),<sp/>ctx))</highlight></codeline>
<codeline lineno="574"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="575"><highlight class="normal"></highlight></codeline>
<codeline lineno="576"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(colorChExpr)</highlight></codeline>
<codeline lineno="577"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="578"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>colorChExpr-&gt;setChild(newExpr.get());</highlight></codeline>
<codeline lineno="579"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>e-&gt;<ref refid="classShaderParser_1_1ComplexExpression_1a1cfcdaf2ee0204346bde3a7961720734" kindref="member">setOperand</ref>(op_type,<sp/>colorChExpr.get());</highlight></codeline>
<codeline lineno="580"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>colorChExpr.release();</highlight></codeline>
<codeline lineno="581"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="582"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="583"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="584"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>e-&gt;<ref refid="classShaderParser_1_1ComplexExpression_1a1cfcdaf2ee0204346bde3a7961720734" kindref="member">setOperand</ref>(op_type,<sp/>newExpr.get());</highlight></codeline>
<codeline lineno="585"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="586"><highlight class="normal"></highlight></codeline>
<codeline lineno="587"><highlight class="normal"><sp/><sp/><sp/><sp/>newExpr-&gt;<ref refid="classShaderParser_1_1Expression_1a6438a4e71937292586b86d9e3e1202f9" kindref="member">setUnaryOperator</ref>(opType);</highlight></codeline>
<codeline lineno="588"><highlight class="normal"><sp/><sp/><sp/><sp/>newExpr.release();</highlight></codeline>
<codeline lineno="589"><highlight class="normal"></highlight></codeline>
<codeline lineno="590"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="591"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="592"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="593"><highlight class="normal">}</highlight></codeline>
<codeline lineno="594"><highlight class="normal"></highlight></codeline>
<codeline lineno="595"><highlight class="normal"></highlight></codeline>
<codeline lineno="596"><highlight class="normal"></highlight><highlight class="comment">//<sp/>parse<sp/>color</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="597"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>ExpressionParser::parseColor(ShaderTerminal::arithmetic_color<sp/>&amp;s,<sp/><ref refid="classShaderParser_1_1ColorValueExpression" kindref="compound">ColorValueExpression</ref><sp/>*e,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Context<sp/>&amp;ctx)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="598"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="599"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!e)</highlight></codeline>
<codeline lineno="600"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="601"><highlight class="normal"></highlight></codeline>
<codeline lineno="602"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>current_operand<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="603"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>expr_to_parse<sp/>:<sp/>{s.expr0,<sp/>s.expr1,<sp/>s.expr2,<sp/>s.expr3})</highlight></codeline>
<codeline lineno="604"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="605"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!expr_to_parse)</highlight></codeline>
<codeline lineno="606"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="607"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(current_operand<sp/>&gt;=<sp/>4)</highlight></codeline>
<codeline lineno="608"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="609"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>e-&gt;<ref refid="classShaderParser_1_1ComplexExpression_1a1cfcdaf2ee0204346bde3a7961720734" kindref="member">setOperand</ref>(shexpr::OperandType(current_operand++),<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="classShaderParser_1_1ConstRealValue" kindref="compound">ConstRealValue</ref>(s.decl,<sp/>0));</highlight></codeline>
<codeline lineno="610"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="611"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="612"><highlight class="normal"></highlight></codeline>
<codeline lineno="613"><highlight class="normal"><sp/><sp/><sp/><sp/>eastl::unique_ptr&lt;ComplexExpression&gt;<sp/>expr(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="classShaderParser_1_1ComplexExpression" kindref="compound">ComplexExpression</ref>(expr_to_parse,<sp/>shexpr::VT_REAL,<sp/>0));</highlight></codeline>
<codeline lineno="614"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="classShaderParser_1_1ExpressionParser_1a107fbfb633c8a18c8f24fac035605fe6" kindref="member">parseExpression</ref>(*expr_to_parse,<sp/>expr.get(),<sp/>ctx))</highlight></codeline>
<codeline lineno="615"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="616"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>channels<sp/>=<sp/>expr-&gt;getChannels();</highlight></codeline>
<codeline lineno="617"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(channels<sp/>&gt;<sp/>1)</highlight></codeline>
<codeline lineno="618"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="619"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>channels;<sp/>j++)</highlight></codeline>
<codeline lineno="620"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="621"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>expr.reset(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="classShaderParser_1_1ComplexExpression" kindref="compound">ComplexExpression</ref>(expr_to_parse,<sp/>shexpr::VT_REAL,<sp/>j));</highlight></codeline>
<codeline lineno="622"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="classShaderParser_1_1ExpressionParser_1a107fbfb633c8a18c8f24fac035605fe6" kindref="member">parseExpression</ref>(*expr_to_parse,<sp/>expr.get(),<sp/>ctx))</highlight></codeline>
<codeline lineno="623"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="624"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>e-&gt;<ref refid="classShaderParser_1_1ComplexExpression_1a1cfcdaf2ee0204346bde3a7961720734" kindref="member">setOperand</ref>(shexpr::OperandType(current_operand++),<sp/>expr.release());</highlight></codeline>
<codeline lineno="625"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="626"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="627"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="628"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(expr-&gt;getValueType()<sp/>!=<sp/>shexpr::VT_REAL)</highlight></codeline>
<codeline lineno="629"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="630"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>expr.reset(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="classShaderParser_1_1ComplexExpression" kindref="compound">ComplexExpression</ref>(expr_to_parse,<sp/>shexpr::VT_COLOR4,<sp/>0));</highlight></codeline>
<codeline lineno="631"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="classShaderParser_1_1ExpressionParser_1a107fbfb633c8a18c8f24fac035605fe6" kindref="member">parseExpression</ref>(*expr_to_parse,<sp/>expr.get(),<sp/>ctx))</highlight></codeline>
<codeline lineno="632"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="633"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="634"><highlight class="normal"><sp/><sp/><sp/><sp/>e-&gt;<ref refid="classShaderParser_1_1ComplexExpression_1a1cfcdaf2ee0204346bde3a7961720734" kindref="member">setOperand</ref>(shexpr::OperandType(current_operand++),<sp/>expr.release());</highlight></codeline>
<codeline lineno="635"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="636"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(current_operand<sp/>!=<sp/>4)</highlight></codeline>
<codeline lineno="637"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="638"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="shErrorReporting_8h_1a634f6d6ca9a9f22c5eea4c9b8e20ef31" kindref="member">report_error</ref>(parser,<sp/>s.decl,<sp/></highlight><highlight class="stringliteral">&quot;Wrong<sp/>color<sp/>expression<sp/>with<sp/>%i<sp/>channels&quot;</highlight><highlight class="normal">,<sp/>current_operand);</highlight></codeline>
<codeline lineno="639"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="640"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="641"><highlight class="normal"></highlight></codeline>
<codeline lineno="642"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="643"><highlight class="normal">}</highlight></codeline>
<codeline lineno="644"><highlight class="normal"></highlight></codeline>
<codeline lineno="645"><highlight class="normal"></highlight><highlight class="comment">//<sp/>class<sp/>ExpressionParser</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="646"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="shExprParser.cpp"/>
  </compounddef>
</doxygen>
