<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.7" xml:lang="en-US">
  <compounddef id="classShaderParser_1_1Expression" kind="class" language="C++" prot="public" abstract="yes">
    <compoundname>ShaderParser::Expression</compoundname>
    <derivedcompoundref refid="classShaderParser_1_1ColorChannelExpression" prot="public" virt="non-virtual">ShaderParser::ColorChannelExpression</derivedcompoundref>
    <derivedcompoundref refid="classShaderParser_1_1ComplexExpression" prot="public" virt="non-virtual">ShaderParser::ComplexExpression</derivedcompoundref>
    <derivedcompoundref refid="classShaderParser_1_1ConstColor4Value" prot="public" virt="non-virtual">ShaderParser::ConstColor4Value</derivedcompoundref>
    <derivedcompoundref refid="classShaderParser_1_1ConstRealValue" prot="public" virt="non-virtual">ShaderParser::ConstRealValue</derivedcompoundref>
    <derivedcompoundref refid="classShaderParser_1_1LVarValueExpression" prot="public" virt="non-virtual">ShaderParser::LVarValueExpression</derivedcompoundref>
    <derivedcompoundref refid="classShaderParser_1_1StVarValueExpression" prot="public" virt="non-virtual">ShaderParser::StVarValueExpression</derivedcompoundref>
    <includes refid="shExpr_8h" local="no">shExpr.h</includes>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classShaderParser_1_1Expression_1accc7759e0458cf3d0a865611d1265c23" prot="private" static="no" mutable="no">
        <type><ref refid="classShaderParser_1_1Expression" kindref="compound">Expression</ref> *</type>
        <definition>Expression* ShaderParser::Expression::parent</definition>
        <argsstring></argsstring>
        <name>parent</name>
        <qualifiedname>ShaderParser::Expression::parent</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="shExpr.h" line="110" column="14" bodyfile="shExpr.h" bodystart="110" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classShaderParser_1_1Expression_1accb5267b122c76dd74b1ad6d88e6d57b" prot="private" static="no" mutable="no">
        <type>shexpr::UnaryOperator</type>
        <definition>shexpr::UnaryOperator ShaderParser::Expression::unaryOp</definition>
        <argsstring></argsstring>
        <name>unaryOp</name>
        <qualifiedname>ShaderParser::Expression::unaryOp</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="shExpr.h" line="111" column="25" bodyfile="shExpr.h" bodystart="111" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classShaderParser_1_1Expression_1a097efc4dc302e4d842e7653cfa2ca236" prot="private" static="no" mutable="no">
        <type>Symbol *</type>
        <definition>Symbol* ShaderParser::Expression::parserSym</definition>
        <argsstring></argsstring>
        <name>parserSym</name>
        <qualifiedname>ShaderParser::Expression::parserSym</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="shExpr.h" line="112" column="10" bodyfile="shExpr.h" bodystart="112" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classShaderParser_1_1Expression_1a4aeeda4b23b0d2b14c2ad2caab0390c5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>ShaderParser::Expression::Expression</definition>
        <argsstring>(Symbol *parser_sym)</argsstring>
        <name>Expression</name>
        <qualifiedname>ShaderParser::Expression::Expression</qualifiedname>
        <param>
          <type>Symbol *</type>
          <declname>parser_sym</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="shExpr.h" line="36" column="3" bodyfile="shExpr.h" bodystart="36" bodyend="36"/>
      </memberdef>
      <memberdef kind="function" id="classShaderParser_1_1Expression_1a9e01aa5ac9dd2e26fa87d4cdd7a042ca" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type></type>
        <definition>virtual ShaderParser::Expression::~Expression</definition>
        <argsstring>()</argsstring>
        <name>~Expression</name>
        <qualifiedname>ShaderParser::Expression::~Expression</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="shExpr.h" line="37" column="11" bodyfile="shExpr.h" bodystart="37" bodyend="37"/>
      </memberdef>
      <memberdef kind="function" id="classShaderParser_1_1Expression_1ab8876717d35f647420a5c3bfd7c1c50c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>shexpr::Type</type>
        <definition>virtual shexpr::Type ShaderParser::Expression::getType</definition>
        <argsstring>() const =0</argsstring>
        <name>getType</name>
        <qualifiedname>ShaderParser::Expression::getType</qualifiedname>
        <reimplementedby refid="classShaderParser_1_1ComplexExpression_1abaeea49f74548b46fcc38a0d09b146bb">getType</reimplementedby>
        <reimplementedby refid="classShaderParser_1_1ColorChannelExpression_1a283d759ed61f8b58be2792a7da7a1946">getType</reimplementedby>
        <reimplementedby refid="classShaderParser_1_1ConstRealValue_1a100b77607372a4189c6c3bd5937cbefb">getType</reimplementedby>
        <reimplementedby refid="classShaderParser_1_1ConstColor4Value_1a569fc50df0b0b6856519cdeeda1e32fa">getType</reimplementedby>
        <reimplementedby refid="classShaderParser_1_1ColorValueExpression_1a58e68b670d5f408896ae1f1d1fbb0fb9">getType</reimplementedby>
        <reimplementedby refid="classShaderParser_1_1LVarValueExpression_1a74ca390d1f6c25e2cc018fdd7d031ec8">getType</reimplementedby>
        <reimplementedby refid="classShaderParser_1_1StVarValueExpression_1ab4e9a88ae316cc6a97ec050219d24a70">getType</reimplementedby>
        <reimplementedby refid="classShaderParser_1_1FunctionExpression_1aa41f7dc5faf4a8bb2a5b9389fac62c60">getType</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="shExpr.h" line="40" column="24"/>
      </memberdef>
      <memberdef kind="function" id="classShaderParser_1_1Expression_1acc2906c41ab9f1277d513f3c2c97096d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>shexpr::ValueType</type>
        <definition>virtual shexpr::ValueType ShaderParser::Expression::getValueType</definition>
        <argsstring>() const =0</argsstring>
        <name>getValueType</name>
        <qualifiedname>ShaderParser::Expression::getValueType</qualifiedname>
        <reimplementedby refid="classShaderParser_1_1ComplexExpression_1a7f8f55c1b66662f2dd471784d111309a">getValueType</reimplementedby>
        <reimplementedby refid="classShaderParser_1_1SingleColorChannelExpression_1a3d7542112cf0a479f666d1faad6c0ea1">getValueType</reimplementedby>
        <reimplementedby refid="classShaderParser_1_1MultiColorChannelExpression_1acf56b906cfdc2ef363729d20c174c78b">getValueType</reimplementedby>
        <reimplementedby refid="classShaderParser_1_1ConstRealValue_1a57ee112e12d4b11cebcf34e8e71d0b71">getValueType</reimplementedby>
        <reimplementedby refid="classShaderParser_1_1ConstColor4Value_1a8d1678e9360104a5fb81aa79ad3d8233">getValueType</reimplementedby>
        <reimplementedby refid="classShaderParser_1_1ColorValueExpression_1aa677e0f46de9bee9c1389324d2bc15d1">getValueType</reimplementedby>
        <reimplementedby refid="classShaderParser_1_1LVarValueExpression_1abddd6c7a42162921b169c2d5c57485be">getValueType</reimplementedby>
        <reimplementedby refid="classShaderParser_1_1StVarValueExpression_1a9f996d2995866eb138d273fa85f95019">getValueType</reimplementedby>
        <reimplementedby refid="classShaderParser_1_1FunctionExpression_1a1622d2723f187b292cfdfb2b4138bb97">getValueType</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="shExpr.h" line="43" column="29"/>
      </memberdef>
      <memberdef kind="function" id="classShaderParser_1_1Expression_1adf4dc5757229bb9e7a7d50d3cc6d82f0" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void Expression::assembleBytecode</definition>
        <argsstring>(CodeTable &amp;code, Register &amp;dest_reg, StcodeVMRegisterAllocator &amp;reg_allocator, bool is_integer) const</argsstring>
        <name>assembleBytecode</name>
        <qualifiedname>ShaderParser::Expression::assembleBytecode</qualifiedname>
        <reimplementedby refid="classShaderParser_1_1ComplexExpression_1a6ea797735f195ab719d1df1e22f4d562">assembleBytecode</reimplementedby>
        <reimplementedby refid="classShaderParser_1_1SingleColorChannelExpression_1a2be4627ffaf4483c23d205cbf5bc30d5">assembleBytecode</reimplementedby>
        <reimplementedby refid="classShaderParser_1_1MultiColorChannelExpression_1aa715a3cd3971440e86f5a6b603349780">assembleBytecode</reimplementedby>
        <reimplementedby refid="classShaderParser_1_1ConstRealValue_1a11150a1ddef4090a113bb510bae6d994">assembleBytecode</reimplementedby>
        <reimplementedby refid="classShaderParser_1_1ConstColor4Value_1aa1746206ae1903934192be0dd811d25b">assembleBytecode</reimplementedby>
        <reimplementedby refid="classShaderParser_1_1ColorValueExpression_1ac70c52bfd10fc141e39585dc74e7c5ac">assembleBytecode</reimplementedby>
        <reimplementedby refid="classShaderParser_1_1LVarValueExpression_1a8db294081e3dfc8d66e0d4c042066fd7">assembleBytecode</reimplementedby>
        <reimplementedby refid="classShaderParser_1_1StVarValueExpression_1aec6340a071ff4cce2b0962644738384b">assembleBytecode</reimplementedby>
        <reimplementedby refid="classShaderParser_1_1FunctionExpression_1ad3c04213cfb60f770eab5a25e585a9f2">assembleBytecode</reimplementedby>
        <param>
          <type><ref refid="namespaceShaderParser_1a732af6cbcecefe1051d9165d3718d702" kindref="member">CodeTable</ref> &amp;</type>
          <declname>code</declname>
        </param>
        <param>
          <type><ref refid="classRegister" kindref="compound">Register</ref> &amp;</type>
          <declname>dest_reg</declname>
        </param>
        <param>
          <type><ref refid="classStcodeVMRegisterAllocator" kindref="compound">StcodeVMRegisterAllocator</ref> &amp;</type>
          <declname>reg_allocator</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>is_integer</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="shExpr.h" line="46" column="16" bodyfile="shExpr.cpp" bodystart="78" bodyend="88"/>
      </memberdef>
      <memberdef kind="function" id="classShaderParser_1_1Expression_1a9487371df0a50670438cc4343d06cdb2" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void Expression::assembleCpp</definition>
        <argsstring>(StcodeExpression &amp;cpp_expr, bool is_integer) const</argsstring>
        <name>assembleCpp</name>
        <qualifiedname>ShaderParser::Expression::assembleCpp</qualifiedname>
        <reimplementedby refid="classShaderParser_1_1ComplexExpression_1a01dc2bc138b372bde6ed31372e4d6cbf">assembleCpp</reimplementedby>
        <reimplementedby refid="classShaderParser_1_1SingleColorChannelExpression_1ae2877687d5d67b8d677b37142737cffc">assembleCpp</reimplementedby>
        <reimplementedby refid="classShaderParser_1_1MultiColorChannelExpression_1a490a95ce0b3f52d197d0430b9e04ce9c">assembleCpp</reimplementedby>
        <reimplementedby refid="classShaderParser_1_1ConstRealValue_1a278ba5a03fa343b8bbb37b86b8ac9072">assembleCpp</reimplementedby>
        <reimplementedby refid="classShaderParser_1_1ConstColor4Value_1ab941266415cc8ebe95c805425d8262d9">assembleCpp</reimplementedby>
        <reimplementedby refid="classShaderParser_1_1ColorValueExpression_1a1116216acf29e6a77e5d620129a933e2">assembleCpp</reimplementedby>
        <reimplementedby refid="classShaderParser_1_1LVarValueExpression_1a8e477ea0da64c00d95bdf925c9d42d64">assembleCpp</reimplementedby>
        <reimplementedby refid="classShaderParser_1_1StVarValueExpression_1a4a7bf1ddd4f8f4cb3cf5e63d6b9a6e7b">assembleCpp</reimplementedby>
        <reimplementedby refid="classShaderParser_1_1FunctionExpression_1a5f41ffb739d74300e4da96ff6b4ef28f">assembleCpp</reimplementedby>
        <param>
          <type><ref refid="structStcodeExpression" kindref="compound">StcodeExpression</ref> &amp;</type>
          <declname>cpp_expr</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>is_integer</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="shExpr.h" line="47" column="16" bodyfile="shExpr.cpp" bodystart="90" bodyend="90"/>
      </memberdef>
      <memberdef kind="function" id="classShaderParser_1_1Expression_1ac19dd34018b4470ad166a8ab244f981d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool Expression::canConvert</definition>
        <argsstring>(shexpr::ValueType vt) const</argsstring>
        <name>canConvert</name>
        <qualifiedname>ShaderParser::Expression::canConvert</qualifiedname>
        <reimplementedby refid="classShaderParser_1_1ComplexExpression_1a1f6ee737b43f1de2ecbb05f5bbe49ec5">canConvert</reimplementedby>
        <reimplementedby refid="classShaderParser_1_1ColorValueExpression_1a53263625aca5ca771982e61ba025e264">canConvert</reimplementedby>
        <reimplementedby refid="classShaderParser_1_1LVarValueExpression_1a0f49a4d29619519ebc68f81492f9d1c3">canConvert</reimplementedby>
        <reimplementedby refid="classShaderParser_1_1FunctionExpression_1a087cca97677a843023cd102267bc741b">canConvert</reimplementedby>
        <param>
          <type>shexpr::ValueType</type>
          <declname>vt</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="shExpr.h" line="50" column="16" bodyfile="shExpr.cpp" bodystart="166" bodyend="169"/>
      </memberdef>
      <memberdef kind="function" id="classShaderParser_1_1Expression_1a6438a4e71937292586b86d9e3e1202f9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void ShaderParser::Expression::setUnaryOperator</definition>
        <argsstring>(shexpr::UnaryOperator t)</argsstring>
        <name>setUnaryOperator</name>
        <qualifiedname>ShaderParser::Expression::setUnaryOperator</qualifiedname>
        <param>
          <type>shexpr::UnaryOperator</type>
          <declname>t</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="shExpr.h" line="53" column="15" bodyfile="shExpr.h" bodystart="53" bodyend="53"/>
      </memberdef>
      <memberdef kind="function" id="classShaderParser_1_1Expression_1a1ab07814f1b27a6786d043da4e080c44" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>shexpr::UnaryOperator</type>
        <definition>shexpr::UnaryOperator ShaderParser::Expression::getUnaryOperator</definition>
        <argsstring>() const</argsstring>
        <name>getUnaryOperator</name>
        <qualifiedname>ShaderParser::Expression::getUnaryOperator</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="shExpr.h" line="54" column="32" bodyfile="shExpr.h" bodystart="54" bodyend="54"/>
      </memberdef>
      <memberdef kind="function" id="classShaderParser_1_1Expression_1a21b42b73baa2d365e975d950b60a613d" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classShaderParser_1_1Expression" kindref="compound">Expression</ref> *</type>
        <definition>Expression * ShaderParser::Expression::getParent</definition>
        <argsstring>() const</argsstring>
        <name>getParent</name>
        <qualifiedname>ShaderParser::Expression::getParent</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="shExpr.h" line="57" column="21" bodyfile="shExpr.h" bodystart="57" bodyend="57"/>
      </memberdef>
      <memberdef kind="function" id="classShaderParser_1_1Expression_1a85fe9b97eae19d91e0affe293d3eefdf" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void ShaderParser::Expression::SetParent</definition>
        <argsstring>(Expression *p)</argsstring>
        <name>SetParent</name>
        <qualifiedname>ShaderParser::Expression::SetParent</qualifiedname>
        <param>
          <type><ref refid="classShaderParser_1_1Expression" kindref="compound">Expression</ref> *</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="shExpr.h" line="58" column="15" bodyfile="shExpr.h" bodystart="58" bodyend="58"/>
      </memberdef>
      <memberdef kind="function" id="classShaderParser_1_1Expression_1a5cd845a298cd30bc29c1d6176d90d7a5" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>bool</type>
        <definition>virtual bool ShaderParser::Expression::isConst</definition>
        <argsstring>() const =0</argsstring>
        <name>isConst</name>
        <qualifiedname>ShaderParser::Expression::isConst</qualifiedname>
        <reimplementedby refid="classShaderParser_1_1ComplexExpression_1a7194e5c6d1440272d923f2a43f91b323">isConst</reimplementedby>
        <reimplementedby refid="classShaderParser_1_1ColorChannelExpression_1a95fe662a6d979b5d4fa93f252c26d456">isConst</reimplementedby>
        <reimplementedby refid="classShaderParser_1_1ConstRealValue_1ac6cef603cabb406eb363ea35e2499896">isConst</reimplementedby>
        <reimplementedby refid="classShaderParser_1_1ConstColor4Value_1ad662d7b82b67f428e26c1879978f780f">isConst</reimplementedby>
        <reimplementedby refid="classShaderParser_1_1LVarValueExpression_1a00f0120434dc1f9136cec143b8d9118c">isConst</reimplementedby>
        <reimplementedby refid="classShaderParser_1_1StVarValueExpression_1ae117b9df5454b41d947b3423820f4b48">isConst</reimplementedby>
        <reimplementedby refid="classShaderParser_1_1FunctionExpression_1a549eb3d23dffc63e274162806bfcfb8e">isConst</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="shExpr.h" line="61" column="16"/>
      </memberdef>
      <memberdef kind="function" id="classShaderParser_1_1Expression_1a6670e4cb77f145766d8e787075ed7da9" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>bool</type>
        <definition>virtual bool ShaderParser::Expression::isDynamic</definition>
        <argsstring>() const =0</argsstring>
        <name>isDynamic</name>
        <qualifiedname>ShaderParser::Expression::isDynamic</qualifiedname>
        <reimplementedby refid="classShaderParser_1_1ComplexExpression_1a16bdebae479907f7361ce4fbfaa6f05e">isDynamic</reimplementedby>
        <reimplementedby refid="classShaderParser_1_1ColorChannelExpression_1ac83da685f248d7f6864d62165fc562b5">isDynamic</reimplementedby>
        <reimplementedby refid="classShaderParser_1_1ConstRealValue_1a773ff3e880c3c623beae143dcbc87dd6">isDynamic</reimplementedby>
        <reimplementedby refid="classShaderParser_1_1ConstColor4Value_1ab3f40506560a5c0ea91be98462bf3cec">isDynamic</reimplementedby>
        <reimplementedby refid="classShaderParser_1_1LVarValueExpression_1a931670ebd73affa517160b77c98bbe6c">isDynamic</reimplementedby>
        <reimplementedby refid="classShaderParser_1_1StVarValueExpression_1a4558073b696ec879a4b82482fd41558d">isDynamic</reimplementedby>
        <reimplementedby refid="classShaderParser_1_1FunctionExpression_1a7b71c9d3661f883523f9db8167959ed3">isDynamic</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="shExpr.h" line="64" column="16"/>
      </memberdef>
      <memberdef kind="function" id="classShaderParser_1_1Expression_1a8941f97eca15c43e1ecd37d5c7dc3caf" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>bool</type>
        <definition>bool Expression::evaluate</definition>
        <argsstring>(real &amp;out_value, Parser &amp;parser)=0</argsstring>
        <name>evaluate</name>
        <qualifiedname>ShaderParser::Expression::evaluate</qualifiedname>
        <reimplementedby refid="classShaderParser_1_1ComplexExpression_1a17a106337e194f2f9768a8e2a45abb8d">evaluate</reimplementedby>
        <reimplementedby refid="classShaderParser_1_1SingleColorChannelExpression_1aa81c400ed78862b9224cce51671a73d2">evaluate</reimplementedby>
        <reimplementedby refid="classShaderParser_1_1MultiColorChannelExpression_1ad253514a8b2bf70f5ad56b037b8a2d8e">evaluate</reimplementedby>
        <reimplementedby refid="classShaderParser_1_1ConstRealValue_1a1a2c9c9229d16753369a7327de7d927b">evaluate</reimplementedby>
        <reimplementedby refid="classShaderParser_1_1ConstColor4Value_1a5a1a2a084c350273d596e0dbcdf6c277">evaluate</reimplementedby>
        <reimplementedby refid="classShaderParser_1_1ColorValueExpression_1a8d9ab9acc195ec696a74533ce4f48d00">evaluate</reimplementedby>
        <reimplementedby refid="classShaderParser_1_1LVarValueExpression_1a2e94316249c1db7d1427118a3c6f14ee">evaluate</reimplementedby>
        <reimplementedby refid="classShaderParser_1_1StVarValueExpression_1a0a837b4215cbf2e18fdf57a1b3f2f12b">evaluate</reimplementedby>
        <reimplementedby refid="classShaderParser_1_1FunctionExpression_1a79b6ac1aeae30ee663e736910c5f0871">evaluate</reimplementedby>
        <param>
          <type>real &amp;</type>
          <declname>out_value</declname>
        </param>
        <param>
          <type><ref refid="structParser" kindref="compound">Parser</ref> &amp;</type>
          <declname>parser</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="shExpr.h" line="67" column="16" bodyfile="shExpr.cpp" bodystart="135" bodyend="148"/>
      </memberdef>
      <memberdef kind="function" id="classShaderParser_1_1Expression_1af8c5f003ef7d6a21c423c741f3587a1f" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>bool</type>
        <definition>bool Expression::evaluate</definition>
        <argsstring>(Color4 &amp;out_value, Parser &amp;parser)=0</argsstring>
        <name>evaluate</name>
        <qualifiedname>ShaderParser::Expression::evaluate</qualifiedname>
        <reimplementedby refid="classShaderParser_1_1ComplexExpression_1ad680203c116d37d80cef50b2b7fe4a2d">evaluate</reimplementedby>
        <reimplementedby refid="classShaderParser_1_1SingleColorChannelExpression_1ab30a7a24234d9f280b2d87fcd3c67d2a">evaluate</reimplementedby>
        <reimplementedby refid="classShaderParser_1_1MultiColorChannelExpression_1a1a7e3d97a9c5fb72a14c69072ddac842">evaluate</reimplementedby>
        <reimplementedby refid="classShaderParser_1_1ConstRealValue_1ad90f8c0f6e9bd30ab7797f92473d062a">evaluate</reimplementedby>
        <reimplementedby refid="classShaderParser_1_1ConstColor4Value_1a465f9a198c6263d0827edf1775480cc9">evaluate</reimplementedby>
        <reimplementedby refid="classShaderParser_1_1ColorValueExpression_1ae5f85ec8745be4a12ce72fea6e21515b">evaluate</reimplementedby>
        <reimplementedby refid="classShaderParser_1_1LVarValueExpression_1a51942e3f8712796b62906c8691887cfe">evaluate</reimplementedby>
        <reimplementedby refid="classShaderParser_1_1StVarValueExpression_1a62becd87c911a33d8731c10ad4f8ad36">evaluate</reimplementedby>
        <reimplementedby refid="classShaderParser_1_1FunctionExpression_1a51cde9f4f336f129343d1332232c7321">evaluate</reimplementedby>
        <param>
          <type>Color4 &amp;</type>
          <declname>out_value</declname>
        </param>
        <param>
          <type><ref refid="structParser" kindref="compound">Parser</ref> &amp;</type>
          <declname>parser</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="shExpr.h" line="70" column="16" bodyfile="shExpr.cpp" bodystart="151" bodyend="164"/>
      </memberdef>
      <memberdef kind="function" id="classShaderParser_1_1Expression_1a6504a6f642f08f1cf420bebda197efaf" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>bool</type>
        <definition>virtual bool ShaderParser::Expression::collapseNumbers</definition>
        <argsstring>(Parser &amp;parser)=0</argsstring>
        <name>collapseNumbers</name>
        <qualifiedname>ShaderParser::Expression::collapseNumbers</qualifiedname>
        <reimplementedby refid="classShaderParser_1_1ComplexExpression_1a16fa3be80484ab01a7e1bbc713c53b68">collapseNumbers</reimplementedby>
        <reimplementedby refid="classShaderParser_1_1ColorChannelExpression_1a0155330eb5dae83e0d56d7e526932132">collapseNumbers</reimplementedby>
        <reimplementedby refid="classShaderParser_1_1ConstRealValue_1ae8f55034acde026abb34233b2a021174">collapseNumbers</reimplementedby>
        <reimplementedby refid="classShaderParser_1_1ConstColor4Value_1af5e400c34c53b4eb8b2812a20e856127">collapseNumbers</reimplementedby>
        <reimplementedby refid="classShaderParser_1_1ColorValueExpression_1ad0f1cead895d0beb20ce067ff2597b8b">collapseNumbers</reimplementedby>
        <reimplementedby refid="classShaderParser_1_1LVarValueExpression_1a3470ba2d32c293b696e5cdbd98135255">collapseNumbers</reimplementedby>
        <reimplementedby refid="classShaderParser_1_1StVarValueExpression_1a87d67152a7ee7b12b8461abf8d9f9d9a">collapseNumbers</reimplementedby>
        <reimplementedby refid="classShaderParser_1_1FunctionExpression_1a2d8cf9662e55e5ab14fc506ee8887432">collapseNumbers</reimplementedby>
        <param>
          <type><ref refid="structParser" kindref="compound">Parser</ref> &amp;</type>
          <declname>parser</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="shExpr.h" line="73" column="16"/>
      </memberdef>
      <memberdef kind="function" id="classShaderParser_1_1Expression_1a066eed5146bd48cfcc3acb30a50e9068" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>Symbol *</type>
        <definition>Symbol * ShaderParser::Expression::getParserSymbol</definition>
        <argsstring>() const</argsstring>
        <name>getParserSymbol</name>
        <qualifiedname>ShaderParser::Expression::getParserSymbol</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="shExpr.h" line="76" column="10" bodyfile="shExpr.h" bodystart="76" bodyend="76"/>
      </memberdef>
      <memberdef kind="function" id="classShaderParser_1_1Expression_1a63e9f75ae1b742c5ffcbd7aa65b1963a" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>Terminal *</type>
        <definition>virtual Terminal * ShaderParser::Expression::getTerminal</definition>
        <argsstring>() const</argsstring>
        <name>getTerminal</name>
        <qualifiedname>ShaderParser::Expression::getTerminal</qualifiedname>
        <reimplementedby refid="classShaderParser_1_1ColorChannelExpression_1aa81a68a7672936ba4804ced027623354">getTerminal</reimplementedby>
        <reimplementedby refid="classShaderParser_1_1SingleColorChannelExpression_1a92d6e9e07882447bb2d0a3311db553ec">getTerminal</reimplementedby>
        <reimplementedby refid="classShaderParser_1_1MultiColorChannelExpression_1ab45d4e0c5c8be65b9dcde932772ed71d">getTerminal</reimplementedby>
        <reimplementedby refid="classShaderParser_1_1ConstRealValue_1a20d924abd6279d99bc43da6a71ad8e83">getTerminal</reimplementedby>
        <reimplementedby refid="classShaderParser_1_1ConstColor4Value_1a4424c3463ff19f3824387a0d8e418c7b">getTerminal</reimplementedby>
        <reimplementedby refid="classShaderParser_1_1ColorValueExpression_1ad0541026bf01f6c45b6f2e2fc34c4251">getTerminal</reimplementedby>
        <reimplementedby refid="classShaderParser_1_1LVarValueExpression_1a4fa703c29696a8451f705b613b34c9c8">getTerminal</reimplementedby>
        <reimplementedby refid="classShaderParser_1_1StVarValueExpression_1af2db04305a753533783ea661e167a2b2">getTerminal</reimplementedby>
        <reimplementedby refid="classShaderParser_1_1FunctionExpression_1aa94a57ffeced2cfd2afdab32478af185">getTerminal</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="shExpr.h" line="77" column="20" bodyfile="shExpr.h" bodystart="77" bodyend="77"/>
      </memberdef>
      <memberdef kind="function" id="classShaderParser_1_1Expression_1a624688ee88ace66f0cafa9481d4e4536" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>int</type>
        <definition>virtual int ShaderParser::Expression::getChannels</definition>
        <argsstring>() const</argsstring>
        <name>getChannels</name>
        <qualifiedname>ShaderParser::Expression::getChannels</qualifiedname>
        <reimplementedby refid="classShaderParser_1_1ComplexExpression_1ac2fe7fc73b1e22177129c4465a6609eb">getChannels</reimplementedby>
        <reimplementedby refid="classShaderParser_1_1MultiColorChannelExpression_1aeb043986daa6fd0c77927c88bd20b629">getChannels</reimplementedby>
        <reimplementedby refid="classShaderParser_1_1ConstColor4Value_1a860ded90ad774d5bf101b78b9c734b8e">getChannels</reimplementedby>
        <reimplementedby refid="classShaderParser_1_1ColorValueExpression_1a7fec4ffeb9dad68b606e3ad21d77d696">getChannels</reimplementedby>
        <reimplementedby refid="classShaderParser_1_1LVarValueExpression_1aa4c83faa60dd239c1f36de3a96d13327">getChannels</reimplementedby>
        <reimplementedby refid="classShaderParser_1_1StVarValueExpression_1a76695c661161f292b30bd445b008456d">getChannels</reimplementedby>
        <reimplementedby refid="classShaderParser_1_1FunctionExpression_1a4969d3a58c0d567357c230dae020e979">getChannels</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="shExpr.h" line="79" column="15" bodyfile="shExpr.h" bodystart="79" bodyend="79"/>
      </memberdef>
      <memberdef kind="function" id="classShaderParser_1_1Expression_1a20844e4f958c20d70cc4824650652f67" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>Symbol *</type>
        <definition>virtual Symbol * ShaderParser::Expression::hasDynamicAndMaterialTermsAt</definition>
        <argsstring>() const</argsstring>
        <name>hasDynamicAndMaterialTermsAt</name>
        <qualifiedname>ShaderParser::Expression::hasDynamicAndMaterialTermsAt</qualifiedname>
        <reimplementedby refid="classShaderParser_1_1ComplexExpression_1a7d82b28b4591cd98358adaf95cb62164">hasDynamicAndMaterialTermsAt</reimplementedby>
        <reimplementedby refid="classShaderParser_1_1LVarValueExpression_1aebd84483be176f31106ba922d3ae5fd0">hasDynamicAndMaterialTermsAt</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="shExpr.h" line="83" column="18" bodyfile="shExpr.h" bodystart="83" bodyend="83"/>
      </memberdef>
      <memberdef kind="function" id="classShaderParser_1_1Expression_1a77ed6f7aab61c1f6367d6c1f5fcfdbb1" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classRegister" kindref="compound">Register</ref></type>
        <definition>Register Expression::allocateRegForResult</definition>
        <argsstring>(StcodeVMRegisterAllocator &amp;reg_allocator) const</argsstring>
        <name>allocateRegForResult</name>
        <qualifiedname>ShaderParser::Expression::allocateRegForResult</qualifiedname>
        <param>
          <type><ref refid="classStcodeVMRegisterAllocator" kindref="compound">StcodeVMRegisterAllocator</ref> &amp;</type>
          <declname>reg_allocator</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="shExpr.h" line="86" column="12" bodyfile="shExpr.cpp" bodystart="65" bodyend="74"/>
      </memberdef>
      <memberdef kind="function" id="classShaderParser_1_1Expression_1a08d3c7f008450499ebf2ce26a8f346d5" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Expression::dump</definition>
        <argsstring>(int level=0) const</argsstring>
        <name>dump</name>
        <qualifiedname>ShaderParser::Expression::dump</qualifiedname>
        <param>
          <type>int</type>
          <declname>level</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="shExpr.h" line="103" column="8" bodyfile="shExpr.cpp" bodystart="172" bodyend="178"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="classShaderParser_1_1Expression_1a68e771cf9c1584e59c0f5c5e298d3eea" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char * Expression::__getName</definition>
        <argsstring>(shexpr::ValueType vt)</argsstring>
        <name>__getName</name>
        <qualifiedname>ShaderParser::Expression::__getName</qualifiedname>
        <param>
          <type>shexpr::ValueType</type>
          <declname>vt</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="shExpr.h" line="92" column="21" bodyfile="shExpr.cpp" bodystart="26" bodyend="35"/>
      </memberdef>
      <memberdef kind="function" id="classShaderParser_1_1Expression_1aaec5897d85a74cfadd26bf18752a23f1" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char * Expression::__getName</definition>
        <argsstring>(shexpr::BinaryOperator op)</argsstring>
        <name>__getName</name>
        <qualifiedname>ShaderParser::Expression::__getName</qualifiedname>
        <param>
          <type>shexpr::BinaryOperator</type>
          <declname>op</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="shExpr.h" line="93" column="21" bodyfile="shExpr.cpp" bodystart="37" bodyend="48"/>
      </memberdef>
      <memberdef kind="function" id="classShaderParser_1_1Expression_1a633bdaee53233d1474dacd39ab7e2d89" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char * Expression::__getName</definition>
        <argsstring>(shexpr::ColorChannel cc)</argsstring>
        <name>__getName</name>
        <qualifiedname>ShaderParser::Expression::__getName</qualifiedname>
        <param>
          <type>shexpr::ColorChannel</type>
          <declname>cc</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="shExpr.h" line="94" column="21" bodyfile="shExpr.cpp" bodystart="50" bodyend="61"/>
      </memberdef>
      <memberdef kind="function" id="classShaderParser_1_1Expression_1a7cc153456d29d1e3e52ec2d20563b5d1" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Expression::assembleBytecodeForConstant</definition>
        <argsstring>(CodeTable &amp;code, real v, int dest_reg, bool is_integer)</argsstring>
        <name>assembleBytecodeForConstant</name>
        <qualifiedname>ShaderParser::Expression::assembleBytecodeForConstant</qualifiedname>
        <param>
          <type><ref refid="namespaceShaderParser_1a732af6cbcecefe1051d9165d3718d702" kindref="member">CodeTable</ref> &amp;</type>
          <declname>code</declname>
        </param>
        <param>
          <type>real</type>
          <declname>v</declname>
        </param>
        <param>
          <type>int</type>
          <declname>dest_reg</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>is_integer</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="shExpr.h" line="97" column="15" bodyfile="shExpr.cpp" bodystart="94" bodyend="109"/>
      </memberdef>
      <memberdef kind="function" id="classShaderParser_1_1Expression_1ac03d00732e3242385f7c5efca77f5d3f" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Expression::assembleBytecodeForConstant</definition>
        <argsstring>(CodeTable &amp;code, const Color4 &amp;v, int dest_reg)</argsstring>
        <name>assembleBytecodeForConstant</name>
        <qualifiedname>ShaderParser::Expression::assembleBytecodeForConstant</qualifiedname>
        <param>
          <type><ref refid="namespaceShaderParser_1a732af6cbcecefe1051d9165d3718d702" kindref="member">CodeTable</ref> &amp;</type>
          <declname>code</declname>
        </param>
        <param>
          <type>const Color4 &amp;</type>
          <declname>v</declname>
        </param>
        <param>
          <type>int</type>
          <declname>dest_reg</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="shExpr.h" line="98" column="15" bodyfile="shExpr.cpp" bodystart="111" bodyend="121"/>
      </memberdef>
      <memberdef kind="function" id="classShaderParser_1_1Expression_1a4037bf3eee8071bba8ab6886455769e1" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Expression::assembleCppForConstant</definition>
        <argsstring>(StcodeExpression &amp;cpp_expr, real v, bool is_integer)</argsstring>
        <name>assembleCppForConstant</name>
        <qualifiedname>ShaderParser::Expression::assembleCppForConstant</qualifiedname>
        <param>
          <type><ref refid="structStcodeExpression" kindref="compound">StcodeExpression</ref> &amp;</type>
          <declname>cpp_expr</declname>
        </param>
        <param>
          <type>real</type>
          <declname>v</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>is_integer</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="shExpr.h" line="99" column="15" bodyfile="shExpr.cpp" bodystart="123" bodyend="127"/>
      </memberdef>
      <memberdef kind="function" id="classShaderParser_1_1Expression_1a56f313f3547738e55c1aada81a1dca07" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Expression::assembleCppForConstant</definition>
        <argsstring>(StcodeExpression &amp;cpp_expr, const Color4 &amp;v)</argsstring>
        <name>assembleCppForConstant</name>
        <qualifiedname>ShaderParser::Expression::assembleCppForConstant</qualifiedname>
        <param>
          <type><ref refid="structStcodeExpression" kindref="compound">StcodeExpression</ref> &amp;</type>
          <declname>cpp_expr</declname>
        </param>
        <param>
          <type>const Color4 &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="shExpr.h" line="100" column="15" bodyfile="shExpr.cpp" bodystart="129" bodyend="132"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="classShaderParser_1_1Expression_1ae3261bc8b45356c6090bd84db2508fcb" prot="protected" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>void Expression::dump_internal</definition>
        <argsstring>(int level, const char *tabs) const =0</argsstring>
        <name>dump_internal</name>
        <qualifiedname>ShaderParser::Expression::dump_internal</qualifiedname>
        <reimplementedby refid="classShaderParser_1_1ComplexExpression_1a297558e23345f9282e9d9b75ac44ecf2">dump_internal</reimplementedby>
        <reimplementedby refid="classShaderParser_1_1SingleColorChannelExpression_1af8afa677d8e2e52f8fbb86b0b22330c4">dump_internal</reimplementedby>
        <reimplementedby refid="classShaderParser_1_1MultiColorChannelExpression_1a7c5922613d5761cfc21a50bf3c2e3255">dump_internal</reimplementedby>
        <reimplementedby refid="classShaderParser_1_1ConstRealValue_1a95383f2702bc96cf6713c0b908d09a17">dump_internal</reimplementedby>
        <reimplementedby refid="classShaderParser_1_1ConstColor4Value_1afd93fe82e75d74af73dfdf205129567e">dump_internal</reimplementedby>
        <reimplementedby refid="classShaderParser_1_1ColorValueExpression_1aadf77bd6e16d8c776718a43881fe900f">dump_internal</reimplementedby>
        <reimplementedby refid="classShaderParser_1_1LVarValueExpression_1ae89787d21775ed39ad324ed43b63ea2b">dump_internal</reimplementedby>
        <reimplementedby refid="classShaderParser_1_1StVarValueExpression_1a0a552f1b4936efbd505d39ddc76718b8">dump_internal</reimplementedby>
        <reimplementedby refid="classShaderParser_1_1FunctionExpression_1a4daace2187e4e109925beec6295d90a2">dump_internal</reimplementedby>
        <param>
          <type>int</type>
          <declname>level</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>tabs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="shExpr.h" line="107" column="16" bodyfile="shExpr.cpp" bodystart="181" bodyend="191"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="2">
        <label>ShaderParser::ColorChannelExpression</label>
        <link refid="classShaderParser_1_1ColorChannelExpression"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="6">
        <label>ShaderParser::ColorValueExpression</label>
        <link refid="classShaderParser_1_1ColorValueExpression"/>
        <childnode refid="5" relation="public-inheritance">
        </childnode>
      </node>
      <node id="5">
        <label>ShaderParser::ComplexExpression</label>
        <link refid="classShaderParser_1_1ComplexExpression"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="8">
        <label>ShaderParser::ConstColor4Value</label>
        <link refid="classShaderParser_1_1ConstColor4Value"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="9">
        <label>ShaderParser::ConstRealValue</label>
        <link refid="classShaderParser_1_1ConstRealValue"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1">
        <label>ShaderParser::Expression</label>
        <link refid="classShaderParser_1_1Expression"/>
      </node>
      <node id="7">
        <label>ShaderParser::FunctionExpression</label>
        <link refid="classShaderParser_1_1FunctionExpression"/>
        <childnode refid="5" relation="public-inheritance">
        </childnode>
      </node>
      <node id="10">
        <label>ShaderParser::LVarValueExpression</label>
        <link refid="classShaderParser_1_1LVarValueExpression"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>ShaderParser::MultiColorChannelExpression</label>
        <link refid="classShaderParser_1_1MultiColorChannelExpression"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4">
        <label>ShaderParser::SingleColorChannelExpression</label>
        <link refid="classShaderParser_1_1SingleColorChannelExpression"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="11">
        <label>ShaderParser::StVarValueExpression</label>
        <link refid="classShaderParser_1_1StVarValueExpression"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <location file="shExpr.h" line="32" column="1" bodyfile="shExpr.h" bodystart="33" bodyend="113"/>
    <listofallmembers>
      <member refid="classShaderParser_1_1Expression_1a68e771cf9c1584e59c0f5c5e298d3eea" prot="public" virt="non-virtual"><scope>ShaderParser::Expression</scope><name>__getName</name></member>
      <member refid="classShaderParser_1_1Expression_1aaec5897d85a74cfadd26bf18752a23f1" prot="public" virt="non-virtual"><scope>ShaderParser::Expression</scope><name>__getName</name></member>
      <member refid="classShaderParser_1_1Expression_1a633bdaee53233d1474dacd39ab7e2d89" prot="public" virt="non-virtual"><scope>ShaderParser::Expression</scope><name>__getName</name></member>
      <member refid="classShaderParser_1_1Expression_1a77ed6f7aab61c1f6367d6c1f5fcfdbb1" prot="public" virt="non-virtual"><scope>ShaderParser::Expression</scope><name>allocateRegForResult</name></member>
      <member refid="classShaderParser_1_1Expression_1adf4dc5757229bb9e7a7d50d3cc6d82f0" prot="public" virt="virtual"><scope>ShaderParser::Expression</scope><name>assembleBytecode</name></member>
      <member refid="classShaderParser_1_1Expression_1a7cc153456d29d1e3e52ec2d20563b5d1" prot="public" virt="non-virtual"><scope>ShaderParser::Expression</scope><name>assembleBytecodeForConstant</name></member>
      <member refid="classShaderParser_1_1Expression_1ac03d00732e3242385f7c5efca77f5d3f" prot="public" virt="non-virtual"><scope>ShaderParser::Expression</scope><name>assembleBytecodeForConstant</name></member>
      <member refid="classShaderParser_1_1Expression_1a9487371df0a50670438cc4343d06cdb2" prot="public" virt="virtual"><scope>ShaderParser::Expression</scope><name>assembleCpp</name></member>
      <member refid="classShaderParser_1_1Expression_1a4037bf3eee8071bba8ab6886455769e1" prot="public" virt="non-virtual"><scope>ShaderParser::Expression</scope><name>assembleCppForConstant</name></member>
      <member refid="classShaderParser_1_1Expression_1a56f313f3547738e55c1aada81a1dca07" prot="public" virt="non-virtual"><scope>ShaderParser::Expression</scope><name>assembleCppForConstant</name></member>
      <member refid="classShaderParser_1_1Expression_1ac19dd34018b4470ad166a8ab244f981d" prot="public" virt="virtual"><scope>ShaderParser::Expression</scope><name>canConvert</name></member>
      <member refid="classShaderParser_1_1Expression_1a6504a6f642f08f1cf420bebda197efaf" prot="public" virt="pure-virtual"><scope>ShaderParser::Expression</scope><name>collapseNumbers</name></member>
      <member refid="classShaderParser_1_1Expression_1a08d3c7f008450499ebf2ce26a8f346d5" prot="public" virt="non-virtual"><scope>ShaderParser::Expression</scope><name>dump</name></member>
      <member refid="classShaderParser_1_1Expression_1ae3261bc8b45356c6090bd84db2508fcb" prot="protected" virt="pure-virtual"><scope>ShaderParser::Expression</scope><name>dump_internal</name></member>
      <member refid="classShaderParser_1_1Expression_1a8941f97eca15c43e1ecd37d5c7dc3caf" prot="public" virt="pure-virtual"><scope>ShaderParser::Expression</scope><name>evaluate</name></member>
      <member refid="classShaderParser_1_1Expression_1af8c5f003ef7d6a21c423c741f3587a1f" prot="public" virt="pure-virtual"><scope>ShaderParser::Expression</scope><name>evaluate</name></member>
      <member refid="classShaderParser_1_1Expression_1a4aeeda4b23b0d2b14c2ad2caab0390c5" prot="public" virt="non-virtual"><scope>ShaderParser::Expression</scope><name>Expression</name></member>
      <member refid="classShaderParser_1_1Expression_1a624688ee88ace66f0cafa9481d4e4536" prot="public" virt="virtual"><scope>ShaderParser::Expression</scope><name>getChannels</name></member>
      <member refid="classShaderParser_1_1Expression_1a21b42b73baa2d365e975d950b60a613d" prot="public" virt="non-virtual"><scope>ShaderParser::Expression</scope><name>getParent</name></member>
      <member refid="classShaderParser_1_1Expression_1a066eed5146bd48cfcc3acb30a50e9068" prot="public" virt="non-virtual"><scope>ShaderParser::Expression</scope><name>getParserSymbol</name></member>
      <member refid="classShaderParser_1_1Expression_1a63e9f75ae1b742c5ffcbd7aa65b1963a" prot="public" virt="virtual"><scope>ShaderParser::Expression</scope><name>getTerminal</name></member>
      <member refid="classShaderParser_1_1Expression_1ab8876717d35f647420a5c3bfd7c1c50c" prot="public" virt="pure-virtual"><scope>ShaderParser::Expression</scope><name>getType</name></member>
      <member refid="classShaderParser_1_1Expression_1a1ab07814f1b27a6786d043da4e080c44" prot="public" virt="non-virtual"><scope>ShaderParser::Expression</scope><name>getUnaryOperator</name></member>
      <member refid="classShaderParser_1_1Expression_1acc2906c41ab9f1277d513f3c2c97096d" prot="public" virt="pure-virtual"><scope>ShaderParser::Expression</scope><name>getValueType</name></member>
      <member refid="classShaderParser_1_1Expression_1a20844e4f958c20d70cc4824650652f67" prot="public" virt="virtual"><scope>ShaderParser::Expression</scope><name>hasDynamicAndMaterialTermsAt</name></member>
      <member refid="classShaderParser_1_1Expression_1a5cd845a298cd30bc29c1d6176d90d7a5" prot="public" virt="pure-virtual"><scope>ShaderParser::Expression</scope><name>isConst</name></member>
      <member refid="classShaderParser_1_1Expression_1a6670e4cb77f145766d8e787075ed7da9" prot="public" virt="pure-virtual"><scope>ShaderParser::Expression</scope><name>isDynamic</name></member>
      <member refid="classShaderParser_1_1Expression_1accc7759e0458cf3d0a865611d1265c23" prot="private" virt="non-virtual"><scope>ShaderParser::Expression</scope><name>parent</name></member>
      <member refid="classShaderParser_1_1Expression_1a097efc4dc302e4d842e7653cfa2ca236" prot="private" virt="non-virtual"><scope>ShaderParser::Expression</scope><name>parserSym</name></member>
      <member refid="classShaderParser_1_1Expression_1a85fe9b97eae19d91e0affe293d3eefdf" prot="public" virt="non-virtual"><scope>ShaderParser::Expression</scope><name>SetParent</name></member>
      <member refid="classShaderParser_1_1Expression_1a6438a4e71937292586b86d9e3e1202f9" prot="public" virt="non-virtual"><scope>ShaderParser::Expression</scope><name>setUnaryOperator</name></member>
      <member refid="classShaderParser_1_1Expression_1accb5267b122c76dd74b1ad6d88e6d57b" prot="private" virt="non-virtual"><scope>ShaderParser::Expression</scope><name>unaryOp</name></member>
      <member refid="classShaderParser_1_1Expression_1a9e01aa5ac9dd2e26fa87d4cdd7a042ca" prot="public" virt="virtual"><scope>ShaderParser::Expression</scope><name>~Expression</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
