<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.7" xml:lang="en-US">
  <compounddef id="codeBlocks_8cpp" kind="file" language="C++">
    <compoundname>codeBlocks.cpp</compoundname>
    <includes refid="codeBlocks_8h" local="yes">codeBlocks.h</includes>
    <incdepgraph>
      <node id="90">
        <label>DebugLevel.h</label>
        <link refid="DebugLevel_8h"/>
        <childnode refid="38" relation="include">
        </childnode>
      </node>
      <node id="50">
        <label>blkHash.h</label>
        <link refid="blkHash_8h"/>
      </node>
      <node id="83">
        <label>boolVar.h</label>
        <link refid="boolVar_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="46" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>codeBlocks.cpp</label>
        <link refid="codeBlocks_8cpp"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>codeBlocks.h</label>
        <link refid="codeBlocks_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
      </node>
      <node id="7">
        <label>commonUtils.h</label>
        <link refid="commonUtils_8h"/>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
      </node>
      <node id="75">
        <label>compileResult.h</label>
        <link refid="compileResult_8h"/>
        <childnode refid="76" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
      </node>
      <node id="72">
        <label>const3d.h</label>
        <link refid="const3d_8h"/>
        <childnode refid="44" relation="include">
        </childnode>
      </node>
      <node id="17">
        <label>cppStcode.h</label>
        <link refid="cppStcode_8h"/>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="48" relation="include">
        </childnode>
        <childnode refid="50" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
        <childnode refid="47" relation="include">
        </childnode>
      </node>
      <node id="18">
        <label>cppStcodeAssembly.h</label>
        <link refid="cppStcodeAssembly_8h"/>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="39" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
        <childnode refid="41" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="43" relation="include">
        </childnode>
        <childnode refid="44" relation="include">
        </childnode>
        <childnode refid="45" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="46" relation="include">
        </childnode>
        <childnode refid="47" relation="include">
        </childnode>
      </node>
      <node id="19">
        <label>cppStcodeBuilder.h</label>
        <link refid="cppStcodeBuilder_8h"/>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
      </node>
      <node id="91">
        <label>cppStcodePlatformInfo.h</label>
        <link refid="cppStcodePlatformInfo_8h"/>
        <childnode refid="38" relation="include">
        </childnode>
      </node>
      <node id="66">
        <label>cppStcodeUtils.h</label>
        <link refid="cppStcodeUtils_8h"/>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="41" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="67" relation="include">
        </childnode>
      </node>
      <node id="57">
        <label>globVar.h</label>
        <link refid="globVar_8h"/>
        <childnode refid="58" relation="include">
        </childnode>
        <childnode refid="59" relation="include">
        </childnode>
        <childnode refid="51" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="60" relation="include">
        </childnode>
        <childnode refid="61" relation="include">
        </childnode>
        <childnode refid="62" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="63" relation="include">
        </childnode>
        <childnode refid="64" relation="include">
        </childnode>
      </node>
      <node id="89">
        <label>globalConfig.h</label>
        <link refid="globalConfig_8h"/>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="90" relation="include">
        </childnode>
        <childnode refid="91" relation="include">
        </childnode>
        <childnode refid="54" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="46" relation="include">
        </childnode>
      </node>
      <node id="30">
        <label>hash.h</label>
        <link refid="hash_8h"/>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
      </node>
      <node id="55">
        <label>hashStrings.h</label>
        <link refid="hashStrings_8h"/>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="51" relation="include">
        </childnode>
        <childnode refid="56" relation="include">
        </childnode>
        <childnode refid="46" relation="include">
        </childnode>
      </node>
      <node id="33">
        <label>hlslRegisters.h</label>
        <link refid="hlslRegisters_8h"/>
        <childnode refid="34" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="38" relation="include">
        </childnode>
      </node>
      <node id="71">
        <label>hlslStage.h</label>
        <link refid="hlslStage_8h"/>
        <childnode refid="72" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="73" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
        <childnode refid="38" relation="include">
        </childnode>
        <childnode refid="74" relation="include">
        </childnode>
      </node>
      <node id="53">
        <label>hwAssembly.h</label>
        <link refid="hwAssembly_8h"/>
        <childnode refid="11" relation="include">
        </childnode>
      </node>
      <node id="64">
        <label>intervals.h</label>
        <link refid="intervals_8h"/>
      </node>
      <node id="23">
        <label>nameMap.h</label>
        <link refid="nameMap_8h"/>
        <childnode refid="24" relation="include">
        </childnode>
      </node>
      <node id="84">
        <label>namedConst.h</label>
        <link refid="namedConst_8h"/>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="85" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="89" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="51" relation="include">
        </childnode>
        <childnode refid="92" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
      </node>
      <node id="48">
        <label>processes.h</label>
        <link refid="processes_8h"/>
        <childnode refid="49" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
      </node>
      <node id="65">
        <label>samplers.h</label>
        <link refid="samplers_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="57" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="61" relation="include">
        </childnode>
        <childnode refid="46" relation="include">
        </childnode>
      </node>
      <node id="93">
        <label>shAssumes.h</label>
        <link refid="shAssumes_8h"/>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="64" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="54" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="46" relation="include">
        </childnode>
      </node>
      <node id="15">
        <label>shCompContext.h</label>
        <link refid="shCompContext_8h"/>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="53" relation="include">
        </childnode>
        <childnode refid="54" relation="include">
        </childnode>
      </node>
      <node id="16">
        <label>shCompilationInfo.h</label>
        <link refid="shCompilationInfo_8h"/>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="50" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="51" relation="include">
        </childnode>
        <childnode refid="52" relation="include">
        </childnode>
      </node>
      <node id="80">
        <label>shErrorReporting.h</label>
        <link refid="shErrorReporting_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="34">
        <label>shLog.h</label>
        <link refid="shLog_8h"/>
      </node>
      <node id="6">
        <label>shMacro.h</label>
        <link refid="shMacro_8h"/>
      </node>
      <node id="14">
        <label>shTargetContext.h</label>
        <link refid="shTargetContext_8h"/>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="55" relation="include">
        </childnode>
        <childnode refid="57" relation="include">
        </childnode>
        <childnode refid="65" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="66" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="68" relation="include">
        </childnode>
        <childnode refid="70" relation="include">
        </childnode>
        <childnode refid="79" relation="include">
        </childnode>
        <childnode refid="83" relation="include">
        </childnode>
        <childnode refid="71" relation="include">
        </childnode>
        <childnode refid="84" relation="include">
        </childnode>
        <childnode refid="93" relation="include">
        </childnode>
        <childnode refid="89" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
      </node>
      <node id="68">
        <label>shTargetStorage.h</label>
        <link refid="shTargetStorage_8h"/>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="69" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
        <childnode refid="47" relation="include">
        </childnode>
        <childnode refid="45" relation="include">
        </childnode>
      </node>
      <node id="13">
        <label>shVarBool.h</label>
        <link refid="shVarBool_8h"/>
      </node>
      <node id="63">
        <label>shVarVecTypes.h</label>
        <link refid="shVarVecTypes_8h"/>
      </node>
      <node id="70">
        <label>shaderBytecodeCache.h</label>
        <link refid="shaderBytecodeCache_8h"/>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="71" relation="include">
        </childnode>
        <childnode refid="75" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="77" relation="include">
        </childnode>
        <childnode refid="51" relation="include">
        </childnode>
        <childnode refid="78" relation="include">
        </childnode>
      </node>
      <node id="21">
        <label>shaderSave.h</label>
        <link refid="shaderSave_8h"/>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
      </node>
      <node id="20">
        <label>shaderTab.h</label>
        <link refid="shaderTab_8h"/>
        <childnode refid="21" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>shlexterm.h</label>
        <link refid="shlexterm_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>shsem.h</label>
        <link refid="shsem_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="78" relation="include">
        </childnode>
      </node>
      <node id="79">
        <label>stcodeBytecode.h</label>
        <link refid="stcodeBytecode_8h"/>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="80" relation="include">
        </childnode>
        <childnode refid="43" relation="include">
        </childnode>
        <childnode refid="81" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
        <childnode refid="82" relation="include">
        </childnode>
      </node>
      <node id="22">
        <label>varMap.h</label>
        <link refid="varMap_8h"/>
        <childnode refid="23" relation="include">
        </childnode>
      </node>
      <node id="62">
        <label>varTypes.h</label>
        <link refid="varTypes_8h"/>
      </node>
      <node id="85">
        <label>variablesMerger.h</label>
        <link refid="variablesMerger_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="44" relation="include">
        </childnode>
        <childnode refid="76" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
        <childnode refid="86" relation="include">
        </childnode>
        <childnode refid="87" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="88" relation="include">
        </childnode>
      </node>
      <node id="60">
        <label>3d/dag_texMgr.h</label>
      </node>
      <node id="29">
        <label>EASTL/algorithm.h</label>
      </node>
      <node id="37">
        <label>EASTL/array.h</label>
      </node>
      <node id="88">
        <label>EASTL/bitvector.h</label>
      </node>
      <node id="86">
        <label>EASTL/fixed_vector.h</label>
      </node>
      <node id="87">
        <label>EASTL/map.h</label>
      </node>
      <node id="12">
        <label>EASTL/optional.h</label>
      </node>
      <node id="11">
        <label>EASTL/string.h</label>
      </node>
      <node id="67">
        <label>EASTL/string_view.h</label>
      </node>
      <node id="73">
        <label>EASTL/type_traits.h</label>
      </node>
      <node id="45">
        <label>EASTL/unique_ptr.h</label>
      </node>
      <node id="76">
        <label>EASTL/vector.h</label>
      </node>
      <node id="82">
        <label>EASTL/vector_map.h</label>
      </node>
      <node id="92">
        <label>EASTL/vector_set.h</label>
      </node>
      <node id="38">
        <label>cstdint</label>
      </node>
      <node id="32">
        <label>cstring</label>
      </node>
      <node id="28">
        <label>dag/dag_vector.h</label>
      </node>
      <node id="27">
        <label>debug/dag_assert.h</label>
      </node>
      <node id="81">
        <label>debug/dag_debug.h</label>
      </node>
      <node id="44">
        <label>drv/3d/dag_consts.h</label>
      </node>
      <node id="69">
        <label>drv/3d/dag_renderStates.h</label>
      </node>
      <node id="61">
        <label>drv/3d/dag_sampler.h</label>
      </node>
      <node id="35">
        <label>generic/dag_enumerate.h</label>
      </node>
      <node id="36">
        <label>generic/dag_expected.h</label>
      </node>
      <node id="49">
        <label>generic/dag_fixedMoveOnlyFunction.h</label>
      </node>
      <node id="25">
        <label>generic/dag_tab.h</label>
      </node>
      <node id="31">
        <label>hash/BLAKE3/blake3.h</label>
      </node>
      <node id="54">
        <label>ioSys/dag_dataBlock.h</label>
      </node>
      <node id="58">
        <label>math/dag_color.h</label>
      </node>
      <node id="59">
        <label>math/integer/dag_IPoint4.h</label>
      </node>
      <node id="74">
        <label>memory</label>
      </node>
      <node id="40">
        <label>memory/dag_mem.h</label>
      </node>
      <node id="77">
        <label>memory/dag_memBase.h</label>
      </node>
      <node id="43">
        <label>shaders/dag_shaderVarType.h</label>
      </node>
      <node id="52">
        <label>shaders/dag_shaders.h</label>
      </node>
      <node id="41">
        <label>shaders/shExprTypes.h</label>
      </node>
      <node id="42">
        <label>shaders/shFunc.h</label>
      </node>
      <node id="47">
        <label>shaders/shader_layout.h</label>
      </node>
      <node id="39">
        <label>shaders/slotTexturesRange.h</label>
      </node>
      <node id="4">
        <label>shsyn.h</label>
      </node>
      <node id="46">
        <label>ska_hash_map/flat_hash_map2.hpp</label>
      </node>
      <node id="26">
        <label>util/dag_bindump_ext.h</label>
      </node>
      <node id="10">
        <label>util/dag_globDef.h</label>
      </node>
      <node id="24">
        <label>util/dag_oaHashNameMap.h</label>
      </node>
      <node id="9">
        <label>util/dag_safeArg.h</label>
      </node>
      <node id="78">
        <label>util/dag_simpleString.h</label>
      </node>
      <node id="56">
        <label>util/dag_stdint.h</label>
      </node>
      <node id="51">
        <label>util/dag_string.h</label>
      </node>
      <node id="8">
        <label>utility</label>
      </node>
    </incdepgraph>
    <innerclass refid="structCodeSourceBlocks_1_1ParserContext" prot="public">CodeSourceBlocks::ParserContext</innerclass>
    <innerclass refid="structCodeSourceBlocks_1_1ParserContext_1_1Stack" prot="protected">CodeSourceBlocks::ParserContext::Stack</innerclass>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="codeBlocks_8cpp_1a98b66669dbf98ff4b9b4b7958a329e0f" prot="public" static="no">
        <type><ref refid="structCodeSourceBlocks_1_1Unconditional" kindref="compound">CodeSourceBlocks::Unconditional</ref></type>
        <definition>typedef CodeSourceBlocks::Unconditional ublock_t</definition>
        <argsstring></argsstring>
        <name>ublock_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="codeBlocks.cpp" line="34" column="41" bodyfile="codeBlocks.cpp" bodystart="34" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="codeBlocks_8cpp_1adbd109eeb827838e1a5f81cf7b861ae2" prot="public" static="no">
        <type><ref refid="structCodeSourceBlocks_1_1ParserContext" kindref="compound">CodeSourceBlocks::ParserContext</ref></type>
        <definition>typedef CodeSourceBlocks::ParserContext ctx_t</definition>
        <argsstring></argsstring>
        <name>ctx_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="codeBlocks.cpp" line="35" column="41" bodyfile="codeBlocks.cpp" bodystart="35" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="codeBlocks_8cpp_1a3576598958ffbec7449b2f04dae218b5" prot="public" static="no">
        <type><ref refid="structCodeSourceBlocks_1_1Fragment" kindref="compound">CodeSourceBlocks::Fragment</ref></type>
        <definition>typedef CodeSourceBlocks::Fragment fragment_t</definition>
        <argsstring></argsstring>
        <name>fragment_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="codeBlocks.cpp" line="36" column="36" bodyfile="codeBlocks.cpp" bodystart="36" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="var">
      <memberdef kind="variable" id="codeBlocks_8cpp_1a23d60518f4c81d2c400e57e9074e7d87" prot="public" static="yes" mutable="no">
        <type><ref refid="nameMap_8h_1abcc1405df73e6f4fac9e1a5b554f6a03" kindref="member">SCFastNameMapExIns</ref></type>
        <definition>SCFastNameMapExIns fileNames</definition>
        <argsstring></argsstring>
        <name>fileNames</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="codeBlocks.cpp" line="84" column="27" bodyfile="codeBlocks.cpp" bodystart="84" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="codeBlocks_8cpp_1adfdb52147fb5a33f00c2156ba437e436" prot="public" static="yes" mutable="no">
        <type><ref refid="nameMap_8h_1a2454660fa3270a39349c9b35ca017b37" kindref="member">SCFastNameMapEx</ref></type>
        <definition>SCFastNameMapEx codeBlocks</definition>
        <argsstring></argsstring>
        <name>codeBlocks</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="codeBlocks.cpp" line="85" column="24" bodyfile="codeBlocks.cpp" bodystart="85" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="codeBlocks_8cpp_1aa0a00d281c2230ec03c04b615da8d395" prot="public" static="yes" mutable="no">
        <type><ref refid="nameMap_8h_1a2454660fa3270a39349c9b35ca017b37" kindref="member">SCFastNameMapEx</ref></type>
        <definition>SCFastNameMapEx declIdents</definition>
        <argsstring></argsstring>
        <name>declIdents</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="codeBlocks.cpp" line="86" column="24" bodyfile="codeBlocks.cpp" bodystart="86" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="codeBlocks_8cpp_1a739edda305e522724e72f211b4b29428" prot="public" static="yes" mutable="no">
        <type>String</type>
        <definition>String tmpSrc</definition>
        <argsstring></argsstring>
        <name>tmpSrc</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="codeBlocks.cpp" line="87" column="15" bodyfile="codeBlocks.cpp" bodystart="87" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="codeBlocks_8cpp_1a92622d027c9ad15db9f5e1b67bc91c6a" prot="public" static="yes" mutable="no">
        <type>String</type>
        <definition>String tmpFileName</definition>
        <argsstring></argsstring>
        <name>tmpFileName</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="codeBlocks.cpp" line="87" column="22" bodyfile="codeBlocks.cpp" bodystart="87" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="codeBlocks_8cpp_1aa9149ae638084e6e2037f0a7b0fa6b27" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Tab&lt; <ref refid="codeBlocks_8cpp_1a98b66669dbf98ff4b9b4b7958a329e0f" kindref="member">ublock_t</ref> * &gt;</type>
        <definition>static Tab&lt; ublock_t * &gt; tmpUncondProg</definition>
        <argsstring>(midmem)</argsstring>
        <name>tmpUncondProg</name>
        <param>
          <type>midmem</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="codeBlocks.cpp" line="88" column="12" declfile="codeBlocks.cpp" declline="88" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="codeBlocks_8cpp_1ab4bf7e025e7ba2dc9f5829be870842f5" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Tab&lt; short &gt;</type>
        <definition>static Tab&lt; short &gt; tmpDigest</definition>
        <argsstring>(midmem)</argsstring>
        <name>tmpDigest</name>
        <param>
          <type>midmem</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="codeBlocks.cpp" line="89" column="12" declfile="codeBlocks.cpp" declline="89" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="codeBlocks_8cpp_1a41a6aa98929f7ecf1ee20b14c63956df" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void addCodeBlock</definition>
        <argsstring>(ublock_t &amp;out_b, const char *code, int fname_id, int line)</argsstring>
        <name>addCodeBlock</name>
        <param>
          <type><ref refid="codeBlocks_8cpp_1a98b66669dbf98ff4b9b4b7958a329e0f" kindref="member">ublock_t</ref> &amp;</type>
          <declname>out_b</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>code</declname>
        </param>
        <param>
          <type>int</type>
          <declname>fname_id</declname>
        </param>
        <param>
          <type>int</type>
          <declname>line</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="codeBlocks.cpp" line="92" column="13" bodyfile="codeBlocks.cpp" bodystart="92" bodyend="98"/>
      </memberdef>
      <memberdef kind="function" id="codeBlocks_8cpp_1afd90467d2a9eac9eb4e9a1c347c13898" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void addDeclBlock</definition>
        <argsstring>(ublock_t &amp;out_b, const char *ident, int val)</argsstring>
        <name>addDeclBlock</name>
        <param>
          <type><ref refid="codeBlocks_8cpp_1a98b66669dbf98ff4b9b4b7958a329e0f" kindref="member">ublock_t</ref> &amp;</type>
          <declname>out_b</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>ident</declname>
        </param>
        <param>
          <type>int</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="codeBlocks.cpp" line="99" column="13" bodyfile="codeBlocks.cpp" bodystart="99" bodyend="104"/>
      </memberdef>
      <memberdef kind="function" id="codeBlocks_8cpp_1a8a6daa22c1827a3f89dec52f47d54704" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void removeComments</definition>
        <argsstring>(String &amp;s)</argsstring>
        <name>removeComments</name>
        <param>
          <type>String &amp;</type>
          <declname>s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="codeBlocks.cpp" line="106" column="13" bodyfile="codeBlocks.cpp" bodystart="106" bodyend="172"/>
      </memberdef>
      <memberdef kind="function" id="codeBlocks_8cpp_1a8e1cdad7b67e35b4df37616b8806d1df" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void removeExtraWhitespace</definition>
        <argsstring>(String &amp;s)</argsstring>
        <name>removeExtraWhitespace</name>
        <param>
          <type>String &amp;</type>
          <declname>s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="codeBlocks.cpp" line="174" column="13" bodyfile="codeBlocks.cpp" bodystart="174" bodyend="203"/>
      </memberdef>
      <memberdef kind="function" id="codeBlocks_8cpp_1a72896389f7e87fea580f720710ed2350" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>static char * skip_white_space</definition>
        <argsstring>(char *p)</argsstring>
        <name>skip_white_space</name>
        <param>
          <type>char *</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="codeBlocks.cpp" line="205" column="13" bodyfile="codeBlocks.cpp" bodystart="205" bodyend="210"/>
      </memberdef>
      <memberdef kind="function" id="codeBlocks_8cpp_1a932ff78e09fac7a377718a041b1c1539" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void inc_lines</definition>
        <argsstring>(const char *p, const char *end_incl, int &amp;line_no)</argsstring>
        <name>inc_lines</name>
        <param>
          <type>const char *</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>end_incl</declname>
        </param>
        <param>
          <type>int &amp;</type>
          <declname>line_no</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="codeBlocks.cpp" line="212" column="13" bodyfile="codeBlocks.cpp" bodystart="212" bodyend="220"/>
      </memberdef>
      <memberdef kind="function" id="codeBlocks_8cpp_1a3b3ecdc60e0684c0acd5161568cda877" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void dump_code</definition>
        <argsstring>(dag::ConstSpan&lt; CodeSourceBlocks::Fragment &gt; prg, int indent)</argsstring>
        <name>dump_code</name>
        <param>
          <type>dag::ConstSpan&lt; <ref refid="structCodeSourceBlocks_1_1Fragment" kindref="compound">CodeSourceBlocks::Fragment</ref> &gt;</type>
          <declname>prg</declname>
        </param>
        <param>
          <type>int</type>
          <declname>indent</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="codeBlocks.cpp" line="222" column="13" bodyfile="codeBlocks.cpp" bodystart="222" bodyend="249"/>
      </memberdef>
      <memberdef kind="function" id="codeBlocks_8cpp_1a3a2223e10a55706d2f4729241b570d54" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void distill_code</definition>
        <argsstring>(dag::Span&lt; CodeSourceBlocks::Fragment &gt; p, ShaderParser::ShaderBoolEvalCB &amp;c)</argsstring>
        <name>distill_code</name>
        <param>
          <type>dag::Span&lt; <ref refid="structCodeSourceBlocks_1_1Fragment" kindref="compound">CodeSourceBlocks::Fragment</ref> &gt;</type>
          <declname>p</declname>
        </param>
        <param>
          <type><ref refid="classShaderParser_1_1ShaderBoolEvalCB" kindref="compound">ShaderParser::ShaderBoolEvalCB</ref> &amp;</type>
          <declname>c</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="codeBlocks.cpp" line="776" column="13" bodyfile="codeBlocks.cpp" bodystart="776" bodyend="819"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/>Copyright<sp/>(C)<sp/>Gaijin<sp/>Games<sp/>KFT.<sp/><sp/>All<sp/>rights<sp/>reserved.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="codeBlocks_8h" kindref="compound">codeBlocks.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="condParser_8h" kindref="compound">condParser.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="shCompiler_8h" kindref="compound">shCompiler.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="globalConfig_8h" kindref="compound">globalConfig.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="shsem_8h" kindref="compound">shsem.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="shLog_8h" kindref="compound">shLog.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="shCompiler_8h" kindref="compound">shCompiler.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="nameMap_8h" kindref="compound">nameMap.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;util/dag_string.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;generic/dag_tab.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;debug/dag_debug.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdlib.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;ctype.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;libTools/util/strUtil.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;ioSys/dag_fileIo.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;osApiWrappers/dag_files.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;osApiWrappers/dag_direct.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;osApiWrappers/dag_miscApi.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="globVar_8h" kindref="compound">globVar.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="fast__isalnum_8h" kindref="compound">fast_isalnum.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="hash_8h" kindref="compound">hash.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>_TARGET_PC_WIN</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;windows.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdlib.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>__iscsym(_c)<sp/>fast_isalnum_or_(_c)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"><ref refid="nameMap_8h_1ad3f42c540507651a7e4ce93760afc216" kindref="member">SCFastNameMap</ref><sp/><ref refid="classCodeSourceBlocks_1a019f1745807a8f2da9de6362c5629d17" kindref="member">CodeSourceBlocks::incFiles</ref>;</highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="structCodeSourceBlocks_1_1Unconditional" kindref="compound">CodeSourceBlocks::Unconditional</ref><sp/><ref refid="codeBlocks_8cpp_1a98b66669dbf98ff4b9b4b7958a329e0f" kindref="member">ublock_t</ref>;</highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="structCodeSourceBlocks_1_1ParserContext" kindref="compound">CodeSourceBlocks::ParserContext</ref><sp/><ref refid="codeBlocks_8cpp_1adbd109eeb827838e1a5f81cf7b861ae2" kindref="member">ctx_t</ref>;</highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="structCodeSourceBlocks_1_1Fragment" kindref="compound">CodeSourceBlocks::Fragment</ref><sp/><ref refid="codeBlocks_8cpp_1a3576598958ffbec7449b2f04dae218b5" kindref="member">fragment_t</ref>;</highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight></codeline>
<codeline lineno="38" refid="structCodeSourceBlocks_1_1ParserContext" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structCodeSourceBlocks_1_1ParserContext" kindref="compound">CodeSourceBlocks::ParserContext</ref></highlight></codeline>
<codeline lineno="39"><highlight class="normal">{</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><ref refid="structCodeSourceBlocks_1_1ParserContext" kindref="compound">ParserContext</ref>(<ref refid="classShaderParser_1_1ShaderBoolEvalCB" kindref="compound">ShaderParser::ShaderBoolEvalCB</ref><sp/>&amp;cb,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*s,<sp/><ref refid="classshc_1_1TargetContext" kindref="compound">shc::TargetContext</ref><sp/>&amp;a_ctx)<sp/>:</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structCodeSourceBlocks_1_1ParserContext_1a8822bb6d961cffb83ad3fbcdac0277f9" kindref="member">mainCtx</ref>{a_ctx},<sp/><ref refid="structCodeSourceBlocks_1_1ParserContext_1a04f7eeb9b34f2f5f14d31125cdea26b8" kindref="member">evalCb</ref>(cb),<sp/><ref refid="structCodeSourceBlocks_1_1ParserContext_1ac7906d066425d091f5cfa074cf91981c" kindref="member">stage</ref>(s),<sp/><ref refid="structCodeSourceBlocks_1_1ParserContext_1ad994fd571e554e4867f3b8eee76da646" kindref="member">stack</ref>(tmpmem)</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/>{}</highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/>Tab&lt;CodeSourceBlocks::Fragment&gt;<sp/>&amp;<ref refid="structCodeSourceBlocks_1_1ParserContext_1aaabd65065fac4572fc59bba62c422231" kindref="member">topProg</ref>()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*<ref refid="structCodeSourceBlocks_1_1ParserContext_1ad994fd571e554e4867f3b8eee76da646" kindref="member">stack</ref>.back().prog;<sp/>}</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="structCodeSourceBlocks_1_1ParserContext_1a44f526c215b5308bf7bb6a169033426c" kindref="member">topState</ref>()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structCodeSourceBlocks_1_1ParserContext_1ad994fd571e554e4867f3b8eee76da646" kindref="member">stack</ref>.back().state;<sp/>}</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><ref refid="classCodeSourceBlocks_1a32e3a067a09b1c3c6b13a9a95e5c7a3c" kindref="member">ExprValue</ref><sp/><ref refid="structCodeSourceBlocks_1_1ParserContext_1a3684f389356353604f51f99a81410aff" kindref="member">topCondEval</ref>()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structCodeSourceBlocks_1_1ParserContext_1ad994fd571e554e4867f3b8eee76da646" kindref="member">stack</ref>.back().condEval;<sp/>}</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="structCodeSourceBlocks_1_1ParserContext_1af90d499388f4fb3b9784d7461247752b" kindref="member">topHasTrue</ref>()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structCodeSourceBlocks_1_1ParserContext_1ad994fd571e554e4867f3b8eee76da646" kindref="member">stack</ref>.back().has1;<sp/>}</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="structCodeSourceBlocks_1_1ParserContext_1a62b2177fe873e2c54187a5e413414129" kindref="member">topHasAny</ref>()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structCodeSourceBlocks_1_1ParserContext_1ad994fd571e554e4867f3b8eee76da646" kindref="member">stack</ref>.back().hasA;<sp/>}</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="structCodeSourceBlocks_1_1ParserContext_1ade343fafcbc475b73dc62a0c3fbdfdd5" kindref="member">stackSize</ref>()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structCodeSourceBlocks_1_1ParserContext_1ad994fd571e554e4867f3b8eee76da646" kindref="member">stack</ref>.size();<sp/>}</highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="structCodeSourceBlocks_1_1ParserContext_1a5e1aa4b6fd31bcee46472a225b1b399a" kindref="member">push_back</ref>(Tab&lt;CodeSourceBlocks::Fragment&gt;<sp/>*prog,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>state,<sp/><ref refid="classCodeSourceBlocks_1a32e3a067a09b1c3c6b13a9a95e5c7a3c" kindref="member">ExprValue</ref><sp/>cond,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>has_1,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>has_any)</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structCodeSourceBlocks_1_1ParserContext_1_1Stack" kindref="compound">Stack</ref><sp/>&amp;s<sp/>=<sp/><ref refid="structCodeSourceBlocks_1_1ParserContext_1ad994fd571e554e4867f3b8eee76da646" kindref="member">stack</ref>.push_back();</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/>s.<ref refid="structCodeSourceBlocks_1_1ParserContext_1_1Stack_1a7367bb5b39f1b70970719bb9f0fd2b6a" kindref="member">prog</ref><sp/>=<sp/>prog;</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/>s.<ref refid="structCodeSourceBlocks_1_1ParserContext_1_1Stack_1a471c03a75f1ad796c5108af238787678" kindref="member">state</ref><sp/>=<sp/>state;</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/>s.<ref refid="structCodeSourceBlocks_1_1ParserContext_1_1Stack_1aa9b63fbdbc4a719895feb7b0759b956f" kindref="member">condEval</ref><sp/>=<sp/>cond;</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/>s.<ref refid="structCodeSourceBlocks_1_1ParserContext_1_1Stack_1ac0f00facf3a3f9b8c55fe5f7ebf5511b" kindref="member">has1</ref><sp/>=<sp/>has_1;</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/>s.<ref refid="structCodeSourceBlocks_1_1ParserContext_1_1Stack_1a90eadf6f7898284629bab16a4822dd86" kindref="member">hasA</ref><sp/>=<sp/>has_any;</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="structCodeSourceBlocks_1_1ParserContext_1a2fad2502284214ed63041c5e4fa57dcf" kindref="member">pop_back</ref>()</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="structCodeSourceBlocks_1_1ParserContext_1ad994fd571e554e4867f3b8eee76da646" kindref="member">stack</ref>.back().condEval<sp/>==<sp/><ref refid="classCodeSourceBlocks_1a32e3a067a09b1c3c6b13a9a95e5c7a3ca2f7a06bf2844224cac2140b35e20a9bb" kindref="member">ExprValue::ConstFalse</ref>)</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>clear_and_shrink(*<ref refid="structCodeSourceBlocks_1_1ParserContext_1ad994fd571e554e4867f3b8eee76da646" kindref="member">stack</ref>.back().prog);</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structCodeSourceBlocks_1_1ParserContext_1ad994fd571e554e4867f3b8eee76da646" kindref="member">stack</ref>.pop_back();</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><ref refid="classshc_1_1TargetContext" kindref="compound">shc::TargetContext</ref><sp/>&amp;<ref refid="structCodeSourceBlocks_1_1ParserContext_1a8822bb6d961cffb83ad3fbcdac0277f9" kindref="member">mainCtx</ref>;</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><ref refid="classShaderParser_1_1ShaderBoolEvalCB" kindref="compound">ShaderParser::ShaderBoolEvalCB</ref><sp/>&amp;<ref refid="structCodeSourceBlocks_1_1ParserContext_1a04f7eeb9b34f2f5f14d31125cdea26b8" kindref="member">evalCb</ref>;</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="structCodeSourceBlocks_1_1ParserContext_1ac7906d066425d091f5cfa074cf91981c" kindref="member">stage</ref><sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/>dag::Vector&lt;eastl::string&gt;<sp/><ref refid="structCodeSourceBlocks_1_1ParserContext_1a99fb2984c1caa9880e631e9e4b9af576" kindref="member">errors</ref>;</highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight><highlight class="keyword">protected</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="74" refid="structCodeSourceBlocks_1_1ParserContext_1_1Stack" refkind="compound"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structCodeSourceBlocks_1_1ParserContext_1_1Stack" kindref="compound">Stack</ref></highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/>Tab&lt;fragment_t&gt;<sp/>*<ref refid="structCodeSourceBlocks_1_1ParserContext_1_1Stack_1a7367bb5b39f1b70970719bb9f0fd2b6a" kindref="member">prog</ref>;</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classCodeSourceBlocks_1a32e3a067a09b1c3c6b13a9a95e5c7a3c" kindref="member">ExprValue</ref><sp/><ref refid="structCodeSourceBlocks_1_1ParserContext_1_1Stack_1aa9b63fbdbc4a719895feb7b0759b956f" kindref="member">condEval</ref><sp/>=<sp/><ref refid="classCodeSourceBlocks_1a32e3a067a09b1c3c6b13a9a95e5c7a3ca6267ef339fe3b5e7cc5d6160917ca593" kindref="member">ExprValue::NonConst</ref>;</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">signed</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><ref refid="structCodeSourceBlocks_1_1ParserContext_1_1Stack_1a471c03a75f1ad796c5108af238787678" kindref="member">state</ref>,<sp/><ref refid="structCodeSourceBlocks_1_1ParserContext_1_1Stack_1ac0f00facf3a3f9b8c55fe5f7ebf5511b" kindref="member">has1</ref>,<sp/><ref refid="structCodeSourceBlocks_1_1ParserContext_1_1Stack_1a90eadf6f7898284629bab16a4822dd86" kindref="member">hasA</ref>;</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/>Tab&lt;Stack&gt;<sp/><ref refid="structCodeSourceBlocks_1_1ParserContext_1ad994fd571e554e4867f3b8eee76da646" kindref="member">stack</ref>;</highlight></codeline>
<codeline lineno="81"><highlight class="normal">};</highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="nameMap_8h_1abcc1405df73e6f4fac9e1a5b554f6a03" kindref="member">SCFastNameMapExIns</ref><sp/>fileNames;</highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="nameMap_8h_1a2454660fa3270a39349c9b35ca017b37" kindref="member">SCFastNameMapEx</ref><sp/>codeBlocks;</highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="nameMap_8h_1a2454660fa3270a39349c9b35ca017b37" kindref="member">SCFastNameMapEx</ref><sp/>declIdents;</highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>String<sp/>tmpSrc,<sp/>tmpFileName;</highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>Tab&lt;ublock_t<sp/>*&gt;<sp/>tmpUncondProg(midmem);</highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>Tab&lt;short&gt;<sp/>tmpDigest(midmem);</highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>addCodeBlock(<ref refid="structCodeSourceBlocks_1_1Unconditional" kindref="compound">ublock_t</ref><sp/>&amp;out_b,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*code,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>fname_id,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>line)</highlight></codeline>
<codeline lineno="93"><highlight class="normal">{</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/>out_b.<ref refid="structCodeSourceBlocks_1_1Unconditional_1a72edc72431fdc5ef137edb86815ffd35" kindref="member">codeId</ref><sp/>=<sp/>codeBlocks.addNameId(code);</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/>G_ASSERT(out_b.<ref refid="structCodeSourceBlocks_1_1Unconditional_1a72edc72431fdc5ef137edb86815ffd35" kindref="member">codeId</ref><sp/>&lt;<sp/>32768<sp/>&amp;&amp;<sp/></highlight><highlight class="stringliteral">&quot;code<sp/>piece<sp/>count<sp/>designed<sp/>to<sp/>be<sp/>&lt;<sp/>32K&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/>out_b.<ref refid="structCodeSourceBlocks_1_1Unconditional_1a2f8994ca676bc57a3f8e791deda5b5a7" kindref="member">fnameId</ref><sp/>=<sp/>fname_id;</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/>out_b.<ref refid="structCodeSourceBlocks_1_1Unconditional_1a132cad1ccc970cadd62b658fac56812c" kindref="member">line</ref><sp/>=<sp/>line;</highlight></codeline>
<codeline lineno="98"><highlight class="normal">}</highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>addDeclBlock(<ref refid="structCodeSourceBlocks_1_1Unconditional" kindref="compound">ublock_t</ref><sp/>&amp;out_b,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*ident,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>val)</highlight></codeline>
<codeline lineno="100"><highlight class="normal">{</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/>out_b.<ref refid="structCodeSourceBlocks_1_1Unconditional_1a72edc72431fdc5ef137edb86815ffd35" kindref="member">codeId</ref><sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/>out_b.<ref refid="structCodeSourceBlocks_1_1Unconditional_1a1392997cb575a2f1887f80f951187f57" kindref="member">decl</ref>.<ref refid="structCodeSourceBlocks_1_1Unconditional_1_1Decl_1a31b0dcb5e14d2be3e2d2d1653c828034" kindref="member">identId</ref><sp/>=<sp/>declIdents.addNameId(ident);</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/>out_b.<ref refid="structCodeSourceBlocks_1_1Unconditional_1a1392997cb575a2f1887f80f951187f57" kindref="member">decl</ref>.<ref refid="structCodeSourceBlocks_1_1Unconditional_1_1Decl_1a3e73d6ba6cd3cccb70f6b5e7a0bdcd87" kindref="member">identValue</ref><sp/>=<sp/>val;</highlight></codeline>
<codeline lineno="104"><highlight class="normal">}</highlight></codeline>
<codeline lineno="105"><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>removeComments(String<sp/>&amp;s)</highlight></codeline>
<codeline lineno="107"><highlight class="normal">{</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*p<sp/>=<sp/>s,<sp/>*pp;</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>comment_start<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/>pp<sp/>=<sp/>strchr(p,<sp/></highlight><highlight class="charliteral">&apos;/&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(pp)</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(comment_start<sp/>!=<sp/>-1)</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pp[-1]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;*&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>strip<sp/>C<sp/>comment</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*end<sp/>=<sp/>pp<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>can_remove<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="121"><highlight class="normal"></highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*t<sp/>=<sp/>pp;<sp/>t<sp/>&gt;=<sp/>&amp;s[comment_start];<sp/>t--)</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(t[0]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!can_remove)</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memset(t<sp/>+<sp/>1,<sp/></highlight><highlight class="charliteral">&apos;<sp/>&apos;</highlight><highlight class="normal">,<sp/>end<sp/>-<sp/>t<sp/>-<sp/>1);</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>erase_items(s,<sp/>t<sp/>+<sp/>1<sp/>-<sp/>s.str(),<sp/>end<sp/>-<sp/>t<sp/>-<sp/>1);</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pp<sp/>-=<sp/>end<sp/>-<sp/>t<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>end<sp/>=<sp/>t;</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>can_remove<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="135"><highlight class="normal"></highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(end<sp/>-<sp/>s.str()<sp/>&gt;<sp/>comment_start)</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!can_remove)</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memset(&amp;s[comment_start],<sp/></highlight><highlight class="charliteral">&apos;<sp/>&apos;</highlight><highlight class="normal">,<sp/>end<sp/>-<sp/>s.str()<sp/>-<sp/>comment_start);</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>erase_items(s,<sp/>comment_start,<sp/>end<sp/>-<sp/>s.str()<sp/>-<sp/>comment_start);</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pp<sp/>-=<sp/>end<sp/>-<sp/>s.str()<sp/>-<sp/>comment_start;</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="146"><highlight class="normal"></highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>comment_start<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>p<sp/>=<sp/>pp<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pp[1]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;*&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>start<sp/>C<sp/>comment</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>comment_start<sp/>=<sp/>pp<sp/>-<sp/>s.str();</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>p<sp/>=<sp/>pp<sp/>+<sp/>3;</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pp[1]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;/&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>strip<sp/>C++<sp/>line<sp/>comment</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>start<sp/>=<sp/>pp<sp/>-<sp/>s.str();</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>pp<sp/>=<sp/>strchr(pp<sp/>+<sp/>2,<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!pp)</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pp<sp/>=<sp/>s.str()<sp/>+<sp/>s.length();</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>erase_items(s,<sp/>start,<sp/>pp<sp/>-<sp/>&amp;s[start]);</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>p<sp/>=<sp/>&amp;s[start];</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>p<sp/>=<sp/>pp<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="169"><highlight class="normal"></highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/>pp<sp/>=<sp/>strchr(p,<sp/></highlight><highlight class="charliteral">&apos;/&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="172"><highlight class="normal">}</highlight></codeline>
<codeline lineno="173"><highlight class="normal"></highlight></codeline>
<codeline lineno="174"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>removeExtraWhitespace(String<sp/>&amp;s)</highlight></codeline>
<codeline lineno="175"><highlight class="normal">{</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*p<sp/>=<sp/>s.str()<sp/>+<sp/>s.length()<sp/>-<sp/>1,<sp/>*pe<sp/>=<sp/>p;</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>remove_tail_lines<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/>remove_tail<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="178"><highlight class="normal"></highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(p<sp/>&gt;<sp/>s.str())</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(p[0]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(remove_tail)</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!remove_tail_lines)</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>safe_erase_items(s,<sp/>p<sp/>+<sp/>1<sp/>-<sp/>s.str(),<sp/>pe<sp/>-<sp/>p<sp/>-<sp/>1);</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>safe_erase_items(s,<sp/>p<sp/>-<sp/>s.str(),<sp/>pe<sp/>-<sp/>p);</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="190"><highlight class="normal"></highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>remove_tail_lines<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>remove_tail<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>pe<sp/>=<sp/>p;</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(remove_tail<sp/>&amp;&amp;<sp/>p[0]<sp/>!=<sp/></highlight><highlight class="charliteral">&apos;<sp/>&apos;</highlight><highlight class="normal"><sp/>&amp;&amp;<sp/>p[0]<sp/>!=<sp/></highlight><highlight class="charliteral">&apos;\t&apos;</highlight><highlight class="normal"><sp/>&amp;&amp;<sp/>p[0]<sp/>!=<sp/></highlight><highlight class="charliteral">&apos;\v&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>safe_erase_items(s,<sp/>p<sp/>+<sp/>1<sp/>-<sp/>s.str(),<sp/>pe<sp/>-<sp/>p<sp/>-<sp/>1);</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>remove_tail<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="200"><highlight class="normal"></highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/>p--;</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="203"><highlight class="normal">}</highlight></codeline>
<codeline lineno="204"><highlight class="normal"></highlight></codeline>
<codeline lineno="205"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*skip_white_space(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*p)</highlight></codeline>
<codeline lineno="206"><highlight class="normal">{</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(memchr(</highlight><highlight class="stringliteral">&quot;<sp/>\n\t\v\r&quot;</highlight><highlight class="normal">,<sp/>*p,<sp/>5))</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/>p++;</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>p;</highlight></codeline>
<codeline lineno="210"><highlight class="normal">}</highlight></codeline>
<codeline lineno="211"><highlight class="normal"></highlight></codeline>
<codeline lineno="212"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>inc_lines(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*p,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*end_incl,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>&amp;line_no)</highlight></codeline>
<codeline lineno="213"><highlight class="normal">{</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(p<sp/>&lt;=<sp/>end_incl)</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(*p<sp/>==<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>line_no++;</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/>p++;</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="220"><highlight class="normal">}</highlight></codeline>
<codeline lineno="221"><highlight class="normal"></highlight></codeline>
<codeline lineno="222"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>dump_code(dag::ConstSpan&lt;CodeSourceBlocks::Fragment&gt;<sp/>prg,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>indent)</highlight></codeline>
<codeline lineno="223"><highlight class="normal">{</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/>String<sp/>str;</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>prg.size();<sp/>i++)</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(prg[i].cond)</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceShaderParser_1a4a17bbf595067ae88a41f034719c3ff1" kindref="member">ShaderParser::build_bool_expr_string</ref>(*prg[i].cond-&gt;onIf.expr,<sp/>str);</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>debug(</highlight><highlight class="stringliteral">&quot;%*s##if<sp/>%s&quot;</highlight><highlight class="normal">,<sp/>indent,<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">,<sp/>str.str());</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>dump_code(prg[i].cond-&gt;onIf.onTrue,<sp/>indent<sp/>+<sp/>2);</highlight></codeline>
<codeline lineno="231"><highlight class="normal"></highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>prg[i].cond-&gt;onElif.size();<sp/>j++)</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceShaderParser_1a4a17bbf595067ae88a41f034719c3ff1" kindref="member">ShaderParser::build_bool_expr_string</ref>(*prg[i].cond-&gt;onElif[j].expr,<sp/>str);</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>debug(</highlight><highlight class="stringliteral">&quot;%*s##elif<sp/>%s&quot;</highlight><highlight class="normal">,<sp/>indent,<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">,<sp/>str.str());</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dump_code(prg[i].cond-&gt;onElif[j].onTrue,<sp/>indent<sp/>+<sp/>2);</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="238"><highlight class="normal"></highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(prg[i].cond-&gt;onElse.size())</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>debug(</highlight><highlight class="stringliteral">&quot;%*s##else&quot;</highlight><highlight class="normal">,<sp/>indent,<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dump_code(prg[i].cond-&gt;onElse,<sp/>indent<sp/>+<sp/>2);</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>debug(</highlight><highlight class="stringliteral">&quot;%*s##endif&quot;</highlight><highlight class="normal">,<sp/>indent,<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>debug(</highlight><highlight class="stringliteral">&quot;%*scode<sp/>%s,%d<sp/>[\n%s\n%*s]&quot;</highlight><highlight class="normal">,<sp/>indent,<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">,<sp/>fileNames.getName(prg[i].uncond.fnameId),<sp/>prg[i].uncond.line,</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>codeBlocks.getName(prg[i].uncond.codeId),<sp/>indent,<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="249"><highlight class="normal">}</highlight></codeline>
<codeline lineno="250"><highlight class="normal"></highlight></codeline>
<codeline lineno="251"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classCodeSourceBlocks_1a2e8f5b78279512fb8ed6ddcab3486dbf" kindref="member">CodeSourceBlocks::parseSourceCode</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*stage,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*src,<sp/><ref refid="classShaderParser_1_1ShaderBoolEvalCB" kindref="compound">ShaderParser::ShaderBoolEvalCB</ref><sp/>&amp;cb,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>pp_as_comments,</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><ref refid="classshc_1_1TargetContext" kindref="compound">shc::TargetContext</ref><sp/>&amp;a_ctx)</highlight></codeline>
<codeline lineno="253"><highlight class="normal">{</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/>tmpSrc<sp/>=<sp/>src;</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/>removeComments(tmpSrc);</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/>removeExtraWhitespace(tmpSrc);</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>debug(&quot;-----<sp/>stripped<sp/>code:\n%s---&quot;,<sp/>tmpSrc.str());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/>String<sp/>start_pp,<sp/>end_pp;</highlight></codeline>
<codeline lineno="259"><highlight class="normal"></highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>preprocessor<sp/>source<sp/>code<sp/>to<sp/>get<sp/>code<sp/>fragments</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*p<sp/>=<sp/>tmpSrc,<sp/>*src_end<sp/>=<sp/>tmpSrc.str()<sp/>+<sp/>tmpSrc.length();</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*code_start<sp/>=<sp/>p,<sp/>*code_end<sp/>=<sp/>p;</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>fname_id<sp/>=<sp/>-1,<sp/>line_no<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="264"><highlight class="normal"></highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><ref refid="structCodeSourceBlocks_1_1ParserContext" kindref="compound">ctx_t</ref><sp/>ctx{cb,<sp/>stage,<sp/>a_ctx};</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/>ctx.push_back(&amp;<ref refid="classCodeSourceBlocks_1ab6ab4d1de2fc690ec8de6c5c79e87f8b" kindref="member">blocks</ref>,<sp/>-1,<sp/><ref refid="classCodeSourceBlocks_1a32e3a067a09b1c3c6b13a9a95e5c7a3caf7a81025ec822b1a7554e3b641cff501" kindref="member">ExprValue::ConstTrue</ref>,<sp/>1,<sp/>0);</highlight></codeline>
<codeline lineno="267"><highlight class="normal"></highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>debug(&quot;\n-----<sp/>parsing<sp/>code:&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(p<sp/>&amp;&amp;<sp/>p<sp/>&lt;<sp/>src_end)</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*line_start<sp/>=<sp/>p;</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/>p<sp/>=<sp/>skip_white_space(p);</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(p[0]<sp/>!=<sp/></highlight><highlight class="charliteral">&apos;#&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(p[0]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>p<sp/>=<sp/>code_end<sp/>=<sp/>strchr(p,<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(p[1]<sp/>!=<sp/></highlight><highlight class="charliteral">&apos;#&apos;</highlight><highlight class="normal">)<sp/></highlight><highlight class="comment">//<sp/>single<sp/>#<sp/>-<sp/>standard<sp/>HLSL<sp/>preprocessor</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*pp_start<sp/>=<sp/>p;</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>p<sp/>=<sp/>strchr(p,<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="283"><highlight class="normal"></highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*dtext<sp/>=<sp/>skip_white_space(pp_start<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(memcmp(dtext,<sp/></highlight><highlight class="stringliteral">&quot;line<sp/>&quot;</highlight><highlight class="normal">,<sp/>5)<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>process<sp/>#line<sp/>directive</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(code_start<sp/>&lt;<sp/>code_end)</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classCodeSourceBlocks_1a09af05a0f0bd204e2515dd7a890bfd3a" kindref="member">ppSrcCode</ref>(code_start,<sp/>code_end<sp/>-<sp/>code_start,<sp/>fname_id,<sp/>line_no,<sp/>ctx,<sp/>NULL,<sp/>NULL);</highlight></codeline>
<codeline lineno="290"><highlight class="normal"></highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*t<sp/>=<sp/>skip_white_space(dtext<sp/>+<sp/>4);</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>new_line_no<sp/>=<sp/>atoi(t);</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(isdigit(*t))</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>t++;</highlight></codeline>
<codeline lineno="295"><highlight class="normal"></highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*t2<sp/>=<sp/>t;</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>t<sp/>=<sp/>strchr(t,<sp/></highlight><highlight class="charliteral">&apos;\&quot;&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(t<sp/>&amp;&amp;<sp/>t<sp/>&lt;<sp/>p)</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>t2<sp/>=<sp/>t<sp/>?<sp/>strchr(t<sp/>+<sp/>1,<sp/></highlight><highlight class="charliteral">&apos;\&quot;&apos;</highlight><highlight class="normal">)<sp/>:<sp/>NULL;</highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!t2<sp/>||<sp/>t2<sp/>&gt;<sp/>p)</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>err_bad_line:</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>inc_lines(code_start,<sp/>pp_start,<sp/>line_no);</highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="shLog_8cpp_1a2926179632c7c86265007652d3d30b14" kindref="member">sh_debug</ref>(<ref refid="shLog_8h_1a66042048eb3ce30a1dccb2ebf8c2fd5caae3b70b41400c8a36e8a094ac1dbe43c" kindref="member">SHLOG_ERROR</ref>,<sp/></highlight><highlight class="stringliteral">&quot;bad<sp/>#line<sp/>directive<sp/>at<sp/>%s,%d:\n<sp/><sp/><sp/><sp/>%.*s&quot;</highlight><highlight class="normal">,<sp/>fileNames.getName(fname_id),<sp/>line_no,<sp/>p<sp/>-<sp/>pp_start,</highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pp_start);</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="309"><highlight class="normal"></highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tmpFileName.printf(260,<sp/></highlight><highlight class="stringliteral">&quot;%.*s&quot;</highlight><highlight class="normal">,<sp/>t2<sp/>-<sp/>t<sp/>-<sp/>1,<sp/>t<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dd_simplify_fname_c(tmpFileName);</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fname_id<sp/>=<sp/>fileNames.addNameId(tmpFileName);</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(t2<sp/>&lt;<sp/>p)</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="fast__isalnum_8h_1ac22fa5fde85cf9aca1bfb9d8321ae535" kindref="member">fast_isspace</ref>(*t2))</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>t2++;</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>err_bad_line;</highlight></codeline>
<codeline lineno="320"><highlight class="normal"></highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>line_no<sp/>=<sp/>new_line_no;</highlight></codeline>
<codeline lineno="322"><highlight class="normal"></highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(p[0]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p++;</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>code_start<sp/>=<sp/>code_end<sp/>=<sp/>p;</highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(memcmp(dtext,<sp/></highlight><highlight class="stringliteral">&quot;include<sp/>&quot;</highlight><highlight class="normal">,<sp/>8)<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*fn_line<sp/>=<sp/>skip_white_space(dtext<sp/>+<sp/>8);</highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Tab&lt;char&gt;<sp/>incl_code;</highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>fn_delim<sp/>=<sp/>fn_line[0];</highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fn_delim<sp/>==<sp/></highlight><highlight class="charliteral">&apos;\&quot;&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fn_line++;</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fn_delim<sp/>==<sp/></highlight><highlight class="charliteral">&apos;&lt;&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fn_line++,<sp/>fn_delim<sp/>=<sp/></highlight><highlight class="charliteral">&apos;&gt;&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fn_delim<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*fn_e<sp/>=<sp/>fn_delim<sp/>?<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)memchr(fn_line,<sp/>fn_delim,<sp/>p<sp/>-<sp/>fn_line)<sp/>:<sp/>p;</highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!fn_e)</highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="shLog_8cpp_1a2926179632c7c86265007652d3d30b14" kindref="member">sh_debug</ref>(<ref refid="shLog_8h_1a66042048eb3ce30a1dccb2ebf8c2fd5caae3b70b41400c8a36e8a094ac1dbe43c" kindref="member">SHLOG_ERROR</ref>,<sp/></highlight><highlight class="stringliteral">&quot;bad<sp/>pp<sp/>include<sp/>at<sp/>%s,%d:\n<sp/><sp/><sp/><sp/>%.*s\n&quot;</highlight><highlight class="normal">,<sp/>fileNames.getName(fname_id),<sp/>line_no,<sp/>p<sp/>-<sp/>dtext<sp/>+<sp/>1,</highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dtext<sp/>-<sp/>1);</highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>String<sp/>fn(0,<sp/></highlight><highlight class="stringliteral">&quot;%.*s&quot;</highlight><highlight class="normal">,<sp/>fn_e<sp/>-<sp/>fn_line,<sp/>fn_line);</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>fn.size()<sp/>-<sp/>2;<sp/>i<sp/>&gt;<sp/>0;<sp/>i--)</highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(memchr(</highlight><highlight class="stringliteral">&quot;<sp/>\n\t\v\r&quot;</highlight><highlight class="normal">,<sp/>fn[i],<sp/>5))</highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>erase_items(fn,<sp/>i,<sp/>1);</highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>pp_line<sp/>=<sp/>line_no;</highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>inc_lines(code_start,<sp/>pp_start,<sp/>pp_line);</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="classCodeSourceBlocks_1af099e1a1bbbc1bdd6d50d106abb7a78e" kindref="member">ppDoInclude</ref>(fn,<sp/>incl_code,<sp/>fileNames.getName(fname_id),<sp/>pp_line,<sp/>ctx))</highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ctx.errors.emplace_back(eastl::string::CtorSprintf{},<sp/></highlight><highlight class="stringliteral">&quot;failed<sp/>to<sp/>resolve<sp/>include<sp/>at<sp/>%s,%d:\n<sp/><sp/><sp/><sp/>%.*s\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fileNames.getName(fname_id),<sp/>line_no,<sp/>fn_e<sp/>-<sp/>fn_line,<sp/>fn_line);</highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memcpy(dtext<sp/>-<sp/>1,<sp/></highlight><highlight class="stringliteral">&quot;//<sp/><sp/><sp/>inc&quot;</highlight><highlight class="normal">,<sp/>8);</highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*old_p<sp/>=<sp/>tmpSrc.str();</highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tmpSrc.insert(p<sp/>-<sp/>old_p,<sp/>incl_code.data(),<sp/>incl_code.size());</highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>diff<sp/>=<sp/>tmpSrc.str()<sp/>-<sp/>old_p;</highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p<sp/>+=<sp/>diff;</highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>src_end<sp/>+=<sp/>diff<sp/>+<sp/>incl_code.size();</highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>code_start<sp/>+=<sp/>diff;</highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>code_end<sp/>+=<sp/>diff;</highlight></codeline>
<codeline lineno="366"><highlight class="normal"></highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(p[0]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p++;</highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>code_end<sp/>=<sp/>p;</highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>code_end<sp/>=<sp/>p;</highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">//<sp/>double<sp/>##<sp/>-<sp/>shader<sp/>compiler&apos;s<sp/>preprocessor</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*pp_start<sp/>=<sp/>p<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="377"><highlight class="normal"></highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(p<sp/>&amp;&amp;<sp/>p<sp/>&lt;<sp/>src_end)</highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p<sp/>=<sp/>strchr(p,<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(p<sp/>&amp;&amp;<sp/>p[-1]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;\\&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p<sp/>=<sp/>strchr(p<sp/>+<sp/>1,<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!p)</highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p<sp/>=<sp/>src_end;</highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="390"><highlight class="normal"></highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*dtext<sp/>=<sp/>skip_white_space(pp_start<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classCodeSourceBlocks_1accda1ef626ab5b6ca05707da18f132bd" kindref="member">ppCheckDirective</ref>(dtext,<sp/>ctx))</highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>directive<sp/>approved<sp/>as<sp/>part<sp/>of<sp/>preprocessor</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pp_as_comments)</highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(line_start[0]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>line_start++;</highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*line_end<sp/>=<sp/>strchr(dtext,<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!line_end)</highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>line_end<sp/>=<sp/>dtext<sp/>+<sp/>strlen(dtext);</highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>end_pp.printf(128,<sp/></highlight><highlight class="stringliteral">&quot;%.*s&quot;</highlight><highlight class="normal">,<sp/>line_end<sp/>-<sp/>line_start,<sp/>line_start);</highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(code_start<sp/>&lt;<sp/>code_end)</highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classCodeSourceBlocks_1a09af05a0f0bd204e2515dd7a890bfd3a" kindref="member">ppSrcCode</ref>(code_start,<sp/>code_end<sp/>-<sp/>code_start,<sp/>fname_id,<sp/>line_no,<sp/>ctx,<sp/>start_pp.str(),<sp/>end_pp.str());</highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>start_pp<sp/>=<sp/>end_pp;</highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(code_start<sp/>&lt;<sp/>code_end)</highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classCodeSourceBlocks_1a09af05a0f0bd204e2515dd7a890bfd3a" kindref="member">ppSrcCode</ref>(code_start,<sp/>code_end<sp/>-<sp/>code_start,<sp/>fname_id,<sp/>line_no,<sp/>ctx,<sp/>NULL,<sp/>NULL);</highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>pp_line<sp/>=<sp/>line_no;</highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>inc_lines(code_start,<sp/>pp_start,<sp/>pp_line);</highlight></codeline>
<codeline lineno="411"><highlight class="normal"></highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="classCodeSourceBlocks_1a0d4a24b752fe215455a3f8cd0232f7e5" kindref="member">ppDirective</ref>(pp_start,<sp/>p<sp/>-<sp/>pp_start,<sp/>dtext,<sp/>fname_id,<sp/>pp_line,<sp/>ctx))</highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="shLog_8cpp_1a2926179632c7c86265007652d3d30b14" kindref="member">sh_debug</ref>(<ref refid="shLog_8h_1a66042048eb3ce30a1dccb2ebf8c2fd5caae3b70b41400c8a36e8a094ac1dbe43c" kindref="member">SHLOG_ERROR</ref>,<sp/></highlight><highlight class="stringliteral">&quot;bad<sp/>pp<sp/>directive<sp/>at<sp/>%s,%d:\n<sp/><sp/><sp/><sp/>%.*s\n&quot;</highlight><highlight class="normal">,<sp/>fileNames.getName(fname_id),<sp/>pp_line,<sp/>p<sp/>-<sp/>pp_start,</highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pp_start);</highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="418"><highlight class="normal"></highlight></codeline>
<codeline lineno="419"><highlight class="normal"></highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>inc_lines(code_start,<sp/>p,<sp/>line_no);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>line_no<sp/>=<sp/>pp_line;</highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>inc_lines(pp_start<sp/>+<sp/>1,<sp/>p,<sp/>line_no);</highlight></codeline>
<codeline lineno="423"><highlight class="normal"></highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(p[0]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p++;</highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>code_start<sp/>=<sp/>code_end<sp/>=<sp/>p;</highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>directive<sp/>is<sp/>treated<sp/>as<sp/>part<sp/>of<sp/>code</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>code_end<sp/>=<sp/>p;</highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(code_end[0]<sp/>!=<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>code_end++;</highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="437"><highlight class="normal"></highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(code_start<sp/>&lt;<sp/>code_end)</highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classCodeSourceBlocks_1a09af05a0f0bd204e2515dd7a890bfd3a" kindref="member">ppSrcCode</ref>(code_start,<sp/>code_end<sp/>-<sp/>code_start,<sp/>fname_id,<sp/>line_no,<sp/>ctx,<sp/>NULL,<sp/>NULL);</highlight></codeline>
<codeline lineno="440"><highlight class="normal"></highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>debug(&quot;\n-----<sp/>parsed<sp/>code:&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>dump_code(blocks,<sp/>0);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="444"><highlight class="normal">}</highlight></codeline>
<codeline lineno="445"><highlight class="normal"></highlight></codeline>
<codeline lineno="446"><highlight class="normal"></highlight></codeline>
<codeline lineno="447"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classCodeSourceBlocks_1a09af05a0f0bd204e2515dd7a890bfd3a" kindref="member">CodeSourceBlocks::ppSrcCode</ref>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*s,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>len,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>fnameId,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>line,<sp/><ref refid="structCodeSourceBlocks_1_1ParserContext" kindref="compound">ctx_t</ref><sp/>&amp;ctx,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*start_comment,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*end_comment)</highlight></codeline>
<codeline lineno="448"><highlight class="normal">{</highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ctx.<ref refid="structCodeSourceBlocks_1_1ParserContext_1a3684f389356353604f51f99a81410aff" kindref="member">topCondEval</ref>()<sp/>==<sp/><ref refid="classCodeSourceBlocks_1a32e3a067a09b1c3c6b13a9a95e5c7a3ca2f7a06bf2844224cac2140b35e20a9bb" kindref="member">ExprValue::ConstFalse</ref>)</highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/><sp/><sp/>ctx.<ref refid="structCodeSourceBlocks_1_1ParserContext_1a99fb2984c1caa9880e631e9e4b9af576" kindref="member">errors</ref>.clear();</highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="454"><highlight class="normal"></highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*p<sp/>=<sp/>s<sp/>+<sp/>len<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(len<sp/>&gt;<sp/>0<sp/>&amp;&amp;<sp/>*p<sp/>==<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/><sp/><sp/>p--,<sp/>len--;</highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(len<sp/>&gt;<sp/>0<sp/>&amp;&amp;<sp/>*s<sp/>==<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/><sp/><sp/>s++,<sp/>len--,<sp/>line++;</highlight></codeline>
<codeline lineno="460"><highlight class="normal"></highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/>Tab&lt;CodeSourceBlocks::Fragment&gt;<sp/>&amp;prg<sp/>=<sp/>ctx.<ref refid="structCodeSourceBlocks_1_1ParserContext_1aaabd65065fac4572fc59bba62c422231" kindref="member">topProg</ref>();</highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/><ref refid="structCodeSourceBlocks_1_1Unconditional" kindref="compound">ublock_t</ref><sp/>&amp;uncond<sp/>=<sp/>prg.push_back().uncond;</highlight></codeline>
<codeline lineno="463"><highlight class="normal"></highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>c<sp/>=<sp/>s[len];</highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/>s[len]<sp/>=<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="466"><highlight class="normal"></highlight></codeline>
<codeline lineno="467"><highlight class="normal"><sp/><sp/>String<sp/>st;</highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(start_comment)</highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/><sp/><sp/>st.printf(128<sp/>+<sp/>len,<sp/></highlight><highlight class="stringliteral">&quot;//%s\n%s\n//%s&quot;</highlight><highlight class="normal">,<sp/>start_comment,<sp/>s,<sp/>end_comment);</highlight></codeline>
<codeline lineno="470"><highlight class="normal"></highlight></codeline>
<codeline lineno="471"><highlight class="normal"><sp/><sp/>addCodeBlock(uncond,<sp/>start_comment<sp/>?<sp/>st.str()<sp/>:<sp/>s,<sp/>fnameId,<sp/>line);</highlight></codeline>
<codeline lineno="472"><highlight class="normal"><sp/><sp/>uncond.<ref refid="structCodeSourceBlocks_1_1Unconditional_1a2ff45729360582327c0d2e3bdb024ce7" kindref="member">errors</ref><sp/>=<sp/>eastl::move(ctx.<ref refid="structCodeSourceBlocks_1_1ParserContext_1a99fb2984c1caa9880e631e9e4b9af576" kindref="member">errors</ref>);</highlight></codeline>
<codeline lineno="473"><highlight class="normal"></highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/>s[len]<sp/>=<sp/>c;</highlight></codeline>
<codeline lineno="475"><highlight class="normal"></highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>debug(&quot;code<sp/>%s,%d<sp/>[\n%.*s\n]&quot;,<sp/>fileNames.getName(fnameId),<sp/>line,<sp/>len,<sp/>s);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="477"><highlight class="normal">}</highlight></codeline>
<codeline lineno="478"><highlight class="normal"></highlight></codeline>
<codeline lineno="479"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classCodeSourceBlocks_1accda1ef626ab5b6ca05707da18f132bd" kindref="member">CodeSourceBlocks::ppCheckDirective</ref>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*dtext,<sp/><ref refid="structCodeSourceBlocks_1_1ParserContext" kindref="compound">ctx_t</ref><sp/>&amp;ctx)</highlight></codeline>
<codeline lineno="480"><highlight class="normal">{</highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(memcmp(dtext,<sp/></highlight><highlight class="stringliteral">&quot;pragma<sp/>&quot;</highlight><highlight class="normal">,<sp/>7)<sp/>==<sp/>0<sp/>||<sp/>memcmp(dtext,<sp/></highlight><highlight class="stringliteral">&quot;define<sp/>&quot;</highlight><highlight class="normal">,<sp/>7)<sp/>==<sp/>0<sp/>||<sp/>memcmp(dtext,<sp/></highlight><highlight class="stringliteral">&quot;undef<sp/>&quot;</highlight><highlight class="normal">,<sp/>6)<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="482"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="483"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="484"><highlight class="normal">}</highlight></codeline>
<codeline lineno="485"><highlight class="normal"></highlight></codeline>
<codeline lineno="486"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classCodeSourceBlocks_1a0d4a24b752fe215455a3f8cd0232f7e5" kindref="member">CodeSourceBlocks::ppDirective</ref>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*s,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>len,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*dtext,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>fnameId,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>line,<sp/><ref refid="structCodeSourceBlocks_1_1ParserContext" kindref="compound">ctx_t</ref><sp/>&amp;ctx)</highlight></codeline>
<codeline lineno="487"><highlight class="normal">{</highlight></codeline>
<codeline lineno="488"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>debug(&quot;preproc<sp/>[#%.*s]&quot;,<sp/>s+len-dtext,<sp/>dtext);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="489"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strncmp(dtext,<sp/></highlight><highlight class="stringliteral">&quot;if<sp/>&quot;</highlight><highlight class="normal">,<sp/>3)<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="490"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="491"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>condLen<sp/>=<sp/>s<sp/>+<sp/>len<sp/>-<sp/>dtext<sp/>-<sp/>3;</highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*condStr<sp/>=<sp/>dtext<sp/>+<sp/>3;</highlight></codeline>
<codeline lineno="493"><highlight class="normal"></highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/><sp/><sp/>Tab&lt;CodeSourceBlocks::Fragment&gt;<sp/>&amp;prg<sp/>=<sp/>ctx.<ref refid="structCodeSourceBlocks_1_1ParserContext_1aaabd65065fac4572fc59bba62c422231" kindref="member">topProg</ref>();</highlight></codeline>
<codeline lineno="495"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structCodeSourceBlocks_1_1Fragment" kindref="compound">CodeSourceBlocks::Fragment</ref><sp/>&amp;f<sp/>=<sp/>prg.push_back();</highlight></codeline>
<codeline lineno="496"><highlight class="normal"></highlight></codeline>
<codeline lineno="497"><highlight class="normal"><sp/><sp/><sp/><sp/>f.<ref refid="structCodeSourceBlocks_1_1Fragment_1ab1d7388b309ffe031261bbd55e9a1349" kindref="member">cond</ref>.reset(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>Condition);</highlight></codeline>
<codeline lineno="498"><highlight class="normal"><sp/><sp/><sp/><sp/>f.<ref refid="structCodeSourceBlocks_1_1Fragment_1ab1d7388b309ffe031261bbd55e9a1349" kindref="member">cond</ref>-&gt;onIf.expr<sp/>=<sp/><ref refid="condParser_8cpp_1ab12a90f484d72d5257cae5c6acb194ad" kindref="member">parse_pp_condition</ref>(ctx.<ref refid="structCodeSourceBlocks_1_1ParserContext_1ac7906d066425d091f5cfa074cf91981c" kindref="member">stage</ref>,<sp/>condStr,<sp/>condLen,<sp/>fileNames.getName(fnameId),<sp/>line,<sp/>ctx.<ref refid="structCodeSourceBlocks_1_1ParserContext_1a8822bb6d961cffb83ad3fbcdac0277f9" kindref="member">mainCtx</ref>);</highlight></codeline>
<codeline lineno="499"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!f.<ref refid="structCodeSourceBlocks_1_1Fragment_1ab1d7388b309ffe031261bbd55e9a1349" kindref="member">cond</ref>-&gt;onIf.expr)</highlight></codeline>
<codeline lineno="500"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="501"><highlight class="normal"></highlight></codeline>
<codeline lineno="502"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classCodeSourceBlocks_1a32e3a067a09b1c3c6b13a9a95e5c7a3c" kindref="member">ExprValue</ref><sp/>cond_eval<sp/>=<sp/>ctx.<ref refid="structCodeSourceBlocks_1_1ParserContext_1a3684f389356353604f51f99a81410aff" kindref="member">topCondEval</ref>();</highlight></codeline>
<codeline lineno="503"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cond_eval<sp/>!=<sp/><ref refid="classCodeSourceBlocks_1a32e3a067a09b1c3c6b13a9a95e5c7a3ca2f7a06bf2844224cac2140b35e20a9bb" kindref="member">ExprValue::ConstFalse</ref>)</highlight></codeline>
<codeline lineno="504"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="505"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classShVarBool" kindref="compound">ShVarBool</ref><sp/>e<sp/>=<sp/>ctx.<ref refid="structCodeSourceBlocks_1_1ParserContext_1a04f7eeb9b34f2f5f14d31125cdea26b8" kindref="member">evalCb</ref>.<ref refid="classShaderParser_1_1ShaderBoolEvalCB_1a9adf5ca170f128f4b53c4dce191b6e1b" kindref="member">eval_expr</ref>(*f.<ref refid="structCodeSourceBlocks_1_1Fragment_1ab1d7388b309ffe031261bbd55e9a1349" kindref="member">cond</ref>-&gt;onIf.expr);</highlight></codeline>
<codeline lineno="506"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(e.<ref refid="classShVarBool_1a56bef58e491d1cb5488cd5be282fe3bc" kindref="member">isConst</ref>)</highlight></codeline>
<codeline lineno="507"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cond_eval<sp/>=<sp/>e.<ref refid="classShVarBool_1aa1e84216403109d360db42129c7f698d" kindref="member">value</ref><sp/>?<sp/><ref refid="classCodeSourceBlocks_1a32e3a067a09b1c3c6b13a9a95e5c7a3caf7a81025ec822b1a7554e3b641cff501" kindref="member">ExprValue::ConstTrue</ref><sp/>:<sp/><ref refid="classCodeSourceBlocks_1a32e3a067a09b1c3c6b13a9a95e5c7a3ca2f7a06bf2844224cac2140b35e20a9bb" kindref="member">ExprValue::ConstFalse</ref>;</highlight></codeline>
<codeline lineno="508"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="509"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cond_eval<sp/>=<sp/><ref refid="classCodeSourceBlocks_1a32e3a067a09b1c3c6b13a9a95e5c7a3ca6267ef339fe3b5e7cc5d6160917ca593" kindref="member">ExprValue::NonConst</ref>;</highlight></codeline>
<codeline lineno="510"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="511"><highlight class="normal"></highlight></codeline>
<codeline lineno="512"><highlight class="normal"><sp/><sp/><sp/><sp/>f.<ref refid="structCodeSourceBlocks_1_1Fragment_1ab1d7388b309ffe031261bbd55e9a1349" kindref="member">cond</ref>-&gt;onIf.constExprVal<sp/>=<sp/>cond_eval;</highlight></codeline>
<codeline lineno="513"><highlight class="normal"><sp/><sp/><sp/><sp/>ctx.<ref refid="structCodeSourceBlocks_1_1ParserContext_1a5e1aa4b6fd31bcee46472a225b1b399a" kindref="member">push_back</ref>(&amp;f.<ref refid="structCodeSourceBlocks_1_1Fragment_1ab1d7388b309ffe031261bbd55e9a1349" kindref="member">cond</ref>-&gt;onIf.onTrue,<sp/>0,<sp/>cond_eval,<sp/>cond_eval<sp/>==<sp/><ref refid="classCodeSourceBlocks_1a32e3a067a09b1c3c6b13a9a95e5c7a3caf7a81025ec822b1a7554e3b641cff501" kindref="member">ExprValue::ConstTrue</ref>,<sp/>cond_eval<sp/>==<sp/><ref refid="classCodeSourceBlocks_1a32e3a067a09b1c3c6b13a9a95e5c7a3ca6267ef339fe3b5e7cc5d6160917ca593" kindref="member">ExprValue::NonConst</ref>);</highlight></codeline>
<codeline lineno="514"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="515"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="516"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strncmp(dtext,<sp/></highlight><highlight class="stringliteral">&quot;elif<sp/>&quot;</highlight><highlight class="normal">,<sp/>5)<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="517"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="518"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ctx.<ref refid="structCodeSourceBlocks_1_1ParserContext_1ade343fafcbc475b73dc62a0c3fbdfdd5" kindref="member">stackSize</ref>()<sp/>&lt;<sp/>2<sp/>||<sp/>ctx.<ref refid="structCodeSourceBlocks_1_1ParserContext_1a44f526c215b5308bf7bb6a169033426c" kindref="member">topState</ref>()<sp/>!=<sp/>0)</highlight></codeline>
<codeline lineno="519"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="520"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>debug(</highlight><highlight class="stringliteral">&quot;non-paired<sp/>##elif&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="521"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="522"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="523"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>has_true<sp/>=<sp/>ctx.<ref refid="structCodeSourceBlocks_1_1ParserContext_1af90d499388f4fb3b9784d7461247752b" kindref="member">topHasTrue</ref>(),<sp/>has_any<sp/>=<sp/>ctx.<ref refid="structCodeSourceBlocks_1_1ParserContext_1a62b2177fe873e2c54187a5e413414129" kindref="member">topHasAny</ref>();</highlight></codeline>
<codeline lineno="524"><highlight class="normal"><sp/><sp/><sp/><sp/>ctx.<ref refid="structCodeSourceBlocks_1_1ParserContext_1a2fad2502284214ed63041c5e4fa57dcf" kindref="member">pop_back</ref>();</highlight></codeline>
<codeline lineno="525"><highlight class="normal"></highlight></codeline>
<codeline lineno="526"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>condLen<sp/>=<sp/>s<sp/>+<sp/>len<sp/>-<sp/>dtext<sp/>-<sp/>5;</highlight></codeline>
<codeline lineno="527"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*condStr<sp/>=<sp/>dtext<sp/>+<sp/>5;</highlight></codeline>
<codeline lineno="528"><highlight class="normal"></highlight></codeline>
<codeline lineno="529"><highlight class="normal"><sp/><sp/><sp/><sp/>Tab&lt;CodeSourceBlocks::Fragment&gt;<sp/>&amp;prg<sp/>=<sp/>ctx.<ref refid="structCodeSourceBlocks_1_1ParserContext_1aaabd65065fac4572fc59bba62c422231" kindref="member">topProg</ref>();</highlight></codeline>
<codeline lineno="530"><highlight class="normal"><sp/><sp/><sp/><sp/>G_ASSERT(prg.size()<sp/>&gt;<sp/>0);</highlight></codeline>
<codeline lineno="531"><highlight class="normal"><sp/><sp/><sp/><sp/>Condition<sp/>*cond<sp/>=<sp/>prg.back().cond.get();</highlight></codeline>
<codeline lineno="532"><highlight class="normal"><sp/><sp/><sp/><sp/>G_ASSERT(cond);</highlight></codeline>
<codeline lineno="533"><highlight class="normal"></highlight></codeline>
<codeline lineno="534"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structCodeSourceBlocks_1_1CondIf" kindref="compound">CodeSourceBlocks::CondIf</ref><sp/>&amp;f<sp/>=<sp/>cond-&gt;onElif.push_back();</highlight></codeline>
<codeline lineno="535"><highlight class="normal"><sp/><sp/><sp/><sp/>f.<ref refid="structCodeSourceBlocks_1_1CondIf_1a1299b58ae55209d2f265065a5ca7b33d" kindref="member">expr</ref><sp/>=<sp/><ref refid="condParser_8cpp_1ab12a90f484d72d5257cae5c6acb194ad" kindref="member">parse_pp_condition</ref>(ctx.<ref refid="structCodeSourceBlocks_1_1ParserContext_1ac7906d066425d091f5cfa074cf91981c" kindref="member">stage</ref>,<sp/>condStr,<sp/>condLen,<sp/>fileNames.getName(fnameId),<sp/>line,<sp/>ctx.<ref refid="structCodeSourceBlocks_1_1ParserContext_1a8822bb6d961cffb83ad3fbcdac0277f9" kindref="member">mainCtx</ref>);</highlight></codeline>
<codeline lineno="536"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!f.<ref refid="structCodeSourceBlocks_1_1CondIf_1a1299b58ae55209d2f265065a5ca7b33d" kindref="member">expr</ref>)</highlight></codeline>
<codeline lineno="537"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="538"><highlight class="normal"></highlight></codeline>
<codeline lineno="539"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classCodeSourceBlocks_1a32e3a067a09b1c3c6b13a9a95e5c7a3c" kindref="member">ExprValue</ref><sp/>cond_eval<sp/>=<sp/><ref refid="classCodeSourceBlocks_1a32e3a067a09b1c3c6b13a9a95e5c7a3ca2f7a06bf2844224cac2140b35e20a9bb" kindref="member">ExprValue::ConstFalse</ref>;</highlight></codeline>
<codeline lineno="540"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!has_true)</highlight></codeline>
<codeline lineno="541"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="542"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cond_eval<sp/>=<sp/>ctx.<ref refid="structCodeSourceBlocks_1_1ParserContext_1a3684f389356353604f51f99a81410aff" kindref="member">topCondEval</ref>();</highlight></codeline>
<codeline lineno="543"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cond_eval<sp/>!=<sp/><ref refid="classCodeSourceBlocks_1a32e3a067a09b1c3c6b13a9a95e5c7a3ca2f7a06bf2844224cac2140b35e20a9bb" kindref="member">ExprValue::ConstFalse</ref>)</highlight></codeline>
<codeline lineno="544"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="545"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classShVarBool" kindref="compound">ShVarBool</ref><sp/>e<sp/>=<sp/>ctx.<ref refid="structCodeSourceBlocks_1_1ParserContext_1a04f7eeb9b34f2f5f14d31125cdea26b8" kindref="member">evalCb</ref>.<ref refid="classShaderParser_1_1ShaderBoolEvalCB_1a9adf5ca170f128f4b53c4dce191b6e1b" kindref="member">eval_expr</ref>(*f.<ref refid="structCodeSourceBlocks_1_1CondIf_1a1299b58ae55209d2f265065a5ca7b33d" kindref="member">expr</ref>);</highlight></codeline>
<codeline lineno="546"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(e.<ref refid="classShVarBool_1a56bef58e491d1cb5488cd5be282fe3bc" kindref="member">isConst</ref>)</highlight></codeline>
<codeline lineno="547"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cond_eval<sp/>=<sp/>e.<ref refid="classShVarBool_1aa1e84216403109d360db42129c7f698d" kindref="member">value</ref><sp/>?<sp/><ref refid="classCodeSourceBlocks_1a32e3a067a09b1c3c6b13a9a95e5c7a3caf7a81025ec822b1a7554e3b641cff501" kindref="member">ExprValue::ConstTrue</ref><sp/>:<sp/><ref refid="classCodeSourceBlocks_1a32e3a067a09b1c3c6b13a9a95e5c7a3ca2f7a06bf2844224cac2140b35e20a9bb" kindref="member">ExprValue::ConstFalse</ref>;</highlight></codeline>
<codeline lineno="548"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="549"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cond_eval<sp/>=<sp/><ref refid="classCodeSourceBlocks_1a32e3a067a09b1c3c6b13a9a95e5c7a3ca6267ef339fe3b5e7cc5d6160917ca593" kindref="member">ExprValue::NonConst</ref>;</highlight></codeline>
<codeline lineno="550"><highlight class="normal"></highlight></codeline>
<codeline lineno="551"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>has_true<sp/>|=<sp/>(cond_eval<sp/>==<sp/><ref refid="classCodeSourceBlocks_1a32e3a067a09b1c3c6b13a9a95e5c7a3caf7a81025ec822b1a7554e3b641cff501" kindref="member">ExprValue::ConstTrue</ref>);</highlight></codeline>
<codeline lineno="552"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>has_any<sp/>|=<sp/>(cond_eval<sp/>==<sp/><ref refid="classCodeSourceBlocks_1a32e3a067a09b1c3c6b13a9a95e5c7a3ca6267ef339fe3b5e7cc5d6160917ca593" kindref="member">ExprValue::NonConst</ref>);</highlight></codeline>
<codeline lineno="553"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="554"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="555"><highlight class="normal"></highlight></codeline>
<codeline lineno="556"><highlight class="normal"><sp/><sp/><sp/><sp/>f.<ref refid="structCodeSourceBlocks_1_1CondIf_1a58c8ba4d4d6bc35ad86517d1ecd1f236" kindref="member">constExprVal</ref><sp/>=<sp/>cond_eval;</highlight></codeline>
<codeline lineno="557"><highlight class="normal"><sp/><sp/><sp/><sp/>ctx.<ref refid="structCodeSourceBlocks_1_1ParserContext_1a5e1aa4b6fd31bcee46472a225b1b399a" kindref="member">push_back</ref>(&amp;f.<ref refid="structCodeSourceBlocks_1_1CondIf_1a5082e17e70d2a47f60493eb097d995ed" kindref="member">onTrue</ref>,<sp/>0,<sp/>cond_eval,<sp/>has_true,<sp/>has_any);</highlight></codeline>
<codeline lineno="558"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="559"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="560"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strncmp(dtext,<sp/></highlight><highlight class="stringliteral">&quot;else&quot;</highlight><highlight class="normal">,<sp/>4)<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="561"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="562"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(skip_white_space(dtext<sp/>+<sp/>4)<sp/>&lt;<sp/>s<sp/>+<sp/>len)</highlight></codeline>
<codeline lineno="563"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="564"><highlight class="normal"></highlight></codeline>
<codeline lineno="565"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ctx.<ref refid="structCodeSourceBlocks_1_1ParserContext_1ade343fafcbc475b73dc62a0c3fbdfdd5" kindref="member">stackSize</ref>()<sp/>&lt;<sp/>2<sp/>||<sp/>ctx.<ref refid="structCodeSourceBlocks_1_1ParserContext_1a44f526c215b5308bf7bb6a169033426c" kindref="member">topState</ref>()<sp/>!=<sp/>0)</highlight></codeline>
<codeline lineno="566"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="567"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>debug(</highlight><highlight class="stringliteral">&quot;non-paired<sp/>##else&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="568"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="569"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="570"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>has_true<sp/>=<sp/>ctx.<ref refid="structCodeSourceBlocks_1_1ParserContext_1af90d499388f4fb3b9784d7461247752b" kindref="member">topHasTrue</ref>(),<sp/>has_any<sp/>=<sp/>ctx.<ref refid="structCodeSourceBlocks_1_1ParserContext_1a62b2177fe873e2c54187a5e413414129" kindref="member">topHasAny</ref>();</highlight></codeline>
<codeline lineno="571"><highlight class="normal"><sp/><sp/><sp/><sp/>ctx.<ref refid="structCodeSourceBlocks_1_1ParserContext_1a2fad2502284214ed63041c5e4fa57dcf" kindref="member">pop_back</ref>();</highlight></codeline>
<codeline lineno="572"><highlight class="normal"></highlight></codeline>
<codeline lineno="573"><highlight class="normal"><sp/><sp/><sp/><sp/>Tab&lt;CodeSourceBlocks::Fragment&gt;<sp/>&amp;prg<sp/>=<sp/>ctx.<ref refid="structCodeSourceBlocks_1_1ParserContext_1aaabd65065fac4572fc59bba62c422231" kindref="member">topProg</ref>();</highlight></codeline>
<codeline lineno="574"><highlight class="normal"><sp/><sp/><sp/><sp/>G_ASSERT(prg.size()<sp/>&gt;<sp/>0);</highlight></codeline>
<codeline lineno="575"><highlight class="normal"><sp/><sp/><sp/><sp/>Condition<sp/>*cond<sp/>=<sp/>prg.back().cond.get();</highlight></codeline>
<codeline lineno="576"><highlight class="normal"><sp/><sp/><sp/><sp/>G_ASSERT(cond);</highlight></codeline>
<codeline lineno="577"><highlight class="normal"></highlight></codeline>
<codeline lineno="578"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classCodeSourceBlocks_1a32e3a067a09b1c3c6b13a9a95e5c7a3c" kindref="member">ExprValue</ref><sp/>cond_eval<sp/>=<sp/>ctx.<ref refid="structCodeSourceBlocks_1_1ParserContext_1a3684f389356353604f51f99a81410aff" kindref="member">topCondEval</ref>();</highlight></codeline>
<codeline lineno="579"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cond_eval<sp/>!=<sp/><ref refid="classCodeSourceBlocks_1a32e3a067a09b1c3c6b13a9a95e5c7a3ca2f7a06bf2844224cac2140b35e20a9bb" kindref="member">ExprValue::ConstFalse</ref>)</highlight></codeline>
<codeline lineno="580"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cond_eval<sp/>=<sp/>has_true<sp/>?<sp/><ref refid="classCodeSourceBlocks_1a32e3a067a09b1c3c6b13a9a95e5c7a3ca2f7a06bf2844224cac2140b35e20a9bb" kindref="member">ExprValue::ConstFalse</ref><sp/>:<sp/>(has_any<sp/>?<sp/><ref refid="classCodeSourceBlocks_1a32e3a067a09b1c3c6b13a9a95e5c7a3ca6267ef339fe3b5e7cc5d6160917ca593" kindref="member">ExprValue::NonConst</ref><sp/>:<sp/><ref refid="classCodeSourceBlocks_1a32e3a067a09b1c3c6b13a9a95e5c7a3caf7a81025ec822b1a7554e3b641cff501" kindref="member">ExprValue::ConstTrue</ref>);</highlight></codeline>
<codeline lineno="581"><highlight class="normal"><sp/><sp/><sp/><sp/>ctx.<ref refid="structCodeSourceBlocks_1_1ParserContext_1a5e1aa4b6fd31bcee46472a225b1b399a" kindref="member">push_back</ref>(&amp;cond-&gt;onElse,<sp/>1,<sp/>cond_eval,<sp/>has_true,<sp/>0);</highlight></codeline>
<codeline lineno="582"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="583"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="584"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strncmp(dtext,<sp/></highlight><highlight class="stringliteral">&quot;endif&quot;</highlight><highlight class="normal">,<sp/>5)<sp/>==<sp/>0<sp/>&amp;&amp;<sp/><ref refid="fast__isalnum_8h_1ac22fa5fde85cf9aca1bfb9d8321ae535" kindref="member">fast_isspace</ref>(dtext[5]))</highlight></codeline>
<codeline lineno="585"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="586"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ctx.<ref refid="structCodeSourceBlocks_1_1ParserContext_1ade343fafcbc475b73dc62a0c3fbdfdd5" kindref="member">stackSize</ref>()<sp/>&lt;<sp/>2<sp/>||<sp/>ctx.<ref refid="structCodeSourceBlocks_1_1ParserContext_1a44f526c215b5308bf7bb6a169033426c" kindref="member">topState</ref>()<sp/>&lt;<sp/>0)</highlight></codeline>
<codeline lineno="587"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="588"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>debug(</highlight><highlight class="stringliteral">&quot;non-paired<sp/>##endif&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="589"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="590"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="591"><highlight class="normal"><sp/><sp/><sp/><sp/>ctx.<ref refid="structCodeSourceBlocks_1_1ParserContext_1a2fad2502284214ed63041c5e4fa57dcf" kindref="member">pop_back</ref>();</highlight></codeline>
<codeline lineno="592"><highlight class="normal"></highlight></codeline>
<codeline lineno="593"><highlight class="normal"><sp/><sp/><sp/><sp/>Tab&lt;CodeSourceBlocks::Fragment&gt;<sp/>&amp;prg<sp/>=<sp/>ctx.<ref refid="structCodeSourceBlocks_1_1ParserContext_1aaabd65065fac4572fc59bba62c422231" kindref="member">topProg</ref>();</highlight></codeline>
<codeline lineno="594"><highlight class="normal"><sp/><sp/><sp/><sp/>G_ASSERT(prg.size()<sp/>&gt;<sp/>0);</highlight></codeline>
<codeline lineno="595"><highlight class="normal"><sp/><sp/><sp/><sp/>Condition<sp/>*cond<sp/>=<sp/>prg.back().cond.get();</highlight></codeline>
<codeline lineno="596"><highlight class="normal"><sp/><sp/><sp/><sp/>G_ASSERT(cond);</highlight></codeline>
<codeline lineno="597"><highlight class="normal"></highlight></codeline>
<codeline lineno="598"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cond-&gt;onIf.constExprVal<sp/>==<sp/><ref refid="classCodeSourceBlocks_1a32e3a067a09b1c3c6b13a9a95e5c7a3caf7a81025ec822b1a7554e3b641cff501" kindref="member">ExprValue::ConstTrue</ref>)</highlight></codeline>
<codeline lineno="599"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>clear_and_shrink(cond-&gt;onElif);</highlight></codeline>
<codeline lineno="600"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="601"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="602"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>cond-&gt;onElif.size();<sp/>i++)</highlight></codeline>
<codeline lineno="603"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cond-&gt;onElif[i].constExprVal<sp/>==<sp/><ref refid="classCodeSourceBlocks_1a32e3a067a09b1c3c6b13a9a95e5c7a3caf7a81025ec822b1a7554e3b641cff501" kindref="member">ExprValue::ConstTrue</ref>)</highlight></codeline>
<codeline lineno="604"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="605"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cond-&gt;onElif.resize(i<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="606"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="607"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="608"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cond-&gt;onElif[i].constExprVal<sp/>==<sp/><ref refid="classCodeSourceBlocks_1a32e3a067a09b1c3c6b13a9a95e5c7a3ca2f7a06bf2844224cac2140b35e20a9bb" kindref="member">ExprValue::ConstFalse</ref>)</highlight></codeline>
<codeline lineno="609"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="610"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>erase_items(cond-&gt;onElif,<sp/>i,<sp/>1);</highlight></codeline>
<codeline lineno="611"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i--;</highlight></codeline>
<codeline lineno="612"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="613"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="614"><highlight class="normal"></highlight></codeline>
<codeline lineno="615"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!cond-&gt;onElse.size())</highlight></codeline>
<codeline lineno="616"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="617"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>has_elif<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="618"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>cond-&gt;onElif.size()<sp/>-<sp/>1;<sp/>i<sp/>&gt;=<sp/>0;<sp/>i--)</highlight></codeline>
<codeline lineno="619"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cond-&gt;onElif[i].onTrue.size())</highlight></codeline>
<codeline lineno="620"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="621"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>has_elif<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="622"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="623"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="624"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="625"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>erase_items(cond-&gt;onElif,<sp/>i,<sp/>1);</highlight></codeline>
<codeline lineno="626"><highlight class="normal"></highlight></codeline>
<codeline lineno="627"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!cond-&gt;onIf.onTrue.size()<sp/>&amp;&amp;<sp/>!has_elif)</highlight></codeline>
<codeline lineno="628"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="629"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>debug(&quot;removed<sp/>empty<sp/>#if/#else/#endif<sp/>block&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="630"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>prg.pop_back();</highlight></codeline>
<codeline lineno="631"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="632"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="633"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="634"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="635"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strncmp(dtext,<sp/></highlight><highlight class="stringliteral">&quot;bool<sp/>&quot;</highlight><highlight class="normal">,<sp/>5)<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="636"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="637"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*p<sp/>=<sp/>skip_white_space(dtext<sp/>+<sp/>5);</highlight></codeline>
<codeline lineno="638"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(p<sp/>&gt;<sp/>s<sp/>+<sp/>len)</highlight></codeline>
<codeline lineno="639"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="640"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>debug(</highlight><highlight class="stringliteral">&quot;ident<sp/>expected<sp/>in<sp/>##bool&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="641"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="642"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="643"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*pe<sp/>=<sp/>p;</highlight></codeline>
<codeline lineno="644"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(pe<sp/>&lt;<sp/>s<sp/>+<sp/>len<sp/>&amp;&amp;<sp/>__iscsym(*pe))</highlight></codeline>
<codeline lineno="645"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>pe++;</highlight></codeline>
<codeline lineno="646"><highlight class="normal"></highlight></codeline>
<codeline lineno="647"><highlight class="normal"><sp/><sp/><sp/><sp/>String<sp/>ident(p,<sp/>pe<sp/>-<sp/>p);</highlight></codeline>
<codeline lineno="648"><highlight class="normal"></highlight></codeline>
<codeline lineno="649"><highlight class="normal"><sp/><sp/><sp/><sp/>Tab&lt;CodeSourceBlocks::Fragment&gt;<sp/>&amp;prg<sp/>=<sp/>ctx.<ref refid="structCodeSourceBlocks_1_1ParserContext_1aaabd65065fac4572fc59bba62c422231" kindref="member">topProg</ref>();</highlight></codeline>
<codeline lineno="650"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structCodeSourceBlocks_1_1Fragment" kindref="compound">CodeSourceBlocks::Fragment</ref><sp/>&amp;f<sp/>=<sp/>prg.push_back();</highlight></codeline>
<codeline lineno="651"><highlight class="normal"></highlight></codeline>
<codeline lineno="652"><highlight class="normal"><sp/><sp/><sp/><sp/>f.<ref refid="structCodeSourceBlocks_1_1Fragment_1a72413f0098608c3389d20f52c1ce7835" kindref="member">uncond</ref>.<ref refid="structCodeSourceBlocks_1_1Unconditional_1a72edc72431fdc5ef137edb86815ffd35" kindref="member">codeId</ref><sp/>=<sp/>-2;</highlight></codeline>
<codeline lineno="653"><highlight class="normal"><sp/><sp/><sp/><sp/>f.<ref refid="structCodeSourceBlocks_1_1Fragment_1a72413f0098608c3389d20f52c1ce7835" kindref="member">uncond</ref>.<ref refid="structCodeSourceBlocks_1_1Unconditional_1a0f681f329d6c5bacfa61ee14a85750ce" kindref="member">declBool</ref>.<ref refid="structCodeSourceBlocks_1_1Unconditional_1_1DeclBool_1a3584b7453ba270285491fba5f9fb974b" kindref="member">name</ref><sp/>=<sp/><ref refid="condParser_8cpp_1a3ff1752896ba975c88777e6b113a7313" kindref="member">mangle_bool_var</ref>(ctx.<ref refid="structCodeSourceBlocks_1_1ParserContext_1ac7906d066425d091f5cfa074cf91981c" kindref="member">stage</ref>,<sp/>ident);</highlight></codeline>
<codeline lineno="654"><highlight class="normal"><sp/><sp/><sp/><sp/>f.<ref refid="structCodeSourceBlocks_1_1Fragment_1a72413f0098608c3389d20f52c1ce7835" kindref="member">uncond</ref>.<ref refid="structCodeSourceBlocks_1_1Unconditional_1a0f681f329d6c5bacfa61ee14a85750ce" kindref="member">declBool</ref>.<ref refid="structCodeSourceBlocks_1_1Unconditional_1_1DeclBool_1a6d6e4bafb0305cc6d4eb81c89eb67f98" kindref="member">expr</ref><sp/>=<sp/><ref refid="condParser_8cpp_1ab12a90f484d72d5257cae5c6acb194ad" kindref="member">parse_pp_condition</ref>(</highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">,<sp/>ident,<sp/>ident.length(),<sp/>fileNames.getName(fnameId),<sp/>line,<sp/>ctx.<ref refid="structCodeSourceBlocks_1_1ParserContext_1a8822bb6d961cffb83ad3fbcdac0277f9" kindref="member">mainCtx</ref>);</highlight></codeline>
<codeline lineno="655"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!f.<ref refid="structCodeSourceBlocks_1_1Fragment_1a72413f0098608c3389d20f52c1ce7835" kindref="member">uncond</ref>.<ref refid="structCodeSourceBlocks_1_1Unconditional_1a0f681f329d6c5bacfa61ee14a85750ce" kindref="member">declBool</ref>.<ref refid="structCodeSourceBlocks_1_1Unconditional_1_1DeclBool_1a6d6e4bafb0305cc6d4eb81c89eb67f98" kindref="member">expr</ref>)</highlight></codeline>
<codeline lineno="656"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="657"><highlight class="normal"><sp/><sp/><sp/><sp/>ctx.<ref refid="structCodeSourceBlocks_1_1ParserContext_1a04f7eeb9b34f2f5f14d31125cdea26b8" kindref="member">evalCb</ref>.<ref refid="classShaderParser_1_1ShaderBoolEvalCB_1a69a7fb78162d42fed759dcfa1877d54c" kindref="member">decl_bool_alias</ref>(f.<ref refid="structCodeSourceBlocks_1_1Fragment_1a72413f0098608c3389d20f52c1ce7835" kindref="member">uncond</ref>.<ref refid="structCodeSourceBlocks_1_1Unconditional_1a0f681f329d6c5bacfa61ee14a85750ce" kindref="member">declBool</ref>.<ref refid="structCodeSourceBlocks_1_1Unconditional_1_1DeclBool_1a3584b7453ba270285491fba5f9fb974b" kindref="member">name</ref>,<sp/>*f.<ref refid="structCodeSourceBlocks_1_1Fragment_1a72413f0098608c3389d20f52c1ce7835" kindref="member">uncond</ref>.<ref refid="structCodeSourceBlocks_1_1Unconditional_1a0f681f329d6c5bacfa61ee14a85750ce" kindref="member">declBool</ref>.<ref refid="structCodeSourceBlocks_1_1Unconditional_1_1DeclBool_1a6d6e4bafb0305cc6d4eb81c89eb67f98" kindref="member">expr</ref>);</highlight></codeline>
<codeline lineno="658"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="659"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="660"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strncmp(dtext,<sp/></highlight><highlight class="stringliteral">&quot;declare<sp/>&quot;</highlight><highlight class="normal">,<sp/>8)<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="661"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="662"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*p<sp/>=<sp/>skip_white_space(dtext<sp/>+<sp/>8);</highlight></codeline>
<codeline lineno="663"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(p<sp/>&gt;<sp/>s<sp/>+<sp/>len)</highlight></codeline>
<codeline lineno="664"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="665"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>debug(</highlight><highlight class="stringliteral">&quot;ident<sp/>expected<sp/>in<sp/>##declare&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="666"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="667"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="668"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*pe<sp/>=<sp/>p;</highlight></codeline>
<codeline lineno="669"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(pe<sp/>&lt;<sp/>s<sp/>+<sp/>len<sp/>&amp;&amp;<sp/>__iscsym(*pe))</highlight></codeline>
<codeline lineno="670"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>pe++;</highlight></codeline>
<codeline lineno="671"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>c<sp/>=<sp/>*pe;</highlight></codeline>
<codeline lineno="672"><highlight class="normal"><sp/><sp/><sp/><sp/>*pe<sp/>=<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="673"><highlight class="normal"><sp/><sp/><sp/><sp/>addDeclBlock(ctx.<ref refid="structCodeSourceBlocks_1_1ParserContext_1aaabd65065fac4572fc59bba62c422231" kindref="member">topProg</ref>().push_back().uncond,<sp/>p,<sp/>ctx.<ref refid="structCodeSourceBlocks_1_1ParserContext_1a04f7eeb9b34f2f5f14d31125cdea26b8" kindref="member">evalCb</ref>.<ref refid="classShaderParser_1_1ShaderBoolEvalCB_1a086dc6d32830628d0635b45531188911" kindref="member">eval_interval_value</ref>(p));</highlight></codeline>
<codeline lineno="674"><highlight class="normal"><sp/><sp/><sp/><sp/>*pe<sp/>=<sp/>c;</highlight></codeline>
<codeline lineno="675"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classCodeSourceBlocks_1abaa15702645aa8ba99ff4367b643f83f" kindref="member">declCount</ref>++;</highlight></codeline>
<codeline lineno="676"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="677"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="678"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strncmp(dtext,<sp/></highlight><highlight class="stringliteral">&quot;assert&quot;</highlight><highlight class="normal">,<sp/>6)<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="679"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="680"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*par<sp/>=<sp/>eastl::find(dtext<sp/>+<sp/>6,<sp/>s<sp/>+<sp/>len,<sp/></highlight><highlight class="charliteral">&apos;(&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="681"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(par<sp/>&gt;=<sp/>s<sp/>+<sp/>len)</highlight></codeline>
<codeline lineno="682"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="683"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*p<sp/>=<sp/>par<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="684"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*begin_expr<sp/>=<sp/>skip_white_space(p);</highlight></codeline>
<codeline lineno="685"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*begin_quote<sp/>=<sp/>eastl::find(begin_expr,<sp/>s<sp/>+<sp/>len,<sp/></highlight><highlight class="charliteral">&apos;\&quot;&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="686"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>have_message<sp/>=<sp/>begin_quote<sp/>&lt;<sp/>s<sp/>+<sp/>len;</highlight></codeline>
<codeline lineno="687"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*end_quote<sp/>=<sp/>have_message<sp/>?<sp/>eastl::find(begin_quote<sp/>+<sp/>1,<sp/>s<sp/>+<sp/>len,<sp/></highlight><highlight class="charliteral">&apos;\&quot;&apos;</highlight><highlight class="normal">)<sp/>:<sp/>begin_quote;</highlight></codeline>
<codeline lineno="688"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(have_message<sp/>!=<sp/>(end_quote<sp/>&lt;<sp/>s<sp/>+<sp/>len))</highlight></codeline>
<codeline lineno="689"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="690"><highlight class="normal"></highlight></codeline>
<codeline lineno="691"><highlight class="normal"><sp/><sp/><sp/><sp/>eastl::string_view<sp/>expr(begin_expr,<sp/>have_message<sp/>?<sp/>begin_quote<sp/>-<sp/>begin_expr<sp/>:<sp/>s<sp/>+<sp/>len<sp/>-<sp/>begin_expr);</highlight></codeline>
<codeline lineno="692"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*end_expr<sp/>=<sp/>begin_expr<sp/>+<sp/>expr.rfind(have_message<sp/>?<sp/></highlight><highlight class="charliteral">&apos;,&apos;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&apos;)&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="693"><highlight class="normal"></highlight></codeline>
<codeline lineno="694"><highlight class="normal"><sp/><sp/><sp/><sp/>String<sp/>msg(0,<sp/></highlight><highlight class="stringliteral">&quot;Assert<sp/>failed<sp/>in<sp/>%s:%i\n\&quot;%.*s\&quot;%s%.*s\n&quot;</highlight><highlight class="normal">,<sp/>fileNames.getName(fnameId),<sp/>line,<sp/>end_expr<sp/>-<sp/>begin_expr,<sp/>begin_expr,</highlight></codeline>
<codeline lineno="695"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>have_message<sp/>?<sp/></highlight><highlight class="stringliteral">&quot;\n\n&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">,<sp/>have_message<sp/>?<sp/>end_quote<sp/>-<sp/>begin_quote<sp/>-<sp/>1<sp/>:<sp/>0,<sp/>begin_quote<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="696"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>msg_id<sp/>=<sp/>ctx.<ref refid="structCodeSourceBlocks_1_1ParserContext_1a04f7eeb9b34f2f5f14d31125cdea26b8" kindref="member">evalCb</ref>.<ref refid="classShaderParser_1_1ShaderBoolEvalCB_1a2a47dcc0c4945cd7ddd6568fa71e9151" kindref="member">add_message</ref>(msg,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="697"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(msg_id<sp/>&lt;<sp/>0)</highlight></codeline>
<codeline lineno="698"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="699"><highlight class="normal"></highlight></codeline>
<codeline lineno="700"><highlight class="normal"><sp/><sp/><sp/><sp/>debug(</highlight><highlight class="stringliteral">&quot;Added<sp/>message:\n%s&quot;</highlight><highlight class="normal">,<sp/>msg);</highlight></codeline>
<codeline lineno="701"><highlight class="normal"></highlight></codeline>
<codeline lineno="702"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*tail<sp/>=<sp/>have_message<sp/>?<sp/>end_quote<sp/>+<sp/>1<sp/>:<sp/>end_expr;</highlight></codeline>
<codeline lineno="703"><highlight class="normal"><sp/><sp/><sp/><sp/>String<sp/>code(0,<sp/></highlight><highlight class="stringliteral">&quot;_assert(%.*s,<sp/>%i%.*s&quot;</highlight><highlight class="normal">,<sp/>end_expr<sp/>-<sp/>begin_expr,<sp/>begin_expr,<sp/>msg_id,<sp/>dtext<sp/>+<sp/>len<sp/>-<sp/>tail,<sp/>tail);</highlight></codeline>
<codeline lineno="704"><highlight class="normal"><sp/><sp/><sp/><sp/>addCodeBlock(ctx.<ref refid="structCodeSourceBlocks_1_1ParserContext_1aaabd65065fac4572fc59bba62c422231" kindref="member">topProg</ref>().push_back().uncond,<sp/>code,<sp/>fnameId,<sp/>line);</highlight></codeline>
<codeline lineno="705"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="706"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="707"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="708"><highlight class="normal">}</highlight></codeline>
<codeline lineno="709"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classCodeSourceBlocks_1af099e1a1bbbc1bdd6d50d106abb7a78e" kindref="member">CodeSourceBlocks::ppDoInclude</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*incl_fn,<sp/>Tab&lt;char&gt;<sp/>&amp;out_text,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*src_fn,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>src_ln,<sp/>ParserContext<sp/>&amp;ctx)</highlight></codeline>
<codeline lineno="710"><highlight class="normal">{</highlight></codeline>
<codeline lineno="711"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>buf[DAGOR_MAX_PATH];</highlight></codeline>
<codeline lineno="712"><highlight class="normal"><sp/><sp/>String<sp/>fn(0,<sp/></highlight><highlight class="stringliteral">&quot;%s/%s&quot;</highlight><highlight class="normal">,<sp/>dd_get_fname_location(buf,<sp/>src_fn),<sp/>incl_fn);</highlight></codeline>
<codeline lineno="713"><highlight class="normal"><sp/><sp/>dd_simplify_fname_c(fn);</highlight></codeline>
<codeline lineno="714"><highlight class="normal"></highlight></codeline>
<codeline lineno="715"><highlight class="normal"><sp/><sp/>FullFileLoadCB<sp/>crd(fn);</highlight></codeline>
<codeline lineno="716"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!crd.fileHandle)</highlight></codeline>
<codeline lineno="717"><highlight class="normal"><sp/><sp/><sp/><sp/>crd.open(fn<sp/>=<sp/>incl_fn,<sp/>DF_READ);</highlight></codeline>
<codeline lineno="718"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!crd.fileHandle)</highlight></codeline>
<codeline lineno="719"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*f<sp/>=<sp/><ref refid="namespaceshc_1a47efde6b3d493adbe2119a5593807d36" kindref="member">shc::config</ref>().getShaderSrcRoot())</highlight></codeline>
<codeline lineno="720"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>crd.open(fn<sp/>=<sp/>String(0,<sp/></highlight><highlight class="stringliteral">&quot;%s/%s&quot;</highlight><highlight class="normal">,<sp/>f,<sp/>incl_fn,<sp/>DF_READ),<sp/>DF_READ);</highlight></codeline>
<codeline lineno="721"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!crd.fileHandle)</highlight></codeline>
<codeline lineno="722"><highlight class="normal"><sp/><sp/><sp/><sp/>crd.open(fn<sp/>=<sp/><ref refid="namespaceshc_1ae9d7e1fe461404fcd0feb93ca58da37f" kindref="member">shc::search_include_with_pathes</ref>(incl_fn),<sp/>DF_READ);</highlight></codeline>
<codeline lineno="723"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!crd.fileHandle)</highlight></codeline>
<codeline lineno="724"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="725"><highlight class="normal"></highlight></codeline>
<codeline lineno="726"><highlight class="normal"><sp/><sp/>String<sp/>s;</highlight></codeline>
<codeline lineno="727"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ctx.evalCb.is_debug_mode_enabled())</highlight></codeline>
<codeline lineno="728"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="729"><highlight class="normal"><sp/><sp/><sp/><sp/>s.printf(0,<sp/></highlight><highlight class="stringliteral">&quot;\n#undef<sp/>_FILE_\n#define<sp/>_FILE_<sp/>%d&quot;</highlight><highlight class="normal">,<sp/>ctx.evalCb.add_message(fn,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="730"><highlight class="normal"><sp/><sp/><sp/><sp/>append_items(out_text,<sp/>s.size()<sp/>-<sp/>1,<sp/>s.data());</highlight></codeline>
<codeline lineno="731"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="732"><highlight class="normal"><sp/><sp/>s.printf(0,<sp/></highlight><highlight class="stringliteral">&quot;\n#line<sp/>1<sp/>\&quot;%s\&quot;\n&quot;</highlight><highlight class="normal">,<sp/>fn);</highlight></codeline>
<codeline lineno="733"><highlight class="normal"><sp/><sp/>append_items(out_text,<sp/>s.size()<sp/>-<sp/>1,<sp/>s.data());</highlight></codeline>
<codeline lineno="734"><highlight class="normal"></highlight></codeline>
<codeline lineno="735"><highlight class="normal"><sp/><sp/>Tab&lt;char&gt;<sp/>fcont;</highlight></codeline>
<codeline lineno="736"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>file_sz<sp/>=<sp/>df_length(crd.fileHandle);</highlight></codeline>
<codeline lineno="737"><highlight class="normal"><sp/><sp/>fcont.resize(file_sz<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="738"><highlight class="normal"><sp/><sp/>crd.read(fcont.data(),<sp/>file_sz);</highlight></codeline>
<codeline lineno="739"><highlight class="normal"><sp/><sp/>fcont[file_sz]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="740"><highlight class="normal"></highlight></codeline>
<codeline lineno="741"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Validation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="742"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*ssp<sp/>=<sp/>fcont.data();</highlight></codeline>
<codeline lineno="743"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*sp<sp/>=<sp/>ssp;</highlight></codeline>
<codeline lineno="744"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(sp)</highlight></codeline>
<codeline lineno="745"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="746"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(isspace(*sp))</highlight></codeline>
<codeline lineno="747"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>sp++;</highlight></codeline>
<codeline lineno="748"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!*sp)</highlight></codeline>
<codeline lineno="749"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="750"><highlight class="normal"></highlight></codeline>
<codeline lineno="751"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Restrict<sp/>dagor<sp/>precompiler<sp/>macros<sp/>in<sp/>hlsl<sp/>include<sp/>files<sp/>outside<sp/>of<sp/>#define-s</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="752"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sp[0]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;#&apos;</highlight><highlight class="normal"><sp/>&amp;&amp;<sp/>sp[1]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;#&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="753"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="754"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="shLog_8cpp_1a2926179632c7c86265007652d3d30b14" kindref="member">sh_debug</ref>(<ref refid="shLog_8h_1a66042048eb3ce30a1dccb2ebf8c2fd5caae3b70b41400c8a36e8a094ac1dbe43c" kindref="member">SHLOG_ERROR</ref>,<sp/></highlight><highlight class="stringliteral">&quot;dagor<sp/>precompiler<sp/>macros<sp/>are<sp/>illegal<sp/>in<sp/>hlsl<sp/>include<sp/>files:<sp/>%s&quot;</highlight><highlight class="normal">,<sp/>incl_fn);</highlight></codeline>
<codeline lineno="755"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="756"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="757"><highlight class="normal"></highlight></codeline>
<codeline lineno="758"><highlight class="normal"><sp/><sp/><sp/><sp/>sp<sp/>=<sp/>strchr(sp,<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="759"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="760"><highlight class="normal"><sp/><sp/>append_items(out_text,<sp/>fcont.data()<sp/>+<sp/>fcont.size()<sp/>-<sp/>1<sp/>-<sp/>ssp,<sp/>ssp);</highlight></codeline>
<codeline lineno="761"><highlight class="normal"></highlight></codeline>
<codeline lineno="762"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ctx.evalCb.is_debug_mode_enabled())</highlight></codeline>
<codeline lineno="763"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="764"><highlight class="normal"><sp/><sp/><sp/><sp/>s.printf(0,<sp/></highlight><highlight class="stringliteral">&quot;\n#undef<sp/>_FILE_\n#define<sp/>_FILE_<sp/>%d&quot;</highlight><highlight class="normal">,<sp/>ctx.evalCb.add_message(src_fn,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="765"><highlight class="normal"><sp/><sp/><sp/><sp/>append_items(out_text,<sp/>s.size()<sp/>-<sp/>1,<sp/>s.data());</highlight></codeline>
<codeline lineno="766"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="767"><highlight class="normal"><sp/><sp/>s.printf(0,<sp/></highlight><highlight class="stringliteral">&quot;\n#line<sp/>%d<sp/>\&quot;%s\&quot;\n&quot;</highlight><highlight class="normal">,<sp/>src_ln,<sp/>src_fn);</highlight></codeline>
<codeline lineno="768"><highlight class="normal"><sp/><sp/>append_items(out_text,<sp/>s.size()<sp/>-<sp/>1,<sp/>s.data());</highlight></codeline>
<codeline lineno="769"><highlight class="normal"></highlight></codeline>
<codeline lineno="770"><highlight class="normal"><sp/><sp/>G_ASSERT(is_main_thread());</highlight></codeline>
<codeline lineno="771"><highlight class="normal"><sp/><sp/><ref refid="classCodeSourceBlocks_1a019f1745807a8f2da9de6362c5629d17" kindref="member">CodeSourceBlocks::incFiles</ref>.addNameId(crd.getTargetName());</highlight></codeline>
<codeline lineno="772"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="773"><highlight class="normal">}</highlight></codeline>
<codeline lineno="774"><highlight class="normal"></highlight></codeline>
<codeline lineno="775"><highlight class="normal"></highlight></codeline>
<codeline lineno="776"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>distill_code(dag::Span&lt;CodeSourceBlocks::Fragment&gt;<sp/>p,<sp/><ref refid="classShaderParser_1_1ShaderBoolEvalCB" kindref="compound">ShaderParser::ShaderBoolEvalCB</ref><sp/>&amp;c)</highlight></codeline>
<codeline lineno="777"><highlight class="normal">{</highlight></codeline>
<codeline lineno="778"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>p.size();<sp/>i++)</highlight></codeline>
<codeline lineno="779"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(p[i].cond)</highlight></codeline>
<codeline lineno="780"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="781"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(p[i].cond-&gt;onIf.constExprVal<sp/>!=<sp/><ref refid="classCodeSourceBlocks_1a32e3a067a09b1c3c6b13a9a95e5c7a3ca2f7a06bf2844224cac2140b35e20a9bb" kindref="member">CodeSourceBlocks::ExprValue::ConstFalse</ref>)</highlight></codeline>
<codeline lineno="782"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(p[i].cond-&gt;onIf.constExprVal<sp/>==<sp/><ref refid="classCodeSourceBlocks_1a32e3a067a09b1c3c6b13a9a95e5c7a3caf7a81025ec822b1a7554e3b641cff501" kindref="member">CodeSourceBlocks::ExprValue::ConstTrue</ref><sp/>||</highlight></codeline>
<codeline lineno="783"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceShaderParser_1abe4ee9e9422afa7c95b8fdac0635a539" kindref="member">ShaderParser::eval_shader_bool</ref>(*p[i].cond-&gt;onIf.expr,<sp/>c).<ref refid="classShVarBool_1aa1e84216403109d360db42129c7f698d" kindref="member">value</ref>)</highlight></codeline>
<codeline lineno="784"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="785"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>distill_code(make_span(p[i].cond-&gt;onIf.onTrue),<sp/>c);</highlight></codeline>
<codeline lineno="786"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="787"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="788"><highlight class="normal"></highlight></codeline>
<codeline lineno="789"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>on_elif<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="790"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>p[i].cond-&gt;onElif.size();<sp/>j++)</highlight></codeline>
<codeline lineno="791"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(p[i].cond-&gt;onElif[j].constExprVal<sp/>==<sp/><ref refid="classCodeSourceBlocks_1a32e3a067a09b1c3c6b13a9a95e5c7a3caf7a81025ec822b1a7554e3b641cff501" kindref="member">CodeSourceBlocks::ExprValue::ConstTrue</ref><sp/>||</highlight></codeline>
<codeline lineno="792"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceShaderParser_1abe4ee9e9422afa7c95b8fdac0635a539" kindref="member">ShaderParser::eval_shader_bool</ref>(*p[i].cond-&gt;onElif[j].expr,<sp/>c).<ref refid="classShVarBool_1aa1e84216403109d360db42129c7f698d" kindref="member">value</ref>)</highlight></codeline>
<codeline lineno="793"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="794"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>distill_code(make_span(p[i].cond-&gt;onElif[j].onTrue),<sp/>c);</highlight></codeline>
<codeline lineno="795"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>on_elif<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="796"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="797"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="798"><highlight class="normal"></highlight></codeline>
<codeline lineno="799"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!on_elif)</highlight></codeline>
<codeline lineno="800"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>distill_code(make_span(p[i].cond-&gt;onElse),<sp/>c);</highlight></codeline>
<codeline lineno="801"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="802"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="803"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="804"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!p[i].uncond.<ref refid="structCodeSourceBlocks_1_1Unconditional_1a2ff45729360582327c0d2e3bdb024ce7" kindref="member">errors</ref>.empty())</highlight></codeline>
<codeline lineno="805"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="806"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;err<sp/>:<sp/>p[i].uncond.errors)</highlight></codeline>
<codeline lineno="807"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="shLog_8cpp_1a2926179632c7c86265007652d3d30b14" kindref="member">sh_debug</ref>(<ref refid="shLog_8h_1a66042048eb3ce30a1dccb2ebf8c2fd5caae3b70b41400c8a36e8a094ac1dbe43c" kindref="member">SHLOG_ERROR</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Parsing<sp/>error<sp/>in<sp/>hlsl<sp/>unconditional:<sp/>%s&quot;</highlight><highlight class="normal">,<sp/>err.c_str());</highlight></codeline>
<codeline lineno="808"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="809"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="810"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(p[i].isDecl())</highlight></codeline>
<codeline lineno="811"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p[i].decl().identValue<sp/>=<sp/>c.<ref refid="classShaderParser_1_1ShaderBoolEvalCB_1a086dc6d32830628d0635b45531188911" kindref="member">eval_interval_value</ref>(declIdents.getName(p[i].decl().identId));</highlight></codeline>
<codeline lineno="812"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(p[i].isDeclBool())</highlight></codeline>
<codeline lineno="813"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="814"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c.<ref refid="classShaderParser_1_1ShaderBoolEvalCB_1a69a7fb78162d42fed759dcfa1877d54c" kindref="member">decl_bool_alias</ref>(p[i].declBool().name,<sp/>*p[i].declBool().expr);</highlight></codeline>
<codeline lineno="815"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="816"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="817"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>tmpUncondProg.push_back(&amp;p[i].uncond);</highlight></codeline>
<codeline lineno="818"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="819"><highlight class="normal">}</highlight></codeline>
<codeline lineno="820"><highlight class="normal"></highlight></codeline>
<codeline lineno="821"><highlight class="normal">dag::ConstSpan&lt;ublock_t<sp/>*&gt;<sp/><ref refid="classCodeSourceBlocks_1adf3f0ae6d5be4fa27b0e9bee5789dcb2" kindref="member">CodeSourceBlocks::getPreprocessedCode</ref>(<ref refid="classShaderParser_1_1ShaderBoolEvalCB" kindref="compound">ShaderParser::ShaderBoolEvalCB</ref><sp/>&amp;cb)</highlight></codeline>
<codeline lineno="822"><highlight class="normal">{</highlight></codeline>
<codeline lineno="823"><highlight class="normal"><sp/><sp/>tmpUncondProg.clear();</highlight></codeline>
<codeline lineno="824"><highlight class="normal"><sp/><sp/>distill_code(make_span(<ref refid="classCodeSourceBlocks_1ab6ab4d1de2fc690ec8de6c5c79e87f8b" kindref="member">blocks</ref>),<sp/>cb);</highlight></codeline>
<codeline lineno="825"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>tmpUncondProg;</highlight></codeline>
<codeline lineno="826"><highlight class="normal">}</highlight></codeline>
<codeline lineno="827"><highlight class="normal"></highlight></codeline>
<codeline lineno="828"><highlight class="normal"><ref refid="structCryptoHash" kindref="compound">CryptoHash</ref><sp/><ref refid="classCodeSourceBlocks_1a8406dddd1aaff87dcf17ca60b30fabea" kindref="member">CodeSourceBlocks::getCodeDigest</ref>(dag::ConstSpan&lt;ublock_t<sp/>*&gt;<sp/>code)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="829"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="830"><highlight class="normal"><sp/><sp/><ref refid="structCryptoHasher" kindref="compound">CryptoHasher</ref><sp/>hasher;</highlight></codeline>
<codeline lineno="831"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>BUF_SZ<sp/>=<sp/>1024;</highlight></codeline>
<codeline lineno="832"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/>buf[BUF_SZ];</highlight></codeline>
<codeline lineno="833"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/>*p<sp/>=<sp/>buf;</highlight></codeline>
<codeline lineno="834"><highlight class="normal"></highlight></codeline>
<codeline lineno="835"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0,<sp/>e<sp/>=<sp/>code.size();<sp/>i<sp/>&lt;<sp/>e;<sp/>i++)</highlight></codeline>
<codeline lineno="836"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="837"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(code[i]-&gt;isDecl())</highlight></codeline>
<codeline lineno="838"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="839"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*p<sp/>=<sp/>code[i]-&gt;decl.identId<sp/>|<sp/>0x8000;</highlight></codeline>
<codeline lineno="840"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>p++;</highlight></codeline>
<codeline lineno="841"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*p<sp/>=<sp/>code[i]-&gt;decl.identValue;</highlight></codeline>
<codeline lineno="842"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="843"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="844"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*p<sp/>=<sp/>code[i]-&gt;codeId;</highlight></codeline>
<codeline lineno="845"><highlight class="normal"><sp/><sp/><sp/><sp/>p++;</highlight></codeline>
<codeline lineno="846"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(p<sp/>-<sp/>buf<sp/>&gt;=<sp/>BUF_SZ<sp/>-<sp/>1)</highlight></codeline>
<codeline lineno="847"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="848"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>hasher.<ref refid="structCryptoHasher_1a568041f71f7c96cda2ce8ca6b2d3ed64" kindref="member">update</ref>(buf,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(*p)<sp/>*<sp/>(p<sp/>-<sp/>buf));</highlight></codeline>
<codeline lineno="849"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>p<sp/>=<sp/>buf;</highlight></codeline>
<codeline lineno="850"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="851"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="852"><highlight class="normal"><sp/><sp/>hasher.<ref refid="structCryptoHasher_1a568041f71f7c96cda2ce8ca6b2d3ed64" kindref="member">update</ref>(buf,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(*p)<sp/>*<sp/>(p<sp/>-<sp/>buf));</highlight></codeline>
<codeline lineno="853"><highlight class="normal"></highlight></codeline>
<codeline lineno="854"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>hasher.<ref refid="structCryptoHasher_1a41176760e73b4f0594213f1e197c98fa" kindref="member">hash</ref>();</highlight></codeline>
<codeline lineno="855"><highlight class="normal">}</highlight></codeline>
<codeline lineno="856"><highlight class="normal"></highlight></codeline>
<codeline lineno="857"><highlight class="normal">dag::ConstSpan&lt;char&gt;<sp/><ref refid="classCodeSourceBlocks_1a6b7e88fe6e26dbe946f23fb45be76f7a" kindref="member">CodeSourceBlocks::buildSourceCode</ref>(dag::ConstSpan&lt;ublock_t<sp/>*&gt;<sp/>code)</highlight></codeline>
<codeline lineno="858"><highlight class="normal">{</highlight></codeline>
<codeline lineno="859"><highlight class="normal"><sp/><sp/>tmpSrc.resize(max(max(65536u,<sp/>code.size()<sp/>*<sp/>32),<sp/>data_size(tmpSrc)));</highlight></codeline>
<codeline lineno="860"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>printedSz<sp/>=<sp/>0,<sp/>szLeft<sp/>=<sp/>tmpSrc.size();</highlight></codeline>
<codeline lineno="861"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0,<sp/>e<sp/>=<sp/>code.size();<sp/>i<sp/>&lt;<sp/>e;<sp/>i++)</highlight></codeline>
<codeline lineno="862"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="863"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>sz<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="864"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(code[i]-&gt;codeId<sp/>&gt;=<sp/>0)</highlight></codeline>
<codeline lineno="865"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="866"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>sz<sp/>=<sp/>_snprintf(tmpSrc.data()<sp/>+<sp/>printedSz,<sp/>szLeft,<sp/></highlight><highlight class="stringliteral">&quot;#line<sp/>%d<sp/>\&quot;%s\&quot;\n%s\n&quot;</highlight><highlight class="normal">,<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)code[i]-&gt;line,</highlight></codeline>
<codeline lineno="867"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fileNames.getName(code[i]-&gt;fnameId),<sp/>codeBlocks.getName(code[i]-&gt;codeId));</highlight></codeline>
<codeline lineno="868"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="869"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(code[i]-&gt;isDecl())</highlight></codeline>
<codeline lineno="870"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="871"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>sz<sp/>=<sp/>_snprintf(tmpSrc.data()<sp/>+<sp/>printedSz,<sp/>szLeft,<sp/></highlight><highlight class="stringliteral">&quot;#define<sp/>%s<sp/>%d\n&quot;</highlight><highlight class="normal">,<sp/>declIdents.getName(code[i]-&gt;decl.identId),</highlight></codeline>
<codeline lineno="872"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)code[i]-&gt;decl.identValue);</highlight></codeline>
<codeline lineno="873"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="874"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(szLeft<sp/>&lt;=<sp/>sz<sp/>||<sp/>sz<sp/>==<sp/>-1)</highlight></codeline>
<codeline lineno="875"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="876"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>--i;</highlight></codeline>
<codeline lineno="877"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>tmpSrc.resize(tmpSrc.size()<sp/>*<sp/>2);</highlight></codeline>
<codeline lineno="878"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>szLeft<sp/>=<sp/>tmpSrc.size()<sp/>-<sp/>printedSz;</highlight></codeline>
<codeline lineno="879"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="880"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="881"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="882"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>szLeft<sp/>-=<sp/>sz;</highlight></codeline>
<codeline lineno="883"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>printedSz<sp/>+=<sp/>sz;</highlight></codeline>
<codeline lineno="884"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="885"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="886"><highlight class="normal"><sp/><sp/>tmpSrc.resize(printedSz<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="887"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>tmpSrc;</highlight></codeline>
<codeline lineno="888"><highlight class="normal">}</highlight></codeline>
<codeline lineno="889"><highlight class="normal"></highlight></codeline>
<codeline lineno="890"><highlight class="normal"></highlight></codeline>
<codeline lineno="891"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classCodeSourceBlocks_1aa9580c5ad7a0f07a5066c9a4c90074bf" kindref="member">CodeSourceBlocks::resetCompilation</ref>()</highlight></codeline>
<codeline lineno="892"><highlight class="normal">{</highlight></codeline>
<codeline lineno="893"><highlight class="normal"><sp/><sp/>fileNames.reset();</highlight></codeline>
<codeline lineno="894"><highlight class="normal"><sp/><sp/>codeBlocks.reset();</highlight></codeline>
<codeline lineno="895"><highlight class="normal"><sp/><sp/>declIdents.reset();</highlight></codeline>
<codeline lineno="896"><highlight class="normal"><sp/><sp/>clear_and_shrink(tmpSrc);</highlight></codeline>
<codeline lineno="897"><highlight class="normal"><sp/><sp/>clear_and_shrink(tmpDigest);</highlight></codeline>
<codeline lineno="898"><highlight class="normal"><sp/><sp/>clear_and_shrink(tmpUncondProg);</highlight></codeline>
<codeline lineno="899"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="codeBlocks.cpp"/>
  </compounddef>
</doxygen>
