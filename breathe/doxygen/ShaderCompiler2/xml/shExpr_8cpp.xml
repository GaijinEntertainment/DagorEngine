<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.7" xml:lang="en-US">
  <compounddef id="shExpr_8cpp" kind="file" language="C++">
    <compoundname>shExpr.cpp</compoundname>
    <includes local="no">float.h</includes>
    <includes refid="shExpr_8h" local="yes">shExpr.h</includes>
    <includes refid="cppStcodeAssembly_8h" local="yes">cppStcodeAssembly.h</includes>
    <includes refid="cppStcodeUtils_8h" local="yes">cppStcodeUtils.h</includes>
    <includes refid="shcode_8h" local="yes">shcode.h</includes>
    <includes refid="assemblyShader_8h" local="yes">assemblyShader.h</includes>
    <includes local="no">debug/dag_debug.h</includes>
    <includes refid="shErrorReporting_8h" local="yes">shErrorReporting.h</includes>
    <includes refid="globVar_8h" local="yes">globVar.h</includes>
    <includes local="no">shaders/shFunc.h</includes>
    <includes local="no">generic/dag_tabUtils.h</includes>
    <includes local="no">shaders/shOpcodeFormat.h</includes>
    <includes local="no">shaders/shOpcode.h</includes>
    <incdepgraph>
      <node id="92">
        <label>DebugLevel.h</label>
        <link refid="DebugLevel_8h"/>
        <childnode refid="30" relation="include">
        </childnode>
      </node>
      <node id="97">
        <label>assemblyShader.h</label>
        <link refid="assemblyShader_8h"/>
      </node>
      <node id="56">
        <label>blkHash.h</label>
        <link refid="blkHash_8h"/>
      </node>
      <node id="86">
        <label>boolVar.h</label>
        <link refid="boolVar_8h"/>
        <childnode refid="69" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="38" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>commonUtils.h</label>
        <link refid="commonUtils_8h"/>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
      </node>
      <node id="78">
        <label>compileResult.h</label>
        <link refid="compileResult_8h"/>
        <childnode refid="79" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="75">
        <label>const3d.h</label>
        <link refid="const3d_8h"/>
        <childnode refid="36" relation="include">
        </childnode>
      </node>
      <node id="53">
        <label>cppStcode.h</label>
        <link refid="cppStcode_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="54" relation="include">
        </childnode>
        <childnode refid="56" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="39" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>cppStcodeAssembly.h</label>
        <link refid="cppStcodeAssembly_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="38" relation="include">
        </childnode>
        <childnode refid="39" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>cppStcodeBuilder.h</label>
        <link refid="cppStcodeBuilder_8h"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
      </node>
      <node id="93">
        <label>cppStcodePlatformInfo.h</label>
        <link refid="cppStcodePlatformInfo_8h"/>
        <childnode refid="30" relation="include">
        </childnode>
      </node>
      <node id="40">
        <label>cppStcodeUtils.h</label>
        <link refid="cppStcodeUtils_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="41" relation="include">
        </childnode>
      </node>
      <node id="62">
        <label>globVar.h</label>
        <link refid="globVar_8h"/>
        <childnode refid="45" relation="include">
        </childnode>
        <childnode refid="46" relation="include">
        </childnode>
        <childnode refid="57" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="63" relation="include">
        </childnode>
        <childnode refid="64" relation="include">
        </childnode>
        <childnode refid="65" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="66" relation="include">
        </childnode>
        <childnode refid="49" relation="include">
        </childnode>
      </node>
      <node id="91">
        <label>globalConfig.h</label>
        <link refid="globalConfig_8h"/>
        <childnode refid="52" relation="include">
        </childnode>
        <childnode refid="92" relation="include">
        </childnode>
        <childnode refid="93" relation="include">
        </childnode>
        <childnode refid="60" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="38" relation="include">
        </childnode>
      </node>
      <node id="22">
        <label>hash.h</label>
        <link refid="hash_8h"/>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
      </node>
      <node id="61">
        <label>hashStrings.h</label>
        <link refid="hashStrings_8h"/>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="57" relation="include">
        </childnode>
        <childnode refid="43" relation="include">
        </childnode>
        <childnode refid="38" relation="include">
        </childnode>
      </node>
      <node id="25">
        <label>hlslRegisters.h</label>
        <link refid="hlslRegisters_8h"/>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
      </node>
      <node id="74">
        <label>hlslStage.h</label>
        <link refid="hlslStage_8h"/>
        <childnode refid="75" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="76" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="77" relation="include">
        </childnode>
      </node>
      <node id="59">
        <label>hwAssembly.h</label>
        <link refid="hwAssembly_8h"/>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="49">
        <label>intervals.h</label>
        <link refid="intervals_8h"/>
      </node>
      <node id="15">
        <label>nameMap.h</label>
        <link refid="nameMap_8h"/>
        <childnode refid="16" relation="include">
        </childnode>
      </node>
      <node id="87">
        <label>namedConst.h</label>
        <link refid="namedConst_8h"/>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="88" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="91" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="57" relation="include">
        </childnode>
        <childnode refid="94" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
      </node>
      <node id="54">
        <label>processes.h</label>
        <link refid="processes_8h"/>
        <childnode refid="55" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
      </node>
      <node id="67">
        <label>samplers.h</label>
        <link refid="samplers_8h"/>
        <childnode refid="68" relation="include">
        </childnode>
        <childnode refid="69" relation="include">
        </childnode>
        <childnode refid="62" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="64" relation="include">
        </childnode>
        <childnode refid="38" relation="include">
        </childnode>
      </node>
      <node id="95">
        <label>shAssumes.h</label>
        <link refid="shAssumes_8h"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="49" relation="include">
        </childnode>
        <childnode refid="69" relation="include">
        </childnode>
        <childnode refid="60" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="38" relation="include">
        </childnode>
      </node>
      <node id="51">
        <label>shCompContext.h</label>
        <link refid="shCompContext_8h"/>
        <childnode refid="52" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="59" relation="include">
        </childnode>
        <childnode refid="60" relation="include">
        </childnode>
      </node>
      <node id="52">
        <label>shCompilationInfo.h</label>
        <link refid="shCompilationInfo_8h"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="53" relation="include">
        </childnode>
        <childnode refid="56" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="57" relation="include">
        </childnode>
        <childnode refid="58" relation="include">
        </childnode>
      </node>
      <node id="83">
        <label>shErrorReporting.h</label>
        <link refid="shErrorReporting_8h"/>
        <childnode refid="68" relation="include">
        </childnode>
        <childnode refid="69" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>shExpr.cpp</label>
        <link refid="shExpr_8cpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="97" relation="include">
        </childnode>
        <childnode refid="84" relation="include">
        </childnode>
        <childnode refid="83" relation="include">
        </childnode>
        <childnode refid="62" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
        <childnode refid="98" relation="include">
        </childnode>
        <childnode refid="99" relation="include">
        </childnode>
        <childnode refid="100" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>shExpr.h</label>
        <link refid="shExpr_8h"/>
      </node>
      <node id="26">
        <label>shLog.h</label>
        <link refid="shLog_8h"/>
      </node>
      <node id="70">
        <label>shMacro.h</label>
        <link refid="shMacro_8h"/>
      </node>
      <node id="50">
        <label>shTargetContext.h</label>
        <link refid="shTargetContext_8h"/>
        <childnode refid="51" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="61" relation="include">
        </childnode>
        <childnode refid="62" relation="include">
        </childnode>
        <childnode refid="67" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
        <childnode refid="69" relation="include">
        </childnode>
        <childnode refid="71" relation="include">
        </childnode>
        <childnode refid="73" relation="include">
        </childnode>
        <childnode refid="82" relation="include">
        </childnode>
        <childnode refid="86" relation="include">
        </childnode>
        <childnode refid="74" relation="include">
        </childnode>
        <childnode refid="87" relation="include">
        </childnode>
        <childnode refid="95" relation="include">
        </childnode>
        <childnode refid="91" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
      </node>
      <node id="71">
        <label>shTargetStorage.h</label>
        <link refid="shTargetStorage_8h"/>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="72" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="39" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
      </node>
      <node id="66">
        <label>shVarVecTypes.h</label>
        <link refid="shVarVecTypes_8h"/>
      </node>
      <node id="73">
        <label>shaderBytecodeCache.h</label>
        <link refid="shaderBytecodeCache_8h"/>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="74" relation="include">
        </childnode>
        <childnode refid="78" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="80" relation="include">
        </childnode>
        <childnode refid="57" relation="include">
        </childnode>
        <childnode refid="81" relation="include">
        </childnode>
      </node>
      <node id="13">
        <label>shaderSave.h</label>
        <link refid="shaderSave_8h"/>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
      </node>
      <node id="12">
        <label>shaderTab.h</label>
        <link refid="shaderTab_8h"/>
        <childnode refid="13" relation="include">
        </childnode>
      </node>
      <node id="48">
        <label>shaderVariant.h</label>
        <link refid="shaderVariant_8h"/>
        <childnode refid="49" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="50" relation="include">
        </childnode>
        <childnode refid="84" relation="include">
        </childnode>
        <childnode refid="65" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="43" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
      </node>
      <node id="42">
        <label>shcode.h</label>
        <link refid="shcode_8h"/>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="43" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="44" relation="include">
        </childnode>
        <childnode refid="45" relation="include">
        </childnode>
        <childnode refid="46" relation="include">
        </childnode>
        <childnode refid="47" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="48" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="87" relation="include">
        </childnode>
        <childnode refid="96" relation="include">
        </childnode>
        <childnode refid="66" relation="include">
        </childnode>
      </node>
      <node id="69">
        <label>shlexterm.h</label>
        <link refid="shlexterm_8h"/>
        <childnode refid="68" relation="include">
        </childnode>
        <childnode refid="70" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="82">
        <label>stcodeBytecode.h</label>
        <link refid="stcodeBytecode_8h"/>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="83" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="84" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="85" relation="include">
        </childnode>
      </node>
      <node id="14">
        <label>varMap.h</label>
        <link refid="varMap_8h"/>
        <childnode refid="15" relation="include">
        </childnode>
      </node>
      <node id="65">
        <label>varTypes.h</label>
        <link refid="varTypes_8h"/>
      </node>
      <node id="88">
        <label>variablesMerger.h</label>
        <link refid="variablesMerger_8h"/>
        <childnode refid="68" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
        <childnode refid="79" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="89" relation="include">
        </childnode>
        <childnode refid="90" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="47" relation="include">
        </childnode>
      </node>
      <node id="63">
        <label>3d/dag_texMgr.h</label>
      </node>
      <node id="21">
        <label>EASTL/algorithm.h</label>
      </node>
      <node id="29">
        <label>EASTL/array.h</label>
      </node>
      <node id="47">
        <label>EASTL/bitvector.h</label>
      </node>
      <node id="89">
        <label>EASTL/fixed_vector.h</label>
      </node>
      <node id="90">
        <label>EASTL/map.h</label>
      </node>
      <node id="11">
        <label>EASTL/optional.h</label>
      </node>
      <node id="10">
        <label>EASTL/string.h</label>
      </node>
      <node id="41">
        <label>EASTL/string_view.h</label>
      </node>
      <node id="76">
        <label>EASTL/type_traits.h</label>
      </node>
      <node id="37">
        <label>EASTL/unique_ptr.h</label>
      </node>
      <node id="79">
        <label>EASTL/vector.h</label>
      </node>
      <node id="85">
        <label>EASTL/vector_map.h</label>
      </node>
      <node id="94">
        <label>EASTL/vector_set.h</label>
      </node>
      <node id="30">
        <label>cstdint</label>
      </node>
      <node id="24">
        <label>cstring</label>
      </node>
      <node id="20">
        <label>dag/dag_vector.h</label>
      </node>
      <node id="19">
        <label>debug/dag_assert.h</label>
      </node>
      <node id="84">
        <label>debug/dag_debug.h</label>
      </node>
      <node id="36">
        <label>drv/3d/dag_consts.h</label>
      </node>
      <node id="72">
        <label>drv/3d/dag_renderStates.h</label>
      </node>
      <node id="64">
        <label>drv/3d/dag_sampler.h</label>
      </node>
      <node id="2">
        <label>float.h</label>
      </node>
      <node id="27">
        <label>generic/dag_enumerate.h</label>
      </node>
      <node id="28">
        <label>generic/dag_expected.h</label>
      </node>
      <node id="55">
        <label>generic/dag_fixedMoveOnlyFunction.h</label>
      </node>
      <node id="44">
        <label>generic/dag_smallTab.h</label>
      </node>
      <node id="17">
        <label>generic/dag_tab.h</label>
      </node>
      <node id="98">
        <label>generic/dag_tabUtils.h</label>
      </node>
      <node id="23">
        <label>hash/BLAKE3/blake3.h</label>
      </node>
      <node id="60">
        <label>ioSys/dag_dataBlock.h</label>
      </node>
      <node id="45">
        <label>math/dag_color.h</label>
      </node>
      <node id="46">
        <label>math/integer/dag_IPoint4.h</label>
      </node>
      <node id="77">
        <label>memory</label>
      </node>
      <node id="32">
        <label>memory/dag_mem.h</label>
      </node>
      <node id="80">
        <label>memory/dag_memBase.h</label>
      </node>
      <node id="96">
        <label>shaders/dag_shaderCommon.h</label>
      </node>
      <node id="35">
        <label>shaders/dag_shaderVarType.h</label>
      </node>
      <node id="58">
        <label>shaders/dag_shaders.h</label>
      </node>
      <node id="33">
        <label>shaders/shExprTypes.h</label>
      </node>
      <node id="34">
        <label>shaders/shFunc.h</label>
      </node>
      <node id="100">
        <label>shaders/shOpcode.h</label>
      </node>
      <node id="99">
        <label>shaders/shOpcodeFormat.h</label>
      </node>
      <node id="39">
        <label>shaders/shader_layout.h</label>
      </node>
      <node id="31">
        <label>shaders/slotTexturesRange.h</label>
      </node>
      <node id="68">
        <label>shsyn.h</label>
      </node>
      <node id="38">
        <label>ska_hash_map/flat_hash_map2.hpp</label>
      </node>
      <node id="18">
        <label>util/dag_bindump_ext.h</label>
      </node>
      <node id="9">
        <label>util/dag_globDef.h</label>
      </node>
      <node id="16">
        <label>util/dag_oaHashNameMap.h</label>
      </node>
      <node id="8">
        <label>util/dag_safeArg.h</label>
      </node>
      <node id="81">
        <label>util/dag_simpleString.h</label>
      </node>
      <node id="43">
        <label>util/dag_stdint.h</label>
      </node>
      <node id="57">
        <label>util/dag_string.h</label>
      </node>
      <node id="7">
        <label>utility</label>
      </node>
    </incdepgraph>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/>Copyright<sp/>(C)<sp/>Gaijin<sp/>Games<sp/>KFT.<sp/><sp/>All<sp/>rights<sp/>reserved.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;float.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="shExpr_8h" kindref="compound">shExpr.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="cppStcodeAssembly_8h" kindref="compound">cppStcodeAssembly.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="cppStcodeUtils_8h" kindref="compound">cppStcodeUtils.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="shcode_8h" kindref="compound">shcode.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="assemblyShader_8h" kindref="compound">assemblyShader.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;debug/dag_debug.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="shErrorReporting_8h" kindref="compound">shErrorReporting.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="globVar_8h" kindref="compound">globVar.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;shaders/shFunc.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;generic/dag_tabUtils.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;shaders/shOpcodeFormat.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;shaders/shOpcode.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal"><ref refid="namespaceShaderParser" kindref="compound">ShaderParser</ref>;</highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal"><ref refid="namespaceShaderTerminal" kindref="compound">ShaderTerminal</ref>;</highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="comment">/*********************************</highlight></codeline>
<codeline lineno="21"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="22"><highlight class="comment"><sp/>*<sp/>class<sp/>Expression</highlight></codeline>
<codeline lineno="23"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="24"><highlight class="comment"><sp/>*********************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="comment">//<sp/>return<sp/>string<sp/>name</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="classShaderParser_1_1Expression_1a68e771cf9c1584e59c0f5c5e298d3eea" kindref="member">Expression::__getName</ref>(shexpr::ValueType<sp/>vt)</highlight></codeline>
<codeline lineno="27"><highlight class="normal">{</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(vt)</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>shexpr::VT_COLOR4:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;color4&quot;</highlight><highlight class="normal">;<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>shexpr::VT_REAL:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;real&quot;</highlight><highlight class="normal">;<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>shexpr::VT_UNDEFINED:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;undefined&quot;</highlight><highlight class="normal">;<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;&lt;unknown&gt;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="35"><highlight class="normal">}</highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="classShaderParser_1_1Expression_1a68e771cf9c1584e59c0f5c5e298d3eea" kindref="member">Expression::__getName</ref>(shexpr::BinaryOperator<sp/>op)</highlight></codeline>
<codeline lineno="38"><highlight class="normal">{</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(op)</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>shexpr::OP_ADD:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;+&quot;</highlight><highlight class="normal">;<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>shexpr::OP_SUB:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;-&quot;</highlight><highlight class="normal">;<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>shexpr::OP_MUL:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;*&quot;</highlight><highlight class="normal">;<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>shexpr::OP_DIV:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;/&quot;</highlight><highlight class="normal">;<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>shexpr::_OP_UNDEFINED:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;&lt;none&gt;&quot;</highlight><highlight class="normal">;<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;&lt;unknown&gt;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="48"><highlight class="normal">}</highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="classShaderParser_1_1Expression_1a68e771cf9c1584e59c0f5c5e298d3eea" kindref="member">Expression::__getName</ref>(shexpr::ColorChannel<sp/>cc)</highlight></codeline>
<codeline lineno="51"><highlight class="normal">{</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(cc)</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>shexpr::CC_R:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;.r&quot;</highlight><highlight class="normal">;<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>shexpr::CC_G:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;.g&quot;</highlight><highlight class="normal">;<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>shexpr::CC_B:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;.b&quot;</highlight><highlight class="normal">;<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>shexpr::CC_A:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;.a&quot;</highlight><highlight class="normal">;<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>shexpr::_CC_UNDEFINED:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;&lt;none&gt;&quot;</highlight><highlight class="normal">;<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;&lt;unknown&gt;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="61"><highlight class="normal">}</highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight><highlight class="comment">//<sp/>add<sp/>register</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"><ref refid="classRegister" kindref="compound">Register</ref><sp/><ref refid="classShaderParser_1_1Expression_1a77ed6f7aab61c1f6367d6c1f5fcfdbb1" kindref="member">Expression::allocateRegForResult</ref>(<ref refid="classStcodeVMRegisterAllocator" kindref="compound">StcodeVMRegisterAllocator</ref><sp/>&amp;reg_allocator)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="66"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/>shexpr::ValueType<sp/>vt<sp/>=<sp/><ref refid="classShaderParser_1_1Expression_1acc2906c41ab9f1277d513f3c2c97096d" kindref="member">getValueType</ref>();</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(vt)</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>shexpr::VT_REAL:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>reg_allocator.<ref refid="classStcodeVMRegisterAllocator_1a55a7368910369fb2ef50ba11675650be" kindref="member">add_reg</ref>();</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>shexpr::VT_COLOR4:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>reg_allocator.<ref refid="classStcodeVMRegisterAllocator_1a7104d5ae287c87b1e7379dfa58b513a4" kindref="member">add_vec_reg</ref>();</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:<sp/>G_ASSERTF(0,<sp/></highlight><highlight class="stringliteral">&quot;registers<sp/>in<sp/>expression<sp/>of<sp/>value<sp/>type<sp/>&apos;%s&apos;<sp/>%d,<sp/>are<sp/>invalid!&quot;</highlight><highlight class="normal">,<sp/><ref refid="classShaderParser_1_1Expression_1a68e771cf9c1584e59c0f5c5e298d3eea" kindref="member">__getName</ref>(vt),<sp/>vt);<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>{};</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="74"><highlight class="normal">}</highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight><highlight class="comment">//<sp/>assembly<sp/>this<sp/>expression</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classShaderParser_1_1Expression_1adf4dc5757229bb9e7a7d50d3cc6d82f0" kindref="member">Expression::assembleBytecode</ref>(<ref refid="namespaceShaderParser_1a732af6cbcecefe1051d9165d3718d702" kindref="member">CodeTable</ref><sp/>&amp;code,<sp/><ref refid="classRegister" kindref="compound">Register</ref><sp/>&amp;dest_reg,<sp/><ref refid="classStcodeVMRegisterAllocator" kindref="compound">StcodeVMRegisterAllocator</ref><sp/>&amp;,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="79"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>assembly<sp/>unary<sp/>operator</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classShaderParser_1_1Expression_1a1ab07814f1b27a6786d043da4e080c44" kindref="member">getUnaryOperator</ref>()<sp/>==<sp/>shexpr::UOP_NEGATIVE)</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classShaderParser_1_1Expression_1acc2906c41ab9f1277d513f3c2c97096d" kindref="member">getValueType</ref>()<sp/>==<sp/>shexpr::VT_REAL)</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>code.push_back(shaderopcode::makeOp2(SHCOD_INVERSE,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">(dest_reg),<sp/>1));</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>code.push_back(shaderopcode::makeOp2(SHCOD_INVERSE,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">(dest_reg),<sp/>4));</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="88"><highlight class="normal">}</highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classShaderParser_1_1Expression_1a9487371df0a50670438cc4343d06cdb2" kindref="member">Expression::assembleCpp</ref>(<ref refid="structStcodeExpression" kindref="compound">StcodeExpression</ref><sp/>&amp;cpp_expr,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/>cpp_expr.<ref refid="structStcodeExpression_1af33ad75172183c87461bdade64cbdaf2" kindref="member">specifyNextExprUnaryOp</ref>(<ref refid="classShaderParser_1_1Expression_1a1ab07814f1b27a6786d043da4e080c44" kindref="member">getUnaryOperator</ref>());<sp/>}</highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight><highlight class="comment">//<sp/>assembly<sp/>numeric<sp/>constant</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classShaderParser_1_1Expression_1a7cc153456d29d1e3e52ec2d20563b5d1" kindref="member">Expression::assembleBytecodeForConstant</ref>(<ref refid="namespaceShaderParser_1a732af6cbcecefe1051d9165d3718d702" kindref="member">CodeTable</ref><sp/>&amp;code,<sp/>real<sp/>v,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dest_reg,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>is_integer)</highlight></codeline>
<codeline lineno="95"><highlight class="normal">{</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>vx<sp/>=<sp/>*(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*)&amp;v;</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(is_integer)</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/>code.push_back(shaderopcode::makeOp1(SHCOD_IMM_REAL,<sp/>dest_reg));</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/>code.push_back((</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)v);</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((vx<sp/>&amp;<sp/>0xFFFF)<sp/>==<sp/>0<sp/>&amp;&amp;<sp/>((vx<sp/>&gt;&gt;<sp/>16)<sp/>&gt;=<sp/>-1))</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/>code.push_back(shaderopcode::makeOp2_8_16(SHCOD_IMM_REAL1,<sp/>dest_reg,<sp/>vx<sp/>&gt;&gt;<sp/>16));</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/>code.push_back(shaderopcode::makeOp1(SHCOD_IMM_REAL,<sp/>dest_reg));</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/>code.push_back(vx);</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="109"><highlight class="normal">}</highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classShaderParser_1_1Expression_1a7cc153456d29d1e3e52ec2d20563b5d1" kindref="member">Expression::assembleBytecodeForConstant</ref>(<ref refid="namespaceShaderParser_1a732af6cbcecefe1051d9165d3718d702" kindref="member">CodeTable</ref><sp/>&amp;code,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Color4<sp/>&amp;v,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dest_reg)</highlight></codeline>
<codeline lineno="112"><highlight class="normal">{</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*col<sp/>=<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*)&amp;v.r;</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(col[0]<sp/>==<sp/>col[1]<sp/>&amp;&amp;<sp/>col[0]<sp/>==<sp/>col[2]<sp/>&amp;&amp;<sp/>col[0]<sp/>==<sp/>col[3]<sp/>&amp;&amp;<sp/>(col[0]<sp/>&amp;<sp/>0xFFFF)<sp/>==<sp/>0<sp/>&amp;&amp;<sp/>((col[0]<sp/>&gt;&gt;<sp/>16)<sp/>&gt;=<sp/>-1))</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/>code.push_back(shaderopcode::makeOp2_8_16(SHCOD_IMM_SVEC1,<sp/>dest_reg,<sp/>col[0]<sp/>&gt;&gt;<sp/>16));</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/>code.push_back(shaderopcode::makeOp1(SHCOD_IMM_VEC,<sp/>dest_reg));</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/>append_items(code,<sp/>4,<sp/>col);</highlight></codeline>
<codeline lineno="121"><highlight class="normal">}</highlight></codeline>
<codeline lineno="122"><highlight class="normal"></highlight></codeline>
<codeline lineno="123"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classShaderParser_1_1Expression_1a4037bf3eee8071bba8ab6886455769e1" kindref="member">Expression::assembleCppForConstant</ref>(<ref refid="structStcodeExpression" kindref="compound">StcodeExpression</ref><sp/>&amp;cpp_expr,<sp/>real<sp/>v,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>is_integer)</highlight></codeline>
<codeline lineno="124"><highlight class="normal">{</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>val<sp/>=<sp/>is_integer<sp/>?<sp/>(int)v<sp/>:<sp/>v;</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/>cpp_expr.<ref refid="structStcodeExpression_1a8b51ba11b686a94c48b82ece54692900" kindref="member">specifyNextExprElement</ref>(<ref refid="structStcodeExpression_1aaccadc8df002bf4a50f3700badd92c59afd3c4b3f69f8d37b82044b0c07d7f4dd" kindref="member">StcodeExpression::ElementType::REAL_CONST</ref>,<sp/>&amp;val);</highlight></codeline>
<codeline lineno="127"><highlight class="normal">}</highlight></codeline>
<codeline lineno="128"><highlight class="normal"></highlight></codeline>
<codeline lineno="129"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classShaderParser_1_1Expression_1a4037bf3eee8071bba8ab6886455769e1" kindref="member">Expression::assembleCppForConstant</ref>(<ref refid="structStcodeExpression" kindref="compound">StcodeExpression</ref><sp/>&amp;cpp_expr,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Color4<sp/>&amp;v)</highlight></codeline>
<codeline lineno="130"><highlight class="normal">{</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/>cpp_expr.<ref refid="structStcodeExpression_1a8b51ba11b686a94c48b82ece54692900" kindref="member">specifyNextExprElement</ref>(<ref refid="structStcodeExpression_1aaccadc8df002bf4a50f3700badd92c59ac94814fe3bae87cddef85c5e9ae4b63c" kindref="member">StcodeExpression::ElementType::COLOR_CONST</ref>,<sp/>&amp;v.r,<sp/>&amp;v.g,<sp/>&amp;v.b,<sp/>&amp;v.a);</highlight></codeline>
<codeline lineno="132"><highlight class="normal">}</highlight></codeline>
<codeline lineno="133"><highlight class="normal"></highlight></codeline>
<codeline lineno="134"><highlight class="normal"></highlight><highlight class="comment">//<sp/>evaluate<sp/>this<sp/>expression<sp/>as<sp/>real</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="135"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classShaderParser_1_1Expression_1a8941f97eca15c43e1ecd37d5c7dc3caf" kindref="member">Expression::evaluate</ref>(real<sp/>&amp;out_value,<sp/><ref refid="structParser" kindref="compound">Parser</ref><sp/>&amp;parser)</highlight></codeline>
<codeline lineno="136"><highlight class="normal">{</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>cannot<sp/>evaluate<sp/>dynamic<sp/>expressions</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classShaderParser_1_1Expression_1a6670e4cb77f145766d8e787075ed7da9" kindref="member">isDynamic</ref>())</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="140"><highlight class="normal"></highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>apply<sp/>unary<sp/>operator</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classShaderParser_1_1Expression_1a1ab07814f1b27a6786d043da4e080c44" kindref="member">getUnaryOperator</ref>()<sp/>==<sp/>shexpr::UOP_NEGATIVE)</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/>out_value<sp/>=<sp/>-out_value;</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="146"><highlight class="normal"></highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="148"><highlight class="normal">}</highlight></codeline>
<codeline lineno="149"><highlight class="normal"></highlight></codeline>
<codeline lineno="150"><highlight class="normal"></highlight><highlight class="comment">//<sp/>evaluate<sp/>this<sp/>expression<sp/>as<sp/>color4</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="151"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classShaderParser_1_1Expression_1a8941f97eca15c43e1ecd37d5c7dc3caf" kindref="member">Expression::evaluate</ref>(Color4<sp/>&amp;out_value,<sp/><ref refid="structParser" kindref="compound">Parser</ref><sp/>&amp;parser)</highlight></codeline>
<codeline lineno="152"><highlight class="normal">{</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>cannot<sp/>evaluate<sp/>dynamic<sp/>expressions</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classShaderParser_1_1Expression_1a6670e4cb77f145766d8e787075ed7da9" kindref="member">isDynamic</ref>())</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="156"><highlight class="normal"></highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>apply<sp/>unary<sp/>operator</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classShaderParser_1_1Expression_1a1ab07814f1b27a6786d043da4e080c44" kindref="member">getUnaryOperator</ref>()<sp/>==<sp/>shexpr::UOP_NEGATIVE)</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/>out_value<sp/>=<sp/>-out_value;</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="162"><highlight class="normal"></highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="164"><highlight class="normal">}</highlight></codeline>
<codeline lineno="165"><highlight class="normal"></highlight></codeline>
<codeline lineno="166"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classShaderParser_1_1Expression_1ac19dd34018b4470ad166a8ab244f981d" kindref="member">Expression::canConvert</ref>(shexpr::ValueType<sp/>vt)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="167"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classShaderParser_1_1Expression_1acc2906c41ab9f1277d513f3c2c97096d" kindref="member">getValueType</ref>()<sp/>==<sp/>vt<sp/>||<sp/>(vt<sp/>==<sp/>shexpr::VT_COLOR4<sp/>&amp;&amp;<sp/><ref refid="classShaderParser_1_1Expression_1acc2906c41ab9f1277d513f3c2c97096d" kindref="member">getValueType</ref>()<sp/>==<sp/>shexpr::VT_REAL);</highlight></codeline>
<codeline lineno="169"><highlight class="normal">}</highlight></codeline>
<codeline lineno="170"><highlight class="normal"></highlight></codeline>
<codeline lineno="171"><highlight class="normal"></highlight><highlight class="comment">//<sp/>dump<sp/>to<sp/>debug</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="172"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classShaderParser_1_1Expression_1a08d3c7f008450499ebf2ce26a8f346d5" kindref="member">Expression::dump</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>level)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="173"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/>String<sp/>r;</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>level<sp/>*<sp/>2;<sp/>i++)</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/>r<sp/>+=<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><ref refid="classShaderParser_1_1Expression_1ae3261bc8b45356c6090bd84db2508fcb" kindref="member">dump_internal</ref>(level,<sp/>r);</highlight></codeline>
<codeline lineno="178"><highlight class="normal">}</highlight></codeline>
<codeline lineno="179"><highlight class="normal"></highlight></codeline>
<codeline lineno="180"><highlight class="normal"></highlight><highlight class="comment">//<sp/>dump<sp/>to<sp/>debug</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="181"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classShaderParser_1_1Expression_1ae3261bc8b45356c6090bd84db2508fcb" kindref="member">Expression::dump_internal</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>level,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*tabs)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="182"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/>String<sp/>us(</highlight><highlight class="stringliteral">&quot;???&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(unaryOp)</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>shexpr::UOP_NEGATIVE:<sp/>us<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;-&quot;</highlight><highlight class="normal">;<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>shexpr::UOP_POSITIVE:<sp/>us<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;+&quot;</highlight><highlight class="normal">;<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="189"><highlight class="normal"></highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/>debug(</highlight><highlight class="stringliteral">&quot;%sunary_op=%s&quot;</highlight><highlight class="normal">,<sp/>tabs,<sp/>us.str());</highlight></codeline>
<codeline lineno="191"><highlight class="normal">}</highlight></codeline>
<codeline lineno="192"><highlight class="normal"></highlight></codeline>
<codeline lineno="193"><highlight class="normal"></highlight><highlight class="comment">//<sp/>class<sp/>Expression</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="194"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="195"><highlight class="normal"></highlight></codeline>
<codeline lineno="196"><highlight class="normal"></highlight></codeline>
<codeline lineno="197"><highlight class="normal"></highlight><highlight class="comment">/*********************************</highlight></codeline>
<codeline lineno="198"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="199"><highlight class="comment"><sp/>*<sp/>class<sp/>ComplexExpression</highlight></codeline>
<codeline lineno="200"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="201"><highlight class="comment"><sp/>*********************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="202"><highlight class="normal"></highlight><highlight class="comment">//<sp/>ctor/dtor</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="203"><highlight class="normal"><ref refid="classShaderParser_1_1ComplexExpression_1a79c0cc4e14d090a32ba465f694dbfa64" kindref="member">ComplexExpression::ComplexExpression</ref>(Symbol<sp/>*parser_sym,<sp/>shexpr::ValueType<sp/>vt,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>channel)<sp/>:</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><ref refid="classShaderParser_1_1Expression" kindref="compound">Expression</ref>(parser_sym),<sp/>binOp(midmem),<sp/>baseValueType(vt),<sp/>operands(midmem),<sp/>currentChannel(channel)</highlight></codeline>
<codeline lineno="205"><highlight class="normal">{</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/>resizeOperands(1);</highlight></codeline>
<codeline lineno="207"><highlight class="normal">}</highlight></codeline>
<codeline lineno="208"><highlight class="normal"></highlight></codeline>
<codeline lineno="209"><highlight class="normal"></highlight></codeline>
<codeline lineno="210"><highlight class="normal"><ref refid="classShaderParser_1_1ComplexExpression_1a793b5ef8b46b2d5c032d111d5a57b2bc" kindref="member">ComplexExpression::~ComplexExpression</ref>()<sp/>{<sp/>tabutils::deleteAll(operands);<sp/>}</highlight></codeline>
<codeline lineno="211"><highlight class="normal"></highlight></codeline>
<codeline lineno="212"><highlight class="normal"></highlight></codeline>
<codeline lineno="213"><highlight class="normal"></highlight><highlight class="comment">//<sp/>assembly<sp/>this<sp/>expression</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="214"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classShaderParser_1_1ComplexExpression_1a6ea797735f195ab719d1df1e22f4d562" kindref="member">ComplexExpression::assembleBytecode</ref>(<ref refid="namespaceShaderParser_1a732af6cbcecefe1051d9165d3718d702" kindref="member">CodeTable</ref><sp/>&amp;code,<sp/><ref refid="classRegister" kindref="compound">Register</ref><sp/>&amp;dest_reg,<sp/><ref refid="classStcodeVMRegisterAllocator" kindref="compound">StcodeVMRegisterAllocator</ref><sp/>&amp;reg_allocator,</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>is_integer)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="216"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(operands.size()<sp/>==<sp/>1)</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classRegister" kindref="compound">Register</ref><sp/>original_dest<sp/>=<sp/>dest_reg;</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/>operands[shexpr::OPER_LEFT]-&gt;assembleBytecode(code,<sp/>dest_reg,<sp/>reg_allocator,<sp/>is_integer);</highlight></codeline>
<codeline lineno="221"><highlight class="normal"></highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(operands[0]-&gt;<ref refid="classShaderParser_1_1ComplexExpression_1a7f8f55c1b66662f2dd471784d111309a" kindref="member">getValueType</ref>()<sp/>==<sp/>shexpr::VT_REAL<sp/>&amp;&amp;<sp/>baseValueType<sp/>==<sp/>shexpr::VT_COLOR4)</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>code.push_back(shaderopcode::makeOp3(SHCOD_MAKE_VEC,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">(original_dest),<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">(dest_reg),<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">(dest_reg)));</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>code.push_back(shaderopcode::makeData2(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">(dest_reg),<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">(dest_reg)));</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>dest_reg<sp/>=<sp/>original_dest;</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classShaderParser_1_1Expression_1adf4dc5757229bb9e7a7d50d3cc6d82f0" kindref="member">Expression::assembleBytecode</ref>(code,<sp/>dest_reg,<sp/>reg_allocator,<sp/>is_integer);</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="231"><highlight class="normal"></highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>numOps<sp/>=<sp/>operands.size()<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="233"><highlight class="normal"></highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>assembly<sp/>operands</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/>eastl::vector&lt;Register&gt;<sp/>opRegs;</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/>opRegs.reserve(operands.size());</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>operands.size();<sp/>i++)</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/>opRegs.emplace_back(<ref refid="classShaderParser_1_1Expression_1a77ed6f7aab61c1f6367d6c1f5fcfdbb1" kindref="member">allocateRegForResult</ref>(reg_allocator));</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classRegister" kindref="compound">Register</ref><sp/>original_dest<sp/>=<sp/>opRegs[i];</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/>operands[i]-&gt;assembleBytecode(code,<sp/>opRegs[i],<sp/>reg_allocator,<sp/>is_integer);</highlight></codeline>
<codeline lineno="242"><highlight class="normal"></highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(operands[i]-&gt;<ref refid="classShaderParser_1_1ComplexExpression_1a7f8f55c1b66662f2dd471784d111309a" kindref="member">getValueType</ref>()<sp/>==<sp/>shexpr::VT_REAL<sp/>&amp;&amp;<sp/>baseValueType<sp/>==<sp/>shexpr::VT_COLOR4)</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>code.push_back(shaderopcode::makeOp3(SHCOD_MAKE_VEC,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">(original_dest),<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">(opRegs[i]),<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">(opRegs[i])));</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>code.push_back(shaderopcode::makeData2(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">(opRegs[i]),<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">(opRegs[i])));</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>opRegs[i]<sp/>=<sp/>original_dest;</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="250"><highlight class="normal"></highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>binOperatorMapR[]<sp/>=<sp/>{SHCOD_ADD_REAL,<sp/>SHCOD_SUB_REAL,<sp/>SHCOD_MUL_REAL,<sp/>SHCOD_DIV_REAL};</highlight></codeline>
<codeline lineno="252"><highlight class="normal"></highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>binOperatorMapC[]<sp/>=<sp/>{SHCOD_ADD_VEC,<sp/>SHCOD_SUB_VEC,<sp/>SHCOD_MUL_VEC,<sp/>SHCOD_DIV_VEC};</highlight></codeline>
<codeline lineno="254"><highlight class="normal"></highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>assembly<sp/>binary<sp/>operators</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><ref refid="classRegister" kindref="compound">Register</ref><sp/>srcRegL<sp/>=<sp/>opRegs[0];</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>opCode;</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><ref refid="classRegister" kindref="compound">Register</ref><sp/>destReg;</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>1;<sp/>i<sp/>&lt;<sp/>operands.size();<sp/>i++)</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/>G_ASSERT(operands[i]);</highlight></codeline>
<codeline lineno="262"><highlight class="normal"></highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/>G_ASSERT(binOp[i]<sp/>!=<sp/>shexpr::_OP_UNDEFINED);</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(baseValueType)</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>shexpr::VT_REAL:<sp/>opCode<sp/>=<sp/>binOperatorMapR[binOp[i]];<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>shexpr::VT_COLOR4:<sp/>opCode<sp/>=<sp/>binOperatorMapC[binOp[i]];<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:<sp/>G_ASSERT(0);</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="270"><highlight class="normal"></highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i<sp/>==<sp/>operands.size()<sp/>-<sp/>1)</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>destReg<sp/>=<sp/>dest_reg;</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>destReg<sp/>=<sp/><ref refid="classShaderParser_1_1Expression_1a77ed6f7aab61c1f6367d6c1f5fcfdbb1" kindref="member">allocateRegForResult</ref>(reg_allocator);</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="279"><highlight class="normal"></highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/>code.push_back(shaderopcode::makeOp3(opCode,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">(destReg),<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">(srcRegL),<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">(opRegs[i])));</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/>srcRegL<sp/>=<sp/>destReg;</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="283"><highlight class="normal"></highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><ref refid="classShaderParser_1_1Expression_1adf4dc5757229bb9e7a7d50d3cc6d82f0" kindref="member">Expression::assembleBytecode</ref>(code,<sp/>dest_reg,<sp/>reg_allocator,<sp/>is_integer);</highlight></codeline>
<codeline lineno="285"><highlight class="normal">}</highlight></codeline>
<codeline lineno="286"><highlight class="normal"></highlight></codeline>
<codeline lineno="287"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classShaderParser_1_1ComplexExpression_1a01dc2bc138b372bde6ed31372e4d6cbf" kindref="member">ComplexExpression::assembleCpp</ref>(<ref refid="structStcodeExpression" kindref="compound">StcodeExpression</ref><sp/>&amp;cpp_expr,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>is_integer)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="288"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(operands.size()<sp/>==<sp/>1)</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/>cpp_expr.<ref refid="structStcodeExpression_1a8b51ba11b686a94c48b82ece54692900" kindref="member">specifyNextExprElement</ref>(<ref refid="structStcodeExpression_1aaccadc8df002bf4a50f3700badd92c59ab7230d8c2a8a24512f1433490edc73fd" kindref="member">StcodeExpression::ElementType::COMPLEX_SINGLE_OP</ref>);</highlight></codeline>
<codeline lineno="292"><highlight class="normal"></highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/>operands[shexpr::OPER_LEFT]-&gt;assembleCpp(cpp_expr,<sp/>is_integer);</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classShaderParser_1_1Expression_1a9487371df0a50670438cc4343d06cdb2" kindref="member">Expression::assembleCpp</ref>(cpp_expr,<sp/>is_integer);</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="297"><highlight class="normal"></highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>numOps<sp/>=<sp/>operands.size()<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/>cpp_expr.<ref refid="structStcodeExpression_1a8b51ba11b686a94c48b82ece54692900" kindref="member">specifyNextExprElement</ref>(<ref refid="structStcodeExpression_1aaccadc8df002bf4a50f3700badd92c59ad692dff7ebc54a9feb3145854afc4b2e" kindref="member">StcodeExpression::ElementType::COMPLEX_MULTIPLE_OPS</ref>,<sp/>binOp.data()<sp/>+<sp/>1,<sp/>&amp;numOps);</highlight></codeline>
<codeline lineno="300"><highlight class="normal"></highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;op<sp/>:<sp/>operands)</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/>op-&gt;<ref refid="classShaderParser_1_1ComplexExpression_1a01dc2bc138b372bde6ed31372e4d6cbf" kindref="member">assembleCpp</ref>(cpp_expr,<sp/>is_integer);</highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><ref refid="classShaderParser_1_1Expression_1a9487371df0a50670438cc4343d06cdb2" kindref="member">Expression::assembleCpp</ref>(cpp_expr,<sp/>is_integer);</highlight></codeline>
<codeline lineno="304"><highlight class="normal">}</highlight></codeline>
<codeline lineno="305"><highlight class="normal"></highlight></codeline>
<codeline lineno="306"><highlight class="normal"></highlight></codeline>
<codeline lineno="307"><highlight class="normal"></highlight><highlight class="comment">//<sp/>set<sp/>operand</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="308"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classShaderParser_1_1ComplexExpression_1a1cfcdaf2ee0204346bde3a7961720734" kindref="member">ComplexExpression::setOperand</ref>(shexpr::OperandType<sp/>op,<sp/><ref refid="classShaderParser_1_1Expression" kindref="compound">Expression</ref><sp/>*child)</highlight></codeline>
<codeline lineno="309"><highlight class="normal">{</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(op<sp/>==<sp/>shexpr::OPER_USER)</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>G_ASSERT(lastBinOp<sp/>!=<sp/>shexpr::_OP_UNDEFINED);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classShaderParser_1_1ComplexExpression_1a493d9259f604e81c3545d2c8e88b0727" kindref="member">addOperand</ref>(child,<sp/>lastBinOp);</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/>lastBinOp<sp/>=<sp/>shexpr::_OP_UNDEFINED;</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="317"><highlight class="normal"></highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(op<sp/>&gt;=<sp/>operands.size())</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="320"><highlight class="normal"></highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/>operands[op]<sp/>=<sp/>child;</highlight></codeline>
<codeline lineno="322"><highlight class="normal"></highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(child)</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/>child-&gt;<ref refid="classShaderParser_1_1Expression_1a85fe9b97eae19d91e0affe293d3eefdf" kindref="member">SetParent</ref>(</highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="327"><highlight class="normal">}</highlight></codeline>
<codeline lineno="328"><highlight class="normal"></highlight></codeline>
<codeline lineno="329"><highlight class="normal"></highlight></codeline>
<codeline lineno="330"><highlight class="normal"></highlight><highlight class="comment">//<sp/>return<sp/>value<sp/>type</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="331"><highlight class="normal">shexpr::ValueType<sp/><ref refid="classShaderParser_1_1ComplexExpression_1a7f8f55c1b66662f2dd471784d111309a" kindref="member">ComplexExpression::getValueType</ref>()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="332"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(operands.size()<sp/>==<sp/>1<sp/>&amp;&amp;<sp/>operands[0]<sp/>&amp;&amp;<sp/>operands[0]-&gt;getValueType()<sp/>==<sp/>shexpr::VT_REAL<sp/>&amp;&amp;<sp/>baseValueType<sp/>==<sp/>shexpr::VT_COLOR4)</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>baseValueType;</highlight></codeline>
<codeline lineno="335"><highlight class="normal"></highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>operands.size();<sp/>i++)</highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!operands[i])</highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="340"><highlight class="normal"></highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((operands[i]-&gt;<ref refid="classShaderParser_1_1ComplexExpression_1a7f8f55c1b66662f2dd471784d111309a" kindref="member">getValueType</ref>()<sp/>!=<sp/>baseValueType)<sp/>&amp;&amp;<sp/>!operands[i]-&gt;<ref refid="classShaderParser_1_1ComplexExpression_1a1f6ee737b43f1de2ecbb05f5bbe49ec5" kindref="member">canConvert</ref>(baseValueType))</highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>shexpr::VT_UNDEFINED;</highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="344"><highlight class="normal"></highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>baseValueType;</highlight></codeline>
<codeline lineno="346"><highlight class="normal">}</highlight></codeline>
<codeline lineno="347"><highlight class="normal"></highlight></codeline>
<codeline lineno="348"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="classShaderParser_1_1ComplexExpression_1ac2fe7fc73b1e22177129c4465a6609eb" kindref="member">ComplexExpression::getChannels</ref>()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="349"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ch<sp/>=<sp/>channels;</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>operand<sp/>:<sp/>operands)</highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/>ch<sp/>=<sp/>eastl::max(ch,<sp/>operand-&gt;<ref refid="classShaderParser_1_1ComplexExpression_1ac2fe7fc73b1e22177129c4465a6609eb" kindref="member">getChannels</ref>());</highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ch;</highlight></codeline>
<codeline lineno="354"><highlight class="normal">}</highlight></codeline>
<codeline lineno="355"><highlight class="normal"></highlight></codeline>
<codeline lineno="356"><highlight class="normal"></highlight></codeline>
<codeline lineno="357"><highlight class="normal"></highlight><highlight class="comment">//<sp/>check<sp/>convertion</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="358"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classShaderParser_1_1ComplexExpression_1a1f6ee737b43f1de2ecbb05f5bbe49ec5" kindref="member">ComplexExpression::canConvert</ref>(shexpr::ValueType<sp/>vt)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="359"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(operands.size()<sp/>==<sp/>1<sp/>&amp;&amp;<sp/>operands[0]<sp/>&amp;&amp;<sp/>baseValueType<sp/>==<sp/>shexpr::VT_COLOR4<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>(operands[0]-&gt;getValueType()<sp/>==<sp/>shexpr::VT_REAL<sp/>||<sp/>operands[0]-&gt;getValueType()<sp/>==<sp/>shexpr::VT_COLOR4))</highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="363"><highlight class="normal"></highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>operands.size();<sp/>i++)</highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(operands[i]<sp/>&amp;&amp;<sp/>!operands[i]-&gt;<ref refid="classShaderParser_1_1ComplexExpression_1a1f6ee737b43f1de2ecbb05f5bbe49ec5" kindref="member">canConvert</ref>(vt))</highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="369"><highlight class="normal"></highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="371"><highlight class="normal">}</highlight></codeline>
<codeline lineno="372"><highlight class="normal"></highlight></codeline>
<codeline lineno="373"><highlight class="normal"></highlight><highlight class="comment">//<sp/>return<sp/>true,<sp/>if<sp/>expression<sp/>has<sp/>only<sp/>numeric<sp/>constants<sp/>and<sp/>local<sp/>variables</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="374"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classShaderParser_1_1ComplexExpression_1a7194e5c6d1440272d923f2a43f91b323" kindref="member">ComplexExpression::isConst</ref>()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="375"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>operands.size();<sp/>i++)</highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(operands[i]<sp/>&amp;&amp;<sp/>!operands[i]-&gt;<ref refid="classShaderParser_1_1ComplexExpression_1a7194e5c6d1440272d923f2a43f91b323" kindref="member">isConst</ref>())</highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="381"><highlight class="normal"></highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="383"><highlight class="normal">}</highlight></codeline>
<codeline lineno="384"><highlight class="normal"></highlight></codeline>
<codeline lineno="385"><highlight class="normal"></highlight></codeline>
<codeline lineno="386"><highlight class="normal"></highlight><highlight class="comment">//<sp/>evaluate<sp/>this<sp/>expression<sp/>as<sp/>real</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="387"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classShaderParser_1_1ComplexExpression_1a17a106337e194f2f9768a8e2a45abb8d" kindref="member">ComplexExpression::evaluate</ref>(real<sp/>&amp;out_value,<sp/><ref refid="structParser" kindref="compound">Parser</ref><sp/>&amp;parser)</highlight></codeline>
<codeline lineno="388"><highlight class="normal">{</highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>cannot<sp/>evaluate<sp/>dynamic<sp/>expressions</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classShaderParser_1_1ComplexExpression_1a16bdebae479907f7361ce4fbfaa6f05e" kindref="member">isDynamic</ref>())</highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="392"><highlight class="normal"></highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/>G_ASSERT(operands.size());</highlight></codeline>
<codeline lineno="394"><highlight class="normal"></highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!operands[shexpr::OPER_LEFT])</highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(operands.size()<sp/>==<sp/>1)</highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>single<sp/>operand</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!operands[shexpr::OPER_LEFT]-&gt;<ref refid="classShaderParser_1_1ComplexExpression_1a17a106337e194f2f9768a8e2a45abb8d" kindref="member">evaluate</ref>(out_value,<sp/>parser))</highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>many<sp/>operands</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/><sp/><sp/>real<sp/>value;</highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>operands.size();<sp/>i++)</highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>G_ASSERT(operands[i]);</highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!operands[i]-&gt;<ref refid="classShaderParser_1_1ComplexExpression_1a17a106337e194f2f9768a8e2a45abb8d" kindref="member">evaluate</ref>(value,<sp/>parser))</highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="412"><highlight class="normal"></highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(<ref refid="classShaderParser_1_1ComplexExpression_1a1d01b970349ba568a83f6bfac7abf2ae" kindref="member">getBinOperator</ref>(shexpr::OperandType(i)))</highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>shexpr::OP_ADD:<sp/>out_value<sp/>+=<sp/>value;<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>shexpr::OP_SUB:<sp/>out_value<sp/>-=<sp/>value;<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>shexpr::OP_DIV:</highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(value<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="shErrorReporting_8h_1a634f6d6ca9a9f22c5eea4c9b8e20ef31" kindref="member">report_error</ref>(parser,<sp/><ref refid="classShaderParser_1_1Expression_1a066eed5146bd48cfcc3acb30a50e9068" kindref="member">getParserSymbol</ref>(),<sp/></highlight><highlight class="stringliteral">&quot;divide<sp/>by<sp/>zero<sp/>error!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>out_value<sp/>/=<sp/>value;</highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>shexpr::OP_MUL:<sp/>out_value<sp/>*=<sp/>value;<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>shexpr::_OP_UNDEFINED:<sp/>out_value<sp/>=<sp/>value;<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:<sp/>G_ASSERT(0);</highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="433"><highlight class="normal"></highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classShaderParser_1_1Expression_1a8941f97eca15c43e1ecd37d5c7dc3caf" kindref="member">Expression::evaluate</ref>(out_value,<sp/>parser);</highlight></codeline>
<codeline lineno="435"><highlight class="normal">}</highlight></codeline>
<codeline lineno="436"><highlight class="normal"></highlight></codeline>
<codeline lineno="437"><highlight class="normal"></highlight><highlight class="comment">//<sp/>evaluate<sp/>this<sp/>expression<sp/>as<sp/>color4</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="438"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classShaderParser_1_1ComplexExpression_1a17a106337e194f2f9768a8e2a45abb8d" kindref="member">ComplexExpression::evaluate</ref>(Color4<sp/>&amp;out_value,<sp/><ref refid="structParser" kindref="compound">Parser</ref><sp/>&amp;parser)</highlight></codeline>
<codeline lineno="439"><highlight class="normal">{</highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>cannot<sp/>evaluate<sp/>dynamic<sp/>expressions</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classShaderParser_1_1ComplexExpression_1a16bdebae479907f7361ce4fbfaa6f05e" kindref="member">isDynamic</ref>())</highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="443"><highlight class="normal"></highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/>G_ASSERT(operands.size());</highlight></codeline>
<codeline lineno="445"><highlight class="normal"></highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!operands[shexpr::OPER_LEFT])</highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(operands.size()<sp/>==<sp/>1)</highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>single<sp/>operand</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!operands[shexpr::OPER_LEFT]-&gt;<ref refid="classShaderParser_1_1ComplexExpression_1a17a106337e194f2f9768a8e2a45abb8d" kindref="member">evaluate</ref>(out_value,<sp/>parser))</highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>many<sp/>operands</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/><sp/><sp/>Color4<sp/>value;</highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>operands.size();<sp/>i++)</highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>G_ASSERT(operands[i]);</highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!operands[i]-&gt;<ref refid="classShaderParser_1_1ComplexExpression_1a17a106337e194f2f9768a8e2a45abb8d" kindref="member">evaluate</ref>(value,<sp/>parser))</highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="463"><highlight class="normal"></highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(<ref refid="classShaderParser_1_1ComplexExpression_1a1d01b970349ba568a83f6bfac7abf2ae" kindref="member">getBinOperator</ref>(shexpr::OperandType(i)))</highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>shexpr::OP_ADD:<sp/>out_value<sp/>+=<sp/>value;<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="467"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>shexpr::OP_SUB:<sp/>out_value<sp/>-=<sp/>value;<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>shexpr::OP_DIV:</highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>debug(</highlight><highlight class="stringliteral">&quot;%.4f<sp/>%.4f<sp/>%.4f<sp/>%.4f&quot;</highlight><highlight class="normal">,<sp/>out_value.r,<sp/>out_value.g,<sp/>out_value.b,<sp/>out_value.a);</highlight></codeline>
<codeline lineno="471"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(value.r<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="472"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="shErrorReporting_8h_1a634f6d6ca9a9f22c5eea4c9b8e20ef31" kindref="member">report_error</ref>(parser,<sp/><ref refid="classShaderParser_1_1Expression_1a066eed5146bd48cfcc3acb30a50e9068" kindref="member">getParserSymbol</ref>(),<sp/></highlight><highlight class="stringliteral">&quot;divide<sp/>by<sp/>zero<sp/>error<sp/>-<sp/>color4.r<sp/>=<sp/>0!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(value.g<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="477"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="478"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="shErrorReporting_8h_1a634f6d6ca9a9f22c5eea4c9b8e20ef31" kindref="member">report_error</ref>(parser,<sp/><ref refid="classShaderParser_1_1Expression_1a066eed5146bd48cfcc3acb30a50e9068" kindref="member">getParserSymbol</ref>(),<sp/></highlight><highlight class="stringliteral">&quot;divide<sp/>by<sp/>zero<sp/>error<sp/>-<sp/>color4.g<sp/>=<sp/>0!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="480"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(value.b<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="482"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="483"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="shErrorReporting_8h_1a634f6d6ca9a9f22c5eea4c9b8e20ef31" kindref="member">report_error</ref>(parser,<sp/><ref refid="classShaderParser_1_1Expression_1a066eed5146bd48cfcc3acb30a50e9068" kindref="member">getParserSymbol</ref>(),<sp/></highlight><highlight class="stringliteral">&quot;divide<sp/>by<sp/>zero<sp/>error<sp/>-<sp/>color4.b<sp/>=<sp/>0!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="484"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="485"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="486"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(value.a<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="487"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="488"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="shErrorReporting_8h_1a634f6d6ca9a9f22c5eea4c9b8e20ef31" kindref="member">report_error</ref>(parser,<sp/><ref refid="classShaderParser_1_1Expression_1a066eed5146bd48cfcc3acb30a50e9068" kindref="member">getParserSymbol</ref>(),<sp/></highlight><highlight class="stringliteral">&quot;divide<sp/>by<sp/>zero<sp/>error<sp/>-<sp/>color4.a<sp/>=<sp/>0!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="489"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="490"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="491"><highlight class="normal"></highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>out_value<sp/>/=<sp/>value;</highlight></codeline>
<codeline lineno="493"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="495"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>shexpr::OP_MUL:<sp/>out_value<sp/>*=<sp/>value;<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="496"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>shexpr::_OP_UNDEFINED:<sp/>out_value<sp/>=<sp/>value;<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="497"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:<sp/>G_ASSERT(0);</highlight></codeline>
<codeline lineno="498"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="499"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="500"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="501"><highlight class="normal"></highlight></codeline>
<codeline lineno="502"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classShaderParser_1_1Expression_1a8941f97eca15c43e1ecd37d5c7dc3caf" kindref="member">Expression::evaluate</ref>(out_value,<sp/>parser);</highlight></codeline>
<codeline lineno="503"><highlight class="normal">}</highlight></codeline>
<codeline lineno="504"><highlight class="normal"></highlight></codeline>
<codeline lineno="505"><highlight class="normal"></highlight></codeline>
<codeline lineno="506"><highlight class="normal"></highlight><highlight class="comment">//<sp/>resize<sp/>operands</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="507"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classShaderParser_1_1ComplexExpression_1a60faa0e90cdf70dbe209bdaf52089424" kindref="member">ComplexExpression::resizeOperands</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>count)</highlight></codeline>
<codeline lineno="508"><highlight class="normal">{</highlight></codeline>
<codeline lineno="509"><highlight class="normal"><sp/><sp/>tabutils::safeResize(operands,<sp/>count);</highlight></codeline>
<codeline lineno="510"><highlight class="normal"><sp/><sp/>binOp.resize(count);</highlight></codeline>
<codeline lineno="511"><highlight class="normal"><sp/><sp/>tabutils::setAll(binOp,<sp/>shexpr::_OP_UNDEFINED);</highlight></codeline>
<codeline lineno="512"><highlight class="normal">}</highlight></codeline>
<codeline lineno="513"><highlight class="normal"></highlight></codeline>
<codeline lineno="514"><highlight class="normal"></highlight></codeline>
<codeline lineno="515"><highlight class="normal"></highlight><highlight class="comment">//<sp/>add<sp/>user<sp/>operand</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="516"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classShaderParser_1_1ComplexExpression_1a493d9259f604e81c3545d2c8e88b0727" kindref="member">ComplexExpression::addOperand</ref>(<ref refid="classShaderParser_1_1Expression" kindref="compound">Expression</ref><sp/>*child,<sp/>shexpr::BinaryOperator<sp/>t)</highlight></codeline>
<codeline lineno="517"><highlight class="normal">{</highlight></codeline>
<codeline lineno="518"><highlight class="normal"><sp/><sp/>operands.push_back(child);</highlight></codeline>
<codeline lineno="519"><highlight class="normal"><sp/><sp/>binOp.push_back(t);</highlight></codeline>
<codeline lineno="520"><highlight class="normal"></highlight></codeline>
<codeline lineno="521"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(child)</highlight></codeline>
<codeline lineno="522"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="523"><highlight class="normal"><sp/><sp/><sp/><sp/>child-&gt;<ref refid="classShaderParser_1_1Expression_1a85fe9b97eae19d91e0affe293d3eefdf" kindref="member">SetParent</ref>(</highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="524"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="525"><highlight class="normal">}</highlight></codeline>
<codeline lineno="526"><highlight class="normal"></highlight></codeline>
<codeline lineno="527"><highlight class="normal"></highlight><highlight class="comment">//<sp/>get/set<sp/>operator</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="528"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classShaderParser_1_1ComplexExpression_1af8b4d5be02c293d55ebf28f396ef582d" kindref="member">ComplexExpression::setBinOperator</ref>(shexpr::OperandType<sp/>op,<sp/>shexpr::BinaryOperator<sp/>t)</highlight></codeline>
<codeline lineno="529"><highlight class="normal">{</highlight></codeline>
<codeline lineno="530"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((op<sp/>&lt;<sp/>0)<sp/>||<sp/>(op<sp/>&gt;=<sp/>binOp.size()))</highlight></codeline>
<codeline lineno="531"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="532"><highlight class="normal"><sp/><sp/>binOp[op]<sp/>=<sp/>t;</highlight></codeline>
<codeline lineno="533"><highlight class="normal">}</highlight></codeline>
<codeline lineno="534"><highlight class="normal"></highlight></codeline>
<codeline lineno="535"><highlight class="normal"></highlight></codeline>
<codeline lineno="536"><highlight class="normal">shexpr::BinaryOperator<sp/><ref refid="classShaderParser_1_1ComplexExpression_1a1d01b970349ba568a83f6bfac7abf2ae" kindref="member">ComplexExpression::getBinOperator</ref>(shexpr::OperandType<sp/>op)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="537"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="538"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(op<sp/>&lt;<sp/>0<sp/>||<sp/>op<sp/>&gt;=<sp/>binOp.size())</highlight></codeline>
<codeline lineno="539"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>shexpr::_OP_UNDEFINED;</highlight></codeline>
<codeline lineno="540"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>binOp[op];</highlight></codeline>
<codeline lineno="541"><highlight class="normal">}</highlight></codeline>
<codeline lineno="542"><highlight class="normal"></highlight></codeline>
<codeline lineno="543"><highlight class="normal"></highlight></codeline>
<codeline lineno="544"><highlight class="normal"></highlight><highlight class="comment">//<sp/>return<sp/>operator<sp/>for<sp/>specific<sp/>expression.<sp/>return<sp/>UNDEFINED,<sp/>if<sp/>operator<sp/>not<sp/>found</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="545"><highlight class="normal">shexpr::BinaryOperator<sp/><ref refid="classShaderParser_1_1ComplexExpression_1a1d01b970349ba568a83f6bfac7abf2ae" kindref="member">ComplexExpression::getBinOperator</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classShaderParser_1_1Expression" kindref="compound">Expression</ref><sp/>*e)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="546"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="547"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(e)</highlight></codeline>
<codeline lineno="548"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="549"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>operands.size();<sp/>i++)</highlight></codeline>
<codeline lineno="550"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="551"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(operands[i]<sp/>==<sp/>e)</highlight></codeline>
<codeline lineno="552"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>binOp[i];</highlight></codeline>
<codeline lineno="553"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="554"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="555"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>shexpr::_OP_UNDEFINED;</highlight></codeline>
<codeline lineno="556"><highlight class="normal">}</highlight></codeline>
<codeline lineno="557"><highlight class="normal"></highlight></codeline>
<codeline lineno="558"><highlight class="normal"></highlight></codeline>
<codeline lineno="559"><highlight class="normal"></highlight><highlight class="comment">//<sp/>dump<sp/>to<sp/>debug</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="560"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classShaderParser_1_1ComplexExpression_1a297558e23345f9282e9d9b75ac44ecf2" kindref="member">ComplexExpression::dump_internal</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>level,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*tabs)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="561"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="562"><highlight class="normal"><sp/><sp/>debug(</highlight><highlight class="stringliteral">&quot;%s&lt;ComplexExpression&gt;-%s&quot;</highlight><highlight class="normal">,<sp/>tabs,<sp/><ref refid="classShaderParser_1_1Expression_1a68e771cf9c1584e59c0f5c5e298d3eea" kindref="member">Expression::__getName</ref>(baseValueType));</highlight></codeline>
<codeline lineno="563"><highlight class="normal"><sp/><sp/><ref refid="classShaderParser_1_1Expression_1ae3261bc8b45356c6090bd84db2508fcb" kindref="member">Expression::dump_internal</ref>(level,<sp/>tabs);</highlight></codeline>
<codeline lineno="564"><highlight class="normal"></highlight></codeline>
<codeline lineno="565"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>operands.size();<sp/>i++)</highlight></codeline>
<codeline lineno="566"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="567"><highlight class="normal"><sp/><sp/><sp/><sp/>debug(</highlight><highlight class="stringliteral">&quot;%sbin_op=%s&quot;</highlight><highlight class="normal">,<sp/>tabs,<sp/><ref refid="classShaderParser_1_1Expression_1a68e771cf9c1584e59c0f5c5e298d3eea" kindref="member">Expression::__getName</ref>(binOp[i]));</highlight></codeline>
<codeline lineno="568"><highlight class="normal"><sp/><sp/><sp/><sp/>operands[i]-&gt;dump(level<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="569"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="570"><highlight class="normal"></highlight></codeline>
<codeline lineno="571"><highlight class="normal"><sp/><sp/>debug(</highlight><highlight class="stringliteral">&quot;%s&lt;/ComplexExpression&gt;&quot;</highlight><highlight class="normal">,<sp/>tabs);</highlight></codeline>
<codeline lineno="572"><highlight class="normal">}</highlight></codeline>
<codeline lineno="573"><highlight class="normal"></highlight></codeline>
<codeline lineno="574"><highlight class="normal"></highlight></codeline>
<codeline lineno="575"><highlight class="normal"></highlight><highlight class="comment">//<sp/>evaluate<sp/>all<sp/>avalible<sp/>branches;<sp/>return<sp/>false<sp/>if<sp/>error<sp/>occuried</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="576"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classShaderParser_1_1ComplexExpression_1a16fa3be80484ab01a7e1bbc713c53b68" kindref="member">ComplexExpression::collapseNumbers</ref>(<ref refid="structParser" kindref="compound">Parser</ref><sp/>&amp;parser)</highlight></codeline>
<codeline lineno="577"><highlight class="normal">{</highlight></codeline>
<codeline lineno="578"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>operands.size();<sp/>i++)</highlight></codeline>
<codeline lineno="579"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="580"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>operator<sp/>is<sp/>constant,<sp/>calculate<sp/>it<sp/>now</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="581"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classShaderParser_1_1Expression" kindref="compound">Expression</ref><sp/>*op<sp/>=<sp/>operands[i];</highlight></codeline>
<codeline lineno="582"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(op-&gt;<ref refid="classShaderParser_1_1Expression_1a5cd845a298cd30bc29c1d6176d90d7a5" kindref="member">isConst</ref>())</highlight></codeline>
<codeline lineno="583"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="584"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Color4<sp/>v;</highlight></codeline>
<codeline lineno="585"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(baseValueType<sp/>==<sp/>shexpr::VT_COLOR4)</highlight></codeline>
<codeline lineno="586"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="587"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(op-&gt;<ref refid="classShaderParser_1_1Expression_1ab8876717d35f647420a5c3bfd7c1c50c" kindref="member">getType</ref>()<sp/>!=<sp/>shexpr::E_CONST_COLOR4)</highlight></codeline>
<codeline lineno="588"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="589"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>calc<sp/>color4</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="590"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(op-&gt;<ref refid="classShaderParser_1_1Expression_1a8941f97eca15c43e1ecd37d5c7dc3caf" kindref="member">evaluate</ref>(v,<sp/>parser))</highlight></codeline>
<codeline lineno="591"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="592"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>replace<sp/>with<sp/>constant<sp/>color4<sp/>value</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="593"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Terminal<sp/>*t<sp/>=<sp/><ref refid="classShaderParser_1_1Expression_1a63e9f75ae1b742c5ffcbd7aa65b1963a" kindref="member">getTerminal</ref>();</highlight></codeline>
<codeline lineno="594"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>op;</highlight></codeline>
<codeline lineno="595"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classShaderParser_1_1ComplexExpression_1a1cfcdaf2ee0204346bde3a7961720734" kindref="member">setOperand</ref>(shexpr::OperandType(i),<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="classShaderParser_1_1ConstColor4Value" kindref="compound">ConstColor4Value</ref>(t,<sp/>v));</highlight></codeline>
<codeline lineno="596"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="597"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="598"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="599"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="600"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="601"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>calc<sp/>real</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="602"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(op-&gt;<ref refid="classShaderParser_1_1Expression_1a8941f97eca15c43e1ecd37d5c7dc3caf" kindref="member">evaluate</ref>(v.r,<sp/>parser))</highlight></codeline>
<codeline lineno="603"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="604"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>replace<sp/>with<sp/>constant<sp/>real<sp/>value</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="605"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Terminal<sp/>*t<sp/>=<sp/><ref refid="classShaderParser_1_1Expression_1a63e9f75ae1b742c5ffcbd7aa65b1963a" kindref="member">getTerminal</ref>();</highlight></codeline>
<codeline lineno="606"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>op;</highlight></codeline>
<codeline lineno="607"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classShaderParser_1_1ComplexExpression_1a1cfcdaf2ee0204346bde3a7961720734" kindref="member">setOperand</ref>(shexpr::OperandType(i),<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="classShaderParser_1_1ConstRealValue" kindref="compound">ConstRealValue</ref>(t,<sp/>v.r));</highlight></codeline>
<codeline lineno="608"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="609"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="610"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="611"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="612"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="613"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!op-&gt;<ref refid="classShaderParser_1_1Expression_1a6504a6f642f08f1cf420bebda197efaf" kindref="member">collapseNumbers</ref>(parser))</highlight></codeline>
<codeline lineno="614"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="615"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="616"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="617"><highlight class="normal"></highlight></codeline>
<codeline lineno="618"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="619"><highlight class="normal">}</highlight></codeline>
<codeline lineno="620"><highlight class="normal"></highlight></codeline>
<codeline lineno="621"><highlight class="normal"></highlight><highlight class="comment">//<sp/>return<sp/>true,<sp/>if<sp/>expression<sp/>-<sp/>is<sp/>a<sp/>dynamic<sp/>expression</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="622"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classShaderParser_1_1ComplexExpression_1a16bdebae479907f7361ce4fbfaa6f05e" kindref="member">ComplexExpression::isDynamic</ref>()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="623"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="624"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>operands.size();<sp/>i++)</highlight></codeline>
<codeline lineno="625"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="626"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(operands[i]-&gt;<ref refid="classShaderParser_1_1ComplexExpression_1a16bdebae479907f7361ce4fbfaa6f05e" kindref="member">isDynamic</ref>())</highlight></codeline>
<codeline lineno="627"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="628"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="629"><highlight class="normal"></highlight></codeline>
<codeline lineno="630"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="631"><highlight class="normal">}</highlight></codeline>
<codeline lineno="632"><highlight class="normal"></highlight></codeline>
<codeline lineno="633"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classShaderParser_1_1ComplexExpression_1a695de7886520cd4b45f36355857a6674" kindref="member">ComplexExpression::validate</ref>(<ref refid="structParser" kindref="compound">Parser</ref><sp/>&amp;parser)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="634"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="635"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dim<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="636"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>operand<sp/>:<sp/>operands)</highlight></codeline>
<codeline lineno="637"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="638"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Make<sp/>sure<sp/>that<sp/>all<sp/>operands<sp/>have<sp/>the<sp/>same<sp/>channel<sp/>cnt</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="639"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>opDim<sp/>=<sp/>operand-&gt;getChannels();</highlight></codeline>
<codeline lineno="640"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(dim<sp/>==<sp/>1)</highlight></codeline>
<codeline lineno="641"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>dim<sp/>=<sp/>opDim;</highlight></codeline>
<codeline lineno="642"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(opDim<sp/>!=<sp/>1<sp/>&amp;&amp;<sp/>opDim<sp/>!=<sp/>dim)</highlight></codeline>
<codeline lineno="643"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="644"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="shErrorReporting_8h_1a634f6d6ca9a9f22c5eea4c9b8e20ef31" kindref="member">report_error</ref>(parser,<sp/><ref refid="classShaderParser_1_1Expression_1a066eed5146bd48cfcc3acb30a50e9068" kindref="member">getParserSymbol</ref>(),<sp/></highlight><highlight class="stringliteral">&quot;Complex<sp/>expression<sp/>operands<sp/>have<sp/>incompatible<sp/>dimensions<sp/>%d<sp/>and<sp/>%d&quot;</highlight><highlight class="normal">,<sp/>dim,<sp/>opDim);</highlight></codeline>
<codeline lineno="645"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="646"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="647"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="648"><highlight class="normal"></highlight></codeline>
<codeline lineno="649"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="650"><highlight class="normal">}</highlight></codeline>
<codeline lineno="651"><highlight class="normal"></highlight></codeline>
<codeline lineno="652"><highlight class="normal">Symbol<sp/>*<ref refid="classShaderParser_1_1ComplexExpression_1a7d82b28b4591cd98358adaf95cb62164" kindref="member">ComplexExpression::hasDynamicAndMaterialTermsAt</ref>()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="653"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="654"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>hasStatic<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="655"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>hasDynamic<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="656"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>operand<sp/>:<sp/>operands)</highlight></codeline>
<codeline lineno="657"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="658"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Generate<sp/>warnings<sp/>if<sp/>bindless<sp/>is<sp/>on<sp/>and<sp/>static<sp/>and<sp/>dynamic<sp/>operands<sp/>are<sp/>used</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="659"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!operand-&gt;isConst())</highlight></codeline>
<codeline lineno="660"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="661"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Symbol<sp/>*s<sp/>=<sp/>operand-&gt;hasDynamicAndMaterialTermsAt())</highlight></codeline>
<codeline lineno="662"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>s;</highlight></codeline>
<codeline lineno="663"><highlight class="normal"></highlight></codeline>
<codeline lineno="664"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(operand-&gt;isDynamic())</highlight></codeline>
<codeline lineno="665"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hasDynamic<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="666"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="667"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hasStatic<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="668"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="669"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="670"><highlight class="normal"></highlight></codeline>
<codeline lineno="671"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>hasDynamic<sp/>&amp;&amp;<sp/>hasStatic<sp/>?<sp/><ref refid="classShaderParser_1_1Expression_1a066eed5146bd48cfcc3acb30a50e9068" kindref="member">getParserSymbol</ref>()<sp/>:<sp/>nullptr;</highlight></codeline>
<codeline lineno="672"><highlight class="normal">}</highlight></codeline>
<codeline lineno="673"><highlight class="normal"></highlight><highlight class="comment">//<sp/>class<sp/>ComplexExpression</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="674"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="675"><highlight class="normal"></highlight></codeline>
<codeline lineno="676"><highlight class="normal"></highlight></codeline>
<codeline lineno="677"><highlight class="normal"></highlight><highlight class="comment">/*********************************</highlight></codeline>
<codeline lineno="678"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="679"><highlight class="comment"><sp/>*<sp/>class<sp/>SingleColorChannelExpression</highlight></codeline>
<codeline lineno="680"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="681"><highlight class="comment"><sp/>*********************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="682"><highlight class="normal"></highlight><highlight class="comment">//<sp/>ctor/dtor</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="683"><highlight class="normal"><ref refid="classShaderParser_1_1SingleColorChannelExpression_1a1e7c9113c8b4e70b11ed0ed925633f0d" kindref="member">SingleColorChannelExpression::SingleColorChannelExpression</ref>(Terminal<sp/>*s,<sp/>shexpr::ColorChannel<sp/>cc)<sp/>:</highlight></codeline>
<codeline lineno="684"><highlight class="normal"><sp/><sp/><ref refid="classShaderParser_1_1ColorChannelExpression" kindref="compound">ColorChannelExpression</ref>(s),<sp/>colorChannel(cc)</highlight></codeline>
<codeline lineno="685"><highlight class="normal">{</highlight></codeline>
<codeline lineno="686"><highlight class="normal"><sp/><sp/>G_ASSERT(cc<sp/>!=<sp/>shexpr::_CC_UNDEFINED);</highlight></codeline>
<codeline lineno="687"><highlight class="normal">}</highlight></codeline>
<codeline lineno="688"><highlight class="normal"></highlight></codeline>
<codeline lineno="689"><highlight class="normal"></highlight></codeline>
<codeline lineno="690"><highlight class="normal"></highlight><highlight class="comment">//<sp/>assembly<sp/>this<sp/>expression</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="691"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classShaderParser_1_1SingleColorChannelExpression_1a2be4627ffaf4483c23d205cbf5bc30d5" kindref="member">SingleColorChannelExpression::assembleBytecode</ref>(<ref refid="namespaceShaderParser_1a732af6cbcecefe1051d9165d3718d702" kindref="member">CodeTable</ref><sp/>&amp;code,<sp/><ref refid="classRegister" kindref="compound">Register</ref><sp/>&amp;dest_reg,<sp/><ref refid="classStcodeVMRegisterAllocator" kindref="compound">StcodeVMRegisterAllocator</ref><sp/>&amp;reg_allocator,</highlight></codeline>
<codeline lineno="692"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>is_integer)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="693"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="694"><highlight class="normal"><sp/><sp/><ref refid="classRegister" kindref="compound">Register</ref><sp/>srcReg<sp/>=<sp/>reg_allocator.<ref refid="classStcodeVMRegisterAllocator_1a7104d5ae287c87b1e7379dfa58b513a4" kindref="member">add_vec_reg</ref>();</highlight></codeline>
<codeline lineno="695"><highlight class="normal"></highlight></codeline>
<codeline lineno="696"><highlight class="normal"><sp/><sp/><ref refid="classShaderParser_1_1ColorChannelExpression_1acb738bdb2f1c713407c2ca75ffa866b4" kindref="member">child</ref>-&gt;assembleBytecode(code,<sp/>srcReg,<sp/>reg_allocator,<sp/>is_integer);</highlight></codeline>
<codeline lineno="697"><highlight class="normal"><sp/><sp/>dest_reg.<ref refid="classRegister_1a72ee810e60f2375750a0f1af06e851bf" kindref="member">reset</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">(srcReg)<sp/>+<sp/>colorChannel,<sp/>1);</highlight></codeline>
<codeline lineno="698"><highlight class="normal">}</highlight></codeline>
<codeline lineno="699"><highlight class="normal"></highlight></codeline>
<codeline lineno="700"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classShaderParser_1_1SingleColorChannelExpression_1ae2877687d5d67b8d677b37142737cffc" kindref="member">SingleColorChannelExpression::assembleCpp</ref>(<ref refid="structStcodeExpression" kindref="compound">StcodeExpression</ref><sp/>&amp;cpp_expr,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>is_integer)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="701"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="702"><highlight class="normal"><sp/><sp/>cpp_expr.<ref refid="structStcodeExpression_1a8b51ba11b686a94c48b82ece54692900" kindref="member">specifyNextExprElement</ref>(<ref refid="structStcodeExpression_1aaccadc8df002bf4a50f3700badd92c59a39b30de9c4f3bd4b6594d3a83be14928" kindref="member">StcodeExpression::ElementType::SINGLE_CHANNEL_MASK</ref>,<sp/>&amp;colorChannel);</highlight></codeline>
<codeline lineno="703"><highlight class="normal"><sp/><sp/><ref refid="classShaderParser_1_1ColorChannelExpression_1acb738bdb2f1c713407c2ca75ffa866b4" kindref="member">child</ref>-&gt;assembleCpp(cpp_expr,<sp/>is_integer);</highlight></codeline>
<codeline lineno="704"><highlight class="normal">}</highlight></codeline>
<codeline lineno="705"><highlight class="normal"></highlight></codeline>
<codeline lineno="706"><highlight class="normal"></highlight></codeline>
<codeline lineno="707"><highlight class="normal"></highlight><highlight class="comment">//<sp/>evaluate<sp/>this<sp/>expression<sp/>as<sp/>real</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="708"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classShaderParser_1_1SingleColorChannelExpression_1aa81c400ed78862b9224cce51671a73d2" kindref="member">SingleColorChannelExpression::evaluate</ref>(real<sp/>&amp;out_value,<sp/><ref refid="structParser" kindref="compound">Parser</ref><sp/>&amp;parser)</highlight></codeline>
<codeline lineno="709"><highlight class="normal">{</highlight></codeline>
<codeline lineno="710"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>cannot<sp/>evaluate<sp/>dynamic<sp/>expressions</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="711"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classShaderParser_1_1ColorChannelExpression_1ac83da685f248d7f6864d62165fc562b5" kindref="member">isDynamic</ref>())</highlight></codeline>
<codeline lineno="712"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="713"><highlight class="normal"></highlight></codeline>
<codeline lineno="714"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="classShaderParser_1_1Expression_1ac19dd34018b4470ad166a8ab244f981d" kindref="member">canConvert</ref>(shexpr::VT_REAL))</highlight></codeline>
<codeline lineno="715"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="716"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="shErrorReporting_8h_1a634f6d6ca9a9f22c5eea4c9b8e20ef31" kindref="member">report_error</ref>(parser,<sp/><ref refid="classShaderParser_1_1Expression_1a066eed5146bd48cfcc3acb30a50e9068" kindref="member">getParserSymbol</ref>(),<sp/></highlight><highlight class="stringliteral">&quot;cannot<sp/>convert<sp/>from<sp/>&apos;%s&apos;<sp/>to<sp/>&apos;%s&apos;<sp/>here&quot;</highlight><highlight class="normal">,<sp/><ref refid="classShaderParser_1_1Expression_1a68e771cf9c1584e59c0f5c5e298d3eea" kindref="member">Expression::__getName</ref>(<ref refid="classShaderParser_1_1SingleColorChannelExpression_1a3d7542112cf0a479f666d1faad6c0ea1" kindref="member">getValueType</ref>()),</highlight></codeline>
<codeline lineno="717"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classShaderParser_1_1Expression_1a68e771cf9c1584e59c0f5c5e298d3eea" kindref="member">Expression::__getName</ref>(shexpr::VT_REAL));</highlight></codeline>
<codeline lineno="718"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="719"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="720"><highlight class="normal"></highlight></codeline>
<codeline lineno="721"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(colorChannel<sp/>==<sp/>shexpr::_CC_UNDEFINED)</highlight></codeline>
<codeline lineno="722"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="723"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classShaderParser_1_1ColorChannelExpression_1acb738bdb2f1c713407c2ca75ffa866b4" kindref="member">child</ref>-&gt;evaluate(out_value,<sp/>parser);</highlight></codeline>
<codeline lineno="724"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="725"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="726"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="727"><highlight class="normal"><sp/><sp/><sp/><sp/>Color4<sp/>v;</highlight></codeline>
<codeline lineno="728"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="classShaderParser_1_1ColorChannelExpression_1acb738bdb2f1c713407c2ca75ffa866b4" kindref="member">child</ref>-&gt;evaluate(v,<sp/>parser))</highlight></codeline>
<codeline lineno="729"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="730"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(colorChannel)</highlight></codeline>
<codeline lineno="731"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="732"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>shexpr::CC_R:<sp/>out_value<sp/>=<sp/>v.r;<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="733"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>shexpr::CC_G:<sp/>out_value<sp/>=<sp/>v.g;<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="734"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>shexpr::CC_B:<sp/>out_value<sp/>=<sp/>v.b;<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="735"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>shexpr::CC_A:<sp/>out_value<sp/>=<sp/>v.a;<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="736"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:<sp/>G_ASSERT(0);</highlight></codeline>
<codeline lineno="737"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="738"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="739"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="740"><highlight class="normal"></highlight></codeline>
<codeline lineno="741"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="742"><highlight class="normal">}</highlight></codeline>
<codeline lineno="743"><highlight class="normal"></highlight></codeline>
<codeline lineno="744"><highlight class="normal"></highlight></codeline>
<codeline lineno="745"><highlight class="normal"></highlight><highlight class="comment">//<sp/>evaluate<sp/>this<sp/>expression<sp/>as<sp/>color4</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="746"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classShaderParser_1_1SingleColorChannelExpression_1aa81c400ed78862b9224cce51671a73d2" kindref="member">SingleColorChannelExpression::evaluate</ref>(Color4<sp/>&amp;out_value,<sp/><ref refid="structParser" kindref="compound">Parser</ref><sp/>&amp;parser)</highlight></codeline>
<codeline lineno="747"><highlight class="normal">{</highlight></codeline>
<codeline lineno="748"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>cannot<sp/>evaluate<sp/>dynamic<sp/>expressions</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="749"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classShaderParser_1_1ColorChannelExpression_1ac83da685f248d7f6864d62165fc562b5" kindref="member">isDynamic</ref>())</highlight></codeline>
<codeline lineno="750"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="751"><highlight class="normal"></highlight></codeline>
<codeline lineno="752"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="classShaderParser_1_1Expression_1ac19dd34018b4470ad166a8ab244f981d" kindref="member">canConvert</ref>(shexpr::VT_COLOR4))</highlight></codeline>
<codeline lineno="753"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="754"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="shErrorReporting_8h_1a634f6d6ca9a9f22c5eea4c9b8e20ef31" kindref="member">report_error</ref>(parser,<sp/><ref refid="classShaderParser_1_1Expression_1a066eed5146bd48cfcc3acb30a50e9068" kindref="member">getParserSymbol</ref>(),<sp/></highlight><highlight class="stringliteral">&quot;cannot<sp/>convert<sp/>from<sp/>&apos;%s&apos;<sp/>to<sp/>&apos;%s&apos;<sp/>here&quot;</highlight><highlight class="normal">,<sp/><ref refid="classShaderParser_1_1Expression_1a68e771cf9c1584e59c0f5c5e298d3eea" kindref="member">Expression::__getName</ref>(<ref refid="classShaderParser_1_1SingleColorChannelExpression_1a3d7542112cf0a479f666d1faad6c0ea1" kindref="member">getValueType</ref>()),</highlight></codeline>
<codeline lineno="755"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classShaderParser_1_1Expression_1a68e771cf9c1584e59c0f5c5e298d3eea" kindref="member">Expression::__getName</ref>(shexpr::VT_COLOR4));</highlight></codeline>
<codeline lineno="756"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="757"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="758"><highlight class="normal"></highlight></codeline>
<codeline lineno="759"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(colorChannel<sp/>==<sp/>shexpr::_CC_UNDEFINED)</highlight></codeline>
<codeline lineno="760"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="761"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classShaderParser_1_1ColorChannelExpression_1acb738bdb2f1c713407c2ca75ffa866b4" kindref="member">child</ref>-&gt;evaluate(out_value,<sp/>parser);</highlight></codeline>
<codeline lineno="762"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="763"><highlight class="normal"></highlight></codeline>
<codeline lineno="764"><highlight class="normal"><sp/><sp/>Color4<sp/>v;</highlight></codeline>
<codeline lineno="765"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="classShaderParser_1_1ColorChannelExpression_1acb738bdb2f1c713407c2ca75ffa866b4" kindref="member">child</ref>-&gt;evaluate(v,<sp/>parser))</highlight></codeline>
<codeline lineno="766"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="767"><highlight class="normal"></highlight></codeline>
<codeline lineno="768"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(colorChannel)</highlight></codeline>
<codeline lineno="769"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="770"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>shexpr::CC_R:<sp/>out_value<sp/>=<sp/>Color4(v.r,<sp/>v.r,<sp/>v.r,<sp/>v.r);<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="771"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>shexpr::CC_G:<sp/>out_value<sp/>=<sp/>Color4(v.g,<sp/>v.g,<sp/>v.g,<sp/>v.g);<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="772"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>shexpr::CC_B:<sp/>out_value<sp/>=<sp/>Color4(v.b,<sp/>v.b,<sp/>v.b,<sp/>v.b);<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="773"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>shexpr::CC_A:<sp/>out_value<sp/>=<sp/>Color4(v.a,<sp/>v.a,<sp/>v.a,<sp/>v.a);<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="774"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:<sp/>G_ASSERT(0);</highlight></codeline>
<codeline lineno="775"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="776"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="777"><highlight class="normal">}</highlight></codeline>
<codeline lineno="778"><highlight class="normal"></highlight></codeline>
<codeline lineno="779"><highlight class="normal"></highlight></codeline>
<codeline lineno="780"><highlight class="normal"></highlight><highlight class="comment">//<sp/>dump<sp/>to<sp/>debug</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="781"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classShaderParser_1_1SingleColorChannelExpression_1af8afa677d8e2e52f8fbb86b0b22330c4" kindref="member">SingleColorChannelExpression::dump_internal</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>level,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*tabs)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="782"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="783"><highlight class="normal"><sp/><sp/>debug(</highlight><highlight class="stringliteral">&quot;%s&lt;SingleColorChannelExpression&gt;-%s&quot;</highlight><highlight class="normal">,<sp/>tabs,<sp/><ref refid="classShaderParser_1_1Expression_1a68e771cf9c1584e59c0f5c5e298d3eea" kindref="member">Expression::__getName</ref>(colorChannel));</highlight></codeline>
<codeline lineno="784"><highlight class="normal"><sp/><sp/><ref refid="classShaderParser_1_1Expression_1ae3261bc8b45356c6090bd84db2508fcb" kindref="member">Expression::dump_internal</ref>(level,<sp/>tabs);</highlight></codeline>
<codeline lineno="785"><highlight class="normal"></highlight></codeline>
<codeline lineno="786"><highlight class="normal"><sp/><sp/><ref refid="classShaderParser_1_1ColorChannelExpression_1acb738bdb2f1c713407c2ca75ffa866b4" kindref="member">child</ref>-&gt;dump(level<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="787"><highlight class="normal"></highlight></codeline>
<codeline lineno="788"><highlight class="normal"><sp/><sp/>debug(</highlight><highlight class="stringliteral">&quot;%s&lt;/SingleColorChannelExpression&gt;&quot;</highlight><highlight class="normal">,<sp/>tabs);</highlight></codeline>
<codeline lineno="789"><highlight class="normal">}</highlight></codeline>
<codeline lineno="790"><highlight class="normal"></highlight></codeline>
<codeline lineno="791"><highlight class="normal"></highlight></codeline>
<codeline lineno="792"><highlight class="normal"></highlight><highlight class="comment">//<sp/>class<sp/>SingleColorChannelExpression</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="793"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="794"><highlight class="normal"></highlight></codeline>
<codeline lineno="795"><highlight class="normal"></highlight></codeline>
<codeline lineno="796"><highlight class="normal"></highlight><highlight class="comment">/*********************************</highlight></codeline>
<codeline lineno="797"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="798"><highlight class="comment"><sp/>*<sp/>class<sp/>MultiColorChannelExpression</highlight></codeline>
<codeline lineno="799"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="800"><highlight class="comment"><sp/>*********************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="801"><highlight class="normal"></highlight><highlight class="comment">//<sp/>ctor/dtor</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="802"><highlight class="normal"><ref refid="classShaderParser_1_1MultiColorChannelExpression_1a1c942c3f9a34512ae08f7690d6d2f978" kindref="member">MultiColorChannelExpression::MultiColorChannelExpression</ref>(Terminal<sp/>*s,<sp/>ChannelMask<sp/>mask)<sp/>:<sp/><ref refid="classShaderParser_1_1ColorChannelExpression" kindref="compound">ColorChannelExpression</ref>(s)</highlight></codeline>
<codeline lineno="803"><highlight class="normal">{</highlight></codeline>
<codeline lineno="804"><highlight class="normal"><sp/><sp/>G_ASSERT(mask.size()<sp/>&gt;=<sp/>2);</highlight></codeline>
<codeline lineno="805"><highlight class="normal"><sp/><sp/>channels<sp/>=<sp/>mask;</highlight></codeline>
<codeline lineno="806"><highlight class="normal">}</highlight></codeline>
<codeline lineno="807"><highlight class="normal"></highlight></codeline>
<codeline lineno="808"><highlight class="normal"></highlight><highlight class="comment">//<sp/>assembly<sp/>this<sp/>expression</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="809"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classShaderParser_1_1MultiColorChannelExpression_1aa715a3cd3971440e86f5a6b603349780" kindref="member">MultiColorChannelExpression::assembleBytecode</ref>(<ref refid="namespaceShaderParser_1a732af6cbcecefe1051d9165d3718d702" kindref="member">CodeTable</ref><sp/>&amp;code,<sp/><ref refid="classRegister" kindref="compound">Register</ref><sp/>&amp;dest_reg,<sp/><ref refid="classStcodeVMRegisterAllocator" kindref="compound">StcodeVMRegisterAllocator</ref><sp/>&amp;reg_allocator,</highlight></codeline>
<codeline lineno="810"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>is_integer)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="811"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="812"><highlight class="normal"><sp/><sp/><ref refid="classRegister" kindref="compound">Register</ref><sp/>srcReg<sp/>=<sp/>reg_allocator.<ref refid="classStcodeVMRegisterAllocator_1a7104d5ae287c87b1e7379dfa58b513a4" kindref="member">add_vec_reg</ref>();</highlight></codeline>
<codeline lineno="813"><highlight class="normal"><sp/><sp/><ref refid="classShaderParser_1_1ColorChannelExpression_1acb738bdb2f1c713407c2ca75ffa866b4" kindref="member">child</ref>-&gt;assembleBytecode(code,<sp/>srcReg,<sp/>reg_allocator,<sp/>is_integer);</highlight></codeline>
<codeline lineno="814"><highlight class="normal"></highlight></codeline>
<codeline lineno="815"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>not<sp/>vec4,<sp/>fill<sp/>all<sp/>other<sp/>places<sp/>with<sp/>ones<sp/>so<sp/>as<sp/>not<sp/>to<sp/>have<sp/>div<sp/>problems</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="816"><highlight class="normal"><sp/><sp/><ref refid="classRegister" kindref="compound">Register</ref><sp/>oneReg;</highlight></codeline>
<codeline lineno="817"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(channels.size()<sp/>&lt;<sp/>4)</highlight></codeline>
<codeline lineno="818"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="819"><highlight class="normal"><sp/><sp/><sp/><sp/>oneReg<sp/>=<sp/>reg_allocator.<ref refid="classStcodeVMRegisterAllocator_1a55a7368910369fb2ef50ba11675650be" kindref="member">add_reg</ref>();</highlight></codeline>
<codeline lineno="820"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classShaderParser_1_1Expression_1a7cc153456d29d1e3e52ec2d20563b5d1" kindref="member">Expression::assembleBytecodeForConstant</ref>(code,<sp/>1.0,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">(oneReg),<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="821"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="822"><highlight class="normal"></highlight></codeline>
<codeline lineno="823"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>make<sp/>vector</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="824"><highlight class="normal"><sp/><sp/>code.push_back(shaderopcode::makeOp3(SHCOD_MAKE_VEC,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">(dest_reg),<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">(srcReg)<sp/>+<sp/>channels[0],<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">(srcReg)<sp/>+<sp/>channels[1]));</highlight></codeline>
<codeline lineno="825"><highlight class="normal"></highlight></codeline>
<codeline lineno="826"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(channels.size())</highlight></codeline>
<codeline lineno="827"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="828"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>2:<sp/>code.push_back(shaderopcode::makeData2(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">(oneReg),<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">(oneReg)));<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="829"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>3:<sp/>code.push_back(shaderopcode::makeData2(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">(srcReg)<sp/>+<sp/>channels[2],<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">(oneReg)));<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="830"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>4:<sp/>code.push_back(shaderopcode::makeData2(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">(srcReg)<sp/>+<sp/>channels[2],<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">(srcReg)<sp/>+<sp/>channels[3]));<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="831"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:<sp/>G_ASSERT(0);</highlight></codeline>
<codeline lineno="832"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="833"><highlight class="normal">}</highlight></codeline>
<codeline lineno="834"><highlight class="normal"></highlight></codeline>
<codeline lineno="835"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classShaderParser_1_1MultiColorChannelExpression_1a490a95ce0b3f52d197d0430b9e04ce9c" kindref="member">MultiColorChannelExpression::assembleCpp</ref>(<ref refid="structStcodeExpression" kindref="compound">StcodeExpression</ref><sp/>&amp;cpp_expr,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>is_integer)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="836"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="837"><highlight class="normal"><sp/><sp/>cpp_expr.<ref refid="structStcodeExpression_1a8b51ba11b686a94c48b82ece54692900" kindref="member">specifyNextExprElement</ref>(<ref refid="structStcodeExpression_1aaccadc8df002bf4a50f3700badd92c59affa369d68551d973da92416b3b9159a9" kindref="member">StcodeExpression::ElementType::MULTIPLE_CHANNEL_MASK</ref>,<sp/><ref refid="classShaderParser_1_1MultiColorChannelExpression_1ab45d4e0c5c8be65b9dcde932772ed71d" kindref="member">getTerminal</ref>()-&gt;text);</highlight></codeline>
<codeline lineno="838"><highlight class="normal"><sp/><sp/><ref refid="classShaderParser_1_1ColorChannelExpression_1acb738bdb2f1c713407c2ca75ffa866b4" kindref="member">child</ref>-&gt;assembleCpp(cpp_expr,<sp/>is_integer);</highlight></codeline>
<codeline lineno="839"><highlight class="normal">}</highlight></codeline>
<codeline lineno="840"><highlight class="normal"></highlight></codeline>
<codeline lineno="841"><highlight class="normal"></highlight></codeline>
<codeline lineno="842"><highlight class="normal"></highlight><highlight class="comment">//<sp/>evaluate<sp/>this<sp/>expression<sp/>as<sp/>color4</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="843"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classShaderParser_1_1MultiColorChannelExpression_1ad253514a8b2bf70f5ad56b037b8a2d8e" kindref="member">MultiColorChannelExpression::evaluate</ref>(Color4<sp/>&amp;out_value,<sp/><ref refid="structParser" kindref="compound">Parser</ref><sp/>&amp;parser)</highlight></codeline>
<codeline lineno="844"><highlight class="normal">{</highlight></codeline>
<codeline lineno="845"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>cannot<sp/>evaluate<sp/>dynamic<sp/>expressions</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="846"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classShaderParser_1_1ColorChannelExpression_1ac83da685f248d7f6864d62165fc562b5" kindref="member">isDynamic</ref>())</highlight></codeline>
<codeline lineno="847"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="848"><highlight class="normal"></highlight></codeline>
<codeline lineno="849"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="classShaderParser_1_1Expression_1ac19dd34018b4470ad166a8ab244f981d" kindref="member">canConvert</ref>(shexpr::VT_COLOR4))</highlight></codeline>
<codeline lineno="850"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="851"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="shErrorReporting_8h_1a634f6d6ca9a9f22c5eea4c9b8e20ef31" kindref="member">report_error</ref>(parser,<sp/><ref refid="classShaderParser_1_1Expression_1a066eed5146bd48cfcc3acb30a50e9068" kindref="member">getParserSymbol</ref>(),<sp/></highlight><highlight class="stringliteral">&quot;cannot<sp/>convert<sp/>from<sp/>&apos;%s&apos;<sp/>to<sp/>&apos;%s&apos;<sp/>here&quot;</highlight><highlight class="normal">,<sp/><ref refid="classShaderParser_1_1Expression_1a68e771cf9c1584e59c0f5c5e298d3eea" kindref="member">Expression::__getName</ref>(<ref refid="classShaderParser_1_1MultiColorChannelExpression_1acf56b906cfdc2ef363729d20c174c78b" kindref="member">getValueType</ref>()),</highlight></codeline>
<codeline lineno="852"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classShaderParser_1_1Expression_1a68e771cf9c1584e59c0f5c5e298d3eea" kindref="member">Expression::__getName</ref>(shexpr::VT_COLOR4));</highlight></codeline>
<codeline lineno="853"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="854"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="855"><highlight class="normal"></highlight></codeline>
<codeline lineno="856"><highlight class="normal"><sp/><sp/>Color4<sp/>v;</highlight></codeline>
<codeline lineno="857"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="classShaderParser_1_1ColorChannelExpression_1acb738bdb2f1c713407c2ca75ffa866b4" kindref="member">child</ref>-&gt;evaluate(v,<sp/>parser))</highlight></codeline>
<codeline lineno="858"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="859"><highlight class="normal"></highlight></codeline>
<codeline lineno="860"><highlight class="normal"><sp/><sp/>out_value<sp/>=<sp/>Color4(1.0,<sp/>1.0,<sp/>1.0,<sp/>1.0);</highlight></codeline>
<codeline lineno="861"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>channels.size();<sp/>i++)</highlight></codeline>
<codeline lineno="862"><highlight class="normal"><sp/><sp/><sp/><sp/>out_value[i]<sp/>=<sp/>v[channels[i]];</highlight></codeline>
<codeline lineno="863"><highlight class="normal"></highlight></codeline>
<codeline lineno="864"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="865"><highlight class="normal">}</highlight></codeline>
<codeline lineno="866"><highlight class="normal"></highlight></codeline>
<codeline lineno="867"><highlight class="normal"></highlight></codeline>
<codeline lineno="868"><highlight class="normal"></highlight><highlight class="comment">//<sp/>dump<sp/>to<sp/>debug</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="869"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classShaderParser_1_1MultiColorChannelExpression_1a7c5922613d5761cfc21a50bf3c2e3255" kindref="member">MultiColorChannelExpression::dump_internal</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>level,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*tabs)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="870"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="871"><highlight class="normal"><sp/><sp/>debug(</highlight><highlight class="stringliteral">&quot;%s&lt;MultiColorChannelExpression&gt;-%s%s%s%s&quot;</highlight><highlight class="normal">,<sp/>tabs,<sp/><ref refid="classShaderParser_1_1Expression_1a68e771cf9c1584e59c0f5c5e298d3eea" kindref="member">Expression::__getName</ref>(channels[0]),</highlight></codeline>
<codeline lineno="872"><highlight class="normal"><sp/><sp/><sp/><sp/>channels.size()<sp/>&gt;=<sp/>2<sp/>?<sp/><ref refid="classShaderParser_1_1Expression_1a68e771cf9c1584e59c0f5c5e298d3eea" kindref="member">Expression::__getName</ref>(channels[1])<sp/>+<sp/>1<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="873"><highlight class="normal"><sp/><sp/><sp/><sp/>channels.size()<sp/>&gt;=<sp/>3<sp/>?<sp/><ref refid="classShaderParser_1_1Expression" kindref="compound">Expression</ref>::<ref refid="classShaderParser_1_1Expression_1a68e771cf9c1584e59c0f5c5e298d3eea" kindref="member">__getName</ref>(channels[2])<sp/>+<sp/>1<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="874"><highlight class="normal"><sp/><sp/><sp/><sp/>channels.size()<sp/>&gt;=<sp/>4<sp/>?<sp/><ref refid="classShaderParser_1_1Expression" kindref="compound">Expression</ref>::<ref refid="classShaderParser_1_1Expression_1a68e771cf9c1584e59c0f5c5e298d3eea" kindref="member">__getName</ref>(channels[3])<sp/>+<sp/>1<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="875"><highlight class="normal"><sp/><sp/><ref refid="classShaderParser_1_1Expression_1ae3261bc8b45356c6090bd84db2508fcb" kindref="member">Expression::dump_internal</ref>(level,<sp/>tabs);</highlight></codeline>
<codeline lineno="876"><highlight class="normal"></highlight></codeline>
<codeline lineno="877"><highlight class="normal"><sp/><sp/><ref refid="classShaderParser_1_1ColorChannelExpression_1acb738bdb2f1c713407c2ca75ffa866b4" kindref="member">child</ref>-&gt;dump(level<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="878"><highlight class="normal"></highlight></codeline>
<codeline lineno="879"><highlight class="normal"><sp/><sp/>debug(</highlight><highlight class="stringliteral">&quot;%s&lt;/MultiColorChannelExpression&gt;&quot;</highlight><highlight class="normal">,<sp/>tabs);</highlight></codeline>
<codeline lineno="880"><highlight class="normal">}</highlight></codeline>
<codeline lineno="881"><highlight class="normal"></highlight></codeline>
<codeline lineno="882"><highlight class="normal"></highlight></codeline>
<codeline lineno="883"><highlight class="normal"></highlight><highlight class="comment">/*********************************</highlight></codeline>
<codeline lineno="884"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="885"><highlight class="comment"><sp/>*<sp/>class<sp/>ConstRealValue</highlight></codeline>
<codeline lineno="886"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="887"><highlight class="comment"><sp/>*********************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="888"><highlight class="normal"></highlight><highlight class="comment">//<sp/>ctor/dtor</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="889"><highlight class="normal"><ref refid="classShaderParser_1_1ConstRealValue_1a6b6828800fccb510cdbc52d8526392e4" kindref="member">ConstRealValue::ConstRealValue</ref>(Terminal<sp/>*s,<sp/>real<sp/>v)<sp/>:<sp/><ref refid="classShaderParser_1_1Expression" kindref="compound">Expression</ref>(s),<sp/>value(v)<sp/>{}</highlight></codeline>
<codeline lineno="890"><highlight class="normal"></highlight></codeline>
<codeline lineno="891"><highlight class="normal"></highlight></codeline>
<codeline lineno="892"><highlight class="normal"></highlight><highlight class="comment">//<sp/>assembly<sp/>this<sp/>expression</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="893"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classShaderParser_1_1ConstRealValue_1a11150a1ddef4090a113bb510bae6d994" kindref="member">ConstRealValue::assembleBytecode</ref>(<ref refid="namespaceShaderParser_1a732af6cbcecefe1051d9165d3718d702" kindref="member">CodeTable</ref><sp/>&amp;code,<sp/><ref refid="classRegister" kindref="compound">Register</ref><sp/>&amp;dest_reg,<sp/><ref refid="classStcodeVMRegisterAllocator" kindref="compound">StcodeVMRegisterAllocator</ref><sp/>&amp;,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>is_integer)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="894"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="895"><highlight class="normal"><sp/><sp/><ref refid="classShaderParser_1_1Expression_1a7cc153456d29d1e3e52ec2d20563b5d1" kindref="member">Expression::assembleBytecodeForConstant</ref>(code,<sp/>value,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">(dest_reg),<sp/>is_integer);</highlight></codeline>
<codeline lineno="896"><highlight class="normal">}</highlight></codeline>
<codeline lineno="897"><highlight class="normal"></highlight></codeline>
<codeline lineno="898"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classShaderParser_1_1ConstRealValue_1a278ba5a03fa343b8bbb37b86b8ac9072" kindref="member">ConstRealValue::assembleCpp</ref>(<ref refid="structStcodeExpression" kindref="compound">StcodeExpression</ref><sp/>&amp;cpp_expr,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>is_integer)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="899"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="900"><highlight class="normal"><sp/><sp/><ref refid="classShaderParser_1_1Expression_1a4037bf3eee8071bba8ab6886455769e1" kindref="member">Expression::assembleCppForConstant</ref>(cpp_expr,<sp/>value,<sp/>is_integer);</highlight></codeline>
<codeline lineno="901"><highlight class="normal">}</highlight></codeline>
<codeline lineno="902"><highlight class="normal"></highlight></codeline>
<codeline lineno="903"><highlight class="normal"></highlight></codeline>
<codeline lineno="904"><highlight class="normal"></highlight><highlight class="comment">//<sp/>set<sp/>associated<sp/>value</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="905"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classShaderParser_1_1ConstRealValue_1aeb3cee6868d60a27d051c3b8da6d4013" kindref="member">ConstRealValue::setValue</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>real<sp/>v,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>validate_nan,<sp/><ref refid="structParser" kindref="compound">Parser</ref><sp/>&amp;parser)</highlight></codeline>
<codeline lineno="906"><highlight class="normal">{</highlight></codeline>
<codeline lineno="907"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(validate_nan<sp/>&amp;&amp;<sp/>check_nan(v))</highlight></codeline>
<codeline lineno="908"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="shErrorReporting_8h_1a634f6d6ca9a9f22c5eea4c9b8e20ef31" kindref="member">report_error</ref>(parser,<sp/><ref refid="classShaderParser_1_1Expression_1a066eed5146bd48cfcc3acb30a50e9068" kindref="member">getParserSymbol</ref>(),<sp/></highlight><highlight class="stringliteral">&quot;Encountered<sp/>NAN<sp/>in<sp/>const<sp/>real<sp/>val&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="909"><highlight class="normal"></highlight></codeline>
<codeline lineno="910"><highlight class="normal"><sp/><sp/>value<sp/>=<sp/>v;</highlight></codeline>
<codeline lineno="911"><highlight class="normal">}</highlight></codeline>
<codeline lineno="912"><highlight class="normal"></highlight></codeline>
<codeline lineno="913"><highlight class="normal"></highlight></codeline>
<codeline lineno="914"><highlight class="normal"></highlight><highlight class="comment">//<sp/>get<sp/>converted<sp/>value<sp/>to<sp/>specified<sp/>type</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="915"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Color4<sp/>&amp;<ref refid="classShaderParser_1_1ConstRealValue_1a048a6444ff7ef8270d593ad96756ec20" kindref="member">ConstRealValue::getConvertedColor</ref>()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="916"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="917"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>Color4<sp/>cTemp(0,<sp/>0,<sp/>0,<sp/>0);</highlight></codeline>
<codeline lineno="918"><highlight class="normal"><sp/><sp/>cTemp.r<sp/>=<sp/>value;</highlight></codeline>
<codeline lineno="919"><highlight class="normal"><sp/><sp/>cTemp.g<sp/>=<sp/>value;</highlight></codeline>
<codeline lineno="920"><highlight class="normal"><sp/><sp/>cTemp.b<sp/>=<sp/>value;</highlight></codeline>
<codeline lineno="921"><highlight class="normal"><sp/><sp/>cTemp.a<sp/>=<sp/>value;</highlight></codeline>
<codeline lineno="922"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>cTemp;</highlight></codeline>
<codeline lineno="923"><highlight class="normal">}</highlight></codeline>
<codeline lineno="924"><highlight class="normal"></highlight></codeline>
<codeline lineno="925"><highlight class="normal"></highlight></codeline>
<codeline lineno="926"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>real<sp/><ref refid="classShaderParser_1_1ConstRealValue_1ac3012515df60c9cabbc36e173eb77aec" kindref="member">ConstRealValue::getConvertedReal</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>value;<sp/>}</highlight></codeline>
<codeline lineno="927"><highlight class="normal"></highlight></codeline>
<codeline lineno="928"><highlight class="normal"></highlight></codeline>
<codeline lineno="929"><highlight class="normal"></highlight><highlight class="comment">//<sp/>evaluate<sp/>this<sp/>expression<sp/>as<sp/>real</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="930"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classShaderParser_1_1ConstRealValue_1a1a2c9c9229d16753369a7327de7d927b" kindref="member">ConstRealValue::evaluate</ref>(real<sp/>&amp;out_value,<sp/><ref refid="structParser" kindref="compound">Parser</ref><sp/>&amp;parser)</highlight></codeline>
<codeline lineno="931"><highlight class="normal">{</highlight></codeline>
<codeline lineno="932"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>cannot<sp/>evaluate<sp/>dynamic<sp/>expressions</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="933"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classShaderParser_1_1ConstRealValue_1a773ff3e880c3c623beae143dcbc87dd6" kindref="member">isDynamic</ref>())</highlight></codeline>
<codeline lineno="934"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="935"><highlight class="normal"></highlight></codeline>
<codeline lineno="936"><highlight class="normal"><sp/><sp/>out_value<sp/>=<sp/><ref refid="classShaderParser_1_1ConstRealValue_1ac3012515df60c9cabbc36e173eb77aec" kindref="member">getConvertedReal</ref>();</highlight></codeline>
<codeline lineno="937"><highlight class="normal"></highlight></codeline>
<codeline lineno="938"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="939"><highlight class="normal">}</highlight></codeline>
<codeline lineno="940"><highlight class="normal"></highlight></codeline>
<codeline lineno="941"><highlight class="normal"></highlight><highlight class="comment">//<sp/>evaluate<sp/>this<sp/>expression<sp/>as<sp/>color4</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="942"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classShaderParser_1_1ConstRealValue_1a1a2c9c9229d16753369a7327de7d927b" kindref="member">ConstRealValue::evaluate</ref>(Color4<sp/>&amp;out_value,<sp/><ref refid="structParser" kindref="compound">Parser</ref><sp/>&amp;parser)</highlight></codeline>
<codeline lineno="943"><highlight class="normal">{</highlight></codeline>
<codeline lineno="944"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>cannot<sp/>evaluate<sp/>dynamic<sp/>expressions</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="945"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classShaderParser_1_1ConstRealValue_1a773ff3e880c3c623beae143dcbc87dd6" kindref="member">isDynamic</ref>())</highlight></codeline>
<codeline lineno="946"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="947"><highlight class="normal"></highlight></codeline>
<codeline lineno="948"><highlight class="normal"><sp/><sp/>out_value<sp/>=<sp/><ref refid="classShaderParser_1_1ConstRealValue_1a048a6444ff7ef8270d593ad96756ec20" kindref="member">getConvertedColor</ref>();</highlight></codeline>
<codeline lineno="949"><highlight class="normal"></highlight></codeline>
<codeline lineno="950"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="951"><highlight class="normal">}</highlight></codeline>
<codeline lineno="952"><highlight class="normal"></highlight></codeline>
<codeline lineno="953"><highlight class="normal"></highlight></codeline>
<codeline lineno="954"><highlight class="normal"></highlight><highlight class="comment">//<sp/>dump<sp/>to<sp/>debug</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="955"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classShaderParser_1_1ConstRealValue_1a95383f2702bc96cf6713c0b908d09a17" kindref="member">ConstRealValue::dump_internal</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>level,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*tabs)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="956"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="957"><highlight class="normal"><sp/><sp/>debug(</highlight><highlight class="stringliteral">&quot;%s&lt;ConstRealValue&gt;&quot;</highlight><highlight class="normal">,<sp/>tabs);</highlight></codeline>
<codeline lineno="958"><highlight class="normal"><sp/><sp/><ref refid="classShaderParser_1_1Expression_1ae3261bc8b45356c6090bd84db2508fcb" kindref="member">Expression::dump_internal</ref>(level,<sp/>tabs);</highlight></codeline>
<codeline lineno="959"><highlight class="normal"></highlight></codeline>
<codeline lineno="960"><highlight class="normal"><sp/><sp/>debug(</highlight><highlight class="stringliteral">&quot;%svalue=%.4f&quot;</highlight><highlight class="normal">,<sp/>tabs,<sp/>value);</highlight></codeline>
<codeline lineno="961"><highlight class="normal"></highlight></codeline>
<codeline lineno="962"><highlight class="normal"><sp/><sp/>debug(</highlight><highlight class="stringliteral">&quot;%s&lt;/ConstRealValue&gt;&quot;</highlight><highlight class="normal">,<sp/>tabs);</highlight></codeline>
<codeline lineno="963"><highlight class="normal">}</highlight></codeline>
<codeline lineno="964"><highlight class="normal"></highlight></codeline>
<codeline lineno="965"><highlight class="normal"></highlight><highlight class="comment">//<sp/>class<sp/>ConstRealValue</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="966"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="967"><highlight class="normal"></highlight></codeline>
<codeline lineno="968"><highlight class="normal"></highlight></codeline>
<codeline lineno="969"><highlight class="normal"></highlight><highlight class="comment">/*********************************</highlight></codeline>
<codeline lineno="970"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="971"><highlight class="comment"><sp/>*<sp/>class<sp/>ConstColor4Value</highlight></codeline>
<codeline lineno="972"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="973"><highlight class="comment"><sp/>*********************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="974"><highlight class="normal"></highlight><highlight class="comment">//<sp/>ctor/dtor</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="975"><highlight class="normal"><ref refid="classShaderParser_1_1ConstColor4Value_1a0f60a5644e99904605140d33e3fd1238" kindref="member">ConstColor4Value::ConstColor4Value</ref>(Terminal<sp/>*s,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Color4<sp/>&amp;v)<sp/>:<sp/><ref refid="classShaderParser_1_1Expression" kindref="compound">Expression</ref>(s),<sp/>value(v)<sp/>{}</highlight></codeline>
<codeline lineno="976"><highlight class="normal"></highlight></codeline>
<codeline lineno="977"><highlight class="normal"></highlight></codeline>
<codeline lineno="978"><highlight class="normal"></highlight><highlight class="comment">//<sp/>assembly<sp/>this<sp/>expression</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="979"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classShaderParser_1_1ConstColor4Value_1aa1746206ae1903934192be0dd811d25b" kindref="member">ConstColor4Value::assembleBytecode</ref>(<ref refid="namespaceShaderParser_1a732af6cbcecefe1051d9165d3718d702" kindref="member">CodeTable</ref><sp/>&amp;code,<sp/><ref refid="classRegister" kindref="compound">Register</ref><sp/>&amp;dest_reg,<sp/><ref refid="classStcodeVMRegisterAllocator" kindref="compound">StcodeVMRegisterAllocator</ref><sp/>&amp;,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>is_integer)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="980"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="981"><highlight class="normal"><sp/><sp/><ref refid="classShaderParser_1_1Expression_1a7cc153456d29d1e3e52ec2d20563b5d1" kindref="member">Expression::assembleBytecodeForConstant</ref>(code,<sp/>value,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">(dest_reg));</highlight></codeline>
<codeline lineno="982"><highlight class="normal">}</highlight></codeline>
<codeline lineno="983"><highlight class="normal"></highlight></codeline>
<codeline lineno="984"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classShaderParser_1_1ConstColor4Value_1ab941266415cc8ebe95c805425d8262d9" kindref="member">ConstColor4Value::assembleCpp</ref>(<ref refid="structStcodeExpression" kindref="compound">StcodeExpression</ref><sp/>&amp;cpp_expr,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>is_integer)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="985"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="986"><highlight class="normal"><sp/><sp/><ref refid="classShaderParser_1_1Expression_1a4037bf3eee8071bba8ab6886455769e1" kindref="member">Expression::assembleCppForConstant</ref>(cpp_expr,<sp/>value);</highlight></codeline>
<codeline lineno="987"><highlight class="normal">}</highlight></codeline>
<codeline lineno="988"><highlight class="normal"></highlight></codeline>
<codeline lineno="989"><highlight class="normal"></highlight></codeline>
<codeline lineno="990"><highlight class="normal"></highlight><highlight class="comment">//<sp/>set<sp/>associated<sp/>value</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="991"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classShaderParser_1_1ConstColor4Value_1a548447c0524e5854161f600fa3e14d14" kindref="member">ConstColor4Value::setValue</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Color4<sp/>&amp;v)<sp/>{<sp/>value<sp/>=<sp/>v;<sp/>}</highlight></codeline>
<codeline lineno="992"><highlight class="normal"></highlight></codeline>
<codeline lineno="993"><highlight class="normal"></highlight></codeline>
<codeline lineno="994"><highlight class="normal"></highlight><highlight class="comment">//<sp/>get<sp/>converted<sp/>value<sp/>to<sp/>specified<sp/>type</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="995"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Color4<sp/>&amp;<ref refid="classShaderParser_1_1ConstColor4Value_1abbdcfa7d83f2d7ec9eb029d7116953bf" kindref="member">ConstColor4Value::getConvertedColor</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>value;<sp/>}</highlight></codeline>
<codeline lineno="996"><highlight class="normal"></highlight></codeline>
<codeline lineno="997"><highlight class="normal"></highlight></codeline>
<codeline lineno="998"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>real<sp/><ref refid="classShaderParser_1_1ConstColor4Value_1a7be9949a391b4b3710837b281021b393" kindref="member">ConstColor4Value::getConvertedReal</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>value.r;<sp/>}</highlight></codeline>
<codeline lineno="999"><highlight class="normal"></highlight></codeline>
<codeline lineno="1000"><highlight class="normal"></highlight></codeline>
<codeline lineno="1001"><highlight class="normal"></highlight><highlight class="comment">//<sp/>evaluate<sp/>this<sp/>expression<sp/>as<sp/>real</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1002"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classShaderParser_1_1ConstColor4Value_1a5a1a2a084c350273d596e0dbcdf6c277" kindref="member">ConstColor4Value::evaluate</ref>(real<sp/>&amp;out_value,<sp/><ref refid="structParser" kindref="compound">Parser</ref><sp/>&amp;parser)</highlight></codeline>
<codeline lineno="1003"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1004"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>cannot<sp/>evaluate<sp/>dynamic<sp/>expressions</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1005"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classShaderParser_1_1ConstColor4Value_1ab3f40506560a5c0ea91be98462bf3cec" kindref="member">isDynamic</ref>())</highlight></codeline>
<codeline lineno="1006"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1007"><highlight class="normal"></highlight></codeline>
<codeline lineno="1008"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="classShaderParser_1_1Expression_1ac19dd34018b4470ad166a8ab244f981d" kindref="member">canConvert</ref>(shexpr::VT_REAL))</highlight></codeline>
<codeline lineno="1009"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1010"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="shErrorReporting_8h_1a634f6d6ca9a9f22c5eea4c9b8e20ef31" kindref="member">report_error</ref>(parser,<sp/><ref refid="classShaderParser_1_1Expression_1a066eed5146bd48cfcc3acb30a50e9068" kindref="member">getParserSymbol</ref>(),<sp/></highlight><highlight class="stringliteral">&quot;cannot<sp/>convert<sp/>from<sp/>&apos;%s&apos;<sp/>to<sp/>&apos;%s&apos;<sp/>here&quot;</highlight><highlight class="normal">,<sp/><ref refid="classShaderParser_1_1Expression_1a68e771cf9c1584e59c0f5c5e298d3eea" kindref="member">Expression::__getName</ref>(<ref refid="classShaderParser_1_1ConstColor4Value_1a8d1678e9360104a5fb81aa79ad3d8233" kindref="member">getValueType</ref>()),</highlight></codeline>
<codeline lineno="1011"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classShaderParser_1_1Expression_1a68e771cf9c1584e59c0f5c5e298d3eea" kindref="member">Expression::__getName</ref>(shexpr::VT_REAL));</highlight></codeline>
<codeline lineno="1012"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1013"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1014"><highlight class="normal"></highlight></codeline>
<codeline lineno="1015"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1016"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1017"><highlight class="normal"></highlight></codeline>
<codeline lineno="1018"><highlight class="normal"></highlight><highlight class="comment">//<sp/>evaluate<sp/>this<sp/>expression<sp/>as<sp/>color4</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1019"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classShaderParser_1_1ConstColor4Value_1a5a1a2a084c350273d596e0dbcdf6c277" kindref="member">ConstColor4Value::evaluate</ref>(Color4<sp/>&amp;out_value,<sp/><ref refid="structParser" kindref="compound">Parser</ref><sp/>&amp;parser)</highlight></codeline>
<codeline lineno="1020"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1021"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>cannot<sp/>evaluate<sp/>dynamic<sp/>expressions</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1022"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classShaderParser_1_1ConstColor4Value_1ab3f40506560a5c0ea91be98462bf3cec" kindref="member">isDynamic</ref>())</highlight></codeline>
<codeline lineno="1023"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1024"><highlight class="normal"></highlight></codeline>
<codeline lineno="1025"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="classShaderParser_1_1Expression_1ac19dd34018b4470ad166a8ab244f981d" kindref="member">canConvert</ref>(shexpr::VT_COLOR4))</highlight></codeline>
<codeline lineno="1026"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1027"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="shErrorReporting_8h_1a634f6d6ca9a9f22c5eea4c9b8e20ef31" kindref="member">report_error</ref>(parser,<sp/><ref refid="classShaderParser_1_1Expression_1a066eed5146bd48cfcc3acb30a50e9068" kindref="member">getParserSymbol</ref>(),<sp/></highlight><highlight class="stringliteral">&quot;cannot<sp/>convert<sp/>from<sp/>&apos;%s&apos;<sp/>to<sp/>&apos;%s&apos;<sp/>here&quot;</highlight><highlight class="normal">,<sp/><ref refid="classShaderParser_1_1Expression_1a68e771cf9c1584e59c0f5c5e298d3eea" kindref="member">Expression::__getName</ref>(<ref refid="classShaderParser_1_1ConstColor4Value_1a8d1678e9360104a5fb81aa79ad3d8233" kindref="member">getValueType</ref>()),</highlight></codeline>
<codeline lineno="1028"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classShaderParser_1_1Expression_1a68e771cf9c1584e59c0f5c5e298d3eea" kindref="member">Expression::__getName</ref>(shexpr::VT_COLOR4));</highlight></codeline>
<codeline lineno="1029"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1030"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1031"><highlight class="normal"></highlight></codeline>
<codeline lineno="1032"><highlight class="normal"><sp/><sp/>out_value<sp/>=<sp/><ref refid="classShaderParser_1_1ConstColor4Value_1abbdcfa7d83f2d7ec9eb029d7116953bf" kindref="member">getConvertedColor</ref>();</highlight></codeline>
<codeline lineno="1033"><highlight class="normal"></highlight></codeline>
<codeline lineno="1034"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1035"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1036"><highlight class="normal"></highlight></codeline>
<codeline lineno="1037"><highlight class="normal"></highlight></codeline>
<codeline lineno="1038"><highlight class="normal"></highlight><highlight class="comment">//<sp/>dump<sp/>to<sp/>debug</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1039"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classShaderParser_1_1ConstColor4Value_1afd93fe82e75d74af73dfdf205129567e" kindref="member">ConstColor4Value::dump_internal</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>level,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*tabs)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="1040"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1041"><highlight class="normal"><sp/><sp/>debug(</highlight><highlight class="stringliteral">&quot;%s&lt;ConstColor4Value&gt;&quot;</highlight><highlight class="normal">,<sp/>tabs);</highlight></codeline>
<codeline lineno="1042"><highlight class="normal"><sp/><sp/><ref refid="classShaderParser_1_1Expression_1ae3261bc8b45356c6090bd84db2508fcb" kindref="member">Expression::dump_internal</ref>(level,<sp/>tabs);</highlight></codeline>
<codeline lineno="1043"><highlight class="normal"></highlight></codeline>
<codeline lineno="1044"><highlight class="normal"><sp/><sp/>debug(</highlight><highlight class="stringliteral">&quot;%svalue=%.4f<sp/>%.4f<sp/>%.4f<sp/>%.4f&quot;</highlight><highlight class="normal">,<sp/>tabs,<sp/>value.r,<sp/>value.g,<sp/>value.b,<sp/>value.a);</highlight></codeline>
<codeline lineno="1045"><highlight class="normal"></highlight></codeline>
<codeline lineno="1046"><highlight class="normal"><sp/><sp/>debug(</highlight><highlight class="stringliteral">&quot;%s&lt;/ConstColor4Value&gt;&quot;</highlight><highlight class="normal">,<sp/>tabs);</highlight></codeline>
<codeline lineno="1047"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1048"><highlight class="normal"></highlight></codeline>
<codeline lineno="1049"><highlight class="normal"></highlight><highlight class="comment">//<sp/>class<sp/>ConstColor4Value</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1050"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1051"><highlight class="normal"></highlight></codeline>
<codeline lineno="1052"><highlight class="normal"></highlight></codeline>
<codeline lineno="1053"><highlight class="normal"></highlight><highlight class="comment">/*********************************</highlight></codeline>
<codeline lineno="1054"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="1055"><highlight class="comment"><sp/>*<sp/>class<sp/>ColorValueExpression</highlight></codeline>
<codeline lineno="1056"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="1057"><highlight class="comment"><sp/>*********************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1058"><highlight class="normal"></highlight><highlight class="comment">//<sp/>ctor/dtor</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1059"><highlight class="normal"><ref refid="classShaderParser_1_1ColorValueExpression_1a2c5728c4ee794735c79caa9859f8173a" kindref="member">ColorValueExpression::ColorValueExpression</ref>(Terminal<sp/>*s)<sp/>:<sp/><ref refid="classShaderParser_1_1ComplexExpression" kindref="compound">ComplexExpression</ref>(s,<sp/>shexpr::VT_COLOR4)<sp/>{<sp/>resizeOperands(4);<sp/>}</highlight></codeline>
<codeline lineno="1060"><highlight class="normal"></highlight></codeline>
<codeline lineno="1061"><highlight class="normal"></highlight><highlight class="comment">//<sp/>evaluate<sp/>this<sp/>expression<sp/>as<sp/>real</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1062"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classShaderParser_1_1ColorValueExpression_1a8d9ab9acc195ec696a74533ce4f48d00" kindref="member">ColorValueExpression::evaluate</ref>(real<sp/>&amp;out_value,<sp/><ref refid="structParser" kindref="compound">Parser</ref><sp/>&amp;parser)</highlight></codeline>
<codeline lineno="1063"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1064"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>cannot<sp/>convert<sp/>this<sp/>to<sp/>real</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1065"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1066"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1067"><highlight class="normal"></highlight></codeline>
<codeline lineno="1068"><highlight class="normal"></highlight></codeline>
<codeline lineno="1069"><highlight class="normal"></highlight><highlight class="comment">//<sp/>evaluate<sp/>this<sp/>expression<sp/>as<sp/>color4</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1070"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classShaderParser_1_1ColorValueExpression_1a8d9ab9acc195ec696a74533ce4f48d00" kindref="member">ColorValueExpression::evaluate</ref>(Color4<sp/>&amp;out_value,<sp/><ref refid="structParser" kindref="compound">Parser</ref><sp/>&amp;parser)</highlight></codeline>
<codeline lineno="1071"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1072"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>cannot<sp/>evaluate<sp/>dynamic<sp/>expressions</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1073"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classShaderParser_1_1ComplexExpression_1a16bdebae479907f7361ce4fbfaa6f05e" kindref="member">isDynamic</ref>())</highlight></codeline>
<codeline lineno="1074"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1075"><highlight class="normal"></highlight></codeline>
<codeline lineno="1076"><highlight class="normal"><sp/><sp/>G_ASSERT(<ref refid="classShaderParser_1_1ComplexExpression_1a30afe78dd5ce4f77ff127d91ca0fa9e4" kindref="member">getOperandCount</ref>()<sp/>==<sp/>4);</highlight></codeline>
<codeline lineno="1077"><highlight class="normal"><sp/><sp/>memset(&amp;out_value,<sp/>0,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(out_value));</highlight></codeline>
<codeline lineno="1078"><highlight class="normal"></highlight></codeline>
<codeline lineno="1079"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>try<sp/>to<sp/>evaluate</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1080"><highlight class="normal"><sp/><sp/>G_ASSERT(<ref refid="classShaderParser_1_1ComplexExpression_1a09025279d6667970b8562d9b5f35cabf" kindref="member">getOperand</ref>(shexpr::OperandType(0)));</highlight></codeline>
<codeline lineno="1081"><highlight class="normal"><sp/><sp/>G_ASSERT(<ref refid="classShaderParser_1_1ComplexExpression_1a09025279d6667970b8562d9b5f35cabf" kindref="member">getOperand</ref>(shexpr::OperandType(1)));</highlight></codeline>
<codeline lineno="1082"><highlight class="normal"><sp/><sp/>G_ASSERT(<ref refid="classShaderParser_1_1ComplexExpression_1a09025279d6667970b8562d9b5f35cabf" kindref="member">getOperand</ref>(shexpr::OperandType(2)));</highlight></codeline>
<codeline lineno="1083"><highlight class="normal"><sp/><sp/>G_ASSERT(<ref refid="classShaderParser_1_1ComplexExpression_1a09025279d6667970b8562d9b5f35cabf" kindref="member">getOperand</ref>(shexpr::OperandType(3)));</highlight></codeline>
<codeline lineno="1084"><highlight class="normal"></highlight></codeline>
<codeline lineno="1085"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="classShaderParser_1_1ComplexExpression_1a09025279d6667970b8562d9b5f35cabf" kindref="member">getOperand</ref>(shexpr::OperandType(0))-&gt;<ref refid="classShaderParser_1_1ColorValueExpression_1a8d9ab9acc195ec696a74533ce4f48d00" kindref="member">evaluate</ref>(out_value.r,<sp/>parser))</highlight></codeline>
<codeline lineno="1086"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1087"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="classShaderParser_1_1ComplexExpression_1a09025279d6667970b8562d9b5f35cabf" kindref="member">getOperand</ref>(shexpr::OperandType(1))-&gt;<ref refid="classShaderParser_1_1ColorValueExpression_1a8d9ab9acc195ec696a74533ce4f48d00" kindref="member">evaluate</ref>(out_value.g,<sp/>parser))</highlight></codeline>
<codeline lineno="1088"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1089"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="classShaderParser_1_1ComplexExpression_1a09025279d6667970b8562d9b5f35cabf" kindref="member">getOperand</ref>(shexpr::OperandType(2))-&gt;<ref refid="classShaderParser_1_1ColorValueExpression_1a8d9ab9acc195ec696a74533ce4f48d00" kindref="member">evaluate</ref>(out_value.b,<sp/>parser))</highlight></codeline>
<codeline lineno="1090"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1091"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="classShaderParser_1_1ComplexExpression_1a09025279d6667970b8562d9b5f35cabf" kindref="member">getOperand</ref>(shexpr::OperandType(3))-&gt;<ref refid="classShaderParser_1_1ColorValueExpression_1a8d9ab9acc195ec696a74533ce4f48d00" kindref="member">evaluate</ref>(out_value.a,<sp/>parser))</highlight></codeline>
<codeline lineno="1092"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1093"><highlight class="normal"></highlight></codeline>
<codeline lineno="1094"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classShaderParser_1_1Expression_1a8941f97eca15c43e1ecd37d5c7dc3caf" kindref="member">Expression::evaluate</ref>(out_value,<sp/>parser);</highlight></codeline>
<codeline lineno="1095"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1096"><highlight class="normal"></highlight></codeline>
<codeline lineno="1097"><highlight class="normal"></highlight></codeline>
<codeline lineno="1098"><highlight class="normal"></highlight><highlight class="comment">//<sp/>dump<sp/>to<sp/>debug</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1099"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classShaderParser_1_1ColorValueExpression_1aadf77bd6e16d8c776718a43881fe900f" kindref="member">ColorValueExpression::dump_internal</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>level,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*tabs)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="1100"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1101"><highlight class="normal"><sp/><sp/>debug(</highlight><highlight class="stringliteral">&quot;%s&lt;ColorValueExpression&gt;&quot;</highlight><highlight class="normal">,<sp/>tabs);</highlight></codeline>
<codeline lineno="1102"><highlight class="normal"><sp/><sp/><ref refid="classShaderParser_1_1ComplexExpression_1a297558e23345f9282e9d9b75ac44ecf2" kindref="member">ComplexExpression::dump_internal</ref>(level,<sp/>tabs);</highlight></codeline>
<codeline lineno="1103"><highlight class="normal"></highlight></codeline>
<codeline lineno="1104"><highlight class="normal"><sp/><sp/>debug(</highlight><highlight class="stringliteral">&quot;%s&lt;/ColorValueExpression&gt;&quot;</highlight><highlight class="normal">,<sp/>tabs);</highlight></codeline>
<codeline lineno="1105"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1106"><highlight class="normal"></highlight></codeline>
<codeline lineno="1107"><highlight class="normal"></highlight></codeline>
<codeline lineno="1108"><highlight class="normal"></highlight><highlight class="comment">//<sp/>assembly<sp/>this<sp/>expression</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1109"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classShaderParser_1_1ColorValueExpression_1ac70c52bfd10fc141e39585dc74e7c5ac" kindref="member">ColorValueExpression::assembleBytecode</ref>(<ref refid="namespaceShaderParser_1a732af6cbcecefe1051d9165d3718d702" kindref="member">CodeTable</ref><sp/>&amp;code,<sp/><ref refid="classRegister" kindref="compound">Register</ref><sp/>&amp;dest_reg,<sp/><ref refid="classStcodeVMRegisterAllocator" kindref="compound">StcodeVMRegisterAllocator</ref><sp/>&amp;reg_allocator,</highlight></codeline>
<codeline lineno="1110"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>is_integer)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="1111"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1112"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>assembly<sp/>operands</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1113"><highlight class="normal"><sp/><sp/>eastl::vector&lt;Register&gt;<sp/>opRegs;</highlight></codeline>
<codeline lineno="1114"><highlight class="normal"><sp/><sp/>opRegs.reserve(<ref refid="classShaderParser_1_1ComplexExpression_1a30afe78dd5ce4f77ff127d91ca0fa9e4" kindref="member">getOperandCount</ref>());</highlight></codeline>
<codeline lineno="1115"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/><ref refid="classShaderParser_1_1ComplexExpression_1a30afe78dd5ce4f77ff127d91ca0fa9e4" kindref="member">getOperandCount</ref>();<sp/>i++)</highlight></codeline>
<codeline lineno="1116"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1117"><highlight class="normal"><sp/><sp/><sp/><sp/>opRegs.emplace_back(reg_allocator.<ref refid="classStcodeVMRegisterAllocator_1a55a7368910369fb2ef50ba11675650be" kindref="member">add_reg</ref>());</highlight></codeline>
<codeline lineno="1118"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classShaderParser_1_1ComplexExpression_1a09025279d6667970b8562d9b5f35cabf" kindref="member">getOperand</ref>(shexpr::OperandType(i))-&gt;<ref refid="classShaderParser_1_1Expression_1adf4dc5757229bb9e7a7d50d3cc6d82f0" kindref="member">assembleBytecode</ref>(code,<sp/>opRegs[i],<sp/>reg_allocator,<sp/>is_integer);</highlight></codeline>
<codeline lineno="1119"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1120"><highlight class="normal"></highlight></codeline>
<codeline lineno="1121"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>make<sp/>vector</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1122"><highlight class="normal"><sp/><sp/>code.push_back(shaderopcode::makeOp3(SHCOD_MAKE_VEC,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">(dest_reg),<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">(opRegs[0]),<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">(opRegs[1])));</highlight></codeline>
<codeline lineno="1123"><highlight class="normal"><sp/><sp/>code.push_back(shaderopcode::makeData2(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">(opRegs[2]),<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">(opRegs[3])));</highlight></codeline>
<codeline lineno="1124"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1125"><highlight class="normal"></highlight></codeline>
<codeline lineno="1126"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classShaderParser_1_1ColorValueExpression_1a1116216acf29e6a77e5d620129a933e2" kindref="member">ColorValueExpression::assembleCpp</ref>(<ref refid="structStcodeExpression" kindref="compound">StcodeExpression</ref><sp/>&amp;cpp_expr,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>is_integer)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="1127"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1128"><highlight class="normal"><sp/><sp/>cpp_expr.<ref refid="structStcodeExpression_1a8b51ba11b686a94c48b82ece54692900" kindref="member">specifyNextExprElement</ref>(<ref refid="structStcodeExpression_1aaccadc8df002bf4a50f3700badd92c59ab25f998178cd8c758b196d11f2684c86" kindref="member">StcodeExpression::ElementType::COLORVAL</ref>,<sp/>is_integer<sp/>?<sp/></highlight><highlight class="stringliteral">&quot;int&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;float&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1129"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/><ref refid="classShaderParser_1_1ComplexExpression_1a30afe78dd5ce4f77ff127d91ca0fa9e4" kindref="member">getOperandCount</ref>();<sp/>i++)</highlight></codeline>
<codeline lineno="1130"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classShaderParser_1_1ComplexExpression_1a09025279d6667970b8562d9b5f35cabf" kindref="member">getOperand</ref>(shexpr::OperandType(i))-&gt;<ref refid="classShaderParser_1_1ColorValueExpression_1a1116216acf29e6a77e5d620129a933e2" kindref="member">assembleCpp</ref>(cpp_expr,<sp/>is_integer);</highlight></codeline>
<codeline lineno="1131"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1132"><highlight class="normal"></highlight></codeline>
<codeline lineno="1133"><highlight class="normal"></highlight></codeline>
<codeline lineno="1134"><highlight class="normal"></highlight><highlight class="comment">//<sp/>evaluate<sp/>all<sp/>avalible<sp/>branches;<sp/>return<sp/>false<sp/>if<sp/>error<sp/>occuried</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1135"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classShaderParser_1_1ColorValueExpression_1ad0f1cead895d0beb20ce067ff2597b8b" kindref="member">ColorValueExpression::collapseNumbers</ref>(<ref refid="structParser" kindref="compound">Parser</ref><sp/>&amp;parser)</highlight></codeline>
<codeline lineno="1136"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1137"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/><ref refid="classShaderParser_1_1ComplexExpression_1a30afe78dd5ce4f77ff127d91ca0fa9e4" kindref="member">getOperandCount</ref>();<sp/>i++)</highlight></codeline>
<codeline lineno="1138"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1139"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>operator<sp/>is<sp/>constant,<sp/>calculate<sp/>it<sp/>now</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1140"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classShaderParser_1_1Expression" kindref="compound">Expression</ref><sp/>*op<sp/>=<sp/><ref refid="classShaderParser_1_1ComplexExpression_1a09025279d6667970b8562d9b5f35cabf" kindref="member">getOperand</ref>(shexpr::OperandType(i));</highlight></codeline>
<codeline lineno="1141"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(op-&gt;<ref refid="classShaderParser_1_1Expression_1a5cd845a298cd30bc29c1d6176d90d7a5" kindref="member">isConst</ref>())</highlight></codeline>
<codeline lineno="1142"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>real<sp/>v;</highlight></codeline>
<codeline lineno="1144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>calc<sp/>real</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(op-&gt;<ref refid="classShaderParser_1_1Expression_1a8941f97eca15c43e1ecd37d5c7dc3caf" kindref="member">evaluate</ref>(v,<sp/>parser))</highlight></codeline>
<codeline lineno="1146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>replace<sp/>with<sp/>constant<sp/>real<sp/>value</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Terminal<sp/>*t<sp/>=<sp/>op-&gt;<ref refid="classShaderParser_1_1Expression_1a63e9f75ae1b742c5ffcbd7aa65b1963a" kindref="member">getTerminal</ref>();</highlight></codeline>
<codeline lineno="1149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>op;</highlight></codeline>
<codeline lineno="1150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classShaderParser_1_1ComplexExpression_1a1cfcdaf2ee0204346bde3a7961720734" kindref="member">setOperand</ref>(shexpr::OperandType(i),<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="classShaderParser_1_1ConstRealValue" kindref="compound">ConstRealValue</ref>(t,<sp/>v));</highlight></codeline>
<codeline lineno="1151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1152"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1153"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1154"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!op-&gt;<ref refid="classShaderParser_1_1Expression_1a6504a6f642f08f1cf420bebda197efaf" kindref="member">collapseNumbers</ref>(parser))</highlight></codeline>
<codeline lineno="1156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1157"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1158"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1159"><highlight class="normal"></highlight></codeline>
<codeline lineno="1160"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1161"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1162"><highlight class="normal"></highlight></codeline>
<codeline lineno="1163"><highlight class="normal"></highlight><highlight class="comment">//<sp/>class<sp/>ColorValueExpression</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1164"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1165"><highlight class="normal"></highlight></codeline>
<codeline lineno="1166"><highlight class="normal"></highlight></codeline>
<codeline lineno="1167"><highlight class="normal"></highlight><highlight class="comment">/*********************************</highlight></codeline>
<codeline lineno="1168"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="1169"><highlight class="comment"><sp/>*<sp/>class<sp/>LVarValueExpression</highlight></codeline>
<codeline lineno="1170"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="1171"><highlight class="comment"><sp/>*********************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1172"><highlight class="normal"></highlight><highlight class="comment">//<sp/>ctor/dtor</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1173"><highlight class="normal"><ref refid="classShaderParser_1_1LVarValueExpression_1abd77075af3d375b0293a121f2d86b62d" kindref="member">LVarValueExpression::LVarValueExpression</ref>(Terminal<sp/>*s,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structLocalVar" kindref="compound">LocalVar</ref><sp/>&amp;_var)<sp/>:<sp/><ref refid="classShaderParser_1_1Expression" kindref="compound">Expression</ref>(s),<sp/>var(_var)<sp/>{<sp/>G_ASSERT(!var.isConst);<sp/>}</highlight></codeline>
<codeline lineno="1174"><highlight class="normal"></highlight></codeline>
<codeline lineno="1175"><highlight class="normal"></highlight></codeline>
<codeline lineno="1176"><highlight class="normal"></highlight><highlight class="comment">//<sp/>assembly<sp/>this<sp/>expression</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1177"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classShaderParser_1_1LVarValueExpression_1a8db294081e3dfc8d66e0d4c042066fd7" kindref="member">LVarValueExpression::assembleBytecode</ref>(<ref refid="namespaceShaderParser_1a732af6cbcecefe1051d9165d3718d702" kindref="member">CodeTable</ref><sp/>&amp;code,<sp/><ref refid="classRegister" kindref="compound">Register</ref><sp/>&amp;dest_reg,<sp/><ref refid="classStcodeVMRegisterAllocator" kindref="compound">StcodeVMRegisterAllocator</ref><sp/>&amp;reg_allocator,</highlight></codeline>
<codeline lineno="1178"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>is_integer)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="1179"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1180"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>add<sp/>reference<sp/>to<sp/>local<sp/>variable</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1181"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cod;</highlight></codeline>
<codeline lineno="1182"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(var.<ref refid="structLocalVar_1a28b868de52e6d5b3210f360b46d6bda7" kindref="member">valueType</ref><sp/>==<sp/>shexpr::VT_REAL)</highlight></codeline>
<codeline lineno="1183"><highlight class="normal"><sp/><sp/><sp/><sp/>cod<sp/>=<sp/>SHCOD_COPY_REAL;</highlight></codeline>
<codeline lineno="1184"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(var.<ref refid="structLocalVar_1a28b868de52e6d5b3210f360b46d6bda7" kindref="member">valueType</ref><sp/>==<sp/>shexpr::VT_COLOR4)</highlight></codeline>
<codeline lineno="1185"><highlight class="normal"><sp/><sp/><sp/><sp/>cod<sp/>=<sp/>SHCOD_COPY_VEC;</highlight></codeline>
<codeline lineno="1186"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1187"><highlight class="normal"><sp/><sp/><sp/><sp/>G_ASSERT(0);</highlight></codeline>
<codeline lineno="1188"><highlight class="normal"></highlight></codeline>
<codeline lineno="1189"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classShaderParser_1_1Expression_1a1ab07814f1b27a6786d043da4e080c44" kindref="member">getUnaryOperator</ref>()<sp/>==<sp/>shexpr::UOP_NEGATIVE)</highlight></codeline>
<codeline lineno="1190"><highlight class="normal"><sp/><sp/><sp/><sp/>code.push_back(shaderopcode::makeOp2(cod,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">(dest_reg),<sp/>var.<ref refid="structLocalVar_1acd4a3827cb48e24fa4d52e69f2a12ede" kindref="member">reg</ref>));</highlight></codeline>
<codeline lineno="1191"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1192"><highlight class="normal"><sp/><sp/><sp/><sp/>dest_reg.<ref refid="classRegister_1a72ee810e60f2375750a0f1af06e851bf" kindref="member">reset</ref>(var.<ref refid="structLocalVar_1acd4a3827cb48e24fa4d52e69f2a12ede" kindref="member">reg</ref>,<sp/>var.<ref refid="structLocalVar_1a28b868de52e6d5b3210f360b46d6bda7" kindref="member">valueType</ref><sp/>==<sp/>shexpr::VT_COLOR4<sp/>?<sp/>4<sp/>:<sp/>1);</highlight></codeline>
<codeline lineno="1193"><highlight class="normal"></highlight></codeline>
<codeline lineno="1194"><highlight class="normal"><sp/><sp/><ref refid="classShaderParser_1_1Expression_1adf4dc5757229bb9e7a7d50d3cc6d82f0" kindref="member">Expression::assembleBytecode</ref>(code,<sp/>dest_reg,<sp/>reg_allocator,<sp/>is_integer);</highlight></codeline>
<codeline lineno="1195"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1196"><highlight class="normal"></highlight></codeline>
<codeline lineno="1197"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classShaderParser_1_1LVarValueExpression_1a8e477ea0da64c00d95bdf925c9d42d64" kindref="member">LVarValueExpression::assembleCpp</ref>(<ref refid="structStcodeExpression" kindref="compound">StcodeExpression</ref><sp/>&amp;cpp_expr,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>is_integer)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="1198"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1199"><highlight class="normal"><sp/><sp/>cpp_expr.<ref refid="structStcodeExpression_1a8b51ba11b686a94c48b82ece54692900" kindref="member">specifyNextExprElement</ref>(<ref refid="structStcodeExpression_1aaccadc8df002bf4a50f3700badd92c59a39c2c52380c55eebeef3660ad99c19e8" kindref="member">StcodeExpression::ElementType::LOCVAR</ref>,<sp/><ref refid="classShaderParser_1_1LVarValueExpression_1a4fa703c29696a8451f705b613b34c9c8" kindref="member">getTerminal</ref>()-&gt;text);</highlight></codeline>
<codeline lineno="1200"><highlight class="normal"><sp/><sp/><ref refid="classShaderParser_1_1Expression_1a9487371df0a50670438cc4343d06cdb2" kindref="member">Expression::assembleCpp</ref>(cpp_expr,<sp/>is_integer);</highlight></codeline>
<codeline lineno="1201"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1202"><highlight class="normal"></highlight></codeline>
<codeline lineno="1203"><highlight class="normal"></highlight></codeline>
<codeline lineno="1204"><highlight class="normal"></highlight><highlight class="comment">//<sp/>check<sp/>convertion<sp/>-<sp/>if<sp/>fail,<sp/>report<sp/>error<sp/>&amp;<sp/>return<sp/>false</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1205"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classShaderParser_1_1LVarValueExpression_1a0f49a4d29619519ebc68f81492f9d1c3" kindref="member">LVarValueExpression::canConvert</ref>(shexpr::ValueType<sp/>vt)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="1206"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1207"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(vt<sp/>==<sp/>var.<ref refid="structLocalVar_1a28b868de52e6d5b3210f360b46d6bda7" kindref="member">valueType</ref>)<sp/>||<sp/>(vt<sp/>==<sp/>shexpr::VT_COLOR4<sp/>&amp;&amp;<sp/>var.<ref refid="structLocalVar_1a28b868de52e6d5b3210f360b46d6bda7" kindref="member">valueType</ref><sp/>==<sp/>shexpr::VT_REAL);</highlight></codeline>
<codeline lineno="1208"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1209"><highlight class="normal"></highlight></codeline>
<codeline lineno="1210"><highlight class="normal"></highlight></codeline>
<codeline lineno="1211"><highlight class="normal"></highlight><highlight class="comment">//<sp/>evaluate<sp/>this<sp/>expression<sp/>as<sp/>real</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1212"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classShaderParser_1_1LVarValueExpression_1a2e94316249c1db7d1427118a3c6f14ee" kindref="member">LVarValueExpression::evaluate</ref>(real<sp/>&amp;out_value,<sp/><ref refid="structParser" kindref="compound">Parser</ref><sp/>&amp;parser)</highlight></codeline>
<codeline lineno="1213"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1214"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>only<sp/>static<sp/>or<sp/>dynamic<sp/>expressions<sp/>are<sp/>allowed<sp/>in<sp/>this<sp/>variables</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1215"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1216"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1217"><highlight class="normal"></highlight></codeline>
<codeline lineno="1218"><highlight class="normal"></highlight></codeline>
<codeline lineno="1219"><highlight class="normal"></highlight><highlight class="comment">//<sp/>evaluate<sp/>this<sp/>expression<sp/>as<sp/>color4</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1220"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classShaderParser_1_1LVarValueExpression_1a2e94316249c1db7d1427118a3c6f14ee" kindref="member">LVarValueExpression::evaluate</ref>(Color4<sp/>&amp;out_value,<sp/><ref refid="structParser" kindref="compound">Parser</ref><sp/>&amp;parser)</highlight></codeline>
<codeline lineno="1221"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1222"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>only<sp/>static<sp/>or<sp/>dynamic<sp/>expressions<sp/>are<sp/>allowed<sp/>in<sp/>this<sp/>variables</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1223"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1224"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1225"><highlight class="normal"></highlight></codeline>
<codeline lineno="1226"><highlight class="normal"></highlight><highlight class="comment">//<sp/>dump<sp/>to<sp/>debug</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1227"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classShaderParser_1_1LVarValueExpression_1ae89787d21775ed39ad324ed43b63ea2b" kindref="member">LVarValueExpression::dump_internal</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>level,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*tabs)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="1228"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1229"><highlight class="normal"><sp/><sp/>debug(</highlight><highlight class="stringliteral">&quot;%s&lt;LVarValueExpression&gt;&quot;</highlight><highlight class="normal">,<sp/>tabs);</highlight></codeline>
<codeline lineno="1230"><highlight class="normal"><sp/><sp/><ref refid="classShaderParser_1_1Expression_1ae3261bc8b45356c6090bd84db2508fcb" kindref="member">Expression::dump_internal</ref>(level,<sp/>tabs);</highlight></codeline>
<codeline lineno="1231"><highlight class="normal"></highlight></codeline>
<codeline lineno="1232"><highlight class="normal"><sp/><sp/>debug(</highlight><highlight class="stringliteral">&quot;%s&lt;/LVarValueExpression&gt;&quot;</highlight><highlight class="normal">,<sp/>tabs);</highlight></codeline>
<codeline lineno="1233"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1234"><highlight class="normal"></highlight></codeline>
<codeline lineno="1235"><highlight class="normal"></highlight><highlight class="comment">//<sp/>return<sp/>value<sp/>type</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1236"><highlight class="normal">shexpr::ValueType<sp/><ref refid="classShaderParser_1_1LVarValueExpression_1abddd6c7a42162921b169c2d5c57485be" kindref="member">LVarValueExpression::getValueType</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>var.<ref refid="structLocalVar_1a28b868de52e6d5b3210f360b46d6bda7" kindref="member">valueType</ref>;<sp/>}</highlight></codeline>
<codeline lineno="1237"><highlight class="normal"></highlight></codeline>
<codeline lineno="1238"><highlight class="normal"></highlight></codeline>
<codeline lineno="1239"><highlight class="normal"></highlight><highlight class="comment">//<sp/>return<sp/>true,<sp/>if<sp/>expression<sp/>has<sp/>only<sp/>numeric<sp/>constants<sp/>and<sp/>constant<sp/>local<sp/>variables</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1240"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classShaderParser_1_1LVarValueExpression_1a00f0120434dc1f9136cec143b8d9118c" kindref="member">LVarValueExpression::isConst</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>var.<ref refid="structLocalVar_1a731b1f0d5e66eb5ed728d819a1a5d865" kindref="member">isConst</ref>;<sp/>}</highlight></codeline>
<codeline lineno="1241"><highlight class="normal"></highlight></codeline>
<codeline lineno="1242"><highlight class="normal"></highlight><highlight class="comment">//<sp/>return<sp/>true,<sp/>if<sp/>expression<sp/>-<sp/>is<sp/>a<sp/>dynamic<sp/>expression</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1243"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classShaderParser_1_1LVarValueExpression_1a931670ebd73affa517160b77c98bbe6c" kindref="member">LVarValueExpression::isDynamic</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>var.<ref refid="structLocalVar_1a7a0249249c8dd30526a3c30be6eec341" kindref="member">isDynamic</ref>;<sp/>}</highlight></codeline>
<codeline lineno="1244"><highlight class="normal"></highlight></codeline>
<codeline lineno="1245"><highlight class="normal">Symbol<sp/>*<ref refid="classShaderParser_1_1LVarValueExpression_1aebd84483be176f31106ba922d3ae5fd0" kindref="member">LVarValueExpression::hasDynamicAndMaterialTermsAt</ref>()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="1246"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1247"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>var.<ref refid="structLocalVar_1ab060992b4cae3092ad7c90185875aec2" kindref="member">dependsOnDynVarsAndMaterialParams</ref><sp/>?<sp/><ref refid="classShaderParser_1_1Expression_1a066eed5146bd48cfcc3acb30a50e9068" kindref="member">getParserSymbol</ref>()<sp/>:<sp/>nullptr;</highlight></codeline>
<codeline lineno="1248"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1249"><highlight class="normal"></highlight></codeline>
<codeline lineno="1250"><highlight class="normal"></highlight><highlight class="comment">//<sp/>class<sp/>LVarValueExpression</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1251"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1252"><highlight class="normal"></highlight></codeline>
<codeline lineno="1253"><highlight class="normal"></highlight></codeline>
<codeline lineno="1254"><highlight class="normal"></highlight><highlight class="comment">/*********************************</highlight></codeline>
<codeline lineno="1255"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="1256"><highlight class="comment"><sp/>*<sp/>class<sp/>StVarValueExpression</highlight></codeline>
<codeline lineno="1257"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="1258"><highlight class="comment"><sp/>*********************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1259"><highlight class="normal"></highlight><highlight class="comment">//<sp/>ctor/dtor</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1260"><highlight class="normal"><ref refid="classShaderParser_1_1StVarValueExpression_1af7c67db1d336641f686a2359847aef09" kindref="member">StVarValueExpression::StVarValueExpression</ref>(Terminal<sp/>*s,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>var_id,<sp/>shexpr::ValueType<sp/>vt,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>is_dynamic,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>is_global,</highlight></codeline>
<codeline lineno="1261"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>is_int)<sp/>:</highlight></codeline>
<codeline lineno="1262"><highlight class="normal"><sp/><sp/><ref refid="classShaderParser_1_1Expression" kindref="compound">Expression</ref>(s),<sp/>varId(var_id),<sp/>valueType(vt),<sp/>isDynamicFlag(is_dynamic),<sp/>isGlobalFlag(is_global),<sp/>isInteger(is_int)</highlight></codeline>
<codeline lineno="1263"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1264"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(isGlobalFlag)</highlight></codeline>
<codeline lineno="1265"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1266"><highlight class="normal"><sp/><sp/><sp/><sp/>G_ASSERT(isDynamicFlag<sp/>==<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1267"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1268"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1269"><highlight class="normal"></highlight></codeline>
<codeline lineno="1270"><highlight class="normal"></highlight></codeline>
<codeline lineno="1271"><highlight class="normal"><ref refid="classShaderParser_1_1StVarValueExpression_1a2eb317f90ea45e38ad4b37606ee7d62c" kindref="member">StVarValueExpression::~StVarValueExpression</ref>()<sp/>{}</highlight></codeline>
<codeline lineno="1272"><highlight class="normal"></highlight></codeline>
<codeline lineno="1273"><highlight class="normal"></highlight></codeline>
<codeline lineno="1274"><highlight class="normal"></highlight><highlight class="comment">//<sp/>assembly<sp/>this<sp/>expression</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1275"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classShaderParser_1_1StVarValueExpression_1aec6340a071ff4cce2b0962644738384b" kindref="member">StVarValueExpression::assembleBytecode</ref>(<ref refid="namespaceShaderParser_1a732af6cbcecefe1051d9165d3718d702" kindref="member">CodeTable</ref><sp/>&amp;code,<sp/><ref refid="classRegister" kindref="compound">Register</ref><sp/>&amp;dest_reg,<sp/><ref refid="classStcodeVMRegisterAllocator" kindref="compound">StcodeVMRegisterAllocator</ref><sp/>&amp;reg_allocator,</highlight></codeline>
<codeline lineno="1276"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>is_integer)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="1277"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1278"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>convertIntToFloat<sp/>=<sp/>!is_integer<sp/>&amp;&amp;<sp/>isInteger;<sp/></highlight><highlight class="comment">//<sp/>expr<sp/>is<sp/>float<sp/>type,<sp/>var<sp/>is<sp/>integer<sp/>type</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1279"><highlight class="normal"></highlight></codeline>
<codeline lineno="1280"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cod;</highlight></codeline>
<codeline lineno="1281"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(isGlobalFlag)</highlight></codeline>
<codeline lineno="1282"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1283"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>add<sp/>reference<sp/>to<sp/>global<sp/>variable</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1284"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(valueType<sp/>==<sp/>shexpr::VT_REAL)</highlight></codeline>
<codeline lineno="1285"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1286"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(is_integer)</highlight></codeline>
<codeline lineno="1287"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cod<sp/>=<sp/>SHCOD_GET_GINT;</highlight></codeline>
<codeline lineno="1288"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1289"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cod<sp/>=<sp/>convertIntToFloat<sp/>?<sp/>SHCOD_GET_GINT_TOREAL<sp/>:<sp/>SHCOD_GET_GREAL;</highlight></codeline>
<codeline lineno="1290"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1291"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(valueType<sp/>==<sp/>shexpr::VT_COLOR4)</highlight></codeline>
<codeline lineno="1292"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1293"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(convertIntToFloat)</highlight></codeline>
<codeline lineno="1294"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cod<sp/>=<sp/>SHCOD_GET_GIVEC_TOREAL;</highlight></codeline>
<codeline lineno="1295"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1296"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cod<sp/>=<sp/>SHCOD_GET_GVEC;</highlight></codeline>
<codeline lineno="1297"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1298"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(valueType<sp/>==<sp/>shexpr::VT_TEXTURE)</highlight></codeline>
<codeline lineno="1299"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cod<sp/>=<sp/>SHCOD_GET_GTEX;</highlight></codeline>
<codeline lineno="1300"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(valueType<sp/>==<sp/>shexpr::VT_BUFFER)</highlight></codeline>
<codeline lineno="1301"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cod<sp/>=<sp/>SHCOD_GET_GBUF;</highlight></codeline>
<codeline lineno="1302"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1303"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>G_ASSERT(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1304"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1305"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1306"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1307"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>add<sp/>reference<sp/>to<sp/>local<sp/>variable</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1308"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(valueType<sp/>==<sp/>shexpr::VT_REAL)</highlight></codeline>
<codeline lineno="1309"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1310"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(is_integer)</highlight></codeline>
<codeline lineno="1311"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cod<sp/>=<sp/>SHCOD_GET_INT;</highlight></codeline>
<codeline lineno="1312"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1313"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cod<sp/>=<sp/>convertIntToFloat<sp/>?<sp/>SHCOD_GET_INT_TOREAL<sp/>:<sp/>SHCOD_GET_REAL;</highlight></codeline>
<codeline lineno="1314"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1315"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(valueType<sp/>==<sp/>shexpr::VT_COLOR4)</highlight></codeline>
<codeline lineno="1316"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1317"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(convertIntToFloat)</highlight></codeline>
<codeline lineno="1318"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cod<sp/>=<sp/>SHCOD_GET_IVEC_TOREAL;</highlight></codeline>
<codeline lineno="1319"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1320"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cod<sp/>=<sp/>SHCOD_GET_VEC;</highlight></codeline>
<codeline lineno="1321"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1322"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1323"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>G_ASSERT(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1324"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1325"><highlight class="normal"></highlight></codeline>
<codeline lineno="1326"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>existingReg<sp/>=<sp/>reg_allocator.<ref refid="classStcodeVMRegisterAllocator_1a7fc0a41ce5982f0fe92084e607f05ae3" kindref="member">registerStvarGetter</ref>(varId,<sp/>cod,<sp/>dest_reg))</highlight></codeline>
<codeline lineno="1327"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1328"><highlight class="normal"><sp/><sp/><sp/><sp/>dest_reg<sp/>=<sp/>*existingReg;</highlight></codeline>
<codeline lineno="1329"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1330"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1331"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1332"><highlight class="normal"><sp/><sp/><sp/><sp/>code.push_back(shaderopcode::makeOp2(cod,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">(dest_reg),<sp/>varId));</highlight></codeline>
<codeline lineno="1333"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1334"><highlight class="normal"></highlight></codeline>
<codeline lineno="1335"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classShaderParser_1_1Expression_1a1ab07814f1b27a6786d043da4e080c44" kindref="member">getUnaryOperator</ref>()<sp/>==<sp/>shexpr::UOP_NEGATIVE)</highlight></codeline>
<codeline lineno="1336"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1337"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classShaderParser_1_1StVarValueExpression_1a9f996d2995866eb138d273fa85f95019" kindref="member">getValueType</ref>()<sp/>==<sp/>shexpr::VT_REAL)</highlight></codeline>
<codeline lineno="1338"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cod<sp/>=<sp/>SHCOD_COPY_REAL;</highlight></codeline>
<codeline lineno="1339"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classShaderParser_1_1StVarValueExpression_1a9f996d2995866eb138d273fa85f95019" kindref="member">getValueType</ref>()<sp/>==<sp/>shexpr::VT_COLOR4)</highlight></codeline>
<codeline lineno="1340"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cod<sp/>=<sp/>SHCOD_COPY_VEC;</highlight></codeline>
<codeline lineno="1341"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1342"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>G_ASSERT(0);</highlight></codeline>
<codeline lineno="1343"><highlight class="normal"></highlight></codeline>
<codeline lineno="1344"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classRegister" kindref="compound">Register</ref><sp/>copy_reg<sp/>=<sp/><ref refid="classShaderParser_1_1Expression_1a77ed6f7aab61c1f6367d6c1f5fcfdbb1" kindref="member">allocateRegForResult</ref>(reg_allocator);</highlight></codeline>
<codeline lineno="1345"><highlight class="normal"><sp/><sp/><sp/><sp/>code.push_back(shaderopcode::makeOp2(cod,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">(copy_reg),<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">(dest_reg)));</highlight></codeline>
<codeline lineno="1346"><highlight class="normal"><sp/><sp/><sp/><sp/>dest_reg<sp/>=<sp/>eastl::move(copy_reg);</highlight></codeline>
<codeline lineno="1347"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1348"><highlight class="normal"></highlight></codeline>
<codeline lineno="1349"><highlight class="normal"><sp/><sp/><ref refid="classShaderParser_1_1Expression_1adf4dc5757229bb9e7a7d50d3cc6d82f0" kindref="member">Expression::assembleBytecode</ref>(code,<sp/>dest_reg,<sp/>reg_allocator,<sp/>is_integer);</highlight></codeline>
<codeline lineno="1350"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1351"><highlight class="normal"></highlight></codeline>
<codeline lineno="1352"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classShaderParser_1_1StVarValueExpression_1a4a7bf1ddd4f8f4cb3cf5e63d6b9a6e7b" kindref="member">StVarValueExpression::assembleCpp</ref>(<ref refid="structStcodeExpression" kindref="compound">StcodeExpression</ref><sp/>&amp;cpp_expr,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>is_integer)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="1353"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1354"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>convertIntToFloat<sp/>=<sp/>!is_integer<sp/>&amp;&amp;<sp/>isInteger;<sp/></highlight><highlight class="comment">//<sp/>expr<sp/>is<sp/>float<sp/>type,<sp/>var<sp/>is<sp/>integer<sp/>type</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1355"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*initialTypeName<sp/>=<sp/><ref refid="namespacestcode_1a66c79ce9b06d190ef06f3c157175496d" kindref="member">stcode::value_type_to_stcode_type</ref>(<ref refid="classShaderParser_1_1StVarValueExpression_1a9f996d2995866eb138d273fa85f95019" kindref="member">getValueType</ref>(),<sp/>isInteger);</highlight></codeline>
<codeline lineno="1356"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*castToTypeName<sp/>=<sp/>convertIntToFloat<sp/>?<sp/><ref refid="namespacestcode_1a66c79ce9b06d190ef06f3c157175496d" kindref="member">stcode::value_type_to_stcode_type</ref>(<ref refid="classShaderParser_1_1StVarValueExpression_1a9f996d2995866eb138d273fa85f95019" kindref="member">getValueType</ref>(),<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">)<sp/>:<sp/>nullptr;</highlight></codeline>
<codeline lineno="1357"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isResource<sp/>=<sp/>valueType<sp/>==<sp/>shexpr::VT_TEXTURE<sp/>||<sp/>valueType<sp/>==<sp/>shexpr::VT_BUFFER;</highlight></codeline>
<codeline lineno="1358"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(isGlobalFlag)</highlight></codeline>
<codeline lineno="1359"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1360"><highlight class="normal"><sp/><sp/><sp/><sp/>cpp_expr.<ref refid="structStcodeExpression_1a8b51ba11b686a94c48b82ece54692900" kindref="member">specifyNextExprElement</ref>(<ref refid="structStcodeExpression_1aaccadc8df002bf4a50f3700badd92c59a3e76310ec68ca96f5a593b5ca640b304" kindref="member">StcodeExpression::ElementType::GLOBVAR</ref>,<sp/><ref refid="classShaderParser_1_1StVarValueExpression_1af2db04305a753533783ea661e167a2b2" kindref="member">getTerminal</ref>()-&gt;text,<sp/>castToTypeName,</highlight></codeline>
<codeline lineno="1361"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)(!isResource));</highlight></codeline>
<codeline lineno="1362"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1363"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1364"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1365"><highlight class="normal"><sp/><sp/><sp/><sp/>cpp_expr.<ref refid="structStcodeExpression_1a8b51ba11b686a94c48b82ece54692900" kindref="member">specifyNextExprElement</ref>(<ref refid="structStcodeExpression_1aaccadc8df002bf4a50f3700badd92c59a4bedf2a9395e6be97ed06ff72a388859" kindref="member">StcodeExpression::ElementType::SHVAR</ref>,<sp/><ref refid="classShaderParser_1_1StVarValueExpression_1af2db04305a753533783ea661e167a2b2" kindref="member">getTerminal</ref>()-&gt;text,<sp/>initialTypeName,<sp/>castToTypeName,</highlight></codeline>
<codeline lineno="1366"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)isResource);</highlight></codeline>
<codeline lineno="1367"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1368"><highlight class="normal"><sp/><sp/><ref refid="classShaderParser_1_1Expression_1a9487371df0a50670438cc4343d06cdb2" kindref="member">Expression::assembleCpp</ref>(cpp_expr,<sp/>is_integer);</highlight></codeline>
<codeline lineno="1369"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1370"><highlight class="normal"></highlight></codeline>
<codeline lineno="1371"><highlight class="normal"></highlight></codeline>
<codeline lineno="1372"><highlight class="normal"></highlight><highlight class="comment">//<sp/>evaluate<sp/>this<sp/>expression<sp/>as<sp/>real</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1373"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classShaderParser_1_1StVarValueExpression_1a0a837b4215cbf2e18fdf57a1b3f2f12b" kindref="member">StVarValueExpression::evaluate</ref>(real<sp/>&amp;out_value,<sp/><ref refid="structParser" kindref="compound">Parser</ref><sp/>&amp;parser)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="1374"><highlight class="normal"></highlight></codeline>
<codeline lineno="1375"><highlight class="normal"></highlight></codeline>
<codeline lineno="1376"><highlight class="normal"></highlight><highlight class="comment">//<sp/>evaluate<sp/>this<sp/>expression<sp/>as<sp/>color4</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1377"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classShaderParser_1_1StVarValueExpression_1a0a837b4215cbf2e18fdf57a1b3f2f12b" kindref="member">StVarValueExpression::evaluate</ref>(Color4<sp/>&amp;out_value,<sp/><ref refid="structParser" kindref="compound">Parser</ref><sp/>&amp;parser)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="1378"><highlight class="normal"></highlight></codeline>
<codeline lineno="1379"><highlight class="normal"></highlight><highlight class="comment">//<sp/>dump<sp/>to<sp/>debug</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1380"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classShaderParser_1_1StVarValueExpression_1a0a552f1b4936efbd505d39ddc76718b8" kindref="member">StVarValueExpression::dump_internal</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>level,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*tabs)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="1381"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1382"><highlight class="normal"><sp/><sp/>debug(</highlight><highlight class="stringliteral">&quot;%s&lt;StVarValueExpression&gt;&quot;</highlight><highlight class="normal">,<sp/>tabs);</highlight></codeline>
<codeline lineno="1383"><highlight class="normal"><sp/><sp/><ref refid="classShaderParser_1_1Expression_1ae3261bc8b45356c6090bd84db2508fcb" kindref="member">Expression::dump_internal</ref>(level,<sp/>tabs);</highlight></codeline>
<codeline lineno="1384"><highlight class="normal"></highlight></codeline>
<codeline lineno="1385"><highlight class="normal"><sp/><sp/>debug(</highlight><highlight class="stringliteral">&quot;%s&lt;/StVarValueExpression&gt;&quot;</highlight><highlight class="normal">,<sp/>tabs);</highlight></codeline>
<codeline lineno="1386"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1387"><highlight class="normal"></highlight></codeline>
<codeline lineno="1388"><highlight class="normal"></highlight><highlight class="comment">//<sp/>class<sp/>StVarValueExpression</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1389"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1390"><highlight class="normal"></highlight></codeline>
<codeline lineno="1391"><highlight class="normal"></highlight></codeline>
<codeline lineno="1392"><highlight class="normal"></highlight><highlight class="comment">/*********************************</highlight></codeline>
<codeline lineno="1393"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="1394"><highlight class="comment"><sp/>*<sp/>class<sp/>FunctionExpression</highlight></codeline>
<codeline lineno="1395"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="1396"><highlight class="comment"><sp/>*********************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1397"><highlight class="normal"></highlight><highlight class="comment">//<sp/>ctor/dtor</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1398"><highlight class="normal"><ref refid="classShaderParser_1_1FunctionExpression_1a874e9d212bca1fb7f84c9daf33a31260" kindref="member">FunctionExpression::FunctionExpression</ref>(Terminal<sp/>*s,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>function_id,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>channel)<sp/>:</highlight></codeline>
<codeline lineno="1399"><highlight class="normal"><sp/><sp/><ref refid="classShaderParser_1_1ComplexExpression" kindref="compound">ComplexExpression</ref>(s,<sp/><ref refid="namespacefunctional" kindref="compound">functional</ref>::<ref refid="namespacefunctional_1a65d63b3afe8706ef5499a148b0b8990c" kindref="member">getValueType</ref>(<ref refid="namespacefunctional" kindref="compound">functional</ref>::FunctionId(function_id)),<sp/>channel),<sp/>func(function_id)</highlight></codeline>
<codeline lineno="1400"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1401"><highlight class="normal"><sp/><sp/>resizeOperands(<ref refid="namespacefunctional_1aa594d50c22c9b99ea76669b7576bb30c" kindref="member">functional::getOpCount</ref>(functional::FunctionId(func)));</highlight></codeline>
<codeline lineno="1402"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1403"><highlight class="normal"></highlight></codeline>
<codeline lineno="1404"><highlight class="normal"></highlight><highlight class="comment">//<sp/>evaluate<sp/>this<sp/>expression<sp/>as<sp/>real</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1405"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classShaderParser_1_1FunctionExpression_1a79b6ac1aeae30ee663e736910c5f0871" kindref="member">FunctionExpression::evaluate</ref>(real<sp/>&amp;out_value,<sp/><ref refid="structParser" kindref="compound">Parser</ref><sp/>&amp;parser)</highlight></codeline>
<codeline lineno="1406"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1407"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>cannot<sp/>evaluate<sp/>dynamic<sp/>expressions</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1408"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classShaderParser_1_1FunctionExpression_1a7b71c9d3661f883523f9db8167959ed3" kindref="member">isDynamic</ref>())</highlight></codeline>
<codeline lineno="1409"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1410"><highlight class="normal"></highlight></codeline>
<codeline lineno="1411"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="classShaderParser_1_1FunctionExpression_1a087cca97677a843023cd102267bc741b" kindref="member">canConvert</ref>(shexpr::VT_REAL))</highlight></codeline>
<codeline lineno="1412"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1413"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="shErrorReporting_8h_1a634f6d6ca9a9f22c5eea4c9b8e20ef31" kindref="member">report_error</ref>(parser,<sp/><ref refid="classShaderParser_1_1Expression_1a066eed5146bd48cfcc3acb30a50e9068" kindref="member">getParserSymbol</ref>(),<sp/></highlight><highlight class="stringliteral">&quot;cannot<sp/>convert<sp/>from<sp/>&apos;%s&apos;<sp/>to<sp/>&apos;%s&apos;<sp/>here&quot;</highlight><highlight class="normal">,<sp/><ref refid="classShaderParser_1_1Expression_1a68e771cf9c1584e59c0f5c5e298d3eea" kindref="member">Expression::__getName</ref>(<ref refid="classShaderParser_1_1FunctionExpression_1a1622d2723f187b292cfdfb2b4138bb97" kindref="member">getValueType</ref>()),</highlight></codeline>
<codeline lineno="1414"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classShaderParser_1_1Expression_1a68e771cf9c1584e59c0f5c5e298d3eea" kindref="member">Expression::__getName</ref>(shexpr::VT_REAL));</highlight></codeline>
<codeline lineno="1415"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1416"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1417"><highlight class="normal"></highlight></codeline>
<codeline lineno="1418"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>check<sp/>all<sp/>operands</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1419"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="1420"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/><ref refid="classShaderParser_1_1ComplexExpression_1a30afe78dd5ce4f77ff127d91ca0fa9e4" kindref="member">getOperandCount</ref>();<sp/>i++)</highlight></codeline>
<codeline lineno="1421"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1422"><highlight class="normal"><sp/><sp/><sp/><sp/>G_ASSERT(<ref refid="classShaderParser_1_1ComplexExpression_1a09025279d6667970b8562d9b5f35cabf" kindref="member">getOperand</ref>(shexpr::OperandType(i)));</highlight></codeline>
<codeline lineno="1423"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1424"><highlight class="normal"></highlight></codeline>
<codeline lineno="1425"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>try<sp/>to<sp/>evaluate</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1426"><highlight class="normal"><sp/><sp/>functional::ArgList<sp/>inArgs(tmpmem);</highlight></codeline>
<codeline lineno="1427"><highlight class="normal"><sp/><sp/><ref refid="namespacefunctional_1a240fedd61c46bb47cb5069b35d695c28" kindref="member">functional::prepareArgs</ref>(functional::FunctionId(func),<sp/>inArgs);</highlight></codeline>
<codeline lineno="1428"><highlight class="normal"></highlight></codeline>
<codeline lineno="1429"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/><ref refid="classShaderParser_1_1ComplexExpression_1a30afe78dd5ce4f77ff127d91ca0fa9e4" kindref="member">getOperandCount</ref>();<sp/>i++)</highlight></codeline>
<codeline lineno="1430"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1431"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(inArgs[i].vt<sp/>==<sp/>shexpr::VT_COLOR4)</highlight></codeline>
<codeline lineno="1432"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1433"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="classShaderParser_1_1ComplexExpression_1a09025279d6667970b8562d9b5f35cabf" kindref="member">getOperand</ref>(shexpr::OperandType(i))-&gt;<ref refid="classShaderParser_1_1Expression_1a8941f97eca15c43e1ecd37d5c7dc3caf" kindref="member">evaluate</ref>(inArgs[i].val.c4(),<sp/>parser))</highlight></codeline>
<codeline lineno="1434"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1435"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1436"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1437"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1438"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="classShaderParser_1_1ComplexExpression_1a09025279d6667970b8562d9b5f35cabf" kindref="member">getOperand</ref>(shexpr::OperandType(i))-&gt;<ref refid="classShaderParser_1_1Expression_1a8941f97eca15c43e1ecd37d5c7dc3caf" kindref="member">evaluate</ref>(inArgs[i].val.r,<sp/>parser))</highlight></codeline>
<codeline lineno="1439"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1440"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1441"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1442"><highlight class="normal"></highlight></codeline>
<codeline lineno="1443"><highlight class="normal"><sp/><sp/>Color4<sp/>res;</highlight></codeline>
<codeline lineno="1444"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="namespacefunctional_1a2153022a95eca248919a3d3f489a6995" kindref="member">functional::evaluate</ref>(functional::FunctionId(func),<sp/>res,<sp/>inArgs))</highlight></codeline>
<codeline lineno="1445"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1446"><highlight class="normal"><sp/><sp/>out_value<sp/>=<sp/>res.r;</highlight></codeline>
<codeline lineno="1447"><highlight class="normal"></highlight></codeline>
<codeline lineno="1448"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classShaderParser_1_1Expression_1a8941f97eca15c43e1ecd37d5c7dc3caf" kindref="member">Expression::evaluate</ref>(out_value,<sp/>parser);</highlight></codeline>
<codeline lineno="1449"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1450"><highlight class="normal"></highlight></codeline>
<codeline lineno="1451"><highlight class="normal"></highlight></codeline>
<codeline lineno="1452"><highlight class="normal"></highlight><highlight class="comment">//<sp/>evaluate<sp/>this<sp/>expression<sp/>as<sp/>color4</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1453"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classShaderParser_1_1FunctionExpression_1a79b6ac1aeae30ee663e736910c5f0871" kindref="member">FunctionExpression::evaluate</ref>(Color4<sp/>&amp;out_value,<sp/><ref refid="structParser" kindref="compound">Parser</ref><sp/>&amp;parser)</highlight></codeline>
<codeline lineno="1454"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1455"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>cannot<sp/>evaluate<sp/>dynamic<sp/>expressions</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1456"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classShaderParser_1_1FunctionExpression_1a7b71c9d3661f883523f9db8167959ed3" kindref="member">isDynamic</ref>())</highlight></codeline>
<codeline lineno="1457"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1458"><highlight class="normal"></highlight></codeline>
<codeline lineno="1459"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classShaderParser_1_1FunctionExpression_1a1622d2723f187b292cfdfb2b4138bb97" kindref="member">getValueType</ref>()<sp/>==<sp/>shexpr::VT_REAL)</highlight></codeline>
<codeline lineno="1460"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1461"><highlight class="normal"><sp/><sp/><sp/><sp/>real<sp/>realVal<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="1462"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="classShaderParser_1_1FunctionExpression_1a79b6ac1aeae30ee663e736910c5f0871" kindref="member">evaluate</ref>(realVal,<sp/>parser))</highlight></codeline>
<codeline lineno="1463"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1464"><highlight class="normal"><sp/><sp/><sp/><sp/>out_value.r<sp/>=<sp/>realVal;</highlight></codeline>
<codeline lineno="1465"><highlight class="normal"><sp/><sp/><sp/><sp/>out_value.g<sp/>=<sp/>realVal;</highlight></codeline>
<codeline lineno="1466"><highlight class="normal"><sp/><sp/><sp/><sp/>out_value.b<sp/>=<sp/>realVal;</highlight></codeline>
<codeline lineno="1467"><highlight class="normal"><sp/><sp/><sp/><sp/>out_value.a<sp/>=<sp/>realVal;</highlight></codeline>
<codeline lineno="1468"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1469"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1470"><highlight class="normal"></highlight></codeline>
<codeline lineno="1471"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="classShaderParser_1_1FunctionExpression_1a087cca97677a843023cd102267bc741b" kindref="member">canConvert</ref>(shexpr::VT_COLOR4))</highlight></codeline>
<codeline lineno="1472"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1473"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="shErrorReporting_8h_1a634f6d6ca9a9f22c5eea4c9b8e20ef31" kindref="member">report_error</ref>(parser,<sp/><ref refid="classShaderParser_1_1Expression_1a066eed5146bd48cfcc3acb30a50e9068" kindref="member">getParserSymbol</ref>(),<sp/></highlight><highlight class="stringliteral">&quot;cannot<sp/>convert<sp/>from<sp/>&apos;%s&apos;<sp/>to<sp/>&apos;%s&apos;<sp/>here&quot;</highlight><highlight class="normal">,<sp/><ref refid="classShaderParser_1_1Expression_1a68e771cf9c1584e59c0f5c5e298d3eea" kindref="member">Expression::__getName</ref>(<ref refid="classShaderParser_1_1FunctionExpression_1a1622d2723f187b292cfdfb2b4138bb97" kindref="member">getValueType</ref>()),</highlight></codeline>
<codeline lineno="1474"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classShaderParser_1_1Expression_1a68e771cf9c1584e59c0f5c5e298d3eea" kindref="member">Expression::__getName</ref>(shexpr::VT_COLOR4));</highlight></codeline>
<codeline lineno="1475"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1476"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1477"><highlight class="normal"></highlight></codeline>
<codeline lineno="1478"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>check<sp/>all<sp/>operands</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1479"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="1480"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/><ref refid="classShaderParser_1_1ComplexExpression_1a30afe78dd5ce4f77ff127d91ca0fa9e4" kindref="member">getOperandCount</ref>();<sp/>i++)</highlight></codeline>
<codeline lineno="1481"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1482"><highlight class="normal"><sp/><sp/><sp/><sp/>G_ASSERT(<ref refid="classShaderParser_1_1ComplexExpression_1a09025279d6667970b8562d9b5f35cabf" kindref="member">getOperand</ref>(shexpr::OperandType(i)));</highlight></codeline>
<codeline lineno="1483"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1484"><highlight class="normal"></highlight></codeline>
<codeline lineno="1485"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>try<sp/>to<sp/>evaluate</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1486"><highlight class="normal"><sp/><sp/>functional::ArgList<sp/>inArgs(tmpmem);</highlight></codeline>
<codeline lineno="1487"><highlight class="normal"><sp/><sp/><ref refid="namespacefunctional_1a240fedd61c46bb47cb5069b35d695c28" kindref="member">functional::prepareArgs</ref>(functional::FunctionId(func),<sp/>inArgs);</highlight></codeline>
<codeline lineno="1488"><highlight class="normal"></highlight></codeline>
<codeline lineno="1489"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/><ref refid="classShaderParser_1_1ComplexExpression_1a30afe78dd5ce4f77ff127d91ca0fa9e4" kindref="member">getOperandCount</ref>();<sp/>i++)</highlight></codeline>
<codeline lineno="1490"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1491"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(inArgs[i].vt<sp/>==<sp/>shexpr::VT_COLOR4)</highlight></codeline>
<codeline lineno="1492"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1493"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="classShaderParser_1_1ComplexExpression_1a09025279d6667970b8562d9b5f35cabf" kindref="member">getOperand</ref>(shexpr::OperandType(i))-&gt;<ref refid="classShaderParser_1_1Expression_1a8941f97eca15c43e1ecd37d5c7dc3caf" kindref="member">evaluate</ref>(inArgs[i].val.c4(),<sp/>parser))</highlight></codeline>
<codeline lineno="1494"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1495"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1496"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1497"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1498"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="classShaderParser_1_1ComplexExpression_1a09025279d6667970b8562d9b5f35cabf" kindref="member">getOperand</ref>(shexpr::OperandType(i))-&gt;<ref refid="classShaderParser_1_1Expression_1a8941f97eca15c43e1ecd37d5c7dc3caf" kindref="member">evaluate</ref>(inArgs[i].val.r,<sp/>parser))</highlight></codeline>
<codeline lineno="1499"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1500"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1501"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1502"><highlight class="normal"></highlight></codeline>
<codeline lineno="1503"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="namespacefunctional_1a2153022a95eca248919a3d3f489a6995" kindref="member">functional::evaluate</ref>(functional::FunctionId(func),<sp/>out_value,<sp/>inArgs))</highlight></codeline>
<codeline lineno="1504"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1505"><highlight class="normal"></highlight></codeline>
<codeline lineno="1506"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classShaderParser_1_1Expression_1a8941f97eca15c43e1ecd37d5c7dc3caf" kindref="member">Expression::evaluate</ref>(out_value,<sp/>parser);</highlight></codeline>
<codeline lineno="1507"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1508"><highlight class="normal"></highlight></codeline>
<codeline lineno="1509"><highlight class="normal"></highlight></codeline>
<codeline lineno="1510"><highlight class="normal"></highlight><highlight class="comment">//<sp/>dump<sp/>to<sp/>debug</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1511"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classShaderParser_1_1FunctionExpression_1a4daace2187e4e109925beec6295d90a2" kindref="member">FunctionExpression::dump_internal</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>level,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*tabs)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="1512"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1513"><highlight class="normal"><sp/><sp/>debug(</highlight><highlight class="stringliteral">&quot;%s&lt;FunctionExpression<sp/>&apos;%s&apos;&gt;&quot;</highlight><highlight class="normal">,<sp/>tabs,<sp/>functional::getFuncName(functional::FunctionId(func)));</highlight></codeline>
<codeline lineno="1514"><highlight class="normal"><sp/><sp/><ref refid="classShaderParser_1_1ComplexExpression_1a297558e23345f9282e9d9b75ac44ecf2" kindref="member">ComplexExpression::dump_internal</ref>(level,<sp/>tabs);</highlight></codeline>
<codeline lineno="1515"><highlight class="normal"></highlight></codeline>
<codeline lineno="1516"><highlight class="normal"><sp/><sp/>debug(</highlight><highlight class="stringliteral">&quot;%s&lt;/FunctionExpression&gt;&quot;</highlight><highlight class="normal">,<sp/>tabs);</highlight></codeline>
<codeline lineno="1517"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1518"><highlight class="normal"></highlight></codeline>
<codeline lineno="1519"><highlight class="normal"></highlight></codeline>
<codeline lineno="1520"><highlight class="normal"></highlight><highlight class="comment">//<sp/>assembly<sp/>this<sp/>expression</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1521"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classShaderParser_1_1FunctionExpression_1ad3c04213cfb60f770eab5a25e585a9f2" kindref="member">FunctionExpression::assembleBytecode</ref>(<ref refid="namespaceShaderParser_1a732af6cbcecefe1051d9165d3718d702" kindref="member">CodeTable</ref><sp/>&amp;code,<sp/><ref refid="classRegister" kindref="compound">Register</ref><sp/>&amp;dest_reg,<sp/><ref refid="classStcodeVMRegisterAllocator" kindref="compound">StcodeVMRegisterAllocator</ref><sp/>&amp;reg_allocator,</highlight></codeline>
<codeline lineno="1522"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>is_integer)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="1523"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1524"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>argCount<sp/>=<sp/><ref refid="classShaderParser_1_1ComplexExpression_1a30afe78dd5ce4f77ff127d91ca0fa9e4" kindref="member">getOperandCount</ref>();</highlight></codeline>
<codeline lineno="1525"><highlight class="normal"></highlight></codeline>
<codeline lineno="1526"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>assembly<sp/>operands</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1527"><highlight class="normal"><sp/><sp/>eastl::vector&lt;Register&gt;<sp/>opRegs;</highlight></codeline>
<codeline lineno="1528"><highlight class="normal"><sp/><sp/>opRegs.reserve(<ref refid="classShaderParser_1_1ComplexExpression_1a30afe78dd5ce4f77ff127d91ca0fa9e4" kindref="member">getOperandCount</ref>());</highlight></codeline>
<codeline lineno="1529"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/><ref refid="classShaderParser_1_1ComplexExpression_1a30afe78dd5ce4f77ff127d91ca0fa9e4" kindref="member">getOperandCount</ref>();<sp/>i++)</highlight></codeline>
<codeline lineno="1530"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1531"><highlight class="normal"><sp/><sp/><sp/><sp/>opRegs.emplace_back(<ref refid="classShaderParser_1_1Expression_1a77ed6f7aab61c1f6367d6c1f5fcfdbb1" kindref="member">allocateRegForResult</ref>(reg_allocator));</highlight></codeline>
<codeline lineno="1532"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classShaderParser_1_1ComplexExpression_1a09025279d6667970b8562d9b5f35cabf" kindref="member">getOperand</ref>(shexpr::OperandType(i))-&gt;<ref refid="classShaderParser_1_1Expression_1adf4dc5757229bb9e7a7d50d3cc6d82f0" kindref="member">assembleBytecode</ref>(code,<sp/>opRegs[i],<sp/>reg_allocator,<sp/>is_integer);</highlight></codeline>
<codeline lineno="1533"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1534"><highlight class="normal"></highlight></codeline>
<codeline lineno="1535"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>addFunctionCall<sp/>=<sp/>[&amp;,<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">](</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dreg)<sp/>{</highlight></codeline>
<codeline lineno="1536"><highlight class="normal"><sp/><sp/><sp/><sp/>code.push_back(shaderopcode::makeOp3(SHCOD_CALL_FUNCTION,<sp/>func,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">(dreg),<sp/>opRegs.size()));</highlight></codeline>
<codeline lineno="1537"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/><ref refid="classShaderParser_1_1ComplexExpression_1a30afe78dd5ce4f77ff127d91ca0fa9e4" kindref="member">getOperandCount</ref>();<sp/>i++)</highlight></codeline>
<codeline lineno="1538"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>code.push_back(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">(opRegs[i]));</highlight></codeline>
<codeline lineno="1539"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="1540"><highlight class="normal"></highlight></codeline>
<codeline lineno="1541"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>make<sp/>code</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1542"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="namespacefunctional_1abaff07d64e2df75e9aed4e6c18a9032c" kindref="member">functional::getValueTypeIsInteger</ref>(functional::FunctionId(func))<sp/>&amp;&amp;<sp/>!is_integer)</highlight></codeline>
<codeline lineno="1543"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1544"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classRegister" kindref="compound">Register</ref><sp/>intreg<sp/>=<sp/><ref refid="classShaderParser_1_1Expression_1a77ed6f7aab61c1f6367d6c1f5fcfdbb1" kindref="member">allocateRegForResult</ref>(reg_allocator);</highlight></codeline>
<codeline lineno="1545"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>castOp<sp/>=<sp/><ref refid="namespacefunctional_1a65d63b3afe8706ef5499a148b0b8990c" kindref="member">functional::getValueType</ref>(functional::FunctionId(func))<sp/>==<sp/>shexpr::VT_COLOR4<sp/>?<sp/>SHCOD_IVEC_TOREAL<sp/>:<sp/>SHCOD_INT_TOREAL;</highlight></codeline>
<codeline lineno="1546"><highlight class="normal"><sp/><sp/><sp/><sp/>addFunctionCall(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">(intreg));</highlight></codeline>
<codeline lineno="1547"><highlight class="normal"><sp/><sp/><sp/><sp/>code.push_back(shaderopcode::makeOp2(castOp,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">(dest_reg),<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">(intreg)));</highlight></codeline>
<codeline lineno="1548"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1549"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1550"><highlight class="normal"><sp/><sp/><sp/><sp/>addFunctionCall(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">(dest_reg));</highlight></codeline>
<codeline lineno="1551"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1552"><highlight class="normal"></highlight></codeline>
<codeline lineno="1553"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classShaderParser_1_1FunctionExpression_1a5f41ffb739d74300e4da96ff6b4ef28f" kindref="member">FunctionExpression::assembleCpp</ref>(<ref refid="structStcodeExpression" kindref="compound">StcodeExpression</ref><sp/>&amp;cpp_expr,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>is_integer)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="1554"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1555"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>argCount<sp/>=<sp/><ref refid="classShaderParser_1_1ComplexExpression_1a30afe78dd5ce4f77ff127d91ca0fa9e4" kindref="member">getOperandCount</ref>();</highlight></codeline>
<codeline lineno="1556"><highlight class="normal"><sp/><sp/>cpp_expr.<ref refid="structStcodeExpression_1a8b51ba11b686a94c48b82ece54692900" kindref="member">specifyNextExprElement</ref>(<ref refid="structStcodeExpression_1aaccadc8df002bf4a50f3700badd92c59a1e49c8ad07b69571bfcafaf18ac9fa5b" kindref="member">StcodeExpression::ElementType::FUNC</ref>,<sp/><ref refid="classShaderParser_1_1FunctionExpression_1aa94a57ffeced2cfd2afdab32478af185" kindref="member">getTerminal</ref>()-&gt;text,<sp/>&amp;argCount);</highlight></codeline>
<codeline lineno="1557"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/><ref refid="classShaderParser_1_1ComplexExpression_1a30afe78dd5ce4f77ff127d91ca0fa9e4" kindref="member">getOperandCount</ref>();<sp/>i++)</highlight></codeline>
<codeline lineno="1558"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classShaderParser_1_1ComplexExpression_1a09025279d6667970b8562d9b5f35cabf" kindref="member">getOperand</ref>(shexpr::OperandType(i))-&gt;<ref refid="classShaderParser_1_1FunctionExpression_1a5f41ffb739d74300e4da96ff6b4ef28f" kindref="member">assembleCpp</ref>(cpp_expr,<sp/>is_integer);</highlight></codeline>
<codeline lineno="1559"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1560"><highlight class="normal"></highlight></codeline>
<codeline lineno="1561"><highlight class="normal"></highlight></codeline>
<codeline lineno="1562"><highlight class="normal"></highlight><highlight class="comment">//<sp/>evaluate<sp/>all<sp/>avalible<sp/>branches;<sp/>return<sp/>false<sp/>if<sp/>error<sp/>occuried</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1563"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classShaderParser_1_1FunctionExpression_1a2d8cf9662e55e5ab14fc506ee8887432" kindref="member">FunctionExpression::collapseNumbers</ref>(<ref refid="structParser" kindref="compound">Parser</ref><sp/>&amp;parser)</highlight></codeline>
<codeline lineno="1564"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1565"><highlight class="normal"><sp/><sp/>functional::ArgList<sp/>args(tmpmem);</highlight></codeline>
<codeline lineno="1566"><highlight class="normal"><sp/><sp/><ref refid="namespacefunctional_1a240fedd61c46bb47cb5069b35d695c28" kindref="member">functional::prepareArgs</ref>(functional::FunctionId(func),<sp/>args);</highlight></codeline>
<codeline lineno="1567"><highlight class="normal"></highlight></codeline>
<codeline lineno="1568"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/><ref refid="classShaderParser_1_1ComplexExpression_1a30afe78dd5ce4f77ff127d91ca0fa9e4" kindref="member">getOperandCount</ref>();<sp/>i++)</highlight></codeline>
<codeline lineno="1569"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1570"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>operator<sp/>is<sp/>constant,<sp/>calculate<sp/>it<sp/>now</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1571"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classShaderParser_1_1Expression" kindref="compound">Expression</ref><sp/>*op<sp/>=<sp/><ref refid="classShaderParser_1_1ComplexExpression_1a09025279d6667970b8562d9b5f35cabf" kindref="member">getOperand</ref>(shexpr::OperandType(i));</highlight></codeline>
<codeline lineno="1572"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(op-&gt;<ref refid="classShaderParser_1_1Expression_1a5cd845a298cd30bc29c1d6176d90d7a5" kindref="member">isConst</ref>())</highlight></codeline>
<codeline lineno="1573"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1574"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Color4<sp/>v;</highlight></codeline>
<codeline lineno="1575"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(args[i].vt<sp/>==<sp/>shexpr::VT_COLOR4)</highlight></codeline>
<codeline lineno="1576"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1577"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(op-&gt;<ref refid="classShaderParser_1_1Expression_1ab8876717d35f647420a5c3bfd7c1c50c" kindref="member">getType</ref>()<sp/>!=<sp/>shexpr::E_CONST_COLOR4)</highlight></codeline>
<codeline lineno="1578"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1579"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>calc<sp/>color4</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1580"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(op-&gt;<ref refid="classShaderParser_1_1Expression_1a8941f97eca15c43e1ecd37d5c7dc3caf" kindref="member">evaluate</ref>(v,<sp/>parser))</highlight></codeline>
<codeline lineno="1581"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1582"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>replace<sp/>with<sp/>constant<sp/>color4<sp/>value</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1583"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Terminal<sp/>*t<sp/>=<sp/>op-&gt;<ref refid="classShaderParser_1_1Expression_1a63e9f75ae1b742c5ffcbd7aa65b1963a" kindref="member">getTerminal</ref>();</highlight></codeline>
<codeline lineno="1584"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>op;</highlight></codeline>
<codeline lineno="1585"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classShaderParser_1_1ComplexExpression_1a1cfcdaf2ee0204346bde3a7961720734" kindref="member">setOperand</ref>(shexpr::OperandType(i),<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="classShaderParser_1_1ConstColor4Value" kindref="compound">ConstColor4Value</ref>(t,<sp/>v));</highlight></codeline>
<codeline lineno="1586"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1587"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1588"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1589"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1590"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1591"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>calc<sp/>real</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1592"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(op-&gt;<ref refid="classShaderParser_1_1Expression_1a8941f97eca15c43e1ecd37d5c7dc3caf" kindref="member">evaluate</ref>(v.r,<sp/>parser))</highlight></codeline>
<codeline lineno="1593"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1594"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>replace<sp/>with<sp/>constant<sp/>real<sp/>value</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1595"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Terminal<sp/>*t<sp/>=<sp/>op-&gt;<ref refid="classShaderParser_1_1Expression_1a63e9f75ae1b742c5ffcbd7aa65b1963a" kindref="member">getTerminal</ref>();</highlight></codeline>
<codeline lineno="1596"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>op;</highlight></codeline>
<codeline lineno="1597"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classShaderParser_1_1ComplexExpression_1a1cfcdaf2ee0204346bde3a7961720734" kindref="member">setOperand</ref>(shexpr::OperandType(i),<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="classShaderParser_1_1ConstRealValue" kindref="compound">ConstRealValue</ref>(t,<sp/>v.r));</highlight></codeline>
<codeline lineno="1598"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1599"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1600"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1601"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1602"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1603"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!op-&gt;<ref refid="classShaderParser_1_1Expression_1a6504a6f642f08f1cf420bebda197efaf" kindref="member">collapseNumbers</ref>(parser))</highlight></codeline>
<codeline lineno="1604"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1605"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1606"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1607"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1608"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1609"><highlight class="normal"></highlight></codeline>
<codeline lineno="1610"><highlight class="normal"></highlight></codeline>
<codeline lineno="1611"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classShaderParser_1_1FunctionExpression_1a549eb3d23dffc63e274162806bfcfb8e" kindref="member">FunctionExpression::isConst</ref>()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="1612"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1613"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="namespacefunctional_1a140dff130db36adf98e3b1b90472b2c4" kindref="member">functional::isAlwaysDynamic</ref>(functional::FunctionId(func)))</highlight></codeline>
<codeline lineno="1614"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1615"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classShaderParser_1_1ComplexExpression_1a7194e5c6d1440272d923f2a43f91b323" kindref="member">ComplexExpression::isConst</ref>();</highlight></codeline>
<codeline lineno="1616"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1617"><highlight class="normal"></highlight></codeline>
<codeline lineno="1618"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classShaderParser_1_1FunctionExpression_1a7b71c9d3661f883523f9db8167959ed3" kindref="member">FunctionExpression::isDynamic</ref>()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="1619"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1620"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="namespacefunctional_1a140dff130db36adf98e3b1b90472b2c4" kindref="member">functional::isAlwaysDynamic</ref>(functional::FunctionId(func)))</highlight></codeline>
<codeline lineno="1621"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1622"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classShaderParser_1_1ComplexExpression_1a16bdebae479907f7361ce4fbfaa6f05e" kindref="member">ComplexExpression::isDynamic</ref>();</highlight></codeline>
<codeline lineno="1623"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1624"><highlight class="normal"></highlight></codeline>
<codeline lineno="1625"><highlight class="normal"></highlight></codeline>
<codeline lineno="1626"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="classShaderParser_1_1FunctionExpression_1a4969d3a58c0d567357c230dae020e979" kindref="member">FunctionExpression::getChannels</ref>()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="1627"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1628"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>@HACK<sp/>this<sp/>is<sp/>also<sp/>part<sp/>of<sp/>the<sp/>inside-color-value<sp/>hack</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1629"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>see<sp/>shExprParser.cpp,<sp/>ExpressionParser::parseOperand,<sp/>the<sp/>&apos;if<sp/>(s.func)&apos;<sp/>branch</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1630"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classShaderParser_1_1ComplexExpression_1a64324bc6708bb2c23085c7e26439e940" kindref="member">getCurrentChannel</ref>()<sp/>!=<sp/>-1)</highlight></codeline>
<codeline lineno="1631"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classShaderParser_1_1ComplexExpression_1ac2fe7fc73b1e22177129c4465a6609eb" kindref="member">ComplexExpression::getChannels</ref>();</highlight></codeline>
<codeline lineno="1632"><highlight class="normal"></highlight></codeline>
<codeline lineno="1633"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classShaderParser_1_1FunctionExpression_1a1622d2723f187b292cfdfb2b4138bb97" kindref="member">getValueType</ref>()<sp/>==<sp/>shexpr::VT_COLOR4<sp/>?<sp/>4<sp/>:<sp/>1;</highlight></codeline>
<codeline lineno="1634"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1635"><highlight class="normal"></highlight></codeline>
<codeline lineno="1636"><highlight class="normal"></highlight></codeline>
<codeline lineno="1637"><highlight class="normal"></highlight><highlight class="comment">//<sp/>return<sp/>value<sp/>type</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1638"><highlight class="normal">shexpr::ValueType<sp/><ref refid="classShaderParser_1_1FunctionExpression_1a1622d2723f187b292cfdfb2b4138bb97" kindref="member">FunctionExpression::getValueType</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespacefunctional_1a65d63b3afe8706ef5499a148b0b8990c" kindref="member">functional::getValueType</ref>(functional::FunctionId(func));<sp/>}</highlight></codeline>
<codeline lineno="1639"><highlight class="normal"></highlight><highlight class="comment">//<sp/>class<sp/>FunctionExpression</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1640"><highlight class="normal"></highlight><highlight class="comment">//</highlight></codeline>
    </programlisting>
    <location file="shExpr.cpp"/>
  </compounddef>
</doxygen>
