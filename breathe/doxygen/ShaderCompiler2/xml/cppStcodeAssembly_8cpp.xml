<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.7" xml:lang="en-US">
  <compounddef id="cppStcodeAssembly_8cpp" kind="file" language="C++">
    <compoundname>cppStcodeAssembly.cpp</compoundname>
    <includes refid="cppStcodeAssembly_8h" local="yes">cppStcodeAssembly.h</includes>
    <includes refid="cppStcode_8h" local="yes">cppStcode.h</includes>
    <includes refid="cppStcodeUtils_8h" local="yes">cppStcodeUtils.h</includes>
    <includes refid="cppStcodeBuilder_8h" local="yes">cppStcodeBuilder.h</includes>
    <includes refid="variantSemantic_8h" local="yes">variantSemantic.h</includes>
    <incdepgraph>
      <node id="90">
        <label>DebugLevel.h</label>
        <link refid="DebugLevel_8h"/>
        <childnode refid="28" relation="include">
        </childnode>
      </node>
      <node id="41">
        <label>blkHash.h</label>
        <link refid="blkHash_8h"/>
      </node>
      <node id="83">
        <label>boolVar.h</label>
        <link refid="boolVar_8h"/>
        <childnode refid="66" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>commonUtils.h</label>
        <link refid="commonUtils_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="75">
        <label>compileResult.h</label>
        <link refid="compileResult_8h"/>
        <childnode refid="76" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="72">
        <label>const3d.h</label>
        <link refid="const3d_8h"/>
        <childnode refid="34" relation="include">
        </childnode>
      </node>
      <node id="38">
        <label>cppStcode.h</label>
        <link refid="cppStcode_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="39" relation="include">
        </childnode>
        <childnode refid="41" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>cppStcodeAssembly.cpp</label>
        <link refid="cppStcodeAssembly_8cpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="38" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="44" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>cppStcodeAssembly.h</label>
        <link refid="cppStcodeAssembly_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>cppStcodeBuilder.h</label>
        <link refid="cppStcodeBuilder_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
      </node>
      <node id="91">
        <label>cppStcodePlatformInfo.h</label>
        <link refid="cppStcodePlatformInfo_8h"/>
        <childnode refid="28" relation="include">
        </childnode>
      </node>
      <node id="42">
        <label>cppStcodeUtils.h</label>
        <link refid="cppStcodeUtils_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="43" relation="include">
        </childnode>
      </node>
      <node id="56">
        <label>globVar.h</label>
        <link refid="globVar_8h"/>
        <childnode refid="57" relation="include">
        </childnode>
        <childnode refid="58" relation="include">
        </childnode>
        <childnode refid="50" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="59" relation="include">
        </childnode>
        <childnode refid="60" relation="include">
        </childnode>
        <childnode refid="61" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="62" relation="include">
        </childnode>
        <childnode refid="63" relation="include">
        </childnode>
      </node>
      <node id="89">
        <label>globalConfig.h</label>
        <link refid="globalConfig_8h"/>
        <childnode refid="49" relation="include">
        </childnode>
        <childnode refid="90" relation="include">
        </childnode>
        <childnode refid="91" relation="include">
        </childnode>
        <childnode refid="53" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
      </node>
      <node id="20">
        <label>hash.h</label>
        <link refid="hash_8h"/>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
      </node>
      <node id="54">
        <label>hashStrings.h</label>
        <link refid="hashStrings_8h"/>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="50" relation="include">
        </childnode>
        <childnode refid="55" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
      </node>
      <node id="23">
        <label>hlslRegisters.h</label>
        <link refid="hlslRegisters_8h"/>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
      </node>
      <node id="71">
        <label>hlslStage.h</label>
        <link refid="hlslStage_8h"/>
        <childnode refid="72" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="73" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="74" relation="include">
        </childnode>
      </node>
      <node id="52">
        <label>hwAssembly.h</label>
        <link refid="hwAssembly_8h"/>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="63">
        <label>intervals.h</label>
        <link refid="intervals_8h"/>
      </node>
      <node id="13">
        <label>nameMap.h</label>
        <link refid="nameMap_8h"/>
        <childnode refid="14" relation="include">
        </childnode>
      </node>
      <node id="84">
        <label>namedConst.h</label>
        <link refid="namedConst_8h"/>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="85" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="89" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="50" relation="include">
        </childnode>
        <childnode refid="92" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
      </node>
      <node id="39">
        <label>processes.h</label>
        <link refid="processes_8h"/>
        <childnode refid="40" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="64">
        <label>samplers.h</label>
        <link refid="samplers_8h"/>
        <childnode refid="65" relation="include">
        </childnode>
        <childnode refid="66" relation="include">
        </childnode>
        <childnode refid="56" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="60" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
      </node>
      <node id="93">
        <label>shAssumes.h</label>
        <link refid="shAssumes_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="63" relation="include">
        </childnode>
        <childnode refid="66" relation="include">
        </childnode>
        <childnode refid="53" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
      </node>
      <node id="48">
        <label>shCompContext.h</label>
        <link refid="shCompContext_8h"/>
        <childnode refid="49" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="52" relation="include">
        </childnode>
        <childnode refid="53" relation="include">
        </childnode>
      </node>
      <node id="49">
        <label>shCompilationInfo.h</label>
        <link refid="shCompilationInfo_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="38" relation="include">
        </childnode>
        <childnode refid="41" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="50" relation="include">
        </childnode>
        <childnode refid="51" relation="include">
        </childnode>
      </node>
      <node id="80">
        <label>shErrorReporting.h</label>
        <link refid="shErrorReporting_8h"/>
        <childnode refid="65" relation="include">
        </childnode>
        <childnode refid="66" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="103">
        <label>shLocVar.h</label>
        <link refid="shLocVar_8h"/>
      </node>
      <node id="24">
        <label>shLog.h</label>
        <link refid="shLog_8h"/>
      </node>
      <node id="67">
        <label>shMacro.h</label>
        <link refid="shMacro_8h"/>
      </node>
      <node id="101">
        <label>shMessages.h</label>
        <link refid="shMessages_8h"/>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="88" relation="include">
        </childnode>
      </node>
      <node id="102">
        <label>shSemCode.h</label>
        <link refid="shSemCode_8h"/>
      </node>
      <node id="46">
        <label>shShaderContext.h</label>
        <link refid="shShaderContext_8h"/>
        <childnode refid="47" relation="include">
        </childnode>
        <childnode refid="83" relation="include">
        </childnode>
        <childnode refid="94" relation="include">
        </childnode>
        <childnode refid="93" relation="include">
        </childnode>
        <childnode refid="95" relation="include">
        </childnode>
        <childnode refid="99" relation="include">
        </childnode>
        <childnode refid="101" relation="include">
        </childnode>
        <childnode refid="97" relation="include">
        </childnode>
        <childnode refid="102" relation="include">
        </childnode>
      </node>
      <node id="47">
        <label>shTargetContext.h</label>
        <link refid="shTargetContext_8h"/>
        <childnode refid="48" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="54" relation="include">
        </childnode>
        <childnode refid="56" relation="include">
        </childnode>
        <childnode refid="64" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="66" relation="include">
        </childnode>
        <childnode refid="68" relation="include">
        </childnode>
        <childnode refid="70" relation="include">
        </childnode>
        <childnode refid="79" relation="include">
        </childnode>
        <childnode refid="83" relation="include">
        </childnode>
        <childnode refid="71" relation="include">
        </childnode>
        <childnode refid="84" relation="include">
        </childnode>
        <childnode refid="93" relation="include">
        </childnode>
        <childnode refid="89" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="68">
        <label>shTargetStorage.h</label>
        <link refid="shTargetStorage_8h"/>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="69" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
      </node>
      <node id="100">
        <label>shVarBool.h</label>
        <link refid="shVarBool_8h"/>
      </node>
      <node id="62">
        <label>shVarVecTypes.h</label>
        <link refid="shVarVecTypes_8h"/>
      </node>
      <node id="45">
        <label>shVariantContext.h</label>
        <link refid="shVariantContext_8h"/>
        <childnode refid="46" relation="include">
        </childnode>
        <childnode refid="102" relation="include">
        </childnode>
        <childnode refid="83" relation="include">
        </childnode>
        <childnode refid="103" relation="include">
        </childnode>
        <childnode refid="104" relation="include">
        </childnode>
      </node>
      <node id="70">
        <label>shaderBytecodeCache.h</label>
        <link refid="shaderBytecodeCache_8h"/>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="71" relation="include">
        </childnode>
        <childnode refid="75" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="77" relation="include">
        </childnode>
        <childnode refid="50" relation="include">
        </childnode>
        <childnode refid="78" relation="include">
        </childnode>
      </node>
      <node id="11">
        <label>shaderSave.h</label>
        <link refid="shaderSave_8h"/>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
      </node>
      <node id="10">
        <label>shaderTab.h</label>
        <link refid="shaderTab_8h"/>
        <childnode refid="11" relation="include">
        </childnode>
      </node>
      <node id="97">
        <label>shaderVariant.h</label>
        <link refid="shaderVariant_8h"/>
        <childnode refid="63" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="47" relation="include">
        </childnode>
        <childnode refid="81" relation="include">
        </childnode>
        <childnode refid="61" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="55" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
      </node>
      <node id="94">
        <label>shaderVariantSrc.h</label>
        <link refid="shaderVariantSrc_8h"/>
      </node>
      <node id="95">
        <label>shcode.h</label>
        <link refid="shcode_8h"/>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="55" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="96" relation="include">
        </childnode>
        <childnode refid="57" relation="include">
        </childnode>
        <childnode refid="58" relation="include">
        </childnode>
        <childnode refid="88" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="97" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="84" relation="include">
        </childnode>
        <childnode refid="98" relation="include">
        </childnode>
        <childnode refid="62" relation="include">
        </childnode>
      </node>
      <node id="66">
        <label>shlexterm.h</label>
        <link refid="shlexterm_8h"/>
        <childnode refid="65" relation="include">
        </childnode>
        <childnode refid="67" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="99">
        <label>shsem.h</label>
        <link refid="shsem_8h"/>
        <childnode refid="65" relation="include">
        </childnode>
        <childnode refid="66" relation="include">
        </childnode>
        <childnode refid="100" relation="include">
        </childnode>
        <childnode refid="47" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="78" relation="include">
        </childnode>
      </node>
      <node id="79">
        <label>stcodeBytecode.h</label>
        <link refid="stcodeBytecode_8h"/>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="80" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="81" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="82" relation="include">
        </childnode>
      </node>
      <node id="12">
        <label>varMap.h</label>
        <link refid="varMap_8h"/>
        <childnode refid="13" relation="include">
        </childnode>
      </node>
      <node id="61">
        <label>varTypes.h</label>
        <link refid="varTypes_8h"/>
      </node>
      <node id="85">
        <label>variablesMerger.h</label>
        <link refid="variablesMerger_8h"/>
        <childnode refid="65" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
        <childnode refid="76" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="86" relation="include">
        </childnode>
        <childnode refid="87" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="88" relation="include">
        </childnode>
      </node>
      <node id="44">
        <label>variantSemantic.h</label>
        <link refid="variantSemantic_8h"/>
        <childnode refid="45" relation="include">
        </childnode>
      </node>
      <node id="59">
        <label>3d/dag_texMgr.h</label>
      </node>
      <node id="19">
        <label>EASTL/algorithm.h</label>
      </node>
      <node id="27">
        <label>EASTL/array.h</label>
      </node>
      <node id="88">
        <label>EASTL/bitvector.h</label>
      </node>
      <node id="86">
        <label>EASTL/fixed_vector.h</label>
      </node>
      <node id="87">
        <label>EASTL/map.h</label>
      </node>
      <node id="9">
        <label>EASTL/optional.h</label>
      </node>
      <node id="8">
        <label>EASTL/string.h</label>
      </node>
      <node id="43">
        <label>EASTL/string_view.h</label>
      </node>
      <node id="73">
        <label>EASTL/type_traits.h</label>
      </node>
      <node id="35">
        <label>EASTL/unique_ptr.h</label>
      </node>
      <node id="76">
        <label>EASTL/vector.h</label>
      </node>
      <node id="82">
        <label>EASTL/vector_map.h</label>
      </node>
      <node id="92">
        <label>EASTL/vector_set.h</label>
      </node>
      <node id="28">
        <label>cstdint</label>
      </node>
      <node id="22">
        <label>cstring</label>
      </node>
      <node id="18">
        <label>dag/dag_vector.h</label>
      </node>
      <node id="17">
        <label>debug/dag_assert.h</label>
      </node>
      <node id="81">
        <label>debug/dag_debug.h</label>
      </node>
      <node id="34">
        <label>drv/3d/dag_consts.h</label>
      </node>
      <node id="69">
        <label>drv/3d/dag_renderStates.h</label>
      </node>
      <node id="60">
        <label>drv/3d/dag_sampler.h</label>
      </node>
      <node id="25">
        <label>generic/dag_enumerate.h</label>
      </node>
      <node id="26">
        <label>generic/dag_expected.h</label>
      </node>
      <node id="40">
        <label>generic/dag_fixedMoveOnlyFunction.h</label>
      </node>
      <node id="96">
        <label>generic/dag_smallTab.h</label>
      </node>
      <node id="15">
        <label>generic/dag_tab.h</label>
      </node>
      <node id="21">
        <label>hash/BLAKE3/blake3.h</label>
      </node>
      <node id="53">
        <label>ioSys/dag_dataBlock.h</label>
      </node>
      <node id="57">
        <label>math/dag_color.h</label>
      </node>
      <node id="58">
        <label>math/integer/dag_IPoint4.h</label>
      </node>
      <node id="74">
        <label>memory</label>
      </node>
      <node id="30">
        <label>memory/dag_mem.h</label>
      </node>
      <node id="77">
        <label>memory/dag_memBase.h</label>
      </node>
      <node id="104">
        <label>memory/dag_regionMemAlloc.h</label>
      </node>
      <node id="98">
        <label>shaders/dag_shaderCommon.h</label>
      </node>
      <node id="33">
        <label>shaders/dag_shaderVarType.h</label>
      </node>
      <node id="51">
        <label>shaders/dag_shaders.h</label>
      </node>
      <node id="31">
        <label>shaders/shExprTypes.h</label>
      </node>
      <node id="32">
        <label>shaders/shFunc.h</label>
      </node>
      <node id="37">
        <label>shaders/shader_layout.h</label>
      </node>
      <node id="29">
        <label>shaders/slotTexturesRange.h</label>
      </node>
      <node id="65">
        <label>shsyn.h</label>
      </node>
      <node id="36">
        <label>ska_hash_map/flat_hash_map2.hpp</label>
      </node>
      <node id="16">
        <label>util/dag_bindump_ext.h</label>
      </node>
      <node id="7">
        <label>util/dag_globDef.h</label>
      </node>
      <node id="14">
        <label>util/dag_oaHashNameMap.h</label>
      </node>
      <node id="6">
        <label>util/dag_safeArg.h</label>
      </node>
      <node id="78">
        <label>util/dag_simpleString.h</label>
      </node>
      <node id="55">
        <label>util/dag_stdint.h</label>
      </node>
      <node id="50">
        <label>util/dag_string.h</label>
      </node>
      <node id="5">
        <label>utility</label>
      </node>
    </incdepgraph>
      <sectiondef kind="var">
      <memberdef kind="variable" id="cppStcodeAssembly_8cpp_1aa4f32b05a09d74fab3548f03d21048c3" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>constexpr int</type>
        <definition>constexpr int FLOAT4_REG_SIZE</definition>
        <argsstring></argsstring>
        <name>FLOAT4_REG_SIZE</name>
        <initializer>= 4</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="cppStcodeAssembly.cpp" line="22" column="22" bodyfile="cppStcodeAssembly.cpp" bodystart="22" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="cppStcodeAssembly_8cpp_1a610c35d76407517452fa7c6a94431305" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>constexpr char</type>
        <definition>constexpr char STATIC_CONSTS_NAME_SUFFIX[]</definition>
        <argsstring>[]</argsstring>
        <name>STATIC_CONSTS_NAME_SUFFIX</name>
        <initializer>= &quot;_scbuf&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="cppStcodeAssembly.cpp" line="364" column="23" bodyfile="cppStcodeAssembly.cpp" bodystart="364" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="cppStcodeAssembly_8cpp_1a49a6eccb4b31ba1f1aab15930cd797d7" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>constexpr char</type>
        <definition>constexpr char STATIC_CONSTS_ARRAY_NAME[]</definition>
        <argsstring>[]</argsstring>
        <name>STATIC_CONSTS_ARRAY_NAME</name>
        <initializer>= &quot;stconst__&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="cppStcodeAssembly.cpp" line="365" column="23" bodyfile="cppStcodeAssembly.cpp" bodystart="365" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="cppStcodeAssembly_8cpp_1ada266307417fae1fff328afa688932b5" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>static const char * bool_to_str</definition>
        <argsstring>(bool val)</argsstring>
        <name>bool_to_str</name>
        <param>
          <type>bool</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="cppStcodeAssembly.cpp" line="20" column="19" bodyfile="cppStcodeAssembly.cpp" bodystart="20" bodyend="20"/>
      </memberdef>
      <memberdef kind="function" id="cppStcodeAssembly_8cpp_1a9d1e363e8d2fb36588de58a76aab9b0e" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void resolve_placeholder_at</definition>
        <argsstring>(eastl::string &amp;templ, size_t at, const char *substitute)</argsstring>
        <name>resolve_placeholder_at</name>
        <param>
          <type>eastl::string &amp;</type>
          <declname>templ</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>at</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>substitute</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="cppStcodeAssembly.cpp" line="24" column="13" bodyfile="cppStcodeAssembly.cpp" bodystart="24" bodyend="37"/>
      </memberdef>
      <memberdef kind="function" id="cppStcodeAssembly_8cpp_1ac7d284185aa29dcc57c99c34e703e74d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void resolve_first_placeholder</definition>
        <argsstring>(eastl::string &amp;templ, char placeholder, const char *substitute)</argsstring>
        <name>resolve_first_placeholder</name>
        <param>
          <type>eastl::string &amp;</type>
          <declname>templ</declname>
        </param>
        <param>
          <type>char</type>
          <declname>placeholder</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>substitute</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="cppStcodeAssembly.cpp" line="39" column="6" bodyfile="cppStcodeAssembly.cpp" bodystart="39" bodyend="45"/>
      </memberdef>
      <memberdef kind="function" id="cppStcodeAssembly_8cpp_1a10455266712ec35271fd7bd2295d04f3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void resolve_last_placeholder</definition>
        <argsstring>(eastl::string &amp;templ, char placeholder, const char *substitute)</argsstring>
        <name>resolve_last_placeholder</name>
        <param>
          <type>eastl::string &amp;</type>
          <declname>templ</declname>
        </param>
        <param>
          <type>char</type>
          <declname>placeholder</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>substitute</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="cppStcodeAssembly.cpp" line="47" column="6" bodyfile="cppStcodeAssembly.cpp" bodystart="47" bodyend="53"/>
      </memberdef>
      <memberdef kind="function" id="cppStcodeAssembly_8cpp_1a960ccd2a90b9cced70302d46bb07b7eb" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>static const char * stage_to_name_prefix</definition>
        <argsstring>(ShaderStage stage)</argsstring>
        <name>stage_to_name_prefix</name>
        <param>
          <type>ShaderStage</type>
          <declname>stage</declname>
        </param>
        <briefdescription>
<para><ref refid="structDynamicStcodeRoutine" kindref="compound">DynamicStcodeRoutine</ref> ///. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="cppStcodeAssembly.cpp" line="295" column="19" bodyfile="cppStcodeAssembly.cpp" bodystart="295" bodyend="304"/>
      </memberdef>
      <memberdef kind="function" id="cppStcodeAssembly_8cpp_1adad0258b84b04c7870108483ce1c3b3e" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>static const char * stage_to_name_suffix</definition>
        <argsstring>(ShaderStage stage)</argsstring>
        <name>stage_to_name_suffix</name>
        <param>
          <type>ShaderStage</type>
          <declname>stage</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="cppStcodeAssembly.cpp" line="305" column="19" bodyfile="cppStcodeAssembly.cpp" bodystart="305" bodyend="314"/>
      </memberdef>
      <memberdef kind="function" id="cppStcodeAssembly_8cpp_1a359d9681f3e0f778ec9dcd119da68205" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>static const char * stage_to_static_tex_name_suffix</definition>
        <argsstring>(ShaderStage stage)</argsstring>
        <name>stage_to_static_tex_name_suffix</name>
        <param>
          <type>ShaderStage</type>
          <declname>stage</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="cppStcodeAssembly.cpp" line="315" column="19" bodyfile="cppStcodeAssembly.cpp" bodystart="315" bodyend="323"/>
      </memberdef>
      <memberdef kind="function" id="cppStcodeAssembly_8cpp_1a80dab0ddbbfb67452659b9cf3d3aa609" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>static const char * stage_to_runtime_const_str</definition>
        <argsstring>(ShaderStage stage)</argsstring>
        <name>stage_to_runtime_const_str</name>
        <param>
          <type>ShaderStage</type>
          <declname>stage</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="cppStcodeAssembly.cpp" line="324" column="19" bodyfile="cppStcodeAssembly.cpp" bodystart="324" bodyend="333"/>
      </memberdef>
      <memberdef kind="function" id="cppStcodeAssembly_8cpp_1ac44891af7cf3e273a7abd97e1385df26" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>static const char * stage_to_const_array_name</definition>
        <argsstring>(ShaderStage stage)</argsstring>
        <name>stage_to_const_array_name</name>
        <param>
          <type>ShaderStage</type>
          <declname>stage</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="cppStcodeAssembly.cpp" line="334" column="19" bodyfile="cppStcodeAssembly.cpp" bodystart="334" bodyend="343"/>
      </memberdef>
      <memberdef kind="function" id="cppStcodeAssembly_8cpp_1a17e68c3f4ae4bd05a5945f993aaea569" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>static const char * stage_to_tex_array_name</definition>
        <argsstring>(ShaderStage stage)</argsstring>
        <name>stage_to_tex_array_name</name>
        <param>
          <type>ShaderStage</type>
          <declname>stage</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="cppStcodeAssembly.cpp" line="344" column="19" bodyfile="cppStcodeAssembly.cpp" bodystart="344" bodyend="352"/>
      </memberdef>
      <memberdef kind="function" id="cppStcodeAssembly_8cpp_1a8e5a31db2dd9695f45677ebc8c810e01" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>auto</type>
        <definition>static auto stage_to_dyn_const_range_names</definition>
        <argsstring>(ShaderStage stage)</argsstring>
        <name>stage_to_dyn_const_range_names</name>
        <param>
          <type>ShaderStage</type>
          <declname>stage</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="cppStcodeAssembly.cpp" line="353" column="13" bodyfile="cppStcodeAssembly.cpp" bodystart="353" bodyend="362"/>
      </memberdef>
      <memberdef kind="function" id="cppStcodeAssembly_8cpp_1a80e6204065b3dfa5a58c36801b0f31bc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char * glob_matrix_cb_name</definition>
        <argsstring>(StcodeRoutine::GlobMatrixType type)</argsstring>
        <name>glob_matrix_cb_name</name>
        <param>
          <type><ref refid="structStcodeRoutine_1a8ea93f019765304f450c1924cb84c52c" kindref="member">StcodeRoutine::GlobMatrixType</ref></type>
          <declname>type</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="cppStcodeAssembly.cpp" line="449" column="12" bodyfile="cppStcodeAssembly.cpp" bodystart="449" bodyend="458"/>
      </memberdef>
      <memberdef kind="function" id="cppStcodeAssembly_8cpp_1a443633f3f0e0068a62e3b017400f2908" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>static const char * resource_cb_name</definition>
        <argsstring>(StcodeRoutine::ResourceType type)</argsstring>
        <name>resource_cb_name</name>
        <param>
          <type><ref refid="structStcodeRoutine_1a52f41230f067f3067000adef9bfb5eb9" kindref="member">StcodeRoutine::ResourceType</ref></type>
          <declname>type</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="cppStcodeAssembly.cpp" line="497" column="19" bodyfile="cppStcodeAssembly.cpp" bodystart="497" bodyend="510"/>
      </memberdef>
      <memberdef kind="function" id="cppStcodeAssembly_8cpp_1a55a67ba21f30307fbe0c198dbb31e00c" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>static const char * get_shader_const_type_name</definition>
        <argsstring>(ShaderVarType type, semantic::VariableType vt)</argsstring>
        <name>get_shader_const_type_name</name>
        <param>
          <type>ShaderVarType</type>
          <declname>type</declname>
        </param>
        <param>
          <type><ref refid="namespacesemantic_1a1fd7ba909c618ad56fbacae8b3226182" kindref="member">semantic::VariableType</ref></type>
          <declname>vt</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="cppStcodeAssembly.cpp" line="545" column="19" bodyfile="cppStcodeAssembly.cpp" bodystart="545" bodyend="562"/>
      </memberdef>
      <memberdef kind="function" id="cppStcodeAssembly_8cpp_1a869b6a96c9f9f176636ea5441ef7dd17" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>static bool shader_const_is_numeric</definition>
        <argsstring>(ShaderVarType shvt)</argsstring>
        <name>shader_const_is_numeric</name>
        <param>
          <type>ShaderVarType</type>
          <declname>shvt</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="cppStcodeAssembly.cpp" line="564" column="13" bodyfile="cppStcodeAssembly.cpp" bodystart="564" bodyend="567"/>
      </memberdef>
      <memberdef kind="function" id="cppStcodeAssembly_8cpp_1a605a50accf6b52d1660c12fec4149e0a" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>static bool is_prefix</definition>
        <argsstring>(dag::ConstSpan&lt; int &gt; table, dag::ConstSpan&lt; int &gt; enclosing_table)</argsstring>
        <name>is_prefix</name>
        <param>
          <type>dag::ConstSpan&lt; int &gt;</type>
          <declname>table</declname>
        </param>
        <param>
          <type>dag::ConstSpan&lt; int &gt;</type>
          <declname>enclosing_table</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="cppStcodeAssembly.cpp" line="809" column="13" bodyfile="cppStcodeAssembly.cpp" bodystart="809" bodyend="813"/>
      </memberdef>
      <memberdef kind="function" id="cppStcodeAssembly_8cpp_1a2c012ace901a1b501d5bd9eddb64a39a" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int get_table_header_size</definition>
        <argsstring>(bool is_compute)</argsstring>
        <name>get_table_header_size</name>
        <param>
          <type>bool</type>
          <declname>is_compute</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="cppStcodeAssembly.cpp" line="962" column="12" bodyfile="cppStcodeAssembly.cpp" bodystart="962" bodyend="966"/>
      </memberdef>
      <memberdef kind="function" id="cppStcodeAssembly_8cpp_1a49e0fce26520163288afcb011cad522e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="cppStcodeAssembly_8h_1ae3c630fb38a98930f6217a99d6e16e4c" kindref="member">StcodePassRegInfoTable</ref></type>
        <definition>StcodePassRegInfoTable build_pass_stcode_reg_table</definition>
        <argsstring>(const ShaderSemCode &amp;semcode)</argsstring>
        <name>build_pass_stcode_reg_table</name>
        <param>
          <type>const <ref refid="classShaderSemCode" kindref="compound">ShaderSemCode</ref> &amp;</type>
          <declname>semcode</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="cppStcodeAssembly.cpp" line="968" column="24" bodyfile="cppStcodeAssembly.cpp" bodystart="968" bodyend="1027"/>
      </memberdef>
      <memberdef kind="function" id="cppStcodeAssembly_8cpp_1a42bbc67d92e4cab7ad2fb4ef54ec5f86" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>auto</type>
        <definition>static auto fetch_unique_reg_names</definition>
        <argsstring>(const StcodePassRegInfoTable &amp;table)</argsstring>
        <name>fetch_unique_reg_names</name>
        <param>
          <type>const <ref refid="cppStcodeAssembly_8h_1ae3c630fb38a98930f6217a99d6e16e4c" kindref="member">StcodePassRegInfoTable</ref> &amp;</type>
          <declname>table</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="cppStcodeAssembly.cpp" line="1029" column="13" bodyfile="cppStcodeAssembly.cpp" bodystart="1029" bodyend="1039"/>
      </memberdef>
      <memberdef kind="function" id="cppStcodeAssembly_8cpp_1a220e59c8493edc513dca5d1fd94d5a28" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structStcodeBranchedRoutineDataTable" kindref="compound">StcodeBranchedRoutineDataTable</ref></type>
        <definition>StcodeBranchedRoutineDataTable build_pass_reg_tables_for_branched_dynstcode</definition>
        <argsstring>(const StcodePassRegInfoTable &amp;passRegsTable, DynamicStcodeRoutine &amp;branched_routine)</argsstring>
        <name>build_pass_reg_tables_for_branched_dynstcode</name>
        <param>
          <type>const <ref refid="cppStcodeAssembly_8h_1ae3c630fb38a98930f6217a99d6e16e4c" kindref="member">StcodePassRegInfoTable</ref> &amp;</type>
          <declname>passRegsTable</declname>
        </param>
        <param>
          <type><ref refid="structDynamicStcodeRoutine" kindref="compound">DynamicStcodeRoutine</ref> &amp;</type>
          <declname>branched_routine</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="cppStcodeAssembly.cpp" line="1041" column="32" bodyfile="cppStcodeAssembly.cpp" bodystart="1041" bodyend="1093"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/>Copyright<sp/>(C)<sp/>Gaijin<sp/>Games<sp/>KFT.<sp/><sp/>All<sp/>rights<sp/>reserved.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="cppStcodeAssembly_8h" kindref="compound">cppStcodeAssembly.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="cppStcode_8h" kindref="compound">cppStcode.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="cppStcodeUtils_8h" kindref="compound">cppStcodeUtils.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="cppStcodeBuilder_8h" kindref="compound">cppStcodeBuilder.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="variantSemantic_8h" kindref="compound">variantSemantic.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="shSemCode_8h" kindref="compound">shSemCode.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="globalConfig_8h" kindref="compound">globalConfig.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="commonUtils_8h" kindref="compound">commonUtils.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;debug/dag_assert.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;EASTL/string.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;EASTL/algorithm.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;util/dag_string.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;util/dag_stlqsort.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;generic/dag_enumerate.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">shader_layout::StcodeConstValidationMask;</highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*bool_to_str(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>val)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>val<sp/>?<sp/></highlight><highlight class="stringliteral">&quot;true&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;false&quot;</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>FLOAT4_REG_SIZE<sp/>=<sp/>4;</highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>resolve_placeholder_at(eastl::string<sp/>&amp;templ,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>at,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*substitute)</highlight></codeline>
<codeline lineno="25"><highlight class="normal">{</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/>G_ASSERT(at<sp/>&lt;<sp/>templ.length());</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*p<sp/>=<sp/>templ.begin()<sp/>+<sp/>at;</highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>subsLen<sp/>=<sp/>strlen(substitute);</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/>eastl::string<sp/>dst;</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/>dst.resize(templ.size()<sp/>-<sp/>1<sp/>+<sp/>subsLen);</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/>eastl::copy(templ.cbegin(),<sp/>p,<sp/>dst.begin());</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/>eastl::copy_n(substitute,<sp/>subsLen,<sp/>dst.begin()<sp/>+<sp/>(p<sp/>-<sp/>templ.begin()));</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/>eastl::copy(p<sp/>+<sp/>1,<sp/>templ.cend(),<sp/>dst.begin()<sp/>+<sp/>(p<sp/>+<sp/>subsLen<sp/>-<sp/>templ.begin()));</highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/>templ<sp/>=<sp/>eastl::move(dst);</highlight></codeline>
<codeline lineno="37"><highlight class="normal">}</highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="cppStcodeAssembly_8cpp_1ac7d284185aa29dcc57c99c34e703e74d" kindref="member">resolve_first_placeholder</ref>(eastl::string<sp/>&amp;templ,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>placeholder,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*substitute)</highlight></codeline>
<codeline lineno="40"><highlight class="normal">{</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*p<sp/>=<sp/>strchr(templ.begin(),<sp/>placeholder);</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/>G_ASSERTF(p,<sp/></highlight><highlight class="stringliteral">&quot;The<sp/>template<sp/>\&quot;%s\&quot;<sp/>does<sp/>not<sp/>contain<sp/>the<sp/>placeholder<sp/>&apos;%c&apos;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/>resolve_placeholder_at(templ,<sp/>p<sp/>-<sp/>templ.begin(),<sp/>substitute);</highlight></codeline>
<codeline lineno="45"><highlight class="normal">}</highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="cppStcodeAssembly_8cpp_1a10455266712ec35271fd7bd2295d04f3" kindref="member">resolve_last_placeholder</ref>(eastl::string<sp/>&amp;templ,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>placeholder,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*substitute)</highlight></codeline>
<codeline lineno="48"><highlight class="normal">{</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*p<sp/>=<sp/>strrchr(templ.begin(),<sp/>placeholder);</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/>G_ASSERTF(p,<sp/></highlight><highlight class="stringliteral">&quot;The<sp/>template<sp/>\&quot;%s\&quot;<sp/>does<sp/>not<sp/>contain<sp/>the<sp/>placeholder<sp/>&apos;%c&apos;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/>resolve_placeholder_at(templ,<sp/>p<sp/>-<sp/>templ.begin(),<sp/>substitute);</highlight></codeline>
<codeline lineno="53"><highlight class="normal">}</highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="structStcodeExpression_1a8b51ba11b686a94c48b82ece54692900" kindref="member">StcodeExpression::specifyNextExprElement</ref>(ElementType<sp/>elem_type,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*arg1,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*arg2,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*arg3,</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*arg4)</highlight></codeline>
<codeline lineno="58"><highlight class="normal">{</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><ref refid="cppStcode_8h_1ac560d55d8ba0d82453054cbc1050fc7b" kindref="member">RET_IF_SHOULD_NOT_COMPILE</ref>();</highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/>G_ASSERT(strchr(<ref refid="structStcodeExpression_1a0a933497c253764e2ba3260b2b8dc320" kindref="member">content</ref>.c_str(),<sp/><ref refid="structStcodeExpression_1a79279ff102576c512783b8af33d787b0" kindref="member">EXPR_ELEMENT_PLACEHOLDER</ref>));</highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/>eastl::string<sp/>element{};</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(elem_type)</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="structStcodeExpression_1aaccadc8df002bf4a50f3700badd92c59ab7230d8c2a8a24512f1433490edc73fd" kindref="member">ElementType::COMPLEX_SINGLE_OP</ref>:</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>G_ASSERT(!arg1<sp/>&amp;&amp;<sp/>!arg2<sp/>&amp;&amp;<sp/>!arg3<sp/>&amp;&amp;<sp/>!arg4);</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>element<sp/>=<sp/><ref refid="commonUtils_8h_1a423a5cbb08af4695251ec87aa21a5fe1" kindref="member">string_f</ref>(</highlight><highlight class="stringliteral">&quot;%c%c&quot;</highlight><highlight class="normal">,<sp/><ref refid="structStcodeExpression_1aa7457777ae06838c04d70ce7c0095fb3" kindref="member">EXPR_UNARY_OP_PLACEHOLDER</ref>,<sp/><ref refid="structStcodeExpression_1a79279ff102576c512783b8af33d787b0" kindref="member">EXPR_ELEMENT_PLACEHOLDER</ref>);</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="structStcodeExpression_1aaccadc8df002bf4a50f3700badd92c59ab25f998178cd8c758b196d11f2684c86" kindref="member">ElementType::COLORVAL</ref>:</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>G_ASSERT(!arg2<sp/>&amp;&amp;<sp/>!arg3<sp/>&amp;&amp;<sp/>!arg4);</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>element<sp/>=<sp/><ref refid="commonUtils_8h_1a423a5cbb08af4695251ec87aa21a5fe1" kindref="member">string_f</ref>(</highlight><highlight class="stringliteral">&quot;%s4(%c,<sp/>%c,<sp/>%c,<sp/>%c)&quot;</highlight><highlight class="normal">,<sp/>arg1<sp/>?<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)arg1<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;float&quot;</highlight><highlight class="normal">,<sp/><ref refid="structStcodeExpression_1a79279ff102576c512783b8af33d787b0" kindref="member">EXPR_ELEMENT_PLACEHOLDER</ref>,</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structStcodeExpression_1a79279ff102576c512783b8af33d787b0" kindref="member">EXPR_ELEMENT_PLACEHOLDER</ref>,<sp/><ref refid="structStcodeExpression_1a79279ff102576c512783b8af33d787b0" kindref="member">EXPR_ELEMENT_PLACEHOLDER</ref>,<sp/><ref refid="structStcodeExpression_1a79279ff102576c512783b8af33d787b0" kindref="member">EXPR_ELEMENT_PLACEHOLDER</ref>);</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="structStcodeExpression_1aaccadc8df002bf4a50f3700badd92c59a3e76310ec68ca96f5a593b5ca640b304" kindref="member">ElementType::GLOBVAR</ref>:</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>G_ASSERT(arg1<sp/>&amp;&amp;<sp/>!arg4);</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>eastl::string<sp/>varDereference;</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>needPointerDeref<sp/>=<sp/>bool(arg3);</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strchr((</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)arg1,<sp/></highlight><highlight class="charliteral">&apos;[&apos;</highlight><highlight class="normal">))<sp/></highlight><highlight class="comment">//<sp/>This<sp/>means,<sp/>that<sp/>variable<sp/>name<sp/>is<sp/>and<sp/>index<sp/>into<sp/>an<sp/>array<sp/>(arr[i])</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>varDereference<sp/>=<sp/>eastl::string((</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)arg1);</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(needPointerDeref)</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>varDereference<sp/>=<sp/><ref refid="commonUtils_8h_1a423a5cbb08af4695251ec87aa21a5fe1" kindref="member">string_f</ref>(</highlight><highlight class="stringliteral">&quot;(*%s)&quot;</highlight><highlight class="normal">,<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)arg1);</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>varDereference<sp/>=<sp/><ref refid="commonUtils_8h_1a423a5cbb08af4695251ec87aa21a5fe1" kindref="member">string_f</ref>(</highlight><highlight class="stringliteral">&quot;%s&quot;</highlight><highlight class="normal">,<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)arg1);</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>eastl::string<sp/>typeCast<sp/>=<sp/>arg2<sp/>?<sp/><ref refid="commonUtils_8h_1a423a5cbb08af4695251ec87aa21a5fe1" kindref="member">string_f</ref>(</highlight><highlight class="stringliteral">&quot;(%s)&quot;</highlight><highlight class="normal">,<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)arg2)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>element<sp/>=<sp/><ref refid="commonUtils_8h_1a423a5cbb08af4695251ec87aa21a5fe1" kindref="member">string_f</ref>(</highlight><highlight class="stringliteral">&quot;(%c%s%s)&quot;</highlight><highlight class="normal">,<sp/><ref refid="structStcodeExpression_1aa7457777ae06838c04d70ce7c0095fb3" kindref="member">EXPR_UNARY_OP_PLACEHOLDER</ref>,<sp/>typeCast.c_str(),<sp/>varDereference.c_str());</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="structStcodeExpression_1aaccadc8df002bf4a50f3700badd92c59a39c2c52380c55eebeef3660ad99c19e8" kindref="member">ElementType::LOCVAR</ref>:</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>G_ASSERT(arg1<sp/>&amp;&amp;<sp/>!arg3<sp/>&amp;&amp;<sp/>!arg4);</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>eastl::string<sp/>typeCast<sp/>=<sp/>arg2<sp/>?<sp/><ref refid="commonUtils_8h_1a423a5cbb08af4695251ec87aa21a5fe1" kindref="member">string_f</ref>(</highlight><highlight class="stringliteral">&quot;(%s)&quot;</highlight><highlight class="normal">,<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)arg2)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>element<sp/>=<sp/><ref refid="commonUtils_8h_1a423a5cbb08af4695251ec87aa21a5fe1" kindref="member">string_f</ref>(</highlight><highlight class="stringliteral">&quot;(%c%s%s)&quot;</highlight><highlight class="normal">,<sp/><ref refid="structStcodeExpression_1aa7457777ae06838c04d70ce7c0095fb3" kindref="member">EXPR_UNARY_OP_PLACEHOLDER</ref>,<sp/>typeCast.c_str(),<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)arg1);</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="structStcodeExpression_1aaccadc8df002bf4a50f3700badd92c59afd3c4b3f69f8d37b82044b0c07d7f4dd" kindref="member">ElementType::REAL_CONST</ref>:</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>G_ASSERT(arg1<sp/>&amp;&amp;<sp/>!arg2<sp/>&amp;&amp;<sp/>!arg3<sp/>&amp;&amp;<sp/>!arg4);</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>element<sp/>=<sp/><ref refid="commonUtils_8h_1a423a5cbb08af4695251ec87aa21a5fe1" kindref="member">string_f</ref>(</highlight><highlight class="stringliteral">&quot;%.8ff&quot;</highlight><highlight class="normal">,<sp/>*(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*)arg1);</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="structStcodeExpression_1aaccadc8df002bf4a50f3700badd92c59a4c6783e0d3b3d7c183a6b0eca466f0ab" kindref="member">ElementType::INT_CONST</ref>:</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>G_ASSERT(arg1<sp/>&amp;&amp;<sp/>!arg2<sp/>&amp;&amp;<sp/>!arg3<sp/>&amp;&amp;<sp/>!arg4);</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>element<sp/>=<sp/><ref refid="commonUtils_8h_1a423a5cbb08af4695251ec87aa21a5fe1" kindref="member">string_f</ref>(</highlight><highlight class="stringliteral">&quot;%d&quot;</highlight><highlight class="normal">,<sp/>*(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*)arg1);</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="structStcodeExpression_1aaccadc8df002bf4a50f3700badd92c59a39b30de9c4f3bd4b6594d3a83be14928" kindref="member">ElementType::SINGLE_CHANNEL_MASK</ref>:</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>G_ASSERT(arg1<sp/>&amp;&amp;<sp/>!arg2<sp/>&amp;&amp;<sp/>!arg3<sp/>&amp;&amp;<sp/>!arg4);</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>channelSymbol<sp/>=<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(*(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>shexpr::ColorChannel<sp/>*)arg1)</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>shexpr::CC_R:<sp/>channelSymbol<sp/>=<sp/></highlight><highlight class="charliteral">&apos;r&apos;</highlight><highlight class="normal">;<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>shexpr::CC_G:<sp/>channelSymbol<sp/>=<sp/></highlight><highlight class="charliteral">&apos;g&apos;</highlight><highlight class="normal">;<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>shexpr::CC_B:<sp/>channelSymbol<sp/>=<sp/></highlight><highlight class="charliteral">&apos;b&apos;</highlight><highlight class="normal">;<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>shexpr::CC_A:<sp/>channelSymbol<sp/>=<sp/></highlight><highlight class="charliteral">&apos;a&apos;</highlight><highlight class="normal">;<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="115"><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:<sp/>G_ASSERT(0);</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>element<sp/>=<sp/><ref refid="commonUtils_8h_1a423a5cbb08af4695251ec87aa21a5fe1" kindref="member">string_f</ref>(</highlight><highlight class="stringliteral">&quot;%c.%c&quot;</highlight><highlight class="normal">,<sp/><ref refid="structStcodeExpression_1a79279ff102576c512783b8af33d787b0" kindref="member">EXPR_ELEMENT_PLACEHOLDER</ref>,<sp/>channelSymbol);</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="structStcodeExpression_1aaccadc8df002bf4a50f3700badd92c59affa369d68551d973da92416b3b9159a9" kindref="member">ElementType::MULTIPLE_CHANNEL_MASK</ref>:</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>G_ASSERT(arg1<sp/>&amp;&amp;<sp/>!arg2<sp/>&amp;&amp;<sp/>!arg3<sp/>&amp;&amp;<sp/>!arg4);</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>element<sp/>=<sp/><ref refid="commonUtils_8h_1a423a5cbb08af4695251ec87aa21a5fe1" kindref="member">string_f</ref>(</highlight><highlight class="stringliteral">&quot;%c.swizzle(\&quot;%s\&quot;)&quot;</highlight><highlight class="normal">,<sp/><ref refid="structStcodeExpression_1a79279ff102576c512783b8af33d787b0" kindref="member">EXPR_ELEMENT_PLACEHOLDER</ref>,<sp/>arg1);</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="structStcodeExpression_1aaccadc8df002bf4a50f3700badd92c59ad692dff7ebc54a9feb3145854afc4b2e" kindref="member">ElementType::COMPLEX_MULTIPLE_OPS</ref>:</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>G_ASSERT(arg1<sp/>&amp;&amp;<sp/>arg2<sp/>&amp;&amp;<sp/>!arg3<sp/>&amp;&amp;<sp/>!arg4);</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>shexpr::BinaryOperator<sp/>*opsData<sp/>=<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>shexpr::BinaryOperator<sp/>*)arg1;</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>opCount<sp/>=<sp/>*(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*)arg2;</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>dag::ConstSpan&lt;shexpr::BinaryOperator&gt;<sp/>ops<sp/>=<sp/>make_span_const(opsData,<sp/>opCount);</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classStcodeBuilder" kindref="compound">StcodeBuilder</ref><sp/>exprPlaceholder;<sp/></highlight><highlight class="comment">//<sp/>placeholder<sp/>for<sp/>first<sp/>operand</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>exprPlaceholder.<ref refid="classStcodeBuilder_1a75203805b3d48da057cbe761021e19b3" kindref="member">emplaceBackFmt</ref>(</highlight><highlight class="stringliteral">&quot;%c&quot;</highlight><highlight class="normal">,<sp/><ref refid="structStcodeExpression_1a79279ff102576c512783b8af33d787b0" kindref="member">EXPR_ELEMENT_PLACEHOLDER</ref>);</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>op<sp/>:<sp/>ops)</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>opSymbol<sp/>=<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(op)</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>shexpr::OP_ADD:<sp/>opSymbol<sp/>=<sp/></highlight><highlight class="charliteral">&apos;+&apos;</highlight><highlight class="normal">;<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>shexpr::OP_SUB:<sp/>opSymbol<sp/>=<sp/></highlight><highlight class="charliteral">&apos;-&apos;</highlight><highlight class="normal">;<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>shexpr::OP_MUL:<sp/>opSymbol<sp/>=<sp/></highlight><highlight class="charliteral">&apos;*&apos;</highlight><highlight class="normal">;<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>shexpr::OP_DIV:<sp/>opSymbol<sp/>=<sp/></highlight><highlight class="charliteral">&apos;/&apos;</highlight><highlight class="normal">;<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:<sp/>G_ASSERT(0);</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>exprPlaceholder.<ref refid="classStcodeBuilder_1a75203805b3d48da057cbe761021e19b3" kindref="member">emplaceBackFmt</ref>(</highlight><highlight class="stringliteral">&quot;<sp/>%c<sp/>%c&quot;</highlight><highlight class="normal">,<sp/>opSymbol,<sp/><ref refid="structStcodeExpression_1a79279ff102576c512783b8af33d787b0" kindref="member">EXPR_ELEMENT_PLACEHOLDER</ref>);</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="146"><highlight class="normal"></highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>element<sp/>=<sp/><ref refid="commonUtils_8h_1a423a5cbb08af4695251ec87aa21a5fe1" kindref="member">string_f</ref>(</highlight><highlight class="stringliteral">&quot;%c(%s)&quot;</highlight><highlight class="normal">,<sp/><ref refid="structStcodeExpression_1aa7457777ae06838c04d70ce7c0095fb3" kindref="member">EXPR_UNARY_OP_PLACEHOLDER</ref>,<sp/>exprPlaceholder.<ref refid="classStcodeBuilder_1af800507e36690d738a1633c2d922df74" kindref="member">release</ref>().c_str());</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="structStcodeExpression_1aaccadc8df002bf4a50f3700badd92c59a4bedf2a9395e6be97ed06ff72a388859" kindref="member">ElementType::SHVAR</ref>:</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>G_ASSERT(arg1<sp/>&amp;&amp;<sp/>arg2);</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>eastl::string<sp/>typeCast<sp/>=<sp/>arg3<sp/>?<sp/><ref refid="commonUtils_8h_1a423a5cbb08af4695251ec87aa21a5fe1" kindref="member">string_f</ref>(</highlight><highlight class="stringliteral">&quot;(%s)&quot;</highlight><highlight class="normal">,<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)arg3)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isResource<sp/>=<sp/>bool(arg4);</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>element<sp/>=<sp/><ref refid="commonUtils_8h_1a423a5cbb08af4695251ec87aa21a5fe1" kindref="member">string_f</ref>(</highlight><highlight class="stringliteral">&quot;(%c%s%s(%s,<sp/>%s))&quot;</highlight><highlight class="normal">,<sp/><ref refid="structStcodeExpression_1aa7457777ae06838c04d70ce7c0095fb3" kindref="member">EXPR_UNARY_OP_PLACEHOLDER</ref>,<sp/>typeCast.c_str(),<sp/>isResource<sp/>?<sp/></highlight><highlight class="stringliteral">&quot;VARLOC&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;VAR&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(const<sp/>char<sp/>*)arg1,<sp/>(const<sp/>char<sp/>*)arg2);</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="structStcodeExpression_1aaccadc8df002bf4a50f3700badd92c59a1e49c8ad07b69571bfcafaf18ac9fa5b" kindref="member">ElementType::FUNC</ref>:</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>G_ASSERT(arg1<sp/>&amp;&amp;<sp/>arg2<sp/>&amp;&amp;<sp/>!arg3<sp/>&amp;&amp;<sp/>!arg4);</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*name<sp/>=<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)arg1;</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>argCount<sp/>=<sp/>*(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>*)arg2;</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>functional::FunctionId<sp/>funcId;</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>G_ASSERT(<ref refid="namespacefunctional_1a7398fb0db52b383c5dce91d1b119e7c2" kindref="member">functional::getFuncId</ref>(name,<sp/>funcId));</highlight></codeline>
<codeline lineno="167"><highlight class="normal"></highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>element<sp/>=<sp/><ref refid="structStcodeExpression_1a3e9c68af48104649b72114b1b8dd4e6c" kindref="member">getFunctionCallTemplate</ref>(funcId,<sp/>name,<sp/>argCount);</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="structStcodeExpression_1aaccadc8df002bf4a50f3700badd92c59ac94814fe3bae87cddef85c5e9ae4b63c" kindref="member">ElementType::COLOR_CONST</ref>:</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>G_ASSERT(arg1<sp/>&amp;&amp;<sp/>arg2<sp/>&amp;&amp;<sp/>arg3<sp/>&amp;&amp;<sp/>arg4);</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>element<sp/>=<sp/><ref refid="commonUtils_8h_1a423a5cbb08af4695251ec87aa21a5fe1" kindref="member">string_f</ref>(</highlight><highlight class="stringliteral">&quot;float4(%.8ff,<sp/>%.8ff,<sp/>%.8ff,<sp/>%.8ff)&quot;</highlight><highlight class="normal">,<sp/>*(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*)arg1,<sp/>*(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*)arg2,<sp/>*(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*)arg3,</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*)arg4);</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="176"><highlight class="normal"></highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:<sp/>G_ASSERT(0);</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="179"><highlight class="normal"></highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><ref refid="cppStcodeAssembly_8cpp_1ac7d284185aa29dcc57c99c34e703e74d" kindref="member">resolve_first_placeholder</ref>(<ref refid="structStcodeExpression_1a0a933497c253764e2ba3260b2b8dc320" kindref="member">content</ref>,<sp/><ref refid="structStcodeExpression_1a79279ff102576c512783b8af33d787b0" kindref="member">EXPR_ELEMENT_PLACEHOLDER</ref>,<sp/>element.c_str());</highlight></codeline>
<codeline lineno="181"><highlight class="normal">}</highlight></codeline>
<codeline lineno="182"><highlight class="normal"></highlight></codeline>
<codeline lineno="183"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="structStcodeExpression_1af33ad75172183c87461bdade64cbdaf2" kindref="member">StcodeExpression::specifyNextExprUnaryOp</ref>(shexpr::UnaryOperator<sp/>op)</highlight></codeline>
<codeline lineno="184"><highlight class="normal">{</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><ref refid="cppStcode_8h_1ac560d55d8ba0d82453054cbc1050fc7b" kindref="member">RET_IF_SHOULD_NOT_COMPILE</ref>();</highlight></codeline>
<codeline lineno="186"><highlight class="normal"></highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/>G_ASSERT(strchr(<ref refid="structStcodeExpression_1a0a933497c253764e2ba3260b2b8dc320" kindref="member">content</ref>.c_str(),<sp/><ref refid="structStcodeExpression_1aa7457777ae06838c04d70ce7c0095fb3" kindref="member">EXPR_UNARY_OP_PLACEHOLDER</ref>));</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>@NOTE:<sp/>because<sp/>we<sp/>specify<sp/>unary<sp/>ops<sp/>while<sp/>unwinding,<sp/>the<sp/>placeholders<sp/>have<sp/>to<sp/>be<sp/>resolved<sp/>in<sp/>reverse<sp/>order</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><ref refid="cppStcodeAssembly_8cpp_1a10455266712ec35271fd7bd2295d04f3" kindref="member">resolve_last_placeholder</ref>(<ref refid="structStcodeExpression_1a0a933497c253764e2ba3260b2b8dc320" kindref="member">content</ref>,<sp/><ref refid="structStcodeExpression_1aa7457777ae06838c04d70ce7c0095fb3" kindref="member">EXPR_UNARY_OP_PLACEHOLDER</ref>,<sp/>op<sp/>==<sp/>shexpr::UOP_NEGATIVE<sp/>?<sp/></highlight><highlight class="stringliteral">&quot;-&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="190"><highlight class="normal">}</highlight></codeline>
<codeline lineno="191"><highlight class="normal"></highlight></codeline>
<codeline lineno="192"><highlight class="normal">eastl::string<sp/><ref refid="structStcodeExpression_1a37c7fd3237bc1d47dde0b62b9daf1486" kindref="member">StcodeExpression::releaseAssembledCode</ref>()</highlight></codeline>
<codeline lineno="193"><highlight class="normal">{</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><ref refid="cppStcode_8h_1ac560d55d8ba0d82453054cbc1050fc7b" kindref="member">RET_IF_SHOULD_NOT_COMPILE</ref>({});</highlight></codeline>
<codeline lineno="195"><highlight class="normal"></highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/>G_ASSERT(!strchr(<ref refid="structStcodeExpression_1a0a933497c253764e2ba3260b2b8dc320" kindref="member">content</ref>.c_str(),<sp/><ref refid="structStcodeExpression_1a79279ff102576c512783b8af33d787b0" kindref="member">EXPR_ELEMENT_PLACEHOLDER</ref>)<sp/>&amp;&amp;<sp/>!strchr(<ref refid="structStcodeExpression_1a0a933497c253764e2ba3260b2b8dc320" kindref="member">content</ref>.c_str(),<sp/><ref refid="structStcodeExpression_1aa7457777ae06838c04d70ce7c0095fb3" kindref="member">EXPR_UNARY_OP_PLACEHOLDER</ref>));</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>eastl::move(<ref refid="structStcodeExpression_1a0a933497c253764e2ba3260b2b8dc320" kindref="member">content</ref>);</highlight></codeline>
<codeline lineno="198"><highlight class="normal">}</highlight></codeline>
<codeline lineno="199"><highlight class="normal"></highlight></codeline>
<codeline lineno="200"><highlight class="normal">eastl::string<sp/><ref refid="structStcodeExpression_1a3e9c68af48104649b72114b1b8dd4e6c" kindref="member">StcodeExpression::getFunctionCallTemplate</ref>(functional::FunctionId<sp/>func_id,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*name,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>arg_cnt)</highlight></codeline>
<codeline lineno="201"><highlight class="normal">{</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>@NOTE:<sp/>fade_val<sp/>actually<sp/>takes<sp/>2<sp/>args,<sp/>the<sp/>first<sp/>being<sp/>a<sp/>call<sp/>to<sp/>get_shader_global_time_phase<sp/>with<sp/>2<sp/>args<sp/>itself.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Here<sp/>it<sp/>is<sp/>more<sp/>appropriate<sp/>to<sp/>handle<sp/>this<sp/>as<sp/>two<sp/>calls.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(func_id<sp/>==<sp/>functional::BF_FADE_VAL)</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/>--arg_cnt;</highlight></codeline>
<codeline lineno="206"><highlight class="normal"></highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><ref refid="classStcodeBuilder" kindref="compound">StcodeBuilder</ref><sp/>argsPlaceholder;</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>arg_cnt;<sp/>i++)</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/>argsPlaceholder.<ref refid="classStcodeBuilder_1a75203805b3d48da057cbe761021e19b3" kindref="member">emplaceBackFmt</ref>(</highlight><highlight class="stringliteral">&quot;%s%c&quot;</highlight><highlight class="normal">,<sp/>i<sp/>==<sp/>0<sp/>?<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>&quot;</highlight><highlight class="normal">,<sp/><ref refid="structStcodeExpression_1a79279ff102576c512783b8af33d787b0" kindref="member">EXPR_ELEMENT_PLACEHOLDER</ref>);</highlight></codeline>
<codeline lineno="210"><highlight class="normal"></highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(func_id)</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>functional::BF_POW:</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>functional::BF_SQRT:</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>functional::BF_MIN:</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>functional::BF_MAX:</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>functional::BF_FSEL:</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>functional::BF_SIN:</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>functional::BF_COS:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="commonUtils_8h_1a423a5cbb08af4695251ec87aa21a5fe1" kindref="member">string_f</ref>(</highlight><highlight class="stringliteral">&quot;v%s(%s)&quot;</highlight><highlight class="normal">,<sp/>name,<sp/>argsPlaceholder.<ref refid="classStcodeBuilder_1af800507e36690d738a1633c2d922df74" kindref="member">release</ref>().c_str());</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>functional::BF_VECPOW:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="commonUtils_8h_1a423a5cbb08af4695251ec87aa21a5fe1" kindref="member">string_f</ref>(</highlight><highlight class="stringliteral">&quot;vpow(%s)&quot;</highlight><highlight class="normal">,<sp/>argsPlaceholder.<ref refid="classStcodeBuilder_1af800507e36690d738a1633c2d922df74" kindref="member">release</ref>().c_str());</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>functional::BF_SRGBREAD:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="commonUtils_8h_1a423a5cbb08af4695251ec87aa21a5fe1" kindref="member">string_f</ref>(</highlight><highlight class="stringliteral">&quot;srgb_read(%s)&quot;</highlight><highlight class="normal">,<sp/>argsPlaceholder.<ref refid="classStcodeBuilder_1af800507e36690d738a1633c2d922df74" kindref="member">release</ref>().c_str());</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>functional::BF_ANIM_FRAME:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="commonUtils_8h_1a423a5cbb08af4695251ec87aa21a5fe1" kindref="member">string_f</ref>(</highlight><highlight class="stringliteral">&quot;anim_frame(%s)&quot;</highlight><highlight class="normal">,<sp/>argsPlaceholder.<ref refid="classStcodeBuilder_1af800507e36690d738a1633c2d922df74" kindref="member">release</ref>().c_str());</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>functional::BF_TIME_PHASE:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="commonUtils_8h_1a423a5cbb08af4695251ec87aa21a5fe1" kindref="member">string_f</ref>(</highlight><highlight class="stringliteral">&quot;get_shader_global_time_phase(%s)&quot;</highlight><highlight class="normal">,<sp/>argsPlaceholder.<ref refid="classStcodeBuilder_1af800507e36690d738a1633c2d922df74" kindref="member">release</ref>().c_str());</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>functional::BF_WIND_COEFF:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="commonUtils_8h_1a423a5cbb08af4695251ec87aa21a5fe1" kindref="member">string_f</ref>(</highlight><highlight class="stringliteral">&quot;wind_coeff(get_shader_global_time_phase(%s))&quot;</highlight><highlight class="normal">,<sp/>argsPlaceholder.<ref refid="classStcodeBuilder_1af800507e36690d738a1633c2d922df74" kindref="member">release</ref>().c_str());</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>functional::BF_FADE_VAL:</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="commonUtils_8h_1a423a5cbb08af4695251ec87aa21a5fe1" kindref="member">string_f</ref>(</highlight><highlight class="stringliteral">&quot;wind_coeff(get_shader_global_time_phase(%s),<sp/>%s)&quot;</highlight><highlight class="normal">,<sp/>argsPlaceholder.<ref refid="classStcodeBuilder_1af800507e36690d738a1633c2d922df74" kindref="member">release</ref>().c_str(),<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>?&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>functional::BF_GET_DIMENSIONS:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="commonUtils_8h_1a423a5cbb08af4695251ec87aa21a5fe1" kindref="member">string_f</ref>(</highlight><highlight class="stringliteral">&quot;get_tex_dim(%s)&quot;</highlight><highlight class="normal">,<sp/>argsPlaceholder.<ref refid="classStcodeBuilder_1af800507e36690d738a1633c2d922df74" kindref="member">release</ref>().c_str());</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>functional::BF_GET_SIZE:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="commonUtils_8h_1a423a5cbb08af4695251ec87aa21a5fe1" kindref="member">string_f</ref>(</highlight><highlight class="stringliteral">&quot;get_buf_size(%s)&quot;</highlight><highlight class="normal">,<sp/>argsPlaceholder.<ref refid="classStcodeBuilder_1af800507e36690d738a1633c2d922df74" kindref="member">release</ref>().c_str());</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>functional::BF_GET_VIEWPORT:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>eastl::string(</highlight><highlight class="stringliteral">&quot;get_viewport()&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>functional::BF_EXISTS_TEX:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="commonUtils_8h_1a423a5cbb08af4695251ec87aa21a5fe1" kindref="member">string_f</ref>(</highlight><highlight class="stringliteral">&quot;exists_tex(%s)&quot;</highlight><highlight class="normal">,<sp/>argsPlaceholder.<ref refid="classStcodeBuilder_1af800507e36690d738a1633c2d922df74" kindref="member">release</ref>().c_str());</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>functional::BF_EXISTS_BUF:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="commonUtils_8h_1a423a5cbb08af4695251ec87aa21a5fe1" kindref="member">string_f</ref>(</highlight><highlight class="stringliteral">&quot;exists_buf(%s)&quot;</highlight><highlight class="normal">,<sp/>argsPlaceholder.<ref refid="classStcodeBuilder_1af800507e36690d738a1633c2d922df74" kindref="member">release</ref>().c_str());</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>functional::BF_REQUEST_SAMPLER:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="commonUtils_8h_1a423a5cbb08af4695251ec87aa21a5fe1" kindref="member">string_f</ref>(</highlight><highlight class="stringliteral">&quot;request_sampler(%s)&quot;</highlight><highlight class="normal">,<sp/>argsPlaceholder.<ref refid="classStcodeBuilder_1af800507e36690d738a1633c2d922df74" kindref="member">release</ref>().c_str());</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:<sp/>G_ASSERT_RETURN(0,<sp/>eastl::string());</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="235"><highlight class="normal">}</highlight></codeline>
<codeline lineno="236"><highlight class="normal"></highlight></codeline>
<codeline lineno="237"><highlight class="normal"></highlight></codeline>
<codeline lineno="239"><highlight class="normal"></highlight></codeline>
<codeline lineno="240"><highlight class="normal"><ref refid="structStcodeRoutine_1a78fee5f71241249cca34143bb078c8d8" kindref="member">StcodeRoutine::StcodeRoutine</ref>()</highlight></codeline>
<codeline lineno="241"><highlight class="normal">{</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="namespaceshc_1a47efde6b3d493adbe2119a5593807d36" kindref="member">shc::config</ref>().generateCppStcodeValidationData)</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structStcodeRoutine_1a90bea292e40f565eee2602e7bcb781ff" kindref="member">constMask</ref><sp/>=<sp/>eastl::make_unique&lt;StcodeConstValidationMask&gt;();</highlight></codeline>
<codeline lineno="244"><highlight class="normal">}</highlight></codeline>
<codeline lineno="245"><highlight class="normal"></highlight></codeline>
<codeline lineno="246"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="structStcodeRoutine_1abd5112d8321812bca8c76b6aeb38ad29" kindref="member">StcodeRoutine::addSetConstStmt</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*type,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>type_size,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*location,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*expr,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*dest_array,</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>array_index)</highlight></codeline>
<codeline lineno="248"><highlight class="normal">{</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>arrOffset<sp/>=<sp/>array_index<sp/>==<sp/>0<sp/>?<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal"><sp/>:<sp/><ref refid="commonUtils_8h_1a423a5cbb08af4695251ec87aa21a5fe1" kindref="member">string_f</ref>(</highlight><highlight class="stringliteral">&quot;<sp/>+<sp/>(%d<sp/>*<sp/>%d)&quot;</highlight><highlight class="normal">,<sp/>type_size,<sp/>array_index);</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>loc<sp/>=<sp/><ref refid="commonUtils_8h_1a423a5cbb08af4695251ec87aa21a5fe1" kindref="member">string_f</ref>(</highlight><highlight class="stringliteral">&quot;(LOC(%s)%s)&quot;</highlight><highlight class="normal">,<sp/>location,<sp/>arrOffset.c_str());</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><ref refid="structStcodeRoutine_1a4482357fc0c8a5ffbd7950ddfe96d3d3" kindref="member">addFormattedStatement</ref>(</highlight><highlight class="stringliteral">&quot;(%s<sp/>&amp;)(%s[%s])<sp/>=<sp/>%s;\n&quot;</highlight><highlight class="normal">,<sp/>type,<sp/>dest_array,<sp/>loc.c_str(),<sp/>expr);</highlight></codeline>
<codeline lineno="252"><highlight class="normal">}</highlight></codeline>
<codeline lineno="253"><highlight class="normal"></highlight></codeline>
<codeline lineno="254"><highlight class="normal"></highlight><highlight class="comment">//<sp/>@TODO:<sp/>proper<sp/>indentation<sp/>for<sp/>decls</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="255"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="structStcodeRoutine_1a4f376c7749e414c89ed9b70990d015e4" kindref="member">StcodeRoutine::addBoolVarDecl</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*name)</highlight></codeline>
<codeline lineno="256"><highlight class="normal">{</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><ref refid="cppStcode_8h_1ac560d55d8ba0d82453054cbc1050fc7b" kindref="member">RET_IF_SHOULD_NOT_COMPILE</ref>();</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><ref refid="structStcodeRoutine_1a65f07be4ac6541c4d3457d3bbe1c6774" kindref="member">decls</ref>.<ref refid="classStcodeBuilder_1a75203805b3d48da057cbe761021e19b3" kindref="member">emplaceBackFmt</ref>(</highlight><highlight class="stringliteral">&quot;<sp/><sp/>bool<sp/>%s<sp/>=<sp/>false;\n&quot;</highlight><highlight class="normal">,<sp/>name);</highlight></codeline>
<codeline lineno="259"><highlight class="normal">}</highlight></codeline>
<codeline lineno="260"><highlight class="normal"></highlight></codeline>
<codeline lineno="261"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="structStcodeRoutine_1afea3011003d486cdc2094d1ecb5227d1" kindref="member">StcodeRoutine::addLocalVarDecl</ref>(ShaderVarType<sp/>type,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*name)</highlight></codeline>
<codeline lineno="262"><highlight class="normal">{</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><ref refid="cppStcode_8h_1ac560d55d8ba0d82453054cbc1050fc7b" kindref="member">RET_IF_SHOULD_NOT_COMPILE</ref>();</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><ref refid="structStcodeRoutine_1a65f07be4ac6541c4d3457d3bbe1c6774" kindref="member">decls</ref>.<ref refid="classStcodeBuilder_1a75203805b3d48da057cbe761021e19b3" kindref="member">emplaceBackFmt</ref>(</highlight><highlight class="stringliteral">&quot;<sp/><sp/>%s<sp/>%s;\n&quot;</highlight><highlight class="normal">,<sp/><ref refid="namespacestcode_1a286b6353e9940ecc3c5bd2fe4e520d3a" kindref="member">stcode::shadervar_type_to_stcode_type</ref>(type),<sp/>name);</highlight></codeline>
<codeline lineno="265"><highlight class="normal">}</highlight></codeline>
<codeline lineno="266"><highlight class="normal"></highlight></codeline>
<codeline lineno="267"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="structStcodeRoutine_1a3aa9c49a9d2ffa5a0670be12dde467ec" kindref="member">StcodeRoutine::setVarValue</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*name,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*val)</highlight></codeline>
<codeline lineno="268"><highlight class="normal">{</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><ref refid="cppStcode_8h_1ac560d55d8ba0d82453054cbc1050fc7b" kindref="member">RET_IF_SHOULD_NOT_COMPILE</ref>();</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/>++<ref refid="structStcodeRoutine_1abd9817c49e5ecd7b181ca5abd200f2fc" kindref="member">nonContributingStatementsCnt</ref>;</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><ref refid="structStcodeRoutine_1a4482357fc0c8a5ffbd7950ddfe96d3d3" kindref="member">addFormattedStatement</ref>(</highlight><highlight class="stringliteral">&quot;%s<sp/>=<sp/>%s;\n&quot;</highlight><highlight class="normal">,<sp/>name,<sp/>val);</highlight></codeline>
<codeline lineno="272"><highlight class="normal">}</highlight></codeline>
<codeline lineno="273"><highlight class="normal"></highlight></codeline>
<codeline lineno="274"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="structStcodeRoutine_1a7923f13b9917706c92076c807e3ef73b" kindref="member">StcodeRoutine::addStmt</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*val)<sp/>{<sp/><ref refid="structStcodeRoutine_1a4482357fc0c8a5ffbd7950ddfe96d3d3" kindref="member">addFormattedStatement</ref>(</highlight><highlight class="stringliteral">&quot;%s;\n&quot;</highlight><highlight class="normal">,<sp/>val);<sp/>}</highlight></codeline>
<codeline lineno="275"><highlight class="normal"></highlight></codeline>
<codeline lineno="276"><highlight class="normal"><ref refid="structCryptoHash" kindref="compound">CryptoHash</ref><sp/><ref refid="structStcodeRoutine_1a5babc5921e35eb29e7cfe8f1e0181c3c" kindref="member">StcodeRoutine::calcHash</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structCryptoHash" kindref="compound">CryptoHash</ref><sp/>*base)</highlight></codeline>
<codeline lineno="277"><highlight class="normal">{</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>hasher<sp/>=<sp/>base<sp/>?<sp/><ref refid="structCryptoHasher" kindref="compound">CryptoHasher</ref>{*base}<sp/>:<sp/><ref refid="structCryptoHasher" kindref="compound">CryptoHasher</ref>{};</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="structStcodeRoutine_1a27f002069a52afa2d7d73f73727455b4" kindref="member">hasCode</ref>())</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structStcodeRoutine_1a79b3a88d088ad5748c5c11f132486697" kindref="member">code</ref>.<ref refid="classStcodeBuilder_1a8dca69d7f57e0359dbdeb7d2c98eb250" kindref="member">iterateFragments</ref>([&amp;hasher](</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>eastl::string<sp/>&amp;s)<sp/>{<sp/>hasher.update(s.c_str(),<sp/>s.length());<sp/>});</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structStcodeRoutine_1a65f07be4ac6541c4d3457d3bbe1c6774" kindref="member">decls</ref>.<ref refid="classStcodeBuilder_1a8dca69d7f57e0359dbdeb7d2c98eb250" kindref="member">iterateFragments</ref>([&amp;hasher](</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>eastl::string<sp/>&amp;s)<sp/>{<sp/>hasher.update(s.c_str(),<sp/>s.length());<sp/>});</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/>hasher.update(0u);</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;r<sp/>:<sp/><ref refid="structStcodeRoutine_1ac1b6d1d4a8f437337beb0c9973c35edf" kindref="member">vertexRegs</ref>.content)</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>hasher.update(r.reg);</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/>hasher.update(0u);</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;r<sp/>:<sp/><ref refid="structStcodeRoutine_1aa63b75770f06597f8f0f1a04c369dbe8" kindref="member">pixelOrComputeRegs</ref>.content)</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>hasher.update(r.reg);</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>hasher.hash();</highlight></codeline>
<codeline lineno="291"><highlight class="normal">}</highlight></codeline>
<codeline lineno="292"><highlight class="normal"></highlight></codeline>
<codeline lineno="294"><highlight class="normal"></highlight></codeline>
<codeline lineno="295"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*stage_to_name_prefix(ShaderStage<sp/>stage)</highlight></codeline>
<codeline lineno="296"><highlight class="normal">{</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(stage)</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>STAGE_CS:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;cs&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>STAGE_PS:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;ps&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>STAGE_VS:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;vs&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:<sp/>G_ASSERT_RETURN(0,<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="304"><highlight class="normal">}</highlight></codeline>
<codeline lineno="305"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*stage_to_name_suffix(ShaderStage<sp/>stage)</highlight></codeline>
<codeline lineno="306"><highlight class="normal">{</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(stage)</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>STAGE_CS:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;_cs&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>STAGE_PS:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;_ps&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>STAGE_VS:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;_vs&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:<sp/>G_ASSERT_RETURN(0,<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="314"><highlight class="normal">}</highlight></codeline>
<codeline lineno="315"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*stage_to_static_tex_name_suffix(ShaderStage<sp/>stage)</highlight></codeline>
<codeline lineno="316"><highlight class="normal">{</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(stage)</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>STAGE_PS:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;_pt&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>STAGE_VS:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;_vt&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:<sp/>G_ASSERT_RETURN(0,<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="323"><highlight class="normal">}</highlight></codeline>
<codeline lineno="324"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*stage_to_runtime_const_str(ShaderStage<sp/>stage)</highlight></codeline>
<codeline lineno="325"><highlight class="normal">{</highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(stage)</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>STAGE_CS:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;STAGE_CS&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>STAGE_PS:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;STAGE_PS&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>STAGE_VS:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;STAGE_VS&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:<sp/>G_ASSERT_RETURN(0,<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="333"><highlight class="normal">}</highlight></codeline>
<codeline lineno="334"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*stage_to_const_array_name(ShaderStage<sp/>stage)</highlight></codeline>
<codeline lineno="335"><highlight class="normal">{</highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(stage)</highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>STAGE_CS:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;csconst__&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>STAGE_PS:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;psconst__&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>STAGE_VS:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;vsconst__&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:<sp/>G_ASSERT_RETURN(0,<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="343"><highlight class="normal">}</highlight></codeline>
<codeline lineno="344"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*stage_to_tex_array_name(ShaderStage<sp/>stage)</highlight></codeline>
<codeline lineno="345"><highlight class="normal">{</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(stage)</highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>STAGE_PS:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;pstex__&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>STAGE_VS:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;vstex__&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:<sp/>G_ASSERT_RETURN(0,<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="352"><highlight class="normal">}</highlight></codeline>
<codeline lineno="353"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>stage_to_dyn_const_range_names(ShaderStage<sp/>stage)</highlight></codeline>
<codeline lineno="354"><highlight class="normal">{</highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(stage)</highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>STAGE_CS:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>eastl::make_pair(</highlight><highlight class="stringliteral">&quot;DYNOFS_CS&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;DYNRNG_CS&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>STAGE_PS:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>eastl::make_pair(</highlight><highlight class="stringliteral">&quot;DYNOFS_PS&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;DYNRNG_PS&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>STAGE_VS:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>eastl::make_pair(</highlight><highlight class="stringliteral">&quot;DYNOFS_VS&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;DYNRNG_VS&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:<sp/>G_ASSERT_RETURN(0,<sp/>eastl::make_pair(</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="362"><highlight class="normal">}</highlight></codeline>
<codeline lineno="363"><highlight class="normal"></highlight></codeline>
<codeline lineno="364"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>STATIC_CONSTS_NAME_SUFFIX[]<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;_scbuf&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="365"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>STATIC_CONSTS_ARRAY_NAME[]<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;stconst__&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="366"><highlight class="normal"></highlight></codeline>
<codeline lineno="367"><highlight class="normal"><ref refid="structStcodeAccumulator" kindref="compound">StcodeAccumulator</ref><sp/><ref refid="structDynamicStcodeRoutine_1a2aee43209295b14ac48342b85f6703e3" kindref="member">DynamicStcodeRoutine::releaseAssembledCode</ref>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>routine_idx,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>static_var_idx,</highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/><ref refid="structHlslRegRange" kindref="compound">HlslRegRange</ref><sp/>ps_or_cs_const_range,<sp/><ref refid="structHlslRegRange" kindref="compound">HlslRegRange</ref><sp/>vs_const_range)</highlight></codeline>
<codeline lineno="369"><highlight class="normal">{</highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/><ref refid="cppStcode_8h_1ac560d55d8ba0d82453054cbc1050fc7b" kindref="member">RET_IF_SHOULD_NOT_COMPILE</ref>({});</highlight></codeline>
<codeline lineno="371"><highlight class="normal"></highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/><ref refid="structStcodeAccumulator" kindref="compound">StcodeAccumulator</ref><sp/>result;</highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/>result.<ref refid="structStcodeAccumulator_1a7c85824e9998e44e7deb09988df542d4" kindref="member">headerStrings</ref>.<ref refid="classStcodeBuilder_1a75203805b3d48da057cbe761021e19b3" kindref="member">emplaceBackFmt</ref>(</highlight><highlight class="stringliteral">&quot;ROUTINE_VISIBILITY<sp/>void<sp/>dynroutine%u(const<sp/>void<sp/>*vars,<sp/>uint32_t<sp/>dyn_table_offset);\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/><sp/><sp/>routine_idx);</highlight></codeline>
<codeline lineno="375"><highlight class="normal"></highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(static_var_idx<sp/>!=<sp/><ref refid="structStcodeRoutine_1a7e3f29a7fffb2635c11f10ecdb9194da" kindref="member">STATIC_VAR_ABSCENT_ID</ref>)</highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/><sp/><sp/>result.cppStrings.emplaceBackFmt(</highlight><highlight class="stringliteral">&quot;\n#ifdef<sp/>CUR_STVAR_ID\n#undef<sp/>CUR_STVAR_ID\n#endif\n\n#define<sp/>CUR_STVAR_ID<sp/>%u\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>static_var_idx);</highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="381"><highlight class="normal"></highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="structStcodeRoutine_1a27f002069a52afa2d7d73f73727455b4" kindref="member">hasCode</ref>())</highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/><sp/><sp/>result.cppStrings.emplaceBackFmt(</highlight><highlight class="stringliteral">&quot;ROUTINE_VISIBILITY<sp/>void<sp/>dynroutine%u(const<sp/>void<sp/>*,<sp/>uint32_t)<sp/>{}\n\n&quot;</highlight><highlight class="normal">,<sp/>routine_idx);</highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/><sp/><sp/>G_ASSERT(<ref refid="structStcodeRoutine_1af0a0fa1835a8049cce67a6139364c86c" kindref="member">blockDepth</ref><sp/>==<sp/>1);</highlight></codeline>
<codeline lineno="387"><highlight class="normal"></highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>cppRoutineTemplate[]<sp/>=</highlight></codeline>
<codeline lineno="389"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;_stcodeTemplates/dynamicRoutine.cpp.inl.fmt&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>;</highlight></codeline>
<codeline lineno="391"><highlight class="normal"></highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*locMacro<sp/>=<sp/><ref refid="structDynamicStcodeRoutine_1a98109234eabf6edafeb4fc0c4d0a68c9" kindref="member">usesDynamicBranching</ref><sp/>?<sp/>(<ref refid="structDynamicStcodeRoutine_1ad445bbe14daa249ee8c2422643325aa2" kindref="member">isCompute</ref><sp/>?<sp/></highlight><highlight class="stringliteral">&quot;LOCDYN_COMP&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;LOCDYN_GRAPH&quot;</highlight><highlight class="normal">)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;LOCSTAT&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/><sp/><sp/>result.cppStrings.emplaceBack(</highlight><highlight class="stringliteral">&quot;\n#ifdef<sp/>LOC\n#undef<sp/>LOC\n#endif\n\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/><sp/><sp/>result.cppStrings.emplaceBackFmt(</highlight><highlight class="stringliteral">&quot;#define<sp/>LOC(name_)<sp/>%s(name_)\n&quot;</highlight><highlight class="normal">,<sp/>locMacro);</highlight></codeline>
<codeline lineno="395"><highlight class="normal"></highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>@TODO:<sp/>builders</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/><sp/><sp/>eastl::string<sp/>locations<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/><sp/><sp/>eastl::string<sp/>consts<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/><sp/><sp/>eastl::string<sp/>splats<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>appendRegLocations<sp/>=<sp/>[&amp;](ShaderStage<sp/>stage)<sp/>{</highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structHlslRegRange" kindref="compound">HlslRegRange</ref><sp/>constRange<sp/>=<sp/>(stage<sp/>==<sp/>STAGE_VS<sp/>?<sp/>vs_const_range<sp/>:<sp/>ps_or_cs_const_range);</highlight></codeline>
<codeline lineno="402"><highlight class="normal"></highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>@TODO:<sp/>identation<sp/>with<sp/>a<sp/>uniform<sp/>API<sp/>(to<sp/>allow<sp/>to<sp/>centrally<sp/>change<sp/>format</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;loc<sp/>:<sp/><ref refid="structStcodeRoutine_1adf3b15015bd8f9eb437d4aa67941084d" kindref="member">regsForStage</ref>(stage).content)</highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="structDynamicStcodeRoutine_1a98109234eabf6edafeb4fc0c4d0a68c9" kindref="member">usesDynamicBranching</ref>)<sp/></highlight><highlight class="comment">//<sp/>Locations<sp/>are<sp/>already<sp/>filled<sp/>with<sp/>indirect<sp/>indices<sp/>and<sp/>named<sp/>properly</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>locations.append_sprintf(</highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/>%s<sp/>=<sp/>%u,\n&quot;</highlight><highlight class="normal">,<sp/>loc.name.c_str(),<sp/>loc.reg);</highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">//<sp/>Otherwise,<sp/>names<sp/>have<sp/>to<sp/>be<sp/>postfixed<sp/>and<sp/>registers<sp/>calculated</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>reg<sp/>=<sp/>loc.isNumeric<sp/>?<sp/>(loc.reg<sp/>-<sp/>constRange.<ref refid="structHlslRegRange_1ae853c9e105fc8f8f29a15c0558c4ef11" kindref="member">min</ref>)<sp/>*<sp/>FLOAT4_REG_SIZE<sp/>:<sp/>loc.reg;</highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>locations.append_sprintf(</highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/>%s%s<sp/>=<sp/>%u,\n&quot;</highlight><highlight class="normal">,<sp/>loc.name.c_str(),<sp/>stage_to_name_suffix(stage),<sp/>reg);</highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="414"><highlight class="normal"></highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>range<sp/>=<sp/>constRange.<ref refid="structHlslRegRange_1af93398b7274fb7adb3ec8152f8c79eec" kindref="member">cap</ref><sp/>-<sp/>constRange.<ref refid="structHlslRegRange_1ae853c9e105fc8f8f29a15c0558c4ef11" kindref="member">min</ref>;<sp/>range<sp/>&gt;<sp/>0)</highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*arrName<sp/>=<sp/>stage_to_const_array_name(stage);</highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>consts.append_sprintf(</highlight><highlight class="stringliteral">&quot;<sp/><sp/>alignas(16)<sp/>float<sp/>%s[%d];\n&quot;</highlight><highlight class="normal">,<sp/>arrName,<sp/>range<sp/>*<sp/>FLOAT4_REG_SIZE);</highlight></codeline>
<codeline lineno="419"><highlight class="normal"></highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="structDynamicStcodeRoutine_1a98109234eabf6edafeb4fc0c4d0a68c9" kindref="member">usesDynamicBranching</ref>)</highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>[dynOfsName,<sp/>dynRangeName]<sp/>=<sp/>stage_to_dyn_const_range_names(stage);</highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>splats.append_sprintf(</highlight><highlight class="stringliteral">&quot;<sp/><sp/>if<sp/>(%s<sp/>&gt;<sp/>0)<sp/>set_const(%s,<sp/>%s,<sp/>(float4<sp/>*)%s,<sp/>%s);\n&quot;</highlight><highlight class="normal">,<sp/>dynRangeName,</highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stage_to_runtime_const_str(stage),<sp/>dynOfsName,<sp/>arrName,<sp/>dynRangeName);</highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>splats.append_sprintf(</highlight><highlight class="stringliteral">&quot;<sp/><sp/>set_const(%s,<sp/>%d,<sp/>(float4<sp/>*)%s,<sp/>%d);\n&quot;</highlight><highlight class="normal">,<sp/>stage_to_runtime_const_str(stage),<sp/>constRange.<ref refid="structHlslRegRange_1ae853c9e105fc8f8f29a15c0558c4ef11" kindref="member">min</ref>,<sp/>arrName,</highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>range);</highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="433"><highlight class="normal"></highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="structDynamicStcodeRoutine_1ad445bbe14daa249ee8c2422643325aa2" kindref="member">isCompute</ref>)</highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>appendRegLocations(STAGE_CS);</highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>appendRegLocations(STAGE_VS);</highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>appendRegLocations(STAGE_PS);</highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="441"><highlight class="normal"></highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/><sp/><sp/>result.cppStrings.emplaceBackFmt(cppRoutineTemplate,<sp/>routine_idx,<sp/>locations.c_str(),<sp/>consts.c_str(),<sp/><ref refid="structStcodeRoutine_1a65f07be4ac6541c4d3457d3bbe1c6774" kindref="member">decls</ref>.<ref refid="classStcodeBuilder_1af800507e36690d738a1633c2d922df74" kindref="member">release</ref>().c_str(),</highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structStcodeRoutine_1a79b3a88d088ad5748c5c11f132486697" kindref="member">code</ref>.<ref refid="classStcodeBuilder_1af800507e36690d738a1633c2d922df74" kindref="member">release</ref>().c_str(),<sp/>splats.c_str());</highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="445"><highlight class="normal"></highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="447"><highlight class="normal">}</highlight></codeline>
<codeline lineno="448"><highlight class="normal"></highlight></codeline>
<codeline lineno="449"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="cppStcodeAssembly_8cpp_1a80e6204065b3dfa5a58c36801b0f31bc" kindref="member">glob_matrix_cb_name</ref>(<ref refid="structStcodeRoutine_1a8ea93f019765304f450c1924cb84c52c" kindref="member">StcodeRoutine::GlobMatrixType</ref><sp/>type)</highlight></codeline>
<codeline lineno="450"><highlight class="normal">{</highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(type)</highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="structStcodeRoutine_1a8ea93f019765304f450c1924cb84c52ca04af3789c41e31cd71c10e1e4dbbec57" kindref="member">StcodeRoutine::GlobMatrixType::GLOB</ref>:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;get_globtm&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="structStcodeRoutine_1a8ea93f019765304f450c1924cb84c52cadd7512f5e0289cddce66b0f8bca0c280" kindref="member">StcodeRoutine::GlobMatrixType::PROJ</ref>:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;get_projtm&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="structStcodeRoutine_1a8ea93f019765304f450c1924cb84c52ca05159953951324f5cf786f86bdd340bd" kindref="member">StcodeRoutine::GlobMatrixType::VIEWPROJ</ref>:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;get_viewprojtm&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:<sp/>G_ASSERT_RETURN(0,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="458"><highlight class="normal">}</highlight></codeline>
<codeline lineno="459"><highlight class="normal"></highlight></codeline>
<codeline lineno="460"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="structDynamicStcodeRoutine_1ae3f113f042917068e579c4975d99148b" kindref="member">DynamicStcodeRoutine::addShaderGlobMatrix</ref>(ShaderStage<sp/>stage,<sp/>GlobMatrixType<sp/>mtype,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*name,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="461"><highlight class="normal">{</highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/><ref refid="cppStcode_8h_1ac560d55d8ba0d82453054cbc1050fc7b" kindref="member">RET_IF_SHOULD_NOT_COMPILE</ref>();</highlight></codeline>
<codeline lineno="463"><highlight class="normal"></highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>eastl::string<sp/>location(eastl::string::CtorSprintf{},<sp/></highlight><highlight class="stringliteral">&quot;%s%s&quot;</highlight><highlight class="normal">,<sp/>name,<sp/>stage_to_name_suffix(stage));</highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>eastl::string<sp/>tempName(eastl::string::CtorSprintf{},<sp/></highlight><highlight class="stringliteral">&quot;tm_%s%s&quot;</highlight><highlight class="normal">,<sp/>name,<sp/>stage_to_name_suffix(stage));</highlight></codeline>
<codeline lineno="466"><highlight class="normal"></highlight></codeline>
<codeline lineno="467"><highlight class="normal"><sp/><sp/><ref refid="structStcodeRoutine_1a4482357fc0c8a5ffbd7950ddfe96d3d3" kindref="member">addFormattedStatement</ref>(</highlight><highlight class="stringliteral">&quot;float4x4<sp/>%s;\n&quot;</highlight><highlight class="normal">,<sp/>tempName.c_str());</highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/><ref refid="structStcodeRoutine_1a4482357fc0c8a5ffbd7950ddfe96d3d3" kindref="member">addFormattedStatement</ref>(</highlight><highlight class="stringliteral">&quot;%s(&amp;%s);\n&quot;</highlight><highlight class="normal">,<sp/><ref refid="cppStcodeAssembly_8cpp_1a80e6204065b3dfa5a58c36801b0f31bc" kindref="member">glob_matrix_cb_name</ref>(mtype),<sp/>tempName.c_str());</highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/><ref refid="structStcodeRoutine_1abd5112d8321812bca8c76b6aeb38ad29" kindref="member">addSetConstStmt</ref>(</highlight><highlight class="stringliteral">&quot;float4x4&quot;</highlight><highlight class="normal">,<sp/>4,<sp/>location.c_str(),<sp/>tempName.c_str(),<sp/>stage_to_const_array_name(stage),<sp/>0);</highlight></codeline>
<codeline lineno="470"><highlight class="normal"></highlight></codeline>
<codeline lineno="471"><highlight class="normal"><sp/><sp/><ref refid="structStcodeRoutine_1adf3b15015bd8f9eb437d4aa67941084d" kindref="member">regsForStage</ref>(stage).<ref refid="structStcodeRegisters_1a9f00c01ee0f139bad8b2f7a0c550f6a7" kindref="member">add</ref>(name,<sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/>4);</highlight></codeline>
<codeline lineno="472"><highlight class="normal">}</highlight></codeline>
<codeline lineno="473"><highlight class="normal"></highlight></codeline>
<codeline lineno="474"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="structDynamicStcodeRoutine_1a6c6314cfdbda35c448f02c4bfe49f099" kindref="member">DynamicStcodeRoutine::addShaderGlobVec</ref>(ShaderStage<sp/>stage,<sp/>GlobVecType<sp/>vtype,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*name,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>compId)</highlight></codeline>
<codeline lineno="475"><highlight class="normal">{</highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/><sp/><ref refid="cppStcode_8h_1ac560d55d8ba0d82453054cbc1050fc7b" kindref="member">RET_IF_SHOULD_NOT_COMPILE</ref>();</highlight></codeline>
<codeline lineno="477"><highlight class="normal"></highlight></codeline>
<codeline lineno="478"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>globVecCbName<sp/>=<sp/>[](<ref refid="structStcodeRoutine_1a2e19d59b2785fa42c7084cd2e0fa45f3" kindref="member">GlobVecType</ref><sp/>vtype)<sp/>{</highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(vtype)</highlight></codeline>
<codeline lineno="480"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="structStcodeRoutine_1a2e19d59b2785fa42c7084cd2e0fa45f3a5824b315fdbb0f42abfe1bb03f78c270" kindref="member">GlobVecType::VIEW</ref>:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;get_lview&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="482"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="structStcodeRoutine_1a2e19d59b2785fa42c7084cd2e0fa45f3a5289492cf082446ca4a6eec9f72f1ec3" kindref="member">GlobVecType::WORLD</ref>:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;get_lworld&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="483"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:<sp/>G_ASSERT(0);<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="484"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="485"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="486"><highlight class="normal"></highlight></codeline>
<codeline lineno="487"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>eastl::string<sp/>location(eastl::string::CtorSprintf{},<sp/></highlight><highlight class="stringliteral">&quot;%s%s&quot;</highlight><highlight class="normal">,<sp/>name,<sp/>stage_to_name_suffix(stage));</highlight></codeline>
<codeline lineno="488"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>eastl::string<sp/>tempName(eastl::string::CtorSprintf{},<sp/></highlight><highlight class="stringliteral">&quot;lv_%s%s&quot;</highlight><highlight class="normal">,<sp/>name,<sp/>stage_to_name_suffix(stage));</highlight></codeline>
<codeline lineno="489"><highlight class="normal"></highlight></codeline>
<codeline lineno="490"><highlight class="normal"><sp/><sp/><ref refid="structStcodeRoutine_1a4482357fc0c8a5ffbd7950ddfe96d3d3" kindref="member">addFormattedStatement</ref>(</highlight><highlight class="stringliteral">&quot;float4<sp/>%s;\n&quot;</highlight><highlight class="normal">,<sp/>tempName.c_str());</highlight></codeline>
<codeline lineno="491"><highlight class="normal"><sp/><sp/><ref refid="structStcodeRoutine_1a4482357fc0c8a5ffbd7950ddfe96d3d3" kindref="member">addFormattedStatement</ref>(</highlight><highlight class="stringliteral">&quot;%s(%d,<sp/>&amp;%s);\n&quot;</highlight><highlight class="normal">,<sp/>globVecCbName(vtype),<sp/>compId,<sp/>tempName.c_str());</highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/><sp/><ref refid="structStcodeRoutine_1abd5112d8321812bca8c76b6aeb38ad29" kindref="member">addSetConstStmt</ref>(</highlight><highlight class="stringliteral">&quot;float4&quot;</highlight><highlight class="normal">,<sp/>1,<sp/>location.c_str(),<sp/>tempName.c_str(),<sp/>stage_to_const_array_name(stage),<sp/>0);</highlight></codeline>
<codeline lineno="493"><highlight class="normal"></highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/><ref refid="structStcodeRoutine_1adf3b15015bd8f9eb437d4aa67941084d" kindref="member">regsForStage</ref>(stage).<ref refid="structStcodeRegisters_1a9f00c01ee0f139bad8b2f7a0c550f6a7" kindref="member">add</ref>(name,<sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/>1);</highlight></codeline>
<codeline lineno="495"><highlight class="normal">}</highlight></codeline>
<codeline lineno="496"><highlight class="normal"></highlight></codeline>
<codeline lineno="497"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*resource_cb_name(<ref refid="structStcodeRoutine_1a52f41230f067f3067000adef9bfb5eb9" kindref="member">StcodeRoutine::ResourceType</ref><sp/>type)</highlight></codeline>
<codeline lineno="498"><highlight class="normal">{</highlight></codeline>
<codeline lineno="499"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(type)</highlight></codeline>
<codeline lineno="500"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="501"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="structStcodeRoutine_1a52f41230f067f3067000adef9bfb5eb9a3f92f542bd9ec48f912b9350e22736ac" kindref="member">StcodeRoutine::ResourceType::TEXTURE</ref>:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;set_tex&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="502"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="structStcodeRoutine_1a52f41230f067f3067000adef9bfb5eb9a17de626bcae5109bb2f7a66dfc4a8a1d" kindref="member">StcodeRoutine::ResourceType::BUFFER</ref>:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;set_buf&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="503"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="structStcodeRoutine_1a52f41230f067f3067000adef9bfb5eb9ab1cd3c72eeddd2a54d21c01e505b2685" kindref="member">StcodeRoutine::ResourceType::CONST_BUFFER</ref>:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;set_const_buf&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="504"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="structStcodeRoutine_1a52f41230f067f3067000adef9bfb5eb9aaa4fc1f642950410dd11d691fe974cca" kindref="member">StcodeRoutine::ResourceType::SAMPLER</ref>:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;set_sampler&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="505"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="structStcodeRoutine_1a52f41230f067f3067000adef9bfb5eb9a7c1c2306b9742b4ad50eadaaa754916b" kindref="member">StcodeRoutine::ResourceType::RWBUF</ref>:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;set_rwbuf&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="506"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="structStcodeRoutine_1a52f41230f067f3067000adef9bfb5eb9a9c4288764cb73a83f46c7f4b70f7f0da" kindref="member">StcodeRoutine::ResourceType::RWTEX</ref>:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;set_rwtex&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="507"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="structStcodeRoutine_1a52f41230f067f3067000adef9bfb5eb9a76f4c6aede139c265f747d185346ddc2" kindref="member">StcodeRoutine::ResourceType::TLAS</ref>:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;set_tlas&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="508"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:<sp/>G_ASSERT(0);<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="509"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="510"><highlight class="normal">}</highlight></codeline>
<codeline lineno="511"><highlight class="normal"></highlight></codeline>
<codeline lineno="512"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="structDynamicStcodeRoutine_1a554baae416302d8c2a8efe3bc2ce416a" kindref="member">DynamicStcodeRoutine::addGlobalShaderResource</ref>(ShaderStage<sp/>stage,<sp/>ResourceType<sp/>rtype,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*name,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*var_name,</highlight></codeline>
<codeline lineno="513"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="514"><highlight class="normal">{</highlight></codeline>
<codeline lineno="515"><highlight class="normal"><sp/><sp/><ref refid="cppStcode_8h_1ac560d55d8ba0d82453054cbc1050fc7b" kindref="member">RET_IF_SHOULD_NOT_COMPILE</ref>();</highlight></codeline>
<codeline lineno="516"><highlight class="normal"></highlight></codeline>
<codeline lineno="517"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>eastl::string<sp/>location(eastl::string::CtorSprintf{},<sp/></highlight><highlight class="stringliteral">&quot;%s%s&quot;</highlight><highlight class="normal">,<sp/>name,<sp/>stage_to_name_suffix(stage));</highlight></codeline>
<codeline lineno="518"><highlight class="normal"></highlight></codeline>
<codeline lineno="519"><highlight class="normal"><sp/><sp/><ref refid="structStcodeRoutine_1a4482357fc0c8a5ffbd7950ddfe96d3d3" kindref="member">addFormattedStatement</ref>(</highlight><highlight class="stringliteral">&quot;%s(%s,<sp/>LOC(%s),<sp/>%s);\n&quot;</highlight><highlight class="normal">,<sp/>resource_cb_name(rtype),<sp/>stage_to_runtime_const_str(stage),<sp/>location.c_str(),</highlight></codeline>
<codeline lineno="520"><highlight class="normal"><sp/><sp/><sp/><sp/>var_name);</highlight></codeline>
<codeline lineno="521"><highlight class="normal"><sp/><sp/><ref refid="structStcodeRoutine_1adf3b15015bd8f9eb437d4aa67941084d" kindref="member">regsForStage</ref>(stage).<ref refid="structStcodeRegisters_1a9f00c01ee0f139bad8b2f7a0c550f6a7" kindref="member">add</ref>(name,<sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="522"><highlight class="normal">}</highlight></codeline>
<codeline lineno="523"><highlight class="normal"></highlight></codeline>
<codeline lineno="524"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="structDynamicStcodeRoutine_1a42f63f12511ebc50d12eeba245b76c8e" kindref="member">DynamicStcodeRoutine::addDynamicShaderResource</ref>(ShaderStage<sp/>stage,<sp/>ResourceType<sp/>rtype,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*name,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*var_name,</highlight></codeline>
<codeline lineno="525"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="526"><highlight class="normal">{</highlight></codeline>
<codeline lineno="527"><highlight class="normal"><sp/><sp/><ref refid="cppStcode_8h_1ac560d55d8ba0d82453054cbc1050fc7b" kindref="member">RET_IF_SHOULD_NOT_COMPILE</ref>();</highlight></codeline>
<codeline lineno="528"><highlight class="normal"></highlight></codeline>
<codeline lineno="529"><highlight class="normal"><sp/><sp/>G_ASSERTF(rtype<sp/>==<sp/><ref refid="structStcodeRoutine_1a52f41230f067f3067000adef9bfb5eb9a3f92f542bd9ec48f912b9350e22736ac" kindref="member">ResourceType::TEXTURE</ref><sp/>||<sp/>rtype<sp/>==<sp/><ref refid="structStcodeRoutine_1a52f41230f067f3067000adef9bfb5eb9aaa4fc1f642950410dd11d691fe974cca" kindref="member">ResourceType::SAMPLER</ref>,</highlight></codeline>
<codeline lineno="530"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Invalid<sp/>(or<sp/>not<sp/>yet<sp/>implemented)<sp/>type<sp/>for<sp/>shader<sp/>resource:<sp/>%d&quot;</highlight><highlight class="normal">,<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)rtype);</highlight></codeline>
<codeline lineno="531"><highlight class="normal"></highlight></codeline>
<codeline lineno="532"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*varTypeName<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;void&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="533"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*varMacroName<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;VARLOC&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="534"><highlight class="normal"></highlight></codeline>
<codeline lineno="535"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>eastl::string<sp/>location(eastl::string::CtorSprintf{},<sp/></highlight><highlight class="stringliteral">&quot;%s_%s&quot;</highlight><highlight class="normal">,<sp/>name,<sp/>stage_to_name_prefix(stage));</highlight></codeline>
<codeline lineno="536"><highlight class="normal"></highlight></codeline>
<codeline lineno="537"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(rtype<sp/>==<sp/><ref refid="structStcodeRoutine_1a52f41230f067f3067000adef9bfb5eb9a3f92f542bd9ec48f912b9350e22736ac" kindref="member">ResourceType::TEXTURE</ref>)</highlight></codeline>
<codeline lineno="538"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structStcodeRoutine_1a4482357fc0c8a5ffbd7950ddfe96d3d3" kindref="member">addFormattedStatement</ref>(</highlight><highlight class="stringliteral">&quot;acquire_tex(%s(%s,<sp/>%s));&quot;</highlight><highlight class="normal">,<sp/>varMacroName,<sp/>var_name,<sp/>varTypeName);</highlight></codeline>
<codeline lineno="539"><highlight class="normal"></highlight></codeline>
<codeline lineno="540"><highlight class="normal"><sp/><sp/><ref refid="structStcodeRoutine_1a4482357fc0c8a5ffbd7950ddfe96d3d3" kindref="member">addFormattedStatement</ref>(</highlight><highlight class="stringliteral">&quot;%s(%s,<sp/>LOC(%s),<sp/>%s(%s,<sp/>%s));\n&quot;</highlight><highlight class="normal">,<sp/>resource_cb_name(rtype),<sp/>stage_to_runtime_const_str(stage),<sp/>location.c_str(),</highlight></codeline>
<codeline lineno="541"><highlight class="normal"><sp/><sp/><sp/><sp/>varMacroName,<sp/>var_name,<sp/>varTypeName);</highlight></codeline>
<codeline lineno="542"><highlight class="normal"><sp/><sp/><ref refid="structStcodeRoutine_1adf3b15015bd8f9eb437d4aa67941084d" kindref="member">regsForStage</ref>(stage).<ref refid="structStcodeRegisters_1a9f00c01ee0f139bad8b2f7a0c550f6a7" kindref="member">add</ref>(name,<sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="543"><highlight class="normal">}</highlight></codeline>
<codeline lineno="544"><highlight class="normal"></highlight></codeline>
<codeline lineno="545"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*get_shader_const_type_name(ShaderVarType<sp/>type,<sp/><ref refid="namespacesemantic_1a1fd7ba909c618ad56fbacae8b3226182" kindref="member">semantic::VariableType</ref><sp/>vt)</highlight></codeline>
<codeline lineno="546"><highlight class="normal">{</highlight></codeline>
<codeline lineno="547"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal"><ref refid="namespacesemantic_1a1fd7ba909c618ad56fbacae8b3226182" kindref="member">semantic::VariableType</ref>;</highlight></codeline>
<codeline lineno="548"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(vt)</highlight></codeline>
<codeline lineno="549"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="550"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>VariableType::f1:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;float1&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="551"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>VariableType::f2:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;float2&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="552"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>VariableType::f3:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;float3&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="553"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>VariableType::i1:</highlight></codeline>
<codeline lineno="554"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>VariableType::u1:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;int1&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="555"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>VariableType::i2:</highlight></codeline>
<codeline lineno="556"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>VariableType::u2:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;int2&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="557"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>VariableType::i3:</highlight></codeline>
<codeline lineno="558"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>VariableType::u3:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;int3&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="559"><highlight class="normal"></highlight></codeline>
<codeline lineno="560"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespacestcode_1a286b6353e9940ecc3c5bd2fe4e520d3a" kindref="member">stcode::shadervar_type_to_stcode_type</ref>(type);</highlight></codeline>
<codeline lineno="561"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="562"><highlight class="normal">}</highlight></codeline>
<codeline lineno="563"><highlight class="normal"></highlight></codeline>
<codeline lineno="564"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>shader_const_is_numeric(ShaderVarType<sp/>shvt)</highlight></codeline>
<codeline lineno="565"><highlight class="normal">{</highlight></codeline>
<codeline lineno="566"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="commonUtils_8h_1ae2667fae32711226a08120e1cc45974d" kindref="member">item_is_in</ref>(shvt,<sp/>{SHVT_INT,<sp/>SHVT_REAL,<sp/>SHVT_INT4,<sp/>SHVT_COLOR4,<sp/>SHVT_FLOAT4X4});</highlight></codeline>
<codeline lineno="567"><highlight class="normal">}</highlight></codeline>
<codeline lineno="568"><highlight class="normal"></highlight></codeline>
<codeline lineno="569"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="structDynamicStcodeRoutine_1ab06ec5869d901baecd80bf249d8e9fb7" kindref="member">DynamicStcodeRoutine::addShaderConst</ref>(ShaderStage<sp/>stage,<sp/>ShaderVarType<sp/>shvt,<sp/><ref refid="namespacesemantic_1a1fd7ba909c618ad56fbacae8b3226182" kindref="member">semantic::VariableType</ref><sp/>vt,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*name,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="570"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*val,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>array_index)</highlight></codeline>
<codeline lineno="571"><highlight class="normal">{</highlight></codeline>
<codeline lineno="572"><highlight class="normal"><sp/><sp/><ref refid="cppStcode_8h_1ac560d55d8ba0d82453054cbc1050fc7b" kindref="member">RET_IF_SHOULD_NOT_COMPILE</ref>();</highlight></codeline>
<codeline lineno="573"><highlight class="normal"></highlight></codeline>
<codeline lineno="574"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*typeName<sp/>=<sp/>get_shader_const_type_name(shvt,<sp/>vt);</highlight></codeline>
<codeline lineno="575"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>eastl::string<sp/>location<sp/>=<sp/><ref refid="commonUtils_8h_1a423a5cbb08af4695251ec87aa21a5fe1" kindref="member">string_f</ref>(</highlight><highlight class="stringliteral">&quot;%s_%s&quot;</highlight><highlight class="normal">,<sp/>name,<sp/>stage_to_name_prefix(stage));</highlight></codeline>
<codeline lineno="576"><highlight class="normal"></highlight></codeline>
<codeline lineno="577"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>regSize<sp/>=<sp/>shvt<sp/>==<sp/>SHVT_FLOAT4X4<sp/>?<sp/>4<sp/>:<sp/>1;</highlight></codeline>
<codeline lineno="578"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>size<sp/>=<sp/>shader_const_is_numeric(shvt)<sp/>?<sp/>regSize<sp/>*<sp/>FLOAT4_REG_SIZE<sp/>:<sp/>regSize;</highlight></codeline>
<codeline lineno="579"><highlight class="normal"></highlight></codeline>
<codeline lineno="580"><highlight class="normal"><sp/><sp/><ref refid="structStcodeRoutine_1abd5112d8321812bca8c76b6aeb38ad29" kindref="member">addSetConstStmt</ref>(typeName,<sp/>size,<sp/>location.c_str(),<sp/>val,<sp/>stage_to_const_array_name(stage),<sp/>array_index);</highlight></codeline>
<codeline lineno="581"><highlight class="normal"></highlight></codeline>
<codeline lineno="582"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(array_index<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="583"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structStcodeRoutine_1adf3b15015bd8f9eb437d4aa67941084d" kindref="member">regsForStage</ref>(stage).<ref refid="structStcodeRegisters_1a9f00c01ee0f139bad8b2f7a0c550f6a7" kindref="member">add</ref>(name,<sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/>regSize);</highlight></codeline>
<codeline lineno="584"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="585"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="586"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;loc<sp/>:<sp/><ref refid="structStcodeRoutine_1adf3b15015bd8f9eb437d4aa67941084d" kindref="member">regsForStage</ref>(stage).content)</highlight></codeline>
<codeline lineno="587"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="588"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(name<sp/>==<sp/>loc.name)</highlight></codeline>
<codeline lineno="589"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="590"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>G_ASSERT(loc.isNumeric);</highlight></codeline>
<codeline lineno="591"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>loc.regSize<sp/>=<sp/>max(loc.regSize,<sp/>regSize<sp/>*<sp/>(array_index<sp/>+<sp/>1));</highlight></codeline>
<codeline lineno="592"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="593"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="594"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="595"><highlight class="normal">}</highlight></codeline>
<codeline lineno="596"><highlight class="normal"></highlight></codeline>
<codeline lineno="598"><highlight class="normal"></highlight></codeline>
<codeline lineno="599"><highlight class="normal"><ref refid="structStcodeAccumulator" kindref="compound">StcodeAccumulator</ref><sp/><ref refid="structStaticStcodeRoutine_1a46252d69ecea3b1c9c6ce8cbc622dcac" kindref="member">StaticStcodeRoutine::releaseAssembledCode</ref>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>routine_idx,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>static_var_idx,<sp/><ref refid="structHlslRegRange" kindref="compound">HlslRegRange</ref><sp/>const_range,</highlight></codeline>
<codeline lineno="600"><highlight class="normal"><sp/><sp/>SlotTexturesRangeInfo<sp/>ps_tex_smp_range,<sp/>SlotTexturesRangeInfo<sp/>vs_tex_smp_range)</highlight></codeline>
<codeline lineno="601"><highlight class="normal">{</highlight></codeline>
<codeline lineno="602"><highlight class="normal"><sp/><sp/><ref refid="cppStcode_8h_1ac560d55d8ba0d82453054cbc1050fc7b" kindref="member">RET_IF_SHOULD_NOT_COMPILE</ref>({});</highlight></codeline>
<codeline lineno="603"><highlight class="normal"></highlight></codeline>
<codeline lineno="604"><highlight class="normal"><sp/><sp/><ref refid="structStcodeAccumulator" kindref="compound">StcodeAccumulator</ref><sp/>result;</highlight></codeline>
<codeline lineno="605"><highlight class="normal"><sp/><sp/>result.<ref refid="structStcodeAccumulator_1a7c85824e9998e44e7deb09988df542d4" kindref="member">headerStrings</ref>.<ref refid="classStcodeBuilder_1a75203805b3d48da057cbe761021e19b3" kindref="member">emplaceBackFmt</ref>(</highlight><highlight class="stringliteral">&quot;ROUTINE_VISIBILITY<sp/>void<sp/>stroutine%u(void<sp/>*context);\n&quot;</highlight><highlight class="normal">,<sp/>routine_idx);</highlight></codeline>
<codeline lineno="606"><highlight class="normal"></highlight></codeline>
<codeline lineno="607"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(static_var_idx<sp/>!=<sp/><ref refid="structStcodeRoutine_1a7e3f29a7fffb2635c11f10ecdb9194da" kindref="member">STATIC_VAR_ABSCENT_ID</ref>)</highlight></codeline>
<codeline lineno="608"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="609"><highlight class="normal"><sp/><sp/><sp/><sp/>result.cppStrings.emplaceBackFmt(</highlight><highlight class="stringliteral">&quot;\n#ifdef<sp/>CUR_STVAR_ID\n#undef<sp/>CUR_STVAR_ID\n#endif\n\n#define<sp/>CUR_STVAR_ID<sp/>%u\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="610"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>static_var_idx);</highlight></codeline>
<codeline lineno="611"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="612"><highlight class="normal"></highlight></codeline>
<codeline lineno="613"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*multidrawCbuf<sp/>=<sp/>bool_to_str(<ref refid="structStaticStcodeRoutine_1a8c5e6e6a9040772a8094250f0b1a89ea" kindref="member">supportsMultidraw</ref>);</highlight></codeline>
<codeline lineno="614"><highlight class="normal"></highlight></codeline>
<codeline lineno="615"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="structStcodeRoutine_1a27f002069a52afa2d7d73f73727455b4" kindref="member">hasCode</ref>())</highlight></codeline>
<codeline lineno="616"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="617"><highlight class="normal"><sp/><sp/><sp/><sp/>result.cppStrings.emplaceBackFmt(</highlight><highlight class="stringliteral">&quot;ROUTINE_VISIBILITY<sp/>void<sp/>stroutine%u(void<sp/>*context)\n{\n&quot;</highlight><highlight class="normal">,<sp/>routine_idx);</highlight></codeline>
<codeline lineno="618"><highlight class="normal"><sp/><sp/><sp/><sp/>result.cppStrings.emplaceBackFmt(</highlight><highlight class="stringliteral">&quot;<sp/><sp/>create_state(nullptr,<sp/>0,<sp/>nullptr,<sp/>0,<sp/>nullptr,<sp/>0,<sp/>%s,<sp/>context);\n&quot;</highlight><highlight class="normal">,<sp/>multidrawCbuf);</highlight></codeline>
<codeline lineno="619"><highlight class="normal"><sp/><sp/><sp/><sp/>result.cppStrings.emplaceBack(</highlight><highlight class="stringliteral">&quot;}\n\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="620"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="621"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="622"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="623"><highlight class="normal"><sp/><sp/><sp/><sp/>G_ASSERT(<ref refid="structStcodeRoutine_1af0a0fa1835a8049cce67a6139364c86c" kindref="member">blockDepth</ref><sp/>==<sp/>1);</highlight></codeline>
<codeline lineno="624"><highlight class="normal"></highlight></codeline>
<codeline lineno="625"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>cppRoutineTemplate[]<sp/>=</highlight></codeline>
<codeline lineno="626"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;_stcodeTemplates/staticRoutine.cpp.inl.fmt&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="627"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>;</highlight></codeline>
<codeline lineno="628"><highlight class="normal"></highlight></codeline>
<codeline lineno="629"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>LOC_MACRO[]<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;LOCSTAT&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="630"><highlight class="normal"><sp/><sp/><sp/><sp/>result.cppStrings.emplaceBack(</highlight><highlight class="stringliteral">&quot;\n#ifdef<sp/>LOC\n#undef<sp/>LOC\n#endif\n\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="631"><highlight class="normal"><sp/><sp/><sp/><sp/>result.cppStrings.emplaceBackFmt(</highlight><highlight class="stringliteral">&quot;#define<sp/>LOC(name_)<sp/>%s(name_)\n&quot;</highlight><highlight class="normal">,<sp/>LOC_MACRO);</highlight></codeline>
<codeline lineno="632"><highlight class="normal"></highlight></codeline>
<codeline lineno="633"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>@TODO:<sp/>builders</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="634"><highlight class="normal"><sp/><sp/><sp/><sp/>eastl::string<sp/>locations<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="635"><highlight class="normal"><sp/><sp/><sp/><sp/>eastl::string<sp/>consts<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="636"><highlight class="normal"><sp/><sp/><sp/><sp/>eastl::string<sp/>createStateCall<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="637"><highlight class="normal"></highlight></codeline>
<codeline lineno="638"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;loc<sp/>:<sp/><ref refid="structStaticStcodeRoutine_1a83da60c713504ec7331f1d99b849d3fa" kindref="member">constRegs</ref>.content)</highlight></codeline>
<codeline lineno="639"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="640"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>locations.append_sprintf(</highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/>%s%s<sp/>=<sp/>%u,\n&quot;</highlight><highlight class="normal">,<sp/>loc.name.c_str(),<sp/>STATIC_CONSTS_NAME_SUFFIX,</highlight></codeline>
<codeline lineno="641"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(loc.reg<sp/>-<sp/>const_range.<ref refid="structHlslRegRange_1ae853c9e105fc8f8f29a15c0558c4ef11" kindref="member">min</ref>)<sp/>*<sp/>FLOAT4_REG_SIZE);</highlight></codeline>
<codeline lineno="642"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="643"><highlight class="normal"></highlight></codeline>
<codeline lineno="644"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>NOTE:<sp/>we<sp/>HAVE<sp/>to<sp/>zero<sp/>out<sp/>unused<sp/>bytes<sp/>for<sp/>bindless<sp/>state<sp/>block<sp/>cache<sp/>to<sp/>behave<sp/>properly<sp/>w.r.t.<sp/>static<sp/>constants</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="645"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>range<sp/>=<sp/>const_range.<ref refid="structHlslRegRange_1af93398b7274fb7adb3ec8152f8c79eec" kindref="member">cap</ref><sp/>-<sp/>const_range.<ref refid="structHlslRegRange_1ae853c9e105fc8f8f29a15c0558c4ef11" kindref="member">min</ref>;<sp/>range<sp/>&gt;<sp/>0)</highlight></codeline>
<codeline lineno="646"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>consts.append_sprintf(</highlight><highlight class="stringliteral">&quot;<sp/><sp/>alignas(16)<sp/>float<sp/>%s[%d]<sp/>=<sp/>{};\n&quot;</highlight><highlight class="normal">,<sp/>STATIC_CONSTS_ARRAY_NAME,<sp/>range<sp/>*<sp/>FLOAT4_REG_SIZE);</highlight></codeline>
<codeline lineno="647"><highlight class="normal"></highlight></codeline>
<codeline lineno="648"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>appendTexLocations<sp/>=<sp/>[&amp;](ShaderStage<sp/>stage)<sp/>{</highlight></codeline>
<codeline lineno="649"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>SlotTexturesRangeInfo<sp/>texSmpRange<sp/>=<sp/>stage<sp/>==<sp/>STAGE_VS<sp/>?<sp/>vs_tex_smp_range<sp/>:<sp/>ps_tex_smp_range;</highlight></codeline>
<codeline lineno="650"><highlight class="normal"></highlight></codeline>
<codeline lineno="651"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;loc<sp/>:<sp/><ref refid="structStcodeRoutine_1adf3b15015bd8f9eb437d4aa67941084d" kindref="member">regsForStage</ref>(stage).content)</highlight></codeline>
<codeline lineno="652"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="653"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>locations.append_sprintf(</highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/>%s%s<sp/>=<sp/>%u,\n&quot;</highlight><highlight class="normal">,<sp/>loc.name.c_str(),<sp/>stage_to_static_tex_name_suffix(stage),</highlight></codeline>
<codeline lineno="654"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>loc.reg<sp/>-<sp/>texSmpRange.texBase);</highlight></codeline>
<codeline lineno="655"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="656"><highlight class="normal"></highlight></codeline>
<codeline lineno="657"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(texSmpRange.count<sp/>&gt;<sp/>0)</highlight></codeline>
<codeline lineno="658"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="659"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*arrName<sp/>=<sp/>stage_to_tex_array_name(stage);</highlight></codeline>
<codeline lineno="660"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>consts.append_sprintf(</highlight><highlight class="stringliteral">&quot;<sp/><sp/>uint<sp/>%s[%d];\n&quot;</highlight><highlight class="normal">,<sp/>arrName,<sp/>texSmpRange.count);</highlight></codeline>
<codeline lineno="661"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="662"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="663"><highlight class="normal"></highlight></codeline>
<codeline lineno="664"><highlight class="normal"><sp/><sp/><sp/><sp/>appendTexLocations(STAGE_VS);</highlight></codeline>
<codeline lineno="665"><highlight class="normal"><sp/><sp/><sp/><sp/>appendTexLocations(STAGE_PS);</highlight></codeline>
<codeline lineno="666"><highlight class="normal"></highlight></codeline>
<codeline lineno="667"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*vsTexPtr<sp/>=<sp/>vs_tex_smp_range.count<sp/>&gt;<sp/>0<sp/>?<sp/>stage_to_tex_array_name(STAGE_VS)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;nullptr&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="668"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*psTexPtr<sp/>=<sp/>ps_tex_smp_range.count<sp/>&gt;<sp/>0<sp/>?<sp/>stage_to_tex_array_name(STAGE_PS)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;nullptr&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="669"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*constsPtr<sp/>=<sp/>const_range.<ref refid="structHlslRegRange_1af93398b7274fb7adb3ec8152f8c79eec" kindref="member">cap</ref><sp/>&gt;<sp/>const_range.<ref refid="structHlslRegRange_1ae853c9e105fc8f8f29a15c0558c4ef11" kindref="member">min</ref><sp/>?<sp/>STATIC_CONSTS_ARRAY_NAME<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;nullptr&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="670"><highlight class="normal"></highlight></codeline>
<codeline lineno="671"><highlight class="normal"><sp/><sp/><sp/><sp/>eastl::string<sp/>vsTexRange<sp/>=<sp/><ref refid="commonUtils_8h_1a423a5cbb08af4695251ec87aa21a5fe1" kindref="member">string_f</ref>(</highlight><highlight class="stringliteral">&quot;%u&quot;</highlight><highlight class="normal">,<sp/>vs_tex_smp_range.raw);</highlight></codeline>
<codeline lineno="672"><highlight class="normal"><sp/><sp/><sp/><sp/>eastl::string<sp/>psTexRange<sp/>=<sp/><ref refid="commonUtils_8h_1a423a5cbb08af4695251ec87aa21a5fe1" kindref="member">string_f</ref>(</highlight><highlight class="stringliteral">&quot;%u&quot;</highlight><highlight class="normal">,<sp/>ps_tex_smp_range.raw);</highlight></codeline>
<codeline lineno="673"><highlight class="normal"><sp/><sp/><sp/><sp/>eastl::string<sp/>constsRange<sp/>=<sp/><ref refid="commonUtils_8h_1a423a5cbb08af4695251ec87aa21a5fe1" kindref="member">string_f</ref>(</highlight><highlight class="stringliteral">&quot;%u&quot;</highlight><highlight class="normal">,<sp/>const_range.<ref refid="structHlslRegRange_1af93398b7274fb7adb3ec8152f8c79eec" kindref="member">cap</ref><sp/>-<sp/>const_range.<ref refid="structHlslRegRange_1ae853c9e105fc8f8f29a15c0558c4ef11" kindref="member">min</ref>);</highlight></codeline>
<codeline lineno="674"><highlight class="normal"></highlight></codeline>
<codeline lineno="675"><highlight class="normal"><sp/><sp/><sp/><sp/>createStateCall<sp/>=<sp/><ref refid="commonUtils_8h_1a423a5cbb08af4695251ec87aa21a5fe1" kindref="member">string_f</ref>(</highlight><highlight class="stringliteral">&quot;<sp/><sp/>create_state(%s,<sp/>%s,<sp/>%s,<sp/>%s,<sp/>(float4<sp/>*)%s,<sp/>%s,<sp/>%s,<sp/>context);\n&quot;</highlight><highlight class="normal">,<sp/>vsTexPtr,<sp/>vsTexRange.c_str(),</highlight></codeline>
<codeline lineno="676"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>psTexPtr,<sp/>psTexRange.c_str(),<sp/>constsPtr,<sp/>constsRange.c_str(),<sp/>multidrawCbuf);</highlight></codeline>
<codeline lineno="677"><highlight class="normal"></highlight></codeline>
<codeline lineno="678"><highlight class="normal"><sp/><sp/><sp/><sp/>result.cppStrings.emplaceBackFmt(cppRoutineTemplate,<sp/>routine_idx,<sp/>locations.c_str(),<sp/>consts.c_str(),<sp/><ref refid="structStcodeRoutine_1a65f07be4ac6541c4d3457d3bbe1c6774" kindref="member">decls</ref>.<ref refid="classStcodeBuilder_1af800507e36690d738a1633c2d922df74" kindref="member">release</ref>().c_str(),</highlight></codeline>
<codeline lineno="679"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structStcodeRoutine_1a79b3a88d088ad5748c5c11f132486697" kindref="member">code</ref>.<ref refid="classStcodeBuilder_1af800507e36690d738a1633c2d922df74" kindref="member">release</ref>().c_str(),<sp/>createStateCall.c_str());</highlight></codeline>
<codeline lineno="680"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="681"><highlight class="normal"></highlight></codeline>
<codeline lineno="682"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="683"><highlight class="normal">}</highlight></codeline>
<codeline lineno="684"><highlight class="normal"></highlight></codeline>
<codeline lineno="685"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="structStaticStcodeRoutine_1a5b651f9fbc8618a550c3ab26ff7d96f4" kindref="member">StaticStcodeRoutine::addStaticShaderTex</ref>(ShaderStage<sp/>stage,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*name,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*var_name,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="686"><highlight class="normal">{</highlight></codeline>
<codeline lineno="687"><highlight class="normal"><sp/><sp/><ref refid="cppStcode_8h_1ac560d55d8ba0d82453054cbc1050fc7b" kindref="member">RET_IF_SHOULD_NOT_COMPILE</ref>();</highlight></codeline>
<codeline lineno="688"><highlight class="normal"></highlight></codeline>
<codeline lineno="689"><highlight class="normal"><sp/><sp/>G_ASSERT(stage<sp/>!=<sp/>STAGE_CS);</highlight></codeline>
<codeline lineno="690"><highlight class="normal"></highlight></codeline>
<codeline lineno="691"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>eastl::string<sp/>location(eastl::string::CtorSprintf{},<sp/></highlight><highlight class="stringliteral">&quot;%s%s&quot;</highlight><highlight class="normal">,<sp/>name,<sp/>stage_to_static_tex_name_suffix(stage));</highlight></codeline>
<codeline lineno="692"><highlight class="normal"></highlight></codeline>
<codeline lineno="693"><highlight class="normal"><sp/><sp/><ref refid="structStcodeRoutine_1a4482357fc0c8a5ffbd7950ddfe96d3d3" kindref="member">addFormattedStatement</ref>(</highlight><highlight class="stringliteral">&quot;%s[LOC(%s)]<sp/>=<sp/>acquire_tex(VARLOC(%s,<sp/>void));\n&quot;</highlight><highlight class="normal">,<sp/>stage_to_tex_array_name(stage),<sp/>location.c_str(),<sp/>var_name);</highlight></codeline>
<codeline lineno="694"><highlight class="normal"><sp/><sp/><ref refid="structStcodeRoutine_1adf3b15015bd8f9eb437d4aa67941084d" kindref="member">regsForStage</ref>(stage).<ref refid="structStcodeRegisters_1a9f00c01ee0f139bad8b2f7a0c550f6a7" kindref="member">add</ref>(name,<sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="695"><highlight class="normal">}</highlight></codeline>
<codeline lineno="696"><highlight class="normal"></highlight></codeline>
<codeline lineno="697"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="structStaticStcodeRoutine_1a446517c520fa7abd98e700824359b950" kindref="member">StaticStcodeRoutine::addBindlessShaderTexture</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*name,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*var_name,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="698"><highlight class="normal">{</highlight></codeline>
<codeline lineno="699"><highlight class="normal"><sp/><sp/><ref refid="cppStcode_8h_1ac560d55d8ba0d82453054cbc1050fc7b" kindref="member">RET_IF_SHOULD_NOT_COMPILE</ref>();</highlight></codeline>
<codeline lineno="700"><highlight class="normal"></highlight></codeline>
<codeline lineno="701"><highlight class="normal"><sp/><sp/><ref refid="structStcodeRoutine_1a4482357fc0c8a5ffbd7950ddfe96d3d3" kindref="member">addFormattedStatement</ref>(</highlight><highlight class="stringliteral">&quot;reg_bindless(VARLOC(%s,<sp/>void),<sp/>LOC(%s%s)<sp/>/<sp/>%d,<sp/>bindless_ctx);\n&quot;</highlight><highlight class="normal">,<sp/>var_name,<sp/>name,<sp/>STATIC_CONSTS_NAME_SUFFIX,</highlight></codeline>
<codeline lineno="702"><highlight class="normal"><sp/><sp/><sp/><sp/>FLOAT4_REG_SIZE);</highlight></codeline>
<codeline lineno="703"><highlight class="normal"><sp/><sp/><ref refid="structStaticStcodeRoutine_1ab4c051fc8b1efc4796ba7e284967fe75" kindref="member">addShaderConst</ref>(SHVT_INT4,<sp/>semantic::VariableType::i2,<sp/>name,<sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;int4(-1,<sp/>-1,<sp/>0,<sp/>0)&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="704"><highlight class="normal">}</highlight></codeline>
<codeline lineno="705"><highlight class="normal"></highlight></codeline>
<codeline lineno="706"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="structStaticStcodeRoutine_1ab4c051fc8b1efc4796ba7e284967fe75" kindref="member">StaticStcodeRoutine::addShaderConst</ref>(ShaderVarType<sp/>shvt,<sp/><ref refid="namespacesemantic_1a1fd7ba909c618ad56fbacae8b3226182" kindref="member">semantic::VariableType</ref><sp/>vt,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*name,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*val,</highlight></codeline>
<codeline lineno="707"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>array_index)</highlight></codeline>
<codeline lineno="708"><highlight class="normal">{</highlight></codeline>
<codeline lineno="709"><highlight class="normal"><sp/><sp/><ref refid="cppStcode_8h_1ac560d55d8ba0d82453054cbc1050fc7b" kindref="member">RET_IF_SHOULD_NOT_COMPILE</ref>();</highlight></codeline>
<codeline lineno="710"><highlight class="normal"></highlight></codeline>
<codeline lineno="711"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*typeName<sp/>=<sp/>get_shader_const_type_name(shvt,<sp/>vt);</highlight></codeline>
<codeline lineno="712"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>eastl::string<sp/>location<sp/>=<sp/><ref refid="commonUtils_8h_1a423a5cbb08af4695251ec87aa21a5fe1" kindref="member">string_f</ref>(</highlight><highlight class="stringliteral">&quot;%s%s&quot;</highlight><highlight class="normal">,<sp/>name,<sp/>STATIC_CONSTS_NAME_SUFFIX);</highlight></codeline>
<codeline lineno="713"><highlight class="normal"></highlight></codeline>
<codeline lineno="714"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>regSize<sp/>=<sp/>shvt<sp/>==<sp/>SHVT_FLOAT4X4<sp/>?<sp/>4<sp/>:<sp/>1;</highlight></codeline>
<codeline lineno="715"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>size<sp/>=<sp/>shader_const_is_numeric(shvt)<sp/>?<sp/>regSize<sp/>*<sp/>FLOAT4_REG_SIZE<sp/>:<sp/>regSize;</highlight></codeline>
<codeline lineno="716"><highlight class="normal"></highlight></codeline>
<codeline lineno="717"><highlight class="normal"><sp/><sp/><ref refid="structStcodeRoutine_1abd5112d8321812bca8c76b6aeb38ad29" kindref="member">addSetConstStmt</ref>(typeName,<sp/>size,<sp/>location.c_str(),<sp/>val,<sp/>STATIC_CONSTS_ARRAY_NAME,<sp/>array_index);</highlight></codeline>
<codeline lineno="718"><highlight class="normal"></highlight></codeline>
<codeline lineno="719"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(array_index<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="720"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structStaticStcodeRoutine_1a83da60c713504ec7331f1d99b849d3fa" kindref="member">constRegs</ref>.<ref refid="structStcodeRegisters_1a9f00c01ee0f139bad8b2f7a0c550f6a7" kindref="member">add</ref>(name,<sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/>regSize);</highlight></codeline>
<codeline lineno="721"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="722"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="723"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;loc<sp/>:<sp/><ref refid="structStaticStcodeRoutine_1a83da60c713504ec7331f1d99b849d3fa" kindref="member">constRegs</ref>.content)</highlight></codeline>
<codeline lineno="724"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="725"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(name<sp/>==<sp/>loc.name)</highlight></codeline>
<codeline lineno="726"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="727"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>G_ASSERT(loc.isNumeric);</highlight></codeline>
<codeline lineno="728"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>loc.regSize<sp/>=<sp/>max(loc.regSize,<sp/>regSize<sp/>*<sp/>(array_index<sp/>+<sp/>1));</highlight></codeline>
<codeline lineno="729"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="730"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="731"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="732"><highlight class="normal">}</highlight></codeline>
<codeline lineno="733"><highlight class="normal"></highlight></codeline>
<codeline lineno="734"><highlight class="normal"><ref refid="structCryptoHash" kindref="compound">CryptoHash</ref><sp/><ref refid="structStaticStcodeRoutine_1a0c23a35a3ca5f69013c3bb171fdfd6b7" kindref="member">StaticStcodeRoutine::calcHash</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structCryptoHash" kindref="compound">CryptoHash</ref><sp/>*base)</highlight></codeline>
<codeline lineno="735"><highlight class="normal">{</highlight></codeline>
<codeline lineno="736"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>hasher<sp/>=<sp/><ref refid="structCryptoHasher" kindref="compound">CryptoHasher</ref>{<ref refid="structStcodeRoutine_1a5babc5921e35eb29e7cfe8f1e0181c3c" kindref="member">StcodeRoutine::calcHash</ref>(base)};</highlight></codeline>
<codeline lineno="737"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="structStaticStcodeRoutine_1a83da60c713504ec7331f1d99b849d3fa" kindref="member">constRegs</ref>.<ref refid="structStcodeRegisters_1ad8e02d5f66c905e50347f095de4d32fa" kindref="member">content</ref>.empty())</highlight></codeline>
<codeline lineno="738"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="739"><highlight class="normal"><sp/><sp/><sp/><sp/>hasher.update(0u);</highlight></codeline>
<codeline lineno="740"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;r<sp/>:<sp/><ref refid="structStaticStcodeRoutine_1a83da60c713504ec7331f1d99b849d3fa" kindref="member">constRegs</ref>.content)</highlight></codeline>
<codeline lineno="741"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>hasher.update(r.reg);</highlight></codeline>
<codeline lineno="742"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="743"><highlight class="normal"><sp/><sp/>hasher.update(<ref refid="structStaticStcodeRoutine_1a8c5e6e6a9040772a8094250f0b1a89ea" kindref="member">supportsMultidraw</ref>);</highlight></codeline>
<codeline lineno="744"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>hasher.hash();</highlight></codeline>
<codeline lineno="745"><highlight class="normal">}</highlight></codeline>
<codeline lineno="746"><highlight class="normal"></highlight></codeline>
<codeline lineno="748"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="structStcodeGlobalVars_1ab2f9e5dd6a9e752be67ea7951fd4e6f1" kindref="member">StcodeGlobalVars::setVar</ref>(ShaderVarType<sp/>shv_type,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*name,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>id_in_final_dump)</highlight></codeline>
<codeline lineno="749"><highlight class="normal">{</highlight></codeline>
<codeline lineno="750"><highlight class="normal"><sp/><sp/><ref refid="cppStcode_8h_1ac560d55d8ba0d82453054cbc1050fc7b" kindref="member">RET_IF_SHOULD_NOT_COMPILE</ref>();</highlight></codeline>
<codeline lineno="751"><highlight class="normal"></highlight></codeline>
<codeline lineno="752"><highlight class="normal"><sp/><sp/>G_ASSERTF(<ref refid="structStcodeGlobalVars_1a3850a54b1390302582519156cb3af648" kindref="member">type</ref><sp/>!=<sp/><ref refid="structStcodeGlobalVars_1a9d13cdcc3efc084d3f6ed74206268112a2eca6bbd79604d1d742efa40e3a9a82a" kindref="member">Type::MAIN_COLLECTION</ref><sp/>||<sp/>id_in_final_dump<sp/>!=<sp/><ref refid="structStcodeGlobalVars_1a73ba26c0f43122b89eb234fff9dc0fc7" kindref="member">INVALID_IN_DUMP_VAR_ID</ref>,</highlight></codeline>
<codeline lineno="753"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;When<sp/>updating<sp/>final<sp/>collection<sp/>and<sp/>assembling<sp/>fetcher<sp/>code,<sp/>pass<sp/>in<sp/>a<sp/>globvar<sp/>id&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="754"><highlight class="normal"><sp/><sp/>G_ASSERTF(<ref refid="structStcodeGlobalVars_1a3850a54b1390302582519156cb3af648" kindref="member">type</ref><sp/>!=<sp/><ref refid="structStcodeGlobalVars_1a9d13cdcc3efc084d3f6ed74206268112a688be6b57b2ae8580215def4a96efdc1" kindref="member">Type::REFERENCED_BY_SHADER</ref><sp/>||<sp/>id_in_final_dump<sp/>==<sp/><ref refid="structStcodeGlobalVars_1a73ba26c0f43122b89eb234fff9dc0fc7" kindref="member">INVALID_IN_DUMP_VAR_ID</ref>,</highlight></codeline>
<codeline lineno="755"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;When<sp/>using<sp/>StcodeGlobVars<sp/>for<sp/>intermediate<sp/>storage,<sp/>don&apos;t<sp/>pass<sp/>the<sp/>id,<sp/>as<sp/>it<sp/>is<sp/>not<sp/>known&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="756"><highlight class="normal"></highlight></codeline>
<codeline lineno="757"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*type_name<sp/>=<sp/><ref refid="namespacestcode_1a286b6353e9940ecc3c5bd2fe4e520d3a" kindref="member">stcode::shadervar_type_to_stcode_type</ref>(shv_type);</highlight></codeline>
<codeline lineno="758"><highlight class="normal"></highlight></codeline>
<codeline lineno="759"><highlight class="normal"><sp/><sp/>eastl::string<sp/>varDecl(eastl::string::CtorSprintf{},<sp/></highlight><highlight class="stringliteral">&quot;%s<sp/>*%s&quot;</highlight><highlight class="normal">,<sp/>type_name,<sp/>name);</highlight></codeline>
<codeline lineno="760"><highlight class="normal"><sp/><sp/><ref refid="structStcodeGlobalVars_1a88d1c004290867487c70656306888efe" kindref="member">cppCode</ref>.<ref refid="classStcodeBuilder_1a75203805b3d48da057cbe761021e19b3" kindref="member">emplaceBackFmt</ref>(</highlight><highlight class="stringliteral">&quot;%s<sp/>=<sp/>nullptr;\n&quot;</highlight><highlight class="normal">,<sp/>varDecl.c_str());</highlight></codeline>
<codeline lineno="761"><highlight class="normal"></highlight></codeline>
<codeline lineno="762"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(<ref refid="structStcodeGlobalVars_1a3850a54b1390302582519156cb3af648" kindref="member">type</ref>)</highlight></codeline>
<codeline lineno="763"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="764"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="structStcodeGlobalVars_1a9d13cdcc3efc084d3f6ed74206268112a2eca6bbd79604d1d742efa40e3a9a82a" kindref="member">Type::MAIN_COLLECTION</ref>:<sp/><ref refid="structStcodeGlobalVars_1afc4108c6e140f5b9a215af60650e499f" kindref="member">fetchersOrFwdCpp</ref>.<ref refid="classStcodeBuilder_1a75203805b3d48da057cbe761021e19b3" kindref="member">emplaceBackFmt</ref>(</highlight><highlight class="stringliteral">&quot;{(void<sp/>**)&amp;%s,<sp/>%d},\n&quot;</highlight><highlight class="normal">,<sp/>name,<sp/>id_in_final_dump);<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="765"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="structStcodeGlobalVars_1a9d13cdcc3efc084d3f6ed74206268112a688be6b57b2ae8580215def4a96efdc1" kindref="member">Type::REFERENCED_BY_SHADER</ref>:<sp/><ref refid="structStcodeGlobalVars_1afc4108c6e140f5b9a215af60650e499f" kindref="member">fetchersOrFwdCpp</ref>.<ref refid="classStcodeBuilder_1a75203805b3d48da057cbe761021e19b3" kindref="member">emplaceBackFmt</ref>(</highlight><highlight class="stringliteral">&quot;extern<sp/>%s;\n&quot;</highlight><highlight class="normal">,<sp/>varDecl.c_str());<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="766"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="767"><highlight class="normal">}</highlight></codeline>
<codeline lineno="768"><highlight class="normal"></highlight></codeline>
<codeline lineno="769"><highlight class="normal"><ref refid="structStcodeGlobalVars_1_1Strings" kindref="compound">StcodeGlobalVars::Strings</ref><sp/><ref refid="structStcodeGlobalVars_1a802c7ba5fda2f6b7181f45d650f3f9ed" kindref="member">StcodeGlobalVars::releaseAssembledCode</ref>()</highlight></codeline>
<codeline lineno="770"><highlight class="normal">{</highlight></codeline>
<codeline lineno="771"><highlight class="normal"><sp/><sp/><ref refid="cppStcode_8h_1ac560d55d8ba0d82453054cbc1050fc7b" kindref="member">RET_IF_SHOULD_NOT_COMPILE</ref>({});</highlight></codeline>
<codeline lineno="772"><highlight class="normal"></highlight></codeline>
<codeline lineno="773"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Strings{<ref refid="structStcodeGlobalVars_1a88d1c004290867487c70656306888efe" kindref="member">cppCode</ref>.<ref refid="classStcodeBuilder_1af800507e36690d738a1633c2d922df74" kindref="member">release</ref>(),<sp/><ref refid="structStcodeGlobalVars_1afc4108c6e140f5b9a215af60650e499f" kindref="member">fetchersOrFwdCpp</ref>.<ref refid="classStcodeBuilder_1af800507e36690d738a1633c2d922df74" kindref="member">release</ref>()};</highlight></codeline>
<codeline lineno="774"><highlight class="normal">}</highlight></codeline>
<codeline lineno="775"><highlight class="normal"></highlight></codeline>
<codeline lineno="776"><highlight class="normal"></highlight></codeline>
<codeline lineno="778"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="structStcodeShader_1a328a8dc795491ff3da3d032bc46c7f51" kindref="member">StcodeShader::addStaticVarLocations</ref>(<ref refid="structStcodeStaticVars" kindref="compound">StcodeStaticVars</ref><sp/>&amp;&amp;locations)</highlight></codeline>
<codeline lineno="779"><highlight class="normal">{</highlight></codeline>
<codeline lineno="780"><highlight class="normal"><sp/><sp/><ref refid="cppStcode_8h_1ac560d55d8ba0d82453054cbc1050fc7b" kindref="member">RET_IF_SHOULD_NOT_COMPILE</ref>();</highlight></codeline>
<codeline lineno="781"><highlight class="normal"></highlight></codeline>
<codeline lineno="782"><highlight class="normal"><sp/><sp/><ref refid="structCryptoHasher" kindref="compound">CryptoHasher</ref><sp/>stvarHasher{};</highlight></codeline>
<codeline lineno="783"><highlight class="normal"><sp/><sp/>stvarHasher.<ref refid="structCryptoHasher_1a568041f71f7c96cda2ce8ca6b2d3ed64" kindref="member">update</ref>(uint32_t(locations.content.size()));</highlight></codeline>
<codeline lineno="784"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;loc<sp/>:<sp/>locations.content)</highlight></codeline>
<codeline lineno="785"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="786"><highlight class="normal"><sp/><sp/><sp/><sp/>stvarHasher.update(loc.name.c_str());</highlight></codeline>
<codeline lineno="787"><highlight class="normal"><sp/><sp/><sp/><sp/>stvarHasher.update(uint32_t(loc.getId()));</highlight></codeline>
<codeline lineno="788"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="789"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structCryptoHash" kindref="compound">CryptoHash</ref><sp/>stvarHash<sp/>=<sp/>stvarHasher.hash();</highlight></codeline>
<codeline lineno="790"><highlight class="normal"></highlight></codeline>
<codeline lineno="791"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>it<sp/>=<sp/>eastl::find(<ref refid="structStcodeShader_1a4f2eeefb69c7f781961e8fd2dd71fba5" kindref="member">stvarHashes</ref>.begin(),<sp/><ref refid="structStcodeShader_1a4f2eeefb69c7f781961e8fd2dd71fba5" kindref="member">stvarHashes</ref>.end(),<sp/>stvarHash);<sp/>it<sp/>!=<sp/><ref refid="structStcodeShader_1a4f2eeefb69c7f781961e8fd2dd71fba5" kindref="member">stvarHashes</ref>.end())</highlight></codeline>
<codeline lineno="792"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="793"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structStcodeShader_1adc30de4d892b6a90585434de98a1cafb" kindref="member">curStvarId</ref><sp/>=<sp/>eastl::distance(<ref refid="structStcodeShader_1a4f2eeefb69c7f781961e8fd2dd71fba5" kindref="member">stvarHashes</ref>.begin(),<sp/>it);</highlight></codeline>
<codeline lineno="794"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="795"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="796"><highlight class="normal"></highlight></codeline>
<codeline lineno="797"><highlight class="normal"><sp/><sp/><ref refid="structStcodeShader_1adc30de4d892b6a90585434de98a1cafb" kindref="member">curStvarId</ref><sp/>=<sp/><ref refid="structStcodeShader_1a4f2eeefb69c7f781961e8fd2dd71fba5" kindref="member">stvarHashes</ref>.size();</highlight></codeline>
<codeline lineno="798"><highlight class="normal"><sp/><sp/><ref refid="structStcodeShader_1a4f2eeefb69c7f781961e8fd2dd71fba5" kindref="member">stvarHashes</ref>.push_back(stvarHash);</highlight></codeline>
<codeline lineno="799"><highlight class="normal"></highlight></codeline>
<codeline lineno="800"><highlight class="normal"><sp/><sp/><ref refid="classStcodeBuilder" kindref="compound">StcodeBuilder</ref><sp/>offsetsCppStrings;</highlight></codeline>
<codeline lineno="801"><highlight class="normal"><sp/><sp/>offsetsCppStrings.<ref refid="classStcodeBuilder_1a75203805b3d48da057cbe761021e19b3" kindref="member">emplaceBackFmt</ref>(</highlight><highlight class="stringliteral">&quot;enum<sp/>class<sp/>OffsetStvar%u<sp/>:<sp/>size_t\n{\n&quot;</highlight><highlight class="normal">,<sp/><ref refid="structStcodeShader_1adc30de4d892b6a90585434de98a1cafb" kindref="member">curStvarId</ref>);</highlight></codeline>
<codeline lineno="802"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;loc<sp/>:<sp/>locations.content)</highlight></codeline>
<codeline lineno="803"><highlight class="normal"><sp/><sp/><sp/><sp/>offsetsCppStrings.emplaceBackFmt(</highlight><highlight class="stringliteral">&quot;<sp/><sp/>%s_ofs<sp/>=<sp/>%d,\n&quot;</highlight><highlight class="normal">,<sp/>loc.name.c_str(),<sp/>loc.getId());</highlight></codeline>
<codeline lineno="804"><highlight class="normal"><sp/><sp/>offsetsCppStrings.<ref refid="classStcodeBuilder_1afa302f57e7422c4efbe63df807e61e2f" kindref="member">emplaceBack</ref>(</highlight><highlight class="stringliteral">&quot;};\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="805"><highlight class="normal"></highlight></codeline>
<codeline lineno="806"><highlight class="normal"><sp/><sp/><ref refid="structStcodeShader_1a0eb8bc68674356efadc910b83b377057" kindref="member">code</ref>.<ref refid="structStcodeAccumulator_1af8209ee1604fffe5d39ca1835b6090fd" kindref="member">cppStrings</ref>.<ref refid="classStcodeBuilder_1ac4026355a2a4acf32bd0d8959c1d812f" kindref="member">pushFront</ref>(offsetsCppStrings.<ref refid="classStcodeBuilder_1af800507e36690d738a1633c2d922df74" kindref="member">release</ref>());</highlight></codeline>
<codeline lineno="807"><highlight class="normal">}</highlight></codeline>
<codeline lineno="808"><highlight class="normal"></highlight></codeline>
<codeline lineno="809"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>is_prefix(dag::ConstSpan&lt;int&gt;<sp/>table,<sp/>dag::ConstSpan&lt;int&gt;<sp/>enclosing_table)</highlight></codeline>
<codeline lineno="810"><highlight class="normal">{</highlight></codeline>
<codeline lineno="811"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>table.size()<sp/>&lt;=<sp/>enclosing_table.size()<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="812"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memcmp(table.cbegin(),<sp/>enclosing_table.cbegin(),<sp/>table.size()<sp/>*<sp/>elem_size(table))<sp/>==<sp/>0;</highlight></codeline>
<codeline lineno="813"><highlight class="normal">}</highlight></codeline>
<codeline lineno="814"><highlight class="normal"></highlight></codeline>
<codeline lineno="815"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="structStcodeShader_1ae3c24ffd52b1236b13e7715878a9c387" kindref="member">StcodeShader::addRegisterTableWithIndex</ref>(Tab&lt;int&gt;<sp/>&amp;&amp;table)</highlight></codeline>
<codeline lineno="816"><highlight class="normal">{</highlight></codeline>
<codeline lineno="817"><highlight class="normal"><sp/><sp/><ref refid="cppStcode_8h_1ac560d55d8ba0d82453054cbc1050fc7b" kindref="member">RET_IF_SHOULD_NOT_COMPILE</ref>(-1);</highlight></codeline>
<codeline lineno="818"><highlight class="normal"></highlight></codeline>
<codeline lineno="819"><highlight class="normal"><sp/><sp/>G_ASSERT(<ref refid="structStcodeShader_1a0fc5dcef4db2f3f00b1ceb1655311c00" kindref="member">regTable</ref>.<ref refid="structStcodeShader_1_1RegisterTable_1a5e9b663761faab1a927d1c2d80e077db" kindref="member">offsets</ref>.empty());</highlight></codeline>
<codeline lineno="820"><highlight class="normal"></highlight></codeline>
<codeline lineno="821"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/><ref refid="structStcodeShader_1a0fc5dcef4db2f3f00b1ceb1655311c00" kindref="member">regTable</ref>.<ref refid="structStcodeShader_1_1RegisterTable_1ac76a82a19c0444083bab58903faf2d92" kindref="member">combinedTable</ref>.size();<sp/>++i)</highlight></codeline>
<codeline lineno="822"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="823"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(is_prefix(table,<sp/><ref refid="structStcodeShader_1a0fc5dcef4db2f3f00b1ceb1655311c00" kindref="member">regTable</ref>.<ref refid="structStcodeShader_1_1RegisterTable_1ac76a82a19c0444083bab58903faf2d92" kindref="member">combinedTable</ref>[i]))</highlight></codeline>
<codeline lineno="824"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="825"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="826"><highlight class="normal"><sp/><sp/><ref refid="structStcodeShader_1a0fc5dcef4db2f3f00b1ceb1655311c00" kindref="member">regTable</ref>.<ref refid="structStcodeShader_1_1RegisterTable_1ac76a82a19c0444083bab58903faf2d92" kindref="member">combinedTable</ref>.push_back(eastl::move(table));</highlight></codeline>
<codeline lineno="827"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>int(<ref refid="structStcodeShader_1a0fc5dcef4db2f3f00b1ceb1655311c00" kindref="member">regTable</ref>.<ref refid="structStcodeShader_1_1RegisterTable_1ac76a82a19c0444083bab58903faf2d92" kindref="member">combinedTable</ref>.size()<sp/>-<sp/>1);</highlight></codeline>
<codeline lineno="828"><highlight class="normal">}</highlight></codeline>
<codeline lineno="829"><highlight class="normal"></highlight></codeline>
<codeline lineno="830"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="structStcodeShader_1a36813a7078bf6490784b97e700de11b7" kindref="member">StcodeShader::addRegisterTableWithOffset</ref>(Tab&lt;int&gt;<sp/>&amp;&amp;table)</highlight></codeline>
<codeline lineno="831"><highlight class="normal">{</highlight></codeline>
<codeline lineno="832"><highlight class="normal"><sp/><sp/><ref refid="cppStcode_8h_1ac560d55d8ba0d82453054cbc1050fc7b" kindref="member">RET_IF_SHOULD_NOT_COMPILE</ref>(-1);</highlight></codeline>
<codeline lineno="833"><highlight class="normal"></highlight></codeline>
<codeline lineno="834"><highlight class="normal"><sp/><sp/>G_ASSERT(<ref refid="structStcodeShader_1a0fc5dcef4db2f3f00b1ceb1655311c00" kindref="member">regTable</ref>.<ref refid="structStcodeShader_1_1RegisterTable_1ac76a82a19c0444083bab58903faf2d92" kindref="member">combinedTable</ref>.size()<sp/>==<sp/><ref refid="structStcodeShader_1a0fc5dcef4db2f3f00b1ceb1655311c00" kindref="member">regTable</ref>.<ref refid="structStcodeShader_1_1RegisterTable_1a5e9b663761faab1a927d1c2d80e077db" kindref="member">offsets</ref>.size());</highlight></codeline>
<codeline lineno="835"><highlight class="normal"></highlight></codeline>
<codeline lineno="836"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/><ref refid="structStcodeShader_1a0fc5dcef4db2f3f00b1ceb1655311c00" kindref="member">regTable</ref>.<ref refid="structStcodeShader_1_1RegisterTable_1ac76a82a19c0444083bab58903faf2d92" kindref="member">combinedTable</ref>.size();<sp/>++i)</highlight></codeline>
<codeline lineno="837"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="838"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(is_prefix(table,<sp/><ref refid="structStcodeShader_1a0fc5dcef4db2f3f00b1ceb1655311c00" kindref="member">regTable</ref>.<ref refid="structStcodeShader_1_1RegisterTable_1ac76a82a19c0444083bab58903faf2d92" kindref="member">combinedTable</ref>[i]))</highlight></codeline>
<codeline lineno="839"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structStcodeShader_1a0fc5dcef4db2f3f00b1ceb1655311c00" kindref="member">regTable</ref>.<ref refid="structStcodeShader_1_1RegisterTable_1a5e9b663761faab1a927d1c2d80e077db" kindref="member">offsets</ref>[i];</highlight></codeline>
<codeline lineno="840"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="841"><highlight class="normal"><sp/><sp/><ref refid="structStcodeShader_1a0fc5dcef4db2f3f00b1ceb1655311c00" kindref="member">regTable</ref>.<ref refid="structStcodeShader_1_1RegisterTable_1a5e9b663761faab1a927d1c2d80e077db" kindref="member">offsets</ref>.push_back(<ref refid="structStcodeShader_1a0fc5dcef4db2f3f00b1ceb1655311c00" kindref="member">regTable</ref>.<ref refid="structStcodeShader_1_1RegisterTable_1a5e9b663761faab1a927d1c2d80e077db" kindref="member">offsets</ref>.empty()<sp/>?<sp/>0<sp/>:<sp/>(<ref refid="structStcodeShader_1a0fc5dcef4db2f3f00b1ceb1655311c00" kindref="member">regTable</ref>.offsets.back()<sp/>+<sp/>(int)<ref refid="structStcodeShader_1a0fc5dcef4db2f3f00b1ceb1655311c00" kindref="member">regTable</ref>.combinedTable.back().size()));</highlight></codeline>
<codeline lineno="842"><highlight class="normal"><sp/><sp/><ref refid="structStcodeShader_1a0fc5dcef4db2f3f00b1ceb1655311c00" kindref="member">regTable</ref>.<ref refid="structStcodeShader_1_1RegisterTable_1ac76a82a19c0444083bab58903faf2d92" kindref="member">combinedTable</ref>.push_back(eastl::move(table));</highlight></codeline>
<codeline lineno="843"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structStcodeShader_1a0fc5dcef4db2f3f00b1ceb1655311c00" kindref="member">regTable</ref>.<ref refid="structStcodeShader_1_1RegisterTable_1a5e9b663761faab1a927d1c2d80e077db" kindref="member">offsets</ref>.back();</highlight></codeline>
<codeline lineno="844"><highlight class="normal">}</highlight></codeline>
<codeline lineno="845"><highlight class="normal"></highlight></codeline>
<codeline lineno="846"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="structStcodeShader_1af574f4aa9ce369abcfeaccee84e198a6" kindref="member">StcodeShader::addCode</ref>(<ref refid="structDynamicStcodeRoutine" kindref="compound">DynamicStcodeRoutine</ref><sp/>&amp;&amp;routine,<sp/><ref refid="structHlslRegRange" kindref="compound">HlslRegRange</ref><sp/>ps_or_cs_const_range,<sp/><ref refid="structHlslRegRange" kindref="compound">HlslRegRange</ref><sp/>vs_const_range)</highlight></codeline>
<codeline lineno="847"><highlight class="normal">{</highlight></codeline>
<codeline lineno="848"><highlight class="normal"><sp/><sp/><ref refid="cppStcode_8h_1ac560d55d8ba0d82453054cbc1050fc7b" kindref="member">RET_IF_SHOULD_NOT_COMPILE</ref>(-1);</highlight></codeline>
<codeline lineno="849"><highlight class="normal"></highlight></codeline>
<codeline lineno="850"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structCryptoHash" kindref="compound">CryptoHash</ref><sp/>hash<sp/>=<sp/><ref refid="structStcodeShader_1adc30de4d892b6a90585434de98a1cafb" kindref="member">curStvarId</ref><sp/>&gt;=<sp/>0<sp/>?<sp/>routine.calcHash(&amp;<ref refid="structStcodeShader_1a4f2eeefb69c7f781961e8fd2dd71fba5" kindref="member">stvarHashes</ref>[<ref refid="structStcodeShader_1adc30de4d892b6a90585434de98a1cafb" kindref="member">curStvarId</ref>])<sp/>:<sp/>routine.calcHash();</highlight></codeline>
<codeline lineno="851"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/><ref refid="structStcodeShader_1ae1da4c67798cda2f7e2fbc8be42c8285" kindref="member">dynamicRoutineHashes</ref>.size();<sp/>++i)</highlight></codeline>
<codeline lineno="852"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="853"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="structStcodeShader_1ae1da4c67798cda2f7e2fbc8be42c8285" kindref="member">dynamicRoutineHashes</ref>[i]<sp/>==<sp/>hash)</highlight></codeline>
<codeline lineno="854"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="855"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="856"><highlight class="normal"></highlight></codeline>
<codeline lineno="857"><highlight class="normal"><sp/><sp/><ref refid="structStcodeShader_1ae1da4c67798cda2f7e2fbc8be42c8285" kindref="member">dynamicRoutineHashes</ref>.push_back(hash);</highlight></codeline>
<codeline lineno="858"><highlight class="normal"></highlight></codeline>
<codeline lineno="859"><highlight class="normal"><sp/><sp/><ref refid="structStcodeShader_1a263399922da422133761280ed69e664e" kindref="member">hasCode</ref><sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="860"><highlight class="normal"><sp/><sp/><ref refid="structStcodeAccumulator" kindref="compound">StcodeAccumulator</ref><sp/>res<sp/>=</highlight></codeline>
<codeline lineno="861"><highlight class="normal"><sp/><sp/><sp/><sp/>routine.releaseAssembledCode(<ref refid="structStcodeShader_1ae1da4c67798cda2f7e2fbc8be42c8285" kindref="member">dynamicRoutineHashes</ref>.size()<sp/>-<sp/>1,<sp/><ref refid="structStcodeShader_1adc30de4d892b6a90585434de98a1cafb" kindref="member">curStvarId</ref>,<sp/>ps_or_cs_const_range,<sp/>vs_const_range);</highlight></codeline>
<codeline lineno="862"><highlight class="normal"><sp/><sp/><ref refid="structStcodeShader_1a0eb8bc68674356efadc910b83b377057" kindref="member">code</ref>.<ref refid="structStcodeAccumulator_1af8209ee1604fffe5d39ca1835b6090fd" kindref="member">cppStrings</ref>.<ref refid="classStcodeBuilder_1a6acb740daccdc2ead0421eb40d33d038" kindref="member">merge</ref>(eastl::move(res.<ref refid="structStcodeAccumulator_1af8209ee1604fffe5d39ca1835b6090fd" kindref="member">cppStrings</ref>));</highlight></codeline>
<codeline lineno="863"><highlight class="normal"><sp/><sp/><ref refid="structStcodeShader_1a0eb8bc68674356efadc910b83b377057" kindref="member">code</ref>.<ref refid="structStcodeAccumulator_1a7c85824e9998e44e7deb09988df542d4" kindref="member">headerStrings</ref>.<ref refid="classStcodeBuilder_1a6acb740daccdc2ead0421eb40d33d038" kindref="member">merge</ref>(eastl::move(res.<ref refid="structStcodeAccumulator_1a7c85824e9998e44e7deb09988df542d4" kindref="member">headerStrings</ref>));</highlight></codeline>
<codeline lineno="864"><highlight class="normal"></highlight></codeline>
<codeline lineno="865"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>int(<ref refid="structStcodeShader_1ae1da4c67798cda2f7e2fbc8be42c8285" kindref="member">dynamicRoutineHashes</ref>.size()<sp/>-<sp/>1);</highlight></codeline>
<codeline lineno="866"><highlight class="normal">}</highlight></codeline>
<codeline lineno="867"><highlight class="normal"></highlight></codeline>
<codeline lineno="868"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="structStcodeShader_1af574f4aa9ce369abcfeaccee84e198a6" kindref="member">StcodeShader::addCode</ref>(<ref refid="structStaticStcodeRoutine" kindref="compound">StaticStcodeRoutine</ref><sp/>&amp;&amp;routine,<sp/><ref refid="structHlslRegRange" kindref="compound">HlslRegRange</ref><sp/>const_range,<sp/>SlotTexturesRangeInfo<sp/>ps_tex_smp_range,</highlight></codeline>
<codeline lineno="869"><highlight class="normal"><sp/><sp/>SlotTexturesRangeInfo<sp/>vs_tex_smp_range)</highlight></codeline>
<codeline lineno="870"><highlight class="normal">{</highlight></codeline>
<codeline lineno="871"><highlight class="normal"><sp/><sp/><ref refid="cppStcode_8h_1ac560d55d8ba0d82453054cbc1050fc7b" kindref="member">RET_IF_SHOULD_NOT_COMPILE</ref>(-1);</highlight></codeline>
<codeline lineno="872"><highlight class="normal"></highlight></codeline>
<codeline lineno="873"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structCryptoHash" kindref="compound">CryptoHash</ref><sp/>hash<sp/>=<sp/><ref refid="structStcodeShader_1adc30de4d892b6a90585434de98a1cafb" kindref="member">curStvarId</ref><sp/>&gt;=<sp/>0<sp/>?<sp/>routine.calcHash(&amp;<ref refid="structStcodeShader_1a4f2eeefb69c7f781961e8fd2dd71fba5" kindref="member">stvarHashes</ref>[<ref refid="structStcodeShader_1adc30de4d892b6a90585434de98a1cafb" kindref="member">curStvarId</ref>])<sp/>:<sp/>routine.calcHash();</highlight></codeline>
<codeline lineno="874"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/><ref refid="structStcodeShader_1a4d978241d88464a82844489fcda09685" kindref="member">staticRoutineHashes</ref>.size();<sp/>++i)</highlight></codeline>
<codeline lineno="875"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="876"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="structStcodeShader_1a4d978241d88464a82844489fcda09685" kindref="member">staticRoutineHashes</ref>[i]<sp/>==<sp/>hash)</highlight></codeline>
<codeline lineno="877"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="878"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="879"><highlight class="normal"></highlight></codeline>
<codeline lineno="880"><highlight class="normal"><sp/><sp/><ref refid="structStcodeShader_1a4d978241d88464a82844489fcda09685" kindref="member">staticRoutineHashes</ref>.push_back(hash);</highlight></codeline>
<codeline lineno="881"><highlight class="normal"></highlight></codeline>
<codeline lineno="882"><highlight class="normal"><sp/><sp/><ref refid="structStcodeShader_1a263399922da422133761280ed69e664e" kindref="member">hasCode</ref><sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="883"><highlight class="normal"><sp/><sp/><ref refid="structStcodeAccumulator" kindref="compound">StcodeAccumulator</ref><sp/>res<sp/>=</highlight></codeline>
<codeline lineno="884"><highlight class="normal"><sp/><sp/><sp/><sp/>routine.releaseAssembledCode(<ref refid="structStcodeShader_1a4d978241d88464a82844489fcda09685" kindref="member">staticRoutineHashes</ref>.size()<sp/>-<sp/>1,<sp/><ref refid="structStcodeShader_1adc30de4d892b6a90585434de98a1cafb" kindref="member">curStvarId</ref>,<sp/>const_range,<sp/>ps_tex_smp_range,<sp/>vs_tex_smp_range);</highlight></codeline>
<codeline lineno="885"><highlight class="normal"><sp/><sp/><ref refid="structStcodeShader_1a0eb8bc68674356efadc910b83b377057" kindref="member">code</ref>.<ref refid="structStcodeAccumulator_1af8209ee1604fffe5d39ca1835b6090fd" kindref="member">cppStrings</ref>.<ref refid="classStcodeBuilder_1a6acb740daccdc2ead0421eb40d33d038" kindref="member">merge</ref>(eastl::move(res.<ref refid="structStcodeAccumulator_1af8209ee1604fffe5d39ca1835b6090fd" kindref="member">cppStrings</ref>));</highlight></codeline>
<codeline lineno="886"><highlight class="normal"><sp/><sp/><ref refid="structStcodeShader_1a0eb8bc68674356efadc910b83b377057" kindref="member">code</ref>.<ref refid="structStcodeAccumulator_1a7c85824e9998e44e7deb09988df542d4" kindref="member">headerStrings</ref>.<ref refid="classStcodeBuilder_1a6acb740daccdc2ead0421eb40d33d038" kindref="member">merge</ref>(eastl::move(res.<ref refid="structStcodeAccumulator_1a7c85824e9998e44e7deb09988df542d4" kindref="member">headerStrings</ref>));</highlight></codeline>
<codeline lineno="887"><highlight class="normal"></highlight></codeline>
<codeline lineno="888"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>int(<ref refid="structStcodeShader_1a4d978241d88464a82844489fcda09685" kindref="member">staticRoutineHashes</ref>.size()<sp/>-<sp/>1);</highlight></codeline>
<codeline lineno="889"><highlight class="normal">}</highlight></codeline>
<codeline lineno="890"><highlight class="normal"></highlight></codeline>
<codeline lineno="891"><highlight class="normal"><ref refid="structStcodeShader_1_1RoutineRemappingTables" kindref="compound">StcodeShader::RoutineRemappingTables</ref><sp/><ref refid="structStcodeShader_1ac8074e036f8c87ab87d9b9567faca319" kindref="member">StcodeShader::linkRoutinesFromFile</ref>(dag::ConstSpan&lt;CryptoHash&gt;<sp/>dynamic_routine_hashes,</highlight></codeline>
<codeline lineno="892"><highlight class="normal"><sp/><sp/>dag::ConstSpan&lt;CryptoHash&gt;<sp/>static_routine_hashes,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*fn)</highlight></codeline>
<codeline lineno="893"><highlight class="normal">{</highlight></codeline>
<codeline lineno="894"><highlight class="normal"><sp/><sp/><ref refid="cppStcode_8h_1ac560d55d8ba0d82453054cbc1050fc7b" kindref="member">RET_IF_SHOULD_NOT_COMPILE</ref>({});</highlight></codeline>
<codeline lineno="895"><highlight class="normal"></highlight></codeline>
<codeline lineno="896"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>linkRoutines<sp/>=<sp/>[&amp;](dag::ConstSpan&lt;CryptoHash&gt;<sp/>new_routine_hashes,<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;hash_collection,<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;name_collection,</highlight></codeline>
<codeline lineno="897"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*name_prefix)<sp/>{</highlight></codeline>
<codeline lineno="898"><highlight class="normal"><sp/><sp/><sp/><sp/>G_ASSERT(hash_collection.size()<sp/>==<sp/>name_collection.size());</highlight></codeline>
<codeline lineno="899"><highlight class="normal"></highlight></codeline>
<codeline lineno="900"><highlight class="normal"><sp/><sp/><sp/><sp/>Tab&lt;int&gt;<sp/>routineRemapping{};</highlight></codeline>
<codeline lineno="901"><highlight class="normal"><sp/><sp/><sp/><sp/>routineRemapping.resize(new_routine_hashes.size(),<sp/>-1);</highlight></codeline>
<codeline lineno="902"><highlight class="normal"></highlight></codeline>
<codeline lineno="903"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>[</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">,<sp/>hash]<sp/>:<sp/>enumerate(new_routine_hashes))</highlight></codeline>
<codeline lineno="904"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="905"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="906"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>hash_collection.size();<sp/>++i)</highlight></codeline>
<codeline lineno="907"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="908"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(hash_collection[i]<sp/>==<sp/>hash)</highlight></codeline>
<codeline lineno="909"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="910"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="911"><highlight class="normal"></highlight></codeline>
<codeline lineno="912"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i<sp/>==<sp/>name_collection.size())</highlight></codeline>
<codeline lineno="913"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="914"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>eastl::string<sp/>filename<sp/>=<sp/><ref refid="namespacestcode_1a7f2720f98f20ceffbea919ac76eae7e3" kindref="member">stcode::extract_shader_name_from_path</ref>(fn);</highlight></codeline>
<codeline lineno="915"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>name_collection.emplace_back(<ref refid="commonUtils_8h_1a423a5cbb08af4695251ec87aa21a5fe1" kindref="member">string_f</ref>(</highlight><highlight class="stringliteral">&quot;_%s::%sroutine%u&quot;</highlight><highlight class="normal">,<sp/>filename.c_str(),<sp/>name_prefix,<sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="916"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hash_collection.emplace_back(hash);</highlight></codeline>
<codeline lineno="917"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="918"><highlight class="normal"></highlight></codeline>
<codeline lineno="919"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>routineRemapping[id]<sp/>=<sp/>i;</highlight></codeline>
<codeline lineno="920"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="921"><highlight class="normal"></highlight></codeline>
<codeline lineno="922"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>routineRemapping;</highlight></codeline>
<codeline lineno="923"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="924"><highlight class="normal"></highlight></codeline>
<codeline lineno="925"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>{linkRoutines(dynamic_routine_hashes,<sp/><ref refid="structStcodeShader_1ae1da4c67798cda2f7e2fbc8be42c8285" kindref="member">dynamicRoutineHashes</ref>,<sp/><ref refid="structStcodeShader_1a06e085d179bc8bc3d7291ca7571d9d38" kindref="member">dynamicRoutineNames</ref>,<sp/></highlight><highlight class="stringliteral">&quot;dyn&quot;</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="926"><highlight class="normal"><sp/><sp/><sp/><sp/>linkRoutines(static_routine_hashes,<sp/><ref refid="structStcodeShader_1a4d978241d88464a82844489fcda09685" kindref="member">staticRoutineHashes</ref>,<sp/><ref refid="structStcodeShader_1aa2274b5285ec7958fc49a1ce87d5ac8b" kindref="member">staticRoutineNames</ref>,<sp/></highlight><highlight class="stringliteral">&quot;st&quot;</highlight><highlight class="normal">)};</highlight></codeline>
<codeline lineno="927"><highlight class="normal">}</highlight></codeline>
<codeline lineno="928"><highlight class="normal"></highlight></codeline>
<codeline lineno="929"><highlight class="normal"><ref refid="structStcodeShader_1_1InterfaceStrings" kindref="compound">StcodeShader::InterfaceStrings</ref><sp/><ref refid="structStcodeShader_1a3506a62de760339f550342a82977ffd0" kindref="member">StcodeShader::releaseAssembledInterfaceCode</ref>()</highlight></codeline>
<codeline lineno="930"><highlight class="normal">{</highlight></codeline>
<codeline lineno="931"><highlight class="normal"><sp/><sp/><ref refid="cppStcode_8h_1ac560d55d8ba0d82453054cbc1050fc7b" kindref="member">RET_IF_SHOULD_NOT_COMPILE</ref>({});</highlight></codeline>
<codeline lineno="932"><highlight class="normal"></highlight></codeline>
<codeline lineno="933"><highlight class="normal"><sp/><sp/><ref refid="classStcodeBuilder" kindref="compound">StcodeBuilder</ref><sp/>regTableStrings;</highlight></codeline>
<codeline lineno="934"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="namespaceshc_1a47efde6b3d493adbe2119a5593807d36" kindref="member">shc::config</ref>().cppStcodeMode<sp/>==<sp/>shader_layout::ExternalStcodeMode::BRANCHED_CPP)</highlight></codeline>
<codeline lineno="935"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="936"><highlight class="normal"><sp/><sp/><sp/><sp/>regTableStrings.<ref refid="classStcodeBuilder_1a75203805b3d48da057cbe761021e19b3" kindref="member">emplaceBackFmt</ref>(</highlight><highlight class="stringliteral">&quot;static<sp/>const<sp/>int16_t<sp/>reg_table_data[]<sp/>=<sp/>{&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="937"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>count<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="938"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;subtable<sp/>:<sp/><ref refid="structStcodeShader_1a0fc5dcef4db2f3f00b1ceb1655311c00" kindref="member">regTable</ref>.combinedTable)</highlight></codeline>
<codeline lineno="939"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="940"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>count<sp/>+=<sp/>subtable.size();</highlight></codeline>
<codeline lineno="941"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>x<sp/>:<sp/>subtable)</highlight></codeline>
<codeline lineno="942"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="943"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>G_ASSERT(x<sp/>&gt;=<sp/>INT16_MIN<sp/>&amp;&amp;<sp/>x<sp/>&lt;=<sp/>INT16_MAX);</highlight></codeline>
<codeline lineno="944"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>regTableStrings.emplaceBackFmt(</highlight><highlight class="stringliteral">&quot;<sp/>%hd,&quot;</highlight><highlight class="normal">,<sp/>int16_t(x));</highlight></codeline>
<codeline lineno="945"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="946"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="947"><highlight class="normal"><sp/><sp/><sp/><sp/>regTableStrings.emplaceBack(</highlight><highlight class="stringliteral">&quot;<sp/>};\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="948"><highlight class="normal"><sp/><sp/><sp/><sp/>regTableStrings.emplaceBack(</highlight><highlight class="stringliteral">&quot;extern<sp/>const<sp/>int16_t<sp/>*const<sp/>reg_table<sp/>=<sp/>&amp;reg_table_data[0];\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="949"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="950"><highlight class="normal"></highlight></codeline>
<codeline lineno="951"><highlight class="normal"><sp/><sp/><ref refid="classStcodeBuilder" kindref="compound">StcodeBuilder</ref><sp/>dynamicPointerTableEntries,<sp/>staticPointerTableEntries;</highlight></codeline>
<codeline lineno="952"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;name<sp/>:<sp/><ref refid="structStcodeShader_1a06e085d179bc8bc3d7291ca7571d9d38" kindref="member">dynamicRoutineNames</ref>)</highlight></codeline>
<codeline lineno="953"><highlight class="normal"><sp/><sp/><sp/><sp/>dynamicPointerTableEntries.emplaceBackFmt(</highlight><highlight class="stringliteral">&quot;&amp;%s,\n&quot;</highlight><highlight class="normal">,<sp/>name.c_str());</highlight></codeline>
<codeline lineno="954"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;name<sp/>:<sp/><ref refid="structStcodeShader_1aa2274b5285ec7958fc49a1ce87d5ac8b" kindref="member">staticRoutineNames</ref>)</highlight></codeline>
<codeline lineno="955"><highlight class="normal"><sp/><sp/><sp/><sp/>staticPointerTableEntries.emplaceBackFmt(</highlight><highlight class="stringliteral">&quot;&amp;%s,\n&quot;</highlight><highlight class="normal">,<sp/>name.c_str());</highlight></codeline>
<codeline lineno="956"><highlight class="normal"><sp/><sp/>clear_and_shrink(<ref refid="structStcodeShader_1a06e085d179bc8bc3d7291ca7571d9d38" kindref="member">dynamicRoutineNames</ref>);</highlight></codeline>
<codeline lineno="957"><highlight class="normal"><sp/><sp/>clear_and_shrink(<ref refid="structStcodeShader_1aa2274b5285ec7958fc49a1ce87d5ac8b" kindref="member">staticRoutineNames</ref>);</highlight></codeline>
<codeline lineno="958"><highlight class="normal"></highlight></codeline>
<codeline lineno="959"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>{regTableStrings.release(),<sp/>dynamicPointerTableEntries.<ref refid="classStcodeBuilder_1af800507e36690d738a1633c2d922df74" kindref="member">release</ref>(),<sp/>staticPointerTableEntries.<ref refid="classStcodeBuilder_1af800507e36690d738a1633c2d922df74" kindref="member">release</ref>()};</highlight></codeline>
<codeline lineno="960"><highlight class="normal">}</highlight></codeline>
<codeline lineno="961"><highlight class="normal"></highlight></codeline>
<codeline lineno="962"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>get_table_header_size(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>is_compute)</highlight></codeline>
<codeline lineno="963"><highlight class="normal">{</highlight></codeline>
<codeline lineno="964"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Table<sp/>is<sp/>headed<sp/>by<sp/>2<sp/>or<sp/>4<sp/>ints<sp/>--<sp/>csRangeMin/csRangeSize<sp/>or<sp/>psRangeMin/psRangeSize<sp/>and<sp/>vsRangeMin/vsRangeSize</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="965"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>is_compute<sp/>?<sp/>2<sp/>:<sp/>4;</highlight></codeline>
<codeline lineno="966"><highlight class="normal">}</highlight></codeline>
<codeline lineno="967"><highlight class="normal"></highlight></codeline>
<codeline lineno="968"><highlight class="normal"><ref refid="cppStcodeAssembly_8h_1ae3c630fb38a98930f6217a99d6e16e4c" kindref="member">StcodePassRegInfoTable</ref><sp/><ref refid="cppStcodeAssembly_8cpp_1a49e0fce26520163288afcb011cad522e" kindref="member">build_pass_stcode_reg_table</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classShaderSemCode" kindref="compound">ShaderSemCode</ref><sp/>&amp;semcode)</highlight></codeline>
<codeline lineno="969"><highlight class="normal">{</highlight></codeline>
<codeline lineno="970"><highlight class="normal"><sp/><sp/><ref refid="cppStcodeAssembly_8h_1ae3c630fb38a98930f6217a99d6e16e4c" kindref="member">StcodePassRegInfoTable</ref><sp/>passInfoTable{};</highlight></codeline>
<codeline lineno="971"><highlight class="normal"></highlight></codeline>
<codeline lineno="972"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;pt<sp/>:<sp/>semcode.passes)</highlight></codeline>
<codeline lineno="973"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="974"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!pt<sp/>||<sp/>!pt-&gt;pass)</highlight></codeline>
<codeline lineno="975"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="976"><highlight class="normal"></highlight></codeline>
<codeline lineno="977"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structSemanticShaderPass" kindref="compound">SemanticShaderPass</ref><sp/>&amp;p<sp/>=<sp/>*pt-&gt;pass;</highlight></codeline>
<codeline lineno="978"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(p.<ref refid="structSemanticShaderPass_1ab03570130a7945edd74b4fca3b26c6cc" kindref="member">usedConstStatAstNodes</ref>.empty())</highlight></codeline>
<codeline lineno="979"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="980"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>passInfoTable[&amp;p]<sp/>=<sp/><ref refid="structStcodePassRegInfo" kindref="compound">StcodePassRegInfo</ref>{};</highlight></codeline>
<codeline lineno="981"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="982"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="983"><highlight class="normal"></highlight></codeline>
<codeline lineno="984"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structStcodePassRegInfo" kindref="compound">StcodePassRegInfo</ref><sp/>info{};</highlight></codeline>
<codeline lineno="985"><highlight class="normal"></highlight></codeline>
<codeline lineno="986"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>processRegTable<sp/>=<sp/>[&amp;](</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;merged_vars_lookup_table,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structStcodeRegisters" kindref="compound">StcodeRegisters</ref><sp/>&amp;regs,<sp/><ref refid="structHlslRegRange" kindref="compound">HlslRegRange</ref><sp/>const_range,</highlight></codeline>
<codeline lineno="987"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;&amp;name_mangler)<sp/>{</highlight></codeline>
<codeline lineno="988"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;loc<sp/>:<sp/>regs.content)</highlight></codeline>
<codeline lineno="989"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="990"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(loc.isNumeric)</highlight></codeline>
<codeline lineno="991"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="992"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>reg<sp/>=<sp/>loc.reg<sp/>-<sp/>const_range.min;</highlight></codeline>
<codeline lineno="993"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>it<sp/>=<sp/>merged_vars_lookup_table.find(loc.name);<sp/>it<sp/>!=<sp/>merged_vars_lookup_table.end())</highlight></codeline>
<codeline lineno="994"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="995"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;var<sp/>:<sp/>it-&gt;second)</highlight></codeline>
<codeline lineno="996"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>info.regsByName.emplace_back(name_mangler(var.name),<sp/>reg<sp/>*<sp/>FLOAT4_REG_SIZE<sp/>+<sp/>var.offset);</highlight></codeline>
<codeline lineno="997"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="998"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="999"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>info.<ref refid="structStcodePassRegInfo_1a21e6340311e7dd27e2e2e5049210386c" kindref="member">regsByName</ref>.emplace_back(name_mangler(loc.name),<sp/>reg<sp/>*<sp/>FLOAT4_REG_SIZE);</highlight></codeline>
<codeline lineno="1000"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1001"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1002"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>info.regsByName.emplace_back(name_mangler(loc.name),<sp/>loc.reg);</highlight></codeline>
<codeline lineno="1003"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1004"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="1005"><highlight class="normal"></highlight></codeline>
<codeline lineno="1006"><highlight class="normal"><sp/><sp/><sp/><sp/>info.isCompute<sp/>=<sp/>p.<ref refid="structSemanticShaderPass_1aa6d1866ac1ab96035a152f7cde16925e" kindref="member">cppstcode</ref>.<ref refid="structStcodePass_1afa8af3e7f8aeba50095318fbd536a0c4" kindref="member">cppStcode</ref>.<ref refid="structDynamicStcodeRoutine_1ad445bbe14daa249ee8c2422643325aa2" kindref="member">isCompute</ref>;</highlight></codeline>
<codeline lineno="1007"><highlight class="normal"><sp/><sp/><sp/><sp/>info.psOrCsCstRange<sp/>=<sp/>p.<ref refid="structSemanticShaderPass_1a0a93717959f273d97c583d31f37d93f4" kindref="member">psOrCsConstRange</ref>;</highlight></codeline>
<codeline lineno="1008"><highlight class="normal"></highlight></codeline>
<codeline lineno="1009"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(info.isCompute)</highlight></codeline>
<codeline lineno="1010"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1011"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>processRegTable(p.<ref refid="structSemanticShaderPass_1a7d7d388fa23d82e6986e5400093c4a17" kindref="member">constPackedVarsMaps</ref>[STAGE_CS],<sp/>p.<ref refid="structSemanticShaderPass_1aa6d1866ac1ab96035a152f7cde16925e" kindref="member">cppstcode</ref>.<ref refid="structStcodePass_1afa8af3e7f8aeba50095318fbd536a0c4" kindref="member">cppStcode</ref>.<ref refid="structStcodeRoutine_1aa63b75770f06597f8f0f1a04c369dbe8" kindref="member">pixelOrComputeRegs</ref>,<sp/>p.<ref refid="structSemanticShaderPass_1a0a93717959f273d97c583d31f37d93f4" kindref="member">psOrCsConstRange</ref>,</highlight></codeline>
<codeline lineno="1012"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[](</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;str)<sp/>{<sp/>return<sp/>str<sp/>+<sp/>stage_to_name_suffix(STAGE_CS);<sp/>});</highlight></codeline>
<codeline lineno="1013"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1014"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1015"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1016"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>info.vsCstRange<sp/>=<sp/>p.<ref refid="structSemanticShaderPass_1a70495e6029e8dae0d7e1c59dcb31a17b" kindref="member">vsConstRange</ref>;</highlight></codeline>
<codeline lineno="1017"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>processRegTable(p.<ref refid="structSemanticShaderPass_1a7d7d388fa23d82e6986e5400093c4a17" kindref="member">constPackedVarsMaps</ref>[STAGE_PS],<sp/>p.<ref refid="structSemanticShaderPass_1aa6d1866ac1ab96035a152f7cde16925e" kindref="member">cppstcode</ref>.<ref refid="structStcodePass_1afa8af3e7f8aeba50095318fbd536a0c4" kindref="member">cppStcode</ref>.<ref refid="structStcodeRoutine_1aa63b75770f06597f8f0f1a04c369dbe8" kindref="member">pixelOrComputeRegs</ref>,<sp/>p.<ref refid="structSemanticShaderPass_1a0a93717959f273d97c583d31f37d93f4" kindref="member">psOrCsConstRange</ref>,</highlight></codeline>
<codeline lineno="1018"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[](</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;str)<sp/>{<sp/>return<sp/>str<sp/>+<sp/>stage_to_name_suffix(STAGE_PS);<sp/>});</highlight></codeline>
<codeline lineno="1019"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>processRegTable(p.<ref refid="structSemanticShaderPass_1a7d7d388fa23d82e6986e5400093c4a17" kindref="member">constPackedVarsMaps</ref>[STAGE_VS],<sp/>p.<ref refid="structSemanticShaderPass_1aa6d1866ac1ab96035a152f7cde16925e" kindref="member">cppstcode</ref>.<ref refid="structStcodePass_1afa8af3e7f8aeba50095318fbd536a0c4" kindref="member">cppStcode</ref>.<ref refid="structStcodeRoutine_1ac1b6d1d4a8f437337beb0c9973c35edf" kindref="member">vertexRegs</ref>,<sp/>p.<ref refid="structSemanticShaderPass_1a70495e6029e8dae0d7e1c59dcb31a17b" kindref="member">vsConstRange</ref>,</highlight></codeline>
<codeline lineno="1020"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[](</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;str)<sp/>{<sp/>return<sp/>str<sp/>+<sp/>stage_to_name_suffix(STAGE_VS);<sp/>});</highlight></codeline>
<codeline lineno="1021"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1022"><highlight class="normal"></highlight></codeline>
<codeline lineno="1023"><highlight class="normal"><sp/><sp/><sp/><sp/>passInfoTable[&amp;p]<sp/>=<sp/>eastl::move(info);</highlight></codeline>
<codeline lineno="1024"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1025"><highlight class="normal"></highlight></codeline>
<codeline lineno="1026"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>passInfoTable;</highlight></codeline>
<codeline lineno="1027"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1028"><highlight class="normal"></highlight></codeline>
<codeline lineno="1029"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>fetch_unique_reg_names(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="cppStcodeAssembly_8h_1ae3c630fb38a98930f6217a99d6e16e4c" kindref="member">StcodePassRegInfoTable</ref><sp/>&amp;table)</highlight></codeline>
<codeline lineno="1030"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1031"><highlight class="normal"><sp/><sp/>eastl::vector_set&lt;eastl::string&gt;<sp/>uniqueNames{};</highlight></codeline>
<codeline lineno="1032"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;[pass,<sp/>info]<sp/>:<sp/>table)</highlight></codeline>
<codeline lineno="1033"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1034"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;[name,<sp/>_]<sp/>:<sp/>info.regsByName)</highlight></codeline>
<codeline lineno="1035"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>uniqueNames.insert(name);</highlight></codeline>
<codeline lineno="1036"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1037"><highlight class="normal"></highlight></codeline>
<codeline lineno="1038"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>uniqueNames;</highlight></codeline>
<codeline lineno="1039"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1040"><highlight class="normal"></highlight></codeline>
<codeline lineno="1041"><highlight class="normal"><ref refid="structStcodeBranchedRoutineDataTable" kindref="compound">StcodeBranchedRoutineDataTable</ref><sp/><ref refid="cppStcodeAssembly_8cpp_1a220e59c8493edc513dca5d1fd94d5a28" kindref="member">build_pass_reg_tables_for_branched_dynstcode</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="cppStcodeAssembly_8h_1ae3c630fb38a98930f6217a99d6e16e4c" kindref="member">StcodePassRegInfoTable</ref><sp/>&amp;passRegsTable,</highlight></codeline>
<codeline lineno="1042"><highlight class="normal"><sp/><sp/><ref refid="structDynamicStcodeRoutine" kindref="compound">DynamicStcodeRoutine</ref><sp/>&amp;branched_routine)</highlight></codeline>
<codeline lineno="1043"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1044"><highlight class="normal"><sp/><sp/><ref refid="cppStcode_8h_1ac560d55d8ba0d82453054cbc1050fc7b" kindref="member">RET_IF_SHOULD_NOT_COMPILE</ref>({});</highlight></codeline>
<codeline lineno="1045"><highlight class="normal"></highlight></codeline>
<codeline lineno="1046"><highlight class="normal"><sp/><sp/><ref refid="structStcodeBranchedRoutineDataTable" kindref="compound">StcodeBranchedRoutineDataTable</ref><sp/>resTable{};</highlight></codeline>
<codeline lineno="1047"><highlight class="normal"></highlight></codeline>
<codeline lineno="1048"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>uniqueNames<sp/>=<sp/>fetch_unique_reg_names(passRegsTable);</highlight></codeline>
<codeline lineno="1049"><highlight class="normal"></highlight></codeline>
<codeline lineno="1050"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;[pass,<sp/>info]<sp/>:<sp/>passRegsTable)</highlight></codeline>
<codeline lineno="1051"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1052"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>[it,<sp/>ok]<sp/>=<sp/>resTable.passRegisterTables.emplace(pass,<sp/>Tab&lt;int&gt;{});</highlight></codeline>
<codeline lineno="1053"><highlight class="normal"><sp/><sp/><sp/><sp/>G_ASSERT(ok);</highlight></codeline>
<codeline lineno="1054"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;t<sp/>=<sp/>it-&gt;second;</highlight></codeline>
<codeline lineno="1055"><highlight class="normal"></highlight></codeline>
<codeline lineno="1056"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Table<sp/>is<sp/>headed<sp/>by<sp/>2<sp/>or<sp/>4<sp/>ints<sp/>--<sp/>csRangeMin/csRangeSize<sp/>or<sp/>psRangeMin/psRangeSize<sp/>and<sp/>vsRangeMin/vsRangeSize</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1057"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>headerSize<sp/>=<sp/>get_table_header_size(info.isCompute);</highlight></codeline>
<codeline lineno="1058"><highlight class="normal"><sp/><sp/><sp/><sp/>t.resize(uniqueNames.size()<sp/>+<sp/>headerSize,<sp/>-1);</highlight></codeline>
<codeline lineno="1059"><highlight class="normal"></highlight></codeline>
<codeline lineno="1060"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(info.psOrCsCstRange.min<sp/>&lt;<sp/>info.psOrCsCstRange.cap)</highlight></codeline>
<codeline lineno="1061"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1062"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>t[0]<sp/>=<sp/>info.psOrCsCstRange.min;</highlight></codeline>
<codeline lineno="1063"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>t[1]<sp/>=<sp/>info.psOrCsCstRange.cap<sp/>-<sp/>info.psOrCsCstRange.min;</highlight></codeline>
<codeline lineno="1064"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1065"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!info.isCompute<sp/>&amp;&amp;<sp/>info.vsCstRange.min<sp/>&lt;<sp/>info.vsCstRange.cap)</highlight></codeline>
<codeline lineno="1066"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1067"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>t[2]<sp/>=<sp/>info.vsCstRange.min;</highlight></codeline>
<codeline lineno="1068"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>t[3]<sp/>=<sp/>info.vsCstRange.cap<sp/>-<sp/>info.vsCstRange.min;</highlight></codeline>
<codeline lineno="1069"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1070"><highlight class="normal"><sp/><sp/><sp/><sp/>dag::Span&lt;int&gt;<sp/>passRegTable<sp/>=<sp/>make_span(t).subspan(headerSize);</highlight></codeline>
<codeline lineno="1071"><highlight class="normal"></highlight></codeline>
<codeline lineno="1072"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;[name,<sp/>reg]<sp/>:<sp/>info.regsByName)</highlight></codeline>
<codeline lineno="1073"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>passRegTable[uniqueNames.find(name)<sp/>-<sp/>uniqueNames.begin()]<sp/>=<sp/>reg;</highlight></codeline>
<codeline lineno="1074"><highlight class="normal"></highlight></codeline>
<codeline lineno="1075"><highlight class="normal"><sp/><sp/><sp/><sp/>resTable.commonVsConstRange<sp/>=<sp/><ref refid="hlslRegisters_8h_1acf1cf57da1840c1811c3195d05ea03b8" kindref="member">update_range</ref>(resTable.commonVsConstRange,<sp/>info.vsCstRange);</highlight></codeline>
<codeline lineno="1076"><highlight class="normal"><sp/><sp/><sp/><sp/>resTable.commonPsOrCsConstRange<sp/>=<sp/><ref refid="hlslRegisters_8h_1acf1cf57da1840c1811c3195d05ea03b8" kindref="member">update_range</ref>(resTable.commonPsOrCsConstRange,<sp/>info.psOrCsCstRange);</highlight></codeline>
<codeline lineno="1077"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1078"><highlight class="normal"></highlight></codeline>
<codeline lineno="1079"><highlight class="normal"><sp/><sp/>branched_routine.<ref refid="structStcodeRoutine_1aa63b75770f06597f8f0f1a04c369dbe8" kindref="member">pixelOrComputeRegs</ref>.<ref refid="structStcodeRegisters_1acec71aa1ce407a2b893bd2adb471cad6" kindref="member">clear</ref>();</highlight></codeline>
<codeline lineno="1080"><highlight class="normal"><sp/><sp/>branched_routine.<ref refid="structStcodeRoutine_1ac1b6d1d4a8f437337beb0c9973c35edf" kindref="member">vertexRegs</ref>.<ref refid="structStcodeRegisters_1acec71aa1ce407a2b893bd2adb471cad6" kindref="member">clear</ref>();</highlight></codeline>
<codeline lineno="1081"><highlight class="normal"></highlight></codeline>
<codeline lineno="1082"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>uniqueNames.size();<sp/>++i)</highlight></codeline>
<codeline lineno="1083"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1084"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;nm<sp/>=<sp/>uniqueNames[i];</highlight></codeline>
<codeline lineno="1085"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>it<sp/>=<sp/>nm.rbegin();</highlight></codeline>
<codeline lineno="1086"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(*it<sp/>==<sp/></highlight><highlight class="charliteral">&apos;s&apos;</highlight><highlight class="normal"><sp/>&amp;&amp;<sp/>*(--it)<sp/>==<sp/></highlight><highlight class="charliteral">&apos;v&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="1087"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>branched_routine.<ref refid="structStcodeRoutine_1ac1b6d1d4a8f437337beb0c9973c35edf" kindref="member">vertexRegs</ref>.<ref refid="structStcodeRegisters_1a9f00c01ee0f139bad8b2f7a0c550f6a7" kindref="member">add</ref>(nm.c_str(),<sp/>i);</highlight></codeline>
<codeline lineno="1088"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1089"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>branched_routine.<ref refid="structStcodeRoutine_1aa63b75770f06597f8f0f1a04c369dbe8" kindref="member">pixelOrComputeRegs</ref>.<ref refid="structStcodeRegisters_1a9f00c01ee0f139bad8b2f7a0c550f6a7" kindref="member">add</ref>(nm.c_str(),<sp/>i);</highlight></codeline>
<codeline lineno="1090"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1091"><highlight class="normal"></highlight></codeline>
<codeline lineno="1092"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>resTable;</highlight></codeline>
<codeline lineno="1093"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="cppStcodeAssembly.cpp"/>
  </compounddef>
</doxygen>
