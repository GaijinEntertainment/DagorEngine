<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.7" xml:lang="en-US">
  <compounddef id="namedConst_8cpp" kind="file" language="C++">
    <compoundname>namedConst.cpp</compoundname>
    <includes refid="namedConst_8h" local="yes">namedConst.h</includes>
    <includes refid="shTargetContext_8h" local="yes">shTargetContext.h</includes>
    <includes refid="transcodeCommon_8h" local="yes">transcodeCommon.h</includes>
    <includes refid="globalConfig_8h" local="yes">globalConfig.h</includes>
    <includes refid="shLog_8h" local="yes">shLog.h</includes>
    <includes refid="linkShaders_8h" local="yes">linkShaders.h</includes>
    <includes refid="cppStcode_8h" local="yes">cppStcode.h</includes>
    <includes refid="const3d_8h" local="yes">const3d.h</includes>
    <includes local="no">math/dag_mathBase.h</includes>
    <includes local="no">shaders/shOpcodeFormat.h</includes>
    <includes local="no">shaders/shOpcode.h</includes>
    <includes local="no">shaders/shUtils.h</includes>
    <includes local="no">debug/dag_fatal.h</includes>
    <includes local="no">debug/dag_debug.h</includes>
    <includes refid="hash_8h" local="yes">hash.h</includes>
    <includes refid="fast__isalnum_8h" local="yes">fast_isalnum.h</includes>
    <includes local="no">EASTL/bitvector.h</includes>
    <includes local="no">EASTL/string_view.h</includes>
    <incdepgraph>
      <node id="53">
        <label>DebugLevel.h</label>
        <link refid="DebugLevel_8h"/>
        <childnode refid="29" relation="include">
        </childnode>
      </node>
      <node id="50">
        <label>blkHash.h</label>
        <link refid="blkHash_8h"/>
      </node>
      <node id="89">
        <label>boolVar.h</label>
        <link refid="boolVar_8h"/>
        <childnode refid="71" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="46" relation="include">
        </childnode>
      </node>
      <node id="11">
        <label>commonUtils.h</label>
        <link refid="commonUtils_8h"/>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
      </node>
      <node id="82">
        <label>compileResult.h</label>
        <link refid="compileResult_8h"/>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
      </node>
      <node id="79">
        <label>const3d.h</label>
        <link refid="const3d_8h"/>
        <childnode refid="17" relation="include">
        </childnode>
      </node>
      <node id="32">
        <label>cppStcode.h</label>
        <link refid="cppStcode_8h"/>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="48" relation="include">
        </childnode>
        <childnode refid="50" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="47" relation="include">
        </childnode>
      </node>
      <node id="33">
        <label>cppStcodeAssembly.h</label>
        <link refid="cppStcodeAssembly_8h"/>
        <childnode refid="34" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
        <childnode refid="41" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="43" relation="include">
        </childnode>
        <childnode refid="44" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="45" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="46" relation="include">
        </childnode>
        <childnode refid="47" relation="include">
        </childnode>
      </node>
      <node id="34">
        <label>cppStcodeBuilder.h</label>
        <link refid="cppStcodeBuilder_8h"/>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
      </node>
      <node id="54">
        <label>cppStcodePlatformInfo.h</label>
        <link refid="cppStcodePlatformInfo_8h"/>
        <childnode refid="29" relation="include">
        </childnode>
      </node>
      <node id="73">
        <label>cppStcodeUtils.h</label>
        <link refid="cppStcodeUtils_8h"/>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="43" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="74" relation="include">
        </childnode>
      </node>
      <node id="99">
        <label>fast_isalnum.h</label>
        <link refid="fast__isalnum_8h"/>
      </node>
      <node id="62">
        <label>globVar.h</label>
        <link refid="globVar_8h"/>
        <childnode refid="63" relation="include">
        </childnode>
        <childnode refid="64" relation="include">
        </childnode>
        <childnode refid="51" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="65" relation="include">
        </childnode>
        <childnode refid="66" relation="include">
        </childnode>
        <childnode refid="67" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="68" relation="include">
        </childnode>
        <childnode refid="69" relation="include">
        </childnode>
      </node>
      <node id="30">
        <label>globalConfig.h</label>
        <link refid="globalConfig_8h"/>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="53" relation="include">
        </childnode>
        <childnode refid="54" relation="include">
        </childnode>
        <childnode refid="55" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="46" relation="include">
        </childnode>
      </node>
      <node id="37">
        <label>hash.h</label>
        <link refid="hash_8h"/>
        <childnode refid="38" relation="include">
        </childnode>
        <childnode refid="39" relation="include">
        </childnode>
      </node>
      <node id="60">
        <label>hashStrings.h</label>
        <link refid="hashStrings_8h"/>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="51" relation="include">
        </childnode>
        <childnode refid="61" relation="include">
        </childnode>
        <childnode refid="46" relation="include">
        </childnode>
      </node>
      <node id="23">
        <label>hlslRegisters.h</label>
        <link refid="hlslRegisters_8h"/>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
      </node>
      <node id="78">
        <label>hlslStage.h</label>
        <link refid="hlslStage_8h"/>
        <childnode refid="79" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="80" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="81" relation="include">
        </childnode>
      </node>
      <node id="59">
        <label>hwAssembly.h</label>
        <link refid="hwAssembly_8h"/>
        <childnode refid="15" relation="include">
        </childnode>
      </node>
      <node id="69">
        <label>intervals.h</label>
        <link refid="intervals_8h"/>
      </node>
      <node id="92">
        <label>linkShaders.h</label>
        <link refid="linkShaders_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="57" relation="include">
        </childnode>
        <childnode refid="69" relation="include">
        </childnode>
        <childnode refid="62" relation="include">
        </childnode>
        <childnode refid="70" relation="include">
        </childnode>
        <childnode refid="84" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="93" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="47" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>nameMap.h</label>
        <link refid="nameMap_8h"/>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>namedConst.cpp</label>
        <link refid="namedConst_8cpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="57" relation="include">
        </childnode>
        <childnode refid="91" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="92" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="79" relation="include">
        </childnode>
        <childnode refid="94" relation="include">
        </childnode>
        <childnode refid="95" relation="include">
        </childnode>
        <childnode refid="96" relation="include">
        </childnode>
        <childnode refid="97" relation="include">
        </childnode>
        <childnode refid="98" relation="include">
        </childnode>
        <childnode refid="87" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
        <childnode refid="99" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="74" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>namedConst.h</label>
        <link refid="namedConst_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="51" relation="include">
        </childnode>
        <childnode refid="56" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
      </node>
      <node id="48">
        <label>processes.h</label>
        <link refid="processes_8h"/>
        <childnode refid="49" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
      </node>
      <node id="70">
        <label>samplers.h</label>
        <link refid="samplers_8h"/>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="71" relation="include">
        </childnode>
        <childnode refid="62" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="66" relation="include">
        </childnode>
        <childnode refid="46" relation="include">
        </childnode>
      </node>
      <node id="90">
        <label>shAssumes.h</label>
        <link refid="shAssumes_8h"/>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="69" relation="include">
        </childnode>
        <childnode refid="71" relation="include">
        </childnode>
        <childnode refid="55" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="46" relation="include">
        </childnode>
      </node>
      <node id="58">
        <label>shCompContext.h</label>
        <link refid="shCompContext_8h"/>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="59" relation="include">
        </childnode>
        <childnode refid="55" relation="include">
        </childnode>
      </node>
      <node id="31">
        <label>shCompilationInfo.h</label>
        <link refid="shCompilationInfo_8h"/>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="50" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="51" relation="include">
        </childnode>
        <childnode refid="52" relation="include">
        </childnode>
      </node>
      <node id="86">
        <label>shErrorReporting.h</label>
        <link refid="shErrorReporting_8h"/>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="71" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
      </node>
      <node id="24">
        <label>shLog.h</label>
        <link refid="shLog_8h"/>
      </node>
      <node id="72">
        <label>shMacro.h</label>
        <link refid="shMacro_8h"/>
      </node>
      <node id="93">
        <label>shSemCode.h</label>
        <link refid="shSemCode_8h"/>
      </node>
      <node id="57">
        <label>shTargetContext.h</label>
        <link refid="shTargetContext_8h"/>
        <childnode refid="58" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="60" relation="include">
        </childnode>
        <childnode refid="62" relation="include">
        </childnode>
        <childnode refid="70" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="73" relation="include">
        </childnode>
        <childnode refid="71" relation="include">
        </childnode>
        <childnode refid="75" relation="include">
        </childnode>
        <childnode refid="77" relation="include">
        </childnode>
        <childnode refid="85" relation="include">
        </childnode>
        <childnode refid="89" relation="include">
        </childnode>
        <childnode refid="78" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="90" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
      </node>
      <node id="75">
        <label>shTargetStorage.h</label>
        <link refid="shTargetStorage_8h"/>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="76" relation="include">
        </childnode>
        <childnode refid="41" relation="include">
        </childnode>
        <childnode refid="47" relation="include">
        </childnode>
        <childnode refid="45" relation="include">
        </childnode>
      </node>
      <node id="68">
        <label>shVarVecTypes.h</label>
        <link refid="shVarVecTypes_8h"/>
      </node>
      <node id="77">
        <label>shaderBytecodeCache.h</label>
        <link refid="shaderBytecodeCache_8h"/>
        <childnode refid="37" relation="include">
        </childnode>
        <childnode refid="78" relation="include">
        </childnode>
        <childnode refid="82" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="83" relation="include">
        </childnode>
        <childnode refid="51" relation="include">
        </childnode>
        <childnode refid="84" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>shaderSave.h</label>
        <link refid="shaderSave_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="35">
        <label>shaderTab.h</label>
        <link refid="shaderTab_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="71">
        <label>shlexterm.h</label>
        <link refid="shlexterm_8h"/>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="72" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
      </node>
      <node id="85">
        <label>stcodeBytecode.h</label>
        <link refid="stcodeBytecode_8h"/>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="86" relation="include">
        </childnode>
        <childnode refid="44" relation="include">
        </childnode>
        <childnode refid="87" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="88" relation="include">
        </childnode>
      </node>
      <node id="91">
        <label>transcodeCommon.h</label>
        <link refid="transcodeCommon_8h"/>
      </node>
      <node id="4">
        <label>varMap.h</label>
        <link refid="varMap_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="67">
        <label>varTypes.h</label>
        <link refid="varTypes_8h"/>
      </node>
      <node id="9">
        <label>variablesMerger.h</label>
        <link refid="variablesMerger_8h"/>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
      </node>
      <node id="65">
        <label>3d/dag_texMgr.h</label>
      </node>
      <node id="36">
        <label>EASTL/algorithm.h</label>
      </node>
      <node id="19">
        <label>EASTL/array.h</label>
      </node>
      <node id="22">
        <label>EASTL/bitvector.h</label>
      </node>
      <node id="20">
        <label>EASTL/fixed_vector.h</label>
      </node>
      <node id="21">
        <label>EASTL/map.h</label>
      </node>
      <node id="16">
        <label>EASTL/optional.h</label>
      </node>
      <node id="15">
        <label>EASTL/string.h</label>
      </node>
      <node id="74">
        <label>EASTL/string_view.h</label>
      </node>
      <node id="80">
        <label>EASTL/type_traits.h</label>
      </node>
      <node id="45">
        <label>EASTL/unique_ptr.h</label>
      </node>
      <node id="18">
        <label>EASTL/vector.h</label>
      </node>
      <node id="88">
        <label>EASTL/vector_map.h</label>
      </node>
      <node id="56">
        <label>EASTL/vector_set.h</label>
      </node>
      <node id="29">
        <label>cstdint</label>
      </node>
      <node id="39">
        <label>cstring</label>
      </node>
      <node id="26">
        <label>dag/dag_vector.h</label>
      </node>
      <node id="27">
        <label>debug/dag_assert.h</label>
      </node>
      <node id="87">
        <label>debug/dag_debug.h</label>
      </node>
      <node id="98">
        <label>debug/dag_fatal.h</label>
      </node>
      <node id="17">
        <label>drv/3d/dag_consts.h</label>
      </node>
      <node id="76">
        <label>drv/3d/dag_renderStates.h</label>
      </node>
      <node id="66">
        <label>drv/3d/dag_sampler.h</label>
      </node>
      <node id="25">
        <label>generic/dag_enumerate.h</label>
      </node>
      <node id="28">
        <label>generic/dag_expected.h</label>
      </node>
      <node id="49">
        <label>generic/dag_fixedMoveOnlyFunction.h</label>
      </node>
      <node id="7">
        <label>generic/dag_tab.h</label>
      </node>
      <node id="38">
        <label>hash/BLAKE3/blake3.h</label>
      </node>
      <node id="55">
        <label>ioSys/dag_dataBlock.h</label>
      </node>
      <node id="63">
        <label>math/dag_color.h</label>
      </node>
      <node id="94">
        <label>math/dag_mathBase.h</label>
      </node>
      <node id="64">
        <label>math/integer/dag_IPoint4.h</label>
      </node>
      <node id="81">
        <label>memory</label>
      </node>
      <node id="41">
        <label>memory/dag_mem.h</label>
      </node>
      <node id="83">
        <label>memory/dag_memBase.h</label>
      </node>
      <node id="44">
        <label>shaders/dag_shaderVarType.h</label>
      </node>
      <node id="52">
        <label>shaders/dag_shaders.h</label>
      </node>
      <node id="42">
        <label>shaders/shExprTypes.h</label>
      </node>
      <node id="43">
        <label>shaders/shFunc.h</label>
      </node>
      <node id="96">
        <label>shaders/shOpcode.h</label>
      </node>
      <node id="95">
        <label>shaders/shOpcodeFormat.h</label>
      </node>
      <node id="97">
        <label>shaders/shUtils.h</label>
      </node>
      <node id="47">
        <label>shaders/shader_layout.h</label>
      </node>
      <node id="40">
        <label>shaders/slotTexturesRange.h</label>
      </node>
      <node id="10">
        <label>shsyn.h</label>
      </node>
      <node id="46">
        <label>ska_hash_map/flat_hash_map2.hpp</label>
      </node>
      <node id="8">
        <label>util/dag_bindump_ext.h</label>
      </node>
      <node id="14">
        <label>util/dag_globDef.h</label>
      </node>
      <node id="6">
        <label>util/dag_oaHashNameMap.h</label>
      </node>
      <node id="13">
        <label>util/dag_safeArg.h</label>
      </node>
      <node id="84">
        <label>util/dag_simpleString.h</label>
      </node>
      <node id="61">
        <label>util/dag_stdint.h</label>
      </node>
      <node id="51">
        <label>util/dag_string.h</label>
      </node>
      <node id="12">
        <label>utility</label>
      </node>
    </incdepgraph>
      <sectiondef kind="var">
      <memberdef kind="variable" id="namedConst_8cpp_1a2e909cba5d361d55c9540cead136ed77" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>constexpr const char</type>
        <definition>constexpr const char MATERIAL_PROPS_NAME[]</definition>
        <argsstring>[]</argsstring>
        <name>MATERIAL_PROPS_NAME</name>
        <initializer>= &quot;materialProps&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="namedConst.cpp" line="198" column="29" bodyfile="namedConst.cpp" bodystart="198" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namedConst_8cpp_1af98fb26af7d287e7d18a752f21ade86a" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>constexpr eastl::array&lt; eastl::string_view, 13 &gt;</type>
        <definition>constexpr eastl::array&lt;eastl::string_view, 13&gt; TYPE_NAMES</definition>
        <argsstring></argsstring>
        <name>TYPE_NAMES</name>
        <initializer>= {
  &quot;float4x4 &quot;,
  &quot;float4 &quot;,
  &quot;uint4 &quot;,
  &quot;int4 &quot;,

  &quot;float3 &quot;,
  &quot;float2 &quot;,
  &quot;float &quot;,
  &quot;uint3 &quot;,
  &quot;uint2 &quot;,
  &quot;uint &quot;,
  &quot;int3 &quot;,
  &quot;int2 &quot;,
  &quot;int &quot;,
}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="namedConst.cpp" line="208" column="31" bodyfile="namedConst.cpp" bodystart="208" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namedConst_8cpp_1ae988e79a099caa24bbad363e249b13fa" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>constexpr eastl::array&lt; int, 13 &gt;</type>
        <definition>constexpr eastl::array&lt;int, 13&gt; TYPE_PADDINGS</definition>
        <argsstring></argsstring>
        <name>TYPE_PADDINGS</name>
        <initializer>= {
  0, 
  0, 
  0, 
  0, 

  1, 
  2, 
  3, 
  1, 
  2, 
  3, 
  1, 
  2, 
  3, 
}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="namedConst.cpp" line="224" column="31" bodyfile="namedConst.cpp" bodystart="224" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="namedConst_8cpp_1a8f056d997538d27f1451b94c9b424c33" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename TF</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>static void process_hardcoded_register_declarations</definition>
        <argsstring>(const char *hlsl_src, TF &amp;&amp;processor)</argsstring>
        <name>process_hardcoded_register_declarations</name>
        <param>
          <type>const char *</type>
          <declname>hlsl_src</declname>
        </param>
        <param>
          <type>TF &amp;&amp;</type>
          <declname>processor</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="namedConst.cpp" line="425" column="13" bodyfile="namedConst.cpp" bodystart="425" bodyend="478"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/>Copyright<sp/>(C)<sp/>Gaijin<sp/>Games<sp/>KFT.<sp/><sp/>All<sp/>rights<sp/>reserved.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="namedConst_8h" kindref="compound">namedConst.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="shTargetContext_8h" kindref="compound">shTargetContext.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="transcodeCommon_8h" kindref="compound">transcodeCommon.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="globalConfig_8h" kindref="compound">globalConfig.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="shLog_8h" kindref="compound">shLog.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="linkShaders_8h" kindref="compound">linkShaders.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="cppStcode_8h" kindref="compound">cppStcode.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="const3d_8h" kindref="compound">const3d.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;math/dag_mathBase.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;shaders/shOpcodeFormat.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;shaders/shOpcode.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;shaders/shUtils.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;debug/dag_fatal.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;debug/dag_debug.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="hash_8h" kindref="compound">hash.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="fast__isalnum_8h" kindref="compound">fast_isalnum.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;EASTL/bitvector.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;EASTL/string_view.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"><ref refid="structNamedConstBlock_1_1CstHandle" kindref="compound">NamedConstBlock::CstHandle</ref><sp/><ref refid="structNamedConstBlock_1a05ca2e54e5d452b311791a274b3a89c6" kindref="member">NamedConstBlock::addConst</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stage,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*name,<sp/><ref refid="hlslRegisters_8h_1aa3a591153956a0cd6630e2d20870fb9b" kindref="member">HlslRegisterSpace</ref><sp/>reg_space,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>sz,</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>hardcoded_reg,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>is_dynamic,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>is_global_const_block)</highlight></codeline>
<codeline lineno="24"><highlight class="normal">{</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/>G_ASSERT(sz<sp/>&gt;<sp/>0);</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/>G_ASSERT(is_dynamic<sp/>||<sp/>hardcoded_reg<sp/>==<sp/>-1);</highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/>RegisterProperties<sp/><ref refid="structNamedConstBlock_1aea9c8e8174b843788613e665c05bd0d0" kindref="member">NamedConstBlock</ref>::*propsField<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><ref refid="classHlslRegAllocator" kindref="compound">HlslRegAllocator</ref><sp/>*regAlloc<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(reg_space<sp/>==<sp/><ref refid="hlslRegisters_8h_1aa3a591153956a0cd6630e2d20870fb9bae4c03c06cbf9b4ae8c9407282006de68" kindref="member">HLSL_RSPACE_C</ref><sp/>&amp;&amp;<sp/>(!is_dynamic<sp/>||<sp/>is_global_const_block))</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/>propsField<sp/>=<sp/>&amp;<ref refid="structNamedConstBlock_1a933d90bd69ae8545d726e05ca9737fdc" kindref="member">NamedConstBlock::bufferedConstProps</ref>;</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/>regAlloc<sp/>=<sp/>&amp;<ref refid="structNamedConstBlock_1a95442c1d7e1d362c78e8148db109a7b0" kindref="member">bufferedConstsRegAllocator</ref>;</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!is_dynamic)</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/>G_ASSERT(!<ref refid="namespaceshc_1a47efde6b3d493adbe2119a5593807d36" kindref="member">shc::config</ref>().enableBindless);</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/>G_ASSERT(reg_space<sp/>==<sp/><ref refid="hlslRegisters_8h_1aa3a591153956a0cd6630e2d20870fb9ba16f0a59091cbba744554f42db492e9bd" kindref="member">HLSL_RSPACE_T</ref><sp/>||<sp/>reg_space<sp/>==<sp/><ref refid="hlslRegisters_8h_1aa3a591153956a0cd6630e2d20870fb9bab0f240d14a78569ec3d3b8586fa8b0c6" kindref="member">HLSL_RSPACE_S</ref>);</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/>G_ASSERT(hardcoded_reg<sp/>==<sp/>-1);</highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>@TODO:<sp/>assert<sp/>sampler-texture<sp/>slot<sp/>coherency</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/>propsField<sp/>=<sp/>stage<sp/>==<sp/>STAGE_VS<sp/>?<sp/>&amp;<ref refid="structNamedConstBlock_1af5d785154eb652eb976e9db509a5331f" kindref="member">NamedConstBlock::vertexProps</ref><sp/>:<sp/>&amp;<ref refid="structNamedConstBlock_1af2982e411fef8f5bf02905031cac0bda" kindref="member">NamedConstBlock::pixelProps</ref>;</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/>regAlloc<sp/>=<sp/>reg_space<sp/>==<sp/><ref refid="hlslRegisters_8h_1aa3a591153956a0cd6630e2d20870fb9ba16f0a59091cbba744554f42db492e9bd" kindref="member">HLSL_RSPACE_T</ref></highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>?<sp/>(stage<sp/>==<sp/>STAGE_VS<sp/>?<sp/>&amp;<ref refid="structNamedConstBlock_1ae6281d37edf661ab1ee8f1728c34dd54" kindref="member">slotTextureSuballocators</ref>.<ref refid="structNamedConstBlock_1_1SlotTextureSubAllocators_1a30b6c56968292c9d25ddd2425bf6a707" kindref="member">vsTex</ref><sp/>:<sp/>&amp;<ref refid="structNamedConstBlock_1ae6281d37edf661ab1ee8f1728c34dd54" kindref="member">slotTextureSuballocators</ref>.<ref refid="structNamedConstBlock_1_1SlotTextureSubAllocators_1a29602deff0108cbe4897f27f3f77cd35" kindref="member">psTex</ref>)</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>(stage<sp/>==<sp/>STAGE_VS<sp/>?<sp/>&amp;<ref refid="structNamedConstBlock_1ae6281d37edf661ab1ee8f1728c34dd54" kindref="member">slotTextureSuballocators</ref>.vsSamplers<sp/>:<sp/>&amp;<ref refid="structNamedConstBlock_1ae6281d37edf661ab1ee8f1728c34dd54" kindref="member">slotTextureSuballocators</ref>.psSamplers);</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(stage<sp/>==<sp/>STAGE_VS)</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/>propsField<sp/>=<sp/>&amp;<ref refid="structNamedConstBlock_1af5d785154eb652eb976e9db509a5331f" kindref="member">NamedConstBlock::vertexProps</ref>;</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/>regAlloc<sp/>=<sp/>&amp;<ref refid="structNamedConstBlock_1a6efd609ff10279c10300fca36972f50c" kindref="member">vertexRegAllocators</ref>[reg_space];</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/>propsField<sp/>=<sp/>&amp;<ref refid="structNamedConstBlock_1af2982e411fef8f5bf02905031cac0bda" kindref="member">NamedConstBlock::pixelProps</ref>;</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/>regAlloc<sp/>=<sp/>&amp;<ref refid="structNamedConstBlock_1a72e11e05584df7e760fd2722129578c7" kindref="member">pixelOrComputeRegAllocators</ref>[reg_space];</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/>RegisterProperties<sp/>&amp;props<sp/>=<sp/>this-&gt;*propsField;</highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;xsn<sp/>=<sp/>props.sn;</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;xsc<sp/>=<sp/>props.sc;</highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>nameProvider<sp/>=<sp/><ref refid="structNamedConstBlock_1aa33304bd77fa74220b9ca8cafb0f9ffa" kindref="member">makeInfoProvider</ref>(propsField,<sp/>reg_space);</highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal"><sp/>=<sp/>xsn.getNameId(name);</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">id</highlight><highlight class="normal"><sp/>==<sp/>-1)</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>regIndex<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(hardcoded_reg<sp/>&gt;=<sp/>0)</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>@TODO:<sp/>this<sp/>would<sp/>be<sp/>nicer<sp/>with<sp/>monadic<sp/>ops<sp/>on<sp/>Expected</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>res<sp/>=<sp/>regAlloc-&gt;<ref refid="classHlslRegAllocator_1af3285ba44deadaf1f86ab4e24eda80d1" kindref="member">reserve</ref>(<ref refid="hlslRegisters_8h_1affe2e38eb7f3eb318b7e3b88697f8a42aade830d4224961228de2c289c1f010ef" kindref="member">HlslSlotSemantic::HARDCODED</ref>,<sp/>hardcoded_reg,<sp/>sz);<sp/>!res)</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="hlslRegisters_8h_1ab7aa4d43a1a7da5a09a35cb23d5a2771" kindref="member">report_reg_reserve_failed</ref>(name,<sp/>hardcoded_reg,<sp/>sz,<sp/>reg_space,<sp/><ref refid="hlslRegisters_8h_1affe2e38eb7f3eb318b7e3b88697f8a42aade830d4224961228de2c289c1f010ef" kindref="member">HlslSlotSemantic::HARDCODED</ref>,<sp/>res.error(),<sp/>*regAlloc,</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nameProvider);</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>regIndex<sp/>=<sp/>hardcoded_reg;</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>regIndex<sp/>=<sp/>regAlloc-&gt;<ref refid="classHlslRegAllocator_1a2b029b0d7921e51c2a6f6294cc0decd7" kindref="member">allocate</ref>(sz);</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(regIndex<sp/>==<sp/>-1)</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="shLog_8cpp_1a2926179632c7c86265007652d3d30b14" kindref="member">sh_debug</ref>(<ref refid="shLog_8h_1a66042048eb3ce30a1dccb2ebf8c2fd5caae3b70b41400c8a36e8a094ac1dbe43c" kindref="member">SHLOG_ERROR</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>allocate<sp/>%i<sp/>register%s<sp/>for<sp/>param<sp/>&apos;%s&apos;\n%s&quot;</highlight><highlight class="normal">,<sp/>sz,<sp/>sz<sp/>&gt;<sp/>1<sp/>?<sp/></highlight><highlight class="stringliteral">&quot;s&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">,<sp/>name,</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="hlslRegisters_8h_1ac174b405cead4faedd2791ca1c8bbc1a" kindref="member">get_reg_alloc_dump</ref>(*regAlloc,<sp/>reg_space,<sp/>nameProvider).c_str());</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal"><sp/>=<sp/>xsn.addNameId(name);</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/>xsc.resize(</highlight><highlight class="keywordtype">id</highlight><highlight class="normal"><sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/>xsc[id].rspace<sp/>=<sp/>reg_space;</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/>xsc[id].size<sp/>=<sp/>sz;</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/>xsc[id].regIndex<sp/>=<sp/>regIndex;</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/>xsc[id].isDynamic<sp/>=<sp/>is_dynamic;</highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>{ShaderStage(stage),<sp/>id,<sp/>&amp;props<sp/>==<sp/>&amp;<ref refid="structNamedConstBlock_1a933d90bd69ae8545d726e05ca9737fdc" kindref="member">bufferedConstProps</ref>};</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structNamedConstBlock_1_1CstHandle_1aee9f8fafa800d22a4799d7d3ec61a2eb" kindref="member">CstHandle::makeInvalidHandle</ref>(ShaderStage(stage),<sp/>&amp;props<sp/>==<sp/>&amp;<ref refid="structNamedConstBlock_1a933d90bd69ae8545d726e05ca9737fdc" kindref="member">bufferedConstProps</ref>);</highlight></codeline>
<codeline lineno="99"><highlight class="normal">}</highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="structNamedConstBlock_1a634916d1d120d2df52b9c06556502874" kindref="member">NamedConstBlock::initSlotTextureSuballocators</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>vs_tex_count,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ps_tex_count)</highlight></codeline>
<codeline lineno="102"><highlight class="normal">{</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/>G_ASSERT(!<ref refid="namespaceshc_1a47efde6b3d493adbe2119a5593807d36" kindref="member">shc::config</ref>().enableBindless);</highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>vsTexRangeBase<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>psTexRangeBase<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>vsSamplerRangeBase<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>psSamplerRangeBase<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(vs_tex_count)</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/>vsTexRangeBase<sp/>=<sp/><ref refid="structNamedConstBlock_1a6efd609ff10279c10300fca36972f50c" kindref="member">vertexRegAllocators</ref>[<ref refid="hlslRegisters_8h_1aa3a591153956a0cd6630e2d20870fb9ba16f0a59091cbba744554f42db492e9bd" kindref="member">HLSL_RSPACE_T</ref>].allocate(vs_tex_count);</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/>vsSamplerRangeBase<sp/>=<sp/><ref refid="structNamedConstBlock_1a6efd609ff10279c10300fca36972f50c" kindref="member">vertexRegAllocators</ref>[<ref refid="hlslRegisters_8h_1aa3a591153956a0cd6630e2d20870fb9bab0f240d14a78569ec3d3b8586fa8b0c6" kindref="member">HLSL_RSPACE_S</ref>].allocate(vs_tex_count);</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ps_tex_count)</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/>psTexRangeBase<sp/>=<sp/><ref refid="structNamedConstBlock_1a72e11e05584df7e760fd2722129578c7" kindref="member">pixelOrComputeRegAllocators</ref>[<ref refid="hlslRegisters_8h_1aa3a591153956a0cd6630e2d20870fb9ba16f0a59091cbba744554f42db492e9bd" kindref="member">HLSL_RSPACE_T</ref>].allocate(ps_tex_count);</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/>psSamplerRangeBase<sp/>=<sp/><ref refid="structNamedConstBlock_1a72e11e05584df7e760fd2722129578c7" kindref="member">pixelOrComputeRegAllocators</ref>[<ref refid="hlslRegisters_8h_1aa3a591153956a0cd6630e2d20870fb9bab0f240d14a78569ec3d3b8586fa8b0c6" kindref="member">HLSL_RSPACE_S</ref>].allocate(ps_tex_count);</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="120"><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(vsTexRangeBase<sp/>&lt;<sp/>0<sp/>||<sp/>psTexRangeBase<sp/>&lt;<sp/>0<sp/>||<sp/>vsSamplerRangeBase<sp/>&lt;<sp/>0<sp/>||<sp/>psSamplerRangeBase<sp/>&lt;<sp/>0)</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/>eastl::string<sp/>errorMessage{};</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>reportIfFailed<sp/>=<sp/>[&amp;](</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>base,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>count,<sp/>ShaderStage<sp/>stage,<sp/><ref refid="hlslRegisters_8h_1aa3a591153956a0cd6630e2d20870fb9b" kindref="member">HlslRegisterSpace</ref><sp/>rspace)<sp/>{</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(base<sp/>&lt;<sp/>0)</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="structNamedConstBlock_1aea9c8e8174b843788613e665c05bd0d0" kindref="member">NamedConstBlock</ref>::*propsField<sp/>=<sp/>stage<sp/>==<sp/>STAGE_VS<sp/>?<sp/>&amp;<ref refid="structNamedConstBlock_1af5d785154eb652eb976e9db509a5331f" kindref="member">NamedConstBlock::vertexProps</ref><sp/>:<sp/>&amp;<ref refid="structNamedConstBlock_1af2982e411fef8f5bf02905031cac0bda" kindref="member">NamedConstBlock::pixelProps</ref>;</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;props<sp/>=<sp/>this-&gt;*propsField;</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;allocators<sp/>=<sp/>stage<sp/>==<sp/>STAGE_VS<sp/>?<sp/><ref refid="structNamedConstBlock_1a6efd609ff10279c10300fca36972f50c" kindref="member">vertexRegAllocators</ref><sp/>:<sp/><ref refid="structNamedConstBlock_1a72e11e05584df7e760fd2722129578c7" kindref="member">pixelOrComputeRegAllocators</ref>;</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>errorMessage.append_sprintf(</highlight><highlight class="stringliteral">&quot;\nFailed<sp/>to<sp/>allocate<sp/>%d<sp/>contiguous<sp/>static<sp/>%s<sp/>%s.\n&quot;</highlight><highlight class="normal">,<sp/>vs_tex_count,</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="const3d_8h_1ab376850b670dc343e3890ed9bbd8b0be" kindref="member">SHADER_STAGE_SHORT_NAMES</ref>[stage],<sp/>rspace<sp/>==<sp/><ref refid="hlslRegisters_8h_1aa3a591153956a0cd6630e2d20870fb9bab0f240d14a78569ec3d3b8586fa8b0c6" kindref="member">HLSL_RSPACE_S</ref><sp/>?<sp/></highlight><highlight class="stringliteral">&quot;samplers&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;textures&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>errorMessage<sp/>+=<sp/><ref refid="hlslRegisters_8h_1ac174b405cead4faedd2791ca1c8bbc1a" kindref="member">get_reg_alloc_dump</ref>(allocators[rspace],<sp/>rspace,<sp/><ref refid="structNamedConstBlock_1aa33304bd77fa74220b9ca8cafb0f9ffa" kindref="member">makeInfoProvider</ref>(propsField,<sp/>rspace));</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/>reportIfFailed(vsTexRangeBase,<sp/>vs_tex_count,<sp/>STAGE_VS,<sp/><ref refid="hlslRegisters_8h_1aa3a591153956a0cd6630e2d20870fb9ba16f0a59091cbba744554f42db492e9bd" kindref="member">HLSL_RSPACE_T</ref>);</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/>reportIfFailed(vsSamplerRangeBase,<sp/>vs_tex_count,<sp/>STAGE_VS,<sp/><ref refid="hlslRegisters_8h_1aa3a591153956a0cd6630e2d20870fb9bab0f240d14a78569ec3d3b8586fa8b0c6" kindref="member">HLSL_RSPACE_S</ref>);</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/>reportIfFailed(psTexRangeBase,<sp/>ps_tex_count,<sp/>STAGE_PS,<sp/><ref refid="hlslRegisters_8h_1aa3a591153956a0cd6630e2d20870fb9ba16f0a59091cbba744554f42db492e9bd" kindref="member">HLSL_RSPACE_T</ref>);</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/>reportIfFailed(psSamplerRangeBase,<sp/>ps_tex_count,<sp/>STAGE_PS,<sp/><ref refid="hlslRegisters_8h_1aa3a591153956a0cd6630e2d20870fb9bab0f240d14a78569ec3d3b8586fa8b0c6" kindref="member">HLSL_RSPACE_S</ref>);</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="141"><highlight class="normal"></highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(vs_tex_count)</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structNamedConstBlock_1ae6281d37edf661ab1ee8f1728c34dd54" kindref="member">slotTextureSuballocators</ref>.<ref refid="structNamedConstBlock_1_1SlotTextureSubAllocators_1a30b6c56968292c9d25ddd2425bf6a707" kindref="member">vsTex</ref><sp/>=</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classHlslRegAllocator" kindref="compound">HlslRegAllocator</ref>{<ref refid="structHlslRegAllocator_1_1Policy" kindref="compound">HlslRegAllocator::Policy</ref>{uint32_t(vsTexRangeBase),<sp/>uint32_t(vsTexRangeBase<sp/>+<sp/>vs_tex_count)}};</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structNamedConstBlock_1ae6281d37edf661ab1ee8f1728c34dd54" kindref="member">slotTextureSuballocators</ref>.<ref refid="structNamedConstBlock_1_1SlotTextureSubAllocators_1a52d8054a14fa2623c76bc66cbf44ab79" kindref="member">vsSamplers</ref><sp/>=</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classHlslRegAllocator" kindref="compound">HlslRegAllocator</ref>{<ref refid="structHlslRegAllocator_1_1Policy" kindref="compound">HlslRegAllocator::Policy</ref>{uint32_t(vsSamplerRangeBase),<sp/>uint32_t(vsSamplerRangeBase<sp/>+<sp/>vs_tex_count)}};</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ps_tex_count)</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structNamedConstBlock_1ae6281d37edf661ab1ee8f1728c34dd54" kindref="member">slotTextureSuballocators</ref>.<ref refid="structNamedConstBlock_1_1SlotTextureSubAllocators_1a29602deff0108cbe4897f27f3f77cd35" kindref="member">psTex</ref><sp/>=</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classHlslRegAllocator" kindref="compound">HlslRegAllocator</ref>{<ref refid="structHlslRegAllocator_1_1Policy" kindref="compound">HlslRegAllocator::Policy</ref>{uint32_t(psTexRangeBase),<sp/>uint32_t(psTexRangeBase<sp/>+<sp/>ps_tex_count)}};</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structNamedConstBlock_1ae6281d37edf661ab1ee8f1728c34dd54" kindref="member">slotTextureSuballocators</ref>.<ref refid="structNamedConstBlock_1_1SlotTextureSubAllocators_1ae1b3ccbc2b85ecaa582df27d143294a3" kindref="member">psSamplers</ref><sp/>=</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classHlslRegAllocator" kindref="compound">HlslRegAllocator</ref>{<ref refid="structHlslRegAllocator_1_1Policy" kindref="compound">HlslRegAllocator::Policy</ref>{uint32_t(psSamplerRangeBase),<sp/>uint32_t(psSamplerRangeBase<sp/>+<sp/>ps_tex_count)}};</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="156"><highlight class="normal"></highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="158"><highlight class="normal">}</highlight></codeline>
<codeline lineno="159"><highlight class="normal"></highlight></codeline>
<codeline lineno="160"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="structNamedConstBlock_1a0e016ca71cfa266875d521e7cb3b77c4" kindref="member">NamedConstBlock::addHlslDecl</ref>(CstHandle<sp/>hnd,<sp/>String<sp/>&amp;&amp;hlsl_decl,<sp/>String<sp/>&amp;&amp;hlsl_postfix)</highlight></codeline>
<codeline lineno="161"><highlight class="normal">{</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;slot<sp/>=<sp/><ref refid="structNamedConstBlock_1a077cdc00515b9c76bd75371533bc4b54" kindref="member">getSlot</ref>(hnd);</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/>slot.hlslDecl<sp/>=<sp/>eastl::move(hlsl_decl);</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/>slot.hlslPostfix<sp/>=<sp/>eastl::move(hlsl_postfix);</highlight></codeline>
<codeline lineno="165"><highlight class="normal">}</highlight></codeline>
<codeline lineno="166"><highlight class="normal"></highlight></codeline>
<codeline lineno="167"><highlight class="normal"><ref refid="structCryptoHash" kindref="compound">CryptoHash</ref><sp/><ref refid="structNamedConstBlock_1ad773aa86a998987a7974eee310517ebf" kindref="member">NamedConstBlock::getDigest</ref>(ShaderStage<sp/>stage,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>MergedVariablesData<sp/>&amp;merged_vars)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="168"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><ref refid="structCryptoHasher" kindref="compound">CryptoHasher</ref><sp/>hasher;</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/>hasher.<ref refid="structCryptoHasher_1a568041f71f7c96cda2ce8ca6b2d3ed64" kindref="member">update</ref>(<ref refid="structNamedConstBlock_1ad28a319c4c4d3d6d500653d1fb7614d9" kindref="member">suppBlk</ref>.size());</highlight></codeline>
<codeline lineno="171"><highlight class="normal"></highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/><ref refid="structNamedConstBlock_1ad28a319c4c4d3d6d500653d1fb7614d9" kindref="member">suppBlk</ref>.size();<sp/>i++)</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/>hasher.<ref refid="structCryptoHasher_1a568041f71f7c96cda2ce8ca6b2d3ed64" kindref="member">update</ref>(<ref refid="structNamedConstBlock_1ad28a319c4c4d3d6d500653d1fb7614d9" kindref="member">suppBlk</ref>[i]);</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>constUpdates<sp/>=<sp/>[&amp;](</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;n,<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;c)<sp/>{</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/>hasher.<ref refid="structCryptoHasher_1a568041f71f7c96cda2ce8ca6b2d3ed64" kindref="member">update</ref>(n.nameCount());</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal"><sp/>=<sp/>0,<sp/>e<sp/>=<sp/>n.nameCount();<sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal"><sp/>&lt;<sp/>e;<sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">++)</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>hasher.<ref refid="structCryptoHasher_1a568041f71f7c96cda2ce8ca6b2d3ed64" kindref="member">update</ref>(n.getName(</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>hasher.<ref refid="structCryptoHasher_1a568041f71f7c96cda2ce8ca6b2d3ed64" kindref="member">update</ref>(c[</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">].rspace);</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>hasher.<ref refid="structCryptoHasher_1a568041f71f7c96cda2ce8ca6b2d3ed64" kindref="member">update</ref>(c[</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">].size);</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>hasher.<ref refid="structCryptoHasher_1a568041f71f7c96cda2ce8ca6b2d3ed64" kindref="member">update</ref>(c[</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">].regIndex);</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(stage<sp/>==<sp/>STAGE_PS<sp/>||<sp/>stage<sp/>==<sp/>STAGE_CS)</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/>constUpdates(<ref refid="structNamedConstBlock_1af2982e411fef8f5bf02905031cac0bda" kindref="member">pixelProps</ref>.<ref refid="structNamedConstBlock_1_1RegisterProperties_1a7d6521b11f3deb710861115f9b2fa40e" kindref="member">sn</ref>,<sp/><ref refid="structNamedConstBlock_1af2982e411fef8f5bf02905031cac0bda" kindref="member">pixelProps</ref>.<ref refid="structNamedConstBlock_1_1RegisterProperties_1a23a66ec848833d3f1b9da19da7fc8d53" kindref="member">sc</ref>);</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/>constUpdates(<ref refid="structNamedConstBlock_1af5d785154eb652eb976e9db509a5331f" kindref="member">vertexProps</ref>.<ref refid="structNamedConstBlock_1_1RegisterProperties_1a7d6521b11f3deb710861115f9b2fa40e" kindref="member">sn</ref>,<sp/><ref refid="structNamedConstBlock_1af5d785154eb652eb976e9db509a5331f" kindref="member">vertexProps</ref>.<ref refid="structNamedConstBlock_1_1RegisterProperties_1a23a66ec848833d3f1b9da19da7fc8d53" kindref="member">sc</ref>);</highlight></codeline>
<codeline lineno="188"><highlight class="normal"></highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structNamedConstBlock_1a74354e18dfcc0fd0cf6743b41f78e75a" kindref="member">buildAllHlsl</ref>(</highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">,<sp/>merged_vars,<sp/>stage);</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;source<sp/>=<sp/>stage<sp/>==<sp/>STAGE_VS<sp/>?<sp/><ref refid="structNamedConstBlock_1ad027cc67960b6fd8e9a48f9da4f980f5" kindref="member">cachedVertexHlsl</ref><sp/>:<sp/><ref refid="structNamedConstBlock_1a72106d5c313c2c0321dde8c4a69c064e" kindref="member">cachedPixelOrComputeHlsl</ref>;</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/>hasher.<ref refid="structCryptoHasher_1a568041f71f7c96cda2ce8ca6b2d3ed64" kindref="member">update</ref>(source.data(),<sp/>source.length());</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="194"><highlight class="normal"></highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>hasher.<ref refid="structCryptoHasher_1a41176760e73b4f0594213f1e197c98fa" kindref="member">hash</ref>();</highlight></codeline>
<codeline lineno="196"><highlight class="normal">}</highlight></codeline>
<codeline lineno="197"><highlight class="normal"></highlight></codeline>
<codeline lineno="198"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>MATERIAL_PROPS_NAME[]<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;materialProps&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="199"><highlight class="normal"></highlight></codeline>
<codeline lineno="200"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="structNamedConstBlock_1ae9dd74ec617ca8b13f28e5b7d70f2085" kindref="member">NamedConstBlock::buildDrawcallIdHlslDecl</ref>(String<sp/>&amp;out_text)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="201"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>eastl::string_view<sp/>drawCallIdDeclaration<sp/>=<sp/>(<ref refid="structNamedConstBlock_1a86f9ccf5deda6624677bd710d8b1dd64" kindref="member">multidrawCbuf</ref><sp/>||<sp/>!<ref refid="structNamedConstBlock_1a95442c1d7e1d362c78e8148db109a7b0" kindref="member">bufferedConstsRegAllocator</ref>.<ref refid="classHlslRegAllocator_1a964d2f652f250019bdd65c09d8ccf81c" kindref="member">hasRegs</ref>())</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>?<sp/></highlight><highlight class="stringliteral">&quot;static<sp/>uint<sp/>DRAW_CALL_ID<sp/>=<sp/>10000;\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;static<sp/>const<sp/>uint<sp/>DRAW_CALL_ID<sp/>=<sp/>0;\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/>out_text.append(drawCallIdDeclaration.data(),<sp/>drawCallIdDeclaration.length());</highlight></codeline>
<codeline lineno="206"><highlight class="normal">}</highlight></codeline>
<codeline lineno="207"><highlight class="normal"></highlight></codeline>
<codeline lineno="208"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>eastl::array&lt;eastl::string_view,<sp/>13&gt;<sp/>TYPE_NAMES<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;float4x4<sp/>&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;float4<sp/>&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;uint4<sp/>&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;int4<sp/>&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="213"><highlight class="normal"></highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;float3<sp/>&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;float2<sp/>&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;float<sp/>&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;uint3<sp/>&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;uint2<sp/>&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;uint<sp/>&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;int3<sp/>&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;int2<sp/>&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;int<sp/>&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="223"><highlight class="normal">};</highlight></codeline>
<codeline lineno="224"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>eastl::array&lt;int,<sp/>13&gt;<sp/>TYPE_PADDINGS<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/>0,<sp/></highlight><highlight class="comment">//<sp/>float4x4</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/>0,<sp/></highlight><highlight class="comment">//<sp/>float4</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/>0,<sp/></highlight><highlight class="comment">//<sp/>uint4</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/>0,<sp/></highlight><highlight class="comment">//<sp/>int4</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="229"><highlight class="normal"></highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/>1,<sp/></highlight><highlight class="comment">//<sp/>float3</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/>2,<sp/></highlight><highlight class="comment">//<sp/>float2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/>3,<sp/></highlight><highlight class="comment">//<sp/>float</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/>1,<sp/></highlight><highlight class="comment">//<sp/>uint3</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/>2,<sp/></highlight><highlight class="comment">//<sp/>uint2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/>3,<sp/></highlight><highlight class="comment">//<sp/>uint</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/>1,<sp/></highlight><highlight class="comment">//<sp/>int3</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/>2,<sp/></highlight><highlight class="comment">//<sp/>int2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/>3,<sp/></highlight><highlight class="comment">//<sp/>int</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="239"><highlight class="normal">};</highlight></codeline>
<codeline lineno="240"><highlight class="normal"></highlight></codeline>
<codeline lineno="241"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="structNamedConstBlock_1ac38bd9c5aced5329117ff6f19f16bf8e" kindref="member">NamedConstBlock::buildStaticConstBufHlslDecl</ref>(String<sp/>&amp;out_text,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>MergedVariablesData<sp/>&amp;merged_vars)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="242"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">MergedVarInfo<sp/>=<sp/><ref refid="structShaderParser_1_1VariablesMerger_1_1MergedVarInfo" kindref="compound">ShaderParser::VariablesMerger::MergedVarInfo</ref>;</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">MergedVars<sp/>=<sp/><ref refid="structShaderParser_1_1VariablesMerger_1a24200837b3fe2b55bb079e00ea3f3c01" kindref="member">ShaderParser::VariablesMerger::MergedVars</ref>;</highlight></codeline>
<codeline lineno="245"><highlight class="normal"></highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="structNamedConstBlock_1a933d90bd69ae8545d726e05ca9737fdc" kindref="member">bufferedConstProps</ref>.<ref refid="structNamedConstBlock_1_1RegisterProperties_1a23a66ec848833d3f1b9da19da7fc8d53" kindref="member">sc</ref>.empty())</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/>G_ASSERT(!<ref refid="structNamedConstBlock_1a95442c1d7e1d362c78e8148db109a7b0" kindref="member">bufferedConstsRegAllocator</ref>.<ref refid="classHlslRegAllocator_1a964d2f652f250019bdd65c09d8ccf81c" kindref="member">hasRegs</ref>());</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="251"><highlight class="normal"></highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/>G_ASSERT(<ref refid="structNamedConstBlock_1a95442c1d7e1d362c78e8148db109a7b0" kindref="member">bufferedConstsRegAllocator</ref>.<ref refid="classHlslRegAllocator_1a964d2f652f250019bdd65c09d8ccf81c" kindref="member">hasRegs</ref>());</highlight></codeline>
<codeline lineno="253"><highlight class="normal"></highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="namespaceshc_1a47efde6b3d493adbe2119a5593807d36" kindref="member">shc::config</ref>().enableBindless)</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="256"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>_CROSS_TARGET_C1<sp/>||<sp/>_CROSS_TARGET_C2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="257"><highlight class="normal"></highlight></codeline>
<codeline lineno="258"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>_CROSS_TARGET_SPIRV</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>eastl::string_view<sp/>bindlessProlog<sp/>=</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;[[vk::binding(0,<sp/>BINDLESS_TEXTURE_SET_META_ID)]]<sp/>Texture2D<sp/>static_textures[];\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;[[vk::binding(0,<sp/>BINDLESS_TEXTURE_SET_META_ID)]]<sp/>TextureCube<sp/>static_textures_cube[];\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;[[vk::binding(0,<sp/>BINDLESS_TEXTURE_SET_META_ID)]]<sp/>Texture2DArray<sp/>static_textures_array[];\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;[[vk::binding(0,<sp/>BINDLESS_TEXTURE_SET_META_ID)]]<sp/>TextureCube<sp/>static_textures_cube_array[];\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;[[vk::binding(0,<sp/>BINDLESS_TEXTURE_SET_META_ID)]]<sp/>TextureCube<sp/>static_textures3d[];\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;[[vk::binding(0,<sp/>BINDLESS_SAMPLER_SET_META_ID)]]<sp/>SamplerState<sp/>static_samplers[];\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="266"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>_CROSS_TARGET_METAL</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>eastl::string_view<sp/>bindlessProlog<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;[[vk::binding(0,<sp/>32)]]<sp/>Texture2D<sp/>static_textures[];\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;[[vk::binding(1,<sp/>32)]]<sp/>TextureCube<sp/>static_textures_cube[];\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;[[vk::binding(2,<sp/>32)]]<sp/>Texture2DArray<sp/>static_textures_array[];\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;[[vk::binding(3,<sp/>32)]]<sp/>TextureCube<sp/>static_textures_cube_array[];\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;[[vk::binding(4,<sp/>32)]]<sp/>TextureCube<sp/>static_textures3d[];\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;[[vk::binding(0,<sp/>33)]]<sp/>SamplerState<sp/>static_samplers[];\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="273"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>eastl::string_view<sp/>bindlessProlog<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;Texture2D<sp/>static_textures[]<sp/>:<sp/>BINDLESS_REGISTER(t,<sp/>1);\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;SamplerState<sp/>static_samplers[]<sp/>:<sp/>BINDLESS_REGISTER(s,<sp/>1);\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;TextureCube<sp/>static_textures_cube[]<sp/>:<sp/>BINDLESS_REGISTER(t,<sp/>2);\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Texture2DArray<sp/>static_textures_array[]<sp/>:<sp/>BINDLESS_REGISTER(t,<sp/>3);\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;TextureCube<sp/>static_textures_cube_array[]<sp/>:<sp/>BINDLESS_REGISTER(t,<sp/>4);\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;TextureCube<sp/>static_textures3d[]<sp/>:<sp/>BINDLESS_REGISTER(t,<sp/>5);\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="280"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>eastl::string_view<sp/>bindlessType<sp/>=</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structNamedConstBlock_1a86f9ccf5deda6624677bd710d8b1dd64" kindref="member">multidrawCbuf</ref><sp/>?<sp/>eastl::string_view{</highlight><highlight class="stringliteral">&quot;#define<sp/>BINDLESS_CBUFFER_ARRAY\n&quot;</highlight><highlight class="normal">}<sp/>:<sp/>eastl::string_view{</highlight><highlight class="stringliteral">&quot;#define<sp/>BINDLESS_CBUFFER_SINGLE\n&quot;</highlight><highlight class="normal">};</highlight></codeline>
<codeline lineno="283"><highlight class="normal"></highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/>out_text.append(bindlessType.data(),<sp/>bindlessType.length());</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/>out_text.append(bindlessProlog.data(),<sp/>bindlessProlog.length());</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="287"><highlight class="normal"></highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/>out_text.append(</highlight><highlight class="stringliteral">&quot;struct<sp/>MaterialProperties\n{\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="289"><highlight class="normal"></highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/>String<sp/>postfix;</highlight></codeline>
<codeline lineno="291"><highlight class="normal"></highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>regOffsetInStruct<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="293"><highlight class="normal"></highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;[ind,<sp/>statConst]<sp/>:<sp/>enumerate(<ref refid="structNamedConstBlock_1a933d90bd69ae8545d726e05ca9737fdc" kindref="member">bufferedConstProps</ref>.sc))</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/>G_ASSERT(!statConst.isDynamic);</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*constName<sp/>=<sp/><ref refid="structNamedConstBlock_1a933d90bd69ae8545d726e05ca9737fdc" kindref="member">bufferedConstProps</ref>.<ref refid="structNamedConstBlock_1_1RegisterProperties_1a7d6521b11f3deb710861115f9b2fa40e" kindref="member">sn</ref>.getName(ind);</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/>eastl::string_view<sp/>hlsl_decl{statConst.hlslDecl.c_str(),<sp/>size_t(statConst.hlslDecl.length())};</highlight></codeline>
<codeline lineno="299"><highlight class="normal"></highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>validates<sp/>that<sp/>the<sp/>allocation<sp/>of<sp/>static<sp/>cbuf<sp/>registers<sp/>is<sp/>perfectly<sp/>linear<sp/>and<sp/>allocates<sp/>registers<sp/>as<sp/>if<sp/>they<sp/>were</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>consecutive<sp/>fields.<sp/>This<sp/>is<sp/>not<sp/>extremely<sp/>robust,<sp/>but<sp/>always<sp/>true<sp/>now.<sp/>@TODO<sp/>make<sp/>more<sp/>robust,<sp/>maybe<sp/>read<sp/>allocator<sp/>data<sp/>to</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>mimic<sp/>it<sp/>with<sp/>the<sp/>struct<sp/>layout.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/>G_ASSERT(regOffsetInStruct<sp/>==<sp/>statConst.regIndex);</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/>regOffsetInStruct<sp/>+=<sp/>statConst.size;</highlight></codeline>
<codeline lineno="305"><highlight class="normal"></highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/>eastl::string_view<sp/>type_name;</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>padding<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>[ind,<sp/>type]<sp/>:<sp/>enumerate(TYPE_NAMES))</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>found_pos<sp/>=<sp/>hlsl_decl.find(type);</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(found_pos<sp/>!=<sp/>eastl::string_view::npos)</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>type_name<sp/>=<sp/>type;</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>padding<sp/>=<sp/>TYPE_PADDINGS[ind];</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="318"><highlight class="normal"></highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(type_name.empty())</highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>G_ASSERTF(0,<sp/></highlight><highlight class="stringliteral">&quot;Static<sp/>cbuf<sp/>can<sp/>not<sp/>contain<sp/>other<sp/>than<sp/>consts<sp/>(f1-4,<sp/>i1-4)!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="321"><highlight class="normal"></highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/>out_text.aprintf(0,<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>%.*s\n&quot;</highlight><highlight class="normal">,<sp/>hlsl_decl.length(),<sp/>hlsl_decl.data());</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>padding;<sp/>++i)</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>out_text.aprintf(0,<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>float<sp/>pad%d__;\n&quot;</highlight><highlight class="normal">,<sp/>4<sp/>*<sp/>regOffsetInStruct<sp/>+<sp/>i);</highlight></codeline>
<codeline lineno="325"><highlight class="normal"></highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>this<sp/>constant<sp/>is<sp/>a<sp/>key<sp/>in<sp/>the<sp/>merger&apos;s<sp/>map,<sp/>it<sp/>means<sp/>that<sp/>it<sp/>is<sp/>not<sp/>a<sp/>normal<sp/>constant,<sp/>but<sp/>a<sp/>few<sp/>constants</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>packed<sp/>together<sp/>into<sp/>one<sp/>register.<sp/>In<sp/>this<sp/>case,<sp/>we<sp/>have<sp/>to<sp/>define<sp/>getters<sp/>for<sp/>each<sp/>individual<sp/>packed<sp/>const</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>MergedVars<sp/>*originalVars<sp/>=<sp/>merged_vars.findOriginalBufferedVarsInfo(constName))</highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>MergedVarInfo<sp/>&amp;varInfo<sp/>:<sp/>*originalVars)</highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>postfix.aprintf(0,<sp/></highlight><highlight class="stringliteral">&quot;%s<sp/>get_%s()<sp/>{<sp/>return<sp/>%s[DRAW_CALL_ID].%s.%s;<sp/>}\n&quot;</highlight><highlight class="normal">,<sp/>varInfo.getType(),<sp/>varInfo.name,<sp/>MATERIAL_PROPS_NAME,</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>constName,<sp/>varInfo.getSwizzle().c_str());</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Otherwise,<sp/>this<sp/>is<sp/>a<sp/>regular<sp/>constant<sp/>which<sp/>is<sp/>used<sp/>as-is,<sp/>and<sp/>we<sp/>just<sp/>define<sp/>the<sp/>getter<sp/>for<sp/>the<sp/>const<sp/>itself.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>postfix.aprintf(0,<sp/></highlight><highlight class="stringliteral">&quot;%.*s<sp/>get_%s()<sp/>{<sp/>return<sp/>%s[DRAW_CALL_ID].%s;<sp/>}\n&quot;</highlight><highlight class="normal">,<sp/>type_name.length(),<sp/>type_name,<sp/>constName,</highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MATERIAL_PROPS_NAME,<sp/>constName);</highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="342"><highlight class="normal"></highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/><sp/>postfix.append(statConst.hlslPostfix.c_str(),<sp/>statConst.hlslPostfix.length());</highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="345"><highlight class="normal"></highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint32_t<sp/>propSetsCount<sp/>=<sp/><ref refid="structNamedConstBlock_1a86f9ccf5deda6624677bd710d8b1dd64" kindref="member">multidrawCbuf</ref><sp/>?<sp/><ref refid="const3d_8h_1a0e38df57573e73202236611878ba34cb" kindref="member">MAX_CBUFFER_VECTORS</ref><sp/>/<sp/>regOffsetInStruct<sp/>:<sp/>1;</highlight></codeline>
<codeline lineno="347"><highlight class="normal"></highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/>out_text.aprintf(0,</highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;\n};\n\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;#define<sp/>MATERIAL_PROPS_SIZE<sp/>%d\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;cbuffer<sp/>shader_static_cbuf:register(b1)<sp/>{<sp/>MaterialProperties<sp/>%s[MATERIAL_PROPS_SIZE];<sp/>};\n\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/>propSetsCount,<sp/>MATERIAL_PROPS_NAME);</highlight></codeline>
<codeline lineno="353"><highlight class="normal"></highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/>out_text.append(postfix.data(),<sp/>postfix.length());</highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/>out_text.append(</highlight><highlight class="stringliteral">&quot;\n\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="356"><highlight class="normal">}</highlight></codeline>
<codeline lineno="357"><highlight class="normal"></highlight></codeline>
<codeline lineno="358"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="structNamedConstBlock_1a3064c974ba863cf05116ed392817ea07" kindref="member">NamedConstBlock::buildGlobalConstBufHlslDecl</ref>(String<sp/>&amp;out_text)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="359"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="structNamedConstBlock_1a933d90bd69ae8545d726e05ca9737fdc" kindref="member">bufferedConstProps</ref>.<ref refid="structNamedConstBlock_1_1RegisterProperties_1a23a66ec848833d3f1b9da19da7fc8d53" kindref="member">sc</ref>.empty())</highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/><sp/>out_text<sp/>+=<sp/></highlight><highlight class="stringliteral">&quot;cbuffer<sp/>global_const_block<sp/>:<sp/>register(b2)<sp/>{\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>NamedConst<sp/>&amp;nc<sp/>:<sp/><ref refid="structNamedConstBlock_1a933d90bd69ae8545d726e05ca9737fdc" kindref="member">bufferedConstProps</ref>.sc)</highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>G_ASSERT(nc.isDynamic);</highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*hlsl<sp/>=<sp/>nc.hlslDecl.c_str())</highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>out_text.append(hlsl);</highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/><sp/><sp/>out_text<sp/>+=<sp/></highlight><highlight class="stringliteral">&quot;\n};\n\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>NamedConst<sp/>&amp;nc<sp/>:<sp/><ref refid="structNamedConstBlock_1a933d90bd69ae8545d726e05ca9737fdc" kindref="member">bufferedConstProps</ref>.sc)</highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*post<sp/>=<sp/>nc.hlslPostfix.c_str())</highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>out_text.append(post);</highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/><sp/><sp/>out_text<sp/>+=<sp/></highlight><highlight class="stringliteral">&quot;\n\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="377"><highlight class="normal">}</highlight></codeline>
<codeline lineno="378"><highlight class="normal"></highlight></codeline>
<codeline lineno="379"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="structNamedConstBlock_1abe80b6b60085d82df776e30495e70fe2" kindref="member">NamedConstBlock::doBuildHlslDeclText</ref>(String<sp/>&amp;out_text,<sp/>ShaderStage<sp/>stage,</highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/>eastl::vector_set&lt;const<sp/>NamedConstBlock<sp/>*&gt;<sp/>&amp;built_blocks)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="381"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(built_blocks.find(</highlight><highlight class="keyword">this</highlight><highlight class="normal">)<sp/>!=<sp/>built_blocks.end())</highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="384"><highlight class="normal"></highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/>built_blocks.insert(</highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="386"><highlight class="normal"></highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="structNamedConstBlock_1a0b41f4029f83c088e31ed2bdbfa5c956" kindref="member">globConstBlk</ref><sp/>&amp;&amp;<sp/>built_blocks.find(&amp;<ref refid="structNamedConstBlock_1a0b41f4029f83c088e31ed2bdbfa5c956" kindref="member">globConstBlk</ref>-&gt;<ref refid="classShaderStateBlock_1ae5f9acfd14a6cfe151e09ca904f4805c" kindref="member">shConst</ref>)<sp/>==<sp/>built_blocks.end())</highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structNamedConstBlock_1a0b41f4029f83c088e31ed2bdbfa5c956" kindref="member">globConstBlk</ref>-&gt;<ref refid="classShaderStateBlock_1ae5f9acfd14a6cfe151e09ca904f4805c" kindref="member">shConst</ref>.<ref refid="structNamedConstBlock_1a3064c974ba863cf05116ed392817ea07" kindref="member">buildGlobalConstBufHlslDecl</ref>(out_text);</highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/><sp/><sp/>built_blocks.insert(&amp;<ref refid="structNamedConstBlock_1a0b41f4029f83c088e31ed2bdbfa5c956" kindref="member">globConstBlk</ref>-&gt;<ref refid="classShaderStateBlock_1ae5f9acfd14a6cfe151e09ca904f4805c" kindref="member">shConst</ref>);</highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classShaderStateBlock" kindref="compound">ShaderStateBlock</ref><sp/>*sb<sp/>:<sp/><ref refid="structNamedConstBlock_1ad28a319c4c4d3d6d500653d1fb7614d9" kindref="member">suppBlk</ref>)</highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/><sp/><sp/>sb-&gt;shConst.<ref refid="structNamedConstBlock_1abe80b6b60085d82df776e30495e70fe2" kindref="member">doBuildHlslDeclText</ref>(out_text,<sp/>stage,<sp/>built_blocks);</highlight></codeline>
<codeline lineno="394"><highlight class="normal"></highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;props<sp/>=<sp/>(stage<sp/>==<sp/>STAGE_VS)<sp/>?<sp/><ref refid="structNamedConstBlock_1af5d785154eb652eb976e9db509a5331f" kindref="member">vertexProps</ref><sp/>:<sp/><ref refid="structNamedConstBlock_1af2982e411fef8f5bf02905031cac0bda" kindref="member">pixelProps</ref>;</highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>NamedConst<sp/>&amp;nc<sp/>:<sp/>props.sc)</highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*hlsl<sp/>=<sp/>nc.hlslDecl.c_str())</highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>out_text<sp/>+=<sp/>hlsl;</highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>NamedConst<sp/>&amp;nc<sp/>:<sp/>props.sc)</highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*hlsl<sp/>=<sp/>nc.hlslPostfix.c_str())</highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>out_text<sp/>+=<sp/>hlsl;</highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="406"><highlight class="normal">}</highlight></codeline>
<codeline lineno="407"><highlight class="normal"></highlight></codeline>
<codeline lineno="408"><highlight class="normal">eastl::pair&lt;int,<sp/>int&gt;<sp/><ref refid="structNamedConstBlock_1ad679b5737b2c1ea6a65d3e0db4bb4e3c" kindref="member">NamedConstBlock::getStaticTexRange</ref>(ShaderStage<sp/>stage)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="409"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;sc<sp/>=<sp/>stage<sp/>==<sp/>STAGE_VS<sp/>?<sp/><ref refid="structNamedConstBlock_1af5d785154eb652eb976e9db509a5331f" kindref="member">vertexProps</ref>.<ref refid="structNamedConstBlock_1_1RegisterProperties_1a23a66ec848833d3f1b9da19da7fc8d53" kindref="member">sc</ref><sp/>:<sp/><ref refid="structNamedConstBlock_1af2982e411fef8f5bf02905031cac0bda" kindref="member">pixelProps</ref>.<ref refid="structNamedConstBlock_1_1RegisterProperties_1a23a66ec848833d3f1b9da19da7fc8d53" kindref="member">sc</ref>;</highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>minTex<sp/>=<sp/>INT_MAX,<sp/>maxTex<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;nc<sp/>:<sp/>sc)</highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>@NOTE:<sp/>there<sp/>are<sp/>no<sp/>static<sp/>buffers/tlas-es<sp/>=&gt;<sp/>only<sp/>static<sp/>textures<sp/>are<sp/>static<sp/>in<sp/>T<sp/>space</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(nc.isDynamic<sp/>||<sp/>nc.rspace<sp/>!=<sp/><ref refid="hlslRegisters_8h_1aa3a591153956a0cd6630e2d20870fb9ba16f0a59091cbba744554f42db492e9bd" kindref="member">HLSL_RSPACE_T</ref>)</highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/><sp/><sp/>minTex<sp/>=<sp/>min(minTex,<sp/>nc.regIndex);</highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/><sp/><sp/>maxTex<sp/>=<sp/>max(maxTex,<sp/>nc.regIndex);</highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="420"><highlight class="normal"></highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>{minTex,<sp/>maxTex<sp/>+<sp/>1};</highlight></codeline>
<codeline lineno="422"><highlight class="normal">}</highlight></codeline>
<codeline lineno="423"><highlight class="normal"></highlight></codeline>
<codeline lineno="424"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>TF&gt;<sp/></highlight><highlight class="comment">//<sp/>TF:<sp/>void(HlslRegisterSpace<sp/>regt_space,<sp/>int<sp/>regt_id,<sp/>eastl::string_view<sp/>code_fragment)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="425"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>process_hardcoded_register_declarations(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*hlsl_src,<sp/>TF<sp/>&amp;&amp;processor)</highlight></codeline>
<codeline lineno="426"><highlight class="normal">{</highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*text<sp/>=<sp/>hlsl_src,<sp/>*p,<sp/>*start<sp/>=<sp/>text;</highlight></codeline>
<codeline lineno="428"><highlight class="normal"></highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>((p<sp/>=<sp/>strstr(text,<sp/></highlight><highlight class="stringliteral">&quot;register&quot;</highlight><highlight class="normal">))<sp/>!=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(p<sp/>&lt;=<sp/>start<sp/>||<sp/><ref refid="fast__isalnum_8h_1acb70dcd616ef53f9a615d4ca7bcabf83" kindref="member">fast_isalnum_or_</ref>(p[-1])<sp/>||<sp/><ref refid="fast__isalnum_8h_1acb70dcd616ef53f9a615d4ca7bcabf83" kindref="member">fast_isalnum_or_</ref>(p[8]))</highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>text<sp/>=<sp/>p<sp/>+<sp/>8;</highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*fragment_start<sp/>=<sp/>p;</highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(fragment_start<sp/>&gt;<sp/>start<sp/>&amp;&amp;<sp/>!strchr(</highlight><highlight class="stringliteral">&quot;\r\n&quot;</highlight><highlight class="normal">,<sp/>fragment_start[-1]))</highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>fragment_start--;</highlight></codeline>
<codeline lineno="439"><highlight class="normal"></highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/><sp/><sp/>p<sp/>+=<sp/>8;</highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(strchr(</highlight><highlight class="stringliteral">&quot;<sp/>\t\v\n\r&quot;</highlight><highlight class="normal">,<sp/>*p))</highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>p++;</highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(*p<sp/>!=<sp/></highlight><highlight class="charliteral">&apos;(&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>text<sp/>=<sp/>p;</highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/><sp/><sp/>p++;</highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(strchr(</highlight><highlight class="stringliteral">&quot;<sp/>\t\v\n\r&quot;</highlight><highlight class="normal">,<sp/>*p))</highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>p++;</highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!strchr(</highlight><highlight class="stringliteral">&quot;tcsub&quot;</highlight><highlight class="normal">,<sp/>*p))</highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>text<sp/>=<sp/>p;</highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>regt_sym<sp/>=<sp/>*p;</highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>idx<sp/>=<sp/>atoi(p<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="458"><highlight class="normal"></highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/><sp/><sp/>p++;</highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(isdigit(*p))</highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>p++;</highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*fragment_end<sp/>=<sp/>p;</highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(*fragment_end<sp/>&amp;&amp;<sp/>!strchr(</highlight><highlight class="stringliteral">&quot;\r\n&quot;</highlight><highlight class="normal">,<sp/>*fragment_end))</highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>fragment_end++;</highlight></codeline>
<codeline lineno="465"><highlight class="normal"></highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="hlslRegisters_8h_1aa3a591153956a0cd6630e2d20870fb9b" kindref="member">HlslRegisterSpace</ref><sp/>rspace<sp/>=<sp/><ref refid="hlslRegisters_8h_1abcfc1bed2aa032f36290e608ed657165" kindref="member">symbol_to_hlsl_reg_space</ref>(regt_sym);</highlight></codeline>
<codeline lineno="467"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(rspace<sp/>==<sp/><ref refid="hlslRegisters_8h_1aa3a591153956a0cd6630e2d20870fb9bad5745a160a89af61c690124ec02558c2" kindref="member">HLSL_RSPACE_INVALID</ref>)</highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="shLog_8cpp_1a2926179632c7c86265007652d3d30b14" kindref="member">sh_debug</ref>(<ref refid="shLog_8h_1a66042048eb3ce30a1dccb2ebf8c2fd5caae3b70b41400c8a36e8a094ac1dbe43c" kindref="member">SHLOG_ERROR</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Invalid<sp/>register<sp/>space<sp/>symbol<sp/>&apos;%c&apos;<sp/>at<sp/>code:<sp/>%.*s&quot;</highlight><highlight class="normal">,<sp/>regt_sym,<sp/>fragment_end<sp/>-<sp/>fragment_start,</highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fragment_start);</highlight></codeline>
<codeline lineno="471"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="472"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="473"><highlight class="normal"></highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/><sp/><sp/>processor(rspace,<sp/>idx,<sp/>eastl::string_view(fragment_start,<sp/>fragment_end<sp/>-<sp/>fragment_start));</highlight></codeline>
<codeline lineno="475"><highlight class="normal"></highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/><sp/><sp/><sp/>text<sp/>=<sp/>p;</highlight></codeline>
<codeline lineno="477"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="478"><highlight class="normal">}</highlight></codeline>
<codeline lineno="479"><highlight class="normal"></highlight></codeline>
<codeline lineno="480"><highlight class="normal"></highlight><highlight class="comment">//<sp/>TODO:<sp/>rename<sp/>pixel_shader<sp/>to<sp/>pixel_or_compute_shader<sp/>everywhere<sp/>applicable<sp/>in<sp/>this<sp/>file.<sp/>Or<sp/>just<sp/>pass<sp/>shader<sp/>stage<sp/>instead.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="481"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="structNamedConstBlock_1affe5e403512a894df27f0e2332c6fa0d" kindref="member">NamedConstBlock::patchHlsl</ref>(String<sp/>&amp;src,<sp/>ShaderStage<sp/>stage,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>MergedVariablesData<sp/>&amp;merged_vars,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>&amp;max_const_no_used,</highlight></codeline>
<codeline lineno="482"><highlight class="normal"><sp/><sp/>eastl::string_view<sp/>hw_defines,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>uses_dual_source_blending)</highlight></codeline>
<codeline lineno="483"><highlight class="normal">{</highlight></codeline>
<codeline lineno="484"><highlight class="normal"><sp/><sp/>max_const_no_used<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="485"><highlight class="normal"><sp/><sp/>String<sp/>res;</highlight></codeline>
<codeline lineno="486"><highlight class="normal"><sp/><sp/>res.reserve(src.length()<sp/>+<sp/>hw_defines.length());</highlight></codeline>
<codeline lineno="487"><highlight class="normal"></highlight></codeline>
<codeline lineno="488"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>usesPixelProps<sp/>=<sp/>stage<sp/>==<sp/>STAGE_PS<sp/>||<sp/>stage<sp/>==<sp/>STAGE_CS;</highlight></codeline>
<codeline lineno="489"><highlight class="normal"></highlight></codeline>
<codeline lineno="490"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="structNamedConstBlock_1aea9c8e8174b843788613e665c05bd0d0" kindref="member">NamedConstBlock</ref>::*propsField<sp/>=<sp/>usesPixelProps<sp/>?<sp/>&amp;<ref refid="structNamedConstBlock_1af2982e411fef8f5bf02905031cac0bda" kindref="member">NamedConstBlock::pixelProps</ref><sp/>:<sp/>&amp;<ref refid="structNamedConstBlock_1af5d785154eb652eb976e9db509a5331f" kindref="member">NamedConstBlock::vertexProps</ref>;</highlight></codeline>
<codeline lineno="491"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;props<sp/>=<sp/>this-&gt;*propsField;</highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;regAllocators<sp/>=<sp/>usesPixelProps<sp/>?<sp/><ref refid="structNamedConstBlock_1a72e11e05584df7e760fd2722129578c7" kindref="member">pixelOrComputeRegAllocators</ref><sp/>:<sp/><ref refid="structNamedConstBlock_1a6efd609ff10279c10300fca36972f50c" kindref="member">vertexRegAllocators</ref>;</highlight></codeline>
<codeline lineno="493"><highlight class="normal"></highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/>process_hardcoded_register_declarations(src,<sp/>[&amp;,<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">](<ref refid="hlslRegisters_8h_1aa3a591153956a0cd6630e2d20870fb9b" kindref="member">HlslRegisterSpace</ref><sp/>rspace,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>regt_id,<sp/>eastl::string_view<sp/>fragment)<sp/>{</highlight></codeline>
<codeline lineno="495"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>res<sp/>=<sp/>regAllocators[rspace].reserve(<ref refid="hlslRegisters_8h_1affe2e38eb7f3eb318b7e3b88697f8a42aade830d4224961228de2c289c1f010ef" kindref="member">HlslSlotSemantic::HARDCODED</ref>,<sp/>regt_id);<sp/>!res)</highlight></codeline>
<codeline lineno="496"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="497"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>@TODO:<sp/>implement<sp/>arrays<sp/>checking</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="498"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="hlslRegisters_8h_1ab7aa4d43a1a7da5a09a35cb23d5a2771" kindref="member">report_reg_reserve_failed</ref>(eastl::string{fragment}.c_str(),<sp/>regt_id,<sp/>1,<sp/>rspace,<sp/><ref refid="hlslRegisters_8h_1affe2e38eb7f3eb318b7e3b88697f8a42aade830d4224961228de2c289c1f010ef" kindref="member">HlslSlotSemantic::HARDCODED</ref>,<sp/>res.error(),</highlight></codeline>
<codeline lineno="499"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>regAllocators[rspace],<sp/><ref refid="structNamedConstBlock_1aa33304bd77fa74220b9ca8cafb0f9ffa" kindref="member">makeInfoProvider</ref>(propsField,<sp/>rspace));</highlight></codeline>
<codeline lineno="500"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="501"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="502"><highlight class="normal"><sp/><sp/>});</highlight></codeline>
<codeline lineno="503"><highlight class="normal"></highlight></codeline>
<codeline lineno="504"><highlight class="normal"><sp/><sp/>process_hardcoded_register_declarations(hw_defines.data(),</highlight></codeline>
<codeline lineno="505"><highlight class="normal"><sp/><sp/><sp/><sp/>[&amp;,<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">](<ref refid="hlslRegisters_8h_1aa3a591153956a0cd6630e2d20870fb9b" kindref="member">HlslRegisterSpace</ref><sp/>rspace,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>regt_id,<sp/>eastl::string_view<sp/>fragment)<sp/>{</highlight></codeline>
<codeline lineno="506"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(auto<sp/>res<sp/>=<sp/>regAllocators[rspace].reserve(HlslSlotSemantic::RESERVED_FOR_PREDEFINES,<sp/>regt_id);<sp/>!res)</highlight></codeline>
<codeline lineno="507"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="508"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>@TODO:<sp/>implement<sp/>arrays<sp/>checking</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="509"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>report_reg_reserve_failed(eastl::string{fragment}.c_str(),<sp/>regt_id,<sp/>1,<sp/>rspace,<sp/>HlslSlotSemantic::HARDCODED,<sp/>res.error(),</highlight></codeline>
<codeline lineno="510"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>regAllocators[rspace],<sp/>makeInfoProvider(propsField,<sp/>rspace));</highlight></codeline>
<codeline lineno="511"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return;</highlight></codeline>
<codeline lineno="512"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="513"><highlight class="normal"><sp/><sp/><sp/><sp/>});</highlight></codeline>
<codeline lineno="514"><highlight class="normal"></highlight></codeline>
<codeline lineno="515"><highlight class="normal"><sp/><sp/>res.append(hw_defines.data(),<sp/>hw_defines.length());</highlight></codeline>
<codeline lineno="516"><highlight class="normal"></highlight></codeline>
<codeline lineno="517"><highlight class="normal"><sp/><sp/>buildAllHlsl(&amp;res,<sp/>merged_vars,<sp/>stage);</highlight></codeline>
<codeline lineno="518"><highlight class="normal"><sp/><sp/>dropHlslCaches();</highlight></codeline>
<codeline lineno="519"><highlight class="normal"></highlight></codeline>
<codeline lineno="520"><highlight class="normal"><sp/><sp/>res.append(src.c_str(),<sp/>src.length());</highlight></codeline>
<codeline lineno="521"><highlight class="normal"><sp/><sp/>src<sp/>=<sp/>eastl::move(res);</highlight></codeline>
<codeline lineno="522"><highlight class="normal"></highlight></codeline>
<codeline lineno="523"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*text<sp/>=<sp/>src.c_str();</highlight></codeline>
<codeline lineno="524"><highlight class="normal"></highlight></codeline>
<codeline lineno="525"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(uses_dual_source_blending<sp/>&amp;&amp;<sp/>stage<sp/>==<sp/>STAGE_PS)</highlight></codeline>
<codeline lineno="526"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="527"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>@NOTE:<sp/>unfortunately,<sp/>this<sp/>does<sp/>not<sp/>work<sp/>because<sp/>of<sp/>macro<sp/>declarations.<sp/>Still,<sp/>the<sp/>two<sp/>latter<sp/>warnings<sp/>(turned<sp/>to<sp/>errors<sp/>on<sp/>-wx)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="528"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>should<sp/>help.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="529"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="530"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>(strstr(text,<sp/>&quot;SV_Target&quot;))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="531"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="532"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>sh_debug(SHLOG_ERROR,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="533"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>&quot;When<sp/>compiling<sp/>with<sp/>dual<sp/>source<sp/>blending<sp/>(sc1/isc1/sa1/isa1)<sp/>it<sp/>is<sp/>prohibited<sp/>to<sp/>use<sp/>SV_Target#<sp/>in<sp/>code<sp/>for<sp/>correct<sp/>spirv<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="534"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>&quot;generation<sp/>(for<sp/>vk<sp/>&amp;<sp/>metal).<sp/>Use<sp/>DUAL_SOURCE_BLEND_ATTACHMENTS<sp/>macro<sp/>instead.&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="535"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="536"><highlight class="normal"></highlight></codeline>
<codeline lineno="537"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!strstr(text,<sp/></highlight><highlight class="stringliteral">&quot;DUAL_SOURCE_BLEND_ATTACHMENTS&quot;</highlight><highlight class="normal">))</highlight></codeline>
<codeline lineno="538"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="539"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="shLog_8cpp_1a2926179632c7c86265007652d3d30b14" kindref="member">sh_debug</ref>(<ref refid="shLog_8h_1a66042048eb3ce30a1dccb2ebf8c2fd5caec73ac89ba721ca7dec737875111fddd" kindref="member">SHLOG_WARNING</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Compiling<sp/>with<sp/>dual<sp/>source<sp/>blending<sp/>(sc1/isc1/sa1/isa1)<sp/>but<sp/>DUAL_SOURCE_BLEND_ATTACHMENTS<sp/>is<sp/>not<sp/>used.<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="540"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;This<sp/>might<sp/>be<sp/>a<sp/>bug<sp/>in<sp/>the<sp/>shader<sp/>code.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="541"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="542"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="543"><highlight class="normal"></highlight></codeline>
<codeline lineno="544"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="545"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>[firstAlloc,<sp/>allocCap]<sp/>=<sp/>regAllocators[<ref refid="hlslRegisters_8h_1aa3a591153956a0cd6630e2d20870fb9bae4c03c06cbf9b4ae8c9407282006de68" kindref="member">HLSL_RSPACE_C</ref>].getRange(<ref refid="hlslRegisters_8h_1affe2e38eb7f3eb318b7e3b88697f8a42a3bd3560ef2b34fbdace988abac0bedc8" kindref="member">HlslSlotSemantic::ALLOCATED</ref>);</highlight></codeline>
<codeline lineno="546"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>[firstHc,<sp/>hcCap]<sp/>=<sp/>regAllocators[<ref refid="hlslRegisters_8h_1aa3a591153956a0cd6630e2d20870fb9bae4c03c06cbf9b4ae8c9407282006de68" kindref="member">HLSL_RSPACE_C</ref>].getRange(<ref refid="hlslRegisters_8h_1affe2e38eb7f3eb318b7e3b88697f8a42aade830d4224961228de2c289c1f010ef" kindref="member">HlslSlotSemantic::HARDCODED</ref>);</highlight></codeline>
<codeline lineno="547"><highlight class="normal"></highlight></codeline>
<codeline lineno="548"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!((firstHc<sp/>&gt;=<sp/>allocCap)<sp/>||<sp/>(firstAlloc<sp/>&gt;=<sp/>hcCap)))</highlight></codeline>
<codeline lineno="549"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="550"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="shLog_8cpp_1a2926179632c7c86265007652d3d30b14" kindref="member">sh_debug</ref>(<ref refid="shLog_8h_1a66042048eb3ce30a1dccb2ebf8c2fd5caae3b70b41400c8a36e8a094ac1dbe43c" kindref="member">SHLOG_ERROR</ref>,</highlight></codeline>
<codeline lineno="551"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Overlap<sp/>between<sp/>allocated<sp/>register<sp/>range<sp/>[%d,<sp/>%d]<sp/>and<sp/>hardcoded<sp/>registers<sp/>[%d,<sp/>%d]<sp/>is<sp/>not<sp/>allowed<sp/>for<sp/>%s<sp/>constants&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="552"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>firstAlloc,<sp/>allocCap<sp/>-<sp/>1,<sp/>firstHc,<sp/>hcCap<sp/>-<sp/>1,<sp/><ref refid="const3d_8h_1ab376850b670dc343e3890ed9bbd8b0be" kindref="member">SHADER_STAGE_SHORT_NAMES</ref>[stage]);</highlight></codeline>
<codeline lineno="553"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="554"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="555"><highlight class="normal"></highlight></codeline>
<codeline lineno="556"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>@TODO:<sp/>validate<sp/>other<sp/>namespaces:<sp/>s<sp/>u<sp/>b</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="557"><highlight class="normal"></highlight></codeline>
<codeline lineno="558"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(regAllocators[<ref refid="hlslRegisters_8h_1aa3a591153956a0cd6630e2d20870fb9bae4c03c06cbf9b4ae8c9407282006de68" kindref="member">HLSL_RSPACE_C</ref>].hasRegs())</highlight></codeline>
<codeline lineno="559"><highlight class="normal"><sp/><sp/><sp/><sp/>max_const_no_used<sp/>=<sp/>regAllocators[<ref refid="hlslRegisters_8h_1aa3a591153956a0cd6630e2d20870fb9bae4c03c06cbf9b4ae8c9407282006de68" kindref="member">HLSL_RSPACE_C</ref>].getRange().cap<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="560"><highlight class="normal">}</highlight></codeline>
<codeline lineno="561"><highlight class="normal"></highlight></codeline>
<codeline lineno="562"><highlight class="normal"><ref refid="classShaderStateBlock_1ae97b8e1bfea9a4ade357f6eb9ecd3019" kindref="member">ShaderStateBlock::ShaderStateBlock</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*nm,<sp/><ref refid="namedConst_8h_1a8df4796c58d0d8445eaf37bb57425b6c" kindref="member">ShaderBlockLevel</ref><sp/>lev,<sp/><ref refid="structNamedConstBlock" kindref="compound">NamedConstBlock</ref><sp/>&amp;&amp;ncb,<sp/>dag::Span&lt;int&gt;<sp/><ref refid="namespacestcode" kindref="compound">stcode</ref>,</highlight></codeline>
<codeline lineno="563"><highlight class="normal"><sp/><sp/><ref refid="structDynamicStcodeRoutine" kindref="compound">DynamicStcodeRoutine</ref><sp/>*cpp_stcode,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>maxregsize,<sp/><ref refid="classshc_1_1TargetContext" kindref="compound">shc::TargetContext</ref><sp/>&amp;a_ctx)<sp/>:</highlight></codeline>
<codeline lineno="564"><highlight class="normal"><sp/><sp/>shConst(eastl::move(ncb)),<sp/>name(nm),<sp/>nameId(-1),<sp/>stcodeId(-1),<sp/>cppStcodeId(-1),<sp/>layerLevel(lev),<sp/>regSize(maxregsize)</highlight></codeline>
<codeline lineno="565"><highlight class="normal">{</highlight></codeline>
<codeline lineno="566"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="namespacestcode" kindref="compound">stcode</ref>.size())</highlight></codeline>
<codeline lineno="567"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="568"><highlight class="normal"><sp/><sp/><sp/><sp/>stcodeId<sp/>=<sp/><ref refid="linkShaders_8cpp_1a96fa1850596561b85a77a8b6e78407fd" kindref="member">add_stcode</ref>(<ref refid="namespacestcode" kindref="compound">stcode</ref>,<sp/>a_ctx);</highlight></codeline>
<codeline lineno="569"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="namespaceshc_1a47efde6b3d493adbe2119a5593807d36" kindref="member">shc::config</ref>().generateCppStcodeValidationData<sp/>&amp;&amp;<sp/>cpp_stcode)</highlight></codeline>
<codeline lineno="570"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="linkShaders_8cpp_1ace100897f3e189920a57708fbc77bbaa" kindref="member">add_stcode_validation_mask</ref>(stcodeId,<sp/>cpp_stcode-&gt;<ref refid="structStcodeRoutine_1a90bea292e40f565eee2602e7bcb781ff" kindref="member">constMask</ref>.release(),<sp/>a_ctx);</highlight></codeline>
<codeline lineno="571"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="572"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cpp_stcode-&gt;<ref refid="structStcodeRoutine_1a27f002069a52afa2d7d73f73727455b4" kindref="member">hasCode</ref>())</highlight></codeline>
<codeline lineno="573"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="574"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isGlobCbuf<sp/>=<sp/>lev<sp/>==<sp/><ref refid="namedConst_8h_1a8df4796c58d0d8445eaf37bb57425b6cad898411bc00251ab145d6c0d5971f3ab" kindref="member">ShaderBlockLevel::GLOBAL_CONST</ref>;</highlight></codeline>
<codeline lineno="575"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structHlslRegRange" kindref="compound">HlslRegRange</ref><sp/>vsRegRange<sp/>=<sp/>isGlobCbuf<sp/>?<sp/>cpp_stcode-&gt;<ref refid="structDynamicStcodeRoutine_1a4066d586b729c8fc9ed1f2df8e00d9e5" kindref="member">collectSetRegistersRange</ref>(STAGE_VS)</highlight></codeline>
<codeline lineno="576"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>shConst.vertexRegAllocators[<ref refid="hlslRegisters_8h_1aa3a591153956a0cd6630e2d20870fb9bae4c03c06cbf9b4ae8c9407282006de68" kindref="member">HLSL_RSPACE_C</ref>].getRange(<ref refid="hlslRegisters_8h_1affe2e38eb7f3eb318b7e3b88697f8a42a3bd3560ef2b34fbdace988abac0bedc8" kindref="member">HlslSlotSemantic::ALLOCATED</ref>);</highlight></codeline>
<codeline lineno="577"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structHlslRegRange" kindref="compound">HlslRegRange</ref><sp/>psOrCsRegRange<sp/>=<sp/>isGlobCbuf</highlight></codeline>
<codeline lineno="578"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>?<sp/>cpp_stcode-&gt;<ref refid="structDynamicStcodeRoutine_1a4066d586b729c8fc9ed1f2df8e00d9e5" kindref="member">collectSetRegistersRange</ref>(STAGE_PS<sp/></highlight><highlight class="comment">/*<sp/>STAGE_CS<sp/>has<sp/>the<sp/>same<sp/>effect<sp/>*/</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="579"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>shConst.pixelOrComputeRegAllocators[<ref refid="hlslRegisters_8h_1aa3a591153956a0cd6630e2d20870fb9bae4c03c06cbf9b4ae8c9407282006de68" kindref="member">HLSL_RSPACE_C</ref>].getRange(<ref refid="hlslRegisters_8h_1affe2e38eb7f3eb318b7e3b88697f8a42a3bd3560ef2b34fbdace988abac0bedc8" kindref="member">HlslSlotSemantic::ALLOCATED</ref>);</highlight></codeline>
<codeline lineno="580"><highlight class="normal"><sp/><sp/><sp/><sp/>cppStcodeId<sp/>=<sp/>a_ctx.<ref refid="classshc_1_1TargetContext_1a27d8cc3aa5ee309d0c1e3fca7ea3cbdf" kindref="member">cppStcode</ref>().<ref refid="structStcodeShader_1af574f4aa9ce369abcfeaccee84e198a6" kindref="member">addCode</ref>(eastl::move(*cpp_stcode),<sp/>psOrCsRegRange,<sp/>vsRegRange);</highlight></codeline>
<codeline lineno="581"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="582"><highlight class="normal">}</highlight></codeline>
<codeline lineno="583"><highlight class="normal"></highlight></codeline>
<codeline lineno="584"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="classShaderStateBlock_1a49d5e1246b26d34702756b9dc392d77f" kindref="member">ShaderStateBlock::getVsNameId</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*name)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="585"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="586"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal"><sp/>=<sp/><ref refid="classShaderStateBlock_1ae5f9acfd14a6cfe151e09ca904f4805c" kindref="member">shConst</ref>.<ref refid="structNamedConstBlock_1af5d785154eb652eb976e9db509a5331f" kindref="member">vertexProps</ref>.<ref refid="structNamedConstBlock_1_1RegisterProperties_1a7d6521b11f3deb710861115f9b2fa40e" kindref="member">sn</ref>.getNameId(<ref refid="classShaderStateBlock_1ad24cbadd146d234944b96fd320d43aad" kindref="member">name</ref>);</highlight></codeline>
<codeline lineno="587"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">id</highlight><highlight class="normal"><sp/>!=<sp/>-1)</highlight></codeline>
<codeline lineno="588"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>id;</highlight></codeline>
<codeline lineno="589"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/><ref refid="classShaderStateBlock_1ae5f9acfd14a6cfe151e09ca904f4805c" kindref="member">shConst</ref>.<ref refid="structNamedConstBlock_1ad28a319c4c4d3d6d500653d1fb7614d9" kindref="member">suppBlk</ref>.size();<sp/>i++)</highlight></codeline>
<codeline lineno="590"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="591"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal"><sp/>=<sp/><ref refid="classShaderStateBlock_1ae5f9acfd14a6cfe151e09ca904f4805c" kindref="member">shConst</ref>.<ref refid="structNamedConstBlock_1ad28a319c4c4d3d6d500653d1fb7614d9" kindref="member">suppBlk</ref>[i]-&gt;getVsNameId(<ref refid="classShaderStateBlock_1ad24cbadd146d234944b96fd320d43aad" kindref="member">name</ref>);</highlight></codeline>
<codeline lineno="592"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">id</highlight><highlight class="normal"><sp/>!=<sp/>-1)</highlight></codeline>
<codeline lineno="593"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>id;</highlight></codeline>
<codeline lineno="594"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="595"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="596"><highlight class="normal">}</highlight></codeline>
<codeline lineno="597"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="classShaderStateBlock_1a1c5766a763d6416ed5cc381401683b37" kindref="member">ShaderStateBlock::getPsNameId</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*name)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="598"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="599"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal"><sp/>=<sp/><ref refid="classShaderStateBlock_1ae5f9acfd14a6cfe151e09ca904f4805c" kindref="member">shConst</ref>.<ref refid="structNamedConstBlock_1af2982e411fef8f5bf02905031cac0bda" kindref="member">pixelProps</ref>.<ref refid="structNamedConstBlock_1_1RegisterProperties_1a7d6521b11f3deb710861115f9b2fa40e" kindref="member">sn</ref>.getNameId(<ref refid="classShaderStateBlock_1ad24cbadd146d234944b96fd320d43aad" kindref="member">name</ref>);</highlight></codeline>
<codeline lineno="600"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">id</highlight><highlight class="normal"><sp/>!=<sp/>-1)</highlight></codeline>
<codeline lineno="601"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>id;</highlight></codeline>
<codeline lineno="602"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/><ref refid="classShaderStateBlock_1ae5f9acfd14a6cfe151e09ca904f4805c" kindref="member">shConst</ref>.<ref refid="structNamedConstBlock_1ad28a319c4c4d3d6d500653d1fb7614d9" kindref="member">suppBlk</ref>.size();<sp/>i++)</highlight></codeline>
<codeline lineno="603"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="604"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal"><sp/>=<sp/><ref refid="classShaderStateBlock_1ae5f9acfd14a6cfe151e09ca904f4805c" kindref="member">shConst</ref>.<ref refid="structNamedConstBlock_1ad28a319c4c4d3d6d500653d1fb7614d9" kindref="member">suppBlk</ref>[i]-&gt;getPsNameId(<ref refid="classShaderStateBlock_1ad24cbadd146d234944b96fd320d43aad" kindref="member">name</ref>);</highlight></codeline>
<codeline lineno="605"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">id</highlight><highlight class="normal"><sp/>!=<sp/>-1)</highlight></codeline>
<codeline lineno="606"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>id;</highlight></codeline>
<codeline lineno="607"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="608"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="609"><highlight class="normal">}</highlight></codeline>
<codeline lineno="610"><highlight class="normal"></highlight></codeline>
<codeline lineno="611"><highlight class="normal"><ref refid="classShaderBlockTable_1af5fdea08c003ccf7a805dd32e7afb7e7" kindref="member">ShaderBlockTable::~ShaderBlockTable</ref>()</highlight></codeline>
<codeline lineno="612"><highlight class="normal">{</highlight></codeline>
<codeline lineno="613"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<ref refid="classShaderStateBlock" kindref="compound">ShaderStateBlock</ref><sp/>*blk<sp/>:<sp/>blocks)</highlight></codeline>
<codeline lineno="614"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="615"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(blk<sp/>&amp;&amp;<sp/>blk<sp/>!=<sp/><ref refid="classShaderBlockTable_1a4ed91dd95664704f8d17f5d6c8357ea9" kindref="member">emptyBlock</ref>())</highlight></codeline>
<codeline lineno="616"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>blk;</highlight></codeline>
<codeline lineno="617"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="618"><highlight class="normal"><sp/><sp/>blockNames.reset();</highlight></codeline>
<codeline lineno="619"><highlight class="normal">}</highlight></codeline>
<codeline lineno="620"><highlight class="normal"></highlight></codeline>
<codeline lineno="621"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classShaderBlockTable_1ad5ec754c23a14e7d4f73cba66147c486" kindref="member">ShaderBlockTable::registerBlock</ref>(<ref refid="classShaderStateBlock" kindref="compound">ShaderStateBlock</ref><sp/>*blk,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>allow_identical_redecl)</highlight></codeline>
<codeline lineno="622"><highlight class="normal">{</highlight></codeline>
<codeline lineno="623"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal"><sp/>=<sp/>blockNames.addNameId(blk-&gt;<ref refid="classShaderStateBlock_1ad24cbadd146d234944b96fd320d43aad" kindref="member">name</ref>.c_str());</highlight></codeline>
<codeline lineno="624"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">id</highlight><highlight class="normal"><sp/>&lt;<sp/>blocks.size())</highlight></codeline>
<codeline lineno="625"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="626"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!allow_identical_redecl)</highlight></codeline>
<codeline lineno="627"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="628"><highlight class="normal"></highlight></codeline>
<codeline lineno="629"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classShaderStateBlock" kindref="compound">ShaderStateBlock</ref><sp/>&amp;sb<sp/>=<sp/>*blocks[id];</highlight></codeline>
<codeline lineno="630"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sb.<ref refid="classShaderStateBlock_1a73af07c28d4a043e224c03b4dfe891cf" kindref="member">layerLevel</ref><sp/>!=<sp/>blk-&gt;<ref refid="classShaderStateBlock_1a73af07c28d4a043e224c03b4dfe891cf" kindref="member">layerLevel</ref>)</highlight></codeline>
<codeline lineno="631"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="632"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="shLog_8cpp_1a2926179632c7c86265007652d3d30b14" kindref="member">sh_debug</ref>(<ref refid="shLog_8h_1a66042048eb3ce30a1dccb2ebf8c2fd5caae3b70b41400c8a36e8a094ac1dbe43c" kindref="member">SHLOG_ERROR</ref>,<sp/></highlight><highlight class="stringliteral">&quot;non-ident<sp/>block<sp/>&lt;%s&gt;<sp/>redecl:<sp/>layerLevel=%d<sp/>!=<sp/>%d(prev)&quot;</highlight><highlight class="normal">,<sp/>blk-&gt;<ref refid="classShaderStateBlock_1ad24cbadd146d234944b96fd320d43aad" kindref="member">name</ref>.c_str(),<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">(blk-&gt;<ref refid="classShaderStateBlock_1a73af07c28d4a043e224c03b4dfe891cf" kindref="member">layerLevel</ref>),</highlight></codeline>
<codeline lineno="633"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">(sb.<ref refid="classShaderStateBlock_1a73af07c28d4a043e224c03b4dfe891cf" kindref="member">layerLevel</ref>));</highlight></codeline>
<codeline lineno="634"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="635"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="636"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sb.<ref refid="classShaderStateBlock_1ad840fa4cfc4c554037e143bb93fd056b" kindref="member">stcodeId</ref><sp/>!=<sp/>blk-&gt;<ref refid="classShaderStateBlock_1ad840fa4cfc4c554037e143bb93fd056b" kindref="member">stcodeId</ref>)</highlight></codeline>
<codeline lineno="637"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="638"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="shLog_8cpp_1a2926179632c7c86265007652d3d30b14" kindref="member">sh_debug</ref>(<ref refid="shLog_8h_1a66042048eb3ce30a1dccb2ebf8c2fd5caae3b70b41400c8a36e8a094ac1dbe43c" kindref="member">SHLOG_ERROR</ref>,<sp/></highlight><highlight class="stringliteral">&quot;non-ident<sp/>block<sp/>&lt;%s&gt;<sp/>redecl:<sp/>stcodeId=%d<sp/>!=<sp/>%d(prev)&quot;</highlight><highlight class="normal">,<sp/>blk-&gt;<ref refid="classShaderStateBlock_1ad24cbadd146d234944b96fd320d43aad" kindref="member">name</ref>.c_str(),<sp/>blk-&gt;<ref refid="classShaderStateBlock_1ad840fa4cfc4c554037e143bb93fd056b" kindref="member">stcodeId</ref>,<sp/>sb.<ref refid="classShaderStateBlock_1ad840fa4cfc4c554037e143bb93fd056b" kindref="member">stcodeId</ref>);</highlight></codeline>
<codeline lineno="639"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="640"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="641"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sb.<ref refid="classShaderStateBlock_1ae5f9acfd14a6cfe151e09ca904f4805c" kindref="member">shConst</ref>.<ref refid="structNamedConstBlock_1ad28a319c4c4d3d6d500653d1fb7614d9" kindref="member">suppBlk</ref><sp/>!=<sp/>blk-&gt;<ref refid="classShaderStateBlock_1ae5f9acfd14a6cfe151e09ca904f4805c" kindref="member">shConst</ref>.<ref refid="structNamedConstBlock_1ad28a319c4c4d3d6d500653d1fb7614d9" kindref="member">suppBlk</ref>)</highlight></codeline>
<codeline lineno="642"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="643"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="shLog_8cpp_1a2926179632c7c86265007652d3d30b14" kindref="member">sh_debug</ref>(<ref refid="shLog_8h_1a66042048eb3ce30a1dccb2ebf8c2fd5caae3b70b41400c8a36e8a094ac1dbe43c" kindref="member">SHLOG_ERROR</ref>,<sp/></highlight><highlight class="stringliteral">&quot;non-ident<sp/>block<sp/>&lt;%s&gt;<sp/>redecl:<sp/>supported<sp/>block<sp/>list<sp/>changed&quot;</highlight><highlight class="normal">,<sp/>blk-&gt;<ref refid="classShaderStateBlock_1ad24cbadd146d234944b96fd320d43aad" kindref="member">name</ref>.c_str());</highlight></codeline>
<codeline lineno="644"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="645"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="646"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="647"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="648"><highlight class="normal"></highlight></codeline>
<codeline lineno="649"><highlight class="normal"><sp/><sp/>G_ASSERT(blocks.size()<sp/>==<sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="650"><highlight class="normal"><sp/><sp/>blocks.push_back(blk);</highlight></codeline>
<codeline lineno="651"><highlight class="normal"><sp/><sp/>blk-&gt;<ref refid="classShaderStateBlock_1a48a921b68aac65a16fdd0a33e9465069" kindref="member">nameId</ref><sp/>=<sp/>id;</highlight></codeline>
<codeline lineno="652"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="653"><highlight class="normal">}</highlight></codeline>
<codeline lineno="654"><highlight class="normal"></highlight></codeline>
<codeline lineno="655"><highlight class="normal"><ref refid="classShaderStateBlock" kindref="compound">ShaderStateBlock</ref><sp/>*<ref refid="classShaderBlockTable_1a208a9d0ca182b150a9183de1d3d14f6a" kindref="member">ShaderBlockTable::findBlock</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*name)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="656"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="657"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal"><sp/>=<sp/>blockNames.getNameId(name);</highlight></codeline>
<codeline lineno="658"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">id</highlight><highlight class="normal"><sp/>&lt;<sp/>0)<sp/>?<sp/>NULL<sp/>:<sp/>blocks[id];</highlight></codeline>
<codeline lineno="659"><highlight class="normal">}</highlight></codeline>
<codeline lineno="660"><highlight class="normal"></highlight></codeline>
<codeline lineno="661"><highlight class="normal">Tab&lt;ShaderStateBlock<sp/>*&gt;<sp/><ref refid="classShaderBlockTable_1a2d59b777ab3d6b7e1875d8ad295fe560" kindref="member">ShaderBlockTable::release</ref>()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>eastl::move(blocks);<sp/>}</highlight></codeline>
<codeline lineno="662"><highlight class="normal"></highlight></codeline>
<codeline lineno="663"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="classShaderBlockTable_1a4450c0258b8f233e2ab12aeb91abb676" kindref="member">ShaderBlockTable::countBlock</ref>(<ref refid="namedConst_8h_1a8df4796c58d0d8445eaf37bb57425b6c" kindref="member">ShaderBlockLevel</ref><sp/>level)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="664"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="665"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(level<sp/>==<sp/><ref refid="namedConst_8h_1a8df4796c58d0d8445eaf37bb57425b6ca0db45d2a4141101bdfe48e3314cfbca3" kindref="member">ShaderBlockLevel::UNDEFINED</ref>)</highlight></codeline>
<codeline lineno="666"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>blocks.size();</highlight></codeline>
<codeline lineno="667"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>eastl::count_if(blocks.begin(),<sp/>blocks.end(),</highlight></codeline>
<codeline lineno="668"><highlight class="normal"><sp/><sp/><sp/><sp/>[&amp;level](</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classShaderStateBlock" kindref="compound">ShaderStateBlock</ref><sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>blk)<sp/>{<sp/>return<sp/>blk-&gt;layerLevel<sp/>==<sp/>level;<sp/>});</highlight></codeline>
<codeline lineno="669"><highlight class="normal">}</highlight></codeline>
<codeline lineno="670"><highlight class="normal"></highlight></codeline>
<codeline lineno="671"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classShaderBlockTable_1a969c81dcaa52660a6012dd5213705719" kindref="member">ShaderBlockTable::link</ref>(Tab&lt;ShaderStateBlock<sp/>*&gt;<sp/>&amp;loaded_blocks,<sp/>dag::ConstSpan&lt;int&gt;<sp/>stcode_remap,</highlight></codeline>
<codeline lineno="672"><highlight class="normal"><sp/><sp/>dag::ConstSpan&lt;int&gt;<sp/>external_stcode_remap)</highlight></codeline>
<codeline lineno="673"><highlight class="normal">{</highlight></codeline>
<codeline lineno="674"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<ref refid="classShaderStateBlock" kindref="compound">ShaderStateBlock</ref><sp/>*&amp;block<sp/>:<sp/>loaded_blocks)</highlight></codeline>
<codeline lineno="675"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="676"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classShaderStateBlock" kindref="compound">ShaderStateBlock</ref><sp/>&amp;b<sp/>=<sp/>*block;</highlight></codeline>
<codeline lineno="677"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;blk<sp/>:<sp/>b.shConst.suppBlk)</highlight></codeline>
<codeline lineno="678"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="679"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*bname<sp/>=<sp/>blk-&gt;<ref refid="classShaderStateBlock_1ad24cbadd146d234944b96fd320d43aad" kindref="member">name</ref>.c_str();</highlight></codeline>
<codeline lineno="680"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classShaderStateBlock" kindref="compound">ShaderStateBlock</ref><sp/>*sb<sp/>=<sp/>!blk-&gt;<ref refid="classShaderStateBlock_1ad24cbadd146d234944b96fd320d43aad" kindref="member">name</ref>.empty()<sp/>?<sp/><ref refid="classShaderBlockTable_1a208a9d0ca182b150a9183de1d3d14f6a" kindref="member">findBlock</ref>(bname)<sp/>:<sp/><ref refid="classShaderBlockTable_1a4ed91dd95664704f8d17f5d6c8357ea9" kindref="member">emptyBlock</ref>();</highlight></codeline>
<codeline lineno="681"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sb)</highlight></codeline>
<codeline lineno="682"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>blk<sp/>=<sp/>sb;</highlight></codeline>
<codeline lineno="683"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="684"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="shLog_8cpp_1a2926179632c7c86265007652d3d30b14" kindref="member">sh_debug</ref>(<ref refid="shLog_8h_1a66042048eb3ce30a1dccb2ebf8c2fd5ca6112bd3e7c5d175bac1569c33c1630ad" kindref="member">SHLOG_FATAL</ref>,<sp/></highlight><highlight class="stringliteral">&quot;undefined<sp/>block<sp/>&lt;%s&gt;&quot;</highlight><highlight class="normal">,<sp/>bname);</highlight></codeline>
<codeline lineno="685"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="686"><highlight class="normal"></highlight></codeline>
<codeline lineno="687"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>remapStcode<sp/>=<sp/>[&amp;,<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">](</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;id,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;remap,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*field_name)<sp/>{</highlight></codeline>
<codeline lineno="688"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(remap.size()<sp/>&amp;&amp;<sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal"><sp/>!=<sp/>-1)</highlight></codeline>
<codeline lineno="689"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="690"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">id</highlight><highlight class="normal"><sp/>&gt;=<sp/>0<sp/>&amp;&amp;<sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal"><sp/>&lt;<sp/>remap.size())</highlight></codeline>
<codeline lineno="691"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal"><sp/>=<sp/>remap[</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">];</highlight></codeline>
<codeline lineno="692"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="693"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="shLog_8cpp_1a2926179632c7c86265007652d3d30b14" kindref="member">sh_debug</ref>(<ref refid="shLog_8h_1a66042048eb3ce30a1dccb2ebf8c2fd5ca6112bd3e7c5d175bac1569c33c1630ad" kindref="member">SHLOG_FATAL</ref>,<sp/></highlight><highlight class="stringliteral">&quot;block<sp/>&lt;%s&gt;:<sp/>%s=%d<sp/>is<sp/>out<sp/>of<sp/>range<sp/>[0..%d]&quot;</highlight><highlight class="normal">,<sp/>b.<ref refid="classShaderStateBlock_1ad24cbadd146d234944b96fd320d43aad" kindref="member">name</ref>.c_str(),<sp/>field_name,<sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">,<sp/>remap.size()<sp/>-<sp/>1);</highlight></codeline>
<codeline lineno="694"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="695"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="696"><highlight class="normal"></highlight></codeline>
<codeline lineno="697"><highlight class="normal"><sp/><sp/><sp/><sp/>remapStcode(b.<ref refid="classShaderStateBlock_1ad840fa4cfc4c554037e143bb93fd056b" kindref="member">stcodeId</ref>,<sp/>stcode_remap,<sp/></highlight><highlight class="stringliteral">&quot;stcodeId&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="698"><highlight class="normal"><sp/><sp/><sp/><sp/>remapStcode(b.<ref refid="classShaderStateBlock_1a1ba5283efd19f83cb3c8ee1211b0197f" kindref="member">cppStcodeId</ref>,<sp/>external_stcode_remap,<sp/></highlight><highlight class="stringliteral">&quot;cppStcodeId&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="699"><highlight class="normal"></highlight></codeline>
<codeline lineno="700"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="classShaderBlockTable_1ad5ec754c23a14e7d4f73cba66147c486" kindref="member">registerBlock</ref>(&amp;b,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">))</highlight></codeline>
<codeline lineno="701"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="702"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="shLog_8cpp_1a2926179632c7c86265007652d3d30b14" kindref="member">sh_debug</ref>(<ref refid="shLog_8h_1a66042048eb3ce30a1dccb2ebf8c2fd5ca6112bd3e7c5d175bac1569c33c1630ad" kindref="member">SHLOG_FATAL</ref>,<sp/></highlight><highlight class="stringliteral">&quot;can&apos;t<sp/>register<sp/>block<sp/>&lt;%s&gt;<sp/>-<sp/>definition<sp/>differs<sp/>from<sp/>previous&quot;</highlight><highlight class="normal">,<sp/>b.<ref refid="classShaderStateBlock_1ad24cbadd146d234944b96fd320d43aad" kindref="member">name</ref>.c_str());</highlight></codeline>
<codeline lineno="703"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>&amp;b;</highlight></codeline>
<codeline lineno="704"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="705"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="706"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="namedConst.cpp"/>
  </compounddef>
</doxygen>
