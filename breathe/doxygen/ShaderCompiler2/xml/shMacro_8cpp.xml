<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.7" xml:lang="en-US">
  <compounddef id="shMacro_8cpp" kind="file" language="C++">
    <compoundname>shMacro.cpp</compoundname>
    <includes refid="shMacro_8h" local="yes">shMacro.h</includes>
    <includes refid="shlexterm_8h" local="yes">shlexterm.h</includes>
    <includes local="no">generic/dag_tabUtils.h</includes>
    <includes local="yes">shlex.h</includes>
    <includes local="yes">shsyntok.h</includes>
    <includes refid="shLog_8h" local="yes">shLog.h</includes>
    <includes refid="fast__isalnum_8h" local="yes">fast_isalnum.h</includes>
    <includes local="no">debug/dag_debug.h</includes>
    <includes local="no">EASTL/unique_ptr.h</includes>
    <incdepgraph>
      <node id="5">
        <label>commonUtils.h</label>
        <link refid="commonUtils_8h"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="15">
        <label>fast_isalnum.h</label>
        <link refid="fast__isalnum_8h"/>
      </node>
      <node id="14">
        <label>shLog.h</label>
        <link refid="shLog_8h"/>
      </node>
      <node id="1">
        <label>shMacro.cpp</label>
        <link refid="shMacro_8cpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>shMacro.h</label>
        <link refid="shMacro_8h"/>
      </node>
      <node id="3">
        <label>shlexterm.h</label>
        <link refid="shlexterm_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="10">
        <label>EASTL/optional.h</label>
      </node>
      <node id="9">
        <label>EASTL/string.h</label>
      </node>
      <node id="17">
        <label>EASTL/unique_ptr.h</label>
      </node>
      <node id="16">
        <label>debug/dag_debug.h</label>
      </node>
      <node id="11">
        <label>generic/dag_tabUtils.h</label>
      </node>
      <node id="12">
        <label>shlex.h</label>
      </node>
      <node id="4">
        <label>shsyn.h</label>
      </node>
      <node id="13">
        <label>shsyntok.h</label>
      </node>
      <node id="8">
        <label>util/dag_globDef.h</label>
      </node>
      <node id="7">
        <label>util/dag_safeArg.h</label>
      </node>
      <node id="6">
        <label>utility</label>
      </node>
    </incdepgraph>
      <sectiondef kind="define">
      <memberdef kind="define" id="shMacro_8cpp_1a53b7d4ef6b5cc76b0bce2fd6fe5733ed" prot="public" static="no">
        <name>DBGLOG</name>
        <param><defname>...</defname></param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="shMacro.cpp" line="18" column="10" bodyfile="shMacro.cpp" bodystart="18" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="shMacro_8cpp_1a7d97b01895693084c0dacefa8a51724f" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>static bool process_macro_params</definition>
        <argsstring>(Lexer &amp;lexer, Tab&lt; String &gt; &amp;var_list)</argsstring>
        <name>process_macro_params</name>
        <param>
          <type><ref refid="classLexer" kindref="compound">Lexer</ref> &amp;</type>
          <declname>lexer</declname>
        </param>
        <param>
          <type>Tab&lt; String &gt; &amp;</type>
          <declname>var_list</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="shMacro.cpp" line="30" column="13" bodyfile="shMacro.cpp" bodystart="30" bodyend="89"/>
      </memberdef>
      <memberdef kind="function" id="shMacro_8cpp_1a49c62054633a1bca7b3ebd4284476f2f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int get_token</definition>
        <argsstring>(ShaderParser::TokenInfo &amp;tok, Lexer &amp;__this)</argsstring>
        <name>get_token</name>
        <param>
          <type><ref refid="structShaderParser_1_1TokenInfo" kindref="compound">ShaderParser::TokenInfo</ref> &amp;</type>
          <declname>tok</declname>
        </param>
        <param>
          <type><ref refid="classLexer" kindref="compound">Lexer</ref> &amp;</type>
          <declname>__this</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="shMacro.cpp" line="178" column="12" bodyfile="shlexterm.cpp" bodystart="130" bodyend="144" declfile="shMacro.cpp" declline="178" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="shMacro_8cpp_1a96ce21c8e6db8969168c527c10b14e66" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>static bool process_macro_variables</definition>
        <argsstring>(Lexer &amp;lexer, Tab&lt; ShaderMacro::TokenList &gt; &amp;var_list, int req_count, ShaderMacroManager &amp;context)</argsstring>
        <name>process_macro_variables</name>
        <param>
          <type><ref refid="classLexer" kindref="compound">Lexer</ref> &amp;</type>
          <declname>lexer</declname>
        </param>
        <param>
          <type>Tab&lt; <ref refid="structShaderMacro_1a328866b4f9109d27bb1efcf0b5a56992" kindref="member">ShaderMacro::TokenList</ref> &gt; &amp;</type>
          <declname>var_list</declname>
        </param>
        <param>
          <type>int</type>
          <declname>req_count</declname>
        </param>
        <param>
          <type><ref refid="classShaderMacroManager" kindref="compound">ShaderMacroManager</ref> &amp;</type>
          <declname>context</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="shMacro.cpp" line="181" column="13" bodyfile="shMacro.cpp" bodystart="181" bodyend="266"/>
      </memberdef>
      <memberdef kind="function" id="shMacro_8cpp_1ac2861fea6c1ddf606692af104de52496" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>static bool expand_macro</definition>
        <argsstring>(Lexer &amp;lexer, ShaderMacro::TokenList &amp;code, ShaderMacro &amp;macro, ShaderMacroManager &amp;context)</argsstring>
        <name>expand_macro</name>
        <param>
          <type><ref refid="classLexer" kindref="compound">Lexer</ref> &amp;</type>
          <declname>lexer</declname>
        </param>
        <param>
          <type><ref refid="structShaderMacro_1a328866b4f9109d27bb1efcf0b5a56992" kindref="member">ShaderMacro::TokenList</ref> &amp;</type>
          <declname>code</declname>
        </param>
        <param>
          <type><ref refid="structShaderMacro" kindref="compound">ShaderMacro</ref> &amp;</type>
          <declname>macro</declname>
        </param>
        <param>
          <type><ref refid="classShaderMacroManager" kindref="compound">ShaderMacroManager</ref> &amp;</type>
          <declname>context</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="shMacro.cpp" line="270" column="13" bodyfile="shMacro.cpp" bodystart="270" bodyend="440"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/>Copyright<sp/>(C)<sp/>Gaijin<sp/>Games<sp/>KFT.<sp/><sp/>All<sp/>rights<sp/>reserved.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="shMacro_8h" kindref="compound">shMacro.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="shlexterm_8h" kindref="compound">shlexterm.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;generic/dag_tabUtils.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;shlex.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;shsyntok.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="shLog_8h" kindref="compound">shLog.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="fast__isalnum_8h" kindref="compound">fast_isalnum.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;debug/dag_debug.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;EASTL/unique_ptr.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="comment">//<sp/>#define<sp/>DEBUG_SHADER_MACROS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>DEBUG_SHADER_MACROS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DBGLOG<sp/>debug</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DBGLOG(...)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="comment">/*********************************</highlight></codeline>
<codeline lineno="22"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="23"><highlight class="comment"><sp/>*<sp/>struct<sp/>ShaderMacro</highlight></codeline>
<codeline lineno="24"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="25"><highlight class="comment"><sp/>*********************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="comment">//<sp/>ctor/dtor</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"><ref refid="structShaderMacro_1a140d8a47d8150f13d15cd244a54079cb" kindref="member">ShaderMacro::ShaderMacro</ref>()<sp/>:<sp/>textParts(midmem),<sp/>variables(midmem),<sp/>name(</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">),<sp/>expandStr(</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">)<sp/>{}</highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="comment">//<sp/>parse<sp/>macro<sp/>parameters.<sp/>in<sp/>=<sp/>([v1][,<sp/>v2]..[,<sp/>vn])</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>process_macro_params(<ref refid="classLexer" kindref="compound">Lexer</ref><sp/>&amp;lexer,<sp/>Tab&lt;String&gt;<sp/>&amp;var_list)</highlight></codeline>
<codeline lineno="31"><highlight class="normal">{</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><ref refid="shMacro_8cpp_1a53b7d4ef6b5cc76b0bce2fd6fe5733ed" kindref="member">DBGLOG</ref>(</highlight><highlight class="stringliteral">&quot;ShaderMacro::processParams&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/>clear_and_shrink(var_list);</highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(lexer.get_token()<sp/>!=<sp/>SHADER_TOKENS::SHTOK_lpar)</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/>lexer.<ref refid="classLexer_1a7dee3a13188fbcb621f3100297e89ea1" kindref="member">error</ref>(</highlight><highlight class="stringliteral">&quot;expected<sp/>&apos;(&apos;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/>String<sp/>varName;</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>needVarName<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>needBreak<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">true</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>token<sp/>=<sp/>lexer.get_token();</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="shMacro_8cpp_1a53b7d4ef6b5cc76b0bce2fd6fe5733ed" kindref="member">DBGLOG</ref>(</highlight><highlight class="stringliteral">&quot;token=%d<sp/>%s&quot;</highlight><highlight class="normal">,<sp/>token,<sp/>parser.get_lexeme());</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(token)</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>SHADER_TOKENS::SHTOK_comma:<sp/>needVarName<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>SHADER_TOKENS::SHTOK_rpar:<sp/>needBreak<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>SHADER_TOKENS::SHTOK_ident:</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>varName<sp/>=<sp/>lexer.get_lexeme();</highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>check<sp/>variable</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(tabutils::getIndex(var_list,<sp/>varName)<sp/>&gt;=<sp/>0)</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lexer.<ref refid="classLexer_1a7dee3a13188fbcb621f3100297e89ea1" kindref="member">error</ref>(String(128,<sp/></highlight><highlight class="stringliteral">&quot;duplicate<sp/>macro<sp/>parameter<sp/>&apos;%s&apos;&quot;</highlight><highlight class="normal">,<sp/>varName.str()));</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="shMacro_8cpp_1a53b7d4ef6b5cc76b0bce2fd6fe5733ed" kindref="member">DBGLOG</ref>(</highlight><highlight class="stringliteral">&quot;varName=%s&quot;</highlight><highlight class="normal">,<sp/>varName.str());</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var_list.push_back(varName);</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>varName<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>needVarName<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lexer.<ref refid="classLexer_1a7dee3a13188fbcb621f3100297e89ea1" kindref="member">error</ref>(String(128,<sp/></highlight><highlight class="stringliteral">&quot;illegal<sp/>symbol<sp/>&apos;%s&apos;<sp/>in<sp/>macro<sp/>definition&quot;</highlight><highlight class="normal">,<sp/>lexer.get_lexeme()));</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(needBreak)</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(needVarName)</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/>lexer.<ref refid="classLexer_1a7dee3a13188fbcb621f3100297e89ea1" kindref="member">error</ref>(</highlight><highlight class="stringliteral">&quot;expected<sp/>macro<sp/>parameter&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="89"><highlight class="normal">}</highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight><highlight class="comment">//<sp/>parse<sp/>macro<sp/>declaration<sp/>(return<sp/>false<sp/>if<sp/>failed)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight><highlight class="comment">//<sp/>in<sp/>=<sp/>macro<sp/>&lt;macro_id&gt;([v1][,<sp/>v2]..[,<sp/>vn])<sp/>&lt;macro_body&gt;<sp/>endmacro</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>ShaderMacroManager::parseMacroDefinition(<ref refid="classLexer" kindref="compound">Lexer</ref><sp/>&amp;lexer,<sp/><ref refid="structShaderMacro" kindref="compound">ShaderMacro</ref><sp/>&amp;macro)</highlight></codeline>
<codeline lineno="94"><highlight class="normal">{</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(lexer.get_token()<sp/>!=<sp/>SHADER_TOKENS::SHTOK_ident)</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/>lexer.<ref refid="classLexer_1a7dee3a13188fbcb621f3100297e89ea1" kindref="member">error</ref>(</highlight><highlight class="stringliteral">&quot;expected<sp/>macro<sp/>name&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/>macro.<ref refid="structShaderMacro_1ac25569b777606c8c07ce1ca05975177a" kindref="member">name</ref><sp/>=<sp/>lexer.get_lexeme();</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><ref refid="shMacro_8cpp_1a53b7d4ef6b5cc76b0bce2fd6fe5733ed" kindref="member">DBGLOG</ref>(</highlight><highlight class="stringliteral">&quot;parse<sp/>definition<sp/>&apos;%s&apos;&quot;</highlight><highlight class="normal">,<sp/>name.str());</highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/>macro.<ref refid="structShaderMacro_1a87993859308d45f8b47786a6d85d1683" kindref="member">expandStr</ref>.printf(512,<sp/></highlight><highlight class="stringliteral">&quot;expanding<sp/>macro<sp/>&apos;%s&apos;<sp/>at<sp/>file(%%s)line(%%d)pos(%%d),\n(declared<sp/>at<sp/>file(%s)line(%d)pos(%d))&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/>macro.<ref refid="structShaderMacro_1ac25569b777606c8c07ce1ca05975177a" kindref="member">name</ref>.str(),<sp/>lexer.__input_stream()-&gt;<ref refid="classLexer_1ab26ad89867e01b9d9aecd26d1c74776c" kindref="member">get_filename</ref>(lexer.get_cur_file()),<sp/>lexer.get_cur_line(),<sp/>lexer.get_cur_column());</highlight></codeline>
<codeline lineno="106"><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>gather<sp/>parameters</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!process_macro_params(lexer,<sp/>macro.<ref refid="structShaderMacro_1a2e0bb488f52cd60a908e326c4cf353c6" kindref="member">variables</ref>))</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>varCount<sp/>=<sp/>macro.<ref refid="structShaderMacro_1a2e0bb488f52cd60a908e326c4cf353c6" kindref="member">variables</ref>.size();</highlight></codeline>
<codeline lineno="111"><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>get<sp/>macro<sp/>body<sp/>&amp;<sp/>find<sp/>all<sp/>macro<sp/>variable<sp/>places</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/>String<sp/>str;</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/>inMacroDefinition<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">true</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>token<sp/>=<sp/>lexer.get_token();</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(token<sp/>==<sp/>SHADER_TOKENS::SHTOK_ident)</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strcmp(macro.<ref refid="structShaderMacro_1ac25569b777606c8c07ce1ca05975177a" kindref="member">name</ref>,<sp/>lexer.get_lexeme())<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lexer.<ref refid="classLexer_1a7dee3a13188fbcb621f3100297e89ea1" kindref="member">error</ref>(</highlight><highlight class="stringliteral">&quot;macro<sp/>recursion<sp/>not<sp/>allowed!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="126"><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(token<sp/>==<sp/>SHADER_TOKENS::SHTOK_include<sp/>||<sp/>token<sp/>==<sp/>SHADER_TOKENS::SHTOK_include_optional)</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>lexer.<ref refid="classLexer_1a7dee3a13188fbcb621f3100297e89ea1" kindref="member">error</ref>(</highlight><highlight class="stringliteral">&quot;include<sp/>in<sp/>macros<sp/>not<sp/>allowed!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="132"><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(token)</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>SHADER_TOKENS::SHTOK_endmacro:</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>end<sp/>macro<sp/>-<sp/>all<sp/>ok,<sp/>return</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>inMacroDefinition<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>SHADER_TOKENS::TerminalEOF:</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>EOF<sp/>occuried<sp/>while<sp/>macro<sp/>definition<sp/>is<sp/>parsed<sp/>-<sp/>error!</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!lexer.__input_stream()-&gt;is_real_eof())</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lexer.clear_eof();</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lexer.<ref refid="classLexer_1a7dee3a13188fbcb621f3100297e89ea1" kindref="member">error</ref>(</highlight><highlight class="stringliteral">&quot;expected<sp/>&apos;endmacro&apos;<sp/>but<sp/>EOF<sp/>found!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>inMacroDefinition<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>all<sp/>ok<sp/>-<sp/>check<sp/>for<sp/>parameter</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>String<sp/>varName(lexer.get_lexeme());</highlight></codeline>
<codeline lineno="159"><highlight class="normal"></highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>varIndex<sp/>=<sp/>tabutils::getIndex(macro.<ref refid="structShaderMacro_1a2e0bb488f52cd60a908e326c4cf353c6" kindref="member">variables</ref>,<sp/>varName);</highlight></codeline>
<codeline lineno="161"><highlight class="normal"></highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>macro.<ref refid="structShaderMacro_1acde7bdbdbe11fbedf19685eafb4b8fc6" kindref="member">textParts</ref>.push_back(<ref refid="structShaderMacro_1_1TokenData" kindref="compound">ShaderMacro::TokenData</ref>((varIndex<sp/>&gt;=<sp/>0)<sp/>?<sp/>varIndex<sp/>:<sp/>-1));</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structShaderMacro_1_1TokenData" kindref="compound">ShaderMacro::TokenData</ref><sp/>&amp;newData<sp/>=<sp/>macro.<ref refid="structShaderMacro_1acde7bdbdbe11fbedf19685eafb4b8fc6" kindref="member">textParts</ref>.back();</highlight></codeline>
<codeline lineno="164"><highlight class="normal"></highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>store<sp/>position<sp/>data</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>newData.<ref refid="structShaderMacro_1_1TokenData_1a7a4ec21b3913cb75abc904d6cb134ff3" kindref="member">info</ref>.<ref refid="structShaderParser_1_1TokenInfo_1a1ef44eeb587bbdae1f8fb647d8f518ef" kindref="member">lexeme</ref><sp/>=<sp/>lexer.get_lexeme();</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>newData.<ref refid="structShaderMacro_1_1TokenData_1a7a4ec21b3913cb75abc904d6cb134ff3" kindref="member">info</ref>.<ref refid="structShaderParser_1_1TokenInfo_1abd03427e0889aa2f537e8330f237abfc" kindref="member">token</ref><sp/>=<sp/>token;</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>newData.<ref refid="structShaderMacro_1_1TokenData_1a7a4ec21b3913cb75abc904d6cb134ff3" kindref="member">info</ref>.<ref refid="structShaderParser_1_1TokenInfo_1a657464dbaabd0bed7acbed914f51a7db" kindref="member">file</ref><sp/>=<sp/>lexer.get_cur_file();</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>newData.<ref refid="structShaderMacro_1_1TokenData_1a7a4ec21b3913cb75abc904d6cb134ff3" kindref="member">info</ref>.<ref refid="structShaderParser_1_1TokenInfo_1a21500ff2d7a5ae4c1b933d92bac2b5ca" kindref="member">line</ref><sp/>=<sp/>lexer.get_cur_line();</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>newData.<ref refid="structShaderMacro_1_1TokenData_1a7a4ec21b3913cb75abc904d6cb134ff3" kindref="member">info</ref>.<ref refid="structShaderParser_1_1TokenInfo_1ad6ad16601acddc4e7835b186fa09190a" kindref="member">column</ref><sp/>=<sp/>lexer.get_cur_column();</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="174"><highlight class="normal"></highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="176"><highlight class="normal">}</highlight></codeline>
<codeline lineno="177"><highlight class="normal"></highlight></codeline>
<codeline lineno="178"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="shMacro_8cpp_1a49c62054633a1bca7b3ebd4284476f2f" kindref="member">get_token</ref>(<ref refid="structShaderParser_1_1TokenInfo" kindref="compound">ShaderParser::TokenInfo</ref><sp/>&amp;tok,<sp/><ref refid="classLexer" kindref="compound">Lexer</ref><sp/>&amp;__this);</highlight></codeline>
<codeline lineno="179"><highlight class="normal"></highlight></codeline>
<codeline lineno="180"><highlight class="normal"></highlight><highlight class="comment">//<sp/>parse<sp/>macro<sp/>parameters<sp/>(real).<sp/>in<sp/>=<sp/>([v1][,<sp/>v2]..[,<sp/>vn])</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="181"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>process_macro_variables(<ref refid="classLexer" kindref="compound">Lexer</ref><sp/>&amp;lexer,<sp/>Tab&lt;ShaderMacro::TokenList&gt;<sp/>&amp;var_list,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>req_count,<sp/><ref refid="classShaderMacroManager" kindref="compound">ShaderMacroManager</ref><sp/>&amp;context)</highlight></codeline>
<codeline lineno="182"><highlight class="normal">{</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><ref refid="shMacro_8cpp_1a53b7d4ef6b5cc76b0bce2fd6fe5733ed" kindref="member">DBGLOG</ref>(</highlight><highlight class="stringliteral">&quot;ShaderMacro::processVariables<sp/>&apos;%s&apos;&quot;</highlight><highlight class="normal">,<sp/>name.str());</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><ref refid="structShaderParser_1_1TokenInfo" kindref="compound">ShaderParser::TokenInfo</ref><sp/>tok;</highlight></codeline>
<codeline lineno="185"><highlight class="normal"></highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="shMacro_8cpp_1a49c62054633a1bca7b3ebd4284476f2f" kindref="member">::get_token</ref>(tok,<sp/>lexer)<sp/>!=<sp/>SHADER_TOKENS::SHTOK_lpar)</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/>lexer.<ref refid="classLexer_1a7dee3a13188fbcb621f3100297e89ea1" kindref="member">error</ref>(</highlight><highlight class="stringliteral">&quot;expected<sp/>&apos;(&apos;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="191"><highlight class="normal"></highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>String<sp/>varName;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>needVarName<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>needBreak<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isProcessed<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>pairBalance<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="197"><highlight class="normal"></highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><ref refid="structShaderMacro_1a328866b4f9109d27bb1efcf0b5a56992" kindref="member">ShaderMacro::TokenList</ref><sp/>newVar;</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">true</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>token<sp/>=<sp/><ref refid="shMacro_8cpp_1a49c62054633a1bca7b3ebd4284476f2f" kindref="member">::get_token</ref>(tok,<sp/>lexer);</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/>isProcessed<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="shMacro_8cpp_1a53b7d4ef6b5cc76b0bce2fd6fe5733ed" kindref="member">DBGLOG</ref>(</highlight><highlight class="stringliteral">&quot;token=%d<sp/>%s&quot;</highlight><highlight class="normal">,<sp/>token,<sp/>lexer-&gt;get_lexeme());</highlight></codeline>
<codeline lineno="204"><highlight class="normal"></highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(token)</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>SHADER_TOKENS::SHTOK_comma:</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pairBalance<sp/>==<sp/>1)</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>var_list.push_back(varName);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>varName<sp/>=<sp/>&quot;&quot;;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var_list.push_back(eastl::move(newVar));</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>needVarName<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>isProcessed<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>SHADER_TOKENS::SHTOK_lpar:<sp/>pairBalance++;<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>SHADER_TOKENS::SHTOK_rpar:</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pairBalance--;</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pairBalance<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(newVar.size())</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var_list.push_back(eastl::move(newVar));</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>isProcessed<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="227"><highlight class="normal"></highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>needBreak<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pairBalance<sp/>&lt;<sp/>0)</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lexer.<ref refid="classLexer_1a7dee3a13188fbcb621f3100297e89ea1" kindref="member">error</ref>(</highlight><highlight class="stringliteral">&quot;&apos;(&apos;<sp/>and<sp/>&apos;)&apos;<sp/>mismatch<sp/>while<sp/>parsing<sp/>macro<sp/>actial<sp/>params&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="237"><highlight class="normal"></highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(needBreak)</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="240"><highlight class="normal"></highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!isProcessed)</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>newVar.push_back(<ref refid="structShaderMacro_1_1TokenData" kindref="compound">ShaderMacro::TokenData</ref>(-1));</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structShaderMacro_1_1TokenData" kindref="compound">ShaderMacro::TokenData</ref><sp/>&amp;newData<sp/>=<sp/>newVar.back();</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>newData.<ref refid="structShaderMacro_1_1TokenData_1a7a4ec21b3913cb75abc904d6cb134ff3" kindref="member">info</ref><sp/>=<sp/>tok;</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>needVarName<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="249"><highlight class="normal"></highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(needVarName)</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/>lexer.<ref refid="classLexer_1a7dee3a13188fbcb621f3100297e89ea1" kindref="member">error</ref>(</highlight><highlight class="stringliteral">&quot;expected<sp/>macro<sp/>parameter&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="255"><highlight class="normal"></highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(req_count<sp/>&gt;=<sp/>0)</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(req_count<sp/>!=<sp/>var_list.size())</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>lexer.<ref refid="classLexer_1a7dee3a13188fbcb621f3100297e89ea1" kindref="member">error</ref>(String(128,<sp/></highlight><highlight class="stringliteral">&quot;mismatch<sp/>macro<sp/>params<sp/>-<sp/>required<sp/>%d<sp/>but<sp/>found<sp/>%d&quot;</highlight><highlight class="normal">,<sp/>req_count,<sp/>var_list.size()));</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="264"><highlight class="normal"></highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="266"><highlight class="normal">}</highlight></codeline>
<codeline lineno="267"><highlight class="normal"></highlight></codeline>
<codeline lineno="268"><highlight class="normal"></highlight></codeline>
<codeline lineno="269"><highlight class="normal"></highlight><highlight class="comment">//<sp/>parse<sp/>params,<sp/>make<sp/>full<sp/>code<sp/>text<sp/>&amp;<sp/>include<sp/>code<sp/>in<sp/>input<sp/>file<sp/>-<sp/>return<sp/>false<sp/>if<sp/>failed</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="270"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>expand_macro(<ref refid="classLexer" kindref="compound">Lexer</ref><sp/>&amp;lexer,<sp/><ref refid="structShaderMacro_1a328866b4f9109d27bb1efcf0b5a56992" kindref="member">ShaderMacro::TokenList</ref><sp/>&amp;code,<sp/><ref refid="structShaderMacro" kindref="compound">ShaderMacro</ref><sp/>&amp;macro,<sp/><ref refid="classShaderMacroManager" kindref="compound">ShaderMacroManager</ref><sp/>&amp;context)</highlight></codeline>
<codeline lineno="271"><highlight class="normal">{</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><ref refid="shMacro_8cpp_1a53b7d4ef6b5cc76b0bce2fd6fe5733ed" kindref="member">DBGLOG</ref>(</highlight><highlight class="stringliteral">&quot;ShaderMacro::expandMacro<sp/>&apos;%s&apos;&quot;</highlight><highlight class="normal">,<sp/>name.str());</highlight></codeline>
<codeline lineno="273"><highlight class="normal"></highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>gather<sp/>parameters</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/>Tab&lt;ShaderMacro::TokenList&gt;<sp/>varList;</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!process_macro_variables(lexer,<sp/>varList,<sp/>macro.<ref refid="structShaderMacro_1a2e0bb488f52cd60a908e326c4cf353c6" kindref="member">variables</ref>.size(),<sp/>context))</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="278"><highlight class="normal"></highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>macro<sp/>is<sp/>empty,<sp/>do<sp/>nothing</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!macro.<ref refid="structShaderMacro_1acde7bdbdbe11fbedf19685eafb4b8fc6" kindref="member">textParts</ref>.size())</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/>code.reserve(macro.<ref refid="structShaderMacro_1acde7bdbdbe11fbedf19685eafb4b8fc6" kindref="member">textParts</ref>.size()<sp/>+<sp/>varList.size()<sp/>+<sp/>4<sp/>*<sp/>macro.<ref refid="structShaderMacro_1a2e0bb488f52cd60a908e326c4cf353c6" kindref="member">variables</ref>.size());</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>code_start<sp/>=<sp/>code.size();</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/>Tab&lt;String&gt;<sp/>varStrings(tmpmem);</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/>varStrings.resize(macro.<ref refid="structShaderMacro_1a2e0bb488f52cd60a908e326c4cf353c6" kindref="member">variables</ref>.size());</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>macro.<ref refid="structShaderMacro_1a2e0bb488f52cd60a908e326c4cf353c6" kindref="member">variables</ref>.size();<sp/>i++)</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structShaderMacro_1a328866b4f9109d27bb1efcf0b5a56992" kindref="member">ShaderMacro::TokenList</ref><sp/>&amp;varTokens<sp/>=<sp/>varList[i];</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>varTokens.size();<sp/>j++)</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>varStrings[i].aprintf(256,<sp/></highlight><highlight class="stringliteral">&quot;%s&quot;</highlight><highlight class="normal">,<sp/>varTokens[j].info.lexeme.str());</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>replace<sp/>parameters<sp/>with<sp/>it&apos;s<sp/>values</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>partsCount<sp/>=<sp/>macro.<ref refid="structShaderMacro_1acde7bdbdbe11fbedf19685eafb4b8fc6" kindref="member">textParts</ref>.size();</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>partsCount;<sp/>i++)</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>nextTokenIsMacroConcatOp<sp/>=<sp/>i<sp/>+<sp/>1<sp/>&lt;<sp/>partsCount<sp/>&amp;&amp;<sp/>macro.<ref refid="structShaderMacro_1acde7bdbdbe11fbedf19685eafb4b8fc6" kindref="member">textParts</ref>[i<sp/>+<sp/>1].info.token<sp/>==<sp/>SHADER_TOKENS::SHTOK_macro_concat;</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(nextTokenIsMacroConcatOp)</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i<sp/>+<sp/>2<sp/>&gt;=<sp/>partsCount)</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lexer.<ref refid="classLexer_1a7dee3a13188fbcb621f3100297e89ea1" kindref="member">error</ref>(</highlight><highlight class="stringliteral">&quot;Invalid<sp/>macro<sp/>concatenation<sp/>expression.<sp/>Right<sp/>arg<sp/>is<sp/>missing.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="304"><highlight class="normal"></highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structShaderMacro_1_1TokenData" kindref="compound">ShaderMacro::TokenData</ref><sp/>&amp;leftToken<sp/>=<sp/>macro.<ref refid="structShaderMacro_1acde7bdbdbe11fbedf19685eafb4b8fc6" kindref="member">textParts</ref>[i];</highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structShaderMacro_1_1TokenData" kindref="compound">ShaderMacro::TokenData</ref><sp/>&amp;rightToken<sp/>=<sp/>macro.<ref refid="structShaderMacro_1acde7bdbdbe11fbedf19685eafb4b8fc6" kindref="member">textParts</ref>[i<sp/>+<sp/>2];</highlight></codeline>
<codeline lineno="307"><highlight class="normal"></highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*invalidArgError<sp/>=</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Invalid<sp/>macro<sp/>concatenation<sp/>expression.<sp/>Arguments<sp/>must<sp/>be<sp/>macro<sp/>params<sp/>with<sp/>only<sp/>single<sp/>text<sp/>value&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="310"><highlight class="normal"></highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(leftToken.<ref refid="structShaderMacro_1_1TokenData_1a9d10067a2654abba99257f9620a38ca2" kindref="member">paramIndex</ref><sp/>&lt;<sp/>0<sp/>||<sp/>rightToken.<ref refid="structShaderMacro_1_1TokenData_1a9d10067a2654abba99257f9620a38ca2" kindref="member">paramIndex</ref><sp/>&lt;<sp/>0)</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lexer.<ref refid="classLexer_1a7dee3a13188fbcb621f3100297e89ea1" kindref="member">error</ref>(invalidArgError);</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="316"><highlight class="normal"></highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>getTokenReplacement<sp/>=<sp/>[&amp;](</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>text_idx)<sp/>{</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::initializer_list&lt;int&gt;<sp/>invalidTokensForConcat<sp/>=<sp/>{SHADER_TOKENS::SHTOK_hlsl_text,<sp/>SHADER_TOKENS::SHTOK_beg,</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SHADER_TOKENS::SHTOK_end,<sp/>SHADER_TOKENS::SHTOK_lpar,<sp/>SHADER_TOKENS::SHTOK_rpar,<sp/>SHADER_TOKENS::SHTOK_lbrk,</highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SHADER_TOKENS::SHTOK_rbrk,<sp/>SHADER_TOKENS::SHTOK_comma,<sp/>SHADER_TOKENS::SHTOK_dot,<sp/>SHADER_TOKENS::SHTOK_semi,</highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SHADER_TOKENS::SHTOK_colon,<sp/>SHADER_TOKENS::SHTOK_assign,<sp/>SHADER_TOKENS::SHTOK_eq,<sp/>SHADER_TOKENS::SHTOK_noteq,</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SHADER_TOKENS::SHTOK_not,<sp/>SHADER_TOKENS::SHTOK_or,<sp/>SHADER_TOKENS::SHTOK_and,<sp/>SHADER_TOKENS::SHTOK_plus,</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SHADER_TOKENS::SHTOK_minus,<sp/>SHADER_TOKENS::SHTOK_mul,<sp/>SHADER_TOKENS::SHTOK_div,<sp/>SHADER_TOKENS::SHTOK_smaller,</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SHADER_TOKENS::SHTOK_greater,<sp/>SHADER_TOKENS::SHTOK_smallereq,<sp/>SHADER_TOKENS::SHTOK_greatereq};</highlight></codeline>
<codeline lineno="325"><highlight class="normal"></highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structShaderMacro_1a328866b4f9109d27bb1efcf0b5a56992" kindref="member">ShaderMacro::TokenList</ref><sp/>&amp;replacementTokens<sp/>=<sp/>varList[macro.<ref refid="structShaderMacro_1acde7bdbdbe11fbedf19685eafb4b8fc6" kindref="member">textParts</ref>[text_idx].paramIndex];</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>concatArgIsValid<sp/>=</highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>replacementTokens.size()<sp/>==<sp/>1<sp/>&amp;&amp;<sp/>!<ref refid="commonUtils_8h_1ae2667fae32711226a08120e1cc45974d" kindref="member">item_is_in</ref>(replacementTokens[0].info.token,<sp/>invalidTokensForConcat);</highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>concatArgIsValid<sp/>?<sp/>&amp;replacementTokens[0]<sp/>:<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="331"><highlight class="normal"></highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structShaderMacro_1_1TokenData" kindref="compound">ShaderMacro::TokenData</ref><sp/>*leftReplacement<sp/>=<sp/>getTokenReplacement(i);</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structShaderMacro_1_1TokenData" kindref="compound">ShaderMacro::TokenData</ref><sp/>*rightReplacement<sp/>=<sp/>getTokenReplacement(i<sp/>+<sp/>2);</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!leftReplacement<sp/>||<sp/>!rightReplacement)</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lexer.<ref refid="classLexer_1a7dee3a13188fbcb621f3100297e89ea1" kindref="member">error</ref>(invalidArgError);</highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="339"><highlight class="normal"></highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structShaderMacro_1_1TokenData" kindref="compound">ShaderMacro::TokenData</ref><sp/>newToken<sp/>=<sp/>leftToken;</highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>newToken.<ref refid="structShaderMacro_1_1TokenData_1a7a4ec21b3913cb75abc904d6cb134ff3" kindref="member">info</ref>.<ref refid="structShaderParser_1_1TokenInfo_1abd03427e0889aa2f537e8330f237abfc" kindref="member">token</ref><sp/>=<sp/>SHADER_TOKENS::SHTOK_ident;</highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>newToken.<ref refid="structShaderMacro_1_1TokenData_1a7a4ec21b3913cb75abc904d6cb134ff3" kindref="member">info</ref>.<ref refid="structShaderParser_1_1TokenInfo_1a1ef44eeb587bbdae1f8fb647d8f518ef" kindref="member">lexeme</ref>.printf(256,<sp/></highlight><highlight class="stringliteral">&quot;%s%s&quot;</highlight><highlight class="normal">,<sp/>leftReplacement-&gt;<ref refid="structShaderMacro_1_1TokenData_1a7a4ec21b3913cb75abc904d6cb134ff3" kindref="member">info</ref>.<ref refid="structShaderParser_1_1TokenInfo_1a1ef44eeb587bbdae1f8fb647d8f518ef" kindref="member">lexeme</ref>.c_str(),<sp/>rightReplacement-&gt;<ref refid="structShaderMacro_1_1TokenData_1a7a4ec21b3913cb75abc904d6cb134ff3" kindref="member">info</ref>.<ref refid="structShaderParser_1_1TokenInfo_1a1ef44eeb587bbdae1f8fb647d8f518ef" kindref="member">lexeme</ref>.c_str());</highlight></codeline>
<codeline lineno="343"><highlight class="normal"></highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>code.push_back(eastl::move(newToken));</highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>i<sp/>=<sp/>i<sp/>+<sp/>2;</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="348"><highlight class="normal"></highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(macro.<ref refid="structShaderMacro_1acde7bdbdbe11fbedf19685eafb4b8fc6" kindref="member">textParts</ref>[i].paramIndex<sp/>!=<sp/>-1)</highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structShaderMacro_1a328866b4f9109d27bb1efcf0b5a56992" kindref="member">ShaderMacro::TokenList</ref><sp/>&amp;varTokens<sp/>=<sp/>varList[macro.<ref refid="structShaderMacro_1acde7bdbdbe11fbedf19685eafb4b8fc6" kindref="member">textParts</ref>[i].paramIndex];</highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>varTokens.size();<sp/>j++)</highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>override<sp/>place<sp/>info</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>varTokens[j].info.file<sp/>=<sp/>macro.<ref refid="structShaderMacro_1acde7bdbdbe11fbedf19685eafb4b8fc6" kindref="member">textParts</ref>[i].info.file;</highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>varTokens[j].info.line<sp/>=<sp/>macro.<ref refid="structShaderMacro_1acde7bdbdbe11fbedf19685eafb4b8fc6" kindref="member">textParts</ref>[i].info.line;</highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>varTokens[j].info.column<sp/>=<sp/>macro.<ref refid="structShaderMacro_1acde7bdbdbe11fbedf19685eafb4b8fc6" kindref="member">textParts</ref>[i].info.column;</highlight></codeline>
<codeline lineno="358"><highlight class="normal"></highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>code.push_back(varTokens[j]);</highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(macro.<ref refid="structShaderMacro_1acde7bdbdbe11fbedf19685eafb4b8fc6" kindref="member">textParts</ref>[i].info.token<sp/>==<sp/>SHADER_TOKENS::SHTOK_hlsl_text)</highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>replace<sp/>macro<sp/>parameters<sp/>within<sp/>hlsl</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structShaderMacro_1_1TokenData" kindref="compound">ShaderMacro::TokenData</ref><sp/>token;</highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>replaced<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>vi<sp/>=<sp/>0;<sp/>vi<sp/>&lt;<sp/>macro.<ref refid="structShaderMacro_1a2e0bb488f52cd60a908e326c4cf353c6" kindref="member">variables</ref>.size();<sp/>vi++)</highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*start<sp/>=<sp/>replaced<sp/>?<sp/>token.<ref refid="structShaderMacro_1_1TokenData_1a7a4ec21b3913cb75abc904d6cb134ff3" kindref="member">info</ref>.<ref refid="structShaderParser_1_1TokenInfo_1a1ef44eeb587bbdae1f8fb647d8f518ef" kindref="member">lexeme</ref>.str()<sp/>:<sp/>macro.<ref refid="structShaderMacro_1acde7bdbdbe11fbedf19685eafb4b8fc6" kindref="member">textParts</ref>[i].info.lexeme.str();</highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*gofrom<sp/>=<sp/>start;</highlight></codeline>
<codeline lineno="373"><highlight class="normal"></highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>String<sp/>newtext;</highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>found<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;;)</highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*replaceAt<sp/>=<sp/>strstr(gofrom,<sp/>macro.<ref refid="structShaderMacro_1a2e0bb488f52cd60a908e326c4cf353c6" kindref="member">variables</ref>[vi].str());</highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!replaceAt)</highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(found)</highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>newtext.aprintf(256,<sp/></highlight><highlight class="stringliteral">&quot;%s&quot;</highlight><highlight class="normal">,<sp/>start);</highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>token.<ref refid="structShaderMacro_1_1TokenData_1a7a4ec21b3913cb75abc904d6cb134ff3" kindref="member">info</ref>.<ref refid="structShaderParser_1_1TokenInfo_1a657464dbaabd0bed7acbed914f51a7db" kindref="member">file</ref><sp/>=<sp/>macro.<ref refid="structShaderMacro_1acde7bdbdbe11fbedf19685eafb4b8fc6" kindref="member">textParts</ref>[i].info.file;</highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>token.<ref refid="structShaderMacro_1_1TokenData_1a7a4ec21b3913cb75abc904d6cb134ff3" kindref="member">info</ref>.<ref refid="structShaderParser_1_1TokenInfo_1a21500ff2d7a5ae4c1b933d92bac2b5ca" kindref="member">line</ref><sp/>=<sp/>macro.<ref refid="structShaderMacro_1acde7bdbdbe11fbedf19685eafb4b8fc6" kindref="member">textParts</ref>[i].info.line;</highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>token.<ref refid="structShaderMacro_1_1TokenData_1a7a4ec21b3913cb75abc904d6cb134ff3" kindref="member">info</ref>.<ref refid="structShaderParser_1_1TokenInfo_1ad6ad16601acddc4e7835b186fa09190a" kindref="member">column</ref><sp/>=<sp/>macro.<ref refid="structShaderMacro_1acde7bdbdbe11fbedf19685eafb4b8fc6" kindref="member">textParts</ref>[i].info.column;</highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>token.<ref refid="structShaderMacro_1_1TokenData_1a7a4ec21b3913cb75abc904d6cb134ff3" kindref="member">info</ref>.<ref refid="structShaderParser_1_1TokenInfo_1a1ef44eeb587bbdae1f8fb647d8f518ef" kindref="member">lexeme</ref><sp/>=<sp/>newtext;</highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>token.<ref refid="structShaderMacro_1_1TokenData_1a7a4ec21b3913cb75abc904d6cb134ff3" kindref="member">info</ref>.<ref refid="structShaderParser_1_1TokenInfo_1abd03427e0889aa2f537e8330f237abfc" kindref="member">token</ref><sp/>=<sp/>macro.<ref refid="structShaderMacro_1acde7bdbdbe11fbedf19685eafb4b8fc6" kindref="member">textParts</ref>[i].info.token;</highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>token.<ref refid="structShaderMacro_1_1TokenData_1a7a4ec21b3913cb75abc904d6cb134ff3" kindref="member">info</ref>.<ref refid="structShaderParser_1_1TokenInfo_1a0787097a6cb11ce6356e20d080e56318" kindref="member">isMacro</ref><sp/>=<sp/>macro.<ref refid="structShaderMacro_1acde7bdbdbe11fbedf19685eafb4b8fc6" kindref="member">textParts</ref>[i].info.isMacro;</highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>replaced<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>varLength<sp/>=<sp/>macro.<ref refid="structShaderMacro_1a2e0bb488f52cd60a908e326c4cf353c6" kindref="member">variables</ref>[vi].length();</highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(replaceAt<sp/>&gt;<sp/>start)</highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(isalpha(replaceAt[-1])<sp/>||<sp/>replaceAt[-1]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;#&apos;</highlight><highlight class="normal"><sp/>||<sp/>replaceAt[-1]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;_&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gofrom<sp/>=<sp/>replaceAt<sp/>+<sp/>varLength;</highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="fast__isalnum_8h_1acb70dcd616ef53f9a615d4ca7bcabf83" kindref="member">fast_isalnum_or_</ref>(replaceAt[varLength]))</highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gofrom<sp/>=<sp/>replaceAt<sp/>+<sp/>varLength<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>found<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>replaceAt[0]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>newtext.aprintf(256,<sp/></highlight><highlight class="stringliteral">&quot;%s&quot;</highlight><highlight class="normal">,<sp/>start);</highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>newtext.insert(newtext.size()<sp/>-<sp/>1,<sp/>varStrings[vi].str(),<sp/>varStrings[vi].length());</highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>replaceAt[0]<sp/>=<sp/>macro.<ref refid="structShaderMacro_1a2e0bb488f52cd60a908e326c4cf353c6" kindref="member">variables</ref>[vi].str()[0];</highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gofrom<sp/>=<sp/>start<sp/>=<sp/>replaceAt<sp/>+<sp/>varLength;</highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(replaced)</highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>code.push_back(token);</highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>code.push_back(macro.<ref refid="structShaderMacro_1acde7bdbdbe11fbedf19685eafb4b8fc6" kindref="member">textParts</ref>[i]);</highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>code.push_back(macro.<ref refid="structShaderMacro_1acde7bdbdbe11fbedf19685eafb4b8fc6" kindref="member">textParts</ref>[i]);</highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="427"><highlight class="normal"></highlight></codeline>
<codeline lineno="428"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(DEBUG_SHADER_MACROS)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/>String<sp/>outs(</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>code.size();<sp/>i++)</highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/><sp/><sp/>outs<sp/>+=<sp/></highlight><highlight class="stringliteral">&quot;|&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/><sp/><sp/>outs<sp/>+=<sp/>code[i].info.lexeme;</highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="435"><highlight class="normal"></highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/><ref refid="shMacro_8cpp_1a53b7d4ef6b5cc76b0bce2fd6fe5733ed" kindref="member">DBGLOG</ref>(</highlight><highlight class="stringliteral">&quot;code<sp/>generated:\n-----------------\n%s\n-----------------&quot;</highlight><highlight class="normal">,<sp/>outs.str());</highlight></codeline>
<codeline lineno="437"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="438"><highlight class="normal"></highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="440"><highlight class="normal">}</highlight></codeline>
<codeline lineno="441"><highlight class="normal"></highlight></codeline>
<codeline lineno="442"><highlight class="normal"></highlight><highlight class="comment">//<sp/>parse<sp/>new<sp/>macro<sp/>definition<sp/>&amp;<sp/>add<sp/>new<sp/>macros;<sp/>return<sp/>false<sp/>if<sp/>failed</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="443"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classShaderMacroManager_1a99f538ae10fd51eae66fb2d3470ee4bb" kindref="member">ShaderMacroManager::parseDefinition</ref>(<ref refid="classLexer" kindref="compound">Lexer</ref><sp/>&amp;lexer,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>optional)</highlight></codeline>
<codeline lineno="444"><highlight class="normal">{</highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/>eastl::unique_ptr&lt;ShaderMacro&gt;<sp/>macro<sp/>=<sp/>eastl::make_unique&lt;ShaderMacro&gt;();</highlight></codeline>
<codeline lineno="446"><highlight class="normal"></highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!parseMacroDefinition(lexer,<sp/>*macro))</highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="449"><highlight class="normal"></highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>macroNid<sp/>=<sp/>objNameMap.addNameId(macro-&gt;getName());</highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(macroNid<sp/>&lt;<sp/>objList.size())</highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(optional)</highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="455"><highlight class="normal"></highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/><sp/><sp/>eastl::string<sp/>message(eastl::string::CtorSprintf{},<sp/></highlight><highlight class="stringliteral">&quot;macro<sp/>&apos;%s&apos;<sp/>already<sp/>declared<sp/>in<sp/>&quot;</highlight><highlight class="normal">,<sp/>macro-&gt;getName().str());</highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/><sp/><sp/>message<sp/>+=<sp/>lexer.<ref refid="classLexer_1ae065a46a94e418ea39223d730939ce3c" kindref="member">get_symbol_location</ref>(macroNid,<sp/>SymbolType::MACRO);</highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/><sp/><sp/>lexer.<ref refid="classLexer_1a7dee3a13188fbcb621f3100297e89ea1" kindref="member">error</ref>(message.c_str());</highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="461"><highlight class="normal"></highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/>G_ASSERT(macroNid<sp/>==<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">(objList.size()));</highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/>objList.push_back(eastl::move(macro));</highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/>BaseParNamespace::Terminal<sp/>curSymbol(lexer.get_cur_file(),<sp/>lexer.get_cur_line(),<sp/>lexer.get_cur_column(),<sp/>lexer.get_cur_file(),</highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/><sp/><sp/>lexer.get_cur_line(),<sp/>lexer.get_cur_column());</highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/>curSymbol.text<sp/>=<sp/>objList.back()-&gt;getName();</highlight></codeline>
<codeline lineno="467"><highlight class="normal"><sp/><sp/>lexer.<ref refid="classLexer_1ab844a140350220e5e04a80336dca9ae8" kindref="member">register_symbol</ref>(macroNid,<sp/>SymbolType::MACRO,<sp/>&amp;curSymbol);</highlight></codeline>
<codeline lineno="468"><highlight class="normal"></highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="470"><highlight class="normal">}</highlight></codeline>
<codeline lineno="471"><highlight class="normal"></highlight></codeline>
<codeline lineno="472"><highlight class="normal"></highlight><highlight class="comment">//<sp/>check<sp/>for<sp/>macros<sp/>&amp;<sp/>parse<sp/>it<sp/>if<sp/>nessesary;<sp/>return<sp/>false<sp/>if<sp/>failed</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="473"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classShaderMacroManager_1a58334851d0aeec425a2a5ba3249d147a" kindref="member">ShaderMacroManager::tryExpandMacro</ref>(<ref refid="classLexer" kindref="compound">Lexer</ref><sp/>&amp;lexer,<sp/><ref refid="structShaderParser_1_1TokenInfo" kindref="compound">ShaderParser::TokenInfo</ref><sp/>&amp;tok)</highlight></codeline>
<codeline lineno="474"><highlight class="normal">{</highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(inMacroDefinition)</highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="477"><highlight class="normal"></highlight></codeline>
<codeline lineno="478"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>check<sp/>for<sp/>identifier</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(tok.<ref refid="structShaderParser_1_1TokenInfo_1abd03427e0889aa2f537e8330f237abfc" kindref="member">token</ref><sp/>!=<sp/>SHADER_TOKENS::SHTOK_ident)</highlight></codeline>
<codeline lineno="480"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>index<sp/>=<sp/>findMacro(tok.<ref refid="structShaderParser_1_1TokenInfo_1a1ef44eeb587bbdae1f8fb647d8f518ef" kindref="member">lexeme</ref>);</highlight></codeline>
<codeline lineno="482"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(index<sp/>&lt;<sp/>0)</highlight></codeline>
<codeline lineno="483"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="484"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="485"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="486"><highlight class="normal"></highlight></codeline>
<codeline lineno="487"><highlight class="normal"><sp/><sp/>tok.<ref refid="structShaderParser_1_1TokenInfo_1abd03427e0889aa2f537e8330f237abfc" kindref="member">token</ref><sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="488"><highlight class="normal"><sp/><sp/><ref refid="structShaderMacro" kindref="compound">ShaderMacro</ref><sp/>*macro<sp/>=<sp/>objList[index].get();</highlight></codeline>
<codeline lineno="489"><highlight class="normal"></highlight></codeline>
<codeline lineno="490"><highlight class="normal"><sp/><sp/><ref refid="structShaderMacro_1a328866b4f9109d27bb1efcf0b5a56992" kindref="member">ShaderMacro::TokenList</ref><sp/>code(tmpmem);</highlight></codeline>
<codeline lineno="491"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!expand_macro(lexer,<sp/>code,<sp/>*macro,<sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">))</highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="493"><highlight class="normal"></highlight></codeline>
<codeline lineno="494"><highlight class="normal"></highlight></codeline>
<codeline lineno="495"><highlight class="normal"><sp/><sp/>codeStack.push_back(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>MacroCode(macro,<sp/>code));</highlight></codeline>
<codeline lineno="496"><highlight class="normal"><sp/><sp/>codeStack.back()-&gt;caller_file<sp/>=<sp/>tok.<ref refid="structShaderParser_1_1TokenInfo_1a657464dbaabd0bed7acbed914f51a7db" kindref="member">file</ref>;</highlight></codeline>
<codeline lineno="497"><highlight class="normal"><sp/><sp/>codeStack.back()-&gt;caller_line<sp/>=<sp/>tok.<ref refid="structShaderParser_1_1TokenInfo_1a21500ff2d7a5ae4c1b933d92bac2b5ca" kindref="member">line</ref>;</highlight></codeline>
<codeline lineno="498"><highlight class="normal">}</highlight></codeline>
<codeline lineno="499"><highlight class="normal"></highlight></codeline>
<codeline lineno="500"><highlight class="normal"></highlight></codeline>
<codeline lineno="501"><highlight class="normal"></highlight><highlight class="comment">//<sp/>find<sp/>macro<sp/>by<sp/>it&apos;s<sp/>name</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="502"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ShaderMacroManager::findMacro(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*name)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="503"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="504"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(DAGOR_UNLIKELY(!name<sp/>||<sp/>!*name))</highlight></codeline>
<codeline lineno="505"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="506"><highlight class="normal"></highlight></codeline>
<codeline lineno="507"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>objNameMap.getNameId(name);</highlight></codeline>
<codeline lineno="508"><highlight class="normal">}</highlight></codeline>
<codeline lineno="509"><highlight class="normal"></highlight></codeline>
<codeline lineno="510"><highlight class="normal"></highlight><highlight class="comment">//<sp/>return<sp/>macro<sp/>description<sp/>(name,<sp/>file,<sp/>line,<sp/>column)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="511"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>String<sp/>&amp;<ref refid="classShaderMacroManager_1af009ed17c15add625be52ca0bc1e77f4" kindref="member">ShaderMacroManager::getMacroDesc</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*name)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="512"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="513"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>index<sp/>=<sp/>findMacro(name);</highlight></codeline>
<codeline lineno="514"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!tabutils::isCorrectIndex(objList,<sp/>index))</highlight></codeline>
<codeline lineno="515"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="516"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>String<sp/><ref refid="shaderBytecodeCache_8h_1a6718db94551d267a6848c7a6ecaa9697aba2b45bdc11e2a4a6e86aab2ac693cbb" kindref="member">EMPTY</ref>(</highlight><highlight class="stringliteral">&quot;&lt;unregistered<sp/>macro&gt;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="517"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="shaderBytecodeCache_8h_1a6718db94551d267a6848c7a6ecaa9697aba2b45bdc11e2a4a6e86aab2ac693cbb" kindref="member">EMPTY</ref>;</highlight></codeline>
<codeline lineno="518"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="519"><highlight class="normal"></highlight></codeline>
<codeline lineno="520"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>objList[index]-&gt;getDesc();</highlight></codeline>
<codeline lineno="521"><highlight class="normal">}</highlight></codeline>
<codeline lineno="522"><highlight class="normal"></highlight></codeline>
<codeline lineno="523"><highlight class="normal"></highlight><highlight class="comment">//<sp/>return<sp/>next<sp/>token<sp/>or<sp/>false,<sp/>if<sp/>finished</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="524"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classShaderMacroManager_1a46de780ac1eafcd0e9c25b88748fb585" kindref="member">ShaderMacroManager::getToken</ref>(<ref refid="structShaderParser_1_1TokenInfo" kindref="compound">ShaderParser::TokenInfo</ref><sp/>&amp;out_info)</highlight></codeline>
<codeline lineno="525"><highlight class="normal">{</highlight></codeline>
<codeline lineno="526"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(codeStack.size())</highlight></codeline>
<codeline lineno="527"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="528"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(codeStack.size())</highlight></codeline>
<codeline lineno="529"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="530"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>MacroCode<sp/>*code<sp/>=<sp/>codeStack.back();</highlight></codeline>
<codeline lineno="531"><highlight class="normal"></highlight></codeline>
<codeline lineno="532"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(code-&gt;getToken(out_info))</highlight></codeline>
<codeline lineno="533"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="534"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>out_info.<ref refid="structShaderParser_1_1TokenInfo_1a5c4f0a3b18affc2ddb1474579ce8d8cc" kindref="member">macroCallStack</ref>.clear();</highlight></codeline>
<codeline lineno="535"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>*c<sp/>:<sp/>codeStack)</highlight></codeline>
<codeline lineno="536"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="537"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>out_info.<ref refid="structShaderParser_1_1TokenInfo_1a5c4f0a3b18affc2ddb1474579ce8d8cc" kindref="member">macroCallStack</ref>.emplace_back();</highlight></codeline>
<codeline lineno="538"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>out_info.<ref refid="structShaderParser_1_1TokenInfo_1a5c4f0a3b18affc2ddb1474579ce8d8cc" kindref="member">macroCallStack</ref>.back().name<sp/>=<sp/>c-&gt;macro-&gt;getName().c_str();</highlight></codeline>
<codeline lineno="539"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>out_info.<ref refid="structShaderParser_1_1TokenInfo_1a5c4f0a3b18affc2ddb1474579ce8d8cc" kindref="member">macroCallStack</ref>.back().file<sp/>=<sp/>c-&gt;caller_file;</highlight></codeline>
<codeline lineno="540"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>out_info.<ref refid="structShaderParser_1_1TokenInfo_1a5c4f0a3b18affc2ddb1474579ce8d8cc" kindref="member">macroCallStack</ref>.back().line<sp/>=<sp/>c-&gt;caller_line;</highlight></codeline>
<codeline lineno="541"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="542"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="543"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="544"><highlight class="normal"></highlight></codeline>
<codeline lineno="545"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>code;</highlight></codeline>
<codeline lineno="546"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>codeStack.pop_back();</highlight></codeline>
<codeline lineno="547"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="548"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="549"><highlight class="normal"></highlight></codeline>
<codeline lineno="550"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="551"><highlight class="normal">}</highlight></codeline>
<codeline lineno="552"><highlight class="normal"></highlight></codeline>
<codeline lineno="553"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>String<sp/>&amp;<ref refid="classShaderMacroManager_1af28da1b0c28648241c8dc1e05e5ca4d9" kindref="member">ShaderMacroManager::getCurrentMacroDesc</ref>(<ref refid="classLexer" kindref="compound">Lexer</ref><sp/>&amp;lexer)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="554"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="555"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!codeStack.size())</highlight></codeline>
<codeline lineno="556"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="557"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>String<sp/><ref refid="shaderBytecodeCache_8h_1a6718db94551d267a6848c7a6ecaa9697aba2b45bdc11e2a4a6e86aab2ac693cbb" kindref="member">EMPTY</ref>(</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="558"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="shaderBytecodeCache_8h_1a6718db94551d267a6848c7a6ecaa9697aba2b45bdc11e2a4a6e86aab2ac693cbb" kindref="member">EMPTY</ref>;</highlight></codeline>
<codeline lineno="559"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="560"><highlight class="normal"></highlight></codeline>
<codeline lineno="561"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>file,<sp/>line,<sp/>col;</highlight></codeline>
<codeline lineno="562"><highlight class="normal"></highlight></codeline>
<codeline lineno="563"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(codeStack.size()<sp/>&gt;<sp/>1)</highlight></codeline>
<codeline lineno="564"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="565"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>macro<sp/>from<sp/>macro</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="566"><highlight class="normal"><sp/><sp/><sp/><sp/>MacroCode<sp/>*code<sp/>=<sp/>codeStack.back();</highlight></codeline>
<codeline lineno="567"><highlight class="normal"><sp/><sp/><sp/><sp/>G_ASSERT(tabutils::isCorrectIndex(code-&gt;code,<sp/>code-&gt;curToken));</highlight></codeline>
<codeline lineno="568"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structShaderMacro_1_1TokenData" kindref="compound">ShaderMacro::TokenData</ref><sp/>&amp;tok<sp/>=<sp/>code-&gt;code[code-&gt;curToken];</highlight></codeline>
<codeline lineno="569"><highlight class="normal"><sp/><sp/><sp/><sp/>file<sp/>=<sp/>tok.<ref refid="structShaderMacro_1_1TokenData_1a7a4ec21b3913cb75abc904d6cb134ff3" kindref="member">info</ref>.<ref refid="structShaderParser_1_1TokenInfo_1a657464dbaabd0bed7acbed914f51a7db" kindref="member">file</ref>;</highlight></codeline>
<codeline lineno="570"><highlight class="normal"><sp/><sp/><sp/><sp/>line<sp/>=<sp/>tok.<ref refid="structShaderMacro_1_1TokenData_1a7a4ec21b3913cb75abc904d6cb134ff3" kindref="member">info</ref>.<ref refid="structShaderParser_1_1TokenInfo_1a21500ff2d7a5ae4c1b933d92bac2b5ca" kindref="member">line</ref>;</highlight></codeline>
<codeline lineno="571"><highlight class="normal"><sp/><sp/><sp/><sp/>col<sp/>=<sp/>tok.<ref refid="structShaderMacro_1_1TokenData_1a7a4ec21b3913cb75abc904d6cb134ff3" kindref="member">info</ref>.<ref refid="structShaderParser_1_1TokenInfo_1ad6ad16601acddc4e7835b186fa09190a" kindref="member">column</ref>;</highlight></codeline>
<codeline lineno="572"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="573"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="574"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="575"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>macrlexom<sp/>normal<sp/>file</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="576"><highlight class="normal"><sp/><sp/><sp/><sp/>file<sp/>=<sp/>lexer.get_cur_file();</highlight></codeline>
<codeline lineno="577"><highlight class="normal"><sp/><sp/><sp/><sp/>line<sp/>=<sp/>lexer.get_cur_line();</highlight></codeline>
<codeline lineno="578"><highlight class="normal"><sp/><sp/><sp/><sp/>col<sp/>=<sp/>lexer.get_cur_column();</highlight></codeline>
<codeline lineno="579"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="580"><highlight class="normal"></highlight></codeline>
<codeline lineno="581"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>String<sp/>fmtStr;</highlight></codeline>
<codeline lineno="582"><highlight class="normal"><sp/><sp/>fmtStr.printf(512,<sp/>(codeStack.back())-&gt;macro-&gt;getDesc(),<sp/>lexer.__input_stream()-&gt;<ref refid="classLexer_1ab26ad89867e01b9d9aecd26d1c74776c" kindref="member">get_filename</ref>(file),<sp/>line,<sp/>col);</highlight></codeline>
<codeline lineno="583"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>fmtStr;</highlight></codeline>
<codeline lineno="584"><highlight class="normal">}</highlight></codeline>
<codeline lineno="585"><highlight class="normal"></highlight></codeline>
<codeline lineno="586"><highlight class="normal"></highlight></codeline>
<codeline lineno="587"><highlight class="normal">ShaderMacroManager::MacroCode::MacroCode(<ref refid="structShaderMacro" kindref="compound">ShaderMacro</ref><sp/>*m,<sp/><ref refid="structShaderMacro_1a328866b4f9109d27bb1efcf0b5a56992" kindref="member">ShaderMacro::TokenList</ref><sp/>&amp;init_code)<sp/>:<sp/>macro(m),<sp/>code(init_code),<sp/>curToken(-1)</highlight></codeline>
<codeline lineno="588"><highlight class="normal">{}</highlight></codeline>
<codeline lineno="589"><highlight class="normal"></highlight></codeline>
<codeline lineno="590"><highlight class="normal"></highlight><highlight class="comment">//<sp/>return<sp/>next<sp/>token<sp/>or<sp/>false,<sp/>if<sp/>finished</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="591"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>ShaderMacroManager::MacroCode::getToken(<ref refid="structShaderParser_1_1TokenInfo" kindref="compound">ShaderParser::TokenInfo</ref><sp/>&amp;out_info)</highlight></codeline>
<codeline lineno="592"><highlight class="normal">{</highlight></codeline>
<codeline lineno="593"><highlight class="normal"><sp/><sp/>curToken++;</highlight></codeline>
<codeline lineno="594"><highlight class="normal"></highlight></codeline>
<codeline lineno="595"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!tabutils::isCorrectIndex(code,<sp/>curToken))</highlight></codeline>
<codeline lineno="596"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="597"><highlight class="normal"><sp/><sp/>out_info<sp/>=<sp/>code[curToken].info;</highlight></codeline>
<codeline lineno="598"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="599"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="shMacro.cpp"/>
  </compounddef>
</doxygen>
