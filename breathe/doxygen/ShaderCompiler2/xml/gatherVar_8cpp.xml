<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.7" xml:lang="en-US">
  <compounddef id="gatherVar_8cpp" kind="file" language="C++">
    <compoundname>gatherVar.cpp</compoundname>
    <includes refid="gatherVar_8h" local="yes">gatherVar.h</includes>
    <incdepgraph>
      <node id="1">
        <label>gatherVar.cpp</label>
        <link refid="gatherVar_8cpp"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>gatherVar.h</label>
        <link refid="gatherVar_8h"/>
      </node>
    </incdepgraph>
      <sectiondef kind="func">
      <memberdef kind="function" id="gatherVar_8cpp_1ae0471c212362897ee44c5a9789206d3c" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void validate_local_debug_mode_assume</definition>
        <argsstring>(const auto &amp;stat, Parser &amp;parser)</argsstring>
        <name>validate_local_debug_mode_assume</name>
        <param>
          <type>const auto &amp;</type>
          <declname>stat</declname>
        </param>
        <param>
          <type><ref refid="structParser" kindref="compound">Parser</ref> &amp;</type>
          <declname>parser</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="gatherVar.cpp" line="32" column="13" bodyfile="gatherVar.cpp" bodystart="32" bodyend="40"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/>Copyright<sp/>(C)<sp/>Gaijin<sp/>Games<sp/>KFT.<sp/><sp/>All<sp/>rights<sp/>reserved.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="gatherVar_8h" kindref="compound">gatherVar.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="shCompContext_8h" kindref="compound">shCompContext.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="hwSemantic_8h" kindref="compound">hwSemantic.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="shaderSemantic_8h" kindref="compound">shaderSemantic.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="semUtils_8h" kindref="compound">semUtils.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="shErrorReporting_8h" kindref="compound">shErrorReporting.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="globVarSem_8h" kindref="compound">globVarSem.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="globVar_8h" kindref="compound">globVar.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="globalConfig_8h" kindref="compound">globalConfig.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="boolVar_8h" kindref="compound">boolVar.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="varMap_8h" kindref="compound">varMap.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;debug/dag_debug.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="assemblyShader_8h" kindref="compound">assemblyShader.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="shLog_8h" kindref="compound">shLog.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="shExprParser_8h" kindref="compound">shExprParser.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="shCompiler_8h" kindref="compound">shCompiler.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="codeBlocks_8h" kindref="compound">codeBlocks.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;ioSys/dag_dataBlock.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;ioSys/dag_fileIo.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;osApiWrappers/dag_direct.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="hash_8h" kindref="compound">hash.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>_CROSS_TARGET_DX12</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;drv/shadersMetaData/dxil/compiled_shader_header.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal"><ref refid="namespaceShaderParser" kindref="compound">ShaderParser</ref>;</highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>validate_local_debug_mode_assume(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;stat,<sp/><ref refid="structParser" kindref="compound">Parser</ref><sp/>&amp;parser)</highlight></codeline>
<codeline lineno="33"><highlight class="normal">{</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strcmp(stat.interval-&gt;text,<sp/></highlight><highlight class="stringliteral">&quot;debug_mode_enabled&quot;</highlight><highlight class="normal">)<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="shErrorReporting_8h_1a43ca645d64998458bbb085183e295420" kindref="member">report_warning</ref>(parser,<sp/>*stat.interval,</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Assuming<sp/>the<sp/>debug_mode_enabled<sp/>does<sp/>not<sp/>enable<sp/>shader<sp/>asserts<sp/>and<sp/>is<sp/>not<sp/>advised.<sp/>To<sp/>enable<sp/>debug<sp/>mode<sp/>on<sp/>a<sp/>per-file<sp/>basis,<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;put<sp/>the<sp/>assume<sp/>at<sp/>global<sp/>scope.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="40"><highlight class="normal">}</highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="comment">/*********************************</highlight></codeline>
<codeline lineno="43"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="44"><highlight class="comment"><sp/>*<sp/>class<sp/>GatherVarShaderEvalCB</highlight></codeline>
<codeline lineno="45"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="46"><highlight class="comment"><sp/>*********************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"><ref refid="classShaderParser_1_1GatherVarShaderEvalCB_1ad36b468cf0d685e58a5441f55a97dad4" kindref="member">GatherVarShaderEvalCB::GatherVarShaderEvalCB</ref>(<ref refid="classshc_1_1ShaderContext" kindref="compound">shc::ShaderContext</ref><sp/>&amp;ctx)<sp/>:</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/>ctx{ctx},<sp/>types{ctx.typeTables()},<sp/>parser{ctx.tgtCtx().sourceParseState().parser},<sp/>dynStack(tmpmem),<sp/>dynCount(0),<sp/>hasDynFlag(false)</highlight></codeline>
<codeline lineno="49"><highlight class="normal">{}</highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classShaderParser_1_1GatherVarShaderEvalCB_1ad62259329d3556617ec48ad8371e04ca" kindref="member">GatherVarShaderEvalCB::eval_channel_decl</ref>(channel_decl<sp/>&amp;s,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>str_id)</highlight></codeline>
<codeline lineno="52"><highlight class="normal">{</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>channels<sp/>must<sp/>be<sp/>independed<sp/>by<sp/>dynamic<sp/>variables</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(dynCount<sp/>&gt;<sp/>0)</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="shErrorReporting_8h_1a634f6d6ca9a9f22c5eea4c9b8e20ef31" kindref="member">report_error</ref>(parser,<sp/>s.type-&gt;type,<sp/></highlight><highlight class="stringliteral">&quot;cannot<sp/>declare<sp/>dynamic-depended<sp/>channels<sp/>(check<sp/>&apos;if&apos;<sp/>condition(s)<sp/>for<sp/>dynamic<sp/>variants)!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="56"><highlight class="normal">}</highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight><highlight class="comment">//<sp/>clang-format<sp/>off</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classShaderParser_1_1GatherVarShaderEvalCB_1a7b6a60d97ec16dee92d2797e51eb8b37" kindref="member">GatherVarShaderEvalCB::eval_assume_stat</ref>(assume_stat<sp/>&amp;s)</highlight></codeline>
<codeline lineno="60"><highlight class="normal">{</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/>validate_local_debug_mode_assume(s,<sp/>parser);</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><ref refid="namespaceShaderParser_1a902443a4c7749a22da19ef6406a3ef37" kindref="member">add_shader_assume</ref>(s,<sp/>parser,<sp/>ctx);</highlight></codeline>
<codeline lineno="63"><highlight class="normal">}</highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classShaderParser_1_1GatherVarShaderEvalCB_1ac6f560c8041dc8f7cdc2bc64fdc8e3e7" kindref="member">GatherVarShaderEvalCB::eval_assume_if_not_assumed_stat</ref>(assume_if_not_assumed_stat<sp/>&amp;s)</highlight></codeline>
<codeline lineno="66"><highlight class="normal">{</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/>validate_local_debug_mode_assume(s,<sp/>parser);</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><ref refid="namespaceShaderParser_1a746c1d89a06e7cfcf4dcf303deace014" kindref="member">add_shader_assume_if_not_assumed</ref>(s,<sp/>parser,<sp/>ctx);</highlight></codeline>
<codeline lineno="69"><highlight class="normal">}</highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight><highlight class="comment">//<sp/>clang-format<sp/>on</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classShaderParser_1_1GatherVarShaderEvalCB_1a15bc1479f78a3e24c164b6859e8486e8" kindref="member">GatherVarShaderEvalCB::eval_bool_decl</ref>(bool_decl<sp/>&amp;decl)</highlight></codeline>
<codeline lineno="73"><highlight class="normal">{</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/>ctx.<ref refid="classshc_1_1ShaderContext_1a68d901ec93151761c921ba6af3f21efb" kindref="member">localBoolVars</ref>().<ref refid="classBoolVarTable_1a64619e7effcda65e6b155867dc3d45a4" kindref="member">add</ref>(decl,<sp/>parser,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/>String<sp/>hlsl_bool_var(0,<sp/></highlight><highlight class="stringliteral">&quot;##bool<sp/>%s\n&quot;</highlight><highlight class="normal">,<sp/>decl.name-&gt;text);</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/>ctx.<ref refid="classshc_1_1ShaderContext_1a2a5bfa488755ef94e3ccc73b650190d2" kindref="member">localHlslSrc</ref>().forEach([&amp;](String<sp/>&amp;src)<sp/>{<sp/>src.append(hlsl_bool_var);<sp/>});</highlight></codeline>
<codeline lineno="78"><highlight class="normal">}</highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classShaderParser_1_1GatherVarShaderEvalCB_1a67aa46a40ce6ba672d3fe200965be29a" kindref="member">GatherVarShaderEvalCB::decl_bool_alias</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*name,<sp/>bool_expr<sp/>&amp;expr)</highlight></codeline>
<codeline lineno="81"><highlight class="normal">{</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/>bool_decl<sp/>decl;</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/>SHTOK_ident<sp/>ident;</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/>ident.file_start<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/>ident.line_start<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/>ident.col_start<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/>decl.name<sp/>=<sp/>&amp;ident;</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/>decl.name-&gt;text<sp/>=<sp/>name;</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/>decl.expr<sp/>=<sp/>&amp;expr;</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/>ctx.<ref refid="classshc_1_1ShaderContext_1a68d901ec93151761c921ba6af3f21efb" kindref="member">localBoolVars</ref>().<ref refid="classBoolVarTable_1a64619e7effcda65e6b155867dc3d45a4" kindref="member">add</ref>(decl,<sp/>parser,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="91"><highlight class="normal">}</highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classShaderParser_1_1GatherVarShaderEvalCB_1afe810aefad98a1151d59ffb1fd09dc2b" kindref="member">GatherVarShaderEvalCB::eval_static</ref>(static_var_decl<sp/>&amp;s)</highlight></codeline>
<codeline lineno="94"><highlight class="normal">{</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>variables<sp/>must<sp/>be<sp/>independed<sp/>by<sp/>dynamic<sp/>variants</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(dynCount<sp/>&gt;<sp/>0)</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="shErrorReporting_8h_1a634f6d6ca9a9f22c5eea4c9b8e20ef31" kindref="member">report_error</ref>(parser,<sp/>s.name,<sp/></highlight><highlight class="stringliteral">&quot;cannot<sp/>declare<sp/>dynamic-depended<sp/>variables<sp/>(check<sp/>&apos;if&apos;<sp/>condition(s)<sp/>for<sp/>dynamic<sp/>variants)!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>register<sp/>static<sp/>variable<sp/>name<sp/>for<sp/>future<sp/>use</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(s.mode<sp/>&amp;&amp;<sp/>s.mode-&gt;mode-&gt;num<sp/>==<sp/>SHADER_TOKENS::SHTOK_dynamic)</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/>dynamicVars.addNameId(s.name-&gt;text);</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/>staticVars.addNameId(s.name-&gt;text);</highlight></codeline>
<codeline lineno="104"><highlight class="normal">}</highlight></codeline>
<codeline lineno="105"><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classShaderParser_1_1GatherVarShaderEvalCB_1af91fc4e0d22e1566e511b3d594b15b9b" kindref="member">GatherVarShaderEvalCB::eval_interval_decl</ref>(interval<sp/>&amp;interv)</highlight></codeline>
<codeline lineno="108"><highlight class="normal">{</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>intervals<sp/>must<sp/>be<sp/>independed<sp/>by<sp/>dynamic<sp/>variants</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(dynCount<sp/>&gt;<sp/>0)</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="shErrorReporting_8h_1a634f6d6ca9a9f22c5eea4c9b8e20ef31" kindref="member">report_error</ref>(parser,<sp/>interv.name,<sp/></highlight><highlight class="stringliteral">&quot;cannot<sp/>declare<sp/>dynamic-depended<sp/>intervals<sp/>(check<sp/>&apos;if&apos;<sp/>condition(s)<sp/>for<sp/>dynamic<sp/>variants)!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="112"><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>check<sp/>for<sp/>global</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><ref refid="namespaceShaderVariant_1a4cc81bf315e35fb912c2033de934e6cf" kindref="member">ShaderVariant::VarType</ref><sp/>type<sp/>=<sp/><ref refid="namespaceShaderVariant_1a4cc81bf315e35fb912c2033de934e6cfa9315b7bd780786690166d34c4a9841ac" kindref="member">ShaderVariant::VARTYPE_INTERVAL</ref>;</highlight></codeline>
<codeline lineno="115"><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ctx.<ref refid="classshc_1_1ShaderContext_1a8d1967ec973d0ffe1c0ddb78cec30dce" kindref="member">tgtCtx</ref>().<ref refid="classshc_1_1TargetContext_1a77a4453b2a7ddead5199305bd6205fa1" kindref="member">globVars</ref>().<ref refid="classShaderGlobal_1_1VarTable_1a7ff46e733eb4c886cfa07c3c365910a2" kindref="member">getVarInternalIndex</ref>(ctx.<ref refid="classshc_1_1ShaderContext_1a8d1967ec973d0ffe1c0ddb78cec30dce" kindref="member">tgtCtx</ref>().<ref refid="classshc_1_1TargetContext_1a64e71598c4751d165675e9e9f1f70b8e" kindref="member">varNameMap</ref>().<ref refid="classVarNameMap_1a8a6529882641e8945737456483807f7b" kindref="member">getVarId</ref>(interv.name-&gt;text))<sp/>!=<sp/>-1)</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/>type<sp/>=<sp/><ref refid="namespaceShaderVariant_1a4cc81bf315e35fb912c2033de934e6cfac22d8297449dcba859360b19c391cd08" kindref="member">ShaderVariant::VARTYPE_GL_OVERRIDE_INTERVAL</ref>;</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="120"><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><ref refid="namespaceShaderParser_1afc2603df5d94963150dadf1c94c46be6" kindref="member">add_interval</ref>(ctx.<ref refid="classshc_1_1ShaderContext_1a209dd192d866a02b8102a8858b7e5b8d" kindref="member">intervals</ref>(),<sp/>interv,<sp/>type,<sp/>parser,<sp/>ctx.<ref refid="classshc_1_1ShaderContext_1a8d1967ec973d0ffe1c0ddb78cec30dce" kindref="member">tgtCtx</ref>());</highlight></codeline>
<codeline lineno="122"><highlight class="normal">}</highlight></codeline>
<codeline lineno="123"><highlight class="normal"></highlight></codeline>
<codeline lineno="124"><highlight class="normal"><ref refid="classShVarBool" kindref="compound">ShVarBool</ref><sp/>GatherVarShaderEvalCB::addInterval(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*intervalName,<sp/>Terminal<sp/>*terminal,<sp/>bool_value<sp/>*e)</highlight></codeline>
<codeline lineno="125"><highlight class="normal">{</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>try<sp/>to<sp/>find<sp/>registered<sp/>interval</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>intervalName_id<sp/>=<sp/>ctx.<ref refid="classshc_1_1ShaderContext_1a8d1967ec973d0ffe1c0ddb78cec30dce" kindref="member">tgtCtx</ref>().<ref refid="classshc_1_1TargetContext_1ad61d7a132b4b9b57202752394eed414d" kindref="member">intervalNameMap</ref>().<ref refid="classHashStrings_1a2b43444bc74666574cba61624c72d22e" kindref="member">getNameId</ref>(intervalName);</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><ref refid="namespaceShaderVariant_1a576d584c5c88f3e1685c515c843bb30a" kindref="member">ShaderVariant::ExtType</ref><sp/>intervalIndex<sp/>=<sp/>ctx.<ref refid="classshc_1_1ShaderContext_1a209dd192d866a02b8102a8858b7e5b8d" kindref="member">intervals</ref>().<ref refid="classIntervalList_1a9a77d1ff0e92fe7dcab999886e06c533" kindref="member">getIntervalIndex</ref>(intervalName_id);</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classInterval" kindref="compound">Interval</ref><sp/>*interv<sp/>=<sp/>ctx.<ref refid="classshc_1_1ShaderContext_1a209dd192d866a02b8102a8858b7e5b8d" kindref="member">intervals</ref>().<ref refid="classIntervalList_1a1d93fe14234f8e96a7821862145e933e" kindref="member">getInterval</ref>(intervalIndex);</highlight></codeline>
<codeline lineno="130"><highlight class="normal"></highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(intervalIndex<sp/>==<sp/><ref refid="varTypes_8h_1a68274b768c55a5469a7b292041a74fb8a57d75fe5c8b51fa43dc2bb2dd19daf79" kindref="member">INTERVAL_NOT_INIT</ref>)</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/>intervalIndex<sp/>=<sp/>ctx.<ref refid="classshc_1_1ShaderContext_1a8d1967ec973d0ffe1c0ddb78cec30dce" kindref="member">tgtCtx</ref>().<ref refid="classshc_1_1TargetContext_1a77a4453b2a7ddead5199305bd6205fa1" kindref="member">globVars</ref>().<ref refid="classShaderGlobal_1_1VarTable_1ae086b750cd83e12a1f62a310e8792fb1" kindref="member">getIntervalList</ref>().<ref refid="classIntervalList_1a9a77d1ff0e92fe7dcab999886e06c533" kindref="member">getIntervalIndex</ref>(intervalName_id);</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/>interv<sp/>=<sp/>ctx.<ref refid="classshc_1_1ShaderContext_1a8d1967ec973d0ffe1c0ddb78cec30dce" kindref="member">tgtCtx</ref>().<ref refid="classshc_1_1TargetContext_1a77a4453b2a7ddead5199305bd6205fa1" kindref="member">globVars</ref>().<ref refid="classShaderGlobal_1_1VarTable_1ae086b750cd83e12a1f62a310e8792fb1" kindref="member">getIntervalList</ref>().<ref refid="classIntervalList_1a1d93fe14234f8e96a7821862145e933e" kindref="member">getInterval</ref>(intervalIndex);</highlight></codeline>
<codeline lineno="135"><highlight class="normal"></highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(intervalIndex<sp/>==<sp/><ref refid="varTypes_8h_1a68274b768c55a5469a7b292041a74fb8a57d75fe5c8b51fa43dc2bb2dd19daf79" kindref="member">INTERVAL_NOT_INIT</ref>)</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="shErrorReporting_8h_1a634f6d6ca9a9f22c5eea4c9b8e20ef31" kindref="member">report_error</ref>(parser,<sp/>terminal,<sp/></highlight><highlight class="stringliteral">&quot;interval<sp/>%s<sp/>not<sp/>found!&quot;</highlight><highlight class="normal">,<sp/>intervalName);</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classShVarBool" kindref="compound">ShVarBool</ref>(</highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="142"><highlight class="normal"></highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>is_static<sp/>=<sp/>staticVars.getNameId(intervalName)<sp/>!=<sp/>-1;</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>is_dynamic<sp/>=<sp/>dynamicVars.getNameId(intervalName)<sp/>!=<sp/>-1;</highlight></codeline>
<codeline lineno="145"><highlight class="normal"></highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>is_global<sp/>=<sp/>!is_static<sp/>&amp;&amp;<sp/>!is_dynamic;</highlight></codeline>
<codeline lineno="147"><highlight class="normal"></highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>valueMaybe<sp/>=<sp/>ctx.<ref refid="classshc_1_1ShaderContext_1aeeaa07d5b2e79f290df03aa69d7ae312" kindref="member">assumes</ref>().<ref refid="classShaderAssumesTable_1a8279eb5b559bfac980d005b1f9832326" kindref="member">getAssumedVal</ref>(intervalName,<sp/>is_global))</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceShaderVariant_1ac16065f8f13b47639769efb7fbeb0a24" kindref="member">ShaderVariant::ValueType</ref><sp/>valtype<sp/>=<sp/>interv-&gt;<ref refid="classInterval_1a4cd43145fa32ed203df1fb0e521c9b25" kindref="member">normalizeValue</ref>(*valueMaybe);</highlight></codeline>
<codeline lineno="151"><highlight class="normal"></highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!e)</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classShVarBool" kindref="compound">ShVarBool</ref>(</highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="154"><highlight class="normal"></highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classInterval_1a53c464380c323171203ac354d1e5d010" kindref="member">Interval::BooleanExpr</ref><sp/>expr<sp/>=<sp/><ref refid="classInterval_1a53c464380c323171203ac354d1e5d010aad8bdddaa11d62c8b7b24431bfc1a202" kindref="member">Interval::EXPR_NOTINIT</ref>;</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(e-&gt;cmpop-&gt;op-&gt;num)</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>SHADER_TOKENS::SHTOK_eq:<sp/>expr<sp/>=<sp/><ref refid="classInterval_1a53c464380c323171203ac354d1e5d010a253bb907801ba70fe66248b5dc8252d2" kindref="member">Interval::EXPR_EQ</ref>;<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>SHADER_TOKENS::SHTOK_greater:<sp/>expr<sp/>=<sp/><ref refid="classInterval_1a53c464380c323171203ac354d1e5d010a32f9d4bcd17a2e04c7f5e52db06fc571" kindref="member">Interval::EXPR_GREATER</ref>;<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>SHADER_TOKENS::SHTOK_greatereq:<sp/>expr<sp/>=<sp/><ref refid="classInterval_1a53c464380c323171203ac354d1e5d010a1a7ebae6e5f4c3922b23dbaee7893305" kindref="member">Interval::EXPR_GREATER_EQ</ref>;<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>SHADER_TOKENS::SHTOK_smaller:<sp/>expr<sp/>=<sp/><ref refid="classInterval_1a53c464380c323171203ac354d1e5d010a1679d981116dfcb2811aef8a4eb98f7f" kindref="member">Interval::EXPR_SMALLER</ref>;<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>SHADER_TOKENS::SHTOK_smallereq:<sp/>expr<sp/>=<sp/><ref refid="classInterval_1a53c464380c323171203ac354d1e5d010add09b88e878a21790b0de3b85ac485e9" kindref="member">Interval::EXPR_SMALLER_EQ</ref>;<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>SHADER_TOKENS::SHTOK_noteq:<sp/>expr<sp/>=<sp/><ref refid="classInterval_1a53c464380c323171203ac354d1e5d010a2510fff4d417ea82c5cd124e3370c848" kindref="member">Interval::EXPR_NOT_EQ</ref>;<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:<sp/>G_ASSERT(0);</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="166"><highlight class="normal"></highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;dst<sp/>=<sp/>ctx.<ref refid="classshc_1_1ShaderContext_1a247c84f67fcf817a86603f6d810a9ad7" kindref="member">compiledShader</ref>().<ref refid="classShaderClass_1aab73a00a13fd0fb68e6001548b5de6f5" kindref="member">assumedIntervals</ref>.emplace_back();</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/>dst.name<sp/>=<sp/>bindump::string{intervalName};</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/>dst.value<sp/>=<sp/>uint8_t(*valueMaybe);</highlight></codeline>
<codeline lineno="170"><highlight class="normal"></highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/>String<sp/>error_msg;</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>bool_result<sp/>=<sp/>interv-&gt;<ref refid="classInterval_1a8b941226253191579cf19e6166017b49" kindref="member">checkExpression</ref>(valtype,<sp/>expr,<sp/>e-&gt;interval_value-&gt;text,<sp/>error_msg,<sp/>ctx.<ref refid="classshc_1_1ShaderContext_1a8d1967ec973d0ffe1c0ddb78cec30dce" kindref="member">tgtCtx</ref>());</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!error_msg.empty())</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="shErrorReporting_8h_1a634f6d6ca9a9f22c5eea4c9b8e20ef31" kindref="member">report_error</ref>(parser,<sp/>terminal,<sp/>error_msg);</highlight></codeline>
<codeline lineno="175"><highlight class="normal"></highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classShVarBool" kindref="compound">ShVarBool</ref>(bool_result,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="178"><highlight class="normal"></highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!is_static<sp/>&amp;&amp;<sp/>!is_dynamic<sp/>&amp;&amp;<sp/>ctx.<ref refid="classshc_1_1ShaderContext_1a8d1967ec973d0ffe1c0ddb78cec30dce" kindref="member">tgtCtx</ref>().<ref refid="classshc_1_1TargetContext_1a77a4453b2a7ddead5199305bd6205fa1" kindref="member">globVars</ref>().<ref refid="classShaderGlobal_1_1VarTable_1a7ff46e733eb4c886cfa07c3c365910a2" kindref="member">getVarInternalIndex</ref>(ctx.<ref refid="classshc_1_1ShaderContext_1a8d1967ec973d0ffe1c0ddb78cec30dce" kindref="member">tgtCtx</ref>().<ref refid="classshc_1_1TargetContext_1a64e71598c4751d165675e9e9f1f70b8e" kindref="member">varNameMap</ref>().<ref refid="classVarNameMap_1a8a6529882641e8945737456483807f7b" kindref="member">getVarId</ref>(intervalName))<sp/>==<sp/>-1)</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="shErrorReporting_8h_1a634f6d6ca9a9f22c5eea4c9b8e20ef31" kindref="member">report_error</ref>(parser,<sp/>terminal,<sp/></highlight><highlight class="stringliteral">&quot;Non-assumed<sp/>interval<sp/>&apos;%s&apos;<sp/>doesn&apos;t<sp/>have<sp/>a<sp/>corresponding<sp/>var&quot;</highlight><highlight class="normal">,<sp/>intervalName);</highlight></codeline>
<codeline lineno="181"><highlight class="normal"></highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>ok,<sp/>found,<sp/>adding<sp/>variant<sp/>flag</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><ref refid="classShaderVariant_1_1TypeTable" kindref="compound">ShaderVariant::TypeTable</ref><sp/>*lst<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(interv-&gt;<ref refid="classInterval_1a3b99beb415b1139228913988b01b8f98" kindref="member">getVarType</ref>()<sp/>!=<sp/><ref refid="namespaceShaderVariant_1a4cc81bf315e35fb912c2033de934e6cfa9315b7bd780786690166d34c4a9841ac" kindref="member">ShaderVariant::VARTYPE_INTERVAL</ref><sp/>||<sp/>!is_static)</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/>lst<sp/>=<sp/>&amp;types.<ref refid="structshc_1_1TypeTables_1afa230b1d10268a40e3340e4d867f88a9" kindref="member">allDynamicTypes</ref>;</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/>hasDynFlag<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/>lst<sp/>=<sp/>&amp;types.<ref refid="structshc_1_1TypeTables_1acc96568cc401badf5dc667d49749bd59" kindref="member">allStaticTypes</ref>;</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/>lst-&gt;<ref refid="classShaderVariant_1_1TypeTable_1a598e48543decca70198ebc78852b1110" kindref="member">addType</ref>(interv-&gt;<ref refid="classInterval_1a3b99beb415b1139228913988b01b8f98" kindref="member">getVarType</ref>(),<sp/>intervalIndex,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classShVarBool" kindref="compound">ShVarBool</ref>(</highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="195"><highlight class="normal">}</highlight></codeline>
<codeline lineno="196"><highlight class="normal"></highlight></codeline>
<codeline lineno="197"><highlight class="normal"><ref refid="classShVarBool" kindref="compound">ShVarBool</ref><sp/>GatherVarShaderEvalCB::addTextureInterval(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*textureName,<sp/>Terminal<sp/>*terminal,<sp/>bool_value<sp/>&amp;e)</highlight></codeline>
<codeline lineno="198"><highlight class="normal">{</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>try<sp/>to<sp/>find<sp/>registered<sp/>interval</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isGlobal<sp/>=<sp/>ctx.<ref refid="classshc_1_1ShaderContext_1a8d1967ec973d0ffe1c0ddb78cec30dce" kindref="member">tgtCtx</ref>().<ref refid="classshc_1_1TargetContext_1a77a4453b2a7ddead5199305bd6205fa1" kindref="member">globVars</ref>().<ref refid="classShaderGlobal_1_1VarTable_1a7ff46e733eb4c886cfa07c3c365910a2" kindref="member">getVarInternalIndex</ref>(ctx.<ref refid="classshc_1_1ShaderContext_1a8d1967ec973d0ffe1c0ddb78cec30dce" kindref="member">tgtCtx</ref>().<ref refid="classshc_1_1TargetContext_1a64e71598c4751d165675e9e9f1f70b8e" kindref="member">varNameMap</ref>().<ref refid="classVarNameMap_1a8a6529882641e8945737456483807f7b" kindref="member">getVarId</ref>(textureName))<sp/>&gt;=<sp/>0;</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><ref refid="namespaceShaderVariant_1a4cc81bf315e35fb912c2033de934e6cf" kindref="member">ShaderVariant::VarType</ref><sp/>type<sp/>=<sp/>isGlobal<sp/>?<sp/><ref refid="namespaceShaderVariant_1a4cc81bf315e35fb912c2033de934e6cfac22d8297449dcba859360b19c391cd08" kindref="member">ShaderVariant::VARTYPE_GL_OVERRIDE_INTERVAL</ref><sp/>:<sp/><ref refid="namespaceShaderVariant_1a4cc81bf315e35fb912c2033de934e6cfa9315b7bd780786690166d34c4a9841ac" kindref="member">ShaderVariant::VARTYPE_INTERVAL</ref>;</highlight></codeline>
<codeline lineno="202"><highlight class="normal"></highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>textureName_id<sp/>=<sp/>ctx.<ref refid="classshc_1_1ShaderContext_1a8d1967ec973d0ffe1c0ddb78cec30dce" kindref="member">tgtCtx</ref>().<ref refid="classshc_1_1TargetContext_1ad61d7a132b4b9b57202752394eed414d" kindref="member">intervalNameMap</ref>().<ref refid="classHashStrings_1a2b43444bc74666574cba61624c72d22e" kindref="member">getNameId</ref>(textureName);</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>intervalIndex<sp/>=<sp/>ctx.<ref refid="classshc_1_1ShaderContext_1a209dd192d866a02b8102a8858b7e5b8d" kindref="member">intervals</ref>().<ref refid="classIntervalList_1a9a77d1ff0e92fe7dcab999886e06c533" kindref="member">getIntervalIndex</ref>(textureName_id);</highlight></codeline>
<codeline lineno="205"><highlight class="normal"></highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(intervalIndex<sp/>==<sp/><ref refid="varTypes_8h_1a68274b768c55a5469a7b292041a74fb8a57d75fe5c8b51fa43dc2bb2dd19daf79" kindref="member">INTERVAL_NOT_INIT</ref>)</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/>intervalIndex<sp/>=<sp/>ctx.<ref refid="classshc_1_1ShaderContext_1a8d1967ec973d0ffe1c0ddb78cec30dce" kindref="member">tgtCtx</ref>().<ref refid="classshc_1_1TargetContext_1a77a4453b2a7ddead5199305bd6205fa1" kindref="member">globVars</ref>().<ref refid="classShaderGlobal_1_1VarTable_1ae086b750cd83e12a1f62a310e8792fb1" kindref="member">getIntervalList</ref>().<ref refid="classIntervalList_1a9a77d1ff0e92fe7dcab999886e06c533" kindref="member">getIntervalIndex</ref>(textureName_id);</highlight></codeline>
<codeline lineno="208"><highlight class="normal"></highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(intervalIndex<sp/>==<sp/><ref refid="varTypes_8h_1a68274b768c55a5469a7b292041a74fb8a57d75fe5c8b51fa43dc2bb2dd19daf79" kindref="member">INTERVAL_NOT_INIT</ref>)</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>interval<sp/>not<sp/>found<sp/>-<sp/>register<sp/>new<sp/>fake-interval</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>textureIntervalNameId<sp/>=<sp/>ctx.<ref refid="classshc_1_1ShaderContext_1a8d1967ec973d0ffe1c0ddb78cec30dce" kindref="member">tgtCtx</ref>().<ref refid="classshc_1_1TargetContext_1ad61d7a132b4b9b57202752394eed414d" kindref="member">intervalNameMap</ref>().<ref refid="classHashStrings_1a42b8ab5dce91f04e182d652763f10736" kindref="member">addNameId</ref>(textureName);</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classInterval" kindref="compound">Interval</ref><sp/>newInterval(textureIntervalNameId,<sp/>type);</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/>newInterval.addValue(ctx.<ref refid="classshc_1_1ShaderContext_1a8d1967ec973d0ffe1c0ddb78cec30dce" kindref="member">tgtCtx</ref>().<ref refid="classshc_1_1TargetContext_1ad61d7a132b4b9b57202752394eed414d" kindref="member">intervalNameMap</ref>().<ref refid="classHashStrings_1a42b8ab5dce91f04e182d652763f10736" kindref="member">addNameId</ref>(</highlight><highlight class="stringliteral">&quot;NULL&quot;</highlight><highlight class="normal">),<sp/>1.0f);</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/>newInterval.addValue(ctx.<ref refid="classshc_1_1ShaderContext_1a8d1967ec973d0ffe1c0ddb78cec30dce" kindref="member">tgtCtx</ref>().<ref refid="classshc_1_1TargetContext_1ad61d7a132b4b9b57202752394eed414d" kindref="member">intervalNameMap</ref>().<ref refid="classHashStrings_1a42b8ab5dce91f04e182d652763f10736" kindref="member">addNameId</ref>(</highlight><highlight class="stringliteral">&quot;EXISTS&quot;</highlight><highlight class="normal">),<sp/><ref refid="classIntervalValue_1a89b213ce318d71f4a69d7d28a32ad450" kindref="member">IntervalValue::VALUE_INFINITY</ref>);</highlight></codeline>
<codeline lineno="216"><highlight class="normal"></highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!ctx.<ref refid="classshc_1_1ShaderContext_1a209dd192d866a02b8102a8858b7e5b8d" kindref="member">intervals</ref>().<ref refid="classIntervalList_1aa6fa1dcc75581680d25e7dcaad970cd0" kindref="member">addInterval</ref>(newInterval))</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="shErrorReporting_8h_1a634f6d6ca9a9f22c5eea4c9b8e20ef31" kindref="member">report_error</ref>(parser,<sp/>terminal,<sp/></highlight><highlight class="stringliteral">&quot;interval<sp/>already<sp/>exists<sp/>and<sp/>their<sp/>type<sp/>diffirent<sp/>from<sp/>new<sp/>interval!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classShVarBool" kindref="compound">ShVarBool</ref>(</highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/>intervalIndex<sp/>=<sp/>ctx.<ref refid="classshc_1_1ShaderContext_1a209dd192d866a02b8102a8858b7e5b8d" kindref="member">intervals</ref>().<ref refid="classIntervalList_1a9a77d1ff0e92fe7dcab999886e06c533" kindref="member">getIntervalIndex</ref>(newInterval.getNameId());</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="224"><highlight class="normal"></highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>valueMaybe<sp/>=<sp/>ctx.<ref refid="classshc_1_1ShaderContext_1aeeaa07d5b2e79f290df03aa69d7ae312" kindref="member">assumes</ref>().<ref refid="classShaderAssumesTable_1a8279eb5b559bfac980d005b1f9832326" kindref="member">getAssumedVal</ref>(textureName,<sp/>isGlobal))</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>value<sp/>=<sp/>*valueMaybe;</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(e.cmpop-&gt;op-&gt;num)</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>SHADER_TOKENS::SHTOK_eq:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classShVarBool" kindref="compound">ShVarBool</ref>(value<sp/>&lt;<sp/>1,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>SHADER_TOKENS::SHTOK_noteq:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classShVarBool" kindref="compound">ShVarBool</ref>(value<sp/>&gt;=<sp/>1,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="shErrorReporting_8h_1a634f6d6ca9a9f22c5eea4c9b8e20ef31" kindref="member">report_error</ref>(parser,<sp/>terminal,<sp/></highlight><highlight class="stringliteral">&quot;bad<sp/>cmp<sp/>op<sp/>for<sp/>texture<sp/>interval:<sp/>%d&quot;</highlight><highlight class="normal">,<sp/>e.cmpop-&gt;op-&gt;num);</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="235"><highlight class="normal"></highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>is_static<sp/>=<sp/>staticVars.getNameId(textureName)<sp/>!=<sp/>-1;</highlight></codeline>
<codeline lineno="237"><highlight class="normal"></highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(is_static)</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/>types.<ref refid="structshc_1_1TypeTables_1acc96568cc401badf5dc667d49749bd59" kindref="member">allStaticTypes</ref>.<ref refid="classShaderVariant_1_1TypeTable_1a598e48543decca70198ebc78852b1110" kindref="member">addType</ref>(type,<sp/>intervalIndex,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/>hasDynFlag<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/>types.<ref refid="structshc_1_1TypeTables_1afa230b1d10268a40e3340e4d867f88a9" kindref="member">allDynamicTypes</ref>.<ref refid="classShaderVariant_1_1TypeTable_1a598e48543decca70198ebc78852b1110" kindref="member">addType</ref>(type,<sp/>intervalIndex,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classShVarBool" kindref="compound">ShVarBool</ref>(</highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="246"><highlight class="normal">}</highlight></codeline>
<codeline lineno="247"><highlight class="normal"></highlight></codeline>
<codeline lineno="248"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classShaderParser_1_1GatherVarShaderEvalCB_1a3634670586826fc1fcd4051395467f56" kindref="member">GatherVarShaderEvalCB::eval_external_block</ref>(external_state_block<sp/>&amp;state_block)</highlight></codeline>
<codeline lineno="249"><highlight class="normal">{</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>eval_if_stat<sp/>=<sp/>[</highlight><highlight class="keyword">this</highlight><highlight class="normal">](state_block_if_stat<sp/>&amp;s,<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;&amp;eval_if_stat)<sp/>-&gt;<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/>G_ASSERT(s.expr);</highlight></codeline>
<codeline lineno="252"><highlight class="normal"></highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>eval_stats<sp/>=<sp/>[&amp;](</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;stats)<sp/>{</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;stat<sp/>:<sp/>stats)</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(stat-&gt;stblock_if_stat)</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>eval_if_stat(*stat-&gt;stblock_if_stat,<sp/>eval_if_stat);</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="258"><highlight class="normal"></highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classShVarBool" kindref="compound">ShVarBool</ref><sp/>b<sp/>=<sp/><ref refid="classShaderParser_1_1GatherVarShaderEvalCB_1a4e59927338e70286a8b5f69628cff544" kindref="member">eval_expr</ref>(*s.expr);</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(b.<ref refid="classShVarBool_1aa1e84216403109d360db42129c7f698d" kindref="member">value</ref><sp/>||<sp/>!b.<ref refid="classShVarBool_1a56bef58e491d1cb5488cd5be282fe3bc" kindref="member">isConst</ref>)</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>eval_stats(s.true_stat);</highlight></codeline>
<codeline lineno="262"><highlight class="normal"></highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!b.<ref refid="classShVarBool_1aa1e84216403109d360db42129c7f698d" kindref="member">value</ref><sp/>||<sp/>!b.<ref refid="classShVarBool_1a56bef58e491d1cb5488cd5be282fe3bc" kindref="member">isConst</ref>)</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>eval_stats(s.false_stat);</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(s.else_if)</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>eval_if_stat(*s.else_if,<sp/>eval_if_stat);</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="270"><highlight class="normal"></highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>stat<sp/>:<sp/>state_block.stblock_stat)</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/>if<sp/>(stat-&gt;stblock_if_stat)</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>eval_if_stat(*stat-&gt;stblock_if_stat,<sp/>eval_if_stat);</highlight></codeline>
<codeline lineno="274"><highlight class="normal">}</highlight></codeline>
<codeline lineno="275"><highlight class="normal"></highlight></codeline>
<codeline lineno="276"><highlight class="normal"><ref refid="classShVarBool" kindref="compound">ShVarBool</ref><sp/><ref refid="classShaderParser_1_1GatherVarShaderEvalCB_1a4e59927338e70286a8b5f69628cff544" kindref="member">GatherVarShaderEvalCB::eval_expr</ref>(bool_expr<sp/>&amp;e)</highlight></codeline>
<codeline lineno="277"><highlight class="normal">{</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>statStartIdx<sp/>=<sp/>types.<ref refid="structshc_1_1TypeTables_1acc96568cc401badf5dc667d49749bd59" kindref="member">allStaticTypes</ref>.<ref refid="classShaderVariant_1_1TypeTable_1ad107f77c534bdad10abcdea8f7709a04" kindref="member">getCount</ref>();</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dynStartIdx<sp/>=<sp/>types.<ref refid="structshc_1_1TypeTables_1afa230b1d10268a40e3340e4d867f88a9" kindref="member">allDynamicTypes</ref>.<ref refid="classShaderVariant_1_1TypeTable_1ad107f77c534bdad10abcdea8f7709a04" kindref="member">getCount</ref>();</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><ref refid="classShVarBool" kindref="compound">ShVarBool</ref><sp/>v<sp/>=<sp/><ref refid="namespaceShaderParser_1abe4ee9e9422afa7c95b8fdac0635a539" kindref="member">ShaderParser::eval_shader_bool</ref>(e,<sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>statStartIdx;<sp/>i<sp/>&lt;<sp/>types.<ref refid="structshc_1_1TypeTables_1acc96568cc401badf5dc667d49749bd59" kindref="member">allStaticTypes</ref>.<ref refid="classShaderVariant_1_1TypeTable_1ad107f77c534bdad10abcdea8f7709a04" kindref="member">getCount</ref>();<sp/>i++)</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/>types.<ref refid="structshc_1_1TypeTables_1abda67885492da30fcaa1263afef0dd65" kindref="member">referencedTypes</ref>.<ref refid="classShaderVariant_1_1TypeTable_1a598e48543decca70198ebc78852b1110" kindref="member">addType</ref>(types.<ref refid="structshc_1_1TypeTables_1acc96568cc401badf5dc667d49749bd59" kindref="member">allStaticTypes</ref>.<ref refid="classShaderVariant_1_1TypeTable_1af90d2bea0949d3dc5bc616d54e419c31" kindref="member">getType</ref>(i).<ref refid="structShaderVariant_1_1VariantType_1ac41c9fcfa36cd0e994689c101666a7bd" kindref="member">type</ref>,<sp/>types.<ref refid="structshc_1_1TypeTables_1acc96568cc401badf5dc667d49749bd59" kindref="member">allStaticTypes</ref>.<ref refid="classShaderVariant_1_1TypeTable_1af90d2bea0949d3dc5bc616d54e419c31" kindref="member">getType</ref>(i).<ref refid="structShaderVariant_1_1VariantType_1a0bfde85cc8794c633c641e3aa4f32051" kindref="member">extType</ref>,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(v.<ref refid="classShVarBool_1a56bef58e491d1cb5488cd5be282fe3bc" kindref="member">isConst</ref><sp/>&amp;&amp;<sp/>!v.<ref refid="classShVarBool_1aa1e84216403109d360db42129c7f698d" kindref="member">value</ref><sp/>&amp;&amp;<sp/>statStartIdx<sp/>+<sp/>dynStartIdx<sp/>!=<sp/>types.<ref refid="structshc_1_1TypeTables_1acc96568cc401badf5dc667d49749bd59" kindref="member">allStaticTypes</ref>.<ref refid="classShaderVariant_1_1TypeTable_1ad107f77c534bdad10abcdea8f7709a04" kindref="member">getCount</ref>()<sp/>+<sp/>types.<ref refid="structshc_1_1TypeTables_1afa230b1d10268a40e3340e4d867f88a9" kindref="member">allDynamicTypes</ref>.<ref refid="classShaderVariant_1_1TypeTable_1ad107f77c534bdad10abcdea8f7709a04" kindref="member">getCount</ref>())</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/>String<sp/>cond;</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceShaderParser_1a4a17bbf595067ae88a41f034719c3ff1" kindref="member">ShaderParser::build_bool_expr_string</ref>(e,<sp/>cond);</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/>debug(</highlight><highlight class="stringliteral">&quot;reject<sp/>gathered<sp/>variant<sp/>vars:<sp/>%d;%d<sp/>-&gt;<sp/>%d;%d<sp/>due<sp/>to<sp/>const.false<sp/>expr=\&quot;%s\&quot;&quot;</highlight><highlight class="normal">,<sp/>types.<ref refid="structshc_1_1TypeTables_1acc96568cc401badf5dc667d49749bd59" kindref="member">allStaticTypes</ref>.<ref refid="classShaderVariant_1_1TypeTable_1ad107f77c534bdad10abcdea8f7709a04" kindref="member">getCount</ref>(),</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>types.<ref refid="structshc_1_1TypeTables_1afa230b1d10268a40e3340e4d867f88a9" kindref="member">allDynamicTypes</ref>.<ref refid="classShaderVariant_1_1TypeTable_1ad107f77c534bdad10abcdea8f7709a04" kindref="member">getCount</ref>(),<sp/>statStartIdx,<sp/>dynStartIdx,<sp/>cond);</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/>types.<ref refid="structshc_1_1TypeTables_1acc96568cc401badf5dc667d49749bd59" kindref="member">allStaticTypes</ref>.<ref refid="classShaderVariant_1_1TypeTable_1ad07dd3cf65d7585a03f92c99de1a572c" kindref="member">shrinkTo</ref>(statStartIdx);</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/>types.<ref refid="structshc_1_1TypeTables_1afa230b1d10268a40e3340e4d867f88a9" kindref="member">allDynamicTypes</ref>.<ref refid="classShaderVariant_1_1TypeTable_1ad07dd3cf65d7585a03f92c99de1a572c" kindref="member">shrinkTo</ref>(dynStartIdx);</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>v;</highlight></codeline>
<codeline lineno="293"><highlight class="normal">}</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><ref refid="classShVarBool" kindref="compound">ShVarBool</ref><sp/><ref refid="classShaderParser_1_1GatherVarShaderEvalCB_1aaa792cef7dc3cdacea004a2931634e01" kindref="member">GatherVarShaderEvalCB::eval_bool_value</ref>(bool_value<sp/>&amp;e)</highlight></codeline>
<codeline lineno="295"><highlight class="normal">{</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(e.two_sided)</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/>types.<ref refid="structshc_1_1TypeTables_1acc96568cc401badf5dc667d49749bd59" kindref="member">allStaticTypes</ref>.<ref refid="classShaderVariant_1_1TypeTable_1a598e48543decca70198ebc78852b1110" kindref="member">addType</ref>(<ref refid="namespaceShaderVariant_1a4cc81bf315e35fb912c2033de934e6cfa4d49e14b2742d348bc6aff506284e60b" kindref="member">ShaderVariant::VARTYPE_MODE</ref>,<sp/><ref refid="namespaceShaderVariant_1acba053c05d6132228610c748ab655e27a0869757dbb6efe5a2870cbc7b2df5a38" kindref="member">ShaderVariant::TWO_SIDED</ref>,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classShVarBool" kindref="compound">ShVarBool</ref>(</highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(e.real_two_sided)</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/>types.<ref refid="structshc_1_1TypeTables_1acc96568cc401badf5dc667d49749bd59" kindref="member">allStaticTypes</ref>.<ref refid="classShaderVariant_1_1TypeTable_1a598e48543decca70198ebc78852b1110" kindref="member">addType</ref>(<ref refid="namespaceShaderVariant_1a4cc81bf315e35fb912c2033de934e6cfa4d49e14b2742d348bc6aff506284e60b" kindref="member">ShaderVariant::VARTYPE_MODE</ref>,<sp/><ref refid="namespaceShaderVariant_1acba053c05d6132228610c748ab655e27a68463dca0990df6b3c699d05b2272845" kindref="member">ShaderVariant::REAL_TWO_SIDED</ref>,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classShVarBool" kindref="compound">ShVarBool</ref>(</highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(e.shader)</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classShVarBool" kindref="compound">ShVarBool</ref>(<ref refid="namespacesemantic_1af8947c2c8c73e8adddfbc28ca1beccf9" kindref="member">semantic::compare_shader</ref>(e,<sp/>ctx),<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(e.hw)</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classShVarBool" kindref="compound">ShVarBool</ref>(<ref refid="namespacesemantic_1a3f41f0541f7be2032f5c877c84ec11a5" kindref="member">semantic::compare_hw_token</ref>(e,<sp/>ctx.<ref refid="classshc_1_1ShaderContext_1a8d1967ec973d0ffe1c0ddb78cec30dce" kindref="member">tgtCtx</ref>().<ref refid="classshc_1_1TargetContext_1a72ea1e47e9286a2dfdf513c56e495712" kindref="member">compCtx</ref>()),<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(e.interval_ident)</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>addInterval(e.interval_ident-&gt;text,<sp/>e.interval_ident,<sp/>&amp;e);</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(e.texture_name)</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>addTextureInterval(e.texture_name-&gt;text,<sp/>e.texture_name,<sp/>e);</highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(e.bool_var)</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>[expr,<sp/>isGlobal,<sp/>hasMultipleDeclarations]<sp/>=<sp/><ref refid="namespacesemantic_1ab76cb307b268e760be1f5a4e21cd2e60" kindref="member">semantic::get_bool_expr</ref>(*e.bool_var,<sp/>parser,<sp/>ctx,<sp/>ctx.<ref refid="classshc_1_1ShaderContext_1a8d1967ec973d0ffe1c0ddb78cec30dce" kindref="member">tgtCtx</ref>());</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(expr)</highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Local<sp/>bool<sp/>var<sp/>declarations<sp/>at<sp/>this<sp/>point<sp/>may<sp/>depend<sp/>on<sp/>intervals,<sp/>if<sp/>there<sp/>has<sp/>been<sp/>more<sp/>than<sp/>one</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classShVarBool" kindref="compound">ShVarBool</ref><sp/>evalRes<sp/>=<sp/><ref refid="classShaderParser_1_1GatherVarShaderEvalCB_1a4e59927338e70286a8b5f69628cff544" kindref="member">eval_expr</ref>(*expr);</highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classShVarBool" kindref="compound">ShVarBool</ref>(evalRes.<ref refid="classShVarBool_1aa1e84216403109d360db42129c7f698d" kindref="member">value</ref>,<sp/>evalRes.<ref refid="classShVarBool_1a56bef58e491d1cb5488cd5be282fe3bc" kindref="member">isConst</ref><sp/>&amp;&amp;<sp/>(isGlobal<sp/>||<sp/>!hasMultipleDeclarations));</highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(e.maybe)</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>[expr,<sp/>isGlobal,<sp/>_]<sp/>=<sp/><ref refid="namespacesemantic_1ae53a14963271647d198fdd5ecce705a4" kindref="member">semantic::get_bool_maybe</ref>(*e.maybe_bool_var,<sp/>ctx,<sp/>ctx.<ref refid="classshc_1_1ShaderContext_1a8d1967ec973d0ffe1c0ddb78cec30dce" kindref="member">tgtCtx</ref>());</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(expr)</highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>With<sp/>maybe<sp/>the<sp/>branch<sp/>eval<sp/>result<sp/>may<sp/>depend<sp/>on<sp/>intervals<sp/>even<sp/>if<sp/>there<sp/>was<sp/>only<sp/>one<sp/>decl<sp/>up<sp/>to<sp/>this<sp/>point<sp/>--<sp/>cause<sp/>it<sp/>may<sp/>not</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>be<sp/>present<sp/>in<sp/>some<sp/>variants.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classShVarBool" kindref="compound">ShVarBool</ref><sp/>evalRes<sp/>=<sp/><ref refid="classShaderParser_1_1GatherVarShaderEvalCB_1a4e59927338e70286a8b5f69628cff544" kindref="member">eval_expr</ref>(*expr);</highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classShVarBool" kindref="compound">ShVarBool</ref>(evalRes.<ref refid="classShVarBool_1aa1e84216403109d360db42129c7f698d" kindref="member">value</ref>,<sp/>evalRes.<ref refid="classShVarBool_1a56bef58e491d1cb5488cd5be282fe3bc" kindref="member">isConst</ref><sp/>&amp;&amp;<sp/>isGlobal);</highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classShVarBool" kindref="compound">ShVarBool</ref>(</highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(e.true_value)</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classShVarBool" kindref="compound">ShVarBool</ref>(</highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(e.false_value)</highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classShVarBool" kindref="compound">ShVarBool</ref>(</highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><sp/><sp/>G_ASSERT(0);</highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classShVarBool" kindref="compound">ShVarBool</ref>(</highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="358"><highlight class="normal">}</highlight></codeline>
<codeline lineno="359"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="classShaderParser_1_1GatherVarShaderEvalCB_1abbf81a7ee85b47222708004e2fe5d658" kindref="member">GatherVarShaderEvalCB::eval_interval_value</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*ival_name)</highlight></codeline>
<codeline lineno="360"><highlight class="normal">{</highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/>addInterval(ival_name,<sp/>NULL,<sp/>NULL);</highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="363"><highlight class="normal">}</highlight></codeline>
<codeline lineno="364"><highlight class="normal"></highlight></codeline>
<codeline lineno="365"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="classShaderParser_1_1GatherVarShaderEvalCB_1a5f5d77772b7370a419e0856fa71bd882" kindref="member">GatherVarShaderEvalCB::eval_if</ref>(bool_expr<sp/>&amp;e)</highlight></codeline>
<codeline lineno="366"><highlight class="normal">{</highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/>String<sp/>cond(</highlight><highlight class="stringliteral">&quot;##if<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/><ref refid="namespaceShaderParser_1a4a17bbf595067ae88a41f034719c3ff1" kindref="member">ShaderParser::build_bool_expr_string</ref>(e,<sp/>cond,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/>cond.append(</highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/>ctx.<ref refid="classshc_1_1ShaderContext_1a2a5bfa488755ef94e3ccc73b650190d2" kindref="member">localHlslSrc</ref>().forEach([&amp;](String<sp/>&amp;src)<sp/>{<sp/>src.append(cond);<sp/>});</highlight></codeline>
<codeline lineno="371"><highlight class="normal"></highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>debug(&quot;expr-----------&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/><ref refid="classShVarBool" kindref="compound">ShVarBool</ref><sp/>b<sp/>=<sp/><ref refid="classShaderParser_1_1GatherVarShaderEvalCB_1a4e59927338e70286a8b5f69628cff544" kindref="member">eval_expr</ref>(e);</highlight></codeline>
<codeline lineno="374"><highlight class="normal"></highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>count<sp/>dynamic<sp/>flag</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/>dynStack.push_back(hasDynFlag);</highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(hasDynFlag)</highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/><sp/><sp/>dynCount++;</highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/>hasDynFlag<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="380"><highlight class="normal"></highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>debug(&quot;expr<sp/>ok--------&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>b.<ref refid="classShVarBool_1a56bef58e491d1cb5488cd5be282fe3bc" kindref="member">isConst</ref><sp/>?<sp/>(b.<ref refid="classShVarBool_1aa1e84216403109d360db42129c7f698d" kindref="member">value</ref><sp/>?<sp/><ref refid="classShaderParser_1_1ShaderEvalCB_1a4e485b7ac1252d1a948698ab76ccd7cfa795199991378708f0bd9307c73262846" kindref="member">IF_TRUE</ref><sp/>:<sp/><ref refid="classShaderParser_1_1ShaderEvalCB_1a4e485b7ac1252d1a948698ab76ccd7cfa58399c8728006ad1e82d90527d55d3c6" kindref="member">IF_FALSE</ref>)<sp/>:<sp/><ref refid="classShaderParser_1_1ShaderEvalCB_1a4e485b7ac1252d1a948698ab76ccd7cfa67354fcef9c601179eef2864b8228b76" kindref="member">IF_BOTH</ref>;</highlight></codeline>
<codeline lineno="383"><highlight class="normal">}</highlight></codeline>
<codeline lineno="384"><highlight class="normal"></highlight></codeline>
<codeline lineno="385"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classShaderParser_1_1GatherVarShaderEvalCB_1aeb7575d66f3cac5b49d6b0dbb4bb5915" kindref="member">GatherVarShaderEvalCB::eval_else</ref>(bool_expr<sp/>&amp;e)</highlight></codeline>
<codeline lineno="386"><highlight class="normal">{</highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/>ctx.<ref refid="classshc_1_1ShaderContext_1a2a5bfa488755ef94e3ccc73b650190d2" kindref="member">localHlslSrc</ref>().forEach([](String<sp/>&amp;src)<sp/>{<sp/>src.append(</highlight><highlight class="stringliteral">&quot;##else\n&quot;</highlight><highlight class="normal">);<sp/>});</highlight></codeline>
<codeline lineno="388"><highlight class="normal">}</highlight></codeline>
<codeline lineno="389"><highlight class="normal"></highlight></codeline>
<codeline lineno="390"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classShaderParser_1_1GatherVarShaderEvalCB_1a66ea2b9fa90e6242720bf13b21e2a9b6" kindref="member">GatherVarShaderEvalCB::eval_supports</ref>(supports_stat<sp/>&amp;s)</highlight></codeline>
<codeline lineno="391"><highlight class="normal">{</highlight></codeline>
<codeline lineno="392"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>_CROSS_TARGET_DX12</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/>eastl::string<sp/>hlsl;</highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>name<sp/>:<sp/>s.name)</highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(name-&gt;num<sp/>==<sp/>SHADER_TOKENS::SHTOK_none)</highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="398"><highlight class="normal"></highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal">std::string_view_literals;</highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(name-&gt;text<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;__draw_id&quot;</highlight><highlight class="normal">sv)</highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>slot<sp/>=<sp/>dxil::SPECIAL_CONSTANTS_REGISTER_INDEX;</highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>space<sp/>=<sp/>dxil::DRAW_ID_REGISTER_SPACE;</highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>hlsl.append_sprintf(</highlight><highlight class="stringliteral">&quot;cbuffer<sp/>draw_id_const_buffer:register(b%d,<sp/>space%d){<sp/>uint<sp/>__draw_id;<sp/>};\n&quot;</highlight><highlight class="normal">,<sp/>slot,<sp/>space);</highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>hlsl.append(</highlight><highlight class="stringliteral">&quot;uint<sp/>get_draw_id()<sp/>{return<sp/>__draw_id;}\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="408"><highlight class="normal"></highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/><ref refid="hlslStage_8h_1ab27749cd2e9a40a990a73784ff99db95" kindref="member">hlsl_mask_t</ref><sp/>hlslTypes<sp/>=<sp/><ref refid="hlslStage_8h_1a611ebb9ca51bd44cb0492e2720609242a054c2098bd9404563c2217d6cd150543" kindref="member">HLSL_FLAGS_ALL</ref><sp/>&amp;<sp/>~HLSL_FLAGS_CS;</highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/>ctx.<ref refid="classshc_1_1ShaderContext_1a2a5bfa488755ef94e3ccc73b650190d2" kindref="member">localHlslSrc</ref>().forEach(hlslTypes,<sp/>[&amp;,<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">](String<sp/>&amp;src)<sp/>{</highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceShaderParser_1ab3462116b1620a58f8ada21b41e65826" kindref="member">addSourceCode</ref>(src,<sp/>s.name[0],<sp/>hlsl.c_str(),<sp/>parser,<sp/>ctx.<ref refid="classshc_1_1ShaderContext_1a8d1967ec973d0ffe1c0ddb78cec30dce" kindref="member">tgtCtx</ref>().<ref refid="classshc_1_1TargetContext_1a50ca45dddf4a7db50606a5069f923f11" kindref="member">globMessages</ref>(),<sp/>ctx.<ref refid="classshc_1_1ShaderContext_1a3a6d8c9c28e9c7bd6dfd806d77b1ced9" kindref="member">isDebugModeEnabled</ref>());</highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/>});</highlight></codeline>
<codeline lineno="413"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="414"><highlight class="normal">}</highlight></codeline>
<codeline lineno="415"><highlight class="normal"></highlight></codeline>
<codeline lineno="416"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classShaderParser_1_1GatherVarShaderEvalCB_1a60f312350d66132eb84c2c05c933bc93" kindref="member">GatherVarShaderEvalCB::eval</ref>(immediate_const_block<sp/>&amp;s)</highlight></codeline>
<codeline lineno="417"><highlight class="normal">{</highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>words<sp/>=<sp/><ref refid="namespacesemutils_1a6811ced6d8ed588c8946e5816ea788a0" kindref="member">semutils::int_number</ref>(s.count-&gt;text);</highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(words<sp/>&lt;=<sp/>0)</highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(words<sp/>&gt;<sp/>4)</highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="shErrorReporting_8h_1a634f6d6ca9a9f22c5eea4c9b8e20ef31" kindref="member">report_error</ref>(parser,<sp/>s.count,<sp/></highlight><highlight class="stringliteral">&quot;maximum<sp/>immediate<sp/>words<sp/>is<sp/>4&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="423"><highlight class="normal"></highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/><ref refid="hlslStage_8h_1a2c05326871fdf863346c90daec291c82" kindref="member">HlslCompilationStage</ref><sp/>stage<sp/>=<sp/><ref refid="hlslStage_8h_1a960773a0e722b1ff1ab524d174509816" kindref="member">profile_to_hlsl_stage</ref>(s.scope-&gt;text);</highlight></codeline>
<codeline lineno="425"><highlight class="normal"></highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/>String<sp/>hlsl;</highlight></codeline>
<codeline lineno="427"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>_CROSS_TARGET_C1<sp/>|<sp/>_CROSS_TARGET_C2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="428"><highlight class="normal"></highlight></codeline>
<codeline lineno="429"><highlight class="normal"></highlight></codeline>
<codeline lineno="430"><highlight class="normal"></highlight></codeline>
<codeline lineno="431"><highlight class="normal"></highlight></codeline>
<codeline lineno="432"><highlight class="normal"></highlight></codeline>
<codeline lineno="433"><highlight class="normal"></highlight></codeline>
<codeline lineno="434"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>_CROSS_TARGET_DX12</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>On<sp/>DX12<sp/>we<sp/>use<sp/>the<sp/>space<sp/>index<sp/>to<sp/>indicate<sp/>how<sp/>many<sp/>dwords<sp/>the<sp/>buffer<sp/>actually<sp/>uses.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>DXC<sp/>rounds<sp/>const<sp/>buffer<sp/>size<sp/>to<sp/>next<sp/>vec4<sp/>size<sp/>in<sp/>reflection<sp/>data,<sp/>so<sp/>we<sp/>need<sp/>to<sp/>pass</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>along<sp/>somehow<sp/>how<sp/>many<sp/>dwords<sp/>are<sp/>actually<sp/>used.<sp/>With<sp/>the<sp/>space<sp/>index<sp/>this<sp/>is<sp/>a<sp/>simple</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>way<sp/>of<sp/>letting<sp/>DXC<sp/>do<sp/>the<sp/>work<sp/>for<sp/>us.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/>uint32_t<sp/>slot<sp/>=<sp/>dxil::ROOT_CONSTANT_BUFFER_REGISTER_INDEX;</highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/>uint32_t<sp/>space<sp/>=<sp/>dxil::ROOT_CONSTANT_BUFFER_REGISTER_SPACE_OFFSET<sp/>+<sp/>words;</highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/>hlsl.aprintf(128,<sp/></highlight><highlight class="stringliteral">&quot;cbuffer<sp/>immediate_const_buffer:register(b%d,<sp/>space%d){<sp/>uint&quot;</highlight><highlight class="normal">,<sp/>slot,<sp/>space);</highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>words;<sp/>++i)</highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/><sp/><sp/>hlsl.aprintf(32,<sp/></highlight><highlight class="stringliteral">&quot;%s<sp/>immediate_dword_%d&quot;</highlight><highlight class="normal">,<sp/>i<sp/>!=<sp/>0<sp/>?<sp/></highlight><highlight class="stringliteral">&quot;,&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">,<sp/>i);</highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/>hlsl.aprintf(32,<sp/></highlight><highlight class="stringliteral">&quot;;};\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>words;<sp/>++i)</highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/><sp/><sp/>hlsl.aprintf(32,<sp/></highlight><highlight class="stringliteral">&quot;uint<sp/>get_immediate_dword_%d()<sp/>{return<sp/>immediate_dword_%d;}\n&quot;</highlight><highlight class="normal">,<sp/>i,<sp/>i);</highlight></codeline>
<codeline lineno="447"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/>uint32_t<sp/>slot<sp/>=<sp/>8;</highlight></codeline>
<codeline lineno="449"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>_CROSS_TARGET_SPIRV</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/>hlsl.aprintf(128,<sp/></highlight><highlight class="stringliteral">&quot;#if<sp/>SPIRV_DISALLOW_PUSH_CONSTANTS\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/>slot<sp/>=<sp/>7;</highlight></codeline>
<codeline lineno="452"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/>hlsl.aprintf(128,<sp/></highlight><highlight class="stringliteral">&quot;#define<sp/>NUM_IMMEDIATE_DWORDS<sp/>%u\n&quot;</highlight><highlight class="normal">,<sp/>words);</highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/>hlsl.aprintf(128,<sp/></highlight><highlight class="stringliteral">&quot;cbuffer<sp/>immediate_const_buffer:register(b%d){<sp/>uint&quot;</highlight><highlight class="normal">,<sp/>slot);</highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>words;<sp/>++i)</highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/><sp/><sp/>hlsl.aprintf(32,<sp/></highlight><highlight class="stringliteral">&quot;%s<sp/>immediate_dword_%d&quot;</highlight><highlight class="normal">,<sp/>i<sp/>!=<sp/>0<sp/>?<sp/></highlight><highlight class="stringliteral">&quot;,&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">,<sp/>i);</highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/>hlsl.aprintf(32,<sp/></highlight><highlight class="stringliteral">&quot;;};\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>words;<sp/>++i)</highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/><sp/><sp/>hlsl.aprintf(32,<sp/></highlight><highlight class="stringliteral">&quot;uint<sp/>get_immediate_dword_%d()<sp/>{return<sp/>immediate_dword_%d;}\n&quot;</highlight><highlight class="normal">,<sp/>i,<sp/>i);</highlight></codeline>
<codeline lineno="460"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>_CROSS_TARGET_SPIRV</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/>hlsl.aprintf(128,<sp/></highlight><highlight class="stringliteral">&quot;#else\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint32_t<sp/>MAX_IMMEDIATE_CONST_WORDS<sp/>=<sp/>4;</highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/>hlsl.aprintf(128,</highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;struct<sp/>ImmDwords<sp/>{<sp/>[[vk::offset(%u)]]<sp/>uint<sp/>data[%d];<sp/>};\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;[[vk::push_constant]]<sp/>ImmDwords<sp/>imm_dwords;\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/><sp/><sp/>(stage<sp/>==<sp/><ref refid="hlslStage_8h_1a2c05326871fdf863346c90daec291c82a3578afaccb178aabb4a9be24ebac96ab" kindref="member">HLSL_PS</ref>)<sp/>?<sp/>MAX_IMMEDIATE_CONST_WORDS<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(uint32_t)<sp/>:<sp/>0,<sp/>words);</highlight></codeline>
<codeline lineno="467"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>words;<sp/>++i)</highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/><sp/><sp/>hlsl.aprintf(32,<sp/></highlight><highlight class="stringliteral">&quot;uint<sp/>get_immediate_dword_%d()<sp/>{return<sp/>imm_dwords.data[%d];}\n&quot;</highlight><highlight class="normal">,<sp/>i,<sp/>i);</highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/>hlsl.aprintf(128,<sp/></highlight><highlight class="stringliteral">&quot;#endif\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="470"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="471"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="472"><highlight class="normal"></highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="commonUtils_8h_1ae2667fae32711226a08120e1cc45974d" kindref="member">item_is_in</ref>(stage,<sp/>{<ref refid="hlslStage_8h_1a2c05326871fdf863346c90daec291c82ac96f3b48f3e701b6668d5c1322e48687" kindref="member">HLSL_VS</ref>,<sp/><ref refid="hlslStage_8h_1a2c05326871fdf863346c90daec291c82a3578afaccb178aabb4a9be24ebac96ab" kindref="member">HLSL_PS</ref>,<sp/><ref refid="hlslStage_8h_1a2c05326871fdf863346c90daec291c82a650263c7ccac846d596bd102f8731e45" kindref="member">HLSL_CS</ref>,<sp/><ref refid="hlslStage_8h_1a2c05326871fdf863346c90daec291c82a9b00fd134e3a16ccea975e6308ac0407" kindref="member">HLSL_MS</ref>,<sp/><ref refid="hlslStage_8h_1a2c05326871fdf863346c90daec291c82a817ee5a4475f199b5cd88655ac66d6c9" kindref="member">HLSL_AS</ref>}))</highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="shErrorReporting_8h_1a634f6d6ca9a9f22c5eea4c9b8e20ef31" kindref="member">report_error</ref>(parser,<sp/>s.scope,<sp/></highlight><highlight class="stringliteral">&quot;unknown<sp/>hlsl<sp/>block&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="477"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="478"><highlight class="normal"></highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;hlsls<sp/>=<sp/>ctx.<ref refid="classshc_1_1ShaderContext_1a2a5bfa488755ef94e3ccc73b650190d2" kindref="member">localHlslSrc</ref>();</highlight></codeline>
<codeline lineno="480"><highlight class="normal"></highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/><ref refid="namespaceShaderParser_1ab3462116b1620a58f8ada21b41e65826" kindref="member">addSourceCode</ref>(hlsls.all[stage],<sp/>s.scope,<sp/>hlsl.c_str(),<sp/>parser,<sp/>ctx.<ref refid="classshc_1_1ShaderContext_1a8d1967ec973d0ffe1c0ddb78cec30dce" kindref="member">tgtCtx</ref>().<ref refid="classshc_1_1TargetContext_1a50ca45dddf4a7db50606a5069f923f11" kindref="member">globMessages</ref>(),<sp/>ctx.<ref refid="classshc_1_1ShaderContext_1a3a6d8c9c28e9c7bd6dfd806d77b1ced9" kindref="member">isDebugModeEnabled</ref>());</highlight></codeline>
<codeline lineno="482"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(stage<sp/>==<sp/><ref refid="hlslStage_8h_1a2c05326871fdf863346c90daec291c82ac96f3b48f3e701b6668d5c1322e48687" kindref="member">HLSL_VS</ref>)</highlight></codeline>
<codeline lineno="483"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="484"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>hs,<sp/>ds<sp/>and<sp/>gs<sp/>stage<sp/>also<sp/>see<sp/>vs<sp/>sources<sp/>so<sp/>they<sp/>need<sp/>this<sp/>also</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="485"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceShaderParser_1ab3462116b1620a58f8ada21b41e65826" kindref="member">addSourceCode</ref>(hlsls.fields.gs,<sp/>s.scope,<sp/>hlsl.c_str(),<sp/>parser,<sp/>ctx.<ref refid="classshc_1_1ShaderContext_1a8d1967ec973d0ffe1c0ddb78cec30dce" kindref="member">tgtCtx</ref>().<ref refid="classshc_1_1TargetContext_1a50ca45dddf4a7db50606a5069f923f11" kindref="member">globMessages</ref>(),<sp/>ctx.<ref refid="classshc_1_1ShaderContext_1a3a6d8c9c28e9c7bd6dfd806d77b1ced9" kindref="member">isDebugModeEnabled</ref>());</highlight></codeline>
<codeline lineno="486"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceShaderParser_1ab3462116b1620a58f8ada21b41e65826" kindref="member">addSourceCode</ref>(hlsls.fields.hs,<sp/>s.scope,<sp/>hlsl.c_str(),<sp/>parser,<sp/>ctx.<ref refid="classshc_1_1ShaderContext_1a8d1967ec973d0ffe1c0ddb78cec30dce" kindref="member">tgtCtx</ref>().<ref refid="classshc_1_1TargetContext_1a50ca45dddf4a7db50606a5069f923f11" kindref="member">globMessages</ref>(),<sp/>ctx.<ref refid="classshc_1_1ShaderContext_1a3a6d8c9c28e9c7bd6dfd806d77b1ced9" kindref="member">isDebugModeEnabled</ref>());</highlight></codeline>
<codeline lineno="487"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceShaderParser_1ab3462116b1620a58f8ada21b41e65826" kindref="member">addSourceCode</ref>(hlsls.fields.ds,<sp/>s.scope,<sp/>hlsl.c_str(),<sp/>parser,<sp/>ctx.<ref refid="classshc_1_1ShaderContext_1a8d1967ec973d0ffe1c0ddb78cec30dce" kindref="member">tgtCtx</ref>().<ref refid="classshc_1_1TargetContext_1a50ca45dddf4a7db50606a5069f923f11" kindref="member">globMessages</ref>(),<sp/>ctx.<ref refid="classshc_1_1ShaderContext_1a3a6d8c9c28e9c7bd6dfd806d77b1ced9" kindref="member">isDebugModeEnabled</ref>());</highlight></codeline>
<codeline lineno="488"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="489"><highlight class="normal">}</highlight></codeline>
<codeline lineno="490"><highlight class="normal"></highlight></codeline>
<codeline lineno="491"><highlight class="normal"></highlight></codeline>
<codeline lineno="492"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classShaderParser_1_1GatherVarShaderEvalCB_1ae2a7de899ef068a5dd712e4292b2f99b" kindref="member">GatherVarShaderEvalCB::eval_hlsl_decl</ref>(hlsl_local_decl_class<sp/>&amp;sh)</highlight></codeline>
<codeline lineno="493"><highlight class="normal">{</highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="namespacesemantic_1a6b39c1fad1298c77aa50c91779bd0413" kindref="member">semantic::validate_hardcoded_regs_in_hlsl_block</ref>(sh.text))</highlight></codeline>
<codeline lineno="495"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="496"><highlight class="normal"></highlight></codeline>
<codeline lineno="497"><highlight class="normal"><sp/><sp/><ref refid="hlslStage_8h_1ab27749cd2e9a40a990a73784ff99db95" kindref="member">hlsl_mask_t</ref><sp/>hlsl_types<sp/>=<sp/><ref refid="hlslStage_8h_1a611ebb9ca51bd44cb0492e2720609242a054c2098bd9404563c2217d6cd150543" kindref="member">HLSL_FLAGS_ALL</ref>;</highlight></codeline>
<codeline lineno="498"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sh.ident)</highlight></codeline>
<codeline lineno="499"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="500"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="hlslStage_8h_1a2c05326871fdf863346c90daec291c82" kindref="member">HlslCompilationStage</ref><sp/>stage<sp/>=<sp/><ref refid="hlslStage_8h_1a960773a0e722b1ff1ab524d174509816" kindref="member">profile_to_hlsl_stage</ref>(sh.ident-&gt;text);</highlight></codeline>
<codeline lineno="501"><highlight class="normal"></highlight></codeline>
<codeline lineno="502"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(stage<sp/>==<sp/><ref refid="hlslStage_8h_1a2c05326871fdf863346c90daec291c82a122ff6a6ec14da30f15afba301d36b4c" kindref="member">HLSL_INVALID</ref>)</highlight></codeline>
<codeline lineno="503"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="shErrorReporting_8h_1a634f6d6ca9a9f22c5eea4c9b8e20ef31" kindref="member">report_error</ref>(parser,<sp/>sh.ident,<sp/></highlight><highlight class="stringliteral">&quot;Unexpected<sp/>scope<sp/>%s&quot;</highlight><highlight class="normal">,<sp/>sh.ident-&gt;text);</highlight></codeline>
<codeline lineno="504"><highlight class="normal"></highlight></codeline>
<codeline lineno="505"><highlight class="normal"><sp/><sp/><sp/><sp/>hlsl_types<sp/>=<sp/><ref refid="hlslStage_8h_1adf624674936113ffe1fb67c0d1d34d7b" kindref="member">HLSL_ALL_FLAGS_LIST</ref>[stage];</highlight></codeline>
<codeline lineno="506"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="507"><highlight class="normal"></highlight></codeline>
<codeline lineno="508"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(hlsl_types<sp/>&amp;<sp/><ref refid="hlslStage_8h_1a611ebb9ca51bd44cb0492e2720609242a2e339f3d586fc6b119b09c398b68aa4c" kindref="member">HLSL_FLAGS_VS</ref>)</highlight></codeline>
<codeline lineno="509"><highlight class="normal"><sp/><sp/><sp/><sp/>hlsl_types<sp/>|=<sp/><ref refid="hlslStage_8h_1a611ebb9ca51bd44cb0492e2720609242ae45fbe924f8ca9142be434a0c9b57c76" kindref="member">HLSL_FLAGS_DS</ref><sp/>|<sp/><ref refid="hlslStage_8h_1a611ebb9ca51bd44cb0492e2720609242a43a111f21920dd68b8f665a4a18e9416" kindref="member">HLSL_FLAGS_GS</ref><sp/>|<sp/><ref refid="hlslStage_8h_1a611ebb9ca51bd44cb0492e2720609242a7b423054aca91cde42b96ad6c6645490" kindref="member">HLSL_FLAGS_HS</ref>;</highlight></codeline>
<codeline lineno="510"><highlight class="normal"></highlight></codeline>
<codeline lineno="511"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(hlsl_types<sp/>&amp;<sp/><ref refid="hlslStage_8h_1a611ebb9ca51bd44cb0492e2720609242a0be04e2feb00c47d6b4bd599929d4f2b" kindref="member">HLSL_FLAGS_AS</ref>)</highlight></codeline>
<codeline lineno="512"><highlight class="normal"><sp/><sp/><sp/><sp/>hlsl_types<sp/>|=<sp/><ref refid="hlslStage_8h_1a611ebb9ca51bd44cb0492e2720609242ace5a9a144f6708d48cae4ddb7dfd131f" kindref="member">HLSL_FLAGS_MS</ref>;</highlight></codeline>
<codeline lineno="513"><highlight class="normal"></highlight></codeline>
<codeline lineno="514"><highlight class="normal"><sp/><sp/>ctx.<ref refid="classshc_1_1ShaderContext_1a2a5bfa488755ef94e3ccc73b650190d2" kindref="member">localHlslSrc</ref>().forEach(hlsl_types,</highlight></codeline>
<codeline lineno="515"><highlight class="normal"><sp/><sp/><sp/><sp/>[&amp;,<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">](String<sp/>&amp;src)<sp/>{<sp/><ref refid="namespaceShaderParser_1ab3462116b1620a58f8ada21b41e65826" kindref="member">addSourceCode</ref>(src,<sp/>sh.text,<sp/>parser,<sp/>ctx.<ref refid="classshc_1_1ShaderContext_1a8d1967ec973d0ffe1c0ddb78cec30dce" kindref="member">tgtCtx</ref>().<ref refid="classshc_1_1TargetContext_1a50ca45dddf4a7db50606a5069f923f11" kindref="member">globMessages</ref>(),<sp/>ctx.<ref refid="classshc_1_1ShaderContext_1a3a6d8c9c28e9c7bd6dfd806d77b1ced9" kindref="member">isDebugModeEnabled</ref>());<sp/>});</highlight></codeline>
<codeline lineno="516"><highlight class="normal">}</highlight></codeline>
<codeline lineno="517"><highlight class="normal"></highlight></codeline>
<codeline lineno="518"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classShaderParser_1_1GatherVarShaderEvalCB_1a371829acd19abc128df0ff44bd874a1a" kindref="member">GatherVarShaderEvalCB::eval_endif</ref>(bool_expr<sp/>&amp;e)</highlight></codeline>
<codeline lineno="519"><highlight class="normal">{</highlight></codeline>
<codeline lineno="520"><highlight class="normal"><sp/><sp/>G_ASSERT(dynStack.size()<sp/>&gt;<sp/>0);</highlight></codeline>
<codeline lineno="521"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>v<sp/>=<sp/>dynStack.back();</highlight></codeline>
<codeline lineno="522"><highlight class="normal"><sp/><sp/>dynStack.pop_back();</highlight></codeline>
<codeline lineno="523"><highlight class="normal"></highlight></codeline>
<codeline lineno="524"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(v)</highlight></codeline>
<codeline lineno="525"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="526"><highlight class="normal"><sp/><sp/><sp/><sp/>G_ASSERT(dynCount<sp/>&gt;<sp/>0);</highlight></codeline>
<codeline lineno="527"><highlight class="normal"><sp/><sp/><sp/><sp/>dynCount--;</highlight></codeline>
<codeline lineno="528"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="529"><highlight class="normal"><sp/><sp/>ctx.<ref refid="classshc_1_1ShaderContext_1a2a5bfa488755ef94e3ccc73b650190d2" kindref="member">localHlslSrc</ref>().forEach([&amp;](String<sp/>&amp;src)<sp/>{<sp/>src.append(</highlight><highlight class="stringliteral">&quot;##endif\n&quot;</highlight><highlight class="normal">);<sp/>});</highlight></codeline>
<codeline lineno="530"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="gatherVar.cpp"/>
  </compounddef>
</doxygen>
