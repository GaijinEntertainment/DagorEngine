<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.7" xml:lang="en-US">
  <compounddef id="shExpr_8h" kind="file" language="C++">
    <compoundname>shExpr.h</compoundname>
    <includedby refid="shExpr_8cpp" local="yes">shExpr.cpp</includedby>
    <includedby refid="variantAssembly_8cpp" local="yes">variantAssembly.cpp</includedby>
    <includedby refid="variantAssembly_8h" local="yes">variantAssembly.h</includedby>
    <invincdepgraph>
      <node id="5">
        <label>cppStcodePasses.cpp</label>
        <link refid="cppStcodePasses_8cpp"/>
      </node>
      <node id="2">
        <label>shExpr.cpp</label>
        <link refid="shExpr_8cpp"/>
      </node>
      <node id="1">
        <label>shExpr.h</label>
        <link refid="shExpr_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>shExprParser.cpp</label>
        <link refid="shExprParser_8cpp"/>
      </node>
      <node id="7">
        <label>shsem.cpp</label>
        <link refid="shsem_8cpp"/>
      </node>
      <node id="8">
        <label>variablesMerger.cpp</label>
        <link refid="variablesMerger_8cpp"/>
      </node>
      <node id="3">
        <label>variantAssembly.cpp</label>
        <link refid="variantAssembly_8cpp"/>
      </node>
      <node id="4">
        <label>variantAssembly.h</label>
        <link refid="variantAssembly_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
    <innerclass refid="classShaderParser_1_1Expression" prot="public">ShaderParser::Expression</innerclass>
    <innerclass refid="classShaderParser_1_1ComplexExpression" prot="public">ShaderParser::ComplexExpression</innerclass>
    <innerclass refid="classShaderParser_1_1ColorChannelExpression" prot="public">ShaderParser::ColorChannelExpression</innerclass>
    <innerclass refid="classShaderParser_1_1SingleColorChannelExpression" prot="public">ShaderParser::SingleColorChannelExpression</innerclass>
    <innerclass refid="classShaderParser_1_1MultiColorChannelExpression" prot="public">ShaderParser::MultiColorChannelExpression</innerclass>
    <innerclass refid="classShaderParser_1_1ConstRealValue" prot="public">ShaderParser::ConstRealValue</innerclass>
    <innerclass refid="classShaderParser_1_1ConstColor4Value" prot="public">ShaderParser::ConstColor4Value</innerclass>
    <innerclass refid="classShaderParser_1_1ColorValueExpression" prot="public">ShaderParser::ColorValueExpression</innerclass>
    <innerclass refid="classShaderParser_1_1LVarValueExpression" prot="public">ShaderParser::LVarValueExpression</innerclass>
    <innerclass refid="classShaderParser_1_1StVarValueExpression" prot="public">ShaderParser::StVarValueExpression</innerclass>
    <innerclass refid="classShaderParser_1_1FunctionExpression" prot="public">ShaderParser::FunctionExpression</innerclass>
    <innernamespace refid="namespaceShaderParser">ShaderParser</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/>Copyright<sp/>(C)<sp/>Gaijin<sp/>Games<sp/>KFT.<sp/><sp/>All<sp/>rights<sp/>reserved.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>once</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">/************************************************************************</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/><sp/>support<sp/>for<sp/>shader<sp/>arithemtic<sp/>expressions</highlight></codeline>
<codeline lineno="6"><highlight class="comment"></highlight><highlight class="comment">/************************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;shsyn.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="cppStcodeAssembly_8h" kindref="compound">cppStcodeAssembly.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="stcodeBytecode_8h" kindref="compound">stcodeBytecode.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;EASTL/unique_ptr.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;generic/dag_tab.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;math/dag_color.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;shaders/shExprTypes.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;util/dag_globDef.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="structLocalVar" kindref="compound">LocalVar</ref>;</highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="structParser" kindref="compound">Parser</ref>;</highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespaceShaderParser" kindref="compound">ShaderParser</ref></highlight></codeline>
<codeline lineno="21"><highlight class="normal">{</highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="comment">//************************************************************************</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="comment">//*<sp/>forwards</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="comment">//************************************************************************</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25" refid="namespaceShaderParser_1a732af6cbcecefe1051d9165d3718d702" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>Tab&lt;int&gt;<sp/><ref refid="namespaceShaderParser_1a732af6cbcecefe1051d9165d3718d702" kindref="member">CodeTable</ref>;</highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="comment">/*********************************</highlight></codeline>
<codeline lineno="28"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="29"><highlight class="comment"><sp/>*<sp/>class<sp/>Expression</highlight></codeline>
<codeline lineno="30"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="31"><highlight class="comment"><sp/>*********************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32" refid="classShaderParser_1_1Expression" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classShaderParser_1_1Expression" kindref="compound">Expression</ref></highlight></codeline>
<codeline lineno="33"><highlight class="normal">{</highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>ctor/dtor</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36" refid="classShaderParser_1_1Expression_1a4aeeda4b23b0d2b14c2ad2caab0390c5" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classShaderParser_1_1Expression_1a4aeeda4b23b0d2b14c2ad2caab0390c5" kindref="member">Expression</ref>(Symbol<sp/>*parser_sym)<sp/>:<sp/>unaryOp(shexpr::UOP_POSITIVE),<sp/>parent(NULL),<sp/>parserSym(parser_sym)<sp/>{}</highlight></codeline>
<codeline lineno="37" refid="classShaderParser_1_1Expression_1a9e01aa5ac9dd2e26fa87d4cdd7a042ca" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/><ref refid="classShaderParser_1_1Expression_1a9e01aa5ac9dd2e26fa87d4cdd7a042ca" kindref="member">~Expression</ref>()<sp/>{}</highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>return<sp/>expression<sp/>type</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40" refid="classShaderParser_1_1Expression_1ab8876717d35f647420a5c3bfd7c1c50c" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>shexpr::Type<sp/><ref refid="classShaderParser_1_1Expression_1ab8876717d35f647420a5c3bfd7c1c50c" kindref="member">getType</ref>()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>return<sp/>value<sp/>type</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="43" refid="classShaderParser_1_1Expression_1acc2906c41ab9f1277d513f3c2c97096d" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>shexpr::ValueType<sp/><ref refid="classShaderParser_1_1Expression_1acc2906c41ab9f1277d513f3c2c97096d" kindref="member">getValueType</ref>()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>assembly<sp/>this<sp/>expression</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classShaderParser_1_1Expression_1adf4dc5757229bb9e7a7d50d3cc6d82f0" kindref="member">assembleBytecode</ref>(<ref refid="namespaceShaderParser_1a732af6cbcecefe1051d9165d3718d702" kindref="member">CodeTable</ref><sp/>&amp;code,<sp/><ref refid="classRegister" kindref="compound">Register</ref><sp/>&amp;dest_reg,<sp/><ref refid="classStcodeVMRegisterAllocator" kindref="compound">StcodeVMRegisterAllocator</ref><sp/>&amp;reg_allocator,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>is_integer)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classShaderParser_1_1Expression_1a9487371df0a50670438cc4343d06cdb2" kindref="member">assembleCpp</ref>(<ref refid="structStcodeExpression" kindref="compound">StcodeExpression</ref><sp/>&amp;cpp_expr,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>is_integer)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>check<sp/>convertion</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classShaderParser_1_1Expression_1ac19dd34018b4470ad166a8ab244f981d" kindref="member">canConvert</ref>(shexpr::ValueType<sp/>vt)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>get/set<sp/>operator</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="53" refid="classShaderParser_1_1Expression_1a6438a4e71937292586b86d9e3e1202f9" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classShaderParser_1_1Expression_1a6438a4e71937292586b86d9e3e1202f9" kindref="member">setUnaryOperator</ref>(shexpr::UnaryOperator<sp/>t)<sp/>{<sp/>unaryOp<sp/>=<sp/>t;<sp/>}</highlight></codeline>
<codeline lineno="54" refid="classShaderParser_1_1Expression_1a1ab07814f1b27a6786d043da4e080c44" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>shexpr::UnaryOperator<sp/><ref refid="classShaderParser_1_1Expression_1a1ab07814f1b27a6786d043da4e080c44" kindref="member">getUnaryOperator</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>unaryOp;<sp/>}</highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>get/set<sp/>parent</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="57" refid="classShaderParser_1_1Expression_1a21b42b73baa2d365e975d950b60a613d" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="classShaderParser_1_1Expression" kindref="compound">Expression</ref><sp/>*<ref refid="classShaderParser_1_1Expression_1a21b42b73baa2d365e975d950b60a613d" kindref="member">getParent</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>parent;<sp/>}</highlight></codeline>
<codeline lineno="58" refid="classShaderParser_1_1Expression_1a85fe9b97eae19d91e0affe293d3eefdf" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classShaderParser_1_1Expression_1a85fe9b97eae19d91e0affe293d3eefdf" kindref="member">SetParent</ref>(<ref refid="classShaderParser_1_1Expression" kindref="compound">Expression</ref><sp/>*p)<sp/>{<sp/>parent<sp/>=<sp/>p;<sp/>}</highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>return<sp/>true,<sp/>if<sp/>expression<sp/>has<sp/>only<sp/>numeric<sp/>constants<sp/>and<sp/>local<sp/>variables</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="61" refid="classShaderParser_1_1Expression_1a5cd845a298cd30bc29c1d6176d90d7a5" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classShaderParser_1_1Expression_1a5cd845a298cd30bc29c1d6176d90d7a5" kindref="member">isConst</ref>()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>return<sp/>true,<sp/>if<sp/>expression<sp/>-<sp/>is<sp/>a<sp/>dynamic<sp/>expression</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="64" refid="classShaderParser_1_1Expression_1a6670e4cb77f145766d8e787075ed7da9" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classShaderParser_1_1Expression_1a6670e4cb77f145766d8e787075ed7da9" kindref="member">isDynamic</ref>()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>evaluate<sp/>this<sp/>expression<sp/>as<sp/>real</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classShaderParser_1_1Expression_1a8941f97eca15c43e1ecd37d5c7dc3caf" kindref="member">evaluate</ref>(real<sp/>&amp;out_value,<sp/><ref refid="structParser" kindref="compound">Parser</ref><sp/>&amp;parser)<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>evaluate<sp/>this<sp/>expression<sp/>as<sp/>color4</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classShaderParser_1_1Expression_1a8941f97eca15c43e1ecd37d5c7dc3caf" kindref="member">evaluate</ref>(Color4<sp/>&amp;out_value,<sp/><ref refid="structParser" kindref="compound">Parser</ref><sp/>&amp;parser)<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>evaluate<sp/>all<sp/>avalible<sp/>branches;<sp/>return<sp/>false<sp/>if<sp/>error<sp/>occuried</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="73" refid="classShaderParser_1_1Expression_1a6504a6f642f08f1cf420bebda197efaf" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classShaderParser_1_1Expression_1a6504a6f642f08f1cf420bebda197efaf" kindref="member">collapseNumbers</ref>(<ref refid="structParser" kindref="compound">Parser</ref><sp/>&amp;parser)<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>return<sp/>terminal<sp/>symbol,<sp/>if<sp/>present</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="76" refid="classShaderParser_1_1Expression_1a066eed5146bd48cfcc3acb30a50e9068" refkind="member"><highlight class="normal"><sp/><sp/>Symbol<sp/>*<ref refid="classShaderParser_1_1Expression_1a066eed5146bd48cfcc3acb30a50e9068" kindref="member">getParserSymbol</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>parserSym;<sp/>}</highlight></codeline>
<codeline lineno="77" refid="classShaderParser_1_1Expression_1a63e9f75ae1b742c5ffcbd7aa65b1963a" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>Terminal<sp/>*<ref refid="classShaderParser_1_1Expression_1a63e9f75ae1b742c5ffcbd7aa65b1963a" kindref="member">getTerminal</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;<sp/>}<sp/></highlight><highlight class="comment">//<sp/>Only<sp/>works<sp/>if<sp/>symbol<sp/>is<sp/>a<sp/>terminal</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight></codeline>
<codeline lineno="79" refid="classShaderParser_1_1Expression_1a624688ee88ace66f0cafa9481d4e4536" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="classShaderParser_1_1Expression_1a624688ee88ace66f0cafa9481d4e4536" kindref="member">getChannels</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;<sp/>}</highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>return<sp/>pointer<sp/>to<sp/>symbol<sp/>of<sp/>subexpression<sp/>that<sp/>has<sp/>both<sp/>static<sp/>and<sp/>dynamic<sp/>members,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>nullptr<sp/>if<sp/>it<sp/>does<sp/>not<sp/>exist</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="83" refid="classShaderParser_1_1Expression_1a20844e4f958c20d70cc4824650652f67" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>Symbol<sp/>*<ref refid="classShaderParser_1_1Expression_1a20844e4f958c20d70cc4824650652f67" kindref="member">hasDynamicAndMaterialTermsAt</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>add<sp/>register</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><ref refid="classRegister" kindref="compound">Register</ref><sp/><ref refid="classShaderParser_1_1Expression_1a77ed6f7aab61c1f6367d6c1f5fcfdbb1" kindref="member">allocateRegForResult</ref>(<ref refid="classStcodeVMRegisterAllocator" kindref="compound">StcodeVMRegisterAllocator</ref><sp/>&amp;reg_allocator)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//************************************************************************</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//*<sp/>helper<sp/>functions</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//************************************************************************</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>return<sp/>string<sp/>name</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="classShaderParser_1_1Expression_1a68e771cf9c1584e59c0f5c5e298d3eea" kindref="member">__getName</ref>(shexpr::ValueType<sp/>vt);</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="classShaderParser_1_1Expression_1a68e771cf9c1584e59c0f5c5e298d3eea" kindref="member">__getName</ref>(shexpr::BinaryOperator<sp/>op);</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="classShaderParser_1_1Expression_1a68e771cf9c1584e59c0f5c5e298d3eea" kindref="member">__getName</ref>(shexpr::ColorChannel<sp/>cc);</highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>assembly<sp/>numeric<sp/>constant</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classShaderParser_1_1Expression_1a7cc153456d29d1e3e52ec2d20563b5d1" kindref="member">assembleBytecodeForConstant</ref>(<ref refid="namespaceShaderParser_1a732af6cbcecefe1051d9165d3718d702" kindref="member">CodeTable</ref><sp/>&amp;code,<sp/>real<sp/>v,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dest_reg,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>is_integer);</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classShaderParser_1_1Expression_1a7cc153456d29d1e3e52ec2d20563b5d1" kindref="member">assembleBytecodeForConstant</ref>(<ref refid="namespaceShaderParser_1a732af6cbcecefe1051d9165d3718d702" kindref="member">CodeTable</ref><sp/>&amp;code,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Color4<sp/>&amp;v,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dest_reg);</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classShaderParser_1_1Expression_1a4037bf3eee8071bba8ab6886455769e1" kindref="member">assembleCppForConstant</ref>(<ref refid="structStcodeExpression" kindref="compound">StcodeExpression</ref><sp/>&amp;cpp_expr,<sp/>real<sp/>v,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>is_integer);</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classShaderParser_1_1Expression_1a4037bf3eee8071bba8ab6886455769e1" kindref="member">assembleCppForConstant</ref>(<ref refid="structStcodeExpression" kindref="compound">StcodeExpression</ref><sp/>&amp;cpp_expr,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Color4<sp/>&amp;v);</highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>dump<sp/>to<sp/>debug</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classShaderParser_1_1Expression_1a08d3c7f008450499ebf2ce26a8f346d5" kindref="member">dump</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>level<sp/>=<sp/>0)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal"></highlight><highlight class="keyword">protected</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>dump<sp/>to<sp/>debug</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classShaderParser_1_1Expression_1ae3261bc8b45356c6090bd84db2508fcb" kindref="member">dump_internal</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>level,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*tabs)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><ref refid="classShaderParser_1_1Expression" kindref="compound">Expression</ref><sp/>*parent;</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/>shexpr::UnaryOperator<sp/>unaryOp;</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/>Symbol<sp/>*parserSym;<sp/></highlight><highlight class="comment">//<sp/>for<sp/>errors</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal">};<sp/></highlight><highlight class="comment">//<sp/>class<sp/>Expression</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="115"><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal"></highlight><highlight class="comment">/*********************************</highlight></codeline>
<codeline lineno="117"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="118"><highlight class="comment"><sp/>*<sp/>class<sp/>ComplexExpression</highlight></codeline>
<codeline lineno="119"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="120"><highlight class="comment"><sp/>*********************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="121" refid="classShaderParser_1_1ComplexExpression" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classShaderParser_1_1ComplexExpression" kindref="compound">ComplexExpression</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classShaderParser_1_1Expression" kindref="compound">Expression</ref></highlight></codeline>
<codeline lineno="122"><highlight class="normal">{</highlight></codeline>
<codeline lineno="123"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>ctor/dtor</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><ref refid="classShaderParser_1_1ComplexExpression" kindref="compound">ComplexExpression</ref>(Symbol<sp/>*parser_sym,<sp/>shexpr::ValueType<sp/>vt,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>channel<sp/>=<sp/>-1);</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><ref refid="classShaderParser_1_1ComplexExpression_1a793b5ef8b46b2d5c032d111d5a57b2bc" kindref="member">~ComplexExpression</ref>()<sp/></highlight><highlight class="keyword">override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="127"><highlight class="normal"></highlight></codeline>
<codeline lineno="128" refid="classShaderParser_1_1ComplexExpression_1a4daa1ff85fc33616df59dfa334f2d285" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classShaderParser_1_1ComplexExpression_1a4daa1ff85fc33616df59dfa334f2d285" kindref="member">ComplexExpression</ref>(<ref refid="classShaderParser_1_1ComplexExpression" kindref="compound">ComplexExpression</ref><sp/>&amp;&amp;other)<sp/>=<sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="129"><highlight class="normal"></highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>return<sp/>expression<sp/>type</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="131" refid="classShaderParser_1_1ComplexExpression_1abaeea49f74548b46fcc38a0d09b146bb" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>shexpr::Type<sp/><ref refid="classShaderParser_1_1ComplexExpression_1abaeea49f74548b46fcc38a0d09b146bb" kindref="member">getType</ref>()</highlight><highlight class="keyword"><sp/>const<sp/>override<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>shexpr::E_COMPLEX;<sp/>}</highlight></codeline>
<codeline lineno="132"><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>return<sp/>value<sp/>type</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/>shexpr::ValueType<sp/><ref refid="classShaderParser_1_1ComplexExpression_1a7f8f55c1b66662f2dd471784d111309a" kindref="member">getValueType</ref>()<sp/></highlight><highlight class="keyword">const<sp/>override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="135"><highlight class="normal"></highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>set<sp/>operand</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classShaderParser_1_1ComplexExpression_1a1cfcdaf2ee0204346bde3a7961720734" kindref="member">setOperand</ref>(shexpr::OperandType<sp/>op,<sp/><ref refid="classShaderParser_1_1Expression" kindref="compound">Expression</ref><sp/>*child);</highlight></codeline>
<codeline lineno="138"><highlight class="normal"></highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>add<sp/>user<sp/>operand</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classShaderParser_1_1ComplexExpression_1a493d9259f604e81c3545d2c8e88b0727" kindref="member">addOperand</ref>(<ref refid="classShaderParser_1_1Expression" kindref="compound">Expression</ref><sp/>*child,<sp/>shexpr::BinaryOperator<sp/>t);</highlight></codeline>
<codeline lineno="141"><highlight class="normal"></highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>assembly<sp/>this<sp/>expression</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classShaderParser_1_1ComplexExpression_1a6ea797735f195ab719d1df1e22f4d562" kindref="member">assembleBytecode</ref>(<ref refid="namespaceShaderParser_1a732af6cbcecefe1051d9165d3718d702" kindref="member">CodeTable</ref><sp/>&amp;code,<sp/><ref refid="classRegister" kindref="compound">Register</ref><sp/>&amp;dest_reg,<sp/><ref refid="classStcodeVMRegisterAllocator" kindref="compound">StcodeVMRegisterAllocator</ref><sp/>&amp;reg_allocator,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>is_integer)<sp/></highlight><highlight class="keyword">const<sp/>override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classShaderParser_1_1ComplexExpression_1a01dc2bc138b372bde6ed31372e4d6cbf" kindref="member">assembleCpp</ref>(<ref refid="structStcodeExpression" kindref="compound">StcodeExpression</ref><sp/>&amp;cpp_expr,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>is_integer)<sp/></highlight><highlight class="keyword">const<sp/>override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="145"><highlight class="normal"></highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>check<sp/>convertion</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classShaderParser_1_1ComplexExpression_1a1f6ee737b43f1de2ecbb05f5bbe49ec5" kindref="member">canConvert</ref>(shexpr::ValueType<sp/>vt)<sp/></highlight><highlight class="keyword">const<sp/>override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="148"><highlight class="normal"></highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>get/set<sp/>operator</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classShaderParser_1_1ComplexExpression_1af8b4d5be02c293d55ebf28f396ef582d" kindref="member">setBinOperator</ref>(shexpr::OperandType<sp/>op,<sp/>shexpr::BinaryOperator<sp/>t);</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/>shexpr::BinaryOperator<sp/><ref refid="classShaderParser_1_1ComplexExpression_1a1d01b970349ba568a83f6bfac7abf2ae" kindref="member">getBinOperator</ref>(shexpr::OperandType<sp/>op)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="152"><highlight class="normal"></highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>return<sp/>operator<sp/>for<sp/>specific<sp/>expression.<sp/>return<sp/>UNDEFINED,<sp/>if<sp/>operator<sp/>not<sp/>found</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/>shexpr::BinaryOperator<sp/><ref refid="classShaderParser_1_1ComplexExpression_1a1d01b970349ba568a83f6bfac7abf2ae" kindref="member">getBinOperator</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classShaderParser_1_1Expression" kindref="compound">Expression</ref><sp/>*e)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="155"><highlight class="normal"></highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>return<sp/>operand</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="157" refid="classShaderParser_1_1ComplexExpression_1a09025279d6667970b8562d9b5f35cabf" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="classShaderParser_1_1Expression" kindref="compound">Expression</ref><sp/>*<ref refid="classShaderParser_1_1ComplexExpression_1a09025279d6667970b8562d9b5f35cabf" kindref="member">getOperand</ref>(shexpr::OperandType<sp/>t)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>t<sp/>&lt;<sp/>0<sp/>?<sp/>nullptr<sp/>:<sp/>operands[t];<sp/>}</highlight></codeline>
<codeline lineno="158" refid="classShaderParser_1_1ComplexExpression_1a5b6822895ad0240bfade8d320d455e0f" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classShaderParser_1_1Expression" kindref="compound">Expression</ref><sp/>*<ref refid="classShaderParser_1_1ComplexExpression_1a5b6822895ad0240bfade8d320d455e0f" kindref="member">getOperand</ref>(shexpr::OperandType<sp/>t)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>t<sp/>&lt;<sp/>0<sp/>?<sp/>nullptr<sp/>:<sp/>operands[t];<sp/>}</highlight></codeline>
<codeline lineno="159"><highlight class="normal"></highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>return<sp/>true,<sp/>if<sp/>expression<sp/>has<sp/>only<sp/>numeric<sp/>constants<sp/>and<sp/>local<sp/>variables</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classShaderParser_1_1ComplexExpression_1a7194e5c6d1440272d923f2a43f91b323" kindref="member">isConst</ref>()<sp/></highlight><highlight class="keyword">const<sp/>override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="162"><highlight class="normal"></highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>return<sp/>true,<sp/>if<sp/>expression<sp/>-<sp/>is<sp/>a<sp/>dynamic<sp/>expression</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classShaderParser_1_1ComplexExpression_1a16bdebae479907f7361ce4fbfaa6f05e" kindref="member">isDynamic</ref>()<sp/></highlight><highlight class="keyword">const<sp/>override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="165"><highlight class="normal"></highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>evaluate<sp/>this<sp/>expression<sp/>as<sp/>real</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classShaderParser_1_1ComplexExpression_1a17a106337e194f2f9768a8e2a45abb8d" kindref="member">evaluate</ref>(real<sp/>&amp;out_value,<sp/><ref refid="structParser" kindref="compound">Parser</ref><sp/>&amp;parser)<sp/></highlight><highlight class="keyword">override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="168"><highlight class="normal"></highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>evaluate<sp/>this<sp/>expression<sp/>as<sp/>color4</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classShaderParser_1_1ComplexExpression_1a17a106337e194f2f9768a8e2a45abb8d" kindref="member">evaluate</ref>(Color4<sp/>&amp;out_value,<sp/><ref refid="structParser" kindref="compound">Parser</ref><sp/>&amp;parser)<sp/></highlight><highlight class="keyword">override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="171"><highlight class="normal"></highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>set<sp/>last<sp/>binary<sp/>operator<sp/>(used<sp/>in<sp/>setOperand,<sp/>if<sp/>operand_type<sp/>is<sp/>USER)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="173" refid="classShaderParser_1_1ComplexExpression_1a4e909ce00fe124c5200e02e48e2bd41c" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classShaderParser_1_1ComplexExpression_1a4e909ce00fe124c5200e02e48e2bd41c" kindref="member">setLastBinOp</ref>(shexpr::BinaryOperator<sp/>bop)<sp/>{<sp/>lastBinOp<sp/>=<sp/>bop;<sp/>}</highlight></codeline>
<codeline lineno="174"><highlight class="normal"></highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>return<sp/>operand<sp/>count</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="176" refid="classShaderParser_1_1ComplexExpression_1a30afe78dd5ce4f77ff127d91ca0fa9e4" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="classShaderParser_1_1ComplexExpression_1a30afe78dd5ce4f77ff127d91ca0fa9e4" kindref="member">getOperandCount</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>operands.size();<sp/>}</highlight></codeline>
<codeline lineno="177"><highlight class="normal"></highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/>Symbol<sp/>*<ref refid="classShaderParser_1_1ComplexExpression_1a7d82b28b4591cd98358adaf95cb62164" kindref="member">hasDynamicAndMaterialTermsAt</ref>()<sp/></highlight><highlight class="keyword">const<sp/>override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="179"><highlight class="normal"></highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>evaluate<sp/>all<sp/>avalible<sp/>branches;<sp/>return<sp/>false<sp/>if<sp/>error<sp/>occuried</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classShaderParser_1_1ComplexExpression_1a16fa3be80484ab01a7e1bbc713c53b68" kindref="member">collapseNumbers</ref>(<ref refid="structParser" kindref="compound">Parser</ref><sp/>&amp;parser)<sp/></highlight><highlight class="keyword">override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="182"><highlight class="normal"></highlight></codeline>
<codeline lineno="183" refid="classShaderParser_1_1ComplexExpression_1a64324bc6708bb2c23085c7e26439e940" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="classShaderParser_1_1ComplexExpression_1a64324bc6708bb2c23085c7e26439e940" kindref="member">getCurrentChannel</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>currentChannel;<sp/>}</highlight></codeline>
<codeline lineno="184" refid="classShaderParser_1_1ComplexExpression_1ac2d7c6dc761850ca65206441da5b880e" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classShaderParser_1_1ComplexExpression_1ac2d7c6dc761850ca65206441da5b880e" kindref="member">setChannels</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>count)<sp/>{<sp/>channels<sp/>=<sp/>eastl::max(channels,<sp/>count);<sp/>}</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="classShaderParser_1_1ComplexExpression_1ac2fe7fc73b1e22177129c4465a6609eb" kindref="member">getChannels</ref>()<sp/></highlight><highlight class="keyword">const<sp/>override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="186"><highlight class="normal"></highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classShaderParser_1_1ComplexExpression_1a695de7886520cd4b45f36355857a6674" kindref="member">validate</ref>(<ref refid="structParser" kindref="compound">Parser</ref><sp/>&amp;parser)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="188"><highlight class="normal"></highlight></codeline>
<codeline lineno="189"><highlight class="normal"></highlight><highlight class="keyword">protected</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>resize<sp/>operands</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classShaderParser_1_1ComplexExpression_1a60faa0e90cdf70dbe209bdaf52089424" kindref="member">resizeOperands</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>count);</highlight></codeline>
<codeline lineno="192"><highlight class="normal"></highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>dump<sp/>to<sp/>debug</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classShaderParser_1_1ComplexExpression_1a297558e23345f9282e9d9b75ac44ecf2" kindref="member">dump_internal</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>level,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*tabs)<sp/></highlight><highlight class="keyword">const<sp/>override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="195"><highlight class="normal"></highlight></codeline>
<codeline lineno="196"><highlight class="normal"></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/>Tab&lt;Expression<sp/>*&gt;<sp/>operands;</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/>Tab&lt;shexpr::BinaryOperator&gt;<sp/>binOp;</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/>shexpr::ValueType<sp/>baseValueType;</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/>shexpr::BinaryOperator<sp/>lastBinOp;</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>currentChannel;</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>channels<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="203"><highlight class="normal">};<sp/></highlight><highlight class="comment">//<sp/>class<sp/>ComplexExpression</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="204"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="205"><highlight class="normal"></highlight></codeline>
<codeline lineno="206"><highlight class="normal"></highlight></codeline>
<codeline lineno="207"><highlight class="normal"></highlight><highlight class="comment">/*********************************</highlight></codeline>
<codeline lineno="208"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="209"><highlight class="comment"><sp/>*<sp/>class<sp/>ColorChannelExpression</highlight></codeline>
<codeline lineno="210"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="211"><highlight class="comment"><sp/>*********************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="212" refid="classShaderParser_1_1ColorChannelExpression" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classShaderParser_1_1ColorChannelExpression" kindref="compound">ColorChannelExpression</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classShaderParser_1_1Expression" kindref="compound">Expression</ref></highlight></codeline>
<codeline lineno="213"><highlight class="normal">{</highlight></codeline>
<codeline lineno="214"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>ctor/dtor</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="216" refid="classShaderParser_1_1ColorChannelExpression_1a33663661e4ed05807d7e30e943dd654b" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classShaderParser_1_1ColorChannelExpression_1a33663661e4ed05807d7e30e943dd654b" kindref="member">ColorChannelExpression</ref>(Terminal<sp/>*s)<sp/>:<sp/><ref refid="classShaderParser_1_1Expression" kindref="compound">Expression</ref>(s)<sp/>{}</highlight></codeline>
<codeline lineno="217"><highlight class="normal"></highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>return<sp/>expression<sp/>type</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="219" refid="classShaderParser_1_1ColorChannelExpression_1a283d759ed61f8b58be2792a7da7a1946" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>shexpr::Type<sp/><ref refid="classShaderParser_1_1ColorChannelExpression_1a283d759ed61f8b58be2792a7da7a1946" kindref="member">getType</ref>()</highlight><highlight class="keyword"><sp/>const<sp/>override<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>shexpr::E_COLOR_CHANNEL;<sp/>}</highlight></codeline>
<codeline lineno="220"><highlight class="normal"></highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>return<sp/>true,<sp/>if<sp/>expression<sp/>has<sp/>only<sp/>numeric<sp/>constants<sp/>and<sp/>local<sp/>variables</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="222" refid="classShaderParser_1_1ColorChannelExpression_1a95fe662a6d979b5d4fa93f252c26d456" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classShaderParser_1_1ColorChannelExpression_1a95fe662a6d979b5d4fa93f252c26d456" kindref="member">isConst</ref>()</highlight><highlight class="keyword"><sp/>const<sp/>override<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classShaderParser_1_1ColorChannelExpression_1acb738bdb2f1c713407c2ca75ffa866b4" kindref="member">child</ref>-&gt;isConst();<sp/>}</highlight></codeline>
<codeline lineno="223"><highlight class="normal"></highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>return<sp/>true,<sp/>if<sp/>expression<sp/>-<sp/>is<sp/>a<sp/>dynamic<sp/>expression</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="225" refid="classShaderParser_1_1ColorChannelExpression_1ac83da685f248d7f6864d62165fc562b5" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classShaderParser_1_1ColorChannelExpression_1ac83da685f248d7f6864d62165fc562b5" kindref="member">isDynamic</ref>()</highlight><highlight class="keyword"><sp/>const<sp/>override<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classShaderParser_1_1ColorChannelExpression_1acb738bdb2f1c713407c2ca75ffa866b4" kindref="member">child</ref>-&gt;isDynamic();<sp/>}</highlight></codeline>
<codeline lineno="226"><highlight class="normal"></highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>get/set<sp/>child</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="228" refid="classShaderParser_1_1ColorChannelExpression_1ae5e7fceccb9082feb174a87f747fb170" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classShaderParser_1_1Expression" kindref="compound">Expression</ref><sp/>*<ref refid="classShaderParser_1_1ColorChannelExpression_1ae5e7fceccb9082feb174a87f747fb170" kindref="member">getChild</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classShaderParser_1_1ColorChannelExpression_1acb738bdb2f1c713407c2ca75ffa866b4" kindref="member">child</ref>.get();<sp/>}</highlight></codeline>
<codeline lineno="229" refid="classShaderParser_1_1ColorChannelExpression_1a9645ea025110cb5b36d73abea81a549a" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classShaderParser_1_1ColorChannelExpression_1a9645ea025110cb5b36d73abea81a549a" kindref="member">setChild</ref>(<ref refid="classShaderParser_1_1Expression" kindref="compound">Expression</ref><sp/>*v)<sp/>{<sp/><ref refid="classShaderParser_1_1ColorChannelExpression_1acb738bdb2f1c713407c2ca75ffa866b4" kindref="member">child</ref>.reset(v);<sp/>}</highlight></codeline>
<codeline lineno="230"><highlight class="normal"></highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>return<sp/>terminal<sp/>symbol,<sp/>if<sp/>present</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="232" refid="classShaderParser_1_1ColorChannelExpression_1aa81a68a7672936ba4804ced027623354" refkind="member"><highlight class="normal"><sp/><sp/>Terminal<sp/>*<ref refid="classShaderParser_1_1ColorChannelExpression_1aa81a68a7672936ba4804ced027623354" kindref="member">getTerminal</ref>()</highlight><highlight class="keyword"><sp/>const<sp/>override<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(Terminal<sp/>*)<ref refid="classShaderParser_1_1Expression_1a066eed5146bd48cfcc3acb30a50e9068" kindref="member">getParserSymbol</ref>();<sp/>}</highlight></codeline>
<codeline lineno="233"><highlight class="normal"></highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>evaluate<sp/>all<sp/>avalible<sp/>branches;<sp/>return<sp/>false<sp/>if<sp/>error<sp/>occuried</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="235" refid="classShaderParser_1_1ColorChannelExpression_1a0155330eb5dae83e0d56d7e526932132" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classShaderParser_1_1ColorChannelExpression_1a0155330eb5dae83e0d56d7e526932132" kindref="member">collapseNumbers</ref>(<ref refid="structParser" kindref="compound">Parser</ref><sp/>&amp;parser)</highlight><highlight class="keyword"><sp/>override<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classShaderParser_1_1ColorChannelExpression_1acb738bdb2f1c713407c2ca75ffa866b4" kindref="member">child</ref>-&gt;collapseNumbers(parser);<sp/>}</highlight></codeline>
<codeline lineno="236"><highlight class="normal"></highlight></codeline>
<codeline lineno="237"><highlight class="normal"></highlight><highlight class="keyword">protected</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="238" refid="classShaderParser_1_1ColorChannelExpression_1acb738bdb2f1c713407c2ca75ffa866b4" refkind="member"><highlight class="normal"><sp/><sp/>eastl::unique_ptr&lt;Expression&gt;<sp/><ref refid="classShaderParser_1_1ColorChannelExpression_1acb738bdb2f1c713407c2ca75ffa866b4" kindref="member">child</ref>;</highlight></codeline>
<codeline lineno="239"><highlight class="normal">};<sp/></highlight><highlight class="comment">//<sp/>class<sp/>ColorChannelExpression</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="240"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="241"><highlight class="normal"></highlight></codeline>
<codeline lineno="242"><highlight class="normal"></highlight></codeline>
<codeline lineno="243"><highlight class="normal"></highlight><highlight class="comment">/*********************************</highlight></codeline>
<codeline lineno="244"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="245"><highlight class="comment"><sp/>*<sp/>class<sp/>SingleColorChannelExpression</highlight></codeline>
<codeline lineno="246"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="247"><highlight class="comment"><sp/>*********************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="248" refid="classShaderParser_1_1SingleColorChannelExpression" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classShaderParser_1_1SingleColorChannelExpression" kindref="compound">SingleColorChannelExpression</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classShaderParser_1_1ColorChannelExpression" kindref="compound">ColorChannelExpression</ref></highlight></codeline>
<codeline lineno="249"><highlight class="normal">{</highlight></codeline>
<codeline lineno="250"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>ctor/dtor</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><ref refid="classShaderParser_1_1SingleColorChannelExpression" kindref="compound">SingleColorChannelExpression</ref>(Terminal<sp/>*s,<sp/>shexpr::ColorChannel<sp/>cc);</highlight></codeline>
<codeline lineno="253"><highlight class="normal"></highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>return<sp/>value<sp/>type</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="255" refid="classShaderParser_1_1SingleColorChannelExpression_1a3d7542112cf0a479f666d1faad6c0ea1" refkind="member"><highlight class="normal"><sp/><sp/>shexpr::ValueType<sp/><ref refid="classShaderParser_1_1SingleColorChannelExpression_1a3d7542112cf0a479f666d1faad6c0ea1" kindref="member">getValueType</ref>()</highlight><highlight class="keyword"><sp/>const<sp/>override<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>shexpr::VT_REAL;<sp/>}</highlight></codeline>
<codeline lineno="256"><highlight class="normal"></highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>assembly<sp/>this<sp/>expression</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classShaderParser_1_1SingleColorChannelExpression_1a2be4627ffaf4483c23d205cbf5bc30d5" kindref="member">assembleBytecode</ref>(<ref refid="namespaceShaderParser_1a732af6cbcecefe1051d9165d3718d702" kindref="member">CodeTable</ref><sp/>&amp;code,<sp/><ref refid="classRegister" kindref="compound">Register</ref><sp/>&amp;dest_reg,<sp/><ref refid="classStcodeVMRegisterAllocator" kindref="compound">StcodeVMRegisterAllocator</ref><sp/>&amp;reg_allocator,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>is_integer)<sp/></highlight><highlight class="keyword">const<sp/>override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classShaderParser_1_1SingleColorChannelExpression_1ae2877687d5d67b8d677b37142737cffc" kindref="member">assembleCpp</ref>(<ref refid="structStcodeExpression" kindref="compound">StcodeExpression</ref><sp/>&amp;cpp_expr,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>is_integer)<sp/></highlight><highlight class="keyword">const<sp/>override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="260"><highlight class="normal"></highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>evaluate<sp/>this<sp/>expression<sp/>as<sp/>real</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classShaderParser_1_1SingleColorChannelExpression_1aa81c400ed78862b9224cce51671a73d2" kindref="member">evaluate</ref>(real<sp/>&amp;out_value,<sp/><ref refid="structParser" kindref="compound">Parser</ref><sp/>&amp;parser)<sp/></highlight><highlight class="keyword">override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="263"><highlight class="normal"></highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>evaluate<sp/>this<sp/>expression<sp/>as<sp/>color4</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classShaderParser_1_1SingleColorChannelExpression_1aa81c400ed78862b9224cce51671a73d2" kindref="member">evaluate</ref>(Color4<sp/>&amp;out_value,<sp/><ref refid="structParser" kindref="compound">Parser</ref><sp/>&amp;parser)<sp/></highlight><highlight class="keyword">override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="266"><highlight class="normal"></highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>return<sp/>terminal<sp/>symbol,<sp/>if<sp/>present</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="268" refid="classShaderParser_1_1SingleColorChannelExpression_1a92d6e9e07882447bb2d0a3311db553ec" refkind="member"><highlight class="normal"><sp/><sp/>Terminal<sp/>*<ref refid="classShaderParser_1_1SingleColorChannelExpression_1a92d6e9e07882447bb2d0a3311db553ec" kindref="member">getTerminal</ref>()</highlight><highlight class="keyword"><sp/>const<sp/>override<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(Terminal<sp/>*)<ref refid="classShaderParser_1_1Expression_1a066eed5146bd48cfcc3acb30a50e9068" kindref="member">getParserSymbol</ref>();<sp/>}</highlight></codeline>
<codeline lineno="269"><highlight class="normal"></highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>get/set<sp/>color<sp/>channel</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="271" refid="classShaderParser_1_1SingleColorChannelExpression_1ace68d2a5e86ac7b5c799c2f5c5fa85b3" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>shexpr::ColorChannel<sp/><ref refid="classShaderParser_1_1SingleColorChannelExpression_1ace68d2a5e86ac7b5c799c2f5c5fa85b3" kindref="member">getColorChannel</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>colorChannel;<sp/>}</highlight></codeline>
<codeline lineno="272" refid="classShaderParser_1_1SingleColorChannelExpression_1ab28a3ead802f9af12a2d6a1bf189364f" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classShaderParser_1_1SingleColorChannelExpression_1ab28a3ead802f9af12a2d6a1bf189364f" kindref="member">setColorChannel</ref>(shexpr::ColorChannel<sp/>c)</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/>G_ASSERT(c<sp/>!=<sp/>shexpr::_CC_UNDEFINED);</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/>colorChannel<sp/>=<sp/>c;</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="277"><highlight class="normal"></highlight></codeline>
<codeline lineno="278"><highlight class="normal"></highlight><highlight class="keyword">protected</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>dump<sp/>to<sp/>debug</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classShaderParser_1_1SingleColorChannelExpression_1af8afa677d8e2e52f8fbb86b0b22330c4" kindref="member">dump_internal</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>level,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*tabs)<sp/></highlight><highlight class="keyword">const<sp/>override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="281"><highlight class="normal"></highlight></codeline>
<codeline lineno="282"><highlight class="normal"></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/>shexpr::ColorChannel<sp/>colorChannel<sp/>=<sp/>shexpr::_CC_UNDEFINED;</highlight></codeline>
<codeline lineno="284"><highlight class="normal">};<sp/></highlight><highlight class="comment">//<sp/>class<sp/>SingleColorChannelExpression</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="285"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="286"><highlight class="normal"></highlight></codeline>
<codeline lineno="287"><highlight class="normal"></highlight></codeline>
<codeline lineno="288"><highlight class="normal"></highlight><highlight class="comment">/*********************************</highlight></codeline>
<codeline lineno="289"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="290"><highlight class="comment"><sp/>*<sp/>class<sp/>MultiColorChannelExpression</highlight></codeline>
<codeline lineno="291"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="292"><highlight class="comment"><sp/>*********************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="293" refid="classShaderParser_1_1MultiColorChannelExpression" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classShaderParser_1_1MultiColorChannelExpression" kindref="compound">MultiColorChannelExpression</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classShaderParser_1_1ColorChannelExpression" kindref="compound">ColorChannelExpression</ref></highlight></codeline>
<codeline lineno="294"><highlight class="normal">{</highlight></codeline>
<codeline lineno="295"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="296" refid="classShaderParser_1_1MultiColorChannelExpression_1a518493115ff44c61f6ff52b00f9fa4ab" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal"><ref refid="classShaderParser_1_1MultiColorChannelExpression_1a518493115ff44c61f6ff52b00f9fa4ab" kindref="member">ChannelMask</ref><sp/>=<sp/>eastl::fixed_vector&lt;shexpr::ColorChannel,<sp/>4,<sp/>false&gt;;</highlight></codeline>
<codeline lineno="297"><highlight class="normal"></highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>ctor/dtor</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><ref refid="classShaderParser_1_1MultiColorChannelExpression" kindref="compound">MultiColorChannelExpression</ref>(Terminal<sp/>*s,<sp/><ref refid="classShaderParser_1_1MultiColorChannelExpression_1a518493115ff44c61f6ff52b00f9fa4ab" kindref="member">ChannelMask</ref><sp/>mask);</highlight></codeline>
<codeline lineno="300"><highlight class="normal"></highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>return<sp/>value<sp/>type</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="302" refid="classShaderParser_1_1MultiColorChannelExpression_1acf56b906cfdc2ef363729d20c174c78b" refkind="member"><highlight class="normal"><sp/><sp/>shexpr::ValueType<sp/><ref refid="classShaderParser_1_1MultiColorChannelExpression_1acf56b906cfdc2ef363729d20c174c78b" kindref="member">getValueType</ref>()</highlight><highlight class="keyword"><sp/>const<sp/>override<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>shexpr::VT_COLOR4;<sp/>}</highlight></codeline>
<codeline lineno="303"><highlight class="normal"></highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>assembly<sp/>this<sp/>expression</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classShaderParser_1_1MultiColorChannelExpression_1aa715a3cd3971440e86f5a6b603349780" kindref="member">assembleBytecode</ref>(<ref refid="namespaceShaderParser_1a732af6cbcecefe1051d9165d3718d702" kindref="member">CodeTable</ref><sp/>&amp;code,<sp/><ref refid="classRegister" kindref="compound">Register</ref><sp/>&amp;dest_reg,<sp/><ref refid="classStcodeVMRegisterAllocator" kindref="compound">StcodeVMRegisterAllocator</ref><sp/>&amp;reg_allocator,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>is_integer)<sp/></highlight><highlight class="keyword">const<sp/>override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classShaderParser_1_1MultiColorChannelExpression_1a490a95ce0b3f52d197d0430b9e04ce9c" kindref="member">assembleCpp</ref>(<ref refid="structStcodeExpression" kindref="compound">StcodeExpression</ref><sp/>&amp;cpp_expr,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>is_integer)<sp/></highlight><highlight class="keyword">const<sp/>override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="307"><highlight class="normal"></highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>evaluate<sp/>this<sp/>expression<sp/>as<sp/>real</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="309" refid="classShaderParser_1_1MultiColorChannelExpression_1ad253514a8b2bf70f5ad56b037b8a2d8e" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classShaderParser_1_1MultiColorChannelExpression_1ad253514a8b2bf70f5ad56b037b8a2d8e" kindref="member">evaluate</ref>(real<sp/>&amp;out_value,<sp/><ref refid="structParser" kindref="compound">Parser</ref><sp/>&amp;parser)</highlight><highlight class="keyword"><sp/>override<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="310"><highlight class="normal"></highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>evaluate<sp/>this<sp/>expression<sp/>as<sp/>color4</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classShaderParser_1_1MultiColorChannelExpression_1ad253514a8b2bf70f5ad56b037b8a2d8e" kindref="member">evaluate</ref>(Color4<sp/>&amp;out_value,<sp/><ref refid="structParser" kindref="compound">Parser</ref><sp/>&amp;parser)<sp/></highlight><highlight class="keyword">override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="313"><highlight class="normal"></highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>return<sp/>terminal<sp/>symbol,<sp/>if<sp/>present</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="315" refid="classShaderParser_1_1MultiColorChannelExpression_1ab45d4e0c5c8be65b9dcde932772ed71d" refkind="member"><highlight class="normal"><sp/><sp/>Terminal<sp/>*<ref refid="classShaderParser_1_1MultiColorChannelExpression_1ab45d4e0c5c8be65b9dcde932772ed71d" kindref="member">getTerminal</ref>()</highlight><highlight class="keyword"><sp/>const<sp/>override<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(Terminal<sp/>*)<ref refid="classShaderParser_1_1Expression_1a066eed5146bd48cfcc3acb30a50e9068" kindref="member">getParserSymbol</ref>();<sp/>}</highlight></codeline>
<codeline lineno="316"><highlight class="normal"></highlight></codeline>
<codeline lineno="317" refid="classShaderParser_1_1MultiColorChannelExpression_1aeb043986daa6fd0c77927c88bd20b629" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="classShaderParser_1_1MultiColorChannelExpression_1aeb043986daa6fd0c77927c88bd20b629" kindref="member">getChannels</ref>()</highlight><highlight class="keyword"><sp/>const<sp/>override<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>channels.size();<sp/>}</highlight></codeline>
<codeline lineno="318"><highlight class="normal"></highlight></codeline>
<codeline lineno="319"><highlight class="normal"></highlight><highlight class="keyword">protected</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>dump<sp/>to<sp/>debug</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classShaderParser_1_1MultiColorChannelExpression_1a7c5922613d5761cfc21a50bf3c2e3255" kindref="member">dump_internal</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>level,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*tabs)<sp/></highlight><highlight class="keyword">const<sp/>override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="322"><highlight class="normal"></highlight></codeline>
<codeline lineno="323"><highlight class="normal"></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><ref refid="classShaderParser_1_1MultiColorChannelExpression_1a518493115ff44c61f6ff52b00f9fa4ab" kindref="member">ChannelMask</ref><sp/>channels;</highlight></codeline>
<codeline lineno="325"><highlight class="normal">};<sp/></highlight><highlight class="comment">//<sp/>class<sp/>MultiColorChannelExpression</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="326"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="327"><highlight class="normal"></highlight></codeline>
<codeline lineno="328"><highlight class="normal"></highlight></codeline>
<codeline lineno="329"><highlight class="normal"></highlight><highlight class="comment">/*********************************</highlight></codeline>
<codeline lineno="330"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="331"><highlight class="comment"><sp/>*<sp/>class<sp/>ConstRealValue</highlight></codeline>
<codeline lineno="332"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="333"><highlight class="comment"><sp/>*********************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="334" refid="classShaderParser_1_1ConstRealValue" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classShaderParser_1_1ConstRealValue" kindref="compound">ConstRealValue</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classShaderParser_1_1Expression" kindref="compound">Expression</ref></highlight></codeline>
<codeline lineno="335"><highlight class="normal">{</highlight></codeline>
<codeline lineno="336"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>ctor/dtor</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><ref refid="classShaderParser_1_1ConstRealValue" kindref="compound">ConstRealValue</ref>(Terminal<sp/>*s,<sp/>real<sp/>v<sp/>=<sp/>0);</highlight></codeline>
<codeline lineno="339"><highlight class="normal"></highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>return<sp/>expression<sp/>type</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="341" refid="classShaderParser_1_1ConstRealValue_1a100b77607372a4189c6c3bd5937cbefb" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>shexpr::Type<sp/><ref refid="classShaderParser_1_1ConstRealValue_1a100b77607372a4189c6c3bd5937cbefb" kindref="member">getType</ref>()</highlight><highlight class="keyword"><sp/>const<sp/>override<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>shexpr::E_CONST_VALUE;<sp/>}</highlight></codeline>
<codeline lineno="342"><highlight class="normal"></highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>return<sp/>value<sp/>type</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="344" refid="classShaderParser_1_1ConstRealValue_1a57ee112e12d4b11cebcf34e8e71d0b71" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>shexpr::ValueType<sp/><ref refid="classShaderParser_1_1ConstRealValue_1a57ee112e12d4b11cebcf34e8e71d0b71" kindref="member">getValueType</ref>()</highlight><highlight class="keyword"><sp/>const<sp/>override<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>shexpr::VT_REAL;<sp/>}</highlight></codeline>
<codeline lineno="345"><highlight class="normal"></highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>assembly<sp/>this<sp/>expression</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classShaderParser_1_1ConstRealValue_1a11150a1ddef4090a113bb510bae6d994" kindref="member">assembleBytecode</ref>(<ref refid="namespaceShaderParser_1a732af6cbcecefe1051d9165d3718d702" kindref="member">CodeTable</ref><sp/>&amp;code,<sp/><ref refid="classRegister" kindref="compound">Register</ref><sp/>&amp;dest_reg,<sp/><ref refid="classStcodeVMRegisterAllocator" kindref="compound">StcodeVMRegisterAllocator</ref><sp/>&amp;reg_allocator,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>is_integer)<sp/></highlight><highlight class="keyword">const<sp/>override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classShaderParser_1_1ConstRealValue_1a278ba5a03fa343b8bbb37b86b8ac9072" kindref="member">assembleCpp</ref>(<ref refid="structStcodeExpression" kindref="compound">StcodeExpression</ref><sp/>&amp;cpp_expr,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>is_integer)<sp/></highlight><highlight class="keyword">const<sp/>override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="349"><highlight class="normal"></highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>get<sp/>associated<sp/>value</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="351" refid="classShaderParser_1_1ConstRealValue_1a4e52237639942403c7ec30fa73fc9a1d" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>real<sp/><ref refid="classShaderParser_1_1ConstRealValue_1a4e52237639942403c7ec30fa73fc9a1d" kindref="member">getReal</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>value;<sp/>}</highlight></codeline>
<codeline lineno="352"><highlight class="normal"></highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>set<sp/>associated<sp/>value</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classShaderParser_1_1ConstRealValue_1aeb3cee6868d60a27d051c3b8da6d4013" kindref="member">setValue</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>real<sp/>v,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>validate_nan,<sp/><ref refid="structParser" kindref="compound">Parser</ref><sp/>&amp;parser);</highlight></codeline>
<codeline lineno="355"><highlight class="normal"></highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>get<sp/>converted<sp/>value<sp/>to<sp/>specified<sp/>type</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Color4<sp/>&amp;<ref refid="classShaderParser_1_1ConstRealValue_1a048a6444ff7ef8270d593ad96756ec20" kindref="member">getConvertedColor</ref>()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>real<sp/><ref refid="classShaderParser_1_1ConstRealValue_1ac3012515df60c9cabbc36e173eb77aec" kindref="member">getConvertedReal</ref>()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="359"><highlight class="normal"></highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>return<sp/>true,<sp/>if<sp/>expression<sp/>has<sp/>only<sp/>numeric<sp/>constants<sp/>and<sp/>local<sp/>variables</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="361" refid="classShaderParser_1_1ConstRealValue_1ac6cef603cabb406eb363ea35e2499896" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classShaderParser_1_1ConstRealValue_1ac6cef603cabb406eb363ea35e2499896" kindref="member">isConst</ref>()</highlight><highlight class="keyword"><sp/>const<sp/>override<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="362"><highlight class="normal"></highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>return<sp/>true,<sp/>if<sp/>expression<sp/>-<sp/>is<sp/>a<sp/>dynamic<sp/>expression</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="364" refid="classShaderParser_1_1ConstRealValue_1a773ff3e880c3c623beae143dcbc87dd6" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classShaderParser_1_1ConstRealValue_1a773ff3e880c3c623beae143dcbc87dd6" kindref="member">isDynamic</ref>()</highlight><highlight class="keyword"><sp/>const<sp/>override<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="365"><highlight class="normal"></highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>evaluate<sp/>this<sp/>expression<sp/>as<sp/>real</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classShaderParser_1_1ConstRealValue_1a1a2c9c9229d16753369a7327de7d927b" kindref="member">evaluate</ref>(real<sp/>&amp;out_value,<sp/><ref refid="structParser" kindref="compound">Parser</ref><sp/>&amp;parser)<sp/></highlight><highlight class="keyword">override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="368"><highlight class="normal"></highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>evaluate<sp/>this<sp/>expression<sp/>as<sp/>color4</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classShaderParser_1_1ConstRealValue_1a1a2c9c9229d16753369a7327de7d927b" kindref="member">evaluate</ref>(Color4<sp/>&amp;out_value,<sp/><ref refid="structParser" kindref="compound">Parser</ref><sp/>&amp;parser)<sp/></highlight><highlight class="keyword">override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="371"><highlight class="normal"></highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>return<sp/>terminal<sp/>symbol,<sp/>if<sp/>present</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="373" refid="classShaderParser_1_1ConstRealValue_1a20d924abd6279d99bc43da6a71ad8e83" refkind="member"><highlight class="normal"><sp/><sp/>Terminal<sp/>*<ref refid="classShaderParser_1_1ConstRealValue_1a20d924abd6279d99bc43da6a71ad8e83" kindref="member">getTerminal</ref>()</highlight><highlight class="keyword"><sp/>const<sp/>override<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(Terminal<sp/>*)<ref refid="classShaderParser_1_1Expression_1a066eed5146bd48cfcc3acb30a50e9068" kindref="member">getParserSymbol</ref>();<sp/>}</highlight></codeline>
<codeline lineno="374"><highlight class="normal"></highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>evaluate<sp/>all<sp/>avalible<sp/>branches;<sp/>return<sp/>false<sp/>if<sp/>error<sp/>occuried</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="376" refid="classShaderParser_1_1ConstRealValue_1ae8f55034acde026abb34233b2a021174" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classShaderParser_1_1ConstRealValue_1ae8f55034acde026abb34233b2a021174" kindref="member">collapseNumbers</ref>(<ref refid="structParser" kindref="compound">Parser</ref><sp/>&amp;parser)</highlight><highlight class="keyword"><sp/>override<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="377"><highlight class="normal"></highlight></codeline>
<codeline lineno="378"><highlight class="normal"></highlight><highlight class="keyword">protected</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>dump<sp/>to<sp/>debug</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classShaderParser_1_1ConstRealValue_1a95383f2702bc96cf6713c0b908d09a17" kindref="member">dump_internal</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>level,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*tabs)<sp/></highlight><highlight class="keyword">const<sp/>override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="381"><highlight class="normal"></highlight></codeline>
<codeline lineno="382"><highlight class="normal"></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/>real<sp/>value;</highlight></codeline>
<codeline lineno="384"><highlight class="normal">};<sp/></highlight><highlight class="comment">//<sp/>class<sp/>ConstRealValue</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="385"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="386"><highlight class="normal"></highlight></codeline>
<codeline lineno="387"><highlight class="normal"></highlight></codeline>
<codeline lineno="388"><highlight class="normal"></highlight><highlight class="comment">/*********************************</highlight></codeline>
<codeline lineno="389"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="390"><highlight class="comment"><sp/>*<sp/>class<sp/>ConstColor4Value</highlight></codeline>
<codeline lineno="391"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="392"><highlight class="comment"><sp/>*********************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="393" refid="classShaderParser_1_1ConstColor4Value" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classShaderParser_1_1ConstColor4Value" kindref="compound">ConstColor4Value</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classShaderParser_1_1Expression" kindref="compound">Expression</ref></highlight></codeline>
<codeline lineno="394"><highlight class="normal">{</highlight></codeline>
<codeline lineno="395"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>ctor/dtor</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/><ref refid="classShaderParser_1_1ConstColor4Value" kindref="compound">ConstColor4Value</ref>(Terminal<sp/>*s,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Color4<sp/>&amp;v<sp/>=<sp/>Color4(0,<sp/>0,<sp/>0,<sp/>0));</highlight></codeline>
<codeline lineno="398"><highlight class="normal"></highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>return<sp/>expression<sp/>type</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="400" refid="classShaderParser_1_1ConstColor4Value_1a569fc50df0b0b6856519cdeeda1e32fa" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>shexpr::Type<sp/><ref refid="classShaderParser_1_1ConstColor4Value_1a569fc50df0b0b6856519cdeeda1e32fa" kindref="member">getType</ref>()</highlight><highlight class="keyword"><sp/>const<sp/>override<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>shexpr::E_CONST_COLOR4;<sp/>}</highlight></codeline>
<codeline lineno="401"><highlight class="normal"></highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>return<sp/>value<sp/>type</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="403" refid="classShaderParser_1_1ConstColor4Value_1a8d1678e9360104a5fb81aa79ad3d8233" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>shexpr::ValueType<sp/><ref refid="classShaderParser_1_1ConstColor4Value_1a8d1678e9360104a5fb81aa79ad3d8233" kindref="member">getValueType</ref>()</highlight><highlight class="keyword"><sp/>const<sp/>override<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>shexpr::VT_COLOR4;<sp/>}</highlight></codeline>
<codeline lineno="404"><highlight class="normal"></highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>assembly<sp/>this<sp/>expression</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classShaderParser_1_1ConstColor4Value_1aa1746206ae1903934192be0dd811d25b" kindref="member">assembleBytecode</ref>(<ref refid="namespaceShaderParser_1a732af6cbcecefe1051d9165d3718d702" kindref="member">CodeTable</ref><sp/>&amp;code,<sp/><ref refid="classRegister" kindref="compound">Register</ref><sp/>&amp;dest_reg,<sp/><ref refid="classStcodeVMRegisterAllocator" kindref="compound">StcodeVMRegisterAllocator</ref><sp/>&amp;reg_allocator,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>is_integer)<sp/></highlight><highlight class="keyword">const<sp/>override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classShaderParser_1_1ConstColor4Value_1ab941266415cc8ebe95c805425d8262d9" kindref="member">assembleCpp</ref>(<ref refid="structStcodeExpression" kindref="compound">StcodeExpression</ref><sp/>&amp;cpp_expr,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>is_integer)<sp/></highlight><highlight class="keyword">const<sp/>override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="408"><highlight class="normal"></highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>set<sp/>associated<sp/>value</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classShaderParser_1_1ConstColor4Value_1a548447c0524e5854161f600fa3e14d14" kindref="member">setValue</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Color4<sp/>&amp;v);</highlight></codeline>
<codeline lineno="411"><highlight class="normal"></highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>get<sp/>converted<sp/>value<sp/>to<sp/>specified<sp/>type</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Color4<sp/>&amp;<ref refid="classShaderParser_1_1ConstColor4Value_1abbdcfa7d83f2d7ec9eb029d7116953bf" kindref="member">getConvertedColor</ref>()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>real<sp/><ref refid="classShaderParser_1_1ConstColor4Value_1a7be9949a391b4b3710837b281021b393" kindref="member">getConvertedReal</ref>()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="415"><highlight class="normal"></highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>return<sp/>true,<sp/>if<sp/>expression<sp/>has<sp/>only<sp/>numeric<sp/>constants<sp/>and<sp/>local<sp/>variables</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="417" refid="classShaderParser_1_1ConstColor4Value_1ad662d7b82b67f428e26c1879978f780f" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classShaderParser_1_1ConstColor4Value_1ad662d7b82b67f428e26c1879978f780f" kindref="member">isConst</ref>()</highlight><highlight class="keyword"><sp/>const<sp/>override<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="418"><highlight class="normal"></highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>return<sp/>true,<sp/>if<sp/>expression<sp/>-<sp/>is<sp/>a<sp/>dynamic<sp/>expression</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="420" refid="classShaderParser_1_1ConstColor4Value_1ab3f40506560a5c0ea91be98462bf3cec" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classShaderParser_1_1ConstColor4Value_1ab3f40506560a5c0ea91be98462bf3cec" kindref="member">isDynamic</ref>()</highlight><highlight class="keyword"><sp/>const<sp/>override<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="421"><highlight class="normal"></highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>evaluate<sp/>this<sp/>expression<sp/>as<sp/>real</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classShaderParser_1_1ConstColor4Value_1a5a1a2a084c350273d596e0dbcdf6c277" kindref="member">evaluate</ref>(real<sp/>&amp;out_value,<sp/><ref refid="structParser" kindref="compound">Parser</ref><sp/>&amp;parser)<sp/></highlight><highlight class="keyword">override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="424"><highlight class="normal"></highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>evaluate<sp/>this<sp/>expression<sp/>as<sp/>color4</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classShaderParser_1_1ConstColor4Value_1a5a1a2a084c350273d596e0dbcdf6c277" kindref="member">evaluate</ref>(Color4<sp/>&amp;out_value,<sp/><ref refid="structParser" kindref="compound">Parser</ref><sp/>&amp;parser)<sp/></highlight><highlight class="keyword">override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="427"><highlight class="normal"></highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>return<sp/>terminal<sp/>symbol,<sp/>if<sp/>present</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="429" refid="classShaderParser_1_1ConstColor4Value_1a4424c3463ff19f3824387a0d8e418c7b" refkind="member"><highlight class="normal"><sp/><sp/>Terminal<sp/>*<ref refid="classShaderParser_1_1ConstColor4Value_1a4424c3463ff19f3824387a0d8e418c7b" kindref="member">getTerminal</ref>()</highlight><highlight class="keyword"><sp/>const<sp/>override<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(Terminal<sp/>*)<ref refid="classShaderParser_1_1Expression_1a066eed5146bd48cfcc3acb30a50e9068" kindref="member">getParserSymbol</ref>();<sp/>}</highlight></codeline>
<codeline lineno="430"><highlight class="normal"></highlight></codeline>
<codeline lineno="431" refid="classShaderParser_1_1ConstColor4Value_1a860ded90ad774d5bf101b78b9c734b8e" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="classShaderParser_1_1ConstColor4Value_1a860ded90ad774d5bf101b78b9c734b8e" kindref="member">getChannels</ref>()</highlight><highlight class="keyword"><sp/>const<sp/>override<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>4;<sp/>}</highlight></codeline>
<codeline lineno="432"><highlight class="normal"></highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>evaluate<sp/>all<sp/>avalible<sp/>branches;<sp/>return<sp/>false<sp/>if<sp/>error<sp/>occuried</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="434" refid="classShaderParser_1_1ConstColor4Value_1af5e400c34c53b4eb8b2812a20e856127" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classShaderParser_1_1ConstColor4Value_1af5e400c34c53b4eb8b2812a20e856127" kindref="member">collapseNumbers</ref>(<ref refid="structParser" kindref="compound">Parser</ref><sp/>&amp;parser)</highlight><highlight class="keyword"><sp/>override<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="435"><highlight class="normal"></highlight></codeline>
<codeline lineno="436"><highlight class="normal"></highlight><highlight class="keyword">protected</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>dump<sp/>to<sp/>debug</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classShaderParser_1_1ConstColor4Value_1afd93fe82e75d74af73dfdf205129567e" kindref="member">dump_internal</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>level,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*tabs)<sp/></highlight><highlight class="keyword">const<sp/>override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="439"><highlight class="normal"></highlight></codeline>
<codeline lineno="440"><highlight class="normal"></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/>Color4<sp/>value;</highlight></codeline>
<codeline lineno="442"><highlight class="normal">};<sp/></highlight><highlight class="comment">//<sp/>class<sp/>ConstColor4Value</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="443"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="444"><highlight class="normal"></highlight></codeline>
<codeline lineno="445"><highlight class="normal"></highlight></codeline>
<codeline lineno="446"><highlight class="normal"></highlight><highlight class="comment">/*********************************</highlight></codeline>
<codeline lineno="447"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="448"><highlight class="comment"><sp/>*<sp/>class<sp/>ColorValueExpression</highlight></codeline>
<codeline lineno="449"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="450"><highlight class="comment"><sp/>*********************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="451" refid="classShaderParser_1_1ColorValueExpression" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classShaderParser_1_1ColorValueExpression" kindref="compound">ColorValueExpression</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classShaderParser_1_1ComplexExpression" kindref="compound">ComplexExpression</ref></highlight></codeline>
<codeline lineno="452"><highlight class="normal">{</highlight></codeline>
<codeline lineno="453"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>ctor/dtor</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/><ref refid="classShaderParser_1_1ColorValueExpression" kindref="compound">ColorValueExpression</ref>(Terminal<sp/>*s);</highlight></codeline>
<codeline lineno="456"><highlight class="normal"></highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>return<sp/>expression<sp/>type</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="458" refid="classShaderParser_1_1ColorValueExpression_1a58e68b670d5f408896ae1f1d1fbb0fb9" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>shexpr::Type<sp/><ref refid="classShaderParser_1_1ColorValueExpression_1a58e68b670d5f408896ae1f1d1fbb0fb9" kindref="member">getType</ref>()</highlight><highlight class="keyword"><sp/>const<sp/>override<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>shexpr::E_COLOR_VALUE;<sp/>}</highlight></codeline>
<codeline lineno="459"><highlight class="normal"></highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>return<sp/>value<sp/>type</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="461" refid="classShaderParser_1_1ColorValueExpression_1aa677e0f46de9bee9c1389324d2bc15d1" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>shexpr::ValueType<sp/><ref refid="classShaderParser_1_1ColorValueExpression_1aa677e0f46de9bee9c1389324d2bc15d1" kindref="member">getValueType</ref>()</highlight><highlight class="keyword"><sp/>const<sp/>override<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>shexpr::VT_COLOR4;<sp/>}</highlight></codeline>
<codeline lineno="462"><highlight class="normal"></highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>check<sp/>convertion</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="464" refid="classShaderParser_1_1ColorValueExpression_1a53263625aca5ca771982e61ba025e264" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classShaderParser_1_1ColorValueExpression_1a53263625aca5ca771982e61ba025e264" kindref="member">canConvert</ref>(shexpr::ValueType<sp/>vt)</highlight><highlight class="keyword"><sp/>const<sp/>override<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classShaderParser_1_1ColorValueExpression_1aa677e0f46de9bee9c1389324d2bc15d1" kindref="member">getValueType</ref>()<sp/>==<sp/>vt;<sp/>}</highlight></codeline>
<codeline lineno="465"><highlight class="normal"></highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>evaluate<sp/>this<sp/>expression<sp/>as<sp/>real</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="467"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classShaderParser_1_1ColorValueExpression_1a8d9ab9acc195ec696a74533ce4f48d00" kindref="member">evaluate</ref>(real<sp/>&amp;out_value,<sp/><ref refid="structParser" kindref="compound">Parser</ref><sp/>&amp;parser)<sp/></highlight><highlight class="keyword">override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="468"><highlight class="normal"></highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>evaluate<sp/>this<sp/>expression<sp/>as<sp/>color4</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classShaderParser_1_1ColorValueExpression_1a8d9ab9acc195ec696a74533ce4f48d00" kindref="member">evaluate</ref>(Color4<sp/>&amp;out_value,<sp/><ref refid="structParser" kindref="compound">Parser</ref><sp/>&amp;parser)<sp/></highlight><highlight class="keyword">override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="471"><highlight class="normal"></highlight></codeline>
<codeline lineno="472"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>return<sp/>terminal<sp/>symbol,<sp/>if<sp/>present</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="473" refid="classShaderParser_1_1ColorValueExpression_1ad0541026bf01f6c45b6f2e2fc34c4251" refkind="member"><highlight class="normal"><sp/><sp/>Terminal<sp/>*<ref refid="classShaderParser_1_1ColorValueExpression_1ad0541026bf01f6c45b6f2e2fc34c4251" kindref="member">getTerminal</ref>()</highlight><highlight class="keyword"><sp/>const<sp/>override<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(Terminal<sp/>*)<ref refid="classShaderParser_1_1Expression_1a066eed5146bd48cfcc3acb30a50e9068" kindref="member">getParserSymbol</ref>();<sp/>}</highlight></codeline>
<codeline lineno="474"><highlight class="normal"></highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>assembly<sp/>this<sp/>expression</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classShaderParser_1_1ColorValueExpression_1ac70c52bfd10fc141e39585dc74e7c5ac" kindref="member">assembleBytecode</ref>(<ref refid="namespaceShaderParser_1a732af6cbcecefe1051d9165d3718d702" kindref="member">CodeTable</ref><sp/>&amp;code,<sp/><ref refid="classRegister" kindref="compound">Register</ref><sp/>&amp;dest_reg,<sp/><ref refid="classStcodeVMRegisterAllocator" kindref="compound">StcodeVMRegisterAllocator</ref><sp/>&amp;reg_allocator,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>is_integer)<sp/></highlight><highlight class="keyword">const<sp/>override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="477"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classShaderParser_1_1ColorValueExpression_1a1116216acf29e6a77e5d620129a933e2" kindref="member">assembleCpp</ref>(<ref refid="structStcodeExpression" kindref="compound">StcodeExpression</ref><sp/>&amp;cpp_expr,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>is_integer)<sp/></highlight><highlight class="keyword">const<sp/>override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="478"><highlight class="normal"></highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>evaluate<sp/>all<sp/>avalible<sp/>branches;<sp/>return<sp/>false<sp/>if<sp/>error<sp/>occuried</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="480"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classShaderParser_1_1ColorValueExpression_1ad0f1cead895d0beb20ce067ff2597b8b" kindref="member">collapseNumbers</ref>(<ref refid="structParser" kindref="compound">Parser</ref><sp/>&amp;parser)<sp/></highlight><highlight class="keyword">override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="481" refid="classShaderParser_1_1ColorValueExpression_1a7fec4ffeb9dad68b606e3ad21d77d696" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="classShaderParser_1_1ColorValueExpression_1a7fec4ffeb9dad68b606e3ad21d77d696" kindref="member">getChannels</ref>()</highlight><highlight class="keyword"><sp/>const<sp/>override<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>4;<sp/>}</highlight></codeline>
<codeline lineno="482" refid="classShaderParser_1_1ColorValueExpression_1a221bbe17d5ce1b8455968837923f8c8b" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classShaderParser_1_1ColorValueExpression_1a221bbe17d5ce1b8455968837923f8c8b" kindref="member">validate</ref>(<ref refid="structParser" kindref="compound">Parser</ref><sp/>&amp;parser)</highlight><highlight class="keyword"><sp/>const<sp/>override<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="483"><highlight class="normal"></highlight></codeline>
<codeline lineno="484"><highlight class="normal"></highlight><highlight class="keyword">protected</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="485"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>dump<sp/>to<sp/>debug</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="486"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classShaderParser_1_1ColorValueExpression_1aadf77bd6e16d8c776718a43881fe900f" kindref="member">dump_internal</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>level,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*tabs)<sp/></highlight><highlight class="keyword">const<sp/>override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="487"><highlight class="normal">};<sp/></highlight><highlight class="comment">//<sp/>class<sp/>ColorValueExpression</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="488"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="489"><highlight class="normal"></highlight></codeline>
<codeline lineno="490"><highlight class="normal"></highlight></codeline>
<codeline lineno="491"><highlight class="normal"></highlight><highlight class="comment">/*********************************</highlight></codeline>
<codeline lineno="492"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="493"><highlight class="comment"><sp/>*<sp/>class<sp/>LVarValueExpression</highlight></codeline>
<codeline lineno="494"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="495"><highlight class="comment"><sp/>*********************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="496" refid="classShaderParser_1_1LVarValueExpression" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classShaderParser_1_1LVarValueExpression" kindref="compound">LVarValueExpression</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classShaderParser_1_1Expression" kindref="compound">Expression</ref></highlight></codeline>
<codeline lineno="497"><highlight class="normal">{</highlight></codeline>
<codeline lineno="498"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="499"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>ctor/dtor</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="500"><highlight class="normal"><sp/><sp/><ref refid="classShaderParser_1_1LVarValueExpression" kindref="compound">LVarValueExpression</ref>(Terminal<sp/>*s,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structLocalVar" kindref="compound">LocalVar</ref><sp/>&amp;var);</highlight></codeline>
<codeline lineno="501"><highlight class="normal"></highlight></codeline>
<codeline lineno="502"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>return<sp/>expression<sp/>type</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="503" refid="classShaderParser_1_1LVarValueExpression_1a74ca390d1f6c25e2cc018fdd7d031ec8" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>shexpr::Type<sp/><ref refid="classShaderParser_1_1LVarValueExpression_1a74ca390d1f6c25e2cc018fdd7d031ec8" kindref="member">getType</ref>()</highlight><highlight class="keyword"><sp/>const<sp/>override<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>shexpr::E_LVAR_VALUE;<sp/>}</highlight></codeline>
<codeline lineno="504"><highlight class="normal"></highlight></codeline>
<codeline lineno="505"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>return<sp/>value<sp/>type</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="506"><highlight class="normal"><sp/><sp/>shexpr::ValueType<sp/><ref refid="classShaderParser_1_1LVarValueExpression_1abddd6c7a42162921b169c2d5c57485be" kindref="member">getValueType</ref>()<sp/></highlight><highlight class="keyword">const<sp/>override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="507"><highlight class="normal"></highlight></codeline>
<codeline lineno="508"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>assembly<sp/>this<sp/>expression</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="509"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classShaderParser_1_1LVarValueExpression_1a8db294081e3dfc8d66e0d4c042066fd7" kindref="member">assembleBytecode</ref>(<ref refid="namespaceShaderParser_1a732af6cbcecefe1051d9165d3718d702" kindref="member">CodeTable</ref><sp/>&amp;code,<sp/><ref refid="classRegister" kindref="compound">Register</ref><sp/>&amp;dest_reg,<sp/><ref refid="classStcodeVMRegisterAllocator" kindref="compound">StcodeVMRegisterAllocator</ref><sp/>&amp;reg_allocator,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>is_integer)<sp/></highlight><highlight class="keyword">const<sp/>override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="510"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classShaderParser_1_1LVarValueExpression_1a8e477ea0da64c00d95bdf925c9d42d64" kindref="member">assembleCpp</ref>(<ref refid="structStcodeExpression" kindref="compound">StcodeExpression</ref><sp/>&amp;cpp_expr,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>is_integer)<sp/></highlight><highlight class="keyword">const<sp/>override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="511"><highlight class="normal"></highlight></codeline>
<codeline lineno="512"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>check<sp/>convertion<sp/>-<sp/>if<sp/>fail,<sp/>report<sp/>error<sp/>&amp;<sp/>return<sp/>false</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="513"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classShaderParser_1_1LVarValueExpression_1a0f49a4d29619519ebc68f81492f9d1c3" kindref="member">canConvert</ref>(shexpr::ValueType<sp/>vt)<sp/></highlight><highlight class="keyword">const<sp/>override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="514"><highlight class="normal"></highlight></codeline>
<codeline lineno="515"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>return<sp/>true,<sp/>if<sp/>expression<sp/>has<sp/>only<sp/>numeric<sp/>constants<sp/>and<sp/>constant<sp/>local<sp/>variables</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="516"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classShaderParser_1_1LVarValueExpression_1a00f0120434dc1f9136cec143b8d9118c" kindref="member">isConst</ref>()<sp/></highlight><highlight class="keyword">const<sp/>override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="517"><highlight class="normal"></highlight></codeline>
<codeline lineno="518"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>return<sp/>true,<sp/>if<sp/>expression<sp/>-<sp/>is<sp/>a<sp/>dynamic<sp/>expression</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="519"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classShaderParser_1_1LVarValueExpression_1a931670ebd73affa517160b77c98bbe6c" kindref="member">isDynamic</ref>()<sp/></highlight><highlight class="keyword">const<sp/>override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="520"><highlight class="normal"></highlight></codeline>
<codeline lineno="521"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>evaluate<sp/>this<sp/>expression<sp/>as<sp/>real</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="522"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classShaderParser_1_1LVarValueExpression_1a2e94316249c1db7d1427118a3c6f14ee" kindref="member">evaluate</ref>(real<sp/>&amp;out_value,<sp/><ref refid="structParser" kindref="compound">Parser</ref><sp/>&amp;parser)<sp/></highlight><highlight class="keyword">override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="523"><highlight class="normal"></highlight></codeline>
<codeline lineno="524"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>evaluate<sp/>this<sp/>expression<sp/>as<sp/>color4</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="525"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classShaderParser_1_1LVarValueExpression_1a2e94316249c1db7d1427118a3c6f14ee" kindref="member">evaluate</ref>(Color4<sp/>&amp;out_value,<sp/><ref refid="structParser" kindref="compound">Parser</ref><sp/>&amp;parser)<sp/></highlight><highlight class="keyword">override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="526"><highlight class="normal"></highlight></codeline>
<codeline lineno="527"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>return<sp/>terminal<sp/>symbol,<sp/>if<sp/>present</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="528" refid="classShaderParser_1_1LVarValueExpression_1a4fa703c29696a8451f705b613b34c9c8" refkind="member"><highlight class="normal"><sp/><sp/>Terminal<sp/>*<ref refid="classShaderParser_1_1LVarValueExpression_1a4fa703c29696a8451f705b613b34c9c8" kindref="member">getTerminal</ref>()</highlight><highlight class="keyword"><sp/>const<sp/>override<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(Terminal<sp/>*)<ref refid="classShaderParser_1_1Expression_1a066eed5146bd48cfcc3acb30a50e9068" kindref="member">getParserSymbol</ref>();<sp/>}</highlight></codeline>
<codeline lineno="529"><highlight class="normal"></highlight></codeline>
<codeline lineno="530"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>evaluate<sp/>all<sp/>avalible<sp/>branches;<sp/>return<sp/>false<sp/>if<sp/>error<sp/>occuried</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="531" refid="classShaderParser_1_1LVarValueExpression_1a3470ba2d32c293b696e5cdbd98135255" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classShaderParser_1_1LVarValueExpression_1a3470ba2d32c293b696e5cdbd98135255" kindref="member">collapseNumbers</ref>(<ref refid="structParser" kindref="compound">Parser</ref><sp/>&amp;parser)</highlight><highlight class="keyword"><sp/>override<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="532"><highlight class="normal"></highlight></codeline>
<codeline lineno="533" refid="classShaderParser_1_1LVarValueExpression_1aa4c83faa60dd239c1f36de3a96d13327" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="classShaderParser_1_1LVarValueExpression_1aa4c83faa60dd239c1f36de3a96d13327" kindref="member">getChannels</ref>()</highlight><highlight class="keyword"><sp/>const<sp/>override<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classShaderParser_1_1LVarValueExpression_1abddd6c7a42162921b169c2d5c57485be" kindref="member">getValueType</ref>()<sp/>==<sp/>shexpr::VT_COLOR4<sp/>?<sp/>4<sp/>:<sp/>1;<sp/>}</highlight></codeline>
<codeline lineno="534"><highlight class="normal"></highlight></codeline>
<codeline lineno="535"><highlight class="normal"><sp/><sp/>Symbol<sp/>*<ref refid="classShaderParser_1_1LVarValueExpression_1aebd84483be176f31106ba922d3ae5fd0" kindref="member">hasDynamicAndMaterialTermsAt</ref>()<sp/></highlight><highlight class="keyword">const<sp/>override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="536"><highlight class="normal"></highlight></codeline>
<codeline lineno="537"><highlight class="normal"></highlight><highlight class="keyword">protected</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="538"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>dump<sp/>to<sp/>debug</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="539"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classShaderParser_1_1LVarValueExpression_1ae89787d21775ed39ad324ed43b63ea2b" kindref="member">dump_internal</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>level,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*tabs)<sp/></highlight><highlight class="keyword">const<sp/>override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="540"><highlight class="normal"></highlight></codeline>
<codeline lineno="541"><highlight class="normal"></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="542"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structLocalVar" kindref="compound">LocalVar</ref><sp/>&amp;var;</highlight></codeline>
<codeline lineno="543"><highlight class="normal">};<sp/></highlight><highlight class="comment">//<sp/>class<sp/>LVarValueExpression</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="544"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="545"><highlight class="normal"></highlight></codeline>
<codeline lineno="546"><highlight class="normal"></highlight><highlight class="comment">/*********************************</highlight></codeline>
<codeline lineno="547"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="548"><highlight class="comment"><sp/>*<sp/>class<sp/>StVarValueExpression</highlight></codeline>
<codeline lineno="549"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="550"><highlight class="comment"><sp/>*********************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="551" refid="classShaderParser_1_1StVarValueExpression" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classShaderParser_1_1StVarValueExpression" kindref="compound">StVarValueExpression</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classShaderParser_1_1Expression" kindref="compound">Expression</ref></highlight></codeline>
<codeline lineno="552"><highlight class="normal">{</highlight></codeline>
<codeline lineno="553"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="554"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>ctor/dtor</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="555"><highlight class="normal"><sp/><sp/><ref refid="classShaderParser_1_1StVarValueExpression" kindref="compound">StVarValueExpression</ref>(Terminal<sp/>*s,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>var_id,<sp/>shexpr::ValueType<sp/>vt,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>is_dynamic,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>is_global,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>is_int);</highlight></codeline>
<codeline lineno="556"><highlight class="normal"></highlight></codeline>
<codeline lineno="557"><highlight class="normal"><sp/><sp/><ref refid="classShaderParser_1_1StVarValueExpression_1a2eb317f90ea45e38ad4b37606ee7d62c" kindref="member">~StVarValueExpression</ref>()<sp/></highlight><highlight class="keyword">override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="558"><highlight class="normal"></highlight></codeline>
<codeline lineno="559"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>return<sp/>expression<sp/>type</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="560" refid="classShaderParser_1_1StVarValueExpression_1ab4e9a88ae316cc6a97ec050219d24a70" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>shexpr::Type<sp/><ref refid="classShaderParser_1_1StVarValueExpression_1ab4e9a88ae316cc6a97ec050219d24a70" kindref="member">getType</ref>()</highlight><highlight class="keyword"><sp/>const<sp/>override<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>shexpr::E_STVAR_VALUE;<sp/>}</highlight></codeline>
<codeline lineno="561"><highlight class="normal"></highlight></codeline>
<codeline lineno="562"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>return<sp/>value<sp/>type</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="563" refid="classShaderParser_1_1StVarValueExpression_1a9f996d2995866eb138d273fa85f95019" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>shexpr::ValueType<sp/><ref refid="classShaderParser_1_1StVarValueExpression_1a9f996d2995866eb138d273fa85f95019" kindref="member">getValueType</ref>()</highlight><highlight class="keyword"><sp/>const<sp/>override<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>valueType;<sp/>}</highlight></codeline>
<codeline lineno="564"><highlight class="normal"></highlight></codeline>
<codeline lineno="565"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>assembly<sp/>this<sp/>expression</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="566"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classShaderParser_1_1StVarValueExpression_1aec6340a071ff4cce2b0962644738384b" kindref="member">assembleBytecode</ref>(<ref refid="namespaceShaderParser_1a732af6cbcecefe1051d9165d3718d702" kindref="member">CodeTable</ref><sp/>&amp;code,<sp/><ref refid="classRegister" kindref="compound">Register</ref><sp/>&amp;dest_reg,<sp/><ref refid="classStcodeVMRegisterAllocator" kindref="compound">StcodeVMRegisterAllocator</ref><sp/>&amp;reg_allocator,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>is_integer)<sp/></highlight><highlight class="keyword">const<sp/>override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="567"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classShaderParser_1_1StVarValueExpression_1a4a7bf1ddd4f8f4cb3cf5e63d6b9a6e7b" kindref="member">assembleCpp</ref>(<ref refid="structStcodeExpression" kindref="compound">StcodeExpression</ref><sp/>&amp;cpp_expr,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>is_integer)<sp/></highlight><highlight class="keyword">const<sp/>override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="568"><highlight class="normal"></highlight></codeline>
<codeline lineno="569"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>return<sp/>true,<sp/>if<sp/>expression<sp/>has<sp/>only<sp/>numeric<sp/>constants<sp/>and<sp/>constant<sp/>local<sp/>variables</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="570" refid="classShaderParser_1_1StVarValueExpression_1ae117b9df5454b41d947b3423820f4b48" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classShaderParser_1_1StVarValueExpression_1ae117b9df5454b41d947b3423820f4b48" kindref="member">isConst</ref>()</highlight><highlight class="keyword"><sp/>const<sp/>override<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="571"><highlight class="normal"></highlight></codeline>
<codeline lineno="572"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>return<sp/>true,<sp/>if<sp/>expression<sp/>-<sp/>is<sp/>a<sp/>dynamic<sp/>expression</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="573" refid="classShaderParser_1_1StVarValueExpression_1a4558073b696ec879a4b82482fd41558d" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classShaderParser_1_1StVarValueExpression_1a4558073b696ec879a4b82482fd41558d" kindref="member">isDynamic</ref>()</highlight><highlight class="keyword"><sp/>const<sp/>override<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>isDynamicFlag;<sp/>}</highlight></codeline>
<codeline lineno="574"><highlight class="normal"></highlight></codeline>
<codeline lineno="575"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>evaluate<sp/>this<sp/>expression<sp/>as<sp/>real</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="576"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classShaderParser_1_1StVarValueExpression_1a0a837b4215cbf2e18fdf57a1b3f2f12b" kindref="member">evaluate</ref>(real<sp/>&amp;out_value,<sp/><ref refid="structParser" kindref="compound">Parser</ref><sp/>&amp;parser)<sp/></highlight><highlight class="keyword">override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="577"><highlight class="normal"></highlight></codeline>
<codeline lineno="578"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>evaluate<sp/>this<sp/>expression<sp/>as<sp/>color4</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="579"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classShaderParser_1_1StVarValueExpression_1a0a837b4215cbf2e18fdf57a1b3f2f12b" kindref="member">evaluate</ref>(Color4<sp/>&amp;out_value,<sp/><ref refid="structParser" kindref="compound">Parser</ref><sp/>&amp;parser)<sp/></highlight><highlight class="keyword">override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="580"><highlight class="normal"></highlight></codeline>
<codeline lineno="581"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>return<sp/>terminal<sp/>symbol,<sp/>if<sp/>present</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="582" refid="classShaderParser_1_1StVarValueExpression_1af2db04305a753533783ea661e167a2b2" refkind="member"><highlight class="normal"><sp/><sp/>Terminal<sp/>*<ref refid="classShaderParser_1_1StVarValueExpression_1af2db04305a753533783ea661e167a2b2" kindref="member">getTerminal</ref>()</highlight><highlight class="keyword"><sp/>const<sp/>override<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(Terminal<sp/>*)<ref refid="classShaderParser_1_1Expression_1a066eed5146bd48cfcc3acb30a50e9068" kindref="member">getParserSymbol</ref>();<sp/>}</highlight></codeline>
<codeline lineno="583"><highlight class="normal"></highlight></codeline>
<codeline lineno="584"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>evaluate<sp/>all<sp/>avalible<sp/>branches;<sp/>return<sp/>false<sp/>if<sp/>error<sp/>occuried</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="585" refid="classShaderParser_1_1StVarValueExpression_1a87d67152a7ee7b12b8461abf8d9f9d9a" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classShaderParser_1_1StVarValueExpression_1a87d67152a7ee7b12b8461abf8d9f9d9a" kindref="member">collapseNumbers</ref>(<ref refid="structParser" kindref="compound">Parser</ref><sp/>&amp;parser)</highlight><highlight class="keyword"><sp/>override<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="586"><highlight class="normal"></highlight></codeline>
<codeline lineno="587" refid="classShaderParser_1_1StVarValueExpression_1a76695c661161f292b30bd445b008456d" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="classShaderParser_1_1StVarValueExpression_1a76695c661161f292b30bd445b008456d" kindref="member">getChannels</ref>()</highlight><highlight class="keyword"><sp/>const<sp/>override<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classShaderParser_1_1StVarValueExpression_1a9f996d2995866eb138d273fa85f95019" kindref="member">getValueType</ref>()<sp/>==<sp/>shexpr::VT_COLOR4<sp/>?<sp/>4<sp/>:<sp/>1;<sp/>}</highlight></codeline>
<codeline lineno="588"><highlight class="normal"></highlight></codeline>
<codeline lineno="589"><highlight class="normal"></highlight></codeline>
<codeline lineno="590"><highlight class="normal"></highlight><highlight class="keyword">protected</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="591"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>dump<sp/>to<sp/>debug</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="592"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classShaderParser_1_1StVarValueExpression_1a0a552f1b4936efbd505d39ddc76718b8" kindref="member">dump_internal</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>level,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*tabs)<sp/></highlight><highlight class="keyword">const<sp/>override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="593"><highlight class="normal"></highlight></codeline>
<codeline lineno="594"><highlight class="normal"></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="595"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>varId;</highlight></codeline>
<codeline lineno="596"><highlight class="normal"><sp/><sp/>shexpr::ValueType<sp/>valueType;</highlight></codeline>
<codeline lineno="597"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isDynamicFlag;</highlight></codeline>
<codeline lineno="598"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isGlobalFlag;</highlight></codeline>
<codeline lineno="599"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isInteger;</highlight></codeline>
<codeline lineno="600"><highlight class="normal">};<sp/></highlight><highlight class="comment">//<sp/>class<sp/>StVarValueExpression</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="601"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="602"><highlight class="normal"></highlight></codeline>
<codeline lineno="603"><highlight class="normal"></highlight><highlight class="comment">/*********************************</highlight></codeline>
<codeline lineno="604"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="605"><highlight class="comment"><sp/>*<sp/>class<sp/>FunctionExpression</highlight></codeline>
<codeline lineno="606"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="607"><highlight class="comment"><sp/>*********************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="608" refid="classShaderParser_1_1FunctionExpression" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classShaderParser_1_1FunctionExpression" kindref="compound">FunctionExpression</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classShaderParser_1_1ComplexExpression" kindref="compound">ComplexExpression</ref></highlight></codeline>
<codeline lineno="609"><highlight class="normal">{</highlight></codeline>
<codeline lineno="610"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="611"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>ctor/dtor</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="612"><highlight class="normal"><sp/><sp/><ref refid="classShaderParser_1_1FunctionExpression" kindref="compound">FunctionExpression</ref>(Terminal<sp/>*s,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>function_id,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>channel<sp/>=<sp/>-1);</highlight></codeline>
<codeline lineno="613"><highlight class="normal"></highlight></codeline>
<codeline lineno="614"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>return<sp/>expression<sp/>type</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="615" refid="classShaderParser_1_1FunctionExpression_1aa41f7dc5faf4a8bb2a5b9389fac62c60" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>shexpr::Type<sp/><ref refid="classShaderParser_1_1FunctionExpression_1aa41f7dc5faf4a8bb2a5b9389fac62c60" kindref="member">getType</ref>()</highlight><highlight class="keyword"><sp/>const<sp/>override<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>shexpr::E_FUNCTION;<sp/>}</highlight></codeline>
<codeline lineno="616"><highlight class="normal"></highlight></codeline>
<codeline lineno="617"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>return<sp/>value<sp/>type</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="618"><highlight class="normal"><sp/><sp/>shexpr::ValueType<sp/><ref refid="classShaderParser_1_1FunctionExpression_1a1622d2723f187b292cfdfb2b4138bb97" kindref="member">getValueType</ref>()<sp/></highlight><highlight class="keyword">const<sp/>override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="619"><highlight class="normal"></highlight></codeline>
<codeline lineno="620"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>check<sp/>convertion</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="621" refid="classShaderParser_1_1FunctionExpression_1a087cca97677a843023cd102267bc741b" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classShaderParser_1_1FunctionExpression_1a087cca97677a843023cd102267bc741b" kindref="member">canConvert</ref>(shexpr::ValueType<sp/>vt)</highlight><highlight class="keyword"><sp/>const<sp/>override<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classShaderParser_1_1Expression_1ac19dd34018b4470ad166a8ab244f981d" kindref="member">Expression::canConvert</ref>(vt);<sp/>}</highlight></codeline>
<codeline lineno="622"><highlight class="normal"></highlight></codeline>
<codeline lineno="623"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>evaluate<sp/>this<sp/>expression<sp/>as<sp/>real</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="624"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classShaderParser_1_1FunctionExpression_1a79b6ac1aeae30ee663e736910c5f0871" kindref="member">evaluate</ref>(real<sp/>&amp;out_value,<sp/><ref refid="structParser" kindref="compound">Parser</ref><sp/>&amp;parser)<sp/></highlight><highlight class="keyword">override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="625"><highlight class="normal"></highlight></codeline>
<codeline lineno="626"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>evaluate<sp/>this<sp/>expression<sp/>as<sp/>color4</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="627"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classShaderParser_1_1FunctionExpression_1a79b6ac1aeae30ee663e736910c5f0871" kindref="member">evaluate</ref>(Color4<sp/>&amp;out_value,<sp/><ref refid="structParser" kindref="compound">Parser</ref><sp/>&amp;parser)<sp/></highlight><highlight class="keyword">override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="628"><highlight class="normal"></highlight></codeline>
<codeline lineno="629"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>return<sp/>terminal<sp/>symbol,<sp/>if<sp/>present</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="630" refid="classShaderParser_1_1FunctionExpression_1aa94a57ffeced2cfd2afdab32478af185" refkind="member"><highlight class="normal"><sp/><sp/>Terminal<sp/>*<ref refid="classShaderParser_1_1FunctionExpression_1aa94a57ffeced2cfd2afdab32478af185" kindref="member">getTerminal</ref>()</highlight><highlight class="keyword"><sp/>const<sp/>override<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(Terminal<sp/>*)<ref refid="classShaderParser_1_1Expression_1a066eed5146bd48cfcc3acb30a50e9068" kindref="member">getParserSymbol</ref>();<sp/>}</highlight></codeline>
<codeline lineno="631"><highlight class="normal"></highlight></codeline>
<codeline lineno="632"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>assembly<sp/>this<sp/>expression</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="633"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classShaderParser_1_1FunctionExpression_1ad3c04213cfb60f770eab5a25e585a9f2" kindref="member">assembleBytecode</ref>(<ref refid="namespaceShaderParser_1a732af6cbcecefe1051d9165d3718d702" kindref="member">CodeTable</ref><sp/>&amp;code,<sp/><ref refid="classRegister" kindref="compound">Register</ref><sp/>&amp;dest_reg,<sp/><ref refid="classStcodeVMRegisterAllocator" kindref="compound">StcodeVMRegisterAllocator</ref><sp/>&amp;reg_allocator,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>is_integer)<sp/></highlight><highlight class="keyword">const<sp/>override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="634"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classShaderParser_1_1FunctionExpression_1a5f41ffb739d74300e4da96ff6b4ef28f" kindref="member">assembleCpp</ref>(<ref refid="structStcodeExpression" kindref="compound">StcodeExpression</ref><sp/>&amp;cpp_expr,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>is_integer)<sp/></highlight><highlight class="keyword">const<sp/>override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="635"><highlight class="normal"></highlight></codeline>
<codeline lineno="636"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>evaluate<sp/>all<sp/>avalible<sp/>branches;<sp/>return<sp/>false<sp/>if<sp/>error<sp/>occuried</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="637"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classShaderParser_1_1FunctionExpression_1a2d8cf9662e55e5ab14fc506ee8887432" kindref="member">collapseNumbers</ref>(<ref refid="structParser" kindref="compound">Parser</ref><sp/>&amp;parser)<sp/></highlight><highlight class="keyword">override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="638"><highlight class="normal"></highlight></codeline>
<codeline lineno="639"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>return<sp/>true,<sp/>if<sp/>expression<sp/>has<sp/>only<sp/>numeric<sp/>constants<sp/>and<sp/>local<sp/>variables</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="640"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classShaderParser_1_1FunctionExpression_1a549eb3d23dffc63e274162806bfcfb8e" kindref="member">isConst</ref>()<sp/></highlight><highlight class="keyword">const<sp/>override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="641"><highlight class="normal"></highlight></codeline>
<codeline lineno="642"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>return<sp/>true,<sp/>if<sp/>expression<sp/>-<sp/>is<sp/>a<sp/>dynamic<sp/>expression</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="643"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classShaderParser_1_1FunctionExpression_1a7b71c9d3661f883523f9db8167959ed3" kindref="member">isDynamic</ref>()<sp/></highlight><highlight class="keyword">const<sp/>override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="644"><highlight class="normal"></highlight></codeline>
<codeline lineno="645"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="classShaderParser_1_1FunctionExpression_1a4969d3a58c0d567357c230dae020e979" kindref="member">getChannels</ref>()<sp/></highlight><highlight class="keyword">const<sp/>override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="646"><highlight class="normal"></highlight></codeline>
<codeline lineno="647" refid="classShaderParser_1_1FunctionExpression_1a3d4cfd107ee053faec5ed52af60240e5" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classShaderParser_1_1FunctionExpression_1a3d4cfd107ee053faec5ed52af60240e5" kindref="member">validate</ref>(<ref refid="structParser" kindref="compound">Parser</ref><sp/>&amp;parser)</highlight><highlight class="keyword"><sp/>const<sp/>override<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="648"><highlight class="normal"></highlight></codeline>
<codeline lineno="649"><highlight class="normal"></highlight><highlight class="keyword">protected</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="650"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>dump<sp/>to<sp/>debug</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="651"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classShaderParser_1_1FunctionExpression_1a4daace2187e4e109925beec6295d90a2" kindref="member">dump_internal</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>level,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*tabs)<sp/></highlight><highlight class="keyword">const<sp/>override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="652"><highlight class="normal"></highlight></codeline>
<codeline lineno="653"><highlight class="normal"></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="654"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>func;</highlight></codeline>
<codeline lineno="655"><highlight class="normal">};<sp/></highlight><highlight class="comment">//<sp/>class<sp/>FunctionExpression</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="656"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="657"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>ShaderParser</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="shExpr.h"/>
  </compounddef>
</doxygen>
