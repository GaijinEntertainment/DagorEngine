<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.7" xml:lang="en-US">
  <compounddef id="shCompiler_8cpp" kind="file" language="C++">
    <compoundname>shCompiler.cpp</compoundname>
    <includes refid="shCompiler_8h" local="yes">shCompiler.h</includes>
    <includes refid="shCompContext_8h" local="yes">shCompContext.h</includes>
    <includes refid="sh__stat_8h" local="yes">sh_stat.h</includes>
    <includes refid="globalConfig_8h" local="yes">globalConfig.h</includes>
    <includes refid="codeBlocks_8h" local="yes">codeBlocks.h</includes>
    <includes local="no">shaders/dag_shaders.h</includes>
    <includes local="no">osApiWrappers/dag_files.h</includes>
    <includes local="no">osApiWrappers/dag_direct.h</includes>
    <includes refid="shMacro_8h" local="yes">shMacro.h</includes>
    <includes refid="shLog_8h" local="yes">shLog.h</includes>
    <includes local="no">shaders/shUtils.h</includes>
    <includes local="no">shaders/shader_ver.h</includes>
    <includes local="no">libTools/util/makeBindump.h</includes>
    <includes local="no">ioSys/dag_io.h</includes>
    <includes local="no">util/dag_fastIntList.h</includes>
    <includes local="no">debug/dag_debug.h</includes>
    <includes local="no">perfMon/dag_cpuFreq.h</includes>
    <includes refid="shsem_8h" local="yes">shsem.h</includes>
    <includes refid="linkShaders_8h" local="yes">linkShaders.h</includes>
    <includes refid="loadShaders_8h" local="yes">loadShaders.h</includes>
    <includes refid="nameMap_8h" local="yes">nameMap.h</includes>
    <includes refid="cppStcode_8h" local="yes">cppStcode.h</includes>
    <includes refid="cppStcodeAssembly_8h" local="yes">cppStcodeAssembly.h</includes>
    <includes refid="cppStcodeUtils_8h" local="yes">cppStcodeUtils.h</includes>
    <includes local="no">osApiWrappers/dag_cpuJobs.h</includes>
    <includes local="no">osApiWrappers/dag_threads.h</includes>
    <includes local="no">osApiWrappers/dag_miscApi.h</includes>
    <includes local="no">math/random/dag_random.h</includes>
    <includes local="no">util/dag_threadPool.h</includes>
    <includes local="no">atomic</includes>
    <includes local="no">EASTL/deque.h</includes>
    <incdepgraph>
      <node id="51">
        <label>DebugLevel.h</label>
        <link refid="DebugLevel_8h"/>
        <childnode refid="32" relation="include">
        </childnode>
      </node>
      <node id="44">
        <label>blkHash.h</label>
        <link refid="blkHash_8h"/>
      </node>
      <node id="88">
        <label>boolVar.h</label>
        <link refid="boolVar_8h"/>
        <childnode refid="56" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
      </node>
      <node id="53">
        <label>codeBlocks.h</label>
        <link refid="codeBlocks_8h"/>
        <childnode refid="54" relation="include">
        </childnode>
        <childnode refid="59" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>commonUtils.h</label>
        <link refid="commonUtils_8h"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="80">
        <label>compileResult.h</label>
        <link refid="compileResult_8h"/>
        <childnode refid="81" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="77">
        <label>const3d.h</label>
        <link refid="const3d_8h"/>
        <childnode refid="38" relation="include">
        </childnode>
      </node>
      <node id="11">
        <label>cppStcode.h</label>
        <link refid="cppStcode_8h"/>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="44" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="41" relation="include">
        </childnode>
      </node>
      <node id="12">
        <label>cppStcodeAssembly.h</label>
        <link refid="cppStcodeAssembly_8h"/>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
        <childnode refid="38" relation="include">
        </childnode>
        <childnode refid="39" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
        <childnode refid="41" relation="include">
        </childnode>
      </node>
      <node id="13">
        <label>cppStcodeBuilder.h</label>
        <link refid="cppStcodeBuilder_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
      </node>
      <node id="52">
        <label>cppStcodePlatformInfo.h</label>
        <link refid="cppStcodePlatformInfo_8h"/>
        <childnode refid="32" relation="include">
        </childnode>
      </node>
      <node id="71">
        <label>cppStcodeUtils.h</label>
        <link refid="cppStcodeUtils_8h"/>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="72" relation="include">
        </childnode>
      </node>
      <node id="62">
        <label>globVar.h</label>
        <link refid="globVar_8h"/>
        <childnode refid="63" relation="include">
        </childnode>
        <childnode refid="64" relation="include">
        </childnode>
        <childnode refid="45" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="65" relation="include">
        </childnode>
        <childnode refid="66" relation="include">
        </childnode>
        <childnode refid="67" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="68" relation="include">
        </childnode>
        <childnode refid="69" relation="include">
        </childnode>
      </node>
      <node id="50">
        <label>globalConfig.h</label>
        <link refid="globalConfig_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="51" relation="include">
        </childnode>
        <childnode refid="52" relation="include">
        </childnode>
        <childnode refid="48" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
      </node>
      <node id="24">
        <label>hash.h</label>
        <link refid="hash_8h"/>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
      </node>
      <node id="60">
        <label>hashStrings.h</label>
        <link refid="hashStrings_8h"/>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="45" relation="include">
        </childnode>
        <childnode refid="61" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
      </node>
      <node id="27">
        <label>hlslRegisters.h</label>
        <link refid="hlslRegisters_8h"/>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
      </node>
      <node id="76">
        <label>hlslStage.h</label>
        <link refid="hlslStage_8h"/>
        <childnode refid="77" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="78" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="79" relation="include">
        </childnode>
      </node>
      <node id="47">
        <label>hwAssembly.h</label>
        <link refid="hwAssembly_8h"/>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="69">
        <label>intervals.h</label>
        <link refid="intervals_8h"/>
      </node>
      <node id="104">
        <label>linkShaders.h</label>
        <link refid="linkShaders_8h"/>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="59" relation="include">
        </childnode>
        <childnode refid="69" relation="include">
        </childnode>
        <childnode refid="62" relation="include">
        </childnode>
        <childnode refid="70" relation="include">
        </childnode>
        <childnode refid="83" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="105" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="41" relation="include">
        </childnode>
      </node>
      <node id="106">
        <label>loadShaders.h</label>
        <link refid="loadShaders_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="70" relation="include">
        </childnode>
        <childnode refid="59" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
      </node>
      <node id="17">
        <label>nameMap.h</label>
        <link refid="nameMap_8h"/>
        <childnode refid="18" relation="include">
        </childnode>
      </node>
      <node id="89">
        <label>namedConst.h</label>
        <link refid="namedConst_8h"/>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="90" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="50" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="45" relation="include">
        </childnode>
        <childnode refid="94" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
      </node>
      <node id="42">
        <label>processes.h</label>
        <link refid="processes_8h"/>
        <childnode refid="43" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="70">
        <label>samplers.h</label>
        <link refid="samplers_8h"/>
        <childnode refid="55" relation="include">
        </childnode>
        <childnode refid="56" relation="include">
        </childnode>
        <childnode refid="62" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="66" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
      </node>
      <node id="95">
        <label>shAssumes.h</label>
        <link refid="shAssumes_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="69" relation="include">
        </childnode>
        <childnode refid="56" relation="include">
        </childnode>
        <childnode refid="48" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>shCompContext.h</label>
        <link refid="shCompContext_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="47" relation="include">
        </childnode>
        <childnode refid="48" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>shCompilationInfo.h</label>
        <link refid="shCompilationInfo_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="44" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="45" relation="include">
        </childnode>
        <childnode refid="46" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>shCompiler.cpp</label>
        <link refid="shCompiler_8cpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="49" relation="include">
        </childnode>
        <childnode refid="50" relation="include">
        </childnode>
        <childnode refid="53" relation="include">
        </childnode>
        <childnode refid="46" relation="include">
        </childnode>
        <childnode refid="96" relation="include">
        </childnode>
        <childnode refid="97" relation="include">
        </childnode>
        <childnode refid="57" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="98" relation="include">
        </childnode>
        <childnode refid="99" relation="include">
        </childnode>
        <childnode refid="100" relation="include">
        </childnode>
        <childnode refid="101" relation="include">
        </childnode>
        <childnode refid="102" relation="include">
        </childnode>
        <childnode refid="86" relation="include">
        </childnode>
        <childnode refid="103" relation="include">
        </childnode>
        <childnode refid="54" relation="include">
        </childnode>
        <childnode refid="104" relation="include">
        </childnode>
        <childnode refid="106" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="71" relation="include">
        </childnode>
        <childnode refid="107" relation="include">
        </childnode>
        <childnode refid="108" relation="include">
        </childnode>
        <childnode refid="109" relation="include">
        </childnode>
        <childnode refid="110" relation="include">
        </childnode>
        <childnode refid="111" relation="include">
        </childnode>
        <childnode refid="112" relation="include">
        </childnode>
        <childnode refid="113" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>shCompiler.h</label>
        <link refid="shCompiler_8h"/>
      </node>
      <node id="85">
        <label>shErrorReporting.h</label>
        <link refid="shErrorReporting_8h"/>
        <childnode refid="55" relation="include">
        </childnode>
        <childnode refid="56" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="28">
        <label>shLog.h</label>
        <link refid="shLog_8h"/>
      </node>
      <node id="57">
        <label>shMacro.h</label>
        <link refid="shMacro_8h"/>
      </node>
      <node id="105">
        <label>shSemCode.h</label>
        <link refid="shSemCode_8h"/>
      </node>
      <node id="59">
        <label>shTargetContext.h</label>
        <link refid="shTargetContext_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="60" relation="include">
        </childnode>
        <childnode refid="62" relation="include">
        </childnode>
        <childnode refid="70" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="71" relation="include">
        </childnode>
        <childnode refid="56" relation="include">
        </childnode>
        <childnode refid="73" relation="include">
        </childnode>
        <childnode refid="75" relation="include">
        </childnode>
        <childnode refid="84" relation="include">
        </childnode>
        <childnode refid="88" relation="include">
        </childnode>
        <childnode refid="76" relation="include">
        </childnode>
        <childnode refid="89" relation="include">
        </childnode>
        <childnode refid="95" relation="include">
        </childnode>
        <childnode refid="50" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="73">
        <label>shTargetStorage.h</label>
        <link refid="shTargetStorage_8h"/>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="74" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
        <childnode refid="41" relation="include">
        </childnode>
        <childnode refid="39" relation="include">
        </childnode>
      </node>
      <node id="58">
        <label>shVarBool.h</label>
        <link refid="shVarBool_8h"/>
      </node>
      <node id="68">
        <label>shVarVecTypes.h</label>
        <link refid="shVarVecTypes_8h"/>
      </node>
      <node id="49">
        <label>sh_stat.h</label>
        <link refid="sh__stat_8h"/>
      </node>
      <node id="75">
        <label>shaderBytecodeCache.h</label>
        <link refid="shaderBytecodeCache_8h"/>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="76" relation="include">
        </childnode>
        <childnode refid="80" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="82" relation="include">
        </childnode>
        <childnode refid="45" relation="include">
        </childnode>
        <childnode refid="83" relation="include">
        </childnode>
      </node>
      <node id="15">
        <label>shaderSave.h</label>
        <link refid="shaderSave_8h"/>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
      </node>
      <node id="14">
        <label>shaderTab.h</label>
        <link refid="shaderTab_8h"/>
        <childnode refid="15" relation="include">
        </childnode>
      </node>
      <node id="56">
        <label>shlexterm.h</label>
        <link refid="shlexterm_8h"/>
        <childnode refid="55" relation="include">
        </childnode>
        <childnode refid="57" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="54">
        <label>shsem.h</label>
        <link refid="shsem_8h"/>
        <childnode refid="55" relation="include">
        </childnode>
        <childnode refid="56" relation="include">
        </childnode>
        <childnode refid="58" relation="include">
        </childnode>
        <childnode refid="59" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="83" relation="include">
        </childnode>
      </node>
      <node id="84">
        <label>stcodeBytecode.h</label>
        <link refid="stcodeBytecode_8h"/>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="85" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
        <childnode refid="86" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="87" relation="include">
        </childnode>
      </node>
      <node id="16">
        <label>varMap.h</label>
        <link refid="varMap_8h"/>
        <childnode refid="17" relation="include">
        </childnode>
      </node>
      <node id="67">
        <label>varTypes.h</label>
        <link refid="varTypes_8h"/>
      </node>
      <node id="90">
        <label>variablesMerger.h</label>
        <link refid="variablesMerger_8h"/>
        <childnode refid="55" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="38" relation="include">
        </childnode>
        <childnode refid="81" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="91" relation="include">
        </childnode>
        <childnode refid="92" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="93" relation="include">
        </childnode>
      </node>
      <node id="65">
        <label>3d/dag_texMgr.h</label>
      </node>
      <node id="23">
        <label>EASTL/algorithm.h</label>
      </node>
      <node id="31">
        <label>EASTL/array.h</label>
      </node>
      <node id="93">
        <label>EASTL/bitvector.h</label>
      </node>
      <node id="113">
        <label>EASTL/deque.h</label>
      </node>
      <node id="91">
        <label>EASTL/fixed_vector.h</label>
      </node>
      <node id="92">
        <label>EASTL/map.h</label>
      </node>
      <node id="10">
        <label>EASTL/optional.h</label>
      </node>
      <node id="9">
        <label>EASTL/string.h</label>
      </node>
      <node id="72">
        <label>EASTL/string_view.h</label>
      </node>
      <node id="78">
        <label>EASTL/type_traits.h</label>
      </node>
      <node id="39">
        <label>EASTL/unique_ptr.h</label>
      </node>
      <node id="81">
        <label>EASTL/vector.h</label>
      </node>
      <node id="87">
        <label>EASTL/vector_map.h</label>
      </node>
      <node id="94">
        <label>EASTL/vector_set.h</label>
      </node>
      <node id="112">
        <label>atomic</label>
      </node>
      <node id="32">
        <label>cstdint</label>
      </node>
      <node id="26">
        <label>cstring</label>
      </node>
      <node id="22">
        <label>dag/dag_vector.h</label>
      </node>
      <node id="21">
        <label>debug/dag_assert.h</label>
      </node>
      <node id="86">
        <label>debug/dag_debug.h</label>
      </node>
      <node id="38">
        <label>drv/3d/dag_consts.h</label>
      </node>
      <node id="74">
        <label>drv/3d/dag_renderStates.h</label>
      </node>
      <node id="66">
        <label>drv/3d/dag_sampler.h</label>
      </node>
      <node id="29">
        <label>generic/dag_enumerate.h</label>
      </node>
      <node id="30">
        <label>generic/dag_expected.h</label>
      </node>
      <node id="43">
        <label>generic/dag_fixedMoveOnlyFunction.h</label>
      </node>
      <node id="19">
        <label>generic/dag_tab.h</label>
      </node>
      <node id="25">
        <label>hash/BLAKE3/blake3.h</label>
      </node>
      <node id="48">
        <label>ioSys/dag_dataBlock.h</label>
      </node>
      <node id="101">
        <label>ioSys/dag_io.h</label>
      </node>
      <node id="100">
        <label>libTools/util/makeBindump.h</label>
      </node>
      <node id="63">
        <label>math/dag_color.h</label>
      </node>
      <node id="64">
        <label>math/integer/dag_IPoint4.h</label>
      </node>
      <node id="110">
        <label>math/random/dag_random.h</label>
      </node>
      <node id="79">
        <label>memory</label>
      </node>
      <node id="34">
        <label>memory/dag_mem.h</label>
      </node>
      <node id="82">
        <label>memory/dag_memBase.h</label>
      </node>
      <node id="107">
        <label>osApiWrappers/dag_cpuJobs.h</label>
      </node>
      <node id="97">
        <label>osApiWrappers/dag_direct.h</label>
      </node>
      <node id="96">
        <label>osApiWrappers/dag_files.h</label>
      </node>
      <node id="109">
        <label>osApiWrappers/dag_miscApi.h</label>
      </node>
      <node id="108">
        <label>osApiWrappers/dag_threads.h</label>
      </node>
      <node id="103">
        <label>perfMon/dag_cpuFreq.h</label>
      </node>
      <node id="37">
        <label>shaders/dag_shaderVarType.h</label>
      </node>
      <node id="46">
        <label>shaders/dag_shaders.h</label>
      </node>
      <node id="35">
        <label>shaders/shExprTypes.h</label>
      </node>
      <node id="36">
        <label>shaders/shFunc.h</label>
      </node>
      <node id="98">
        <label>shaders/shUtils.h</label>
      </node>
      <node id="41">
        <label>shaders/shader_layout.h</label>
      </node>
      <node id="99">
        <label>shaders/shader_ver.h</label>
      </node>
      <node id="33">
        <label>shaders/slotTexturesRange.h</label>
      </node>
      <node id="55">
        <label>shsyn.h</label>
      </node>
      <node id="40">
        <label>ska_hash_map/flat_hash_map2.hpp</label>
      </node>
      <node id="20">
        <label>util/dag_bindump_ext.h</label>
      </node>
      <node id="102">
        <label>util/dag_fastIntList.h</label>
      </node>
      <node id="8">
        <label>util/dag_globDef.h</label>
      </node>
      <node id="18">
        <label>util/dag_oaHashNameMap.h</label>
      </node>
      <node id="7">
        <label>util/dag_safeArg.h</label>
      </node>
      <node id="83">
        <label>util/dag_simpleString.h</label>
      </node>
      <node id="61">
        <label>util/dag_stdint.h</label>
      </node>
      <node id="45">
        <label>util/dag_string.h</label>
      </node>
      <node id="111">
        <label>util/dag_threadPool.h</label>
      </node>
      <node id="6">
        <label>utility</label>
      </node>
    </incdepgraph>
    <innerclass refid="structshc_1_1ShaderValidVariantList" prot="public">shc::ShaderValidVariantList</innerclass>
    <innerclass refid="structshc_1_1ShaderValidVariantList_1_1VarVal" prot="public">shc::ShaderValidVariantList::VarVal</innerclass>
    <innerclass refid="structshc_1_1ShaderValidVariantList_1_1Ref" prot="public">shc::ShaderValidVariantList::Ref</innerclass>
    <innernamespace refid="namespaceshc">shc</innernamespace>
      <sectiondef kind="func">
      <memberdef kind="function" id="shCompiler_8cpp_1aa5fd6859aefd108067b3de33c29fec1f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void parse_shader_script</definition>
        <argsstring>(const char *fn, Tab&lt; SimpleString &gt; *out_filenames, shc::TargetContext &amp;ctx)</argsstring>
        <name>parse_shader_script</name>
        <param>
          <type>const char *</type>
          <declname>fn</declname>
        </param>
        <param>
          <type>Tab&lt; SimpleString &gt; *</type>
          <declname>out_filenames</declname>
        </param>
        <param>
          <type><ref refid="classshc_1_1TargetContext" kindref="compound">shc::TargetContext</ref> &amp;</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="shCompiler.cpp" line="40" column="13" bodyfile="shlexterm.cpp" bodystart="444" bodyend="477" declfile="shCompiler.cpp" declline="40" declcolumn="13"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/>Copyright<sp/>(C)<sp/>Gaijin<sp/>Games<sp/>KFT.<sp/><sp/>All<sp/>rights<sp/>reserved.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="shCompiler_8h" kindref="compound">shCompiler.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="shCompContext_8h" kindref="compound">shCompContext.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="sh__stat_8h" kindref="compound">sh_stat.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="globalConfig_8h" kindref="compound">globalConfig.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="codeBlocks_8h" kindref="compound">codeBlocks.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;shaders/dag_shaders.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;osApiWrappers/dag_files.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;osApiWrappers/dag_direct.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="shMacro_8h" kindref="compound">shMacro.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="shLog_8h" kindref="compound">shLog.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;shaders/shUtils.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;shaders/shader_ver.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;libTools/util/makeBindump.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;ioSys/dag_io.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;util/dag_fastIntList.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;debug/dag_debug.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;perfMon/dag_cpuFreq.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="shsem_8h" kindref="compound">shsem.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="linkShaders_8h" kindref="compound">linkShaders.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="loadShaders_8h" kindref="compound">loadShaders.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="nameMap_8h" kindref="compound">nameMap.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="cppStcode_8h" kindref="compound">cppStcode.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="cppStcodeAssembly_8h" kindref="compound">cppStcodeAssembly.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="cppStcodeUtils_8h" kindref="compound">cppStcodeUtils.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;osApiWrappers/dag_cpuJobs.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;osApiWrappers/dag_threads.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;osApiWrappers/dag_miscApi.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;math/random/dag_random.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;util/dag_threadPool.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;atomic&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;EASTL/deque.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>_CROSS_TARGET_DX12</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;dx12/asmShaderDXIL.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="shCompiler_8cpp_1aa5fd6859aefd108067b3de33c29fec1f" kindref="member">parse_shader_script</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*fn,<sp/>Tab&lt;SimpleString&gt;<sp/>*out_filenames,<sp/><ref refid="classshc_1_1TargetContext" kindref="compound">shc::TargetContext</ref><sp/>&amp;ctx);</highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>PROFILE_OPCODE_USAGE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>opcode_usage[2][256];</highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespaceshc" kindref="compound">shc</ref></highlight></codeline>
<codeline lineno="47"><highlight class="normal">{</highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>DataBlock<sp/>*reqShadersBlock<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>defShaderReq<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>defTreatInvalidAsNull<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>String<sp/>updbPath;</highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="namespaceshc_1afaf6380f5f0210d6e84612bb88fc93c8" kindref="member">relinkOnly</ref><sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="nameMap_8h_1ad3f42c540507651a7e4ce93760afc216" kindref="member">SCFastNameMap</ref><sp/>explicitGlobVarRef;</highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>worker_cnt<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>max_proc_count_for_worker_count<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>WORKER_STACK_SIZE<sp/>=<sp/>1<sp/>&lt;&lt;<sp/>20;</highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Cpujobs<sp/>bakcend<sp/>data</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>dag::AtomicInteger&lt;uint32_t&gt;<sp/>jobs_in_flight_count<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>cpujobs_job_mgr_base<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Threadpool<sp/>backend<sp/>data</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>eastl::deque&lt;cpujobs::IJob<sp/>*&gt;<sp/>jobs_in_flight;</highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>uint32_t<sp/>queue_pos<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>MAX_WORKERS_FOR_AFFINITY_MASK<sp/>=<sp/>64;</highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>THREADPOOL_QUEUE_SIZE<sp/>=<sp/>1024;</highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight><highlight class="keyword">enum<sp/>class</highlight><highlight class="normal"><sp/><ref refid="namespaceshc_1a95533126f6a653e991335050751baa8a" kindref="member">ShutdownState</ref><sp/>:<sp/>uint32_t</highlight></codeline>
<codeline lineno="73"><highlight class="normal">{</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><ref refid="namespaceshc_1a95533126f6a653e991335050751baa8aa43491564ebcfd38568918efbd6e840fd" kindref="member">RUNNING</ref>,</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><ref refid="namespaceshc_1a95533126f6a653e991335050751baa8aa89e5325b1f9acbf5dde5c70b84bbdcb1" kindref="member">SHUTTING_DOWN</ref>,</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><ref refid="namespaceshc_1a95533126f6a653e991335050751baa8aab7e248227c5c3ce57ac36abd39621e9a" kindref="member">SHUTDOWN_LOCKED</ref></highlight></codeline>
<codeline lineno="77"><highlight class="normal">};</highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>dag::AtomicPod&lt;ShutdownState&gt;<sp/>shutdown_state<sp/>=<sp/><ref refid="namespaceshc_1a95533126f6a653e991335050751baa8aa43491564ebcfd38568918efbd6e840fd" kindref="member">ShutdownState::RUNNING</ref>;</highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="namespaceshc_1a0c336a7ebfd6800dacceeeaacbe41fdd" kindref="member">try_enter_shutdown</ref>()</highlight></codeline>
<codeline lineno="82"><highlight class="normal">{</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>succesfully<sp/>entered,<sp/>release-sync<sp/>with<sp/>anybody<sp/>trying<sp/>to<sp/>enter<sp/>later<sp/>in<sp/>MO<sp/>and<sp/>failing,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>acquire-sync<sp/>with<sp/>possible<sp/>calls<sp/>to<sp/>unlock_shutdown.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>failer<sp/>to<sp/>enter,<sp/>acquire-sync<sp/>with<sp/>the<sp/>previous<sp/>successful<sp/>try_enter<sp/>or<sp/>try_lock</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><ref refid="namespaceshc_1a95533126f6a653e991335050751baa8a" kindref="member">ShutdownState</ref><sp/>expected<sp/>=<sp/><ref refid="namespaceshc_1a95533126f6a653e991335050751baa8aa43491564ebcfd38568918efbd6e840fd" kindref="member">ShutdownState::RUNNING</ref>;</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>shutdown_state.compare_exchange_strong(expected,<sp/><ref refid="namespaceshc_1a95533126f6a653e991335050751baa8aa89e5325b1f9acbf5dde5c70b84bbdcb1" kindref="member">ShutdownState::SHUTTING_DOWN</ref>,<sp/>dag::memory_order_acq_rel,</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/>dag::memory_order_acquire);</highlight></codeline>
<codeline lineno="90"><highlight class="normal">}</highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="namespaceshc_1a3f0d9ab9c11d14d3fb28a7305ae48164" kindref="member">try_lock_shutdown</ref>()</highlight></codeline>
<codeline lineno="93"><highlight class="normal">{</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Same<sp/>MO<sp/>reasoning<sp/>as<sp/>in<sp/>try_enter_shutdown</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><ref refid="namespaceshc_1a95533126f6a653e991335050751baa8a" kindref="member">ShutdownState</ref><sp/>expected<sp/>=<sp/><ref refid="namespaceshc_1a95533126f6a653e991335050751baa8aa43491564ebcfd38568918efbd6e840fd" kindref="member">ShutdownState::RUNNING</ref>;</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>shutdown_state.compare_exchange_strong(expected,<sp/><ref refid="namespaceshc_1a95533126f6a653e991335050751baa8aab7e248227c5c3ce57ac36abd39621e9a" kindref="member">ShutdownState::SHUTDOWN_LOCKED</ref>,<sp/>dag::memory_order_acq_rel,</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/>dag::memory_order_acquire);</highlight></codeline>
<codeline lineno="99"><highlight class="normal">}</highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceshc_1a8a417be34944424a38dbc16575d9e4ef" kindref="member">unlock_shutdown</ref>()</highlight></codeline>
<codeline lineno="102"><highlight class="normal">{</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Release-sync<sp/>with<sp/>later<sp/>enters/locks</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/>shutdown_state.store(<ref refid="namespaceshc_1a95533126f6a653e991335050751baa8aa43491564ebcfd38568918efbd6e840fd" kindref="member">ShutdownState::RUNNING</ref>,<sp/>dag::memory_order_release);</highlight></codeline>
<codeline lineno="105"><highlight class="normal">}</highlight></codeline>
<codeline lineno="106"><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>init_job_execution()</highlight></codeline>
<codeline lineno="108"><highlight class="normal">{</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="namespaceshc_1abe61f9b56246b7ac56d190cf23d55011" kindref="member">is_multithreaded</ref>())</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="111"><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">thread_local</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>workerWasInitialized<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!workerWasInitialized)</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Dsc<sp/>launches<sp/>a<sp/>lot<sp/>of<sp/>workers<sp/>across<sp/>processes,<sp/>elevated<sp/>prio<sp/>only<sp/>increases<sp/>contention</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/>DaThread::applyThisThreadPriority(cpujobs::DEFAULT_THREAD_PRIORITY);</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/>workerWasInitialized<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="119"><highlight class="normal">}</highlight></codeline>
<codeline lineno="120"><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal"><ref refid="structshc_1_1Job_1a52d7c6fb892f01ed0f54176dbc5d2930" kindref="member">Job::Job</ref>()</highlight></codeline>
<codeline lineno="122"><highlight class="normal">{</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/>G_ASSERT(is_main_thread());</highlight></codeline>
<codeline lineno="124"><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="namespaceshc_1a47efde6b3d493adbe2119a5593807d36" kindref="member">shc::config</ref>().useThreadpool)</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Must<sp/>always<sp/>seq-before<sp/>(in<sp/>program<sp/>order)<sp/>the<sp/>respective<sp/>notifyJobRelease</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/>jobs_in_flight_count.fetch_add(1,<sp/>dag::memory_order_relaxed);</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="130"><highlight class="normal">}</highlight></codeline>
<codeline lineno="131"><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="structshc_1_1Job_1a0db61e3f075b115844f23da94bc912a0" kindref="member">Job::doJob</ref>()</highlight></codeline>
<codeline lineno="133"><highlight class="normal">{</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="namespaceshc_1a72c2e791a45b155ec5e3a04a7368455e" kindref="member">is_in_worker</ref>())</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/>init_job_execution();</highlight></codeline>
<codeline lineno="136"><highlight class="normal"></highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><ref refid="structshc_1_1Job_1a511cbc0ba7e66ed3a03a31d195225e57" kindref="member">doJobBody</ref>();</highlight></codeline>
<codeline lineno="138"><highlight class="normal">}</highlight></codeline>
<codeline lineno="139"><highlight class="normal"></highlight></codeline>
<codeline lineno="140"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="structshc_1_1Job_1a511710ba0cb8538630fd63b83396dc31" kindref="member">Job::releaseJob</ref>()</highlight></codeline>
<codeline lineno="141"><highlight class="normal">{</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><ref refid="structshc_1_1Job_1af5ccf84f47357898495b7aa2a29d4971" kindref="member">releaseJobBody</ref>();</highlight></codeline>
<codeline lineno="143"><highlight class="normal"></highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="namespaceshc_1a47efde6b3d493adbe2119a5593807d36" kindref="member">shc::config</ref>().useThreadpool)</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>@HACK:<sp/>allowed<sp/>from<sp/>jobs<sp/>to<sp/>enable<sp/>termination<sp/>from<sp/>error<sp/>processing<sp/>(that<sp/>can<sp/>happen<sp/>in<sp/>jobs)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="147"><highlight class="normal"></highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Sync<sp/>is<sp/>needed<sp/>when<sp/>releasing<sp/>in<sp/>worker<sp/>and<sp/>detecting<sp/>it<sp/>in<sp/>syncpoint</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/>jobs_in_flight_count.fetch_sub(1,<sp/>dag::memory_order_release);</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="151"><highlight class="normal">}</highlight></codeline>
<codeline lineno="152"><highlight class="normal"></highlight></codeline>
<codeline lineno="153"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>eastl::pair&lt;unsigned,<sp/>unsigned&gt;<sp/>calculate_jobs_x_processes_caps(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>requested_num_workers)</highlight></codeline>
<codeline lineno="154"><highlight class="normal">{</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>@NOTE:<sp/>having<sp/>this<sp/>much<sp/>stuff<sp/>is<sp/>bizarre.<sp/>However,<sp/>in<sp/>the<sp/>current<sp/>model<sp/>we<sp/>would<sp/>get<sp/>worse<sp/>parallelism<sp/>if<sp/>we<sp/>drop<sp/>either<sp/>job<sp/>count</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>on<sp/>proc<sp/>count.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="157"><highlight class="normal"></highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>very<sp/>small<sp/>benefit<sp/>from<sp/>24+<sp/>processes,<sp/>but<sp/>noticeable<sp/>memory<sp/>consumption</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>PROC_CAP<sp/>=<sp/>24;</highlight></codeline>
<codeline lineno="160"><highlight class="normal"></highlight></codeline>
<codeline lineno="161"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>_CROSS_TARGET_C2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="162"><highlight class="normal"></highlight></codeline>
<codeline lineno="163"><highlight class="normal"></highlight></codeline>
<codeline lineno="164"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>PROC_X_JOBS_CAP<sp/>=<sp/>1024;</highlight></codeline>
<codeline lineno="166"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="167"><highlight class="normal"></highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>reqWorkerCnt<sp/>=<sp/>requested_num_workers<sp/>?<sp/>requested_num_workers<sp/>:<sp/>cpujobs::get_physical_core_count();</highlight></codeline>
<codeline lineno="169"><highlight class="normal"></highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>cappedWorkerCnt<sp/>=<sp/>min&lt;unsigned&gt;(reqWorkerCnt,<sp/>MAX_WORKERS_FOR_AFFINITY_MASK);</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>procCapForJobCount<sp/>=<sp/>min&lt;unsigned&gt;(PROC_CAP,<sp/>PROC_X_JOBS_CAP<sp/>/<sp/>cappedWorkerCnt);</highlight></codeline>
<codeline lineno="172"><highlight class="normal"></highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>procCap<sp/>=<sp/>min&lt;int&gt;(cpujobs::get_physical_core_count(),<sp/>procCapForJobCount);</highlight></codeline>
<codeline lineno="174"><highlight class="normal"></highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><ref refid="shLog_8cpp_1a2926179632c7c86265007652d3d30b14" kindref="member">sh_debug</ref>(<ref refid="shLog_8h_1a66042048eb3ce30a1dccb2ebf8c2fd5ca0012c8acb382f295fe614046a64bba11" kindref="member">SHLOG_INFO</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Processes<sp/>x<sp/>threads<sp/>caps:<sp/>max<sp/>procs<sp/>=<sp/>%u,<sp/>threads<sp/>=<sp/>%u&quot;</highlight><highlight class="normal">,<sp/>procCap,<sp/>cappedWorkerCnt);</highlight></codeline>
<codeline lineno="176"><highlight class="normal"></highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>{cappedWorkerCnt,<sp/>procCap};</highlight></codeline>
<codeline lineno="178"><highlight class="normal">}</highlight></codeline>
<codeline lineno="179"><highlight class="normal"></highlight></codeline>
<codeline lineno="180"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceshc_1ac431d98c07031953b228af74422abfe2" kindref="member">init_jobs</ref>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>num_workers)</highlight></codeline>
<codeline lineno="181"><highlight class="normal">{</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/>G_ASSERT(is_main_thread());</highlight></codeline>
<codeline lineno="183"><highlight class="normal"></highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="namespaceshc_1a47efde6b3d493adbe2119a5593807d36" kindref="member">shc::config</ref>().useThreadpool)</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/>cpujobs::init(-1,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/>cpujobs::init();</highlight></codeline>
<codeline lineno="188"><highlight class="normal"></highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>[workers,<sp/>processesCap]<sp/>=<sp/>calculate_jobs_x_processes_caps(num_workers);</highlight></codeline>
<codeline lineno="190"><highlight class="normal"></highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/>worker_cnt<sp/>=<sp/>workers;</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/>max_proc_count_for_worker_count<sp/>=<sp/>processesCap;</highlight></codeline>
<codeline lineno="193"><highlight class="normal"></highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!worker_cnt)</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/>worker_cnt<sp/>=<sp/>cpujobs::get_physical_core_count();</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(num_workers<sp/>&gt;<sp/>MAX_WORKERS_FOR_AFFINITY_MASK)</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/>worker_cnt<sp/>=<sp/>MAX_WORKERS_FOR_AFFINITY_MASK;</highlight></codeline>
<codeline lineno="198"><highlight class="normal"></highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(worker_cnt<sp/>==<sp/>1)</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/>debug(</highlight><highlight class="stringliteral">&quot;started<sp/>in<sp/>job-less<sp/>mode&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="204"><highlight class="normal"></highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="namespaceshc_1a47efde6b3d493adbe2119a5593807d36" kindref="member">shc::config</ref>().useThreadpool)</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/>threadpool::init(worker_cnt,<sp/>THREADPOOL_QUEUE_SIZE,<sp/>WORKER_STACK_SIZE);</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/>debug(</highlight><highlight class="stringliteral">&quot;started<sp/>threadpool&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>logicalCores<sp/>=<sp/>cpujobs::get_logical_core_count();</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>physicalCores<sp/>=<sp/>cpujobs::get_physical_core_count();</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>coreRatio<sp/>=<sp/>max(1,<sp/>logicalCores<sp/>/<sp/>physicalCores);</highlight></codeline>
<codeline lineno="215"><highlight class="normal"></highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/>G_ASSERTF(worker_cnt<sp/>&lt;=<sp/>logicalCores,<sp/></highlight><highlight class="stringliteral">&quot;There<sp/>is<sp/>not<sp/>enough<sp/>logic<sp/>cores<sp/>(%u)<sp/>to<sp/>run<sp/>%u<sp/>jobs&quot;</highlight><highlight class="normal">,<sp/>logicalCores,<sp/>worker_cnt);</highlight></codeline>
<codeline lineno="217"><highlight class="normal"></highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(coreRatio<sp/>&gt;<sp/>1)</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>occupy<sp/>cores<sp/>properly,<sp/>start<sp/>with<sp/>physical,<sp/>then<sp/>use<sp/>logical<sp/>HT<sp/>ones</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>use<sp/>virtual<sp/>job<sp/>manager,<sp/>otherwise<sp/>job<sp/>indexing<sp/>will<sp/>be<sp/>broken</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cpujobs_job_mgr_base<sp/>=<sp/>logicalCores;</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>worker_cnt;<sp/>i++)</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint64_t<sp/>affinity<sp/>=<sp/>1ull<sp/>&lt;&lt;<sp/>((i<sp/>*<sp/>coreRatio)<sp/>%<sp/>logicalCores<sp/>+<sp/>i<sp/>/<sp/>physicalCores);</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>G_VERIFY(cpujobs::create_virtual_job_manager(WORKER_STACK_SIZE,<sp/>affinity)<sp/>==<sp/>cpujobs_job_mgr_base<sp/>+<sp/>i);</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>worker_cnt;<sp/>i++)</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>G_VERIFY(cpujobs::start_job_manager(i,<sp/>WORKER_STACK_SIZE));</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/>debug(</highlight><highlight class="stringliteral">&quot;inited<sp/>%d<sp/>job<sp/>managers&quot;</highlight><highlight class="normal">,<sp/>worker_cnt);</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="236"><highlight class="normal">}</highlight></codeline>
<codeline lineno="237"><highlight class="normal"></highlight></codeline>
<codeline lineno="238"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceshc_1a78b0761985dc08fccb004298cb2184bd" kindref="member">deinit_jobs</ref>()</highlight></codeline>
<codeline lineno="239"><highlight class="normal">{</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/>G_ASSERT(!<ref refid="namespaceshc_1a72c2e791a45b155ec5e3a04a7368455e" kindref="member">is_in_worker</ref>());</highlight></codeline>
<codeline lineno="241"><highlight class="normal"></highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="namespaceshc_1abe61f9b56246b7ac56d190cf23d55011" kindref="member">is_multithreaded</ref>())</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="244"><highlight class="normal"></highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="namespaceshc_1a47efde6b3d493adbe2119a5593807d36" kindref="member">shc::config</ref>().useThreadpool)</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>@TODO:<sp/>specific<sp/>drop<sp/>&amp;<sp/>shutdown?<sp/>If<sp/>so,<sp/>do<sp/>up<sp/>threadpool<sp/>or<sp/>spoof<sp/>jobs<sp/>w/<sp/>flag?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/>threadpool::shutdown();</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/>cpujobs::term(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/>debug(</highlight><highlight class="stringliteral">&quot;terminated<sp/>threadpool&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!cpujobs::is_inited())</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="256"><highlight class="normal"></highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>worker_cnt;<sp/>i++)</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cpujobs::reset_job_queue(cpujobs_job_mgr_base<sp/>+<sp/>i,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="259"><highlight class="normal"></highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceshc_1aa29b1afa394d7f6e2b8d62ef87c3a88f" kindref="member">await_all_jobs</ref>();</highlight></codeline>
<codeline lineno="261"><highlight class="normal"></highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/>debug(</highlight><highlight class="stringliteral">&quot;terminating<sp/>jobs&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/>cpujobs::term(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/>debug(</highlight><highlight class="stringliteral">&quot;jobs<sp/>termination<sp/>done&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="266"><highlight class="normal">}</highlight></codeline>
<codeline lineno="267"><highlight class="normal"></highlight></codeline>
<codeline lineno="268"><highlight class="normal"></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/><ref refid="namespaceshc_1a15322df1795feb5f2e78c9a9338c6bf0" kindref="member">worker_count</ref>()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>worker_cnt;<sp/>}</highlight></codeline>
<codeline lineno="269"><highlight class="normal"></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/><ref refid="namespaceshc_1a52533646036e68290d71cf996b716fc0" kindref="member">max_allowed_process_count</ref>()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>max_proc_count_for_worker_count;<sp/>}</highlight></codeline>
<codeline lineno="270"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="namespaceshc_1abe61f9b56246b7ac56d190cf23d55011" kindref="member">is_multithreaded</ref>()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>worker_cnt<sp/>&gt;<sp/>1;<sp/>}</highlight></codeline>
<codeline lineno="271"><highlight class="normal"></highlight></codeline>
<codeline lineno="272"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="namespaceshc_1a72c2e791a45b155ec5e3a04a7368455e" kindref="member">is_in_worker</ref>()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespaceshc_1a47efde6b3d493adbe2119a5593807d36" kindref="member">shc::config</ref>().<ref refid="structshc_1_1CompilerConfig_1a433b92f326f0be76073df49222981f87" kindref="member">useThreadpool</ref><sp/>?<sp/>threadpool::get_current_worker_id()<sp/>!=<sp/>-1<sp/>:<sp/>cpujobs::is_in_job();<sp/>}</highlight></codeline>
<codeline lineno="273"><highlight class="normal"></highlight></codeline>
<codeline lineno="274"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceshc_1aa29b1afa394d7f6e2b8d62ef87c3a88f" kindref="member">await_all_jobs</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>(*on_released_cb)())</highlight></codeline>
<codeline lineno="275"><highlight class="normal">{</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/>G_ASSERT(!<ref refid="namespaceshc_1a72c2e791a45b155ec5e3a04a7368455e" kindref="member">is_in_worker</ref>());</highlight></codeline>
<codeline lineno="277"><highlight class="normal"></highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="namespaceshc_1a47efde6b3d493adbe2119a5593807d36" kindref="member">shc::config</ref>().useThreadpool)</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(jobs_in_flight.empty())</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="282"><highlight class="normal"></highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/>threadpool::barrier_active_wait_for_job(jobs_in_flight.back(),<sp/>threadpool::PRIO_HIGH,<sp/>queue_pos);</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;j<sp/>:<sp/>jobs_in_flight)</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>threadpool::wait(j);</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>j-&gt;releaseJob();</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(on_released_cb)</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*on_released_cb)();</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="291"><highlight class="normal"></highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/>jobs_in_flight.clear();</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/>cpujobs::release_done_jobs();</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(on_released_cb)</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>(*on_released_cb)();</highlight></codeline>
<codeline lineno="299"><highlight class="normal"></highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Sync<sp/>is<sp/>needed<sp/>when<sp/>reading<sp/>result<sp/>of<sp/>notifyJobRelease<sp/>called<sp/>from<sp/>worker</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(jobs_in_flight_count.load(dag::memory_order_acquire)<sp/>&gt;<sp/>0)</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>sleep_msec(1);</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cpujobs::release_done_jobs();</highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(on_released_cb)</highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*on_released_cb)();</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="309"><highlight class="normal">}</highlight></codeline>
<codeline lineno="310"><highlight class="normal"></highlight></codeline>
<codeline lineno="311"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceshc_1a196bec5ea00287d23be548089457adff" kindref="member">add_job</ref>(Job<sp/>*job,<sp/><ref refid="namespaceshc_1a053e03af98ca26e8ba24b8ac5f78fa45" kindref="member">JobMgrChoiceStrategy</ref><sp/>mgr_choice_strat)</highlight></codeline>
<codeline lineno="312"><highlight class="normal">{</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/>G_ASSERT(is_main_thread());</highlight></codeline>
<codeline lineno="314"><highlight class="normal"></highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="namespaceshc_1abe61f9b56246b7ac56d190cf23d55011" kindref="member">is_multithreaded</ref>())</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/>job-&gt;doJob();</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/>job-&gt;releaseJob();</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="321"><highlight class="normal"></highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="namespaceshc_1a47efde6b3d493adbe2119a5593807d36" kindref="member">shc::config</ref>().useThreadpool)</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/>jobs_in_flight.push_back(job);</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/>threadpool::add(jobs_in_flight.back(),<sp/>threadpool::PRIO_DEFAULT,<sp/>queue_pos,<sp/>threadpool::AddFlags::IgnoreNotDone);</highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/>threadpool::wake_up_all();</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(mgr_choice_strat)</highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="namespaceshc_1a053e03af98ca26e8ba24b8ac5f78fa45a1ebd8dbf8c34e255f5cbf28f35860b71" kindref="member">JobMgrChoiceStrategy::ROUND_ROBIN</ref>:</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cpu<sp/>=<sp/>grnd();</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cpu<sp/>=<sp/>(cpu<sp/>+<sp/>1)<sp/>%<sp/>shc::worker_cnt;</highlight></codeline>
<codeline lineno="336"><highlight class="normal"></highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cpujobs::add_job(cpujobs_job_mgr_base<sp/>+<sp/>cpu,<sp/>job);</highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="340"><highlight class="normal"></highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="namespaceshc_1a053e03af98ca26e8ba24b8ac5f78fa45a9b3d3b71c41c604f6de20bd2280df393" kindref="member">JobMgrChoiceStrategy::LEAST_BUSY_COOPERATIVE</ref>:</highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>jobload_per_worker<sp/>=<sp/>2;</highlight></codeline>
<codeline lineno="344"><highlight class="normal"></highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>curWorker<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>curWorkerLoad<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="347"><highlight class="normal"></highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>check<sp/>all<sp/>workers<sp/>and<sp/>if<sp/>anyone<sp/>is<sp/>idle,<sp/>give<sp/>it<sp/>the<sp/>next<sp/>batch<sp/>of<sp/>work</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;<sp/>curWorker<sp/>&lt;<sp/>worker_cnt;<sp/>++curWorker)</highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!cpujobs::is_job_manager_busy(cpujobs_job_mgr_base<sp/>+<sp/>curWorker))</highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cpujobs::add_job(cpujobs_job_mgr_base<sp/>+<sp/>curWorker,<sp/>job);</highlight></codeline>
<codeline lineno="354"><highlight class="normal"></highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++curWorkerLoad;</highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(curWorkerLoad<sp/>&gt;=<sp/>jobload_per_worker)</highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++curWorker;</highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>curWorkerLoad<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="361"><highlight class="normal"></highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="364"><highlight class="normal"></highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>curWorkerLoad<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="367"><highlight class="normal"></highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>do<sp/>one<sp/>job<sp/>if<sp/>jobs<sp/>are<sp/>available</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>job-&gt;doJob();</highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>job-&gt;releaseJob();</highlight></codeline>
<codeline lineno="371"><highlight class="normal"></highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>curWorker<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>curWorkerLoad<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="378"><highlight class="normal">}</highlight></codeline>
<codeline lineno="379"><highlight class="normal"></highlight></codeline>
<codeline lineno="380"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceshc_1a8a4e1a65eb73ac377392e1321448660f" kindref="member">startup</ref>()</highlight></codeline>
<codeline lineno="381"><highlight class="normal">{</highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/><ref refid="namespaceshc_1a684865d8e3b21456d251eb3400fee52f" kindref="member">resetCompiler</ref>();</highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/><ref refid="shLog_8cpp_1a8004b71ad4939195c1e883cd7c87c70d" kindref="member">enable_sh_debug_con</ref>(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="384"><highlight class="normal">}</highlight></codeline>
<codeline lineno="385"><highlight class="normal"></highlight></codeline>
<codeline lineno="386"><highlight class="normal"></highlight><highlight class="comment">//<sp/>close<sp/>compiler</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="387"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceshc_1ac8d2ced91ea1a4e72195b0c33e8584a0" kindref="member">shutdown</ref>()<sp/>{<sp/><ref refid="shLog_8cpp_1a8004b71ad4939195c1e883cd7c87c70d" kindref="member">enable_sh_debug_con</ref>(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);<sp/>}</highlight></codeline>
<codeline lineno="388"><highlight class="normal"></highlight></codeline>
<codeline lineno="389"><highlight class="normal"></highlight><highlight class="comment">//<sp/>reset<sp/>shader<sp/>compiler<sp/>internal<sp/>structures<sp/>(before<sp/>next<sp/>compilation)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="390"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceshc_1a684865d8e3b21456d251eb3400fee52f" kindref="member">resetCompiler</ref>()</highlight></codeline>
<codeline lineno="391"><highlight class="normal">{</highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/><ref refid="namespaceshc_1a68edf3f17609b3f932b935fe388cd910" kindref="member">reset_source_file</ref>();</highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/>reqShadersBlock<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="394"><highlight class="normal">}</highlight></codeline>
<codeline lineno="395"><highlight class="normal"></highlight></codeline>
<codeline lineno="396"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceshc_1a68edf3f17609b3f932b935fe388cd910" kindref="member">reset_source_file</ref>()</highlight></codeline>
<codeline lineno="397"><highlight class="normal">{</highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/><ref refid="linkShaders_8cpp_1a89ad15dc480db392b8a38daa4a8d4745" kindref="member">close_shader_class</ref>();</highlight></codeline>
<codeline lineno="399"><highlight class="normal"></highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/><ref refid="structErrorCounter_1a16e83af848da6b273387e7f9078aff89" kindref="member">ErrorCounter::curShader</ref>().<ref refid="structErrorCounter_1ad8248b42e27a526ddd06e3789a44da4e" kindref="member">reset</ref>();</highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/><ref refid="structErrorCounter_1a0d2712090dcb5df49be0c244026e048a" kindref="member">ErrorCounter::allShaders</ref>().<ref refid="structErrorCounter_1ad8248b42e27a526ddd06e3789a44da4e" kindref="member">reset</ref>();</highlight></codeline>
<codeline lineno="402"><highlight class="normal">}</highlight></codeline>
<codeline lineno="403"><highlight class="normal"></highlight></codeline>
<codeline lineno="404"><highlight class="normal">String<sp/><ref refid="namespaceshc_1a721ecfdbb88fa2a042d32ee935757308" kindref="member">get_obj_file_name_from_source</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>String<sp/>&amp;source_file_name,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classShCompilationInfo" kindref="compound">ShCompilationInfo</ref><sp/>&amp;comp)</highlight></codeline>
<codeline lineno="405"><highlight class="normal">{</highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>intermediateDir[260];</highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/>strcpy(intermediateDir,<sp/>comp.<ref refid="classShCompilationInfo_1aece2b6bbe22081ab9ab1ecc97a2612b5" kindref="member">intermDir</ref>().c_str());</highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/>dd_append_slash_c(intermediateDir);</highlight></codeline>
<codeline lineno="409"><highlight class="normal"></highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/>String<sp/>objFileName<sp/>=<sp/>String(intermediateDir)<sp/>+<sp/>dd_get_fname(source_file_name);</highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/>comp.<ref refid="classShCompilationInfo_1a168e26f2dbba8585a4617e838df9aeb8" kindref="member">hwopts</ref>().<ref refid="structShHardwareOptions_1a40b3f6ee176b01628919bf7785a625e3" kindref="member">appendOptsTo</ref>(objFileName);</highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/>objFileName<sp/>+=<sp/></highlight><highlight class="stringliteral">&quot;.obj&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="413"><highlight class="normal"></highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>objFileName;</highlight></codeline>
<codeline lineno="415"><highlight class="normal">}</highlight></codeline>
<codeline lineno="416"><highlight class="normal"></highlight></codeline>
<codeline lineno="417"><highlight class="normal"></highlight><highlight class="comment">//<sp/>check<sp/>shader<sp/>file<sp/>cache<sp/>&amp;<sp/>return<sp/>true,<sp/>if<sp/>cache<sp/>needs<sp/>recompilation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="418"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="namespaceshc_1a7446716e9cbf38d49b9caed94e2f0782" kindref="member">should_recompile_sh</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classShCompilationInfo" kindref="compound">ShCompilationInfo</ref><sp/>&amp;comp,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>String<sp/>&amp;sourceFileName)</highlight></codeline>
<codeline lineno="419"><highlight class="normal">{</highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/>String<sp/>objFileName<sp/>=<sp/><ref refid="namespaceshc_1a721ecfdbb88fa2a042d32ee935757308" kindref="member">get_obj_file_name_from_source</ref>(sourceFileName,<sp/>comp);</highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="loadShaders_8cpp_1abb45ebda1721aa55754dc135e40d5f0c" kindref="member">check_scripted_shader</ref>(objFileName,<sp/>{},<sp/>comp,<sp/><ref refid="namespaceshc_1a47efde6b3d493adbe2119a5593807d36" kindref="member">shc::config</ref>().<ref refid="structshc_1_1CompilerConfig_1a718bba3795bc51624486004c1dd748a2" kindref="member">compileCppStcode</ref>())<sp/>!=<sp/><ref refid="shCompiler_8h_1af049975952f79ea4bf6cb1582447a384a8697250efc73639dd2a6e7da243ac68b" kindref="member">CompilerAction::NOTHING</ref>;</highlight></codeline>
<codeline lineno="422"><highlight class="normal">}</highlight></codeline>
<codeline lineno="423"><highlight class="normal"><ref refid="shCompiler_8h_1af049975952f79ea4bf6cb1582447a384" kindref="member">CompilerAction</ref><sp/><ref refid="namespaceshc_1a28066fa836fbd40b415cd40fb61a2023" kindref="member">should_recompile</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classShCompilationInfo" kindref="compound">ShCompilationInfo</ref><sp/>&amp;comp)</highlight></codeline>
<codeline lineno="424"><highlight class="normal">{</highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/><ref refid="shCompiler_8h_1af049975952f79ea4bf6cb1582447a384" kindref="member">CompilerAction</ref><sp/>dumpCheckResult<sp/>=<sp/><ref refid="loadShaders_8cpp_1abb45ebda1721aa55754dc135e40d5f0c" kindref="member">check_scripted_shader</ref>(comp.<ref refid="classShCompilationInfo_1a41e70a42b6835776ecae73c660dca82a" kindref="member">dest</ref>().c_str(),<sp/>comp.<ref refid="classShCompilationInfo_1a111f652f9ce42741d9a587b6cb41d464" kindref="member">sources</ref>(),<sp/>comp,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(dumpCheckResult<sp/>==<sp/><ref refid="shCompiler_8h_1af049975952f79ea4bf6cb1582447a384abc6833fcf79fcc7be638a59cac023efb" kindref="member">CompilerAction::COMPILE_AND_LINK</ref>)</highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>dumpCheckResult;</highlight></codeline>
<codeline lineno="428"><highlight class="normal"></highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/>int64_t<sp/>destFileTime;</highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="loadShaders_8cpp_1a8e8aeca3872c125527b1516641de7bff" kindref="member">get_file_time64</ref>(comp.<ref refid="classShCompilationInfo_1a41e70a42b6835776ecae73c660dca82a" kindref="member">dest</ref>().c_str(),<sp/>destFileTime))</highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="shCompiler_8h_1af049975952f79ea4bf6cb1582447a384abc6833fcf79fcc7be638a59cac023efb" kindref="member">CompilerAction::COMPILE_AND_LINK</ref>;</highlight></codeline>
<codeline lineno="432"><highlight class="normal"></highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>sourceFileNo<sp/>=<sp/>0;<sp/>sourceFileNo<sp/>&lt;<sp/>comp.<ref refid="classShCompilationInfo_1a111f652f9ce42741d9a587b6cb41d464" kindref="member">sources</ref>().size();<sp/>sourceFileNo++)</highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>String<sp/>&amp;sourceFileName<sp/>=<sp/>comp.<ref refid="classShCompilationInfo_1a111f652f9ce42741d9a587b6cb41d464" kindref="member">sources</ref>()[sourceFileNo];</highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/><sp/><sp/>String<sp/>objFileName<sp/>=<sp/><ref refid="namespaceshc_1a721ecfdbb88fa2a042d32ee935757308" kindref="member">get_obj_file_name_from_source</ref>(sourceFileName,<sp/>comp);</highlight></codeline>
<codeline lineno="437"><highlight class="normal"></highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/><sp/><sp/>int64_t<sp/>objFileTime;</highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="loadShaders_8cpp_1a8e8aeca3872c125527b1516641de7bff" kindref="member">get_file_time64</ref>(objFileName,<sp/>objFileTime))</highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="shCompiler_8h_1af049975952f79ea4bf6cb1582447a384abc6833fcf79fcc7be638a59cac023efb" kindref="member">CompilerAction::COMPILE_AND_LINK</ref>;</highlight></codeline>
<codeline lineno="441"><highlight class="normal"></highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(objFileTime<sp/>&gt;<sp/>destFileTime)</highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="shCompiler_8h_1af049975952f79ea4bf6cb1582447a384abc6833fcf79fcc7be638a59cac023efb" kindref="member">CompilerAction::COMPILE_AND_LINK</ref>;</highlight></codeline>
<codeline lineno="444"><highlight class="normal"></highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="namespaceshc_1a7446716e9cbf38d49b9caed94e2f0782" kindref="member">should_recompile_sh</ref>(comp,<sp/>sourceFileName))</highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="shCompiler_8h_1af049975952f79ea4bf6cb1582447a384abc6833fcf79fcc7be638a59cac023efb" kindref="member">CompilerAction::COMPILE_AND_LINK</ref>;</highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>dumpCheckResult;</highlight></codeline>
<codeline lineno="449"><highlight class="normal">}</highlight></codeline>
<codeline lineno="450"><highlight class="normal"></highlight></codeline>
<codeline lineno="451"><highlight class="normal"></highlight><highlight class="comment">//<sp/>compile<sp/>shader<sp/>files<sp/>&amp;<sp/>generate<sp/>variants<sp/>to<sp/>disk.<sp/>return<sp/>false,<sp/>if<sp/>error<sp/>occurs</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="452"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceshc_1a8c442ebc036376c0817dc83bd46434d0" kindref="member">compileShader</ref>(<ref refid="shCompiler_8h_1af049975952f79ea4bf6cb1582447a384" kindref="member">CompilerAction</ref><sp/>compiler_action,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>no_save,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>should_rebuild,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classshc_1_1CompilationContext" kindref="compound">shc::CompilationContext</ref><sp/>&amp;comp)</highlight></codeline>
<codeline lineno="453"><highlight class="normal">{</highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Sanity<sp/>check,<sp/>args<sp/>should<sp/>be<sp/>validated<sp/>before<sp/>calling<sp/>the<sp/>function</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/>G_ASSERT(!should_rebuild<sp/>||<sp/>(compiler_action<sp/>!=<sp/><ref refid="shCompiler_8h_1af049975952f79ea4bf6cb1582447a384a8697250efc73639dd2a6e7da243ac68b" kindref="member">CompilerAction::NOTHING</ref><sp/>&amp;&amp;<sp/>compiler_action<sp/>!=<sp/><ref refid="shCompiler_8h_1af049975952f79ea4bf6cb1582447a384a6d561cf452ba2bf08c1019a174343d63" kindref="member">CompilerAction::LINK_ONLY</ref>));</highlight></codeline>
<codeline lineno="456"><highlight class="normal"></highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(compiler_action<sp/>==<sp/><ref refid="shCompiler_8h_1af049975952f79ea4bf6cb1582447a384a8697250efc73639dd2a6e7da243ac68b" kindref="member">CompilerAction::NOTHING</ref>)</highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="459"><highlight class="normal"></highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/><ref refid="shLog_8cpp_1a2926179632c7c86265007652d3d30b14" kindref="member">sh_debug</ref>(<ref refid="shLog_8h_1a66042048eb3ce30a1dccb2ebf8c2fd5ca0012c8acb382f295fe614046a64bba11" kindref="member">SHLOG_INFO</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Compile<sp/>shaders<sp/>to<sp/>&apos;%s&apos;&quot;</highlight><highlight class="normal">,<sp/>comp.<ref refid="classshc_1_1CompilationContext_1a8994f2ef66560adc7db8cae292c5ec65" kindref="member">compInfo</ref>().<ref refid="classShCompilationInfo_1a41e70a42b6835776ecae73c660dca82a" kindref="member">dest</ref>().str());</highlight></codeline>
<codeline lineno="461"><highlight class="normal"></highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classShCompilationInfo" kindref="compound">ShCompilationInfo</ref><sp/>&amp;compInfo<sp/>=<sp/>comp.<ref refid="classshc_1_1CompilationContext_1a8994f2ef66560adc7db8cae292c5ec65" kindref="member">compInfo</ref>();</highlight></codeline>
<codeline lineno="463"><highlight class="normal"></highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/>compInfo.<ref refid="classShCompilationInfo_1a168e26f2dbba8585a4617e838df9aeb8" kindref="member">hwopts</ref>().<ref refid="structShHardwareOptions_1ae09ce6b24618d08ee4e1f8af91ff1b0b" kindref="member">dumpInfo</ref>();</highlight></codeline>
<codeline lineno="465"><highlight class="normal"></highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Compile.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="467"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>PROFILE_OPCODE_USAGE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/>memset(opcode_usage,<sp/>0,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(opcode_usage));</highlight></codeline>
<codeline lineno="469"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="470"><highlight class="normal"></highlight></codeline>
<codeline lineno="471"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(compiler_action<sp/>!=<sp/><ref refid="shCompiler_8h_1af049975952f79ea4bf6cb1582447a384a6d561cf452ba2bf08c1019a174343d63" kindref="member">CompilerAction::LINK_ONLY</ref>)</highlight></codeline>
<codeline lineno="472"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>sourceFileNo<sp/>=<sp/>0;<sp/>sourceFileNo<sp/>&lt;<sp/>compInfo.<ref refid="classShCompilationInfo_1a111f652f9ce42741d9a587b6cb41d464" kindref="member">sources</ref>().size();<sp/>sourceFileNo++)</highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>String<sp/>&amp;sourceFileName<sp/>=<sp/>compInfo.<ref refid="classShCompilationInfo_1a111f652f9ce42741d9a587b6cb41d464" kindref="member">sources</ref>()[sourceFileNo];</highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>String<sp/>objFileName<sp/>=<sp/><ref refid="namespaceshc_1a721ecfdbb88fa2a042d32ee935757308" kindref="member">get_obj_file_name_from_source</ref>(sourceFileName,<sp/>compInfo);</highlight></codeline>
<codeline lineno="477"><highlight class="normal"></highlight></codeline>
<codeline lineno="478"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>need_recompile<sp/>=<sp/>should_rebuild<sp/>||<sp/><ref refid="namespaceshc_1a7446716e9cbf38d49b9caed94e2f0782" kindref="member">should_recompile_sh</ref>(compInfo,<sp/>sourceFileName);</highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!need_recompile)</highlight></codeline>
<codeline lineno="480"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="shLog_8cpp_1a2926179632c7c86265007652d3d30b14" kindref="member">sh_debug</ref>(<ref refid="shLog_8h_1a66042048eb3ce30a1dccb2ebf8c2fd5ca0012c8acb382f295fe614046a64bba11" kindref="member">SHLOG_INFO</ref>,<sp/></highlight><highlight class="stringliteral">&quot;No<sp/>changes<sp/>in<sp/>&apos;%s&apos;,<sp/>skipping&quot;</highlight><highlight class="normal">,<sp/>sourceFileName.str());</highlight></codeline>
<codeline lineno="482"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="483"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="484"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="485"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="namespaceshc_1afaf6380f5f0210d6e84612bb88fc93c8" kindref="member">relinkOnly</ref>)</highlight></codeline>
<codeline lineno="486"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="487"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="shLog_8cpp_1a2926179632c7c86265007652d3d30b14" kindref="member">sh_debug</ref>(<ref refid="shLog_8h_1a66042048eb3ce30a1dccb2ebf8c2fd5ca6112bd3e7c5d175bac1569c33c1630ad" kindref="member">SHLOG_FATAL</ref>,<sp/></highlight><highlight class="stringliteral">&quot;need<sp/>to<sp/>recompile<sp/>%s<sp/>but<sp/>compilation<sp/>is<sp/>denied<sp/>by<sp/>-relinkOnly&quot;</highlight><highlight class="normal">,<sp/>sourceFileName.str());</highlight></codeline>
<codeline lineno="488"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="489"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="490"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="shLog_8cpp_1a2926179632c7c86265007652d3d30b14" kindref="member">sh_debug</ref>(<ref refid="shLog_8h_1a66042048eb3ce30a1dccb2ebf8c2fd5ca5395b0c35e96d97ae9ac7f83b0665310" kindref="member">SHLOG_NORMAL</ref>,<sp/></highlight><highlight class="stringliteral">&quot;[INFO]<sp/>compiling<sp/>&apos;%s&apos;...&quot;</highlight><highlight class="normal">,<sp/>sourceFileName.str());</highlight></codeline>
<codeline lineno="491"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fflush(stdout);</highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Tab&lt;SimpleString&gt;<sp/>dependenciesList(tmpmem_ptr());</highlight></codeline>
<codeline lineno="493"><highlight class="normal"></highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TargetContext<sp/>targetCtx<sp/>=<sp/>comp.<ref refid="classshc_1_1CompilationContext_1a54c6fe92110c82a2d44d8cff82f28261" kindref="member">makeTargetContext</ref>(sourceFileName.c_str());</highlight></codeline>
<codeline lineno="495"><highlight class="normal"></highlight></codeline>
<codeline lineno="496"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceshc_1a68edf3f17609b3f932b935fe388cd910" kindref="member">reset_source_file</ref>();</highlight></codeline>
<codeline lineno="497"><highlight class="normal"></highlight></codeline>
<codeline lineno="498"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classCodeSourceBlocks_1a019f1745807a8f2da9de6362c5629d17" kindref="member">CodeSourceBlocks::incFiles</ref>.reset();</highlight></codeline>
<codeline lineno="499"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="shCompiler_8cpp_1aa5fd6859aefd108067b3de33c29fec1f" kindref="member">parse_shader_script</ref>(sourceFileName,<sp/>&amp;dependenciesList,<sp/>targetCtx);</highlight></codeline>
<codeline lineno="500"><highlight class="normal"></highlight></codeline>
<codeline lineno="501"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>_CROSS_TARGET_DX12</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="502"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(use_two_phase_compilation(<ref refid="namespaceshc_1a47efde6b3d493adbe2119a5593807d36" kindref="member">shc::config</ref>().targetPlatform))</highlight></codeline>
<codeline lineno="503"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="linkShaders_8cpp_1aa120dd755705808199f189664dd5edce" kindref="member">recompile_shaders</ref>(targetCtx);</highlight></codeline>
<codeline lineno="504"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="505"><highlight class="normal"></highlight></codeline>
<codeline lineno="506"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dependenciesList.reserve(dependenciesList.size()<sp/>+<sp/><ref refid="classCodeSourceBlocks_1a019f1745807a8f2da9de6362c5629d17" kindref="member">CodeSourceBlocks::incFiles</ref>.nameCount());</highlight></codeline>
<codeline lineno="507"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0,<sp/>e<sp/>=<sp/><ref refid="classCodeSourceBlocks_1a019f1745807a8f2da9de6362c5629d17" kindref="member">CodeSourceBlocks::incFiles</ref>.nameCount();<sp/>i<sp/>&lt;<sp/>e;<sp/>i++)</highlight></codeline>
<codeline lineno="508"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dependenciesList.push_back()<sp/>=<sp/><ref refid="classCodeSourceBlocks_1a019f1745807a8f2da9de6362c5629d17" kindref="member">CodeSourceBlocks::incFiles</ref>.getName(i);</highlight></codeline>
<codeline lineno="509"><highlight class="normal"></highlight></codeline>
<codeline lineno="510"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="linkShaders_8cpp_1ada36b76256c8c7e82e285ca2281bb944" kindref="member">update_shaders_timestamps</ref>(dependenciesList,<sp/>targetCtx);</highlight></codeline>
<codeline lineno="511"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!no_save)</highlight></codeline>
<codeline lineno="512"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="linkShaders_8cpp_1a3d948e926ac6e6c6574b37fda70e5f41" kindref="member">save_scripted_shaders</ref>(objFileName,<sp/>dependenciesList,<sp/>targetCtx);</highlight></codeline>
<codeline lineno="513"><highlight class="normal"></highlight></codeline>
<codeline lineno="514"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceShaderCompilerStat_1af13618154cfa1ad6730602881bb9fcd5" kindref="member">ShaderCompilerStat::collectTargetStats</ref>(targetCtx);</highlight></codeline>
<codeline lineno="515"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="516"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="517"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="518"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(compiler_action<sp/>==<sp/><ref refid="shCompiler_8h_1af049975952f79ea4bf6cb1582447a384aa50e5c6c2b6ca607ff7a488cacf8ceaa" kindref="member">CompilerAction::COMPILE_ONLY</ref>)</highlight></codeline>
<codeline lineno="519"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="520"><highlight class="normal"></highlight></codeline>
<codeline lineno="521"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>PROFILE_OPCODE_USAGE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="522"><highlight class="normal"><sp/><sp/>debug(</highlight><highlight class="stringliteral">&quot;opcode<sp/>usage<sp/>(stateblocks):&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="523"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>256;<sp/>i++)</highlight></codeline>
<codeline lineno="524"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(opcode_usage[0][i])</highlight></codeline>
<codeline lineno="525"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>debug(</highlight><highlight class="stringliteral">&quot;<sp/><sp/>%05d:<sp/>%s[%d]&quot;</highlight><highlight class="normal">,<sp/>opcode_usage[0][i],<sp/>ShUtils::shcod_tokname(i),<sp/>i);</highlight></codeline>
<codeline lineno="526"><highlight class="normal"><sp/><sp/>debug(</highlight><highlight class="stringliteral">&quot;opcode<sp/>usage<sp/>(dynamic):&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="527"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>256;<sp/>i++)</highlight></codeline>
<codeline lineno="528"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(opcode_usage[1][i])</highlight></codeline>
<codeline lineno="529"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>debug(</highlight><highlight class="stringliteral">&quot;<sp/><sp/>%05d:<sp/>%s[%d]&quot;</highlight><highlight class="normal">,<sp/>opcode_usage[1][i],<sp/>ShUtils::shcod_tokname(i),<sp/>i);</highlight></codeline>
<codeline lineno="530"><highlight class="normal"><sp/><sp/>debug(</highlight><highlight class="stringliteral">&quot;-----------------------&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="531"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="532"><highlight class="normal"></highlight></codeline>
<codeline lineno="533"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Link.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="534"><highlight class="normal"></highlight></codeline>
<codeline lineno="535"><highlight class="normal"><sp/><sp/><ref refid="shLog_8cpp_1a2926179632c7c86265007652d3d30b14" kindref="member">sh_debug</ref>(<ref refid="shLog_8h_1a66042048eb3ce30a1dccb2ebf8c2fd5ca5395b0c35e96d97ae9ac7f83b0665310" kindref="member">SHLOG_NORMAL</ref>,<sp/></highlight><highlight class="stringliteral">&quot;[INFO]<sp/>Linking...&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="536"><highlight class="normal"></highlight></codeline>
<codeline lineno="537"><highlight class="normal"><sp/><sp/><ref refid="namespaceshc_1a684865d8e3b21456d251eb3400fee52f" kindref="member">resetCompiler</ref>();</highlight></codeline>
<codeline lineno="538"><highlight class="normal"><sp/><sp/>String<sp/>stats;</highlight></codeline>
<codeline lineno="539"><highlight class="normal"><sp/><sp/>stats.resize(2048);</highlight></codeline>
<codeline lineno="540"><highlight class="normal"><sp/><sp/>get_memory_stats(stats,<sp/>2048);</highlight></codeline>
<codeline lineno="541"><highlight class="normal"><sp/><sp/>debug(</highlight><highlight class="stringliteral">&quot;%s&quot;</highlight><highlight class="normal">,<sp/>stats.str());</highlight></codeline>
<codeline lineno="542"><highlight class="normal"></highlight></codeline>
<codeline lineno="543"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!no_save)</highlight></codeline>
<codeline lineno="544"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="545"><highlight class="normal"><sp/><sp/><sp/><sp/>int64_t<sp/>reft<sp/>=<sp/>ref_time_ticks();</highlight></codeline>
<codeline lineno="546"><highlight class="normal"></highlight></codeline>
<codeline lineno="547"><highlight class="normal"><sp/><sp/><sp/><sp/>TargetContext<sp/>targetCtx<sp/>=<sp/>comp.<ref refid="classshc_1_1CompilationContext_1a54c6fe92110c82a2d44d8cff82f28261" kindref="member">makeTargetContext</ref>(compInfo.<ref refid="classShCompilationInfo_1a41e70a42b6835776ecae73c660dca82a" kindref="member">dest</ref>().c_str());</highlight></codeline>
<codeline lineno="548"><highlight class="normal"></highlight></codeline>
<codeline lineno="549"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>sourceFileNo<sp/>=<sp/>0;<sp/>sourceFileNo<sp/>&lt;<sp/>compInfo.<ref refid="classShCompilationInfo_1a111f652f9ce42741d9a587b6cb41d464" kindref="member">sources</ref>().size();<sp/>sourceFileNo++)</highlight></codeline>
<codeline lineno="550"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="551"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>String<sp/>&amp;sourceFileName<sp/>=<sp/>compInfo.<ref refid="classShCompilationInfo_1a111f652f9ce42741d9a587b6cb41d464" kindref="member">sources</ref>()[sourceFileNo];</highlight></codeline>
<codeline lineno="552"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>String<sp/>objFileName<sp/>=<sp/><ref refid="namespaceshc_1a721ecfdbb88fa2a042d32ee935757308" kindref="member">get_obj_file_name_from_source</ref>(sourceFileName,<sp/>compInfo);</highlight></codeline>
<codeline lineno="553"><highlight class="normal"></highlight></codeline>
<codeline lineno="554"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>file_ptr_t<sp/>objFile<sp/>=<sp/>df_open(objFileName,<sp/>DF_READ);</highlight></codeline>
<codeline lineno="555"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>G_ASSERT(objFile);</highlight></codeline>
<codeline lineno="556"><highlight class="normal"></highlight></codeline>
<codeline lineno="557"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>mmaped_len<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="558"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*mmaped<sp/>=<sp/>df_mmap(objFile,<sp/>&amp;mmaped_len);</highlight></codeline>
<codeline lineno="559"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>res<sp/>=<sp/><ref refid="linkShaders_8cpp_1a80685ae901a05b19dd81461d6117456a" kindref="member">link_scripted_shaders</ref>((</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint8_t<sp/>*)mmaped,<sp/>mmaped_len,<sp/>objFileName,<sp/>sourceFileName,<sp/>targetCtx);</highlight></codeline>
<codeline lineno="560"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>df_unmap(mmaped,<sp/>mmaped_len);</highlight></codeline>
<codeline lineno="561"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>G_ASSERT(res);</highlight></codeline>
<codeline lineno="562"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>SHOW_MEM_STAT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="563"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>get_memory_stats(stats,<sp/>2048);</highlight></codeline>
<codeline lineno="564"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>debug(</highlight><highlight class="stringliteral">&quot;%s&quot;</highlight><highlight class="normal">,<sp/>stats.str());</highlight></codeline>
<codeline lineno="565"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="566"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>df_close(objFile);</highlight></codeline>
<codeline lineno="567"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="568"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="shLog_8cpp_1a2926179632c7c86265007652d3d30b14" kindref="member">sh_debug</ref>(<ref refid="shLog_8h_1a66042048eb3ce30a1dccb2ebf8c2fd5ca5395b0c35e96d97ae9ac7f83b0665310" kindref="member">SHLOG_NORMAL</ref>,<sp/></highlight><highlight class="stringliteral">&quot;[INFO]<sp/>linked<sp/>in<sp/>%gms&quot;</highlight><highlight class="normal">,<sp/>get_time_usec(reft)<sp/>/<sp/>1000.);</highlight></codeline>
<codeline lineno="569"><highlight class="normal"></highlight></codeline>
<codeline lineno="570"><highlight class="normal"><sp/><sp/><sp/><sp/>reft<sp/>=<sp/>ref_time_ticks();</highlight></codeline>
<codeline lineno="571"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="shLog_8cpp_1a2926179632c7c86265007652d3d30b14" kindref="member">sh_debug</ref>(<ref refid="shLog_8h_1a66042048eb3ce30a1dccb2ebf8c2fd5ca5395b0c35e96d97ae9ac7f83b0665310" kindref="member">SHLOG_NORMAL</ref>,<sp/></highlight><highlight class="stringliteral">&quot;[INFO]<sp/>Saving...&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="572"><highlight class="normal"></highlight></codeline>
<codeline lineno="573"><highlight class="normal"><sp/><sp/><sp/><sp/>Tab&lt;SimpleString&gt;<sp/>dependenciesList(tmpmem_ptr());</highlight></codeline>
<codeline lineno="574"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>String<sp/>&amp;source<sp/>:<sp/>compInfo.sources())</highlight></codeline>
<codeline lineno="575"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>dependenciesList.push_back(SimpleString(source.c_str()));</highlight></codeline>
<codeline lineno="576"><highlight class="normal"></highlight></codeline>
<codeline lineno="577"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Don&apos;t<sp/>save<sp/>cppstcode<sp/>for<sp/>the<sp/>lib,<sp/>it<sp/>would<sp/>be<sp/>gibberish</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="578"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="linkShaders_8cpp_1a3d948e926ac6e6c6574b37fda70e5f41" kindref="member">save_scripted_shaders</ref>(compInfo.<ref refid="classShCompilationInfo_1a41e70a42b6835776ecae73c660dca82a" kindref="member">dest</ref>().c_str(),<sp/>dependenciesList,<sp/>targetCtx,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="579"><highlight class="normal"></highlight></codeline>
<codeline lineno="580"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="shLog_8cpp_1a2926179632c7c86265007652d3d30b14" kindref="member">sh_debug</ref>(<ref refid="shLog_8h_1a66042048eb3ce30a1dccb2ebf8c2fd5ca5395b0c35e96d97ae9ac7f83b0665310" kindref="member">SHLOG_NORMAL</ref>,<sp/></highlight><highlight class="stringliteral">&quot;[INFO]<sp/>saved<sp/>in<sp/>%gms&quot;</highlight><highlight class="normal">,<sp/>get_time_usec(reft)<sp/>/<sp/>1000.);</highlight></codeline>
<codeline lineno="581"><highlight class="normal"></highlight></codeline>
<codeline lineno="582"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceShaderCompilerStat_1af13618154cfa1ad6730602881bb9fcd5" kindref="member">ShaderCompilerStat::collectTargetStats</ref>(targetCtx);</highlight></codeline>
<codeline lineno="583"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="584"><highlight class="normal">}</highlight></codeline>
<codeline lineno="585"><highlight class="normal"></highlight></codeline>
<codeline lineno="586"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="namespaceshc_1ae6471d14423f7b8cd5b71d7055d79c75" kindref="member">buildShaderBinDump</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*bindump_fn,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*sh_fn,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>forceRebuild,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>minidump,<sp/><ref refid="makeShBinDump_8h_1a7e4c9039c4d793938486d7f1c089329f" kindref="member">BindumpPackingFlags</ref><sp/>packing_flags,</highlight></codeline>
<codeline lineno="587"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classshc_1_1CompilationContext" kindref="compound">shc::CompilationContext</ref><sp/>&amp;comp)</highlight></codeline>
<codeline lineno="588"><highlight class="normal">{</highlight></codeline>
<codeline lineno="589"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!forceRebuild)</highlight></codeline>
<codeline lineno="590"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="591"><highlight class="normal"><sp/><sp/><sp/><sp/>int64_t<sp/>sh_time,<sp/>dump_time;</highlight></codeline>
<codeline lineno="592"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="loadShaders_8cpp_1a8e8aeca3872c125527b1516641de7bff" kindref="member">get_file_time64</ref>(sh_fn,<sp/>sh_time))</highlight></codeline>
<codeline lineno="593"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="594"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>dd_erase(bindump_fn);</highlight></codeline>
<codeline lineno="595"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="shLog_8cpp_1a2926179632c7c86265007652d3d30b14" kindref="member">sh_debug</ref>(<ref refid="shLog_8h_1a66042048eb3ce30a1dccb2ebf8c2fd5caae3b70b41400c8a36e8a094ac1dbe43c" kindref="member">SHLOG_ERROR</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Time<sp/>stat<sp/>syscall<sp/>for<sp/>bindump<sp/>%s<sp/>erred,<sp/>aborting<sp/>build...&quot;</highlight><highlight class="normal">,<sp/>bindump_fn);</highlight></codeline>
<codeline lineno="596"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="597"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="598"><highlight class="normal"></highlight></codeline>
<codeline lineno="599"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="loadShaders_8cpp_1a8e8aeca3872c125527b1516641de7bff" kindref="member">get_file_time64</ref>(bindump_fn,<sp/>dump_time))</highlight></codeline>
<codeline lineno="600"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="601"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="namespaceshc_1a47efde6b3d493adbe2119a5593807d36" kindref="member">shc::config</ref>().compileCppStcode()<sp/>&amp;&amp;<sp/>!minidump)</highlight></codeline>
<codeline lineno="602"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="603"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>statMaybe<sp/>=<sp/><ref refid="cppStcode_8cpp_1a01338eb44e787adf597d13bf70be252d" kindref="member">get_main_cpp_files_stat</ref>(comp.<ref refid="classshc_1_1CompilationContext_1a8994f2ef66560adc7db8cae292c5ec65" kindref="member">compInfo</ref>());</highlight></codeline>
<codeline lineno="604"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!statMaybe<sp/>||<sp/>statMaybe-&gt;savedBlkHash<sp/>!=<sp/>comp.<ref refid="classshc_1_1CompilationContext_1a8994f2ef66560adc7db8cae292c5ec65" kindref="member">compInfo</ref>().<ref refid="classShCompilationInfo_1a51ba987b41b2c9fdbe000567104f2e26" kindref="member">targetBlkHash</ref>())</highlight></codeline>
<codeline lineno="605"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dump_time<sp/>=<sp/>-1;<sp/></highlight><highlight class="comment">//<sp/>@HACK<sp/>to<sp/>force<sp/>recompilation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="606"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="607"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dump_time<sp/>=<sp/>min(dump_time,<sp/>statMaybe-&gt;mtime);</highlight></codeline>
<codeline lineno="608"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="609"><highlight class="normal"></highlight></codeline>
<codeline lineno="610"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(dump_time<sp/>&gt;=<sp/>sh_time)</highlight></codeline>
<codeline lineno="611"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="612"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FullFileLoadCB<sp/>crd(bindump_fn);</highlight></codeline>
<codeline lineno="613"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>hdr[4];</highlight></codeline>
<codeline lineno="614"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(crd.tryRead(hdr,<sp/>16)<sp/>==<sp/>16)</highlight></codeline>
<codeline lineno="615"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="616"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(hdr[0]<sp/>==<sp/>_MAKE4C(</highlight><highlight class="stringliteral">&apos;VSPS&apos;</highlight><highlight class="normal">)<sp/>&amp;&amp;<sp/>hdr[1]<sp/>==<sp/>_MAKE4C(</highlight><highlight class="stringliteral">&apos;dump&apos;</highlight><highlight class="normal">)<sp/>&amp;&amp;<sp/>hdr[2]<sp/>==<sp/>SHADER_BINDUMP_VER)</highlight></codeline>
<codeline lineno="617"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="618"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="shLog_8cpp_1a2926179632c7c86265007652d3d30b14" kindref="member">sh_debug</ref>(<ref refid="shLog_8h_1a66042048eb3ce30a1dccb2ebf8c2fd5ca0012c8acb382f295fe614046a64bba11" kindref="member">SHLOG_INFO</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Skipping<sp/>up-to-date<sp/>binary<sp/>%sdump<sp/>&apos;%s&apos;\n&quot;</highlight><highlight class="normal">,<sp/>minidump<sp/>?<sp/></highlight><highlight class="stringliteral">&quot;mini&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">,<sp/>bindump_fn);</highlight></codeline>
<codeline lineno="619"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="620"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="621"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="622"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="623"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="624"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="625"><highlight class="normal"><sp/><sp/>String<sp/>tempbindump_fn(bindump_fn);</highlight></codeline>
<codeline lineno="626"><highlight class="normal"><sp/><sp/>tempbindump_fn<sp/>+=<sp/></highlight><highlight class="stringliteral">&quot;.tmp.bin&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="627"><highlight class="normal"></highlight></codeline>
<codeline lineno="628"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="makeShBinDump_8cpp_1ae7f4166574586836d89736ca05ad6090" kindref="member">make_scripted_shaders_dump</ref>(tempbindump_fn,<sp/>sh_fn,<sp/>minidump,<sp/>packing_flags,<sp/>comp))</highlight></codeline>
<codeline lineno="629"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="630"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="shLog_8cpp_1a2926179632c7c86265007652d3d30b14" kindref="member">sh_debug</ref>(<ref refid="shLog_8h_1a66042048eb3ce30a1dccb2ebf8c2fd5caae3b70b41400c8a36e8a094ac1dbe43c" kindref="member">SHLOG_ERROR</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Can&apos;t<sp/>build<sp/>binary<sp/>%sdump<sp/>from:<sp/>&apos;%s&apos;\n&quot;</highlight><highlight class="normal">,<sp/>minidump<sp/>?<sp/></highlight><highlight class="stringliteral">&quot;mini&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">,<sp/>sh_fn);</highlight></codeline>
<codeline lineno="631"><highlight class="normal"><sp/><sp/><sp/><sp/>dd_erase(bindump_fn);</highlight></codeline>
<codeline lineno="632"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="633"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="634"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="635"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="636"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!dd_rename(tempbindump_fn.c_str(),<sp/>bindump_fn))</highlight></codeline>
<codeline lineno="637"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="638"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="shLog_8cpp_1a2926179632c7c86265007652d3d30b14" kindref="member">sh_debug</ref>(<ref refid="shLog_8h_1a66042048eb3ce30a1dccb2ebf8c2fd5caae3b70b41400c8a36e8a094ac1dbe43c" kindref="member">SHLOG_ERROR</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Can&apos;t<sp/>rename<sp/>binary<sp/>&apos;%s&apos;-&gt;&apos;%s&apos;\n&quot;</highlight><highlight class="normal">,<sp/>tempbindump_fn.c_str(),<sp/>bindump_fn);</highlight></codeline>
<codeline lineno="639"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="640"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="641"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="642"><highlight class="normal"></highlight></codeline>
<codeline lineno="643"><highlight class="normal"><sp/><sp/><ref refid="shLog_8cpp_1a2926179632c7c86265007652d3d30b14" kindref="member">sh_debug</ref>(<ref refid="shLog_8h_1a66042048eb3ce30a1dccb2ebf8c2fd5ca0012c8acb382f295fe614046a64bba11" kindref="member">SHLOG_INFO</ref>,<sp/></highlight><highlight class="stringliteral">&quot;+++<sp/>Built<sp/>shaders<sp/>binary<sp/>%sdump:<sp/>&apos;%s&apos;\n&quot;</highlight><highlight class="normal">,<sp/>minidump<sp/>?<sp/></highlight><highlight class="stringliteral">&quot;mini&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">,<sp/>bindump_fn);</highlight></codeline>
<codeline lineno="644"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="645"><highlight class="normal">}</highlight></codeline>
<codeline lineno="646"><highlight class="normal"></highlight></codeline>
<codeline lineno="647"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceshc_1a0f186f2ce7014f20aa47f31446439dbe" kindref="member">setRequiredShadersBlock</ref>(DataBlock<sp/>*block)<sp/>{<sp/>reqShadersBlock<sp/>=<sp/>block;<sp/>}</highlight></codeline>
<codeline lineno="648"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceshc_1a76f9fbee49ca2f49bfd7aee5b06bb529" kindref="member">setRequiredShadersDef</ref>(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>on)<sp/>{<sp/>defShaderReq<sp/>=<sp/>on;<sp/>}</highlight></codeline>
<codeline lineno="649"><highlight class="normal"></highlight></codeline>
<codeline lineno="650"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="namespaceshc_1a0e6b3705eca44599c1964ff3953e6a75" kindref="member">isShaderRequired</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*shader_name)</highlight></codeline>
<codeline lineno="651"><highlight class="normal">{</highlight></codeline>
<codeline lineno="652"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>reqShadersBlock<sp/>?<sp/>reqShadersBlock-&gt;getBool(shader_name,<sp/>defShaderReq)<sp/>:<sp/>defShaderReq;</highlight></codeline>
<codeline lineno="653"><highlight class="normal">}</highlight></codeline>
<codeline lineno="654"><highlight class="normal"></highlight></codeline>
<codeline lineno="655"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceshc_1a92cbda8ac75d5cf670a548ef272d6825" kindref="member">clearFlobVarRefList</ref>()<sp/>{<sp/>explicitGlobVarRef.reset();<sp/>}</highlight></codeline>
<codeline lineno="656"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceshc_1a4170f0d930cdf92ed2b78bed24168644" kindref="member">addExplicitGlobVarRef</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*vname)<sp/>{<sp/>explicitGlobVarRef.addNameId(vname);<sp/>}</highlight></codeline>
<codeline lineno="657"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="namespaceshc_1a924aa4883ff8d5dfd8c3bea14a4de2fb" kindref="member">isGlobVarRequired</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*vname)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>explicitGlobVarRef.getNameId(vname)<sp/>!=<sp/>-1;<sp/>}</highlight></codeline>
<codeline lineno="658"><highlight class="normal"></highlight></codeline>
<codeline lineno="659" refid="structshc_1_1ShaderValidVariantList" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structshc_1_1ShaderValidVariantList" kindref="compound">ShaderValidVariantList</ref></highlight></codeline>
<codeline lineno="660"><highlight class="normal">{</highlight></codeline>
<codeline lineno="661" refid="structshc_1_1ShaderValidVariantList_1_1VarVal" refkind="compound"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structshc_1_1ShaderValidVariantList_1_1VarVal" kindref="compound">VarVal</ref></highlight></codeline>
<codeline lineno="662"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="663"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="structshc_1_1ShaderValidVariantList_1_1VarVal_1af67bea296efb2892b5ec7164844530d2" kindref="member">nameId</ref>;</highlight></codeline>
<codeline lineno="664"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><ref refid="structshc_1_1ShaderValidVariantList_1_1VarVal_1aaa21f6defa47c658a223e5b1d34f5915" kindref="member">val</ref>;</highlight></codeline>
<codeline lineno="665"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="666" refid="structshc_1_1ShaderValidVariantList_1_1Ref" refkind="compound"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structshc_1_1ShaderValidVariantList_1_1Ref" kindref="compound">Ref</ref></highlight></codeline>
<codeline lineno="667"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="668"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/><ref refid="structshc_1_1ShaderValidVariantList_1_1Ref_1aac4aa970ab1fa061ee016b6e69ab84bd" kindref="member">startIdx</ref>,<sp/><ref refid="structshc_1_1ShaderValidVariantList_1_1Ref_1af18f1182ab10eb5e89dc31cf0f6436db" kindref="member">count</ref>;</highlight></codeline>
<codeline lineno="669"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="670"><highlight class="normal"><sp/><sp/><ref refid="nameMap_8h_1ad3f42c540507651a7e4ce93760afc216" kindref="member">SCFastNameMap</ref><sp/><ref refid="structshc_1_1ShaderValidVariantList_1a948ff19acd251868eaf242f674dee3b7" kindref="member">vars</ref>;</highlight></codeline>
<codeline lineno="671"><highlight class="normal"><sp/><sp/>Tab&lt;VarVal&gt;<sp/><ref refid="structshc_1_1ShaderValidVariantList_1aa869e9a29e4adc5e39e8840ae27d8271" kindref="member">vvData</ref>;</highlight></codeline>
<codeline lineno="672"><highlight class="normal"><sp/><sp/>Tab&lt;Ref&gt;<sp/><ref refid="structshc_1_1ShaderValidVariantList_1a125892edadc6616cebe124f92c5281a1" kindref="member">vv</ref>;</highlight></codeline>
<codeline lineno="673"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="structshc_1_1ShaderValidVariantList_1aced0cb1523137fe1f439bca44f2f4e21" kindref="member">invalidAsNull</ref>;</highlight></codeline>
<codeline lineno="674"><highlight class="normal"></highlight></codeline>
<codeline lineno="675"><highlight class="normal"><sp/><sp/><ref refid="structshc_1_1ShaderValidVariantList_1aa6353c2252be16a5350815f39c41327a" kindref="member">ShaderValidVariantList</ref>()<sp/>:<sp/><ref refid="structshc_1_1ShaderValidVariantList_1aa869e9a29e4adc5e39e8840ae27d8271" kindref="member">vvData</ref>(midmem),<sp/><ref refid="structshc_1_1ShaderValidVariantList_1a125892edadc6616cebe124f92c5281a1" kindref="member">vv</ref>(midmem),<sp/><ref refid="structshc_1_1ShaderValidVariantList_1aced0cb1523137fe1f439bca44f2f4e21" kindref="member">invalidAsNull</ref>(defTreatInvalidAsNull)<sp/>{}</highlight></codeline>
<codeline lineno="676"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="structshc_1_1ShaderValidVariantList_1a130a4402d183d0d07efa9e45f655a33d" kindref="member">fill</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>DataBlock<sp/>&amp;blk)</highlight></codeline>
<codeline lineno="677"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="678"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nid<sp/>=<sp/>blk.getNameId(</highlight><highlight class="stringliteral">&quot;invalid&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="679"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>blk.blockCount();<sp/>i++)</highlight></codeline>
<codeline lineno="680"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(blk.getBlock(i)-&gt;getBlockNameId()<sp/>==<sp/>nid)</highlight></codeline>
<codeline lineno="681"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="682"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>DataBlock<sp/>&amp;b<sp/>=<sp/>*blk.getBlock(i);</highlight></codeline>
<codeline lineno="683"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Ref<sp/>&amp;r<sp/>=<sp/><ref refid="structshc_1_1ShaderValidVariantList_1a125892edadc6616cebe124f92c5281a1" kindref="member">vv</ref>.push_back();</highlight></codeline>
<codeline lineno="684"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>r.startIdx<sp/>=<sp/><ref refid="structshc_1_1ShaderValidVariantList_1aa869e9a29e4adc5e39e8840ae27d8271" kindref="member">vvData</ref>.size();</highlight></codeline>
<codeline lineno="685"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>b.paramCount();<sp/>j++)</highlight></codeline>
<codeline lineno="686"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(b.getParamType(j)<sp/>==<sp/>DataBlock::TYPE_INT)</highlight></codeline>
<codeline lineno="687"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="688"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>VarVal<sp/>&amp;v<sp/>=<sp/><ref refid="structshc_1_1ShaderValidVariantList_1aa869e9a29e4adc5e39e8840ae27d8271" kindref="member">vvData</ref>.push_back();</highlight></codeline>
<codeline lineno="689"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v.nameId<sp/>=<sp/><ref refid="structshc_1_1ShaderValidVariantList_1a948ff19acd251868eaf242f674dee3b7" kindref="member">vars</ref>.addNameId(b.getParamName(j));</highlight></codeline>
<codeline lineno="690"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v.val<sp/>=<sp/>(real)b.getInt(j);</highlight></codeline>
<codeline lineno="691"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="692"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(b.getParamType(j)<sp/>==<sp/>DataBlock::TYPE_REAL)</highlight></codeline>
<codeline lineno="693"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="694"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>VarVal<sp/>&amp;v<sp/>=<sp/><ref refid="structshc_1_1ShaderValidVariantList_1aa869e9a29e4adc5e39e8840ae27d8271" kindref="member">vvData</ref>.push_back();</highlight></codeline>
<codeline lineno="695"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v.nameId<sp/>=<sp/><ref refid="structshc_1_1ShaderValidVariantList_1a948ff19acd251868eaf242f674dee3b7" kindref="member">vars</ref>.addNameId(b.getParamName(j));</highlight></codeline>
<codeline lineno="696"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v.val<sp/>=<sp/>b.getReal(j);</highlight></codeline>
<codeline lineno="697"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="698"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>r.count<sp/>=<sp/><ref refid="structshc_1_1ShaderValidVariantList_1aa869e9a29e4adc5e39e8840ae27d8271" kindref="member">vvData</ref>.size()<sp/>-<sp/>r.startIdx;</highlight></codeline>
<codeline lineno="699"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!r.count)</highlight></codeline>
<codeline lineno="700"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structshc_1_1ShaderValidVariantList_1a125892edadc6616cebe124f92c5281a1" kindref="member">vv</ref>.pop_back();</highlight></codeline>
<codeline lineno="701"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="702"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structshc_1_1ShaderValidVariantList_1aa869e9a29e4adc5e39e8840ae27d8271" kindref="member">vvData</ref>.shrink_to_fit();</highlight></codeline>
<codeline lineno="703"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structshc_1_1ShaderValidVariantList_1a125892edadc6616cebe124f92c5281a1" kindref="member">vv</ref>.shrink_to_fit();</highlight></codeline>
<codeline lineno="704"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structshc_1_1ShaderValidVariantList_1aced0cb1523137fe1f439bca44f2f4e21" kindref="member">invalidAsNull</ref><sp/>=<sp/>blk.getBool(</highlight><highlight class="stringliteral">&quot;treatInvalidAsNull&quot;</highlight><highlight class="normal">,<sp/><ref refid="structshc_1_1ShaderValidVariantList_1aced0cb1523137fe1f439bca44f2f4e21" kindref="member">invalidAsNull</ref>);</highlight></codeline>
<codeline lineno="705"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="706"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="structshc_1_1ShaderValidVariantList_1ad6f735c145d945a488b7bebe0d725765" kindref="member">makeTypeMap</ref>(Tab&lt;int&gt;<sp/>&amp;map,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classShaderVariant_1_1TypeTable" kindref="compound">ShaderVariant::TypeTable</ref><sp/>&amp;v)</highlight></codeline>
<codeline lineno="707"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="708"><highlight class="normal"><sp/><sp/><sp/><sp/>map.resize(<ref refid="structshc_1_1ShaderValidVariantList_1a948ff19acd251868eaf242f674dee3b7" kindref="member">vars</ref>.nameCount());</highlight></codeline>
<codeline lineno="709"><highlight class="normal"><sp/><sp/><sp/><sp/>mem_set_ff(map);</highlight></codeline>
<codeline lineno="710"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>v.<ref refid="classShaderVariant_1_1TypeTable_1ad107f77c534bdad10abcdea8f7709a04" kindref="member">getCount</ref>();<sp/>i++)</highlight></codeline>
<codeline lineno="711"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="712"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal"><sp/>=<sp/><ref refid="structshc_1_1ShaderValidVariantList_1a948ff19acd251868eaf242f674dee3b7" kindref="member">vars</ref>.getNameId(v.<ref refid="classShaderVariant_1_1TypeTable_1ac082abb9c75345172274377069963b67" kindref="member">getIntervalName</ref>(i));</highlight></codeline>
<codeline lineno="713"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">id</highlight><highlight class="normal"><sp/>!=<sp/>-1)</highlight></codeline>
<codeline lineno="714"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>map[id]<sp/>=<sp/>i;</highlight></codeline>
<codeline lineno="715"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="716"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="717"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="structshc_1_1ShaderValidVariantList_1ad52b5075e1aaa086d08f51a45b05081f" kindref="member">gatherRelevantIdx</ref>(FastIntList<sp/>&amp;idx,<sp/>dag::ConstSpan&lt;int&gt;<sp/>map)</highlight></codeline>
<codeline lineno="718"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="719"><highlight class="normal"><sp/><sp/><sp/><sp/>idx.reset();</highlight></codeline>
<codeline lineno="720"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/><ref refid="structshc_1_1ShaderValidVariantList_1a125892edadc6616cebe124f92c5281a1" kindref="member">vv</ref>.size();<sp/>i++)</highlight></codeline>
<codeline lineno="721"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="722"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>all_found<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="723"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j<sp/>=<sp/><ref refid="structshc_1_1ShaderValidVariantList_1a125892edadc6616cebe124f92c5281a1" kindref="member">vv</ref>[i].startIdx,<sp/>end<sp/>=<sp/>j<sp/>+<sp/><ref refid="structshc_1_1ShaderValidVariantList_1a125892edadc6616cebe124f92c5281a1" kindref="member">vv</ref>[i].count;<sp/>j<sp/>&lt;<sp/>end;<sp/>j++)</highlight></codeline>
<codeline lineno="724"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(map[<ref refid="structshc_1_1ShaderValidVariantList_1aa869e9a29e4adc5e39e8840ae27d8271" kindref="member">vvData</ref>[j].nameId]<sp/>==<sp/>-1)</highlight></codeline>
<codeline lineno="725"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="726"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>all_found<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="727"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="728"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="729"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(all_found)</highlight></codeline>
<codeline lineno="730"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>idx.addInt(i);</highlight></codeline>
<codeline lineno="731"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="732"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="733"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="structshc_1_1ShaderValidVariantList_1a913691c2717636d810d147bdc8f5d676" kindref="member">gatherRelevantIdx2</ref>(FastIntList<sp/>&amp;idx,<sp/>dag::ConstSpan&lt;int&gt;<sp/>map,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>FastIntList<sp/>&amp;idx_base,<sp/>dag::ConstSpan&lt;int&gt;<sp/>base_map)</highlight></codeline>
<codeline lineno="734"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="735"><highlight class="normal"><sp/><sp/><sp/><sp/>idx.reset();</highlight></codeline>
<codeline lineno="736"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/><ref refid="structshc_1_1ShaderValidVariantList_1a125892edadc6616cebe124f92c5281a1" kindref="member">vv</ref>.size();<sp/>i++)</highlight></codeline>
<codeline lineno="737"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!idx_base.hasInt(i))</highlight></codeline>
<codeline lineno="738"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="739"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>all_found<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="740"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j<sp/>=<sp/><ref refid="structshc_1_1ShaderValidVariantList_1a125892edadc6616cebe124f92c5281a1" kindref="member">vv</ref>[i].startIdx,<sp/>end<sp/>=<sp/>j<sp/>+<sp/><ref refid="structshc_1_1ShaderValidVariantList_1a125892edadc6616cebe124f92c5281a1" kindref="member">vv</ref>[i].count;<sp/>j<sp/>&lt;<sp/>end;<sp/>j++)</highlight></codeline>
<codeline lineno="741"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(map[<ref refid="structshc_1_1ShaderValidVariantList_1aa869e9a29e4adc5e39e8840ae27d8271" kindref="member">vvData</ref>[j].nameId]<sp/>==<sp/>-1<sp/>&amp;&amp;<sp/>base_map[<ref refid="structshc_1_1ShaderValidVariantList_1aa869e9a29e4adc5e39e8840ae27d8271" kindref="member">vvData</ref>[j].nameId]<sp/>==<sp/>-1)</highlight></codeline>
<codeline lineno="742"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="743"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>all_found<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="744"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="745"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="746"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(all_found)</highlight></codeline>
<codeline lineno="747"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>idx.addInt(i);</highlight></codeline>
<codeline lineno="748"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="749"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="750"><highlight class="normal"></highlight></codeline>
<codeline lineno="751"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="structshc_1_1ShaderValidVariantList_1a52c61fb587619d2a9b8acbc2bc57f709" kindref="member">checkValid</ref>(dag::ConstSpan&lt;int&gt;<sp/>idx,<sp/>dag::ConstSpan&lt;int&gt;<sp/>map,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classShaderVariant_1_1VariantSrc" kindref="compound">ShaderVariant::VariantSrc</ref><sp/>&amp;v)</highlight></codeline>
<codeline lineno="752"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="753"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classShaderVariant_1_1TypeTable" kindref="compound">ShaderVariant::TypeTable</ref><sp/>&amp;vt<sp/>=<sp/>v.<ref refid="classShaderVariant_1_1SearchInfo_1ae7ab7b41c1350b7d0cc422832d4481c6" kindref="member">getTypes</ref>();</highlight></codeline>
<codeline lineno="754"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>idx.size();<sp/>i++)</highlight></codeline>
<codeline lineno="755"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="756"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>all_eq<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="757"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j<sp/>=<sp/><ref refid="structshc_1_1ShaderValidVariantList_1a125892edadc6616cebe124f92c5281a1" kindref="member">vv</ref>[idx[i]].startIdx,<sp/>end<sp/>=<sp/>j<sp/>+<sp/><ref refid="structshc_1_1ShaderValidVariantList_1a125892edadc6616cebe124f92c5281a1" kindref="member">vv</ref>[idx[i]].count;<sp/>j<sp/>&lt;<sp/>end;<sp/>j++)</highlight></codeline>
<codeline lineno="758"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="759"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>mid<sp/>=<sp/>map[<ref refid="structshc_1_1ShaderValidVariantList_1aa869e9a29e4adc5e39e8840ae27d8271" kindref="member">vvData</ref>[j].nameId];</highlight></codeline>
<codeline lineno="760"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>G_ASSERT(mid<sp/>&gt;=<sp/>0);</highlight></codeline>
<codeline lineno="761"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(vt.<ref refid="classShaderVariant_1_1TypeTable_1aae37e869da8e7b771d21030dfb004488" kindref="member">normalizeValue</ref>(mid,<sp/><ref refid="structshc_1_1ShaderValidVariantList_1aa869e9a29e4adc5e39e8840ae27d8271" kindref="member">vvData</ref>[j].val)<sp/>!=<sp/>v.<ref refid="classShaderVariant_1_1SearchInfo_1aa1f92a9c7c4f6e24c9be422636519e8d" kindref="member">getNormalizedValue</ref>(mid))</highlight></codeline>
<codeline lineno="762"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="763"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>all_eq<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="764"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="765"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="766"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="767"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(all_eq)</highlight></codeline>
<codeline lineno="768"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="769"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="770"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="771"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="772"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="structshc_1_1ShaderValidVariantList_1a0500b7eb2fbd41b4b87f8de02369b4d7" kindref="member">checkValid2</ref>(dag::ConstSpan&lt;int&gt;<sp/>idx,<sp/>dag::ConstSpan&lt;int&gt;<sp/>map,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classShaderVariant_1_1VariantSrc" kindref="compound">ShaderVariant::VariantSrc</ref><sp/>&amp;v,<sp/>dag::ConstSpan&lt;int&gt;<sp/>map2,</highlight></codeline>
<codeline lineno="773"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classShaderVariant_1_1VariantSrc" kindref="compound">ShaderVariant::VariantSrc</ref><sp/>&amp;v2)</highlight></codeline>
<codeline lineno="774"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="775"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classShaderVariant_1_1TypeTable" kindref="compound">ShaderVariant::TypeTable</ref><sp/>&amp;vt<sp/>=<sp/>v.<ref refid="classShaderVariant_1_1SearchInfo_1ae7ab7b41c1350b7d0cc422832d4481c6" kindref="member">getTypes</ref>();</highlight></codeline>
<codeline lineno="776"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classShaderVariant_1_1TypeTable" kindref="compound">ShaderVariant::TypeTable</ref><sp/>&amp;vt2<sp/>=<sp/>v2.<ref refid="classShaderVariant_1_1SearchInfo_1ae7ab7b41c1350b7d0cc422832d4481c6" kindref="member">getTypes</ref>();</highlight></codeline>
<codeline lineno="777"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>idx.size();<sp/>i++)</highlight></codeline>
<codeline lineno="778"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="779"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>all_eq<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="780"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j<sp/>=<sp/><ref refid="structshc_1_1ShaderValidVariantList_1a125892edadc6616cebe124f92c5281a1" kindref="member">vv</ref>[idx[i]].startIdx,<sp/>end<sp/>=<sp/>j<sp/>+<sp/><ref refid="structshc_1_1ShaderValidVariantList_1a125892edadc6616cebe124f92c5281a1" kindref="member">vv</ref>[idx[i]].count;<sp/>j<sp/>&lt;<sp/>end;<sp/>j++)</highlight></codeline>
<codeline lineno="781"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="782"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>mid<sp/>=<sp/>map[<ref refid="structshc_1_1ShaderValidVariantList_1aa869e9a29e4adc5e39e8840ae27d8271" kindref="member">vvData</ref>[j].nameId];</highlight></codeline>
<codeline lineno="783"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>mid2<sp/>=<sp/>map2[<ref refid="structshc_1_1ShaderValidVariantList_1aa869e9a29e4adc5e39e8840ae27d8271" kindref="member">vvData</ref>[j].nameId];</highlight></codeline>
<codeline lineno="784"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>G_ASSERT(mid<sp/>&gt;=<sp/>0<sp/>||<sp/>mid2<sp/>&gt;=<sp/>0);</highlight></codeline>
<codeline lineno="785"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((mid<sp/>&gt;=<sp/>0<sp/>&amp;&amp;<sp/>vt.<ref refid="classShaderVariant_1_1TypeTable_1aae37e869da8e7b771d21030dfb004488" kindref="member">normalizeValue</ref>(mid,<sp/><ref refid="structshc_1_1ShaderValidVariantList_1aa869e9a29e4adc5e39e8840ae27d8271" kindref="member">vvData</ref>[j].val)<sp/>!=<sp/>v.<ref refid="classShaderVariant_1_1SearchInfo_1aa1f92a9c7c4f6e24c9be422636519e8d" kindref="member">getNormalizedValue</ref>(mid))<sp/>||</highlight></codeline>
<codeline lineno="786"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(mid2<sp/>&gt;=<sp/>0<sp/>&amp;&amp;<sp/>vt.<ref refid="classShaderVariant_1_1TypeTable_1aae37e869da8e7b771d21030dfb004488" kindref="member">normalizeValue</ref>(mid2,<sp/><ref refid="structshc_1_1ShaderValidVariantList_1aa869e9a29e4adc5e39e8840ae27d8271" kindref="member">vvData</ref>[j].val)<sp/>!=<sp/>v2.<ref refid="classShaderVariant_1_1SearchInfo_1aa1f92a9c7c4f6e24c9be422636519e8d" kindref="member">getNormalizedValue</ref>(mid2)))</highlight></codeline>
<codeline lineno="787"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="788"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>all_eq<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="789"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="790"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="791"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="792"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(all_eq)</highlight></codeline>
<codeline lineno="793"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="794"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="795"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="796"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="797"><highlight class="normal"></highlight></codeline>
<codeline lineno="798"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="structshc_1_1ShaderValidVariantList_1a9c742bbb1a0a4e712e707e77b40a1c88" kindref="member">dump</ref>()</highlight></codeline>
<codeline lineno="799"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="800"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/><ref refid="structshc_1_1ShaderValidVariantList_1a125892edadc6616cebe124f92c5281a1" kindref="member">vv</ref>.size();<sp/>i++)</highlight></codeline>
<codeline lineno="801"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="802"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>debug(</highlight><highlight class="stringliteral">&quot;<sp/><sp/>invalid<sp/>%d:&quot;</highlight><highlight class="normal">,<sp/><ref refid="structshc_1_1ShaderValidVariantList_1a125892edadc6616cebe124f92c5281a1" kindref="member">vv</ref>[i].count);</highlight></codeline>
<codeline lineno="803"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/><ref refid="structshc_1_1ShaderValidVariantList_1a125892edadc6616cebe124f92c5281a1" kindref="member">vv</ref>[i].count;<sp/>j++)</highlight></codeline>
<codeline lineno="804"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>debug(</highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/>%s[%d]=%f:&quot;</highlight><highlight class="normal">,<sp/><ref refid="structshc_1_1ShaderValidVariantList_1a948ff19acd251868eaf242f674dee3b7" kindref="member">vars</ref>.getName(<ref refid="structshc_1_1ShaderValidVariantList_1aa869e9a29e4adc5e39e8840ae27d8271" kindref="member">vvData</ref>[<ref refid="structshc_1_1ShaderValidVariantList_1a125892edadc6616cebe124f92c5281a1" kindref="member">vv</ref>[i].startIdx<sp/>+<sp/>j].nameId),<sp/><ref refid="structshc_1_1ShaderValidVariantList_1aa869e9a29e4adc5e39e8840ae27d8271" kindref="member">vvData</ref>[<ref refid="structshc_1_1ShaderValidVariantList_1a125892edadc6616cebe124f92c5281a1" kindref="member">vv</ref>[i].startIdx<sp/>+<sp/>j].nameId,</highlight></codeline>
<codeline lineno="805"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structshc_1_1ShaderValidVariantList_1aa869e9a29e4adc5e39e8840ae27d8271" kindref="member">vvData</ref>[<ref refid="structshc_1_1ShaderValidVariantList_1a125892edadc6616cebe124f92c5281a1" kindref="member">vv</ref>[i].startIdx<sp/>+<sp/>j].val);</highlight></codeline>
<codeline lineno="806"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="807"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="808"><highlight class="normal">};</highlight></codeline>
<codeline lineno="809"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>eastl::vector&lt;ShaderValidVariantList&gt;<sp/>svvl;</highlight></codeline>
<codeline lineno="810"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="nameMap_8h_1ad3f42c540507651a7e4ce93760afc216" kindref="member">SCFastNameMap</ref><sp/>svvlNames;</highlight></codeline>
<codeline lineno="811"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>ShaderValidVariantList<sp/>*curSvvl<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="812"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classShaderVariant_1_1TypeTable" kindref="compound">ShaderVariant::TypeTable</ref><sp/>*curStatVariantTypes<sp/>=<sp/>NULL,<sp/>*curDynVariantTypes<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="813"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>FastIntList<sp/>curVvStIdx,<sp/>curVvDynIdx;</highlight></codeline>
<codeline lineno="814"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>Tab&lt;int&gt;<sp/>stTypeMap(midmem),<sp/><ref refid="namespaceshc_1a8d010b29b1aa57369044c8220756c693" kindref="member">dynTypeMap</ref>(midmem);</highlight></codeline>
<codeline lineno="815"><highlight class="normal"></highlight></codeline>
<codeline lineno="816"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceshc_1a68f3fb95029d4b4646af3bd76dd3bac1" kindref="member">setInvalidAsNullDef</ref>(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>on)<sp/>{<sp/>defTreatInvalidAsNull<sp/>=<sp/>on;<sp/>}</highlight></codeline>
<codeline lineno="817"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceshc_1ab66b53336232f9618b2312d6eebe10ab" kindref="member">setValidVariantsBlock</ref>(DataBlock<sp/>*block)</highlight></codeline>
<codeline lineno="818"><highlight class="normal">{</highlight></codeline>
<codeline lineno="819"><highlight class="normal"><sp/><sp/>svvl.clear();</highlight></codeline>
<codeline lineno="820"><highlight class="normal"><sp/><sp/>svvlNames.reset();</highlight></codeline>
<codeline lineno="821"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!block)</highlight></codeline>
<codeline lineno="822"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="823"><highlight class="normal"></highlight></codeline>
<codeline lineno="824"><highlight class="normal"><sp/><sp/>svvl.emplace_back();</highlight></codeline>
<codeline lineno="825"><highlight class="normal"><sp/><sp/>svvl.back().fill(*block);</highlight></codeline>
<codeline lineno="826"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nid<sp/>=<sp/>block-&gt;getNameId(</highlight><highlight class="stringliteral">&quot;invalid&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="827"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>block-&gt;blockCount();<sp/>i++)</highlight></codeline>
<codeline lineno="828"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="829"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(block-&gt;getBlock(i)-&gt;getBlockNameId()<sp/>==<sp/>nid)</highlight></codeline>
<codeline lineno="830"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="831"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(svvlNames.getNameId(block-&gt;getBlock(i)-&gt;getBlockName())<sp/>!=<sp/>-1)</highlight></codeline>
<codeline lineno="832"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="833"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="shLog_8cpp_1a2926179632c7c86265007652d3d30b14" kindref="member">sh_debug</ref>(<ref refid="shLog_8h_1a66042048eb3ce30a1dccb2ebf8c2fd5caae3b70b41400c8a36e8a094ac1dbe43c" kindref="member">SHLOG_ERROR</ref>,<sp/></highlight><highlight class="stringliteral">&quot;duplicate<sp/>block<sp/>&lt;%s&gt;<sp/>in<sp/>valid_variants<sp/>block&quot;</highlight><highlight class="normal">,<sp/>block-&gt;getBlock(i)-&gt;getBlockName());</highlight></codeline>
<codeline lineno="834"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="835"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="836"><highlight class="normal"></highlight></codeline>
<codeline lineno="837"><highlight class="normal"><sp/><sp/><sp/><sp/>svvl.emplace_back();</highlight></codeline>
<codeline lineno="838"><highlight class="normal"><sp/><sp/><sp/><sp/>ShaderValidVariantList<sp/>&amp;l<sp/>=<sp/>svvl.back();</highlight></codeline>
<codeline lineno="839"><highlight class="normal"><sp/><sp/><sp/><sp/>l.fill(*block);</highlight></codeline>
<codeline lineno="840"><highlight class="normal"><sp/><sp/><sp/><sp/>l.fill(*block-&gt;getBlock(i));</highlight></codeline>
<codeline lineno="841"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(l.vv.size())</highlight></codeline>
<codeline lineno="842"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>svvlNames.addNameId(block-&gt;getBlock(i)-&gt;getBlockName());</highlight></codeline>
<codeline lineno="843"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="844"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>svvl.pop_back();</highlight></codeline>
<codeline lineno="845"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="846"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(svvl.size()<sp/>==<sp/>1<sp/>&amp;&amp;<sp/>!svvl[0].vv.size())</highlight></codeline>
<codeline lineno="847"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="848"><highlight class="normal"><sp/><sp/><sp/><sp/>svvl.clear();</highlight></codeline>
<codeline lineno="849"><highlight class="normal"><sp/><sp/><sp/><sp/>svvlNames.reset();</highlight></codeline>
<codeline lineno="850"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="851"><highlight class="normal"></highlight></codeline>
<codeline lineno="852"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>svvl.size();<sp/>i++)</highlight></codeline>
<codeline lineno="853"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="854"><highlight class="normal"><sp/><sp/><sp/><sp/>debug(</highlight><highlight class="stringliteral">&quot;shader<sp/>&lt;%s&gt;,<sp/>%d&quot;</highlight><highlight class="normal">,<sp/>i<sp/>==<sp/>0<sp/>?<sp/></highlight><highlight class="stringliteral">&quot;ALL&quot;</highlight><highlight class="normal"><sp/>:<sp/>svvlNames.getName(i<sp/>-<sp/>1),<sp/>svvl[i].vv.size());</highlight></codeline>
<codeline lineno="855"><highlight class="normal"><sp/><sp/><sp/><sp/>svvl[i].dump();</highlight></codeline>
<codeline lineno="856"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="857"><highlight class="normal">}</highlight></codeline>
<codeline lineno="858"><highlight class="normal"></highlight></codeline>
<codeline lineno="859"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceshc_1a950f822ed9707332f0fb4c602ea82c32" kindref="member">prepareTestVariantShader</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*name)</highlight></codeline>
<codeline lineno="860"><highlight class="normal">{</highlight></codeline>
<codeline lineno="861"><highlight class="normal"><sp/><sp/>curStatVariantTypes<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="862"><highlight class="normal"><sp/><sp/>curDynVariantTypes<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="863"><highlight class="normal"><sp/><sp/>curSvvl<sp/>=<sp/>svvl.size()<sp/>&amp;&amp;<sp/>name<sp/>?<sp/>&amp;svvl[svvlNames.getNameId(name)<sp/>+<sp/>1]<sp/>:<sp/>NULL;</highlight></codeline>
<codeline lineno="864"><highlight class="normal"><sp/><sp/>curVvStIdx.reset();</highlight></codeline>
<codeline lineno="865"><highlight class="normal"><sp/><sp/>curVvDynIdx.reset();</highlight></codeline>
<codeline lineno="866"><highlight class="normal">}</highlight></codeline>
<codeline lineno="867"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceshc_1a76cbe60a6ca21ca5a6760ce4beabca8e" kindref="member">prepareTestVariant</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classShaderVariant_1_1TypeTable" kindref="compound">ShaderVariant::TypeTable</ref><sp/>*sv,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classShaderVariant_1_1TypeTable" kindref="compound">ShaderVariant::TypeTable</ref><sp/>*dv)</highlight></codeline>
<codeline lineno="868"><highlight class="normal">{</highlight></codeline>
<codeline lineno="869"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!curSvvl)</highlight></codeline>
<codeline lineno="870"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="871"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sv)</highlight></codeline>
<codeline lineno="872"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="873"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(curStatVariantTypes<sp/>!=<sp/>sv)</highlight></codeline>
<codeline lineno="874"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="875"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>curSvvl-&gt;<ref refid="structshc_1_1ShaderValidVariantList_1ad6f735c145d945a488b7bebe0d725765" kindref="member">makeTypeMap</ref>(stTypeMap,<sp/>*sv);</highlight></codeline>
<codeline lineno="876"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>curSvvl-&gt;<ref refid="structshc_1_1ShaderValidVariantList_1ad52b5075e1aaa086d08f51a45b05081f" kindref="member">gatherRelevantIdx</ref>(curVvStIdx,<sp/>stTypeMap);</highlight></codeline>
<codeline lineno="877"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="878"><highlight class="normal"><sp/><sp/><sp/><sp/>curStatVariantTypes<sp/>=<sp/>sv;</highlight></codeline>
<codeline lineno="879"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="880"><highlight class="normal"></highlight></codeline>
<codeline lineno="881"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(dv)</highlight></codeline>
<codeline lineno="882"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="883"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(curDynVariantTypes<sp/>!=<sp/>dv)</highlight></codeline>
<codeline lineno="884"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="885"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>curSvvl-&gt;<ref refid="structshc_1_1ShaderValidVariantList_1ad6f735c145d945a488b7bebe0d725765" kindref="member">makeTypeMap</ref>(<ref refid="namespaceshc_1a8d010b29b1aa57369044c8220756c693" kindref="member">dynTypeMap</ref>,<sp/>*dv);</highlight></codeline>
<codeline lineno="886"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>curSvvl-&gt;<ref refid="structshc_1_1ShaderValidVariantList_1a913691c2717636d810d147bdc8f5d676" kindref="member">gatherRelevantIdx2</ref>(curVvDynIdx,<sp/><ref refid="namespaceshc_1a8d010b29b1aa57369044c8220756c693" kindref="member">dynTypeMap</ref>,<sp/>curVvStIdx,<sp/>stTypeMap);</highlight></codeline>
<codeline lineno="887"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="888"><highlight class="normal"><sp/><sp/><sp/><sp/>curDynVariantTypes<sp/>=<sp/>dv;</highlight></codeline>
<codeline lineno="889"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="890"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="891"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="892"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>reset<sp/>dynamic<sp/>variant</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="893"><highlight class="normal"><sp/><sp/><sp/><sp/>curDynVariantTypes<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="894"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="895"><highlight class="normal">}</highlight></codeline>
<codeline lineno="896"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="namespaceshc_1aba09c71513e9342dcc4f03d128304ba2" kindref="member">isValidVariant</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classShaderVariant_1_1VariantSrc" kindref="compound">ShaderVariant::VariantSrc</ref><sp/>*sv,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classShaderVariant_1_1VariantSrc" kindref="compound">ShaderVariant::VariantSrc</ref><sp/>*dv)</highlight></codeline>
<codeline lineno="897"><highlight class="normal">{</highlight></codeline>
<codeline lineno="898"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!curSvvl)</highlight></codeline>
<codeline lineno="899"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="900"><highlight class="normal"></highlight></codeline>
<codeline lineno="901"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!dv)</highlight></codeline>
<codeline lineno="902"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>!curSvvl-&gt;<ref refid="structshc_1_1ShaderValidVariantList_1a52c61fb587619d2a9b8acbc2bc57f709" kindref="member">checkValid</ref>(curVvStIdx.getList(),<sp/>stTypeMap,<sp/>*sv);</highlight></codeline>
<codeline lineno="903"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>!curSvvl-&gt;<ref refid="structshc_1_1ShaderValidVariantList_1a0500b7eb2fbd41b4b87f8de02369b4d7" kindref="member">checkValid2</ref>(curVvDynIdx.getList(),<sp/><ref refid="namespaceshc_1a8d010b29b1aa57369044c8220756c693" kindref="member">dynTypeMap</ref>,<sp/>*dv,<sp/>stTypeMap,<sp/>*sv);</highlight></codeline>
<codeline lineno="904"><highlight class="normal">}</highlight></codeline>
<codeline lineno="905"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="namespaceshc_1af50955b1a5a2daa082f696535dbd19c3" kindref="member">shouldMarkInvalidAsNull</ref>()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>curSvvl<sp/>?<sp/>curSvvl-&gt;<ref refid="structshc_1_1ShaderValidVariantList_1aced0cb1523137fe1f439bca44f2f4e21" kindref="member">invalidAsNull</ref><sp/>:<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="906"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceshc_1a2c0f7d473897e78b8669d30936452b73" kindref="member">setOutputUpdbPath</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*path)<sp/>{<sp/>updbPath<sp/>=<sp/>path;<sp/>}</highlight></codeline>
<codeline lineno="907"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="namespaceshc_1a3f38be8e25161985591a2a48a7162572" kindref="member">getOutputUpdbPath</ref>()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>updbPath;<sp/>}</highlight></codeline>
<codeline lineno="908"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>shc</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="shCompiler.cpp"/>
  </compounddef>
</doxygen>
