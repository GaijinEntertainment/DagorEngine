<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.7" xml:lang="en-US">
  <compounddef id="hlslRegisters_8cpp" kind="file" language="C++">
    <compoundname>hlslRegisters.cpp</compoundname>
    <includes refid="hlslRegisters_8h" local="yes">hlslRegisters.h</includes>
    <includes refid="const3d_8h" local="yes">const3d.h</includes>
    <includes refid="globalConfig_8h" local="yes">globalConfig.h</includes>
    <incdepgraph>
      <node id="47">
        <label>DebugLevel.h</label>
        <link refid="DebugLevel_8h"/>
        <childnode refid="16" relation="include">
        </childnode>
      </node>
      <node id="44">
        <label>blkHash.h</label>
        <link refid="blkHash_8h"/>
      </node>
      <node id="4">
        <label>commonUtils.h</label>
        <link refid="commonUtils_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="17">
        <label>const3d.h</label>
        <link refid="const3d_8h"/>
        <childnode refid="18" relation="include">
        </childnode>
      </node>
      <node id="21">
        <label>cppStcode.h</label>
        <link refid="cppStcode_8h"/>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="44" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="41" relation="include">
        </childnode>
      </node>
      <node id="22">
        <label>cppStcodeAssembly.h</label>
        <link refid="cppStcodeAssembly_8h"/>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
        <childnode refid="38" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="39" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
        <childnode refid="41" relation="include">
        </childnode>
      </node>
      <node id="23">
        <label>cppStcodeBuilder.h</label>
        <link refid="cppStcodeBuilder_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
      </node>
      <node id="48">
        <label>cppStcodePlatformInfo.h</label>
        <link refid="cppStcodePlatformInfo_8h"/>
        <childnode refid="16" relation="include">
        </childnode>
      </node>
      <node id="19">
        <label>globalConfig.h</label>
        <link refid="globalConfig_8h"/>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="47" relation="include">
        </childnode>
        <childnode refid="48" relation="include">
        </childnode>
        <childnode refid="49" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
      </node>
      <node id="31">
        <label>hash.h</label>
        <link refid="hash_8h"/>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>hlslRegisters.cpp</label>
        <link refid="hlslRegisters_8cpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>hlslRegisters.h</label>
        <link refid="hlslRegisters_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
      </node>
      <node id="27">
        <label>nameMap.h</label>
        <link refid="nameMap_8h"/>
        <childnode refid="28" relation="include">
        </childnode>
      </node>
      <node id="42">
        <label>processes.h</label>
        <link refid="processes_8h"/>
        <childnode refid="43" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="20">
        <label>shCompilationInfo.h</label>
        <link refid="shCompilationInfo_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="44" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="45" relation="include">
        </childnode>
        <childnode refid="46" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>shLog.h</label>
        <link refid="shLog_8h"/>
      </node>
      <node id="25">
        <label>shaderSave.h</label>
        <link refid="shaderSave_8h"/>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
      </node>
      <node id="24">
        <label>shaderTab.h</label>
        <link refid="shaderTab_8h"/>
        <childnode refid="25" relation="include">
        </childnode>
      </node>
      <node id="26">
        <label>varMap.h</label>
        <link refid="varMap_8h"/>
        <childnode refid="27" relation="include">
        </childnode>
      </node>
      <node id="30">
        <label>EASTL/algorithm.h</label>
      </node>
      <node id="15">
        <label>EASTL/array.h</label>
      </node>
      <node id="9">
        <label>EASTL/optional.h</label>
      </node>
      <node id="8">
        <label>EASTL/string.h</label>
      </node>
      <node id="39">
        <label>EASTL/unique_ptr.h</label>
      </node>
      <node id="16">
        <label>cstdint</label>
      </node>
      <node id="33">
        <label>cstring</label>
      </node>
      <node id="11">
        <label>dag/dag_vector.h</label>
      </node>
      <node id="12">
        <label>debug/dag_assert.h</label>
      </node>
      <node id="18">
        <label>drv/3d/dag_consts.h</label>
      </node>
      <node id="10">
        <label>generic/dag_enumerate.h</label>
      </node>
      <node id="13">
        <label>generic/dag_expected.h</label>
      </node>
      <node id="43">
        <label>generic/dag_fixedMoveOnlyFunction.h</label>
      </node>
      <node id="14">
        <label>generic/dag_tab.h</label>
      </node>
      <node id="32">
        <label>hash/BLAKE3/blake3.h</label>
      </node>
      <node id="49">
        <label>ioSys/dag_dataBlock.h</label>
      </node>
      <node id="35">
        <label>memory/dag_mem.h</label>
      </node>
      <node id="38">
        <label>shaders/dag_shaderVarType.h</label>
      </node>
      <node id="46">
        <label>shaders/dag_shaders.h</label>
      </node>
      <node id="36">
        <label>shaders/shExprTypes.h</label>
      </node>
      <node id="37">
        <label>shaders/shFunc.h</label>
      </node>
      <node id="41">
        <label>shaders/shader_layout.h</label>
      </node>
      <node id="34">
        <label>shaders/slotTexturesRange.h</label>
      </node>
      <node id="40">
        <label>ska_hash_map/flat_hash_map2.hpp</label>
      </node>
      <node id="29">
        <label>util/dag_bindump_ext.h</label>
      </node>
      <node id="7">
        <label>util/dag_globDef.h</label>
      </node>
      <node id="28">
        <label>util/dag_oaHashNameMap.h</label>
      </node>
      <node id="6">
        <label>util/dag_safeArg.h</label>
      </node>
      <node id="45">
        <label>util/dag_string.h</label>
      </node>
      <node id="5">
        <label>utility</label>
      </node>
    </incdepgraph>
      <sectiondef kind="func">
      <memberdef kind="function" id="hlslRegisters_8cpp_1afd8a77eba3a0edc222131d1646e3113c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>eastl::array&lt; <ref refid="classHlslRegAllocator" kindref="compound">HlslRegAllocator</ref>, <ref refid="hlslRegisters_8h_1aa3a591153956a0cd6630e2d20870fb9baa1b0c0ad8683cfcb48d3ad7402e41ca3" kindref="member">HLSL_RSPACE_COUNT</ref> &gt;</type>
        <definition>eastl::array&lt; HlslRegAllocator, HLSL_RSPACE_COUNT &gt; make_default_hlsl_reg_allocators</definition>
        <argsstring>(int max_const_count)</argsstring>
        <name>make_default_hlsl_reg_allocators</name>
        <param>
          <type>int</type>
          <declname>max_const_count</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hlslRegisters.cpp" line="51" column="14" bodyfile="hlslRegisters.cpp" bodystart="51" bodyend="64"/>
      </memberdef>
      <memberdef kind="function" id="hlslRegisters_8cpp_1abb0e59f2c06ad028c08d95e56509ea0c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classHlslRegAllocator" kindref="compound">HlslRegAllocator</ref></type>
        <definition>HlslRegAllocator make_default_cbuf_reg_allocator</definition>
        <argsstring>()</argsstring>
        <name>make_default_cbuf_reg_allocator</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hlslRegisters.cpp" line="66" column="18" bodyfile="hlslRegisters.cpp" bodystart="66" bodyend="66"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/>Copyright<sp/>(C)<sp/>Gaijin<sp/>Games<sp/>KFT.<sp/><sp/>All<sp/>rights<sp/>reserved.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="hlslRegisters_8h" kindref="compound">hlslRegisters.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="const3d_8h" kindref="compound">const3d.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="globalConfig_8h" kindref="compound">globalConfig.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>HlslRegAllocator::allocator_scan_routine_t<sp/><ref refid="classHlslRegAllocator_1ab7e50b1fbb35f345fa3e8790fcc327b4" kindref="member">HlslRegAllocator::DEFAULT_SCAN</ref><sp/>=<sp/>+[](<ref refid="classHlslRegAllocator" kindref="compound">HlslRegAllocator</ref><sp/>&amp;alloc,<sp/>uint32_t<sp/>count)<sp/>{</highlight></codeline>
<codeline lineno="9"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(uint32_t<sp/>i<sp/>=<sp/>alloc.policy.<ref refid="structHlslRegAllocator_1_1Policy_1ae4ef40d32b4e10529d049c78e85b1287" kindref="member">base</ref>;<sp/>i<sp/>&lt;=<sp/>alloc.policy.<ref refid="structHlslRegAllocator_1_1Policy_1aab4b4af9a4900829c130764cbbbaa202" kindref="member">cap</ref><sp/>-<sp/>count;<sp/>++i)</highlight></codeline>
<codeline lineno="10"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="11"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(alloc.slots.size()<sp/>&lt;<sp/>i<sp/>+<sp/>count)</highlight></codeline>
<codeline lineno="12"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>alloc.slots.resize(i<sp/>+<sp/>count);</highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>lastTaken<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(uint32_t<sp/>j<sp/>=<sp/>i;<sp/>j<sp/>&lt;<sp/>i<sp/>+<sp/>count;<sp/>++j)</highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(alloc.slots[j].used)</highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lastTaken<sp/>=<sp/>j;</highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(lastTaken<sp/>==<sp/>-1)</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>int32_t(i);</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>i<sp/>=<sp/>lastTaken;</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>int32_t{-1};</highlight></codeline>
<codeline lineno="26"><highlight class="normal">};</highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>HlslRegAllocator::allocator_scan_routine_t<sp/><ref refid="classHlslRegAllocator_1a0a0fb25b42e5cd874779eac543d809ab" kindref="member">HlslRegAllocator::BACKWARDS_SCAN</ref><sp/>=<sp/>+[](<ref refid="classHlslRegAllocator" kindref="compound">HlslRegAllocator</ref><sp/>&amp;alloc,<sp/>uint32_t<sp/>count)<sp/>{</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/>G_ASSERT(alloc.policy.<ref refid="structHlslRegAllocator_1_1Policy_1aab4b4af9a4900829c130764cbbbaa202" kindref="member">cap</ref><sp/>&lt;<sp/>INT16_MAX);<sp/></highlight><highlight class="comment">//<sp/>Sanity<sp/>check<sp/>to<sp/>avoid<sp/>accidentally<sp/>creating<sp/>large<sp/>bw<sp/>allocators</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(uint32_t<sp/>i<sp/>=<sp/>alloc.policy.<ref refid="structHlslRegAllocator_1_1Policy_1aab4b4af9a4900829c130764cbbbaa202" kindref="member">cap</ref><sp/>-<sp/>count;<sp/>i<sp/>!=<sp/>alloc.policy.<ref refid="structHlslRegAllocator_1_1Policy_1ae4ef40d32b4e10529d049c78e85b1287" kindref="member">base</ref><sp/>-<sp/>1;<sp/>--i)</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(alloc.slots.size()<sp/>&lt;<sp/>i<sp/>+<sp/>count)</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>alloc.slots.resize(i<sp/>+<sp/>count);</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>firstTaken<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(uint32_t<sp/>j<sp/>=<sp/>i;<sp/>j<sp/>&lt;<sp/>i<sp/>+<sp/>count;<sp/>++j)</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(alloc.slots[j].used)</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>firstTaken<sp/>=<sp/>j;</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(firstTaken<sp/>==<sp/>-1)</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>int32_t(i);</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>i<sp/>=<sp/>firstTaken<sp/>-<sp/>count<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>int32_t{-1};</highlight></codeline>
<codeline lineno="49"><highlight class="normal">};</highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal">eastl::array&lt;HlslRegAllocator,<sp/>HLSL_RSPACE_COUNT&gt;<sp/><ref refid="hlslRegisters_8cpp_1afd8a77eba3a0edc222131d1646e3113c" kindref="member">make_default_hlsl_reg_allocators</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>max_const_count)</highlight></codeline>
<codeline lineno="52"><highlight class="normal">{</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classHlslRegAllocator" kindref="compound">HlslRegAllocator</ref>{<ref refid="structHlslRegAllocator_1_1Policy" kindref="compound">HlslRegAllocator::Policy</ref>{0,<sp/><ref refid="const3d_8h_1adcefae8ee2da251ed0425a2f2360ebed" kindref="member">MAX_T_REGISTERS</ref>}},</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Limiting<sp/>to<sp/>16<sp/>because<sp/>of<sp/>4<sp/>bits<sp/>for<sp/>size<sp/>in<sp/>slot<sp/>textures</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classHlslRegAllocator" kindref="compound">HlslRegAllocator</ref>{<ref refid="structHlslRegAllocator_1_1Policy" kindref="compound">HlslRegAllocator::Policy</ref>{0,<sp/>uint32_t(<ref refid="namespaceshc_1a47efde6b3d493adbe2119a5593807d36" kindref="member">shc::config</ref>().enableBindless<sp/>?<sp/><ref refid="const3d_8h_1aff818fade0b06272f655d5a535399158" kindref="member">MAX_S_REGISTERS</ref><sp/>:<sp/>16)}},</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classHlslRegAllocator" kindref="compound">HlslRegAllocator</ref>{<ref refid="classHlslRegAllocator" kindref="compound">HlslRegAllocator</ref>::Policy{0,<sp/>static_cast&lt;uint32_t&gt;(max_const_count)}},</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>@TODO:<sp/>only<sp/>backwards<sp/>scan<sp/>on<sp/>DX11.<sp/>This<sp/>requires<sp/>register<sp/>refactorings.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>HlslRegAllocator{HlslRegAllocator::Policy{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>0,<sp/>MAX_U_REGISTERS,<sp/>UAVS_CONTEND_WITH_RTVS<sp/>?<sp/>HlslRegAllocator::BACKWARDS_SCAN<sp/>:<sp/>HlslRegAllocator::DEFAULT_SCAN}},</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classHlslRegAllocator" kindref="compound">HlslRegAllocator</ref>{<ref refid="classHlslRegAllocator" kindref="compound">HlslRegAllocator</ref>::Policy{0,<sp/><ref refid="const3d_8h_1acac5ed8d76ca2f79a103eea62528f820" kindref="member">MAX_U_REGISTERS</ref>,<sp/><ref refid="classHlslRegAllocator" kindref="compound">HlslRegAllocator</ref>::BACKWARDS_SCAN}},</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classHlslRegAllocator" kindref="compound">HlslRegAllocator</ref>{<ref refid="classHlslRegAllocator" kindref="compound">HlslRegAllocator</ref>::Policy{0,<sp/><ref refid="const3d_8h_1a1738522f66cb09e0d5d6f6061c206440" kindref="member">MAX_B_REGISTERS</ref>}},</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="64"><highlight class="normal">}</highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"><ref refid="classHlslRegAllocator" kindref="compound">HlslRegAllocator</ref><sp/><ref refid="hlslRegisters_8cpp_1abb0e59f2c06ad028c08d95e56509ea0c" kindref="member">make_default_cbuf_reg_allocator</ref>()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classHlslRegAllocator" kindref="compound">HlslRegAllocator</ref>{<ref refid="structHlslRegAllocator_1_1Policy" kindref="compound">HlslRegAllocator::Policy</ref>{0,<sp/><ref refid="const3d_8h_1a0e38df57573e73202236611878ba34cb" kindref="member">MAX_CBUFFER_VECTORS</ref>}};<sp/>}</highlight></codeline>
    </programlisting>
    <location file="hlslRegisters.cpp"/>
  </compounddef>
</doxygen>
