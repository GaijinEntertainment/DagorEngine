<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.7" xml:lang="en-US">
  <compounddef id="gitRunner_8cpp" kind="file" language="C++">
    <compoundname>gitRunner.cpp</compoundname>
    <includes refid="gitRunner_8h" local="yes">gitRunner.h</includes>
    <includes refid="shLog_8h" local="yes">shLog.h</includes>
    <includes local="no">util/dag_simpleString.h</includes>
    <includes local="no">debug/dag_log.h</includes>
    <includes local="no">EASTL/fixed_string.h</includes>
    <includes local="no">EASTL/utility.h</includes>
    <includes local="no">EASTL/optional.h</includes>
    <incdepgraph>
      <node id="1">
        <label>gitRunner.cpp</label>
        <link refid="gitRunner_8cpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>gitRunner.h</label>
        <link refid="gitRunner_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>shLog.h</label>
        <link refid="shLog_8h"/>
      </node>
      <node id="7">
        <label>EASTL/fixed_string.h</label>
      </node>
      <node id="9">
        <label>EASTL/optional.h</label>
      </node>
      <node id="8">
        <label>EASTL/utility.h</label>
      </node>
      <node id="6">
        <label>debug/dag_log.h</label>
      </node>
      <node id="3">
        <label>generic/dag_span.h</label>
      </node>
      <node id="5">
        <label>util/dag_simpleString.h</label>
      </node>
    </incdepgraph>
      <sectiondef kind="define">
      <memberdef kind="define" id="gitRunner_8cpp_1a5963a3facd3cc1e8a4bafbd63eec4d7a" prot="public" static="no">
        <name>CHECK_RET</name>
        <param><defname>error</defname></param>
        <param><defname>ret</defname></param>
        <param><defname>msg</defname></param>
        <param><defname>...</defname></param>
        <initializer>  if (error)                            \
  {                                     \
    logerr(msg, __VA_ARGS__);           \
    return ret;                         \
  }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="gitRunner.cpp" line="11" column="9" bodyfile="gitRunner.cpp" bodystart="11" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="var">
      <memberdef kind="variable" id="gitRunner_8cpp_1a5c4d2295d6d0c6d03360caf98ebb116f" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>constexpr int</type>
        <definition>constexpr int OUTPUT_SIZE</definition>
        <argsstring></argsstring>
        <name>OUTPUT_SIZE</name>
        <initializer>= 1024</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="gitRunner.cpp" line="18" column="22" bodyfile="gitRunner.cpp" bodystart="18" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="gitRunner_8cpp_1a9268094687b4e456676aaf1329b4ebb3" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>constexpr int</type>
        <definition>constexpr int PATH_RESERVE_SIZE</definition>
        <argsstring></argsstring>
        <name>PATH_RESERVE_SIZE</name>
        <initializer>= 128</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="gitRunner.cpp" line="19" column="22" bodyfile="gitRunner.cpp" bodystart="19" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="gitRunner_8cpp_1a6af3286af9b0822c4b8526347d32d2d5" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int execute_cmd</definition>
        <argsstring>(const char *cmd, eastl::fixed_string&lt; char, OUTPUT_SIZE &gt; &amp;output)</argsstring>
        <name>execute_cmd</name>
        <param>
          <type>const char *</type>
          <declname>cmd</declname>
        </param>
        <param>
          <type>eastl::fixed_string&lt; char, OUTPUT_SIZE &gt; &amp;</type>
          <declname>output</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="gitRunner.cpp" line="181" column="12" bodyfile="gitRunner.cpp" bodystart="181" bodyend="181"/>
      </memberdef>
      <memberdef kind="function" id="gitRunner_8cpp_1a83ee1c626ea0a0b13b8a70f286b5c3a1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool check_modified_files</definition>
        <argsstring>(dag::ConstSpan&lt; SimpleString &gt; file_paths)</argsstring>
        <name>check_modified_files</name>
        <param>
          <type>dag::ConstSpan&lt; SimpleString &gt;</type>
          <declname>file_paths</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="gitRunner.cpp" line="184" column="6" bodyfile="gitRunner.cpp" bodystart="184" bodyend="206"/>
      </memberdef>
      <memberdef kind="function" id="gitRunner_8cpp_1a9897df421398ddc99576e2666637251e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int64_t</type>
        <definition>int64_t get_git_timestamp</definition>
        <argsstring>(dag::ConstSpan&lt; SimpleString &gt; file_paths)</argsstring>
        <name>get_git_timestamp</name>
        <param>
          <type>dag::ConstSpan&lt; SimpleString &gt;</type>
          <declname>file_paths</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="gitRunner.cpp" line="208" column="9" bodyfile="gitRunner.cpp" bodystart="208" bodyend="229"/>
      </memberdef>
      <memberdef kind="function" id="gitRunner_8cpp_1a4c60856b2a07506f1e3d6f1163bdfc6b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int64_t</type>
        <definition>int64_t get_git_files_last_commit_timestamp</definition>
        <argsstring>(dag::ConstSpan&lt; SimpleString &gt; file_paths)</argsstring>
        <name>get_git_files_last_commit_timestamp</name>
        <param>
          <type>dag::ConstSpan&lt; SimpleString &gt;</type>
          <declname>file_path</declname>
          <defname>file_paths</defname>
        </param>
        <briefdescription>
<para>Get the timestamp of the most recent commit for list of files. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>file_paths</parametername>
</parameternamelist>
<parameterdescription>
<para>The list of file paths </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The timestamp of the most recent commit </para>
</simplesect>
<simplesect kind="note"><para>The timestamp is in milliseconds </para>
</simplesect>
<simplesect kind="note"><para>If any of the files are locally modified or there are local commits not present in remote, the function will return 0 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="gitRunner.cpp" line="231" column="9" bodyfile="gitRunner.cpp" bodystart="231" bodyend="237"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/>Copyright<sp/>(C)<sp/>Gaijin<sp/>Games<sp/>KFT.<sp/><sp/>All<sp/>rights<sp/>reserved.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="gitRunner_8h" kindref="compound">gitRunner.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="shLog_8h" kindref="compound">shLog.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;util/dag_simpleString.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;debug/dag_log.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;EASTL/fixed_string.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;EASTL/utility.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;EASTL/optional.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CHECK_RET(error,<sp/>ret,<sp/>msg,<sp/>...)<sp/>\</highlight></codeline>
<codeline lineno="12"><highlight class="preprocessor"><sp/><sp/>if<sp/>(error)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="13"><highlight class="preprocessor"><sp/><sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="14"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>logerr(msg,<sp/>__VA_ARGS__);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="15"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>return<sp/>ret;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="16"><highlight class="preprocessor"><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>OUTPUT_SIZE<sp/>=<sp/>1024;</highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>PATH_RESERVE_SIZE<sp/>=<sp/>128;</highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>_TARGET_PC_WIN</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;windows.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>PIPE_SIZE<sp/>=<sp/>OUTPUT_SIZE;</highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>PIPE_MAX_READ_TRIES<sp/>=<sp/>3;</highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>CHILD_PROCESS_TIMEOUT<sp/>=<sp/>3000;<sp/></highlight><highlight class="comment">//<sp/>ms</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>eastl::optional&lt;PROCESS_INFORMATION&gt;<sp/>create_child_process(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*cmd,<sp/>HANDLE<sp/>&amp;hInReadPipe,<sp/>HANDLE<sp/>&amp;hOutWritePipe)</highlight></codeline>
<codeline lineno="28"><highlight class="normal">{</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/>PROCESS_INFORMATION<sp/>piProcInfo;</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/>STARTUPINFO<sp/>siStartInfo;</highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/>ZeroMemory(&amp;piProcInfo,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(PROCESS_INFORMATION));</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/>ZeroMemory(&amp;siStartInfo,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(STARTUPINFO));</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/>siStartInfo.cb<sp/>=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(STARTUPINFO);</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/>siStartInfo.hStdError<sp/>=<sp/>hOutWritePipe;</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/>siStartInfo.hStdOutput<sp/>=<sp/>hOutWritePipe;</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/>siStartInfo.hStdInput<sp/>=<sp/>hInReadPipe;</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/>siStartInfo.dwFlags<sp/>|=<sp/>STARTF_USESTDHANDLES;</highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>bSuccess<sp/>=<sp/>CreateProcess(NULL,<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)cmd,<sp/>NULL,<sp/>NULL,<sp/>TRUE,<sp/>0,<sp/>NULL,<sp/>NULL,<sp/>&amp;siStartInfo,<sp/>&amp;piProcInfo);</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!bSuccess)</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>eastl::nullopt;</highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>piProcInfo;</highlight></codeline>
<codeline lineno="45"><highlight class="normal">}</highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>read_from_pipe(HANDLE<sp/>hOutReadPipe,<sp/>eastl::fixed_string&lt;char,<sp/>OUTPUT_SIZE&gt;<sp/>&amp;output)</highlight></codeline>
<codeline lineno="48"><highlight class="normal">{</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/>DWORD<sp/>dwRead;</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/>CHAR<sp/>chBuf[PIPE_SIZE];</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/>BOOL<sp/>bSuccess<sp/>=<sp/>FALSE;</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>tries<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;<sp/>tries<sp/>&lt;<sp/>PIPE_MAX_READ_TRIES;<sp/>++tries)</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/>bSuccess<sp/>=<sp/>ReadFile(hOutReadPipe,<sp/>chBuf,<sp/>PIPE_SIZE,<sp/>&amp;dwRead,<sp/>NULL);</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!bSuccess<sp/>||<sp/>dwRead<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/>chBuf[dwRead]<sp/>=<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/>output.append_sprintf(</highlight><highlight class="stringliteral">&quot;%s&quot;</highlight><highlight class="normal">,<sp/>chBuf);</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(tries<sp/>==<sp/>PIPE_MAX_READ_TRIES)</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/>logerr(</highlight><highlight class="stringliteral">&quot;Too<sp/>large<sp/>output<sp/>in<sp/>stdout<sp/>pipe&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="67"><highlight class="normal">}</highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>wait_pipe_data(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>PROCESS_INFORMATION<sp/>&amp;piProcInfo,<sp/>HANDLE<sp/>hOutReadPipe)</highlight></codeline>
<codeline lineno="70"><highlight class="normal">{</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/>DWORD<sp/>bytesAvail<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>tries<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(!bytesAvail<sp/>&amp;&amp;<sp/>tries++<sp/>&lt;<sp/>PIPE_MAX_READ_TRIES)</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(WaitForSingleObject(piProcInfo.hProcess,<sp/>CHILD_PROCESS_TIMEOUT)<sp/>!=<sp/>WAIT_OBJECT_0)</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>PeekNamedPipe(hOutReadPipe,<sp/>NULL,<sp/>0,<sp/>NULL,<sp/>&amp;bytesAvail,<sp/>NULL);</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="80"><highlight class="normal">}</highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>wait_child_process_to_finish(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>PROCESS_INFORMATION<sp/>&amp;piProcInfo)</highlight></codeline>
<codeline lineno="83"><highlight class="normal">{</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(WaitForSingleObject(piProcInfo.hProcess,<sp/>CHILD_PROCESS_TIMEOUT)<sp/>!=<sp/>WAIT_OBJECT_0)</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/>logerr(</highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>wait<sp/>child<sp/>process<sp/>to<sp/>finish&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/>CloseHandle(piProcInfo.hThread);</highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>ret{};</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>bStatus<sp/>=<sp/>GetExitCodeProcess(piProcInfo.hProcess,<sp/>&amp;ret);</highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/>CloseHandle(piProcInfo.hProcess);</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>bStatus<sp/>?<sp/>ret<sp/>:<sp/>0;</highlight></codeline>
<codeline lineno="94"><highlight class="normal">}</highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">PipeHandle</highlight></codeline>
<codeline lineno="97"><highlight class="normal">{</highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/>PipeHandle()<sp/>{}</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/>~PipeHandle()</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(shouldCloseRead)</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>CloseHandle(readHandle);</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(shouldCloseWrite)</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>CloseHandle(writeHandle);</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/>HANDLE<sp/>&amp;getReadHandle()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>readHandle;<sp/>}</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/>HANDLE<sp/>&amp;getWriteHandle()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>writeHandle;<sp/>}</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>setAutoClose()<sp/>{<sp/>shouldCloseRead<sp/>=<sp/>shouldCloseWrite<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;<sp/>};</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>closeRead()</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(eastl::exchange(shouldCloseRead,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">))</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>CloseHandle(readHandle);</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>closeWrite()</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(eastl::exchange(shouldCloseWrite,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">))</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>CloseHandle(writeHandle);</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="121"><highlight class="normal"></highlight></codeline>
<codeline lineno="122"><highlight class="normal"></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/>HANDLE<sp/>readHandle;</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/>HANDLE<sp/>writeHandle;</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>shouldCloseRead<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>shouldCloseWrite<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="127"><highlight class="normal">};</highlight></codeline>
<codeline lineno="128"><highlight class="normal"></highlight></codeline>
<codeline lineno="129"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>execute_cmd(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*cmd,<sp/>eastl::fixed_string&lt;char,<sp/>OUTPUT_SIZE&gt;<sp/>&amp;output)</highlight></codeline>
<codeline lineno="130"><highlight class="normal">{</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/>PipeHandle<sp/>hInPipe,<sp/>hOutPipe;</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/>SECURITY_ATTRIBUTES<sp/>saAttr;</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/>saAttr.nLength<sp/>=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(SECURITY_ATTRIBUTES);</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/>saAttr.bInheritHandle<sp/>=<sp/>TRUE;</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/>saAttr.lpSecurityDescriptor<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="136"><highlight class="normal"></highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><ref refid="gitRunner_8cpp_1a5963a3facd3cc1e8a4bafbd63eec4d7a" kindref="member">CHECK_RET</ref>(!CreatePipe(&amp;hOutPipe.getReadHandle(),<sp/>&amp;hOutPipe.getWriteHandle(),<sp/>&amp;saAttr,<sp/>PIPE_SIZE),<sp/>0,</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>create<sp/>stdout<sp/>pipe<sp/>for<sp/>cmd<sp/>%s&quot;</highlight><highlight class="normal">,<sp/>cmd);</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/>hOutPipe.setAutoClose();</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><ref refid="gitRunner_8cpp_1a5963a3facd3cc1e8a4bafbd63eec4d7a" kindref="member">CHECK_RET</ref>(!SetHandleInformation(hOutPipe.getReadHandle(),<sp/>HANDLE_FLAG_INHERIT,<sp/>0),<sp/>0,</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>set<sp/>stdout<sp/>handle<sp/>information<sp/>for<sp/>cmd<sp/>%s&quot;</highlight><highlight class="normal">,<sp/>cmd);</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><ref refid="gitRunner_8cpp_1a5963a3facd3cc1e8a4bafbd63eec4d7a" kindref="member">CHECK_RET</ref>(!CreatePipe(&amp;hInPipe.getReadHandle(),<sp/>&amp;hInPipe.getWriteHandle(),<sp/>&amp;saAttr,<sp/>PIPE_SIZE),<sp/>0,</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>create<sp/>stdin<sp/>pipe<sp/>for<sp/>cmd<sp/>%s&quot;</highlight><highlight class="normal">,<sp/>cmd);</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/>hInPipe.setAutoClose();</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><ref refid="gitRunner_8cpp_1a5963a3facd3cc1e8a4bafbd63eec4d7a" kindref="member">CHECK_RET</ref>(!SetHandleInformation(hInPipe.getWriteHandle(),<sp/>HANDLE_FLAG_INHERIT,<sp/>0),<sp/>0,</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>set<sp/>stdin<sp/>handle<sp/>information<sp/>for<sp/>cmd<sp/>%s&quot;</highlight><highlight class="normal">,<sp/>cmd);</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>procInfo<sp/>=<sp/>create_child_process(cmd,<sp/>hInPipe.getReadHandle(),<sp/>hOutPipe.getWriteHandle());</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><ref refid="gitRunner_8cpp_1a5963a3facd3cc1e8a4bafbd63eec4d7a" kindref="member">CHECK_RET</ref>(!procInfo.has_value(),<sp/>0,<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>create<sp/>child<sp/>process<sp/>for<sp/>cmd<sp/>%s&quot;</highlight><highlight class="normal">,<sp/>cmd);</highlight></codeline>
<codeline lineno="149"><highlight class="normal"></highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/>wait_pipe_data(procInfo.value(),<sp/>hOutPipe.getReadHandle());</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/>hOutPipe.closeWrite();<sp/></highlight><highlight class="comment">//<sp/>Need<sp/>to<sp/>close<sp/>write<sp/>handle<sp/>before<sp/>reading<sp/>from<sp/>pipe</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><ref refid="gitRunner_8cpp_1a5963a3facd3cc1e8a4bafbd63eec4d7a" kindref="member">CHECK_RET</ref>(!read_from_pipe(hOutPipe.getReadHandle(),<sp/>output),<sp/>0,<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>read<sp/>from<sp/>stdout<sp/>pipe<sp/>for<sp/>cmd<sp/>%s&quot;</highlight><highlight class="normal">,<sp/>cmd);</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>ret<sp/>=<sp/>wait_child_process_to_finish(procInfo.value());</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ret;</highlight></codeline>
<codeline lineno="155"><highlight class="normal">}</highlight></codeline>
<codeline lineno="156"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>_TARGET_PC_LINUX<sp/>|<sp/>_TARGET_PC_MACOSX</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="157"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdio.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="158"><highlight class="normal"></highlight></codeline>
<codeline lineno="159"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>_TARGET_PC_MACOSX</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="160"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;AvailabilityMacros.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="161"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>_TARGET_PC_LINUX</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="162"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;sys/wait.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="163"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="164"><highlight class="normal"></highlight></codeline>
<codeline lineno="165"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>PIPE_SIZE<sp/>=<sp/>OUTPUT_SIZE;</highlight></codeline>
<codeline lineno="166"><highlight class="normal"></highlight></codeline>
<codeline lineno="167"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>execute_cmd(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*cmd,<sp/>eastl::fixed_string&lt;char,<sp/>OUTPUT_SIZE&gt;<sp/>&amp;output)</highlight></codeline>
<codeline lineno="168"><highlight class="normal">{</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/>FILE<sp/>*pipe<sp/>=<sp/>popen(cmd,<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="170"><highlight class="normal"></highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><ref refid="gitRunner_8cpp_1a5963a3facd3cc1e8a4bafbd63eec4d7a" kindref="member">CHECK_RET</ref>(!pipe,<sp/>0,<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>open<sp/>pipe<sp/>for<sp/>command<sp/>%s&quot;</highlight><highlight class="normal">,<sp/>cmd);</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>buffer[PIPE_SIZE];</highlight></codeline>
<codeline lineno="173"><highlight class="normal"></highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(fgets(buffer,<sp/>PIPE_SIZE,<sp/>pipe)<sp/>!=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/>output.append_sprintf(</highlight><highlight class="stringliteral">&quot;%s&quot;</highlight><highlight class="normal">,<sp/>buffer);</highlight></codeline>
<codeline lineno="176"><highlight class="normal"></highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ret<sp/>=<sp/>pclose(pipe);</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>WEXITSTATUS(ret);</highlight></codeline>
<codeline lineno="179"><highlight class="normal">}</highlight></codeline>
<codeline lineno="180"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="181"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>execute_cmd(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*cmd,<sp/>eastl::fixed_string&lt;char,<sp/>OUTPUT_SIZE&gt;<sp/>&amp;output)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;<sp/>}</highlight></codeline>
<codeline lineno="182"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="183"><highlight class="normal"></highlight></codeline>
<codeline lineno="184"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="gitRunner_8cpp_1a83ee1c626ea0a0b13b8a70f286b5c3a1" kindref="member">check_modified_files</ref>(dag::ConstSpan&lt;SimpleString&gt;<sp/>file_paths)</highlight></codeline>
<codeline lineno="185"><highlight class="normal">{</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/>eastl::string<sp/>gitDiffCmd{};</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/>gitDiffCmd.reserve(PATH_RESERVE_SIZE<sp/>*<sp/>file_paths.size());</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/>gitDiffCmd.sprintf(</highlight><highlight class="stringliteral">&quot;git<sp/>diff<sp/>--exit-code<sp/>--quiet<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="189"><highlight class="normal"></highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;filePath<sp/>:<sp/>file_paths)</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/>gitDiffCmd.append_sprintf(</highlight><highlight class="stringliteral">&quot;%s<sp/>&quot;</highlight><highlight class="normal">,<sp/>filePath.c_str());</highlight></codeline>
<codeline lineno="192"><highlight class="normal"></highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/>eastl::fixed_string&lt;char,<sp/>OUTPUT_SIZE&gt;<sp/>output{};</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>ret<sp/>=<sp/>execute_cmd(gitDiffCmd.c_str(),<sp/>output);</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ret<sp/>!=<sp/>0)</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="shLog_8cpp_1a2926179632c7c86265007652d3d30b14" kindref="member">sh_debug</ref>(<ref refid="shLog_8h_1a66042048eb3ce30a1dccb2ebf8c2fd5ca0012c8acb382f295fe614046a64bba11" kindref="member">SHLOG_INFO</ref>,<sp/></highlight><highlight class="stringliteral">&quot;There<sp/>are<sp/>local<sp/>changes<sp/>in<sp/>shaders.<sp/>Timestamps<sp/>for<sp/>compiled<sp/>shaders<sp/>is<sp/>forced<sp/>to<sp/>0&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/>output.clear();</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/>execute_cmd(</highlight><highlight class="stringliteral">&quot;git<sp/>rev-list<sp/>--count<sp/>HEAD<sp/>--not<sp/>origin/master&quot;</highlight><highlight class="normal">,<sp/>output);</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>hasLocalCommits<sp/>=<sp/>output.empty()<sp/>||<sp/>output[0]<sp/>!=<sp/></highlight><highlight class="charliteral">&apos;0&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(hasLocalCommits)</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="shLog_8cpp_1a2926179632c7c86265007652d3d30b14" kindref="member">sh_debug</ref>(<ref refid="shLog_8h_1a66042048eb3ce30a1dccb2ebf8c2fd5ca0012c8acb382f295fe614046a64bba11" kindref="member">SHLOG_INFO</ref>,<sp/></highlight><highlight class="stringliteral">&quot;There<sp/>are<sp/>local<sp/>commits<sp/>that<sp/>are<sp/>not<sp/>in<sp/>master.<sp/>Timestamps<sp/>for<sp/>compiled<sp/>shaders<sp/>is<sp/>forced<sp/>to<sp/>0&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>hasLocalCommits;</highlight></codeline>
<codeline lineno="206"><highlight class="normal">}</highlight></codeline>
<codeline lineno="207"><highlight class="normal"></highlight></codeline>
<codeline lineno="208"><highlight class="normal">int64_t<sp/><ref refid="gitRunner_8cpp_1a9897df421398ddc99576e2666637251e" kindref="member">get_git_timestamp</ref>(dag::ConstSpan&lt;SimpleString&gt;<sp/>file_paths)</highlight></codeline>
<codeline lineno="209"><highlight class="normal">{</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/>eastl::string<sp/>gitLogCmd{};</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/>gitLogCmd.reserve(PATH_RESERVE_SIZE<sp/>*<sp/>file_paths.size());</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/>gitLogCmd.sprintf(</highlight><highlight class="stringliteral">&quot;git<sp/>log<sp/>-1<sp/>--format=%%ct<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;filePath<sp/>:<sp/>file_paths)</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/>gitLogCmd.append_sprintf(</highlight><highlight class="stringliteral">&quot;%s<sp/>&quot;</highlight><highlight class="normal">,<sp/>filePath.c_str());</highlight></codeline>
<codeline lineno="215"><highlight class="normal"></highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/>eastl::fixed_string&lt;char,<sp/>OUTPUT_SIZE&gt;<sp/>output{};</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(execute_cmd(gitLogCmd.c_str(),<sp/>output)<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/>int64_t<sp/>timestamp<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="220"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>_TARGET_PC_LINUX</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/>sscanf(output.c_str(),<sp/></highlight><highlight class="stringliteral">&quot;%ld&quot;</highlight><highlight class="normal">,<sp/>&amp;timestamp);</highlight></codeline>
<codeline lineno="222"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/>sscanf(output.c_str(),<sp/></highlight><highlight class="stringliteral">&quot;%lld&quot;</highlight><highlight class="normal">,<sp/>&amp;timestamp);</highlight></codeline>
<codeline lineno="224"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>timestamp;</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><ref refid="shLog_8cpp_1a2926179632c7c86265007652d3d30b14" kindref="member">sh_debug</ref>(<ref refid="shLog_8h_1a66042048eb3ce30a1dccb2ebf8c2fd5ca0012c8acb382f295fe614046a64bba11" kindref="member">SHLOG_INFO</ref>,<sp/></highlight><highlight class="stringliteral">&quot;There<sp/>is<sp/>a<sp/>local<sp/>change<sp/>in<sp/>shaders.<sp/>Timestamps<sp/>for<sp/>compiled<sp/>shaders<sp/>is<sp/>forced<sp/>to<sp/>0&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="229"><highlight class="normal">}</highlight></codeline>
<codeline lineno="230"><highlight class="normal"></highlight></codeline>
<codeline lineno="231"><highlight class="normal">int64_t<sp/><ref refid="gitRunner_8cpp_1a4c60856b2a07506f1e3d6f1163bdfc6b" kindref="member">get_git_files_last_commit_timestamp</ref>(dag::ConstSpan&lt;SimpleString&gt;<sp/>file_paths)</highlight></codeline>
<codeline lineno="232"><highlight class="normal">{</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="gitRunner_8cpp_1a83ee1c626ea0a0b13b8a70f286b5c3a1" kindref="member">check_modified_files</ref>(file_paths))</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="235"><highlight class="normal"></highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="gitRunner_8cpp_1a9897df421398ddc99576e2666637251e" kindref="member">get_git_timestamp</ref>(file_paths);</highlight></codeline>
<codeline lineno="237"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="gitRunner.cpp"/>
  </compounddef>
</doxygen>
