<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.7" xml:lang="en-US">
  <compounddef id="shlexterm_8cpp" kind="file" language="C++">
    <compoundname>shlexterm.cpp</compoundname>
    <includes refid="shlexterm_8h" local="yes">shlexterm.h</includes>
    <includes refid="shCompContext_8h" local="yes">shCompContext.h</includes>
    <includes local="no">debug/dag_log.h</includes>
    <includes local="yes">shsyn.h</includes>
    <includes refid="shsem_8h" local="yes">shsem.h</includes>
    <includes refid="globVarSem_8h" local="yes">globVarSem.h</includes>
    <includes refid="boolVar_8h" local="yes">boolVar.h</includes>
    <includes refid="cppStcode_8h" local="yes">cppStcode.h</includes>
    <includes refid="cppStcodeAssembly_8h" local="yes">cppStcodeAssembly.h</includes>
    <includes local="no">debug/dag_debug.h</includes>
    <includes refid="shLog_8h" local="yes">shLog.h</includes>
    <includes refid="shMacro_8h" local="yes">shMacro.h</includes>
    <includes local="no">shaders/dag_shaders.h</includes>
    <includes local="no">util/dag_simpleString.h</includes>
    <includes local="no">util/dag_string.h</includes>
    <includes refid="shCompilationInfo_8h" local="yes">shCompilationInfo.h</includes>
    <includes refid="shCompiler_8h" local="yes">shCompiler.h</includes>
    <includes local="no">osApiWrappers/dag_direct.h</includes>
    <includes local="no">memory/dag_regionMemAlloc.h</includes>
    <includes refid="cppStcodeUtils_8h" local="yes">cppStcodeUtils.h</includes>
    <incdepgraph>
      <node id="90">
        <label>DebugLevel.h</label>
        <link refid="DebugLevel_8h"/>
        <childnode refid="34" relation="include">
        </childnode>
      </node>
      <node id="46">
        <label>blkHash.h</label>
        <link refid="blkHash_8h"/>
      </node>
      <node id="83">
        <label>boolVar.h</label>
        <link refid="boolVar_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>commonUtils.h</label>
        <link refid="commonUtils_8h"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="75">
        <label>compileResult.h</label>
        <link refid="compileResult_8h"/>
        <childnode refid="76" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="72">
        <label>const3d.h</label>
        <link refid="const3d_8h"/>
        <childnode refid="40" relation="include">
        </childnode>
      </node>
      <node id="13">
        <label>cppStcode.h</label>
        <link refid="cppStcode_8h"/>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="44" relation="include">
        </childnode>
        <childnode refid="46" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="43" relation="include">
        </childnode>
      </node>
      <node id="14">
        <label>cppStcodeAssembly.h</label>
        <link refid="cppStcodeAssembly_8h"/>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
        <childnode refid="38" relation="include">
        </childnode>
        <childnode refid="39" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
        <childnode refid="41" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="43" relation="include">
        </childnode>
      </node>
      <node id="15">
        <label>cppStcodeBuilder.h</label>
        <link refid="cppStcodeBuilder_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
      </node>
      <node id="91">
        <label>cppStcodePlatformInfo.h</label>
        <link refid="cppStcodePlatformInfo_8h"/>
        <childnode refid="34" relation="include">
        </childnode>
      </node>
      <node id="66">
        <label>cppStcodeUtils.h</label>
        <link refid="cppStcodeUtils_8h"/>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
        <childnode refid="38" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="67" relation="include">
        </childnode>
      </node>
      <node id="57">
        <label>globVar.h</label>
        <link refid="globVar_8h"/>
        <childnode refid="58" relation="include">
        </childnode>
        <childnode refid="59" relation="include">
        </childnode>
        <childnode refid="47" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="60" relation="include">
        </childnode>
        <childnode refid="61" relation="include">
        </childnode>
        <childnode refid="62" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="63" relation="include">
        </childnode>
        <childnode refid="64" relation="include">
        </childnode>
      </node>
      <node id="94">
        <label>globVarSem.h</label>
        <link refid="globVarSem_8h"/>
      </node>
      <node id="89">
        <label>globalConfig.h</label>
        <link refid="globalConfig_8h"/>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="90" relation="include">
        </childnode>
        <childnode refid="91" relation="include">
        </childnode>
        <childnode refid="50" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
      </node>
      <node id="26">
        <label>hash.h</label>
        <link refid="hash_8h"/>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
      </node>
      <node id="55">
        <label>hashStrings.h</label>
        <link refid="hashStrings_8h"/>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="47" relation="include">
        </childnode>
        <childnode refid="56" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
      </node>
      <node id="29">
        <label>hlslRegisters.h</label>
        <link refid="hlslRegisters_8h"/>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
      </node>
      <node id="71">
        <label>hlslStage.h</label>
        <link refid="hlslStage_8h"/>
        <childnode refid="72" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="73" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
        <childnode refid="74" relation="include">
        </childnode>
      </node>
      <node id="49">
        <label>hwAssembly.h</label>
        <link refid="hwAssembly_8h"/>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="64">
        <label>intervals.h</label>
        <link refid="intervals_8h"/>
      </node>
      <node id="19">
        <label>nameMap.h</label>
        <link refid="nameMap_8h"/>
        <childnode refid="20" relation="include">
        </childnode>
      </node>
      <node id="84">
        <label>namedConst.h</label>
        <link refid="namedConst_8h"/>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="85" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="89" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="47" relation="include">
        </childnode>
        <childnode refid="92" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
      </node>
      <node id="44">
        <label>processes.h</label>
        <link refid="processes_8h"/>
        <childnode refid="45" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="65">
        <label>samplers.h</label>
        <link refid="samplers_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="57" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="61" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
      </node>
      <node id="93">
        <label>shAssumes.h</label>
        <link refid="shAssumes_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="64" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="50" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
      </node>
      <node id="11">
        <label>shCompContext.h</label>
        <link refid="shCompContext_8h"/>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="49" relation="include">
        </childnode>
        <childnode refid="50" relation="include">
        </childnode>
      </node>
      <node id="12">
        <label>shCompilationInfo.h</label>
        <link refid="shCompilationInfo_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="46" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="47" relation="include">
        </childnode>
        <childnode refid="48" relation="include">
        </childnode>
      </node>
      <node id="95">
        <label>shCompiler.h</label>
        <link refid="shCompiler_8h"/>
      </node>
      <node id="80">
        <label>shErrorReporting.h</label>
        <link refid="shErrorReporting_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="30">
        <label>shLog.h</label>
        <link refid="shLog_8h"/>
      </node>
      <node id="4">
        <label>shMacro.h</label>
        <link refid="shMacro_8h"/>
      </node>
      <node id="54">
        <label>shTargetContext.h</label>
        <link refid="shTargetContext_8h"/>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="55" relation="include">
        </childnode>
        <childnode refid="57" relation="include">
        </childnode>
        <childnode refid="65" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="66" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="68" relation="include">
        </childnode>
        <childnode refid="70" relation="include">
        </childnode>
        <childnode refid="79" relation="include">
        </childnode>
        <childnode refid="83" relation="include">
        </childnode>
        <childnode refid="71" relation="include">
        </childnode>
        <childnode refid="84" relation="include">
        </childnode>
        <childnode refid="93" relation="include">
        </childnode>
        <childnode refid="89" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="68">
        <label>shTargetStorage.h</label>
        <link refid="shTargetStorage_8h"/>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="69" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
        <childnode refid="43" relation="include">
        </childnode>
        <childnode refid="41" relation="include">
        </childnode>
      </node>
      <node id="53">
        <label>shVarBool.h</label>
        <link refid="shVarBool_8h"/>
      </node>
      <node id="63">
        <label>shVarVecTypes.h</label>
        <link refid="shVarVecTypes_8h"/>
      </node>
      <node id="70">
        <label>shaderBytecodeCache.h</label>
        <link refid="shaderBytecodeCache_8h"/>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="71" relation="include">
        </childnode>
        <childnode refid="75" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="77" relation="include">
        </childnode>
        <childnode refid="47" relation="include">
        </childnode>
        <childnode refid="78" relation="include">
        </childnode>
      </node>
      <node id="17">
        <label>shaderSave.h</label>
        <link refid="shaderSave_8h"/>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
      </node>
      <node id="16">
        <label>shaderTab.h</label>
        <link refid="shaderTab_8h"/>
        <childnode refid="17" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>shlexterm.cpp</label>
        <link refid="shlexterm_8cpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="51" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="52" relation="include">
        </childnode>
        <childnode refid="94" relation="include">
        </childnode>
        <childnode refid="83" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="81" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="48" relation="include">
        </childnode>
        <childnode refid="78" relation="include">
        </childnode>
        <childnode refid="47" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="95" relation="include">
        </childnode>
        <childnode refid="96" relation="include">
        </childnode>
        <childnode refid="97" relation="include">
        </childnode>
        <childnode refid="66" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>shlexterm.h</label>
        <link refid="shlexterm_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="52">
        <label>shsem.h</label>
        <link refid="shsem_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="53" relation="include">
        </childnode>
        <childnode refid="54" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="78" relation="include">
        </childnode>
      </node>
      <node id="79">
        <label>stcodeBytecode.h</label>
        <link refid="stcodeBytecode_8h"/>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="80" relation="include">
        </childnode>
        <childnode refid="39" relation="include">
        </childnode>
        <childnode refid="81" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="82" relation="include">
        </childnode>
      </node>
      <node id="18">
        <label>varMap.h</label>
        <link refid="varMap_8h"/>
        <childnode refid="19" relation="include">
        </childnode>
      </node>
      <node id="62">
        <label>varTypes.h</label>
        <link refid="varTypes_8h"/>
      </node>
      <node id="85">
        <label>variablesMerger.h</label>
        <link refid="variablesMerger_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
        <childnode refid="76" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="86" relation="include">
        </childnode>
        <childnode refid="87" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="88" relation="include">
        </childnode>
      </node>
      <node id="60">
        <label>3d/dag_texMgr.h</label>
      </node>
      <node id="25">
        <label>EASTL/algorithm.h</label>
      </node>
      <node id="33">
        <label>EASTL/array.h</label>
      </node>
      <node id="88">
        <label>EASTL/bitvector.h</label>
      </node>
      <node id="86">
        <label>EASTL/fixed_vector.h</label>
      </node>
      <node id="87">
        <label>EASTL/map.h</label>
      </node>
      <node id="10">
        <label>EASTL/optional.h</label>
      </node>
      <node id="9">
        <label>EASTL/string.h</label>
      </node>
      <node id="67">
        <label>EASTL/string_view.h</label>
      </node>
      <node id="73">
        <label>EASTL/type_traits.h</label>
      </node>
      <node id="41">
        <label>EASTL/unique_ptr.h</label>
      </node>
      <node id="76">
        <label>EASTL/vector.h</label>
      </node>
      <node id="82">
        <label>EASTL/vector_map.h</label>
      </node>
      <node id="92">
        <label>EASTL/vector_set.h</label>
      </node>
      <node id="34">
        <label>cstdint</label>
      </node>
      <node id="28">
        <label>cstring</label>
      </node>
      <node id="24">
        <label>dag/dag_vector.h</label>
      </node>
      <node id="23">
        <label>debug/dag_assert.h</label>
      </node>
      <node id="81">
        <label>debug/dag_debug.h</label>
      </node>
      <node id="51">
        <label>debug/dag_log.h</label>
      </node>
      <node id="40">
        <label>drv/3d/dag_consts.h</label>
      </node>
      <node id="69">
        <label>drv/3d/dag_renderStates.h</label>
      </node>
      <node id="61">
        <label>drv/3d/dag_sampler.h</label>
      </node>
      <node id="31">
        <label>generic/dag_enumerate.h</label>
      </node>
      <node id="32">
        <label>generic/dag_expected.h</label>
      </node>
      <node id="45">
        <label>generic/dag_fixedMoveOnlyFunction.h</label>
      </node>
      <node id="21">
        <label>generic/dag_tab.h</label>
      </node>
      <node id="27">
        <label>hash/BLAKE3/blake3.h</label>
      </node>
      <node id="50">
        <label>ioSys/dag_dataBlock.h</label>
      </node>
      <node id="58">
        <label>math/dag_color.h</label>
      </node>
      <node id="59">
        <label>math/integer/dag_IPoint4.h</label>
      </node>
      <node id="74">
        <label>memory</label>
      </node>
      <node id="36">
        <label>memory/dag_mem.h</label>
      </node>
      <node id="77">
        <label>memory/dag_memBase.h</label>
      </node>
      <node id="97">
        <label>memory/dag_regionMemAlloc.h</label>
      </node>
      <node id="96">
        <label>osApiWrappers/dag_direct.h</label>
      </node>
      <node id="39">
        <label>shaders/dag_shaderVarType.h</label>
      </node>
      <node id="48">
        <label>shaders/dag_shaders.h</label>
      </node>
      <node id="37">
        <label>shaders/shExprTypes.h</label>
      </node>
      <node id="38">
        <label>shaders/shFunc.h</label>
      </node>
      <node id="43">
        <label>shaders/shader_layout.h</label>
      </node>
      <node id="35">
        <label>shaders/slotTexturesRange.h</label>
      </node>
      <node id="3">
        <label>shsyn.h</label>
      </node>
      <node id="42">
        <label>ska_hash_map/flat_hash_map2.hpp</label>
      </node>
      <node id="22">
        <label>util/dag_bindump_ext.h</label>
      </node>
      <node id="8">
        <label>util/dag_globDef.h</label>
      </node>
      <node id="20">
        <label>util/dag_oaHashNameMap.h</label>
      </node>
      <node id="7">
        <label>util/dag_safeArg.h</label>
      </node>
      <node id="78">
        <label>util/dag_simpleString.h</label>
      </node>
      <node id="56">
        <label>util/dag_stdint.h</label>
      </node>
      <node id="47">
        <label>util/dag_string.h</label>
      </node>
      <node id="6">
        <label>utility</label>
      </node>
    </incdepgraph>
    <innernamespace refid="namespaceShaderParser">ShaderParser</innernamespace>
      <sectiondef kind="var">
      <memberdef kind="variable" id="shlexterm_8cpp_1a2936932c6f735c6a6750a6f858e0f99b" prot="public" static="no" mutable="no">
        <type>IMemAlloc *</type>
        <definition>IMemAlloc* sh_symbolsmem</definition>
        <argsstring></argsstring>
        <name>sh_symbolsmem</name>
        <initializer>= NULL</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="shlexterm.cpp" line="31" column="11" bodyfile="shlexterm.cpp" bodystart="31" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="shlexterm_8cpp_1aa7db6d8cb5897d0e5004a361835f8a70" prot="public" static="yes" mutable="no">
        <type>char</type>
        <definition>char compiler_cwd[DAGOR_MAX_PATH]</definition>
        <argsstring>[DAGOR_MAX_PATH]</argsstring>
        <name>compiler_cwd</name>
        <initializer>= {0}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="shlexterm.cpp" line="37" column="13" bodyfile="shlexterm.cpp" bodystart="37" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="shlexterm_8cpp_1af691d6e93dfe8d718aaf28106503fcb0" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Tab&lt; SimpleString &gt;</type>
        <definition>static Tab&lt; SimpleString &gt; inc_base</definition>
        <argsstring>(inimem)</argsstring>
        <name>inc_base</name>
        <param>
          <type>inimem</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="shlexterm.cpp" line="32" column="12" declfile="shlexterm.cpp" declline="32" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="shlexterm_8cpp_1a04ad6cf4801a90118d16a533be8040da" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void reset_shaders_inc_base</definition>
        <argsstring>()</argsstring>
        <name>reset_shaders_inc_base</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="shlexterm.cpp" line="34" column="6" bodyfile="shlexterm.cpp" bodystart="34" bodyend="34"/>
      </memberdef>
      <memberdef kind="function" id="shlexterm_8cpp_1a93a91be19d16515c5c8b86cc974f80c4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void add_shaders_inc_base</definition>
        <argsstring>(const char *base)</argsstring>
        <name>add_shaders_inc_base</name>
        <param>
          <type>const char *</type>
          <declname>base</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="shlexterm.cpp" line="35" column="6" bodyfile="shlexterm.cpp" bodystart="35" bodyend="35"/>
      </memberdef>
      <memberdef kind="function" id="shlexterm_8cpp_1a91fb59c422109a8f593a507a03217cda" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>static const char * get_cwd</definition>
        <argsstring>()</argsstring>
        <name>get_cwd</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="shlexterm.cpp" line="38" column="19" bodyfile="shlexterm.cpp" bodystart="38" bodyend="47"/>
      </memberdef>
      <memberdef kind="function" id="shlexterm_8cpp_1aeadfc17e44722dc48b902c64a0496bd4" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>static bool process_include</definition>
        <argsstring>(String &amp;inc_fpath, const char *inc_fn, int inc_fn_len)</argsstring>
        <name>process_include</name>
        <param>
          <type>String &amp;</type>
          <declname>inc_fpath</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>inc_fn</declname>
        </param>
        <param>
          <type>int</type>
          <declname>inc_fn_len</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="shlexterm.cpp" line="50" column="13" bodyfile="shlexterm.cpp" bodystart="50" bodyend="59"/>
      </memberdef>
      <memberdef kind="function" id="shlexterm_8cpp_1ae2230b480be97f5fd50f5b4407246ec1" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>static bool parseInclude</definition>
        <argsstring>(Lexer *_this, bool optional=false)</argsstring>
        <name>parseInclude</name>
        <param>
          <type><ref refid="classLexer" kindref="compound">Lexer</ref> *</type>
          <declname>_this</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>optional</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="shlexterm.cpp" line="61" column="13" bodyfile="shlexterm.cpp" bodystart="61" bodyend="128"/>
      </memberdef>
      <memberdef kind="function" id="shlexterm_8cpp_1a49c62054633a1bca7b3ebd4284476f2f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int get_token</definition>
        <argsstring>(ShaderParser::TokenInfo &amp;tok, Lexer &amp;__this)</argsstring>
        <name>get_token</name>
        <param>
          <type><ref refid="structShaderParser_1_1TokenInfo" kindref="compound">ShaderParser::TokenInfo</ref> &amp;</type>
          <declname>tok</declname>
        </param>
        <param>
          <type><ref refid="classLexer" kindref="compound">Lexer</ref> &amp;</type>
          <declname>__this</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="shlexterm.cpp" line="130" column="5" bodyfile="shlexterm.cpp" bodystart="130" bodyend="144"/>
      </memberdef>
      <memberdef kind="function" id="shlexterm_8cpp_1a752fc9566a058f4b9cd6acbaa6101283" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>static int getToken</definition>
        <argsstring>(ShaderParser::TokenInfo &amp;tok, Lexer &amp;__this)</argsstring>
        <name>getToken</name>
        <param>
          <type><ref refid="structShaderParser_1_1TokenInfo" kindref="compound">ShaderParser::TokenInfo</ref> &amp;</type>
          <declname>tok</declname>
        </param>
        <param>
          <type><ref refid="classLexer" kindref="compound">Lexer</ref> &amp;</type>
          <declname>__this</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="shlexterm.cpp" line="145" column="19" bodyfile="shlexterm.cpp" bodystart="145" bodyend="145"/>
      </memberdef>
      <memberdef kind="function" id="shlexterm_8cpp_1a740dc853997f1f1c4634aea3bb5693fd" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>InputFile</type>
        <definition>static InputFile open_input_file</definition>
        <argsstring>(const char *fn)</argsstring>
        <name>open_input_file</name>
        <param>
          <type>const char *</type>
          <declname>fn</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="shlexterm.cpp" line="243" column="18" bodyfile="shlexterm.cpp" bodystart="243" bodyend="259"/>
      </memberdef>
      <memberdef kind="function" id="shlexterm_8cpp_1a73a00775f4a5536a3db13c44b1303128" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int get_parsed_filename_index</definition>
        <argsstring>(const char *fname, shc::TargetContext &amp;ctx)</argsstring>
        <name>get_parsed_filename_index</name>
        <param>
          <type>const char *</type>
          <declname>fname</declname>
        </param>
        <param>
          <type><ref refid="classshc_1_1TargetContext" kindref="compound">shc::TargetContext</ref> &amp;</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="shlexterm.cpp" line="437" column="5" bodyfile="shlexterm.cpp" bodystart="437" bodyend="442"/>
      </memberdef>
      <memberdef kind="function" id="shlexterm_8cpp_1aa5fd6859aefd108067b3de33c29fec1f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void parse_shader_script</definition>
        <argsstring>(const char *fn, Tab&lt; SimpleString &gt; *out_filenames, shc::TargetContext &amp;ctx)</argsstring>
        <name>parse_shader_script</name>
        <param>
          <type>const char *</type>
          <declname>fn</declname>
        </param>
        <param>
          <type>Tab&lt; SimpleString &gt; *</type>
          <declname>out_filenames</declname>
        </param>
        <param>
          <type><ref refid="classshc_1_1TargetContext" kindref="compound">shc::TargetContext</ref> &amp;</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="shlexterm.cpp" line="444" column="6" bodyfile="shlexterm.cpp" bodystart="444" bodyend="477"/>
      </memberdef>
      <memberdef kind="function" id="shlexterm_8cpp_1a634437625119ebac6b751b2986502b5f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NonterminalS *</type>
        <definition>NonterminalS * parse_shader_string</definition>
        <argsstring>(const String &amp;source, const char *file_name, int line, shc::TargetContext &amp;ctx, IMemAlloc *alloc)</argsstring>
        <name>parse_shader_string</name>
        <param>
          <type>const String &amp;</type>
          <declname>source</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>file_name</declname>
        </param>
        <param>
          <type>int</type>
          <declname>line</declname>
        </param>
        <param>
          <type><ref refid="classshc_1_1TargetContext" kindref="compound">shc::TargetContext</ref> &amp;</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>IMemAlloc *</type>
          <declname>alloc</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="shlexterm.cpp" line="479" column="14" bodyfile="shlexterm.cpp" bodystart="479" bodyend="524"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/>Copyright<sp/>(C)<sp/>Gaijin<sp/>Games<sp/>KFT.<sp/><sp/>All<sp/>rights<sp/>reserved.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="shlexterm_8h" kindref="compound">shlexterm.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="shCompContext_8h" kindref="compound">shCompContext.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;debug/dag_log.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;shsyn.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="shsem_8h" kindref="compound">shsem.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="globVarSem_8h" kindref="compound">globVarSem.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="boolVar_8h" kindref="compound">boolVar.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="cppStcode_8h" kindref="compound">cppStcode.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="cppStcodeAssembly_8h" kindref="compound">cppStcodeAssembly.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;debug/dag_debug.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="shLog_8h" kindref="compound">shLog.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="shMacro_8h" kindref="compound">shMacro.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;shaders/dag_shaders.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;util/dag_simpleString.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;util/dag_string.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="shCompilationInfo_8h" kindref="compound">shCompilationInfo.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="shCompiler_8h" kindref="compound">shCompiler.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;osApiWrappers/dag_direct.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;memory/dag_regionMemAlloc.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="cppStcodeUtils_8h" kindref="compound">cppStcodeUtils.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>_TARGET_PC_WIN</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;direct.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>_TARGET_PC_LINUX<sp/>|<sp/>_TARGET_APPLE<sp/>|<sp/>_TARGET_C3</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;unistd.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal"><ref refid="namespaceShaderTerminal" kindref="compound">ShaderTerminal</ref>;</highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal">IMemAlloc<sp/>*<ref refid="shlexterm_8cpp_1a2936932c6f735c6a6750a6f858e0f99b" kindref="member">sh_symbolsmem</ref><sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>Tab&lt;SimpleString&gt;<sp/>inc_base(inimem);</highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="shlexterm_8cpp_1a04ad6cf4801a90118d16a533be8040da" kindref="member">reset_shaders_inc_base</ref>()<sp/>{<sp/>inc_base.clear();<sp/>}</highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="shlexterm_8cpp_1a93a91be19d16515c5c8b86cc974f80c4" kindref="member">add_shaders_inc_base</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*base)<sp/>{<sp/>inc_base.push_back()<sp/>=<sp/>base;<sp/>}</highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>compiler_cwd[DAGOR_MAX_PATH]<sp/>=<sp/>{0};</highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*get_cwd()</highlight></codeline>
<codeline lineno="39"><highlight class="normal">{</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(compiler_cwd[0])</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>compiler_cwd;</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(getcwd(compiler_cwd,<sp/>DAGOR_MAX_PATH))</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/>dd_append_slash_c(compiler_cwd);</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/>memcpy(compiler_cwd,<sp/></highlight><highlight class="stringliteral">&quot;./&quot;</highlight><highlight class="normal">,<sp/>3);</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>compiler_cwd;</highlight></codeline>
<codeline lineno="47"><highlight class="normal">}</highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight><highlight class="comment">//<sp/>parse<sp/>include<sp/>statement</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>process_include(String<sp/>&amp;inc_fpath,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*inc_fn,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>inc_fn_len)</highlight></codeline>
<codeline lineno="51"><highlight class="normal">{</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>inc_base.size();<sp/>i++)</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/>inc_fpath.printf(260,<sp/></highlight><highlight class="stringliteral">&quot;%s%s/%.*s&quot;</highlight><highlight class="normal">,<sp/>get_cwd(),<sp/>inc_base[i].str(),<sp/>inc_fn_len,<sp/>inc_fn);</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(dd_file_exists(inc_fpath))</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="59"><highlight class="normal">}</highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>parseInclude(<ref refid="classLexer" kindref="compound">Lexer</ref><sp/>*_this,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>optional<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="62"><highlight class="normal">{</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/>InputFile<sp/>*concInputFile<sp/>=<sp/>(InputFile<sp/>*)_this-&gt;__input_stream();</highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(_this-&gt;get_token()<sp/>!=<sp/>SHADER_TOKENS::SHTOK_string)</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//_this-&gt;make_error(&quot;expected<sp/>include<sp/>file<sp/>name&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="shLog_8cpp_1a2926179632c7c86265007652d3d30b14" kindref="member">sh_debug</ref>(<ref refid="shLog_8h_1a66042048eb3ce30a1dccb2ebf8c2fd5ca6112bd3e7c5d175bac1569c33c1630ad" kindref="member">SHLOG_FATAL</ref>,<sp/></highlight><highlight class="stringliteral">&quot;expected<sp/>include<sp/>file<sp/>name<sp/>at<sp/>line(%d)pos(%d)&quot;</highlight><highlight class="normal">,<sp/>_this-&gt;get_cur_line(),<sp/>_this-&gt;get_cur_column());</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*inc_fn<sp/>=<sp/>_this-&gt;get_lexeme()<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>inc_fn_len<sp/>=<sp/>_this-&gt;get_lexeme_length()<sp/>-<sp/>2;</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/>String<sp/>inc_fpath;</highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!process_include(inc_fpath,<sp/>inc_fn,<sp/>inc_fn_len))</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>fn[1024];</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/>::dd_get_fname_location(fn,<sp/>concInputFile-&gt;get_filename(_this-&gt;get_cur_file()));</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!fn[0])</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>strcpy(fn,<sp/></highlight><highlight class="stringliteral">&quot;.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/>::dd_append_slash_c(fn);</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/>inc_fpath.printf(260,<sp/></highlight><highlight class="stringliteral">&quot;%s/%.*s&quot;</highlight><highlight class="normal">,<sp/>fn,<sp/>inc_fn_len,<sp/>inc_fn);</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/>::dd_simplify_fname_c(inc_fpath);</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/>inc_fpath.resize(strlen(inc_fpath)<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><ref refid="shLog_8cpp_1a2926179632c7c86265007652d3d30b14" kindref="member">sh_debug</ref>(<ref refid="shLog_8h_1a66042048eb3ce30a1dccb2ebf8c2fd5ca0012c8acb382f295fe614046a64bba11" kindref="member">SHLOG_INFO</ref>,<sp/></highlight><highlight class="stringliteral">&quot;including<sp/>&lt;%s&gt;&quot;</highlight><highlight class="normal">,<sp/>inc_fpath.str());</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/>_this-&gt;__clear_lexeme();</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>fn1<sp/>=<sp/>concInputFile-&gt;get_include_file_index(inc_fpath);</highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fn1<sp/>&lt;<sp/>0)</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>incFn<sp/>=<sp/><ref refid="namespaceshc_1ae9d7e1fe461404fcd0feb93ca58da37f" kindref="member">shc::search_include_with_pathes</ref>(String(0,<sp/></highlight><highlight class="stringliteral">&quot;%.*s&quot;</highlight><highlight class="normal">,<sp/>inc_fn_len,<sp/>inc_fn));</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/>fn1<sp/>=<sp/>concInputFile-&gt;get_include_file_index(incFn);</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fn1<sp/>&lt;<sp/>0)</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!optional)</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>String<sp/>include_file_stack(0,<sp/></highlight><highlight class="stringliteral">&quot;can&apos;t<sp/>open<sp/>file<sp/>%.*s<sp/>(or<sp/>%s)\n&quot;</highlight><highlight class="normal">,<sp/>inc_fn_len,<sp/>inc_fn,<sp/>inc_fpath);</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>it<sp/>=<sp/>concInputFile-&gt;incstk.rbegin();<sp/>it<sp/>!=<sp/>concInputFile-&gt;incstk.rend();<sp/>++it)</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>include_file_stack.aprintf(0,<sp/></highlight><highlight class="stringliteral">&quot;included<sp/>from<sp/>&apos;%s&apos;\n&quot;</highlight><highlight class="normal">,<sp/>concInputFile-&gt;get_filename(it-&gt;file));</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>_this-&gt;<ref refid="classLexer_1a15173ff3748bd39e52a74ddae376a785" kindref="member">set_error</ref>(include_file_stack);</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="shLog_8cpp_1a2926179632c7c86265007652d3d30b14" kindref="member">sh_debug</ref>(<ref refid="shLog_8h_1a66042048eb3ce30a1dccb2ebf8c2fd5ca6112bd3e7c5d175bac1569c33c1630ad" kindref="member">SHLOG_FATAL</ref>,<sp/></highlight><highlight class="stringliteral">&quot;can&apos;t<sp/>include<sp/>shader<sp/>script<sp/>&apos;%s&apos;&quot;</highlight><highlight class="normal">,<sp/>inc_fpath.str());</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*fnRealName<sp/>=<sp/>concInputFile-&gt;get_filename(fn1);</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(_this-&gt;includes.find_as(fnRealName)<sp/>!=<sp/>_this-&gt;includes.end())</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/>_this-&gt;includes.emplace(fnRealName);</highlight></codeline>
<codeline lineno="117"><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!concInputFile-&gt;include(fn1))</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!optional)</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>_this-&gt;<ref refid="classLexer_1a15173ff3748bd39e52a74ddae376a785" kindref="member">set_error</ref>(String(0,<sp/></highlight><highlight class="stringliteral">&quot;can&apos;t<sp/>open<sp/>file<sp/>%.*s<sp/>(or<sp/>%s)&quot;</highlight><highlight class="normal">,<sp/>inc_fn_len,<sp/>inc_fn,<sp/>inc_fpath));</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="shLog_8cpp_1a2926179632c7c86265007652d3d30b14" kindref="member">sh_debug</ref>(<ref refid="shLog_8h_1a66042048eb3ce30a1dccb2ebf8c2fd5ca6112bd3e7c5d175bac1569c33c1630ad" kindref="member">SHLOG_FATAL</ref>,<sp/></highlight><highlight class="stringliteral">&quot;can&apos;t<sp/>include<sp/>shader<sp/>script<sp/>&apos;%s&apos;&quot;</highlight><highlight class="normal">,<sp/>inc_fpath.str());</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="128"><highlight class="normal">}</highlight></codeline>
<codeline lineno="129"><highlight class="normal"></highlight></codeline>
<codeline lineno="130"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="shlexterm_8cpp_1a49c62054633a1bca7b3ebd4284476f2f" kindref="member">get_token</ref>(<ref refid="structShaderParser_1_1TokenInfo" kindref="compound">ShaderParser::TokenInfo</ref><sp/>&amp;tok,<sp/><ref refid="classLexer" kindref="compound">Lexer</ref><sp/>&amp;__this)</highlight></codeline>
<codeline lineno="131"><highlight class="normal">{</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(__this.<ref refid="classLexer_1abc02e705d814875676d7e4de0026d455" kindref="member">get_macro_mgr</ref>().<ref refid="classShaderMacroManager_1a46de780ac1eafcd0e9c25b88748fb585" kindref="member">getToken</ref>(tok))</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>tok.<ref refid="structShaderParser_1_1TokenInfo_1abd03427e0889aa2f537e8330f237abfc" kindref="member">token</ref>;</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="136"><highlight class="normal"></highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/>tok.<ref refid="structShaderParser_1_1TokenInfo_1a0787097a6cb11ce6356e20d080e56318" kindref="member">isMacro</ref><sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/>tok.<ref refid="structShaderParser_1_1TokenInfo_1abd03427e0889aa2f537e8330f237abfc" kindref="member">token</ref><sp/>=<sp/>__this.get_token();</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/>tok.<ref refid="structShaderParser_1_1TokenInfo_1a1ef44eeb587bbdae1f8fb647d8f518ef" kindref="member">lexeme</ref><sp/>=<sp/>__this.get_lexeme();</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/>tok.<ref refid="structShaderParser_1_1TokenInfo_1a657464dbaabd0bed7acbed914f51a7db" kindref="member">file</ref><sp/>=<sp/>__this.get_cur_file();</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/>tok.<ref refid="structShaderParser_1_1TokenInfo_1a21500ff2d7a5ae4c1b933d92bac2b5ca" kindref="member">line</ref><sp/>=<sp/>__this.get_cur_line();</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/>tok.<ref refid="structShaderParser_1_1TokenInfo_1ad6ad16601acddc4e7835b186fa09190a" kindref="member">column</ref><sp/>=<sp/>__this.get_cur_column();</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>tok.<ref refid="structShaderParser_1_1TokenInfo_1abd03427e0889aa2f537e8330f237abfc" kindref="member">token</ref>;</highlight></codeline>
<codeline lineno="144"><highlight class="normal">}</highlight></codeline>
<codeline lineno="145"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>getToken(<ref refid="structShaderParser_1_1TokenInfo" kindref="compound">ShaderParser::TokenInfo</ref><sp/>&amp;tok,<sp/><ref refid="classLexer" kindref="compound">Lexer</ref><sp/>&amp;__this)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="shlexterm_8cpp_1a49c62054633a1bca7b3ebd4284476f2f" kindref="member">get_token</ref>(tok,<sp/>__this);<sp/>}</highlight></codeline>
<codeline lineno="146"><highlight class="normal"></highlight></codeline>
<codeline lineno="147"><highlight class="normal">Terminal<sp/>*GeneratedLexer::get_terminal()</highlight></codeline>
<codeline lineno="148"><highlight class="normal">{</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><ref refid="classLexer" kindref="compound">Lexer</ref><sp/>*concreteThis<sp/>=<sp/>(<ref refid="classLexer" kindref="compound">Lexer</ref><sp/>*)</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="150"><highlight class="normal"></highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><ref refid="structShaderParser_1_1TokenInfo" kindref="compound">ShaderParser::TokenInfo</ref><sp/>tok;</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>debug(&quot;get0&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/>getToken(tok,<sp/>*concreteThis);</highlight></codeline>
<codeline lineno="154"><highlight class="normal"></highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>debug(&quot;<sp/><sp/>tok=%d&quot;,tok);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(tok.<ref refid="structShaderParser_1_1TokenInfo_1abd03427e0889aa2f537e8330f237abfc" kindref="member">token</ref><sp/>==<sp/>SHADER_TOKENS::TerminalEOF)</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>debug(&quot;!!!eof&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!input_stream-&gt;is_real_eof())</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>debug(&quot;!!!eof<sp/>not<sp/>real&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>clear_eof();</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>getToken(tok,<sp/>*concreteThis);</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="166"><highlight class="normal"></highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>breakCycle<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">true</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(tok.<ref refid="structShaderParser_1_1TokenInfo_1abd03427e0889aa2f537e8330f237abfc" kindref="member">token</ref>)</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>SHADER_TOKENS::SHTOK_include:</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!parseInclude(concreteThis,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">))</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>SHADER_TOKENS::SHTOK_include_optional:</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>parseInclude(concreteThis,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>SHADER_TOKENS::SHTOK_macro:</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>concreteThis-&gt;<ref refid="classLexer_1abc02e705d814875676d7e4de0026d455" kindref="member">get_macro_mgr</ref>().<ref refid="classShaderMacroManager_1a99f538ae10fd51eae66fb2d3470ee4bb" kindref="member">parseDefinition</ref>(*concreteThis,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>SHADER_TOKENS::SHTOK_define_macro_if_not_defined:</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>concreteThis-&gt;<ref refid="classLexer_1abc02e705d814875676d7e4de0026d455" kindref="member">get_macro_mgr</ref>().<ref refid="classShaderMacroManager_1a99f538ae10fd51eae66fb2d3470ee4bb" kindref="member">parseDefinition</ref>(*concreteThis,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>SHADER_TOKENS::SHTOK_ident:</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>concreteThis-&gt;<ref refid="classLexer_1abc02e705d814875676d7e4de0026d455" kindref="member">get_macro_mgr</ref>().<ref refid="classShaderMacroManager_1a58334851d0aeec425a2a5ba3249d147a" kindref="member">tryExpandMacro</ref>(*concreteThis,<sp/>tok);</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(tok.<ref refid="structShaderParser_1_1TokenInfo_1abd03427e0889aa2f537e8330f237abfc" kindref="member">token</ref><sp/>!=<sp/>-1)</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>breakCycle<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>SHADER_TOKENS::TerminalEOF:</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(input_stream-&gt;is_real_eof())</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>breakCycle<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:<sp/>breakCycle<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(breakCycle)</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="208"><highlight class="normal"></highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>debug(&quot;get1&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/>getToken(tok,<sp/>*concreteThis);</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(tok.<ref refid="structShaderParser_1_1TokenInfo_1abd03427e0889aa2f537e8330f237abfc" kindref="member">token</ref><sp/>==<sp/>SHADER_TOKENS::TerminalEOF)</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>debug(&quot;!!!eof&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!input_stream-&gt;is_real_eof())</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>debug(&quot;!!!eof<sp/>not<sp/>real&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>clear_eof();</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>getToken(tok,<sp/>*concreteThis);</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>debug(&quot;&lt;%s&gt;<sp/>%d&quot;,(char*)tok.lexeme,tok.token);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="227"><highlight class="normal"></highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/>Terminal<sp/>*t<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>(<ref refid="shlexterm_8cpp_1a2936932c6f735c6a6750a6f858e0f99b" kindref="member">sh_symbolsmem</ref>)<sp/>Terminal;</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/>t-&gt;num<sp/>=<sp/>tok.<ref refid="structShaderParser_1_1TokenInfo_1abd03427e0889aa2f537e8330f237abfc" kindref="member">token</ref>;</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/>t-&gt;file_start<sp/>=<sp/>tok.<ref refid="structShaderParser_1_1TokenInfo_1a657464dbaabd0bed7acbed914f51a7db" kindref="member">file</ref>;</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/>t-&gt;line_start<sp/>=<sp/>tok.<ref refid="structShaderParser_1_1TokenInfo_1a21500ff2d7a5ae4c1b933d92bac2b5ca" kindref="member">line</ref>;</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/>t-&gt;col_start<sp/>=<sp/>tok.<ref refid="structShaderParser_1_1TokenInfo_1ad6ad16601acddc4e7835b186fa09190a" kindref="member">column</ref>;</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/>t-&gt;text<sp/>=<sp/>str_dup(tok.<ref refid="structShaderParser_1_1TokenInfo_1a1ef44eeb587bbdae1f8fb647d8f518ef" kindref="member">lexeme</ref>,<sp/><ref refid="shlexterm_8cpp_1a2936932c6f735c6a6750a6f858e0f99b" kindref="member">sh_symbolsmem</ref>);</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!tok.<ref refid="structShaderParser_1_1TokenInfo_1a0787097a6cb11ce6356e20d080e56318" kindref="member">isMacro</ref>)</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/>clear_lexeme();</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/>t-&gt;file_end<sp/>=<sp/>tok.<ref refid="structShaderParser_1_1TokenInfo_1a657464dbaabd0bed7acbed914f51a7db" kindref="member">file</ref>;</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/>t-&gt;line_end<sp/>=<sp/>tok.<ref refid="structShaderParser_1_1TokenInfo_1a21500ff2d7a5ae4c1b933d92bac2b5ca" kindref="member">line</ref>;</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/>t-&gt;col_end<sp/>=<sp/>tok.<ref refid="structShaderParser_1_1TokenInfo_1ad6ad16601acddc4e7835b186fa09190a" kindref="member">column</ref>;</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/>t-&gt;macro_call_stack<sp/>=<sp/>tok.<ref refid="structShaderParser_1_1TokenInfo_1a5c4f0a3b18affc2ddb1474579ce8d8cc" kindref="member">macroCallStack</ref>;</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>t;</highlight></codeline>
<codeline lineno="241"><highlight class="normal">}</highlight></codeline>
<codeline lineno="242"><highlight class="normal"></highlight></codeline>
<codeline lineno="243"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>InputFile<sp/>open_input_file(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*fn)</highlight></codeline>
<codeline lineno="244"><highlight class="normal">{</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/>InputFile<sp/>input;</highlight></codeline>
<codeline lineno="246"><highlight class="normal"></highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/>String<sp/>inc_fpath;</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(dd_file_exists(fn))</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/>inc_fpath.setStrCat(get_cwd(),<sp/>fn);</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!process_include(inc_fpath,<sp/>fn,<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)strlen(fn)))</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/>inc_fpath<sp/>=<sp/>fn;</highlight></codeline>
<codeline lineno="252"><highlight class="normal"></highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!input.include_alefile(inc_fpath))</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="shLog_8cpp_1a2926179632c7c86265007652d3d30b14" kindref="member">sh_debug</ref>(<ref refid="shLog_8h_1a66042048eb3ce30a1dccb2ebf8c2fd5ca6112bd3e7c5d175bac1569c33c1630ad" kindref="member">SHLOG_FATAL</ref>,<sp/></highlight><highlight class="stringliteral">&quot;can&apos;t<sp/>read<sp/>shader<sp/>script<sp/>&apos;%s&apos;&quot;</highlight><highlight class="normal">,<sp/>fn);</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="257"><highlight class="normal"></highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>input;</highlight></codeline>
<codeline lineno="259"><highlight class="normal">}</highlight></codeline>
<codeline lineno="260"><highlight class="normal"></highlight></codeline>
<codeline lineno="261"><highlight class="normal"><ref refid="structSourceFileParseState_1add1121a0c9a34ee761e21e0f22cf4451" kindref="member">SourceFileParseState::SourceFileParseState</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*fn,<sp/><ref refid="classshc_1_1TargetContext" kindref="compound">shc::TargetContext</ref><sp/>&amp;a_ctx)<sp/>:</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/>input{open_input_file(fn)},<sp/>lexer{&amp;input,<sp/>macroMgr},<sp/>parser{lexer,<sp/>a_ctx}</highlight></codeline>
<codeline lineno="263"><highlight class="normal">{}</highlight></codeline>
<codeline lineno="264"><highlight class="normal"></highlight></codeline>
<codeline lineno="265"><highlight class="normal"></highlight><highlight class="comment">//<sp/>clang-format<sp/>off</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="266"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="structParser_1acc9f64bc5ef4a632d01a45e4dbff58c8" kindref="member">Parser::add_shader</ref>(shader_decl<sp/>*d)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/>ShaderParser::add_shader(d,<sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/><ref refid="structParser_1a614be73a0324e6dc0862e96430433fb2" kindref="member">ctx</ref>);<sp/>}</highlight></codeline>
<codeline lineno="267"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="structParser_1acdaa6e84cf27b7f9df473149fbaf034f" kindref="member">Parser::add_block</ref>(block_decl<sp/>*d)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/><ref refid="namespaceShaderParser_1ae0f69a7c7e5d7877b4976cda83521b5b" kindref="member">ShaderParser::add_block</ref>(d,<sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/><ref refid="structParser_1a614be73a0324e6dc0862e96430433fb2" kindref="member">ctx</ref>);<sp/>}</highlight></codeline>
<codeline lineno="268"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="structParser_1a9a340f211794af3ea8a31d509f4dbb2c" kindref="member">Parser::add_global_var</ref>(global_var_decl<sp/>*d)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/><ref refid="namespaceShaderParser_1a10671c559a54843a5f0fbfc2337ad6da" kindref="member">ShaderParser::add_global_var</ref>(d,<sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/><ref refid="structParser_1a614be73a0324e6dc0862e96430433fb2" kindref="member">ctx</ref>);<sp/>}</highlight></codeline>
<codeline lineno="269"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="structParser_1aa266f29e14a96f32ed09bbc06f786baf" kindref="member">Parser::add_sampler</ref>(sampler_decl<sp/>*d)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/><ref refid="namespaceShaderParser_1a74499c9c84544475e78a6f1c5cef0b24" kindref="member">ShaderParser::add_sampler</ref>(d,<sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/><ref refid="structParser_1a614be73a0324e6dc0862e96430433fb2" kindref="member">ctx</ref>);<sp/>}</highlight></codeline>
<codeline lineno="270"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="structParser_1a2630b1ed3f9540ee310e38675aad2617" kindref="member">Parser::add_global_interval</ref>(interval<sp/>&amp;i)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/><ref refid="namespaceShaderParser_1a3a609923c411d04789c30e49f564e7ff" kindref="member">ShaderParser::add_global_interval</ref>(i,<sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/><ref refid="structParser_1a614be73a0324e6dc0862e96430433fb2" kindref="member">ctx</ref>);<sp/>}</highlight></codeline>
<codeline lineno="271"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="structParser_1a8c38d02544d54c4e28e6bd9406e7cf9a" kindref="member">Parser::add_global_assume</ref>(assume_stat<sp/>&amp;a)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/><ref refid="namespaceShaderParser_1a3694aa6c4ff0bd461c5d54c42339bd16" kindref="member">ShaderParser::add_global_assume</ref>(a,<sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/><ref refid="structParser_1a614be73a0324e6dc0862e96430433fb2" kindref="member">ctx</ref>);<sp/>}</highlight></codeline>
<codeline lineno="272"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="structParser_1a79f315b49d97f3e3a78dd4a373dd5c98" kindref="member">Parser::add_global_assume_if_not_assumed</ref>(assume_if_not_assumed_stat<sp/>&amp;a)<sp/>{<sp/><ref refid="namespaceShaderParser_1a055504365a173c54c1335ecec383cdc0" kindref="member">ShaderParser::add_global_assume_if_not_assumed</ref>(a,<sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/><ref refid="structParser_1a614be73a0324e6dc0862e96430433fb2" kindref="member">ctx</ref>);<sp/>}</highlight></codeline>
<codeline lineno="273"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="structParser_1abd1c0002b781556b157bb7cbf436b2ce" kindref="member">Parser::add_global_bool</ref>(bool_decl<sp/>&amp;d)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/><ref refid="namespaceShaderParser_1aec0c601358ebb5108c2204229539df3d" kindref="member">ShaderParser::add_global_bool</ref>(d,<sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/><ref refid="structParser_1a614be73a0324e6dc0862e96430433fb2" kindref="member">ctx</ref>);<sp/>}</highlight></codeline>
<codeline lineno="274"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="structParser_1a44b1b9672229a1874d0a9fb7353ee454" kindref="member">Parser::add_hlsl</ref>(hlsl_global_decl_class<sp/>&amp;d)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/><ref refid="namespaceShaderParser_1a590ae58ba545da701fc9fe7688bac1b9" kindref="member">ShaderParser::add_hlsl</ref>(d,<sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/><ref refid="structParser_1a614be73a0324e6dc0862e96430433fb2" kindref="member">ctx</ref>);<sp/>}</highlight></codeline>
<codeline lineno="275"><highlight class="normal"></highlight></codeline>
<codeline lineno="276"><highlight class="normal"></highlight></codeline>
<codeline lineno="277"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classLexer_1a15173ff3748bd39e52a74ddae376a785" kindref="member">Lexer::set_error</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*txt)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/><ref refid="classLexer_1a7dee3a13188fbcb621f3100297e89ea1" kindref="member">error</ref>(txt);<sp/>}</highlight></codeline>
<codeline lineno="278"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classLexer_1a15173ff3748bd39e52a74ddae376a785" kindref="member">Lexer::set_error</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>file,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ln,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>col,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*txt)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/><ref refid="classLexer_1a78e473f344455389160c7eb4ad86c57a" kindref="member">diag_message</ref>(DIAG_SYNTAX_ERROR,<sp/>file,<sp/>ln,<sp/>col,<sp/>txt);<sp/>}</highlight></codeline>
<codeline lineno="279"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classLexer_1a81f0bc82f294c9b3d4b8965c52afede6" kindref="member">Lexer::set_warning</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*txt)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/><ref refid="classLexer_1a352734c3b4002a046a4bfa03709774b1" kindref="member">warning</ref>(txt);<sp/>}</highlight></codeline>
<codeline lineno="280"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classLexer_1a81f0bc82f294c9b3d4b8965c52afede6" kindref="member">Lexer::set_warning</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>file,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ln,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>col,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*txt)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/><ref refid="classLexer_1a78e473f344455389160c7eb4ad86c57a" kindref="member">diag_message</ref>(DIAG_WARNING,<sp/>file,<sp/>ln,<sp/>col,<sp/>txt);<sp/>}</highlight></codeline>
<codeline lineno="281"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classLexer_1a4554405a6a30dbe08209d0e2687dfdba" kindref="member">Lexer::set_message</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*txt)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/><ref refid="classLexer_1adc619dccad28e83143bfc66045070efb" kindref="member">message</ref>(txt);<sp/>}</highlight></codeline>
<codeline lineno="282"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classLexer_1a4554405a6a30dbe08209d0e2687dfdba" kindref="member">Lexer::set_message</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>file,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ln,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>col,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*txt)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/><ref refid="classLexer_1a78e473f344455389160c7eb4ad86c57a" kindref="member">diag_message</ref>(DIAG_USER,<sp/>file,<sp/>ln,<sp/>col,<sp/>txt);<sp/>}</highlight></codeline>
<codeline lineno="283"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classLexer_1af117bcd3e4273181cc336216d68d81d8" kindref="member">Lexer::set_debug_message</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*txt)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/><ref refid="classLexer_1a809aa88fa7f77bd197c04b37a870c9c2" kindref="member">debug_message</ref>(txt);<sp/>}</highlight></codeline>
<codeline lineno="284"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classLexer_1af117bcd3e4273181cc336216d68d81d8" kindref="member">Lexer::set_debug_message</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>file,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ln,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>col,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*txt)<sp/><sp/><sp/><sp/>{<sp/><ref refid="classLexer_1a78e473f344455389160c7eb4ad86c57a" kindref="member">diag_message</ref>(DIAG_INFO,<sp/>file,<sp/>ln,<sp/>col,<sp/>txt);<sp/>}</highlight></codeline>
<codeline lineno="285"><highlight class="normal"></highlight><highlight class="comment">//<sp/>clang-format<sp/>on</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="286"><highlight class="normal"></highlight></codeline>
<codeline lineno="287"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="classLexer_1a7cef21af8f93a063e5ad782f0b70243f" kindref="member">Lexer::get_diag_name</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>type)</highlight></codeline>
<codeline lineno="288"><highlight class="normal">{</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(type)</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>DIAG_SYNTAX_ERROR:</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>DIAG_ERROR:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;Error&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>DIAG_WARNING:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;Warning&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>DIAG_USER:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;Message&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>DIAG_INFO:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;Debug<sp/>info&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="298"><highlight class="normal">}</highlight></codeline>
<codeline lineno="299"><highlight class="normal"></highlight></codeline>
<codeline lineno="300"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classLexer_1a78e473f344455389160c7eb4ad86c57a" kindref="member">Lexer::diag_message</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>type,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>file,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ln,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>col,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*txt,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>code)</highlight></codeline>
<codeline lineno="301"><highlight class="normal">{</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*fn<sp/>=<sp/><ref refid="classLexer_1ab26ad89867e01b9d9aecd26d1c74776c" kindref="member">get_filename</ref>(file);</highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/>String<sp/>macroDesc<sp/>=<sp/>macroMgr.<ref refid="classShaderMacroManager_1af28da1b0c28648241c8dc1e05e5ca4d9" kindref="member">getCurrentMacroDesc</ref>(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/>String<sp/>msg((fn<sp/>?<sp/>fn<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;&lt;unknown<sp/>file&gt;&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>msg.aprintf(100,&quot;(%d):%s&quot;,ln,get_diag_name(type));</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>if(code!=-1)<sp/>msg.aprintf(100,&quot;<sp/>#%d&quot;,code);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/>msg.aprintf(20,<sp/></highlight><highlight class="stringliteral">&quot;(%d,%d):<sp/>&quot;</highlight><highlight class="normal">,<sp/>ln,<sp/>col);</highlight></codeline>
<codeline lineno="308"><highlight class="normal"></highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>lf<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(macroDesc.length())</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/>msg<sp/>=<sp/>macroDesc<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal"><sp/>+<sp/>msg;</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/>lf<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="315"><highlight class="normal"></highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/>msg<sp/>+=<sp/>txt;</highlight></codeline>
<codeline lineno="317"><highlight class="normal"></highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(lf)</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/>msg<sp/>+=<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="322"><highlight class="normal"></highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><ref refid="classLexer_1a20236d75da9f2428373b34e967adf73e" kindref="member">diag_text</ref>(type,<sp/>msg,<sp/>code);</highlight></codeline>
<codeline lineno="324"><highlight class="normal">}</highlight></codeline>
<codeline lineno="325"><highlight class="normal"></highlight></codeline>
<codeline lineno="326"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classLexer_1a20236d75da9f2428373b34e967adf73e" kindref="member">Lexer::diag_text</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>type,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*txt,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>code)</highlight></codeline>
<codeline lineno="327"><highlight class="normal">{</highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//==<sp/>write<sp/>some<sp/>script<sp/>log<sp/>file</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><ref refid="shLog_8h_1a66042048eb3ce30a1dccb2ebf8c2fd5c" kindref="member">ShLogMode</ref><sp/>mode<sp/>=<sp/><ref refid="shLog_8h_1a66042048eb3ce30a1dccb2ebf8c2fd5ca5395b0c35e96d97ae9ac7f83b0665310" kindref="member">SHLOG_NORMAL</ref>;</highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(type)</highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>DIAG_ERROR:</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>DIAG_SYNTAX_ERROR:<sp/>mode<sp/>=<sp/><ref refid="shLog_8h_1a66042048eb3ce30a1dccb2ebf8c2fd5caae3b70b41400c8a36e8a094ac1dbe43c" kindref="member">SHLOG_ERROR</ref>;<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>DIAG_WARNING:<sp/>mode<sp/>=<sp/><ref refid="shLog_8h_1a66042048eb3ce30a1dccb2ebf8c2fd5caec73ac89ba721ca7dec737875111fddd" kindref="member">SHLOG_WARNING</ref>;<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>DIAG_INFO:<sp/>mode<sp/>=<sp/><ref refid="shLog_8h_1a66042048eb3ce30a1dccb2ebf8c2fd5ca0012c8acb382f295fe614046a64bba11" kindref="member">SHLOG_INFO</ref>;<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="337"><highlight class="normal"></highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><ref refid="shLog_8cpp_1a2926179632c7c86265007652d3d30b14" kindref="member">sh_debug</ref>(mode,<sp/></highlight><highlight class="stringliteral">&quot;%s&quot;</highlight><highlight class="normal">,<sp/>txt);</highlight></codeline>
<codeline lineno="339"><highlight class="normal">}</highlight></codeline>
<codeline lineno="340"><highlight class="normal"></highlight></codeline>
<codeline lineno="341"><highlight class="normal"></highlight></codeline>
<codeline lineno="342"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classLexer_1a7dee3a13188fbcb621f3100297e89ea1" kindref="member">Lexer::error</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*txt)</highlight></codeline>
<codeline lineno="343"><highlight class="normal">{</highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><ref refid="classLexer_1a78e473f344455389160c7eb4ad86c57a" kindref="member">diag_message</ref>(DIAG_ERROR,<sp/>get_cur_file(),<sp/>get_cur_line(),<sp/>get_cur_column(),<sp/>txt<sp/>?<sp/>txt<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;syntax<sp/>error&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="345"><highlight class="normal">}</highlight></codeline>
<codeline lineno="346"><highlight class="normal"></highlight></codeline>
<codeline lineno="347"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classLexer_1a352734c3b4002a046a4bfa03709774b1" kindref="member">Lexer::warning</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*txt)</highlight></codeline>
<codeline lineno="348"><highlight class="normal">{</highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><ref refid="classLexer_1a78e473f344455389160c7eb4ad86c57a" kindref="member">diag_message</ref>(DIAG_WARNING,<sp/>get_cur_file(),<sp/>get_cur_line(),<sp/>get_cur_column(),<sp/>txt<sp/>?<sp/>txt<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;syntax<sp/>error&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="350"><highlight class="normal">}</highlight></codeline>
<codeline lineno="351"><highlight class="normal"></highlight></codeline>
<codeline lineno="352"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classLexer_1adc619dccad28e83143bfc66045070efb" kindref="member">Lexer::message</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*txt)</highlight></codeline>
<codeline lineno="353"><highlight class="normal">{</highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/><ref refid="classLexer_1a78e473f344455389160c7eb4ad86c57a" kindref="member">diag_message</ref>(DIAG_USER,<sp/>get_cur_file(),<sp/>get_cur_line(),<sp/>get_cur_column(),<sp/>txt<sp/>?<sp/>txt<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;syntax<sp/>error&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="355"><highlight class="normal">}</highlight></codeline>
<codeline lineno="356"><highlight class="normal"></highlight></codeline>
<codeline lineno="357"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classLexer_1a809aa88fa7f77bd197c04b37a870c9c2" kindref="member">Lexer::debug_message</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*txt)</highlight></codeline>
<codeline lineno="358"><highlight class="normal">{</highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><ref refid="classLexer_1a78e473f344455389160c7eb4ad86c57a" kindref="member">diag_message</ref>(DIAG_INFO,<sp/>get_cur_file(),<sp/>get_cur_line(),<sp/>get_cur_column(),<sp/>txt<sp/>?<sp/>txt<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;syntax<sp/>error&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="360"><highlight class="normal">}</highlight></codeline>
<codeline lineno="361"><highlight class="normal"></highlight></codeline>
<codeline lineno="362"><highlight class="normal">uint64_t<sp/>Lexer::makeSymbolId(uint64_t<sp/>name_id,<sp/>SymbolType<sp/>type,<sp/>uint64_t<sp/>entity_id,<sp/>LexedEntityType<sp/>entity_type)</highlight></codeline>
<codeline lineno="363"><highlight class="normal">{</highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/>G_ASSERT(entity_type<sp/>!=<sp/>LexedEntityType::GLOBAL<sp/>||<sp/>entity_id<sp/>==<sp/>0);</highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/>G_ASSERT(name_id<sp/>&lt;=<sp/>0xffffffff);</highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/>G_ASSERT((</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)type<sp/>&lt;<sp/>(1<sp/>&lt;&lt;<sp/>4));</highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/>G_ASSERT((</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)entity_type<sp/>&lt;<sp/>(1<sp/>&lt;&lt;<sp/>2));</highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/>G_ASSERT(entity_id<sp/>&lt;<sp/>(1<sp/>&lt;&lt;<sp/>(32<sp/>-<sp/>6)));</highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>name_id<sp/>|<sp/>(</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">uint64_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(type)<sp/>&lt;&lt;<sp/>32)<sp/>|<sp/>(</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">uint64_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(entity_type)<sp/>&lt;&lt;<sp/>(32<sp/>+<sp/>4))<sp/>|</highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(entity_id<sp/>&lt;&lt;<sp/>(32<sp/>+<sp/>4<sp/>+<sp/>2));</highlight></codeline>
<codeline lineno="371"><highlight class="normal">}</highlight></codeline>
<codeline lineno="372"><highlight class="normal"></highlight></codeline>
<codeline lineno="373"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classLexer_1ab844a140350220e5e04a80336dca9ae8" kindref="member">Lexer::register_symbol</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>name_id,<sp/>SymbolType<sp/>type,<sp/>Terminal<sp/>*symbol)</highlight></codeline>
<codeline lineno="374"><highlight class="normal">{</highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>pair<sp/>=<sp/>mSymbols.emplace(makeSymbolId(name_id,<sp/>type,<sp/>mLexedEntityId,<sp/>mContextType),</highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><sp/><sp/>SymbolLocation{symbol-&gt;file_start,<sp/>symbol-&gt;line_start,<sp/>symbol-&gt;col_start});</highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>is_inserted<sp/>=<sp/>pair.second;</highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(is_inserted)</highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="380"><highlight class="normal"></highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>SymbolLocation<sp/>&amp;existed<sp/>=<sp/>pair.first-&gt;second;</highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>is_equal<sp/>=<sp/>symbol-&gt;file_start<sp/>==<sp/>existed.file<sp/>&amp;&amp;<sp/>symbol-&gt;line_start<sp/>==<sp/>existed.line<sp/>&amp;&amp;<sp/>symbol-&gt;col_start<sp/>==<sp/>existed.column;</highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(is_equal)</highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="385"><highlight class="normal"></highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/>eastl::string<sp/>existed_loc<sp/>=<sp/><ref refid="classLexer_1ae065a46a94e418ea39223d730939ce3c" kindref="member">get_symbol_location</ref>(name_id,<sp/>type);</highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/>eastl::string<sp/>err(eastl::string::CtorSprintf{},<sp/></highlight><highlight class="stringliteral">&quot;Attempt<sp/>to<sp/>register<sp/>another<sp/>symbol<sp/>&apos;%s&apos;<sp/>with<sp/>an<sp/>existed<sp/>name_id:<sp/>%s&quot;</highlight><highlight class="normal">,<sp/>symbol-&gt;text,</highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/><sp/><sp/>existed_loc.c_str());</highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/><ref refid="classLexer_1a15173ff3748bd39e52a74ddae376a785" kindref="member">set_error</ref>(symbol-&gt;file_start,<sp/>symbol-&gt;line_start,<sp/>symbol-&gt;col_start,<sp/>err.c_str());</highlight></codeline>
<codeline lineno="390"><highlight class="normal">}</highlight></codeline>
<codeline lineno="391"><highlight class="normal"></highlight></codeline>
<codeline lineno="392"><highlight class="normal">eastl::string<sp/><ref refid="classLexer_1ae065a46a94e418ea39223d730939ce3c" kindref="member">Lexer::get_symbol_location</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>name_id,<sp/>SymbolType<sp/>type)</highlight></codeline>
<codeline lineno="393"><highlight class="normal">{</highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>found<sp/>=<sp/>mSymbols.find(makeSymbolId(name_id,<sp/>type,<sp/>mLexedEntityId,<sp/>mContextType));</highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(found<sp/>==<sp/>mSymbols.end()<sp/>&amp;&amp;<sp/>mContextType<sp/>!=<sp/>LexedEntityType::GLOBAL)</highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>found<sp/>=<sp/>mSymbols.find(makeSymbolId(name_id,<sp/>type,<sp/>0,<sp/>Lexer::LexedEntityType::GLOBAL));</highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(found<sp/>==<sp/>mSymbols.end())</highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;&lt;unknown<sp/>file&gt;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="401"><highlight class="normal"></highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*file_name<sp/>=<sp/><ref refid="classLexer_1ab26ad89867e01b9d9aecd26d1c74776c" kindref="member">get_filename</ref>(found-&gt;second.file);</highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>eastl::string({},<sp/></highlight><highlight class="stringliteral">&quot;%s(%i,%i)&quot;</highlight><highlight class="normal">,<sp/>file_name,<sp/>found-&gt;second.line,<sp/>found-&gt;second.column);</highlight></codeline>
<codeline lineno="404"><highlight class="normal">}</highlight></codeline>
<codeline lineno="405"><highlight class="normal"></highlight></codeline>
<codeline lineno="406"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classLexer_1a6995e86b55fa74bb82e81a90c4e8c407" kindref="member">Lexer::begin_shader</ref>()</highlight></codeline>
<codeline lineno="407"><highlight class="normal">{</highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/>mLexedEntityId<sp/>=<sp/>mCountShaders++;</highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/>mContextType<sp/>=<sp/>LexedEntityType::SHADER;</highlight></codeline>
<codeline lineno="410"><highlight class="normal">}</highlight></codeline>
<codeline lineno="411"><highlight class="normal"></highlight></codeline>
<codeline lineno="412"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classLexer_1aba6de1ce7cc7f59bea340d75f67345b6" kindref="member">Lexer::begin_block</ref>()</highlight></codeline>
<codeline lineno="413"><highlight class="normal">{</highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/>mLexedEntityId<sp/>=<sp/>mCountBlocks++;</highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/>mContextType<sp/>=<sp/>LexedEntityType::BLOCK;</highlight></codeline>
<codeline lineno="416"><highlight class="normal">}</highlight></codeline>
<codeline lineno="417"><highlight class="normal"></highlight></codeline>
<codeline lineno="418"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Lexer::end_lexed_entity()</highlight></codeline>
<codeline lineno="419"><highlight class="normal">{</highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/>mLexedEntityId<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/>mContextType<sp/>=<sp/>LexedEntityType::GLOBAL;</highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/>mSymbols.clear();</highlight></codeline>
<codeline lineno="423"><highlight class="normal">}</highlight></codeline>
<codeline lineno="424"><highlight class="normal"></highlight></codeline>
<codeline lineno="425"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="classLexer_1ab26ad89867e01b9d9aecd26d1c74776c" kindref="member">Lexer::get_filename</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>f)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>input_stream-&gt;get_filename(f);<sp/>}</highlight></codeline>
<codeline lineno="426"><highlight class="normal"></highlight></codeline>
<codeline lineno="427"><highlight class="normal">String<sp/><ref refid="classLexer_1a38f3cfca6d22627aa9136da7ee2633f5" kindref="member">Lexer::build_current_include_stack</ref>()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="428"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/>String<sp/>incStack;</highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/>InputFile<sp/>*concInputFile<sp/>=<sp/>(InputFile<sp/>*)input_stream;</highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>it<sp/>=<sp/>concInputFile-&gt;incstk.rbegin();<sp/>it<sp/>!=<sp/>concInputFile-&gt;incstk.rend();<sp/>++it)</highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/><sp/><sp/>incStack.aprintf(40,<sp/></highlight><highlight class="stringliteral">&quot;\n<sp/><sp/>Included<sp/>from:<sp/>%s<sp/>(%d:%d)&quot;</highlight><highlight class="normal">,<sp/>concInputFile-&gt;get_filename(it-&gt;file),<sp/>it-&gt;line,<sp/>it-&gt;col);</highlight></codeline>
<codeline lineno="433"><highlight class="normal"></highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>incStack;</highlight></codeline>
<codeline lineno="435"><highlight class="normal">}</highlight></codeline>
<codeline lineno="436"><highlight class="normal"></highlight></codeline>
<codeline lineno="437"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="shlexterm_8cpp_1a73a00775f4a5536a3db13c44b1303128" kindref="member">get_parsed_filename_index</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*fname,<sp/><ref refid="classshc_1_1TargetContext" kindref="compound">shc::TargetContext</ref><sp/>&amp;ctx)</highlight></codeline>
<codeline lineno="438"><highlight class="normal">{</highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!fname)</highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ctx.<ref refid="classshc_1_1TargetContext_1a2fda184b8cc1a5f05c7a8c24b01c2e86" kindref="member">sourceParseState</ref>().<ref refid="structSourceFileParseState_1ae9357cff3ab418c219088a19ab11305e" kindref="member">input</ref>.get_include_file_index(fname);</highlight></codeline>
<codeline lineno="442"><highlight class="normal">}</highlight></codeline>
<codeline lineno="443"><highlight class="normal"></highlight></codeline>
<codeline lineno="444"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="shlexterm_8cpp_1aa5fd6859aefd108067b3de33c29fec1f" kindref="member">parse_shader_script</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*fn,<sp/>Tab&lt;SimpleString&gt;<sp/>*out_filenames,<sp/><ref refid="classshc_1_1TargetContext" kindref="compound">shc::TargetContext</ref><sp/>&amp;ctx)</highlight></codeline>
<codeline lineno="445"><highlight class="normal">{</highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/>RegionMemAlloc<sp/>rm_alloc(4<sp/>&lt;&lt;<sp/>20,<sp/>4<sp/>&lt;&lt;<sp/>20);</highlight></codeline>
<codeline lineno="447"><highlight class="normal"></highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="shlexterm_8cpp_1a2936932c6f735c6a6750a6f858e0f99b" kindref="member">sh_symbolsmem</ref><sp/>=<sp/>&amp;rm_alloc;</highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/><sp/><sp/>BaseParNamespace::symbolsmem<sp/>=<sp/><ref refid="shlexterm_8cpp_1a2936932c6f735c6a6750a6f858e0f99b" kindref="member">sh_symbolsmem</ref>;</highlight></codeline>
<codeline lineno="451"><highlight class="normal"></highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>scope<sp/>=<sp/>ctx.<ref refid="classshc_1_1TargetContext_1aa0e13573b26b92fbde6a9d0ad4f9ee62" kindref="member">initSourceFile</ref>();</highlight></codeline>
<codeline lineno="453"><highlight class="normal"></highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="shLog_8cpp_1a1645d310ca3c7fe3e3dc882fb7962e9d" kindref="member">sh_process_errors</ref>();</highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="shLog_8cpp_1a2926179632c7c86265007652d3d30b14" kindref="member">sh_debug</ref>(<ref refid="shLog_8h_1a66042048eb3ce30a1dccb2ebf8c2fd5ca0012c8acb382f295fe614046a64bba11" kindref="member">SHLOG_INFO</ref>,<sp/></highlight><highlight class="stringliteral">&quot;parsing<sp/>shader<sp/>script<sp/>%s&quot;</highlight><highlight class="normal">,<sp/>fn);</highlight></codeline>
<codeline lineno="456"><highlight class="normal"></highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/><sp/><sp/>NonterminalS<sp/>*s<sp/>=<sp/>ctx.<ref refid="classshc_1_1TargetContext_1a2fda184b8cc1a5f05c7a8c24b01c2e86" kindref="member">sourceParseState</ref>().<ref refid="structSourceFileParseState_1a81f86a8879fd00d8c687e5c4e7fe4068" kindref="member">parser</ref>.parse();</highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!s)</highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="shLog_8cpp_1a2926179632c7c86265007652d3d30b14" kindref="member">sh_debug</ref>(<ref refid="shLog_8h_1a66042048eb3ce30a1dccb2ebf8c2fd5caae3b70b41400c8a36e8a094ac1dbe43c" kindref="member">SHLOG_ERROR</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Unexpected<sp/>EOF<sp/>at<sp/>&apos;%s&apos;&quot;</highlight><highlight class="normal">,<sp/>fn);</highlight></codeline>
<codeline lineno="460"><highlight class="normal"></highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="shLog_8cpp_1a2926179632c7c86265007652d3d30b14" kindref="member">sh_debug</ref>(<ref refid="shLog_8h_1a66042048eb3ce30a1dccb2ebf8c2fd5ca0012c8acb382f295fe614046a64bba11" kindref="member">SHLOG_INFO</ref>,<sp/></highlight><highlight class="stringliteral">&quot;parsed<sp/>shader<sp/>script<sp/>%s&quot;</highlight><highlight class="normal">,<sp/>fn);</highlight></codeline>
<codeline lineno="462"><highlight class="normal"></highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="shLog_8cpp_1abe31b55808a17803dbb52babf0362366" kindref="member">sh_dump_warn_info</ref>();</highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="shLog_8cpp_1a1645d310ca3c7fe3e3dc882fb7962e9d" kindref="member">sh_process_errors</ref>();</highlight></codeline>
<codeline lineno="465"><highlight class="normal"></highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(out_filenames)</highlight></codeline>
<codeline lineno="467"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;inp<sp/>=<sp/>ctx.<ref refid="classshc_1_1TargetContext_1a2fda184b8cc1a5f05c7a8c24b01c2e86" kindref="member">sourceParseState</ref>().<ref refid="structSourceFileParseState_1ae9357cff3ab418c219088a19ab11305e" kindref="member">input</ref>;</highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>inp.incfile.size();<sp/>i++)</highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>out_filenames-&gt;push_back()<sp/>=<sp/>inp.incfile[i].fn;</highlight></codeline>
<codeline lineno="471"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="472"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="473"><highlight class="normal"></highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/>DEBUG_CTX(</highlight><highlight class="stringliteral">&quot;sh_symbolsmem<sp/>used<sp/>%dK<sp/>(of<sp/>%dK<sp/>allocated<sp/>in<sp/>%d<sp/>pools)&quot;</highlight><highlight class="normal">,<sp/>rm_alloc.getPoolUsedSize()<sp/>&gt;&gt;<sp/>10,</highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/><sp/><sp/>rm_alloc.getPoolAllocatedSize()<sp/>&gt;&gt;<sp/>10,<sp/>rm_alloc.getPoolsCount());</highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/><sp/><ref refid="shlexterm_8cpp_1a2936932c6f735c6a6750a6f858e0f99b" kindref="member">sh_symbolsmem</ref><sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="477"><highlight class="normal">}</highlight></codeline>
<codeline lineno="478"><highlight class="normal"></highlight></codeline>
<codeline lineno="479"><highlight class="normal">NonterminalS<sp/>*<ref refid="shlexterm_8cpp_1a634437625119ebac6b751b2986502b5f" kindref="member">parse_shader_string</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>String<sp/>&amp;source,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*file_name,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>line,<sp/><ref refid="classshc_1_1TargetContext" kindref="compound">shc::TargetContext</ref><sp/>&amp;ctx,<sp/>IMemAlloc<sp/>*alloc)</highlight></codeline>
<codeline lineno="480"><highlight class="normal">{</highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">InputString<sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>InputStream</highlight></codeline>
<codeline lineno="482"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="483"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*begin<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="484"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*end<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="485"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*file<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="486"><highlight class="normal"></highlight></codeline>
<codeline lineno="487"><highlight class="normal"><sp/><sp/><sp/><sp/>InputString(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>String<sp/>&amp;source,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*file_name)<sp/>:</highlight></codeline>
<codeline lineno="488"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>begin(source.data()),<sp/>end(source.data()<sp/>+<sp/>source.size()),<sp/>file(file_name)</highlight></codeline>
<codeline lineno="489"><highlight class="normal"><sp/><sp/><sp/><sp/>{}</highlight></codeline>
<codeline lineno="490"><highlight class="normal"></highlight></codeline>
<codeline lineno="491"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>eof()</highlight><highlight class="keyword"><sp/>override<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>begin<sp/>==<sp/>end;<sp/>}</highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>get()</highlight><highlight class="keyword"><sp/>override<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*begin++;<sp/>}</highlight></codeline>
<codeline lineno="493"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>stream_set(BaseLexicalAnalyzer<sp/>&amp;)</highlight><highlight class="keyword"><sp/>override<sp/></highlight><highlight class="normal">{}</highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>is_real_eof()</highlight><highlight class="keyword"><sp/>override<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>eof();<sp/>}</highlight></codeline>
<codeline lineno="495"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*get_filename(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)</highlight><highlight class="keyword"><sp/>override<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>file;<sp/>}</highlight></codeline>
<codeline lineno="496"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="497"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">StringLexer<sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classLexer" kindref="compound">Lexer</ref></highlight></codeline>
<codeline lineno="498"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="499"><highlight class="normal"><sp/><sp/><sp/><sp/>StringLexer(InputString<sp/>*s,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*file,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>line,<sp/><ref refid="classshc_1_1TargetContext" kindref="compound">shc::TargetContext</ref><sp/>&amp;ctx)<sp/>:<sp/><ref refid="classLexer" kindref="compound">Lexer</ref>(s,<sp/>ctx.sourceParseState().macroMgr)</highlight></codeline>
<codeline lineno="500"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="501"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>GeneratedLexer::current_line<sp/>=<sp/>line;</highlight></codeline>
<codeline lineno="502"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>GeneratedLexer::current_file<sp/>=<sp/><ref refid="shlexterm_8cpp_1a73a00775f4a5536a3db13c44b1303128" kindref="member">get_parsed_filename_index</ref>(file,<sp/>ctx);</highlight></codeline>
<codeline lineno="503"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="504"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="505"><highlight class="normal"></highlight></codeline>
<codeline lineno="506"><highlight class="normal"><sp/><sp/>IMemAlloc<sp/>*prev_alloc<sp/>=<sp/><ref refid="shlexterm_8cpp_1a2936932c6f735c6a6750a6f858e0f99b" kindref="member">sh_symbolsmem</ref>;</highlight></codeline>
<codeline lineno="507"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(alloc)</highlight></codeline>
<codeline lineno="508"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="509"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="shlexterm_8cpp_1a2936932c6f735c6a6750a6f858e0f99b" kindref="member">sh_symbolsmem</ref><sp/>=<sp/>alloc;</highlight></codeline>
<codeline lineno="510"><highlight class="normal"><sp/><sp/><sp/><sp/>BaseParNamespace::symbolsmem<sp/>=<sp/><ref refid="shlexterm_8cpp_1a2936932c6f735c6a6750a6f858e0f99b" kindref="member">sh_symbolsmem</ref>;</highlight></codeline>
<codeline lineno="511"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="512"><highlight class="normal"></highlight></codeline>
<codeline lineno="513"><highlight class="normal"><sp/><sp/>InputString<sp/>inp(source,<sp/>file_name);</highlight></codeline>
<codeline lineno="514"><highlight class="normal"><sp/><sp/>StringLexer<sp/>lex(&amp;inp,<sp/>file_name,<sp/>line,<sp/>ctx);</highlight></codeline>
<codeline lineno="515"><highlight class="normal"><sp/><sp/>GeneratedParser<sp/>syn(lex);</highlight></codeline>
<codeline lineno="516"><highlight class="normal"><sp/><sp/>NonterminalS<sp/>*result<sp/>=<sp/>syn.parse();</highlight></codeline>
<codeline lineno="517"><highlight class="normal"></highlight></codeline>
<codeline lineno="518"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(alloc)</highlight></codeline>
<codeline lineno="519"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="520"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="shlexterm_8cpp_1a2936932c6f735c6a6750a6f858e0f99b" kindref="member">sh_symbolsmem</ref><sp/>=<sp/>prev_alloc;</highlight></codeline>
<codeline lineno="521"><highlight class="normal"><sp/><sp/><sp/><sp/>BaseParNamespace::symbolsmem<sp/>=<sp/><ref refid="shlexterm_8cpp_1a2936932c6f735c6a6750a6f858e0f99b" kindref="member">sh_symbolsmem</ref>;</highlight></codeline>
<codeline lineno="522"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="523"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="524"><highlight class="normal">}</highlight></codeline>
<codeline lineno="525"><highlight class="normal"></highlight></codeline>
<codeline lineno="526"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespaceShaderParser" kindref="compound">ShaderParser</ref></highlight></codeline>
<codeline lineno="527"><highlight class="normal">{</highlight></codeline>
<codeline lineno="528"><highlight class="normal">bool_expr<sp/>*<ref refid="namespaceShaderParser_1a1835341922f689756f9fe23a73c47e4e" kindref="member">parse_condition</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*cond_str,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cond_str_len,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*file_name,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>line,<sp/><ref refid="classshc_1_1TargetContext" kindref="compound">shc::TargetContext</ref><sp/>&amp;ctx)</highlight></codeline>
<codeline lineno="529"><highlight class="normal">{</highlight></codeline>
<codeline lineno="530"><highlight class="normal"><sp/><sp/>String<sp/>str(0,<sp/></highlight><highlight class="stringliteral">&quot;bool<sp/>_<sp/>=<sp/>(%.*s);&quot;</highlight><highlight class="normal">,<sp/>cond_str_len,<sp/>cond_str);</highlight></codeline>
<codeline lineno="531"><highlight class="normal"><sp/><sp/>NonterminalS<sp/>*result<sp/>=<sp/><ref refid="shlexterm_8cpp_1a634437625119ebac6b751b2986502b5f" kindref="member">parse_shader_string</ref>(str,<sp/>file_name,<sp/>line,<sp/>ctx,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="532"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!result<sp/>||<sp/>result-&gt;decl.size()<sp/>!=<sp/>1<sp/>||<sp/>!result-&gt;decl[0]-&gt;global_bool_decl)</highlight></codeline>
<codeline lineno="533"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="534"><highlight class="normal"></highlight></codeline>
<codeline lineno="535"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result-&gt;decl[0]-&gt;global_bool_decl-&gt;expr;</highlight></codeline>
<codeline lineno="536"><highlight class="normal">}</highlight></codeline>
<codeline lineno="537"><highlight class="normal"></highlight></codeline>
<codeline lineno="538"><highlight class="normal">shader_stat<sp/>*<ref refid="namespaceShaderParser_1acec58086555ee7795c411d86d0df6143" kindref="member">parse_shader_stat</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*stat_str,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stat_str_len,<sp/><ref refid="classshc_1_1TargetContext" kindref="compound">shc::TargetContext</ref><sp/>&amp;ctx,<sp/>IMemAlloc<sp/>*alloc)</highlight></codeline>
<codeline lineno="539"><highlight class="normal">{</highlight></codeline>
<codeline lineno="540"><highlight class="normal"><sp/><sp/>String<sp/>str(0,<sp/></highlight><highlight class="stringliteral">&quot;shader<sp/>_<sp/>{<sp/>%.*s<sp/>}&quot;</highlight><highlight class="normal">,<sp/>stat_str_len,<sp/>stat_str);</highlight></codeline>
<codeline lineno="541"><highlight class="normal"><sp/><sp/>NonterminalS<sp/>*result<sp/>=<sp/><ref refid="shlexterm_8cpp_1a634437625119ebac6b751b2986502b5f" kindref="member">parse_shader_string</ref>(str,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">,<sp/>1,<sp/>ctx,<sp/>alloc);</highlight></codeline>
<codeline lineno="542"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!result<sp/>||<sp/>result-&gt;decl.size()<sp/>!=<sp/>1<sp/>||<sp/>!result-&gt;decl[0]-&gt;shader)</highlight></codeline>
<codeline lineno="543"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="544"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(result-&gt;decl[0]-&gt;shader-&gt;stat.size()<sp/>!=<sp/>1)</highlight></codeline>
<codeline lineno="545"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="546"><highlight class="normal"></highlight></codeline>
<codeline lineno="547"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result-&gt;decl[0]-&gt;shader-&gt;stat[0];</highlight></codeline>
<codeline lineno="548"><highlight class="normal">}</highlight></codeline>
<codeline lineno="549"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>ShaderParser</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="shlexterm.cpp"/>
  </compounddef>
</doxygen>
