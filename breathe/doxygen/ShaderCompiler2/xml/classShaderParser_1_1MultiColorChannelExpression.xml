<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.7" xml:lang="en-US">
  <compounddef id="classShaderParser_1_1MultiColorChannelExpression" kind="class" language="C++" prot="public">
    <compoundname>ShaderParser::MultiColorChannelExpression</compoundname>
    <basecompoundref refid="classShaderParser_1_1ColorChannelExpression" prot="public" virt="non-virtual">ShaderParser::ColorChannelExpression</basecompoundref>
    <includes refid="shExpr_8h" local="no">shExpr.h</includes>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="classShaderParser_1_1MultiColorChannelExpression_1a518493115ff44c61f6ff52b00f9fa4ab" prot="public" static="no">
        <type>eastl::fixed_vector&lt; shexpr::ColorChannel, 4, false &gt;</type>
        <definition>using ShaderParser::MultiColorChannelExpression::ChannelMask =  eastl::fixed_vector&lt;shexpr::ColorChannel, 4, false&gt;</definition>
        <argsstring></argsstring>
        <name>ChannelMask</name>
        <qualifiedname>ShaderParser::MultiColorChannelExpression::ChannelMask</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="shExpr.h" line="296" column="3" bodyfile="shExpr.h" bodystart="296" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classShaderParser_1_1MultiColorChannelExpression_1a61b94c43296595b69d59d1e7ca69e955" prot="private" static="no" mutable="no">
        <type><ref refid="classShaderParser_1_1MultiColorChannelExpression_1a518493115ff44c61f6ff52b00f9fa4ab" kindref="member">ChannelMask</ref></type>
        <definition>ChannelMask ShaderParser::MultiColorChannelExpression::channels</definition>
        <argsstring></argsstring>
        <name>channels</name>
        <qualifiedname>ShaderParser::MultiColorChannelExpression::channels</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="shExpr.h" line="324" column="15" bodyfile="shExpr.h" bodystart="324" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classShaderParser_1_1MultiColorChannelExpression_1a1c942c3f9a34512ae08f7690d6d2f978" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>MultiColorChannelExpression::MultiColorChannelExpression</definition>
        <argsstring>(Terminal *s, ChannelMask mask)</argsstring>
        <name>MultiColorChannelExpression</name>
        <qualifiedname>ShaderParser::MultiColorChannelExpression::MultiColorChannelExpression</qualifiedname>
        <param>
          <type>Terminal *</type>
          <declname>s</declname>
        </param>
        <param>
          <type><ref refid="classShaderParser_1_1MultiColorChannelExpression_1a518493115ff44c61f6ff52b00f9fa4ab" kindref="member">ChannelMask</ref></type>
          <declname>mask</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="shExpr.h" line="299" column="3" bodyfile="shExpr.cpp" bodystart="802" bodyend="806"/>
      </memberdef>
      <memberdef kind="function" id="classShaderParser_1_1MultiColorChannelExpression_1acf56b906cfdc2ef363729d20c174c78b" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>shexpr::ValueType</type>
        <definition>shexpr::ValueType ShaderParser::MultiColorChannelExpression::getValueType</definition>
        <argsstring>() const override</argsstring>
        <name>getValueType</name>
        <qualifiedname>ShaderParser::MultiColorChannelExpression::getValueType</qualifiedname>
        <reimplements refid="classShaderParser_1_1Expression_1acc2906c41ab9f1277d513f3c2c97096d">getValueType</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="shExpr.h" line="302" column="21" bodyfile="shExpr.h" bodystart="302" bodyend="302"/>
      </memberdef>
      <memberdef kind="function" id="classShaderParser_1_1MultiColorChannelExpression_1aa715a3cd3971440e86f5a6b603349780" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void MultiColorChannelExpression::assembleBytecode</definition>
        <argsstring>(CodeTable &amp;code, Register &amp;dest_reg, StcodeVMRegisterAllocator &amp;reg_allocator, bool is_integer) const override</argsstring>
        <name>assembleBytecode</name>
        <qualifiedname>ShaderParser::MultiColorChannelExpression::assembleBytecode</qualifiedname>
        <reimplements refid="classShaderParser_1_1Expression_1adf4dc5757229bb9e7a7d50d3cc6d82f0">assembleBytecode</reimplements>
        <param>
          <type><ref refid="namespaceShaderParser_1a732af6cbcecefe1051d9165d3718d702" kindref="member">CodeTable</ref> &amp;</type>
          <declname>code</declname>
        </param>
        <param>
          <type><ref refid="classRegister" kindref="compound">Register</ref> &amp;</type>
          <declname>dest_reg</declname>
        </param>
        <param>
          <type><ref refid="classStcodeVMRegisterAllocator" kindref="compound">StcodeVMRegisterAllocator</ref> &amp;</type>
          <declname>reg_allocator</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>is_integer</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="shExpr.h" line="305" column="8" bodyfile="shExpr.cpp" bodystart="809" bodyend="833"/>
      </memberdef>
      <memberdef kind="function" id="classShaderParser_1_1MultiColorChannelExpression_1a490a95ce0b3f52d197d0430b9e04ce9c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void MultiColorChannelExpression::assembleCpp</definition>
        <argsstring>(StcodeExpression &amp;cpp_expr, bool is_integer) const override</argsstring>
        <name>assembleCpp</name>
        <qualifiedname>ShaderParser::MultiColorChannelExpression::assembleCpp</qualifiedname>
        <reimplements refid="classShaderParser_1_1Expression_1a9487371df0a50670438cc4343d06cdb2">assembleCpp</reimplements>
        <param>
          <type><ref refid="structStcodeExpression" kindref="compound">StcodeExpression</ref> &amp;</type>
          <declname>cpp_expr</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>is_integer</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="shExpr.h" line="306" column="8" bodyfile="shExpr.cpp" bodystart="835" bodyend="839"/>
      </memberdef>
      <memberdef kind="function" id="classShaderParser_1_1MultiColorChannelExpression_1ad253514a8b2bf70f5ad56b037b8a2d8e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>bool</type>
        <definition>bool ShaderParser::MultiColorChannelExpression::evaluate</definition>
        <argsstring>(real &amp;out_value, Parser &amp;parser) override</argsstring>
        <name>evaluate</name>
        <qualifiedname>ShaderParser::MultiColorChannelExpression::evaluate</qualifiedname>
        <reimplements refid="classShaderParser_1_1Expression_1a8941f97eca15c43e1ecd37d5c7dc3caf">evaluate</reimplements>
        <param>
          <type>real &amp;</type>
          <declname>out_value</declname>
        </param>
        <param>
          <type><ref refid="structParser" kindref="compound">Parser</ref> &amp;</type>
          <declname>parser</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="shExpr.h" line="309" column="8" bodyfile="shExpr.h" bodystart="309" bodyend="309"/>
      </memberdef>
      <memberdef kind="function" id="classShaderParser_1_1MultiColorChannelExpression_1a1a7e3d97a9c5fb72a14c69072ddac842" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool MultiColorChannelExpression::evaluate</definition>
        <argsstring>(Color4 &amp;out_value, Parser &amp;parser) override</argsstring>
        <name>evaluate</name>
        <qualifiedname>ShaderParser::MultiColorChannelExpression::evaluate</qualifiedname>
        <reimplements refid="classShaderParser_1_1Expression_1af8c5f003ef7d6a21c423c741f3587a1f">evaluate</reimplements>
        <param>
          <type>Color4 &amp;</type>
          <declname>out_value</declname>
        </param>
        <param>
          <type><ref refid="structParser" kindref="compound">Parser</ref> &amp;</type>
          <declname>parser</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="shExpr.h" line="312" column="8" bodyfile="shExpr.cpp" bodystart="843" bodyend="865"/>
      </memberdef>
      <memberdef kind="function" id="classShaderParser_1_1MultiColorChannelExpression_1ab45d4e0c5c8be65b9dcde932772ed71d" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>Terminal *</type>
        <definition>Terminal * ShaderParser::MultiColorChannelExpression::getTerminal</definition>
        <argsstring>() const override</argsstring>
        <name>getTerminal</name>
        <qualifiedname>ShaderParser::MultiColorChannelExpression::getTerminal</qualifiedname>
        <reimplements refid="classShaderParser_1_1ColorChannelExpression_1aa81a68a7672936ba4804ced027623354">getTerminal</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="shExpr.h" line="315" column="12" bodyfile="shExpr.h" bodystart="315" bodyend="315"/>
      </memberdef>
      <memberdef kind="function" id="classShaderParser_1_1MultiColorChannelExpression_1aeb043986daa6fd0c77927c88bd20b629" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>int</type>
        <definition>int ShaderParser::MultiColorChannelExpression::getChannels</definition>
        <argsstring>() const override</argsstring>
        <name>getChannels</name>
        <qualifiedname>ShaderParser::MultiColorChannelExpression::getChannels</qualifiedname>
        <reimplements refid="classShaderParser_1_1Expression_1a624688ee88ace66f0cafa9481d4e4536">getChannels</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="shExpr.h" line="317" column="7" bodyfile="shExpr.h" bodystart="317" bodyend="317"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="classShaderParser_1_1MultiColorChannelExpression_1a7c5922613d5761cfc21a50bf3c2e3255" prot="protected" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void MultiColorChannelExpression::dump_internal</definition>
        <argsstring>(int level, const char *tabs) const override</argsstring>
        <name>dump_internal</name>
        <qualifiedname>ShaderParser::MultiColorChannelExpression::dump_internal</qualifiedname>
        <reimplements refid="classShaderParser_1_1Expression_1ae3261bc8b45356c6090bd84db2508fcb">dump_internal</reimplements>
        <param>
          <type>int</type>
          <declname>level</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>tabs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="shExpr.h" line="321" column="8" bodyfile="shExpr.cpp" bodystart="869" bodyend="880"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="2">
        <label>ShaderParser::ColorChannelExpression</label>
        <link refid="classShaderParser_1_1ColorChannelExpression"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>ShaderParser::Expression</label>
        <link refid="classShaderParser_1_1Expression"/>
      </node>
      <node id="1">
        <label>ShaderParser::MultiColorChannelExpression</label>
        <link refid="classShaderParser_1_1MultiColorChannelExpression"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="2">
        <label>ShaderParser::ColorChannelExpression</label>
        <link refid="classShaderParser_1_1ColorChannelExpression"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>ShaderParser::Expression</label>
        <link refid="classShaderParser_1_1Expression"/>
      </node>
      <node id="1">
        <label>ShaderParser::MultiColorChannelExpression</label>
        <link refid="classShaderParser_1_1MultiColorChannelExpression"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="shExpr.h" line="293" column="1" bodyfile="shExpr.h" bodystart="294" bodyend="325"/>
    <listofallmembers>
      <member refid="classShaderParser_1_1Expression_1a68e771cf9c1584e59c0f5c5e298d3eea" prot="public" virt="non-virtual"><scope>ShaderParser::MultiColorChannelExpression</scope><name>__getName</name></member>
      <member refid="classShaderParser_1_1Expression_1aaec5897d85a74cfadd26bf18752a23f1" prot="public" virt="non-virtual"><scope>ShaderParser::MultiColorChannelExpression</scope><name>__getName</name></member>
      <member refid="classShaderParser_1_1Expression_1a633bdaee53233d1474dacd39ab7e2d89" prot="public" virt="non-virtual"><scope>ShaderParser::MultiColorChannelExpression</scope><name>__getName</name></member>
      <member refid="classShaderParser_1_1Expression_1a77ed6f7aab61c1f6367d6c1f5fcfdbb1" prot="public" virt="non-virtual"><scope>ShaderParser::MultiColorChannelExpression</scope><name>allocateRegForResult</name></member>
      <member refid="classShaderParser_1_1MultiColorChannelExpression_1aa715a3cd3971440e86f5a6b603349780" prot="public" virt="virtual"><scope>ShaderParser::MultiColorChannelExpression</scope><name>assembleBytecode</name></member>
      <member refid="classShaderParser_1_1Expression_1a7cc153456d29d1e3e52ec2d20563b5d1" prot="public" virt="non-virtual"><scope>ShaderParser::MultiColorChannelExpression</scope><name>assembleBytecodeForConstant</name></member>
      <member refid="classShaderParser_1_1Expression_1ac03d00732e3242385f7c5efca77f5d3f" prot="public" virt="non-virtual"><scope>ShaderParser::MultiColorChannelExpression</scope><name>assembleBytecodeForConstant</name></member>
      <member refid="classShaderParser_1_1MultiColorChannelExpression_1a490a95ce0b3f52d197d0430b9e04ce9c" prot="public" virt="virtual"><scope>ShaderParser::MultiColorChannelExpression</scope><name>assembleCpp</name></member>
      <member refid="classShaderParser_1_1Expression_1a4037bf3eee8071bba8ab6886455769e1" prot="public" virt="non-virtual"><scope>ShaderParser::MultiColorChannelExpression</scope><name>assembleCppForConstant</name></member>
      <member refid="classShaderParser_1_1Expression_1a56f313f3547738e55c1aada81a1dca07" prot="public" virt="non-virtual"><scope>ShaderParser::MultiColorChannelExpression</scope><name>assembleCppForConstant</name></member>
      <member refid="classShaderParser_1_1Expression_1ac19dd34018b4470ad166a8ab244f981d" prot="public" virt="virtual"><scope>ShaderParser::MultiColorChannelExpression</scope><name>canConvert</name></member>
      <member refid="classShaderParser_1_1MultiColorChannelExpression_1a518493115ff44c61f6ff52b00f9fa4ab" prot="public" virt="non-virtual"><scope>ShaderParser::MultiColorChannelExpression</scope><name>ChannelMask</name></member>
      <member refid="classShaderParser_1_1MultiColorChannelExpression_1a61b94c43296595b69d59d1e7ca69e955" prot="private" virt="non-virtual"><scope>ShaderParser::MultiColorChannelExpression</scope><name>channels</name></member>
      <member refid="classShaderParser_1_1ColorChannelExpression_1acb738bdb2f1c713407c2ca75ffa866b4" prot="protected" virt="non-virtual"><scope>ShaderParser::MultiColorChannelExpression</scope><name>child</name></member>
      <member refid="classShaderParser_1_1ColorChannelExpression_1a0155330eb5dae83e0d56d7e526932132" prot="public" virt="virtual"><scope>ShaderParser::MultiColorChannelExpression</scope><name>collapseNumbers</name></member>
      <member refid="classShaderParser_1_1ColorChannelExpression_1a33663661e4ed05807d7e30e943dd654b" prot="public" virt="non-virtual"><scope>ShaderParser::MultiColorChannelExpression</scope><name>ColorChannelExpression</name></member>
      <member refid="classShaderParser_1_1Expression_1a08d3c7f008450499ebf2ce26a8f346d5" prot="public" virt="non-virtual"><scope>ShaderParser::MultiColorChannelExpression</scope><name>dump</name></member>
      <member refid="classShaderParser_1_1MultiColorChannelExpression_1a7c5922613d5761cfc21a50bf3c2e3255" prot="protected" virt="virtual"><scope>ShaderParser::MultiColorChannelExpression</scope><name>dump_internal</name></member>
      <member refid="classShaderParser_1_1MultiColorChannelExpression_1ad253514a8b2bf70f5ad56b037b8a2d8e" prot="public" virt="virtual"><scope>ShaderParser::MultiColorChannelExpression</scope><name>evaluate</name></member>
      <member refid="classShaderParser_1_1MultiColorChannelExpression_1a1a7e3d97a9c5fb72a14c69072ddac842" prot="public" virt="virtual"><scope>ShaderParser::MultiColorChannelExpression</scope><name>evaluate</name></member>
      <member refid="classShaderParser_1_1Expression_1a4aeeda4b23b0d2b14c2ad2caab0390c5" prot="public" virt="non-virtual"><scope>ShaderParser::MultiColorChannelExpression</scope><name>Expression</name></member>
      <member refid="classShaderParser_1_1MultiColorChannelExpression_1aeb043986daa6fd0c77927c88bd20b629" prot="public" virt="virtual"><scope>ShaderParser::MultiColorChannelExpression</scope><name>getChannels</name></member>
      <member refid="classShaderParser_1_1ColorChannelExpression_1ae5e7fceccb9082feb174a87f747fb170" prot="public" virt="non-virtual"><scope>ShaderParser::MultiColorChannelExpression</scope><name>getChild</name></member>
      <member refid="classShaderParser_1_1Expression_1a21b42b73baa2d365e975d950b60a613d" prot="public" virt="non-virtual"><scope>ShaderParser::MultiColorChannelExpression</scope><name>getParent</name></member>
      <member refid="classShaderParser_1_1Expression_1a066eed5146bd48cfcc3acb30a50e9068" prot="public" virt="non-virtual"><scope>ShaderParser::MultiColorChannelExpression</scope><name>getParserSymbol</name></member>
      <member refid="classShaderParser_1_1MultiColorChannelExpression_1ab45d4e0c5c8be65b9dcde932772ed71d" prot="public" virt="virtual"><scope>ShaderParser::MultiColorChannelExpression</scope><name>getTerminal</name></member>
      <member refid="classShaderParser_1_1ColorChannelExpression_1a283d759ed61f8b58be2792a7da7a1946" prot="public" virt="virtual"><scope>ShaderParser::MultiColorChannelExpression</scope><name>getType</name></member>
      <member refid="classShaderParser_1_1Expression_1a1ab07814f1b27a6786d043da4e080c44" prot="public" virt="non-virtual"><scope>ShaderParser::MultiColorChannelExpression</scope><name>getUnaryOperator</name></member>
      <member refid="classShaderParser_1_1MultiColorChannelExpression_1acf56b906cfdc2ef363729d20c174c78b" prot="public" virt="virtual"><scope>ShaderParser::MultiColorChannelExpression</scope><name>getValueType</name></member>
      <member refid="classShaderParser_1_1Expression_1a20844e4f958c20d70cc4824650652f67" prot="public" virt="virtual"><scope>ShaderParser::MultiColorChannelExpression</scope><name>hasDynamicAndMaterialTermsAt</name></member>
      <member refid="classShaderParser_1_1ColorChannelExpression_1a95fe662a6d979b5d4fa93f252c26d456" prot="public" virt="virtual"><scope>ShaderParser::MultiColorChannelExpression</scope><name>isConst</name></member>
      <member refid="classShaderParser_1_1ColorChannelExpression_1ac83da685f248d7f6864d62165fc562b5" prot="public" virt="virtual"><scope>ShaderParser::MultiColorChannelExpression</scope><name>isDynamic</name></member>
      <member refid="classShaderParser_1_1MultiColorChannelExpression_1a1c942c3f9a34512ae08f7690d6d2f978" prot="public" virt="non-virtual"><scope>ShaderParser::MultiColorChannelExpression</scope><name>MultiColorChannelExpression</name></member>
      <member refid="classShaderParser_1_1ColorChannelExpression_1a9645ea025110cb5b36d73abea81a549a" prot="public" virt="non-virtual"><scope>ShaderParser::MultiColorChannelExpression</scope><name>setChild</name></member>
      <member refid="classShaderParser_1_1Expression_1a85fe9b97eae19d91e0affe293d3eefdf" prot="public" virt="non-virtual"><scope>ShaderParser::MultiColorChannelExpression</scope><name>SetParent</name></member>
      <member refid="classShaderParser_1_1Expression_1a6438a4e71937292586b86d9e3e1202f9" prot="public" virt="non-virtual"><scope>ShaderParser::MultiColorChannelExpression</scope><name>setUnaryOperator</name></member>
      <member refid="classShaderParser_1_1Expression_1a9e01aa5ac9dd2e26fa87d4cdd7a042ca" prot="public" virt="virtual"><scope>ShaderParser::MultiColorChannelExpression</scope><name>~Expression</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
