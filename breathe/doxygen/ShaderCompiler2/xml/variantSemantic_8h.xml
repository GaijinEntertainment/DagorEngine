<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.7" xml:lang="en-US">
  <compounddef id="variantSemantic_8h" kind="file" language="C++">
    <compoundname>variantSemantic.h</compoundname>
    <includes refid="shVariantContext_8h" local="yes">shVariantContext.h</includes>
    <includedby refid="cppStcodeAssembly_8cpp" local="yes">cppStcodeAssembly.cpp</includedby>
    <includedby refid="cppStcodePasses_8h" local="yes">cppStcodePasses.h</includedby>
    <includedby refid="variablesMerger_8cpp" local="yes">variablesMerger.cpp</includedby>
    <includedby refid="variantAssembly_8h" local="yes">variantAssembly.h</includedby>
    <includedby refid="variantSemantic_8cpp" local="yes">variantSemantic.cpp</includedby>
    <incdepgraph>
      <node id="89">
        <label>DebugLevel.h</label>
        <link refid="DebugLevel_8h"/>
        <childnode refid="34" relation="include">
        </childnode>
      </node>
      <node id="46">
        <label>blkHash.h</label>
        <link refid="blkHash_8h"/>
      </node>
      <node id="82">
        <label>boolVar.h</label>
        <link refid="boolVar_8h"/>
        <childnode refid="63" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
      </node>
      <node id="7">
        <label>commonUtils.h</label>
        <link refid="commonUtils_8h"/>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
      </node>
      <node id="74">
        <label>compileResult.h</label>
        <link refid="compileResult_8h"/>
        <childnode refid="75" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
      </node>
      <node id="71">
        <label>const3d.h</label>
        <link refid="const3d_8h"/>
        <childnode refid="40" relation="include">
        </childnode>
      </node>
      <node id="13">
        <label>cppStcode.h</label>
        <link refid="cppStcode_8h"/>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="44" relation="include">
        </childnode>
        <childnode refid="46" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="43" relation="include">
        </childnode>
      </node>
      <node id="14">
        <label>cppStcodeAssembly.h</label>
        <link refid="cppStcodeAssembly_8h"/>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
        <childnode refid="38" relation="include">
        </childnode>
        <childnode refid="39" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
        <childnode refid="41" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="43" relation="include">
        </childnode>
      </node>
      <node id="15">
        <label>cppStcodeBuilder.h</label>
        <link refid="cppStcodeBuilder_8h"/>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
      </node>
      <node id="90">
        <label>cppStcodePlatformInfo.h</label>
        <link refid="cppStcodePlatformInfo_8h"/>
        <childnode refid="34" relation="include">
        </childnode>
      </node>
      <node id="65">
        <label>cppStcodeUtils.h</label>
        <link refid="cppStcodeUtils_8h"/>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
        <childnode refid="38" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="66" relation="include">
        </childnode>
      </node>
      <node id="53">
        <label>globVar.h</label>
        <link refid="globVar_8h"/>
        <childnode refid="54" relation="include">
        </childnode>
        <childnode refid="55" relation="include">
        </childnode>
        <childnode refid="47" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="56" relation="include">
        </childnode>
        <childnode refid="57" relation="include">
        </childnode>
        <childnode refid="58" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="59" relation="include">
        </childnode>
        <childnode refid="60" relation="include">
        </childnode>
      </node>
      <node id="88">
        <label>globalConfig.h</label>
        <link refid="globalConfig_8h"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="89" relation="include">
        </childnode>
        <childnode refid="90" relation="include">
        </childnode>
        <childnode refid="50" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
      </node>
      <node id="26">
        <label>hash.h</label>
        <link refid="hash_8h"/>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
      </node>
      <node id="51">
        <label>hashStrings.h</label>
        <link refid="hashStrings_8h"/>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="47" relation="include">
        </childnode>
        <childnode refid="52" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
      </node>
      <node id="29">
        <label>hlslRegisters.h</label>
        <link refid="hlslRegisters_8h"/>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
      </node>
      <node id="70">
        <label>hlslStage.h</label>
        <link refid="hlslStage_8h"/>
        <childnode refid="71" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="72" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
        <childnode refid="73" relation="include">
        </childnode>
      </node>
      <node id="49">
        <label>hwAssembly.h</label>
        <link refid="hwAssembly_8h"/>
        <childnode refid="11" relation="include">
        </childnode>
      </node>
      <node id="60">
        <label>intervals.h</label>
        <link refid="intervals_8h"/>
      </node>
      <node id="19">
        <label>nameMap.h</label>
        <link refid="nameMap_8h"/>
        <childnode refid="20" relation="include">
        </childnode>
      </node>
      <node id="83">
        <label>namedConst.h</label>
        <link refid="namedConst_8h"/>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="84" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="88" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="47" relation="include">
        </childnode>
        <childnode refid="91" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
      </node>
      <node id="44">
        <label>processes.h</label>
        <link refid="processes_8h"/>
        <childnode refid="45" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
      </node>
      <node id="61">
        <label>samplers.h</label>
        <link refid="samplers_8h"/>
        <childnode refid="62" relation="include">
        </childnode>
        <childnode refid="63" relation="include">
        </childnode>
        <childnode refid="53" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="57" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
      </node>
      <node id="92">
        <label>shAssumes.h</label>
        <link refid="shAssumes_8h"/>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="60" relation="include">
        </childnode>
        <childnode refid="63" relation="include">
        </childnode>
        <childnode refid="50" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>shCompContext.h</label>
        <link refid="shCompContext_8h"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="49" relation="include">
        </childnode>
        <childnode refid="50" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>shCompilationInfo.h</label>
        <link refid="shCompilationInfo_8h"/>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="46" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="47" relation="include">
        </childnode>
        <childnode refid="48" relation="include">
        </childnode>
      </node>
      <node id="79">
        <label>shErrorReporting.h</label>
        <link refid="shErrorReporting_8h"/>
        <childnode refid="62" relation="include">
        </childnode>
        <childnode refid="63" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="102">
        <label>shLocVar.h</label>
        <link refid="shLocVar_8h"/>
      </node>
      <node id="30">
        <label>shLog.h</label>
        <link refid="shLog_8h"/>
      </node>
      <node id="64">
        <label>shMacro.h</label>
        <link refid="shMacro_8h"/>
      </node>
      <node id="100">
        <label>shMessages.h</label>
        <link refid="shMessages_8h"/>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="87" relation="include">
        </childnode>
      </node>
      <node id="101">
        <label>shSemCode.h</label>
        <link refid="shSemCode_8h"/>
      </node>
      <node id="3">
        <label>shShaderContext.h</label>
        <link refid="shShaderContext_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="82" relation="include">
        </childnode>
        <childnode refid="93" relation="include">
        </childnode>
        <childnode refid="92" relation="include">
        </childnode>
        <childnode refid="94" relation="include">
        </childnode>
        <childnode refid="98" relation="include">
        </childnode>
        <childnode refid="100" relation="include">
        </childnode>
        <childnode refid="96" relation="include">
        </childnode>
        <childnode refid="101" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>shTargetContext.h</label>
        <link refid="shTargetContext_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="51" relation="include">
        </childnode>
        <childnode refid="53" relation="include">
        </childnode>
        <childnode refid="61" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="65" relation="include">
        </childnode>
        <childnode refid="63" relation="include">
        </childnode>
        <childnode refid="67" relation="include">
        </childnode>
        <childnode refid="69" relation="include">
        </childnode>
        <childnode refid="78" relation="include">
        </childnode>
        <childnode refid="82" relation="include">
        </childnode>
        <childnode refid="70" relation="include">
        </childnode>
        <childnode refid="83" relation="include">
        </childnode>
        <childnode refid="92" relation="include">
        </childnode>
        <childnode refid="88" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
      </node>
      <node id="67">
        <label>shTargetStorage.h</label>
        <link refid="shTargetStorage_8h"/>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="68" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
        <childnode refid="43" relation="include">
        </childnode>
        <childnode refid="41" relation="include">
        </childnode>
      </node>
      <node id="99">
        <label>shVarBool.h</label>
        <link refid="shVarBool_8h"/>
      </node>
      <node id="59">
        <label>shVarVecTypes.h</label>
        <link refid="shVarVecTypes_8h"/>
      </node>
      <node id="2">
        <label>shVariantContext.h</label>
        <link refid="shVariantContext_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="101" relation="include">
        </childnode>
        <childnode refid="82" relation="include">
        </childnode>
        <childnode refid="102" relation="include">
        </childnode>
        <childnode refid="103" relation="include">
        </childnode>
      </node>
      <node id="69">
        <label>shaderBytecodeCache.h</label>
        <link refid="shaderBytecodeCache_8h"/>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="70" relation="include">
        </childnode>
        <childnode refid="74" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="76" relation="include">
        </childnode>
        <childnode refid="47" relation="include">
        </childnode>
        <childnode refid="77" relation="include">
        </childnode>
      </node>
      <node id="17">
        <label>shaderSave.h</label>
        <link refid="shaderSave_8h"/>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
      </node>
      <node id="16">
        <label>shaderTab.h</label>
        <link refid="shaderTab_8h"/>
        <childnode refid="17" relation="include">
        </childnode>
      </node>
      <node id="96">
        <label>shaderVariant.h</label>
        <link refid="shaderVariant_8h"/>
        <childnode refid="60" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="80" relation="include">
        </childnode>
        <childnode refid="58" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="52" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
      </node>
      <node id="93">
        <label>shaderVariantSrc.h</label>
        <link refid="shaderVariantSrc_8h"/>
      </node>
      <node id="94">
        <label>shcode.h</label>
        <link refid="shcode_8h"/>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="52" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="95" relation="include">
        </childnode>
        <childnode refid="54" relation="include">
        </childnode>
        <childnode refid="55" relation="include">
        </childnode>
        <childnode refid="87" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="96" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="83" relation="include">
        </childnode>
        <childnode refid="97" relation="include">
        </childnode>
        <childnode refid="59" relation="include">
        </childnode>
      </node>
      <node id="63">
        <label>shlexterm.h</label>
        <link refid="shlexterm_8h"/>
        <childnode refid="62" relation="include">
        </childnode>
        <childnode refid="64" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="98">
        <label>shsem.h</label>
        <link refid="shsem_8h"/>
        <childnode refid="62" relation="include">
        </childnode>
        <childnode refid="63" relation="include">
        </childnode>
        <childnode refid="99" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="77" relation="include">
        </childnode>
      </node>
      <node id="78">
        <label>stcodeBytecode.h</label>
        <link refid="stcodeBytecode_8h"/>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="79" relation="include">
        </childnode>
        <childnode refid="39" relation="include">
        </childnode>
        <childnode refid="80" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="81" relation="include">
        </childnode>
      </node>
      <node id="18">
        <label>varMap.h</label>
        <link refid="varMap_8h"/>
        <childnode refid="19" relation="include">
        </childnode>
      </node>
      <node id="58">
        <label>varTypes.h</label>
        <link refid="varTypes_8h"/>
      </node>
      <node id="84">
        <label>variablesMerger.h</label>
        <link refid="variablesMerger_8h"/>
        <childnode refid="62" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
        <childnode refid="75" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="85" relation="include">
        </childnode>
        <childnode refid="86" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="87" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>variantSemantic.h</label>
        <link refid="variantSemantic_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="56">
        <label>3d/dag_texMgr.h</label>
      </node>
      <node id="25">
        <label>EASTL/algorithm.h</label>
      </node>
      <node id="33">
        <label>EASTL/array.h</label>
      </node>
      <node id="87">
        <label>EASTL/bitvector.h</label>
      </node>
      <node id="85">
        <label>EASTL/fixed_vector.h</label>
      </node>
      <node id="86">
        <label>EASTL/map.h</label>
      </node>
      <node id="12">
        <label>EASTL/optional.h</label>
      </node>
      <node id="11">
        <label>EASTL/string.h</label>
      </node>
      <node id="66">
        <label>EASTL/string_view.h</label>
      </node>
      <node id="72">
        <label>EASTL/type_traits.h</label>
      </node>
      <node id="41">
        <label>EASTL/unique_ptr.h</label>
      </node>
      <node id="75">
        <label>EASTL/vector.h</label>
      </node>
      <node id="81">
        <label>EASTL/vector_map.h</label>
      </node>
      <node id="91">
        <label>EASTL/vector_set.h</label>
      </node>
      <node id="34">
        <label>cstdint</label>
      </node>
      <node id="28">
        <label>cstring</label>
      </node>
      <node id="24">
        <label>dag/dag_vector.h</label>
      </node>
      <node id="23">
        <label>debug/dag_assert.h</label>
      </node>
      <node id="80">
        <label>debug/dag_debug.h</label>
      </node>
      <node id="40">
        <label>drv/3d/dag_consts.h</label>
      </node>
      <node id="68">
        <label>drv/3d/dag_renderStates.h</label>
      </node>
      <node id="57">
        <label>drv/3d/dag_sampler.h</label>
      </node>
      <node id="31">
        <label>generic/dag_enumerate.h</label>
      </node>
      <node id="32">
        <label>generic/dag_expected.h</label>
      </node>
      <node id="45">
        <label>generic/dag_fixedMoveOnlyFunction.h</label>
      </node>
      <node id="95">
        <label>generic/dag_smallTab.h</label>
      </node>
      <node id="21">
        <label>generic/dag_tab.h</label>
      </node>
      <node id="27">
        <label>hash/BLAKE3/blake3.h</label>
      </node>
      <node id="50">
        <label>ioSys/dag_dataBlock.h</label>
      </node>
      <node id="54">
        <label>math/dag_color.h</label>
      </node>
      <node id="55">
        <label>math/integer/dag_IPoint4.h</label>
      </node>
      <node id="73">
        <label>memory</label>
      </node>
      <node id="36">
        <label>memory/dag_mem.h</label>
      </node>
      <node id="76">
        <label>memory/dag_memBase.h</label>
      </node>
      <node id="103">
        <label>memory/dag_regionMemAlloc.h</label>
      </node>
      <node id="97">
        <label>shaders/dag_shaderCommon.h</label>
      </node>
      <node id="39">
        <label>shaders/dag_shaderVarType.h</label>
      </node>
      <node id="48">
        <label>shaders/dag_shaders.h</label>
      </node>
      <node id="37">
        <label>shaders/shExprTypes.h</label>
      </node>
      <node id="38">
        <label>shaders/shFunc.h</label>
      </node>
      <node id="43">
        <label>shaders/shader_layout.h</label>
      </node>
      <node id="35">
        <label>shaders/slotTexturesRange.h</label>
      </node>
      <node id="62">
        <label>shsyn.h</label>
      </node>
      <node id="42">
        <label>ska_hash_map/flat_hash_map2.hpp</label>
      </node>
      <node id="22">
        <label>util/dag_bindump_ext.h</label>
      </node>
      <node id="10">
        <label>util/dag_globDef.h</label>
      </node>
      <node id="20">
        <label>util/dag_oaHashNameMap.h</label>
      </node>
      <node id="9">
        <label>util/dag_safeArg.h</label>
      </node>
      <node id="77">
        <label>util/dag_simpleString.h</label>
      </node>
      <node id="52">
        <label>util/dag_stdint.h</label>
      </node>
      <node id="47">
        <label>util/dag_string.h</label>
      </node>
      <node id="8">
        <label>utility</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="2">
        <label>cppStcodeAssembly.cpp</label>
        <link refid="cppStcodeAssembly_8cpp"/>
      </node>
      <node id="4">
        <label>cppStcodePasses.cpp</label>
        <link refid="cppStcodePasses_8cpp"/>
      </node>
      <node id="3">
        <label>cppStcodePasses.h</label>
        <link refid="cppStcodePasses_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>shExprParser.cpp</label>
        <link refid="shExprParser_8cpp"/>
      </node>
      <node id="5">
        <label>shsem.cpp</label>
        <link refid="shsem_8cpp"/>
      </node>
      <node id="6">
        <label>variablesMerger.cpp</label>
        <link refid="variablesMerger_8cpp"/>
      </node>
      <node id="9">
        <label>variantAssembly.cpp</label>
        <link refid="variantAssembly_8cpp"/>
      </node>
      <node id="7">
        <label>variantAssembly.h</label>
        <link refid="variantAssembly_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="10">
        <label>variantSemantic.cpp</label>
        <link refid="variantSemantic_8cpp"/>
      </node>
      <node id="1">
        <label>variantSemantic.h</label>
        <link refid="variantSemantic_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
    <innerclass refid="structsemantic_1_1VarLookupRes" prot="public">semantic::VarLookupRes</innerclass>
    <innerclass refid="classsemantic_1_1VariantBoolExprEvalCB" prot="public">semantic::VariantBoolExprEvalCB</innerclass>
    <innerclass refid="structsemantic_1_1NamedConstInitializerElement" prot="public">semantic::NamedConstInitializerElement</innerclass>
    <innerclass refid="structsemantic_1_1NamedConstInitializerElement_1_1BuiltinVar" prot="public">semantic::NamedConstInitializerElement::BuiltinVar</innerclass>
    <innerclass refid="structsemantic_1_1NamedConstInitializerElement_1_1VarBase" prot="public">semantic::NamedConstInitializerElement::VarBase</innerclass>
    <innerclass refid="structsemantic_1_1NamedConstInitializerElement_1_1MaterialVar" prot="public">semantic::NamedConstInitializerElement::MaterialVar</innerclass>
    <innerclass refid="structsemantic_1_1NamedConstInitializerElement_1_1GlobalVar" prot="public">semantic::NamedConstInitializerElement::GlobalVar</innerclass>
    <innerclass refid="structsemantic_1_1NamedConstDefInfo" prot="public">semantic::NamedConstDefInfo</innerclass>
    <innerclass refid="structsemantic_1_1LocalVarDefInfo" prot="public">semantic::LocalVarDefInfo</innerclass>
    <innernamespace refid="namespacesemantic">semantic</innernamespace>
      <sectiondef kind="define">
      <memberdef kind="define" id="variantSemantic_8h_1a209b8a90b7fa40bbf4c0b21fa43a958f" prot="public" static="no">
        <name>TYPE_LIST_FLOAT</name>
        <param></param>
        <initializer><ref refid="variantSemantic_8h_1ac600783c9d560fb869253833a446c518" kindref="member">TYPE</ref>(f1) <ref refid="variantSemantic_8h_1ac600783c9d560fb869253833a446c518" kindref="member">TYPE</ref>(f2) <ref refid="variantSemantic_8h_1ac600783c9d560fb869253833a446c518" kindref="member">TYPE</ref>(f3) <ref refid="variantSemantic_8h_1ac600783c9d560fb869253833a446c518" kindref="member">TYPE</ref>(f4) <ref refid="variantSemantic_8h_1ac600783c9d560fb869253833a446c518" kindref="member">TYPE</ref>(f44)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="variantSemantic.h" line="39" column="9" bodyfile="variantSemantic.h" bodystart="39" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="variantSemantic_8h_1a9ae252b8c5c8e66e49b3d9ea6043b2dd" prot="public" static="no">
        <name>TYPE_LIST_INT</name>
        <param></param>
        <initializer><ref refid="variantSemantic_8h_1ac600783c9d560fb869253833a446c518" kindref="member">TYPE</ref>(i1) <ref refid="variantSemantic_8h_1ac600783c9d560fb869253833a446c518" kindref="member">TYPE</ref>(i2) <ref refid="variantSemantic_8h_1ac600783c9d560fb869253833a446c518" kindref="member">TYPE</ref>(i3) <ref refid="variantSemantic_8h_1ac600783c9d560fb869253833a446c518" kindref="member">TYPE</ref>(i4)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="variantSemantic.h" line="40" column="9" bodyfile="variantSemantic.h" bodystart="40" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="variantSemantic_8h_1af300d3c8b940e5bb78f56a729ddff2b9" prot="public" static="no">
        <name>TYPE_LIST_UINT</name>
        <param></param>
        <initializer><ref refid="variantSemantic_8h_1ac600783c9d560fb869253833a446c518" kindref="member">TYPE</ref>(u1) <ref refid="variantSemantic_8h_1ac600783c9d560fb869253833a446c518" kindref="member">TYPE</ref>(u2) <ref refid="variantSemantic_8h_1ac600783c9d560fb869253833a446c518" kindref="member">TYPE</ref>(u3) <ref refid="variantSemantic_8h_1ac600783c9d560fb869253833a446c518" kindref="member">TYPE</ref>(u4)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="variantSemantic.h" line="41" column="9" bodyfile="variantSemantic.h" bodystart="41" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="variantSemantic_8h_1a440cdf0f91e9d4929750af9986731092" prot="public" static="no">
        <name>TYPE_LIST_BUF</name>
        <param></param>
        <initializer><ref refid="variantSemantic_8h_1ac600783c9d560fb869253833a446c518" kindref="member">TYPE</ref>(buf) <ref refid="variantSemantic_8h_1ac600783c9d560fb869253833a446c518" kindref="member">TYPE</ref>(cbuf)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="variantSemantic.h" line="42" column="9" bodyfile="variantSemantic.h" bodystart="42" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="variantSemantic_8h_1ab9165ea3431579cac54aabba433ce010" prot="public" static="no">
        <name>TYPE_LIST_TEX</name>
        <param></param>
        <initializer><ref refid="variantSemantic_8h_1ac600783c9d560fb869253833a446c518" kindref="member">TYPE</ref>(tex) <ref refid="variantSemantic_8h_1ac600783c9d560fb869253833a446c518" kindref="member">TYPE</ref>(tex2d) <ref refid="variantSemantic_8h_1ac600783c9d560fb869253833a446c518" kindref="member">TYPE</ref>(tex3d) <ref refid="variantSemantic_8h_1ac600783c9d560fb869253833a446c518" kindref="member">TYPE</ref>(texArray) <ref refid="variantSemantic_8h_1ac600783c9d560fb869253833a446c518" kindref="member">TYPE</ref>(texCube) <ref refid="variantSemantic_8h_1ac600783c9d560fb869253833a446c518" kindref="member">TYPE</ref>(texCubeArray)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="variantSemantic.h" line="43" column="9" bodyfile="variantSemantic.h" bodystart="43" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="variantSemantic_8h_1a3dd9f8a2c5bca3fbe5ed899910479381" prot="public" static="no">
        <name>TYPE_LIST_SMP</name>
        <param></param>
        <initializer><ref refid="variantSemantic_8h_1ac600783c9d560fb869253833a446c518" kindref="member">TYPE</ref>(smp) <ref refid="variantSemantic_8h_1ac600783c9d560fb869253833a446c518" kindref="member">TYPE</ref>(smp2d) <ref refid="variantSemantic_8h_1ac600783c9d560fb869253833a446c518" kindref="member">TYPE</ref>(smp3d) <ref refid="variantSemantic_8h_1ac600783c9d560fb869253833a446c518" kindref="member">TYPE</ref>(smpArray) <ref refid="variantSemantic_8h_1ac600783c9d560fb869253833a446c518" kindref="member">TYPE</ref>(smpCube) <ref refid="variantSemantic_8h_1ac600783c9d560fb869253833a446c518" kindref="member">TYPE</ref>(smpCubeArray) <ref refid="variantSemantic_8h_1ac600783c9d560fb869253833a446c518" kindref="member">TYPE</ref>(sampler)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="variantSemantic.h" line="44" column="9" bodyfile="variantSemantic.h" bodystart="44" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="variantSemantic_8h_1aeeb4fe8d7fb340f0dbf7c87d4ca3c482" prot="public" static="no">
        <name>TYPE_LIST_OTHER</name>
        <param></param>
        <initializer>  <ref refid="variantSemantic_8h_1ac600783c9d560fb869253833a446c518" kindref="member">TYPE</ref>(shd) <ref refid="variantSemantic_8h_1ac600783c9d560fb869253833a446c518" kindref="member">TYPE</ref>(shdArray) <ref refid="variantSemantic_8h_1ac600783c9d560fb869253833a446c518" kindref="member">TYPE</ref>(staticCube) <ref refid="variantSemantic_8h_1ac600783c9d560fb869253833a446c518" kindref="member">TYPE</ref>(staticTexArray) <ref refid="variantSemantic_8h_1ac600783c9d560fb869253833a446c518" kindref="member">TYPE</ref>(staticTex3D) <ref refid="variantSemantic_8h_1ac600783c9d560fb869253833a446c518" kindref="member">TYPE</ref>(staticCubeArray) <ref refid="variantSemantic_8h_1ac600783c9d560fb869253833a446c518" kindref="member">TYPE</ref>(uav) <ref refid="variantSemantic_8h_1ac600783c9d560fb869253833a446c518" kindref="member">TYPE</ref>(tlas)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="variantSemantic.h" line="45" column="9" bodyfile="variantSemantic.h" bodystart="45" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="variantSemantic_8h_1a12d33da3418cfc67c9076ef7353ca50b" prot="public" static="no">
        <name>TYPE_LIST</name>
        <initializer><ref refid="variantSemantic_8h_1a209b8a90b7fa40bbf4c0b21fa43a958f" kindref="member">TYPE_LIST_FLOAT</ref>() <ref refid="variantSemantic_8h_1a9ae252b8c5c8e66e49b3d9ea6043b2dd" kindref="member">TYPE_LIST_INT</ref>() <ref refid="variantSemantic_8h_1af300d3c8b940e5bb78f56a729ddff2b9" kindref="member">TYPE_LIST_UINT</ref>() <ref refid="variantSemantic_8h_1a440cdf0f91e9d4929750af9986731092" kindref="member">TYPE_LIST_BUF</ref>() <ref refid="variantSemantic_8h_1ab9165ea3431579cac54aabba433ce010" kindref="member">TYPE_LIST_TEX</ref>() <ref refid="variantSemantic_8h_1a3dd9f8a2c5bca3fbe5ed899910479381" kindref="member">TYPE_LIST_SMP</ref>() <ref refid="variantSemantic_8h_1aeeb4fe8d7fb340f0dbf7c87d4ca3c482" kindref="member">TYPE_LIST_OTHER</ref>()</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="variantSemantic.h" line="48" column="9" bodyfile="variantSemantic.h" bodystart="48" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="variantSemantic_8h_1ac600783c9d560fb869253833a446c518" prot="public" static="no">
        <name>TYPE</name>
        <param><defname>type</defname></param>
        <initializer>type,</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="variantSemantic.h" line="53" column="9" bodyfile="variantSemantic.h" bodystart="53" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="variantSemantic_8h_1ac600783c9d560fb869253833a446c518" prot="public" static="no">
        <name>TYPE</name>
        <param><defname>type</defname></param>
        <initializer>case VariableType::type:</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="variantSemantic.h" line="63" column="9" bodyfile="variantSemantic.h" bodystart="53" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="variantSemantic_8h_1ac600783c9d560fb869253833a446c518" prot="public" static="no">
        <name>TYPE</name>
        <param><defname>type</defname></param>
        <initializer>case VariableType::type:</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="variantSemantic.h" line="84" column="9" bodyfile="variantSemantic.h" bodystart="53" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="variantSemantic_8h_1ac600783c9d560fb869253833a446c518" prot="public" static="no">
        <name>TYPE</name>
        <param><defname>type</defname></param>
        <initializer>case VariableType::type:</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="variantSemantic.h" line="105" column="9" bodyfile="variantSemantic.h" bodystart="53" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="variantSemantic_8h_1ac600783c9d560fb869253833a446c518" prot="public" static="no">
        <name>TYPE</name>
        <param><defname>type</defname></param>
        <initializer>{&quot;@&quot; #type, VariableType::type},</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="variantSemantic.h" line="147" column="9" bodyfile="variantSemantic.h" bodystart="53" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/>Copyright<sp/>(C)<sp/>Gaijin<sp/>Games<sp/>KFT.<sp/><sp/>All<sp/>rights<sp/>reserved.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>once</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="shVariantContext_8h" kindref="compound">shVariantContext.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespacesemantic" kindref="compound">semantic</ref></highlight></codeline>
<codeline lineno="7"><highlight class="normal">{</highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight></codeline>
<codeline lineno="9" refid="structsemantic_1_1VarLookupRes" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structsemantic_1_1VarLookupRes" kindref="compound">VarLookupRes</ref></highlight></codeline>
<codeline lineno="10"><highlight class="normal">{</highlight></codeline>
<codeline lineno="11" refid="structsemantic_1_1VarLookupRes_1a5c5e1b5f51d88ebdfc483ffd2fafa357" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="structsemantic_1_1VarLookupRes_1a5c5e1b5f51d88ebdfc483ffd2fafa357" kindref="member">id</ref>;</highlight></codeline>
<codeline lineno="12" refid="structsemantic_1_1VarLookupRes_1a08b1da187fd6b4ad98ab813d008c4b18" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="structsemantic_1_1VarLookupRes_1a08b1da187fd6b4ad98ab813d008c4b18" kindref="member">valType</ref>;</highlight></codeline>
<codeline lineno="13" refid="structsemantic_1_1VarLookupRes_1a95e49d28c9f9b72548eca125ae67d422" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="structsemantic_1_1VarLookupRes_1a95e49d28c9f9b72548eca125ae67d422" kindref="member">isGlobal</ref>;</highlight></codeline>
<codeline lineno="14"><highlight class="normal">};</highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"><ref refid="structsemantic_1_1VarLookupRes" kindref="compound">VarLookupRes</ref><sp/><ref refid="namespacesemantic_1a69d749806268f5b3b7cafa16cab36787" kindref="member">lookup_state_var</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*name,<sp/><ref refid="classshc_1_1VariantContext" kindref="compound">shc::VariantContext</ref><sp/>&amp;ctx,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>allow_not_found<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Terminal<sp/>*t<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight></codeline>
<codeline lineno="18" refid="namespacesemantic_1a9ebdef6c961777963d1b55371f50cf77" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="structsemantic_1_1VarLookupRes" kindref="compound">VarLookupRes</ref><sp/><ref refid="namespacesemantic_1a69d749806268f5b3b7cafa16cab36787" kindref="member">lookup_state_var</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Terminal<sp/>&amp;name_term,<sp/><ref refid="classshc_1_1VariantContext" kindref="compound">shc::VariantContext</ref><sp/>&amp;ctx,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>allow_not_found<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="19"><highlight class="normal">{</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespacesemantic_1a69d749806268f5b3b7cafa16cab36787" kindref="member">lookup_state_var</ref>(name_term.text,<sp/>ctx,<sp/>allow_not_found,<sp/>&amp;name_term);</highlight></codeline>
<codeline lineno="21"><highlight class="normal">}</highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight></codeline>
<codeline lineno="23" refid="classsemantic_1_1VariantBoolExprEvalCB" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classsemantic_1_1VariantBoolExprEvalCB" kindref="compound">VariantBoolExprEvalCB</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classShaderParser_1_1ShaderBoolEvalCB" kindref="compound">ShaderParser::ShaderBoolEvalCB</ref></highlight></codeline>
<codeline lineno="24"><highlight class="normal">{</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/>String<sp/>*curEvalExprErrStr<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><ref refid="classshc_1_1VariantContext" kindref="compound">shc::VariantContext</ref><sp/>&amp;ctx;</highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="29" refid="classsemantic_1_1VariantBoolExprEvalCB_1ac0de7783c0cf7e4c7690db0005e87972" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="classsemantic_1_1VariantBoolExprEvalCB_1ac0de7783c0cf7e4c7690db0005e87972" kindref="member">VariantBoolExprEvalCB</ref>(<ref refid="classshc_1_1VariantContext" kindref="compound">shc::VariantContext</ref><sp/>&amp;a_ctx)<sp/>:<sp/>ctx{a_ctx}<sp/>{}</highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><ref refid="classShVarBool" kindref="compound">ShVarBool</ref><sp/><ref refid="classsemantic_1_1VariantBoolExprEvalCB_1ae0c062f5b1f34d1d8fd6f9a7a2fca859" kindref="member">eval_expr</ref>(bool_expr<sp/>&amp;)<sp/></highlight><highlight class="keyword">override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><ref refid="classShVarBool" kindref="compound">ShVarBool</ref><sp/><ref refid="classsemantic_1_1VariantBoolExprEvalCB_1a9821f354db0ee1de0dc805a201837128" kindref="member">eval_bool_value</ref>(bool_value<sp/>&amp;val)<sp/></highlight><highlight class="keyword">override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="classsemantic_1_1VariantBoolExprEvalCB_1acbd6f09e2484d9927d19f51dc0220747" kindref="member">eval_interval_value</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*ival_name)<sp/></highlight><highlight class="keyword">override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="34" refid="classsemantic_1_1VariantBoolExprEvalCB_1a8ea1c1a892a5b6911982b058dbc93d28" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classsemantic_1_1VariantBoolExprEvalCB_1a8ea1c1a892a5b6911982b058dbc93d28" kindref="member">report_bool_eval_error</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*error)</highlight><highlight class="keyword"><sp/>override<sp/></highlight><highlight class="normal">{<sp/>curEvalExprErrStr-&gt;append(error);<sp/>}</highlight></codeline>
<codeline lineno="35"><highlight class="normal">};</highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal">eastl::optional&lt;ShaderStage&gt;<sp/><ref refid="namespacesemantic_1a86f59efe30e2fc10075f9f9ee14fbd09" kindref="member">parse_state_block_stage</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*stage_str);</highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight></codeline>
<codeline lineno="39" refid="variantSemantic_8h_1a209b8a90b7fa40bbf4c0b21fa43a958f" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>TYPE_LIST_FLOAT()<sp/>TYPE(f1)<sp/>TYPE(f2)<sp/>TYPE(f3)<sp/>TYPE(f4)<sp/>TYPE(f44)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40" refid="variantSemantic_8h_1a9ae252b8c5c8e66e49b3d9ea6043b2dd" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>TYPE_LIST_INT()<sp/><sp/><sp/>TYPE(i1)<sp/>TYPE(i2)<sp/>TYPE(i3)<sp/>TYPE(i4)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41" refid="variantSemantic_8h_1af300d3c8b940e5bb78f56a729ddff2b9" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>TYPE_LIST_UINT()<sp/><sp/>TYPE(u1)<sp/>TYPE(u2)<sp/>TYPE(u3)<sp/>TYPE(u4)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42" refid="variantSemantic_8h_1a440cdf0f91e9d4929750af9986731092" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>TYPE_LIST_BUF()<sp/><sp/><sp/>TYPE(buf)<sp/>TYPE(cbuf)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="43" refid="variantSemantic_8h_1ab9165ea3431579cac54aabba433ce010" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>TYPE_LIST_TEX()<sp/><sp/><sp/>TYPE(tex)<sp/>TYPE(tex2d)<sp/>TYPE(tex3d)<sp/>TYPE(texArray)<sp/>TYPE(texCube)<sp/>TYPE(texCubeArray)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="44" refid="variantSemantic_8h_1a3dd9f8a2c5bca3fbe5ed899910479381" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>TYPE_LIST_SMP()<sp/><sp/><sp/>TYPE(smp)<sp/>TYPE(smp2d)<sp/>TYPE(smp3d)<sp/>TYPE(smpArray)<sp/>TYPE(smpCube)<sp/>TYPE(smpCubeArray)<sp/>TYPE(sampler)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="45" refid="variantSemantic_8h_1aeeb4fe8d7fb340f0dbf7c87d4ca3c482" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>TYPE_LIST_OTHER()<sp/>\</highlight></codeline>
<codeline lineno="46"><highlight class="preprocessor"><sp/><sp/>TYPE(shd)<sp/>TYPE(shdArray)<sp/>TYPE(staticCube)<sp/>TYPE(staticTexArray)<sp/>TYPE(staticTex3D)<sp/>TYPE(staticCubeArray)<sp/>TYPE(uav)<sp/>TYPE(tlas)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight></codeline>
<codeline lineno="48" refid="variantSemantic_8h_1a12d33da3418cfc67c9076ef7353ca50b" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>TYPE_LIST<sp/>TYPE_LIST_FLOAT()<sp/>TYPE_LIST_INT()<sp/>TYPE_LIST_UINT()<sp/>TYPE_LIST_BUF()<sp/>TYPE_LIST_TEX()<sp/>TYPE_LIST_SMP()<sp/>TYPE_LIST_OTHER()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight></codeline>
<codeline lineno="50" refid="namespacesemantic_1a1fd7ba909c618ad56fbacae8b3226182" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">enum<sp/>class</highlight><highlight class="normal"><sp/><ref refid="namespacesemantic_1a1fd7ba909c618ad56fbacae8b3226182" kindref="member">VariableType</ref></highlight></codeline>
<codeline lineno="51"><highlight class="normal">{</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><ref refid="namespacesemantic_1a1fd7ba909c618ad56fbacae8b3226182a88183b946cc5f0e8c96b2e66e1c74a7e" kindref="member">Unknown</ref>,</highlight></codeline>
<codeline lineno="53" refid="variantSemantic_8h_1ac600783c9d560fb869253833a446c518" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>TYPE(type)<sp/>type,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><ref refid="variantSemantic_8h_1a12d33da3418cfc67c9076ef7353ca50b" kindref="member">TYPE_LIST</ref></highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight><highlight class="preprocessor">#undef<sp/>TYPE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacesemantic_1a1fd7ba909c618ad56fbacae8b3226182ab7ae76be005abffc653e7627dc3ac1ee" kindref="member">staticSampler</ref></highlight></codeline>
<codeline lineno="57"><highlight class="normal">};</highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight></codeline>
<codeline lineno="59" refid="namespacesemantic_1a68675013876f05d68c74690f9130e646" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="namespacesemantic_1a68675013876f05d68c74690f9130e646" kindref="member">vt_is_numeric</ref>(<ref refid="namespacesemantic_1a1fd7ba909c618ad56fbacae8b3226182" kindref="member">VariableType</ref><sp/>vt)</highlight></codeline>
<codeline lineno="60"><highlight class="normal">{</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(vt)</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>TYPE(type)<sp/>case<sp/>VariableType::type:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="variantSemantic_8h_1a9ae252b8c5c8e66e49b3d9ea6043b2dd" kindref="member">TYPE_LIST_INT</ref>()</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="variantSemantic_8h_1af300d3c8b940e5bb78f56a729ddff2b9" kindref="member">TYPE_LIST_UINT</ref>()</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="variantSemantic_8h_1a209b8a90b7fa40bbf4c0b21fa43a958f" kindref="member">TYPE_LIST_FLOAT</ref>()</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="variantSemantic_8h_1a440cdf0f91e9d4929750af9986731092" kindref="member">TYPE_LIST_BUF</ref>()</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="variantSemantic_8h_1ab9165ea3431579cac54aabba433ce010" kindref="member">TYPE_LIST_TEX</ref>()</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="variantSemantic_8h_1a3dd9f8a2c5bca3fbe5ed899910479381" kindref="member">TYPE_LIST_SMP</ref>()</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="variantSemantic_8h_1aeeb4fe8d7fb340f0dbf7c87d4ca3c482" kindref="member">TYPE_LIST_OTHER</ref>()</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight><highlight class="preprocessor">#undef<sp/>TYPE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="78"><highlight class="normal">}</highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight></codeline>
<codeline lineno="80" refid="namespacesemantic_1ae504ec94402a1d67ea492cf9b123e02b" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="namespacesemantic_1ae504ec94402a1d67ea492cf9b123e02b" kindref="member">vt_is_integer</ref>(<ref refid="namespacesemantic_1a1fd7ba909c618ad56fbacae8b3226182" kindref="member">VariableType</ref><sp/>vt)</highlight></codeline>
<codeline lineno="81"><highlight class="normal">{</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(vt)</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>TYPE(type)<sp/>case<sp/>VariableType::type:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="variantSemantic_8h_1a9ae252b8c5c8e66e49b3d9ea6043b2dd" kindref="member">TYPE_LIST_INT</ref>()</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="variantSemantic_8h_1af300d3c8b940e5bb78f56a729ddff2b9" kindref="member">TYPE_LIST_UINT</ref>()</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="variantSemantic_8h_1a209b8a90b7fa40bbf4c0b21fa43a958f" kindref="member">TYPE_LIST_FLOAT</ref>()</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="variantSemantic_8h_1a440cdf0f91e9d4929750af9986731092" kindref="member">TYPE_LIST_BUF</ref>()</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="variantSemantic_8h_1ab9165ea3431579cac54aabba433ce010" kindref="member">TYPE_LIST_TEX</ref>()</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="variantSemantic_8h_1a3dd9f8a2c5bca3fbe5ed899910479381" kindref="member">TYPE_LIST_SMP</ref>()</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="variantSemantic_8h_1aeeb4fe8d7fb340f0dbf7c87d4ca3c482" kindref="member">TYPE_LIST_OTHER</ref>()</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight><highlight class="preprocessor">#undef<sp/>TYPE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="99"><highlight class="normal">}</highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight></codeline>
<codeline lineno="101" refid="namespacesemantic_1a7bb2b3bb134f7142cbbb1f9424b61da8" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="namespacesemantic_1a7bb2b3bb134f7142cbbb1f9424b61da8" kindref="member">vt_is_sampled_texture</ref>(<ref refid="namespacesemantic_1a1fd7ba909c618ad56fbacae8b3226182" kindref="member">VariableType</ref><sp/>vt)</highlight></codeline>
<codeline lineno="102"><highlight class="normal">{</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(vt)</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="105"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>TYPE(type)<sp/>case<sp/>VariableType::type:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="variantSemantic_8h_1a3dd9f8a2c5bca3fbe5ed899910479381" kindref="member">TYPE_LIST_SMP</ref>()</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight><highlight class="preprocessor">#undef<sp/>TYPE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="112"><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="114"><highlight class="normal">}</highlight></codeline>
<codeline lineno="115"><highlight class="normal"></highlight></codeline>
<codeline lineno="116" refid="namespacesemantic_1a477f00043c849605a540cfbc6ae679fa" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="namespacesemantic_1a477f00043c849605a540cfbc6ae679fa" kindref="member">vt_is_static_texture</ref>(<ref refid="namespacesemantic_1a1fd7ba909c618ad56fbacae8b3226182" kindref="member">VariableType</ref><sp/>vt)</highlight></codeline>
<codeline lineno="117"><highlight class="normal">{</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>vt<sp/>==<sp/><ref refid="namespacesemantic_1a1fd7ba909c618ad56fbacae8b3226182ab7ae76be005abffc653e7627dc3ac1ee" kindref="member">VariableType::staticSampler</ref><sp/>||<sp/>vt<sp/>==<sp/>VariableType::staticTex3D<sp/>||<sp/>vt<sp/>==<sp/>VariableType::staticCube<sp/>||</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vt<sp/>==<sp/>VariableType::staticCubeArray<sp/>||<sp/>vt<sp/>==<sp/>VariableType::staticTexArray;</highlight></codeline>
<codeline lineno="120"><highlight class="normal">}</highlight></codeline>
<codeline lineno="121"><highlight class="normal"></highlight></codeline>
<codeline lineno="122" refid="namespacesemantic_1ad904cd91752c2bbdd55d5819dbbf7c55" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="namespacesemantic_1ad904cd91752c2bbdd55d5819dbbf7c55" kindref="member">vt_float_size</ref>(<ref refid="namespacesemantic_1a1fd7ba909c618ad56fbacae8b3226182" kindref="member">VariableType</ref><sp/>vt)</highlight></codeline>
<codeline lineno="123"><highlight class="normal">{</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(vt)</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>VariableType::f1:</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>VariableType::i1:</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>VariableType::u1:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>VariableType::f2:</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>VariableType::i2:</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>VariableType::u2:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>2;</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>VariableType::f3:</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>VariableType::i3:</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>VariableType::u3:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>3;</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>VariableType::f4:</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>VariableType::i4:</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>VariableType::u4:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>4;</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>VariableType::f44:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>16;</highlight></codeline>
<codeline lineno="139"><highlight class="normal"></highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:<sp/>G_ASSERT_RETURN(0,<sp/>0);</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="142"><highlight class="normal">}</highlight></codeline>
<codeline lineno="143"><highlight class="normal"></highlight></codeline>
<codeline lineno="144" refid="namespacesemantic_1a26809badc21277913c28bf87a518169e" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="namespacesemantic_1a1fd7ba909c618ad56fbacae8b3226182" kindref="member">VariableType</ref><sp/><ref refid="namespacesemantic_1a26809badc21277913c28bf87a518169e" kindref="member">name_space_to_type</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*name_space)</highlight></codeline>
<codeline lineno="145"><highlight class="normal">{</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>eastl::vector_map&lt;eastl::string_view,<sp/>VariableType&gt;<sp/>var_types<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="147"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>TYPE(type)<sp/>{&quot;@&quot;</highlight><highlight class="normal"><sp/>#type,<sp/>VariableType::type},</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="variantSemantic_8h_1a12d33da3418cfc67c9076ef7353ca50b" kindref="member">TYPE_LIST</ref></highlight></codeline>
<codeline lineno="149"><highlight class="normal"></highlight><highlight class="preprocessor">#undef<sp/>TYPE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight><highlight class="stringliteral">&quot;@static&quot;</highlight><highlight class="normal">,<sp/><ref refid="namespacesemantic_1a1fd7ba909c618ad56fbacae8b3226182ab7ae76be005abffc653e7627dc3ac1ee" kindref="member">VariableType::staticSampler</ref>}};</highlight></codeline>
<codeline lineno="151"><highlight class="normal"></highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>found<sp/>=<sp/>var_types.find(name_space);</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(found<sp/>==<sp/>var_types.end())</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespacesemantic_1a1fd7ba909c618ad56fbacae8b3226182a88183b946cc5f0e8c96b2e66e1c74a7e" kindref="member">VariableType::Unknown</ref>;</highlight></codeline>
<codeline lineno="155"><highlight class="normal"></highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>found-&gt;second;</highlight></codeline>
<codeline lineno="157"><highlight class="normal">}</highlight></codeline>
<codeline lineno="158"><highlight class="normal"></highlight></codeline>
<codeline lineno="159"><highlight class="normal"></highlight><highlight class="preprocessor">#undef<sp/>TYPE_LIST_FLOAT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="160"><highlight class="normal"></highlight><highlight class="preprocessor">#undef<sp/>TYPE_LIST_INT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="161"><highlight class="normal"></highlight><highlight class="preprocessor">#undef<sp/>TYPE_LIST_UINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="162"><highlight class="normal"></highlight><highlight class="preprocessor">#undef<sp/>TYPE_LIST_BUF</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="163"><highlight class="normal"></highlight><highlight class="preprocessor">#undef<sp/>TYPE_LIST_TEX</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="164"><highlight class="normal"></highlight><highlight class="preprocessor">#undef<sp/>TYPE_LIST_SMP</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="165"><highlight class="normal"></highlight><highlight class="preprocessor">#undef<sp/>TYPE_LIST_OTHER</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="166"><highlight class="normal"></highlight><highlight class="preprocessor">#undef<sp/>TYPE_LIST</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="167"><highlight class="normal"></highlight></codeline>
<codeline lineno="168" refid="structsemantic_1_1NamedConstInitializerElement" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structsemantic_1_1NamedConstInitializerElement" kindref="compound">NamedConstInitializerElement</ref></highlight></codeline>
<codeline lineno="169"><highlight class="normal">{</highlight></codeline>
<codeline lineno="170" refid="structsemantic_1_1NamedConstInitializerElement_1aac9b60470a71043a4d02c0208d0406c7" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal"><ref refid="classShaderParser_1_1ComplexExpression" kindref="compound">ArithmeticExpr</ref><sp/>=<sp/><ref refid="classShaderParser_1_1ComplexExpression" kindref="compound">ShaderParser::ComplexExpression</ref>;</highlight></codeline>
<codeline lineno="171" refid="structsemantic_1_1NamedConstInitializerElement_1a0d5cb232589dc25fbc5156cc24f412df" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal"><ref refid="structsemantic_1_1NamedConstInitializerElement_1a0d5cb232589dc25fbc5156cc24f412df" kindref="member">ArithmeticConst</ref><sp/>=<sp/>Color4;</highlight></codeline>
<codeline lineno="172" refid="structsemantic_1_1NamedConstInitializerElement_1_1BuiltinVar" refkind="compound"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structsemantic_1_1NamedConstInitializerElement_1_1BuiltinVar" kindref="compound">BuiltinVar</ref></highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="174" refid="structsemantic_1_1NamedConstInitializerElement_1_1BuiltinVar_1adef44bb0f0cfddf89b75e2500d652e23" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="structsemantic_1_1NamedConstInitializerElement_1_1BuiltinVar_1adef44bb0f0cfddf89b75e2500d652e23" kindref="member">tokNum</ref>;</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="176" refid="structsemantic_1_1NamedConstInitializerElement_1_1VarBase" refkind="compound"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structsemantic_1_1NamedConstInitializerElement_1_1VarBase" kindref="compound">VarBase</ref></highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="178" refid="structsemantic_1_1NamedConstInitializerElement_1_1VarBase_1a75b50df98a899ff8ce51bf80f30a98ee" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="structsemantic_1_1NamedConstInitializerElement_1_1VarBase_1a75b50df98a899ff8ce51bf80f30a98ee" kindref="member">id</ref>;</highlight></codeline>
<codeline lineno="179" refid="structsemantic_1_1NamedConstInitializerElement_1_1VarBase_1a56dccdfa05e50e11febb4812fd51fdcb" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>ShaderVarType<sp/><ref refid="structsemantic_1_1NamedConstInitializerElement_1_1VarBase_1a56dccdfa05e50e11febb4812fd51fdcb" kindref="member">type</ref>;</highlight></codeline>
<codeline lineno="180" refid="structsemantic_1_1NamedConstInitializerElement_1_1VarBase_1a083cc6e1b2b02ba263c43a076664b112" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="structsemantic_1_1NamedConstInitializerElement_1_1VarBase_1a083cc6e1b2b02ba263c43a076664b112" kindref="member">name</ref>;</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="182" refid="structsemantic_1_1NamedConstInitializerElement_1_1MaterialVar" refkind="compound"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structsemantic_1_1NamedConstInitializerElement_1_1MaterialVar" kindref="compound">MaterialVar</ref><sp/>:<sp/><ref refid="structsemantic_1_1NamedConstInitializerElement_1_1VarBase" kindref="compound">VarBase</ref></highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/>{};</highlight></codeline>
<codeline lineno="184" refid="structsemantic_1_1NamedConstInitializerElement_1_1GlobalVar" refkind="compound"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structsemantic_1_1NamedConstInitializerElement_1_1GlobalVar" kindref="compound">GlobalVar</ref><sp/>:<sp/><ref refid="structsemantic_1_1NamedConstInitializerElement_1_1VarBase" kindref="compound">VarBase</ref></highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/>{};</highlight></codeline>
<codeline lineno="186"><highlight class="normal"></highlight></codeline>
<codeline lineno="187" refid="structsemantic_1_1NamedConstInitializerElement_1af160684b647e0387d394b1ce75a11cfa" refkind="member"><highlight class="normal"><sp/><sp/>eastl::variant&lt;ArithmeticExpr,<sp/>ArithmeticConst,<sp/>GlobalVar,<sp/>MaterialVar,<sp/>BuiltinVar&gt;<sp/><ref refid="structsemantic_1_1NamedConstInitializerElement_1af160684b647e0387d394b1ce75a11cfa" kindref="member">value</ref>;</highlight></codeline>
<codeline lineno="188" refid="structsemantic_1_1NamedConstInitializerElement_1a76f671d07429fc35ba4f1229eefc71d9" refkind="member"><highlight class="normal"><sp/><sp/>Symbol<sp/>*<ref refid="structsemantic_1_1NamedConstInitializerElement_1a76f671d07429fc35ba4f1229eefc71d9" kindref="member">symbol</ref>;</highlight></codeline>
<codeline lineno="189"><highlight class="normal"></highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="191" refid="structsemantic_1_1NamedConstInitializerElement_1a23a64d6d469520cb60deaca36c821d6a" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="structsemantic_1_1NamedConstInitializerElement_1a23a64d6d469520cb60deaca36c821d6a" kindref="member">NamedConstInitializerElement</ref>(T<sp/>&amp;&amp;val,<sp/>Symbol<sp/>*<ref refid="structsemantic_1_1NamedConstInitializerElement_1a76f671d07429fc35ba4f1229eefc71d9" kindref="member">symbol</ref>)<sp/>:<sp/><ref refid="structsemantic_1_1NamedConstInitializerElement_1af160684b647e0387d394b1ce75a11cfa" kindref="member">value</ref>{eastl::forward&lt;T&gt;(val)},<sp/><ref refid="structsemantic_1_1NamedConstInitializerElement_1a76f671d07429fc35ba4f1229eefc71d9" kindref="member">symbol</ref>{<ref refid="structsemantic_1_1NamedConstInitializerElement_1a76f671d07429fc35ba4f1229eefc71d9" kindref="member">symbol</ref>}</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/>{}</highlight></codeline>
<codeline lineno="193"><highlight class="normal"></highlight></codeline>
<codeline lineno="194" refid="structsemantic_1_1NamedConstInitializerElement_1ad6d98b63d7f71e581eea89d01e18533c" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="structsemantic_1_1NamedConstInitializerElement_1ad6d98b63d7f71e581eea89d01e18533c" kindref="member">MOVE_ONLY_TYPE</ref>(<ref refid="structsemantic_1_1NamedConstInitializerElement" kindref="compound">NamedConstInitializerElement</ref>);</highlight></codeline>
<codeline lineno="195"><highlight class="normal"></highlight></codeline>
<codeline lineno="196" refid="structsemantic_1_1NamedConstInitializerElement_1ab6d57a5aea9c86e21574fb1d65d32d80" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="structsemantic_1_1NamedConstInitializerElement_1ab6d57a5aea9c86e21574fb1d65d32d80" kindref="member">isArithmExpr</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>eastl::holds_alternative&lt;ArithmeticExpr&gt;(<ref refid="structsemantic_1_1NamedConstInitializerElement_1af160684b647e0387d394b1ce75a11cfa" kindref="member">value</ref>);<sp/>}</highlight></codeline>
<codeline lineno="197" refid="structsemantic_1_1NamedConstInitializerElement_1a40e89972d1bd7ec4db9a96e29f47f854" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="structsemantic_1_1NamedConstInitializerElement_1a40e89972d1bd7ec4db9a96e29f47f854" kindref="member">isArithmConst</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>eastl::holds_alternative&lt;ArithmeticConst&gt;(<ref refid="structsemantic_1_1NamedConstInitializerElement_1af160684b647e0387d394b1ce75a11cfa" kindref="member">value</ref>);<sp/>}</highlight></codeline>
<codeline lineno="198" refid="structsemantic_1_1NamedConstInitializerElement_1a0ab08fac8e11c63def949d4d049afad0" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="structsemantic_1_1NamedConstInitializerElement_1a0ab08fac8e11c63def949d4d049afad0" kindref="member">isGlobalVar</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>eastl::holds_alternative&lt;GlobalVar&gt;(<ref refid="structsemantic_1_1NamedConstInitializerElement_1af160684b647e0387d394b1ce75a11cfa" kindref="member">value</ref>);<sp/>}</highlight></codeline>
<codeline lineno="199" refid="structsemantic_1_1NamedConstInitializerElement_1aaaf0de3c344f286a47b76bc3d1d590d8" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="structsemantic_1_1NamedConstInitializerElement_1aaaf0de3c344f286a47b76bc3d1d590d8" kindref="member">isMaterialVar</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>eastl::holds_alternative&lt;MaterialVar&gt;(<ref refid="structsemantic_1_1NamedConstInitializerElement_1af160684b647e0387d394b1ce75a11cfa" kindref="member">value</ref>);<sp/>}</highlight></codeline>
<codeline lineno="200" refid="structsemantic_1_1NamedConstInitializerElement_1aac51906d4da1a5ce64776922c091492b" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="structsemantic_1_1NamedConstInitializerElement_1aac51906d4da1a5ce64776922c091492b" kindref="member">isBuiltinVar</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>eastl::holds_alternative&lt;BuiltinVar&gt;(<ref refid="structsemantic_1_1NamedConstInitializerElement_1af160684b647e0387d394b1ce75a11cfa" kindref="member">value</ref>);<sp/>}</highlight></codeline>
<codeline lineno="201"><highlight class="normal"></highlight></codeline>
<codeline lineno="202" refid="structsemantic_1_1NamedConstInitializerElement_1a90d542dc8f9d3a7d439692b4212e6251" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="structsemantic_1_1NamedConstInitializerElement_1a90d542dc8f9d3a7d439692b4212e6251" kindref="member">isShVar</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structsemantic_1_1NamedConstInitializerElement_1a0ab08fac8e11c63def949d4d049afad0" kindref="member">isGlobalVar</ref>()<sp/>||<sp/><ref refid="structsemantic_1_1NamedConstInitializerElement_1aaaf0de3c344f286a47b76bc3d1d590d8" kindref="member">isMaterialVar</ref>();<sp/>}</highlight></codeline>
<codeline lineno="203"><highlight class="normal"></highlight></codeline>
<codeline lineno="204" refid="structsemantic_1_1NamedConstInitializerElement_1a49dc6e99f87b0ec00bf2d3eb7d10ae50" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classShaderParser_1_1ComplexExpression" kindref="compound">ArithmeticExpr</ref><sp/>&amp;<ref refid="structsemantic_1_1NamedConstInitializerElement_1a49dc6e99f87b0ec00bf2d3eb7d10ae50" kindref="member">arithmExpr</ref>()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="205"><highlight class="keyword"><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/>G_ASSERT(<ref refid="structsemantic_1_1NamedConstInitializerElement_1ab6d57a5aea9c86e21574fb1d65d32d80" kindref="member">isArithmExpr</ref>());</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>eastl::get&lt;ArithmeticExpr&gt;(<ref refid="structsemantic_1_1NamedConstInitializerElement_1af160684b647e0387d394b1ce75a11cfa" kindref="member">value</ref>);</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="209" refid="structsemantic_1_1NamedConstInitializerElement_1a72941db14d1cb41b7bca52a1ce473ca3" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structsemantic_1_1NamedConstInitializerElement_1a0d5cb232589dc25fbc5156cc24f412df" kindref="member">ArithmeticConst</ref><sp/>&amp;<ref refid="structsemantic_1_1NamedConstInitializerElement_1a72941db14d1cb41b7bca52a1ce473ca3" kindref="member">arithmConst</ref>()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="210"><highlight class="keyword"><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/>G_ASSERT(<ref refid="structsemantic_1_1NamedConstInitializerElement_1a40e89972d1bd7ec4db9a96e29f47f854" kindref="member">isArithmConst</ref>());</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>eastl::get&lt;ArithmeticConst&gt;(<ref refid="structsemantic_1_1NamedConstInitializerElement_1af160684b647e0387d394b1ce75a11cfa" kindref="member">value</ref>);</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="214" refid="structsemantic_1_1NamedConstInitializerElement_1aa78365c5ca396d350accea1f9a9822bc" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="structsemantic_1_1NamedConstInitializerElement_1aa78365c5ca396d350accea1f9a9822bc" kindref="member">globVarId</ref>()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="215"><highlight class="keyword"><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/>G_ASSERT(<ref refid="structsemantic_1_1NamedConstInitializerElement_1a0ab08fac8e11c63def949d4d049afad0" kindref="member">isGlobalVar</ref>());</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>eastl::get&lt;GlobalVar&gt;(<ref refid="structsemantic_1_1NamedConstInitializerElement_1af160684b647e0387d394b1ce75a11cfa" kindref="member">value</ref>).id;</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="219" refid="structsemantic_1_1NamedConstInitializerElement_1a62a3e9a7d630002acf1717cc7d0f483f" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="structsemantic_1_1NamedConstInitializerElement_1a62a3e9a7d630002acf1717cc7d0f483f" kindref="member">materialVarId</ref>()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="220"><highlight class="keyword"><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/>G_ASSERT(<ref refid="structsemantic_1_1NamedConstInitializerElement_1aaaf0de3c344f286a47b76bc3d1d590d8" kindref="member">isMaterialVar</ref>());</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>eastl::get&lt;MaterialVar&gt;(<ref refid="structsemantic_1_1NamedConstInitializerElement_1af160684b647e0387d394b1ce75a11cfa" kindref="member">value</ref>).id;</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="224" refid="structsemantic_1_1NamedConstInitializerElement_1a2d3e477ad74bc6a1400d9f9f6f8181e2" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="structsemantic_1_1NamedConstInitializerElement_1a2d3e477ad74bc6a1400d9f9f6f8181e2" kindref="member">varName</ref>()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="225"><highlight class="keyword"><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/>G_ASSERT(<ref refid="structsemantic_1_1NamedConstInitializerElement_1a0ab08fac8e11c63def949d4d049afad0" kindref="member">isGlobalVar</ref>()<sp/>||<sp/><ref refid="structsemantic_1_1NamedConstInitializerElement_1aaaf0de3c344f286a47b76bc3d1d590d8" kindref="member">isMaterialVar</ref>());</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structsemantic_1_1NamedConstInitializerElement_1a0ab08fac8e11c63def949d4d049afad0" kindref="member">isGlobalVar</ref>()<sp/>?<sp/>eastl::get&lt;GlobalVar&gt;(<ref refid="structsemantic_1_1NamedConstInitializerElement_1af160684b647e0387d394b1ce75a11cfa" kindref="member">value</ref>).name<sp/>:<sp/>eastl::get&lt;MaterialVar&gt;(<ref refid="structsemantic_1_1NamedConstInitializerElement_1af160684b647e0387d394b1ce75a11cfa" kindref="member">value</ref>).name;</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="229" refid="structsemantic_1_1NamedConstInitializerElement_1ab2ff899df3d22246d49ff97adcfc869e" refkind="member"><highlight class="normal"><sp/><sp/>ShaderVarType<sp/><ref refid="structsemantic_1_1NamedConstInitializerElement_1ab2ff899df3d22246d49ff97adcfc869e" kindref="member">varType</ref>()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="230"><highlight class="keyword"><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/>G_ASSERT(<ref refid="structsemantic_1_1NamedConstInitializerElement_1a0ab08fac8e11c63def949d4d049afad0" kindref="member">isGlobalVar</ref>()<sp/>||<sp/><ref refid="structsemantic_1_1NamedConstInitializerElement_1aaaf0de3c344f286a47b76bc3d1d590d8" kindref="member">isMaterialVar</ref>());</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structsemantic_1_1NamedConstInitializerElement_1a0ab08fac8e11c63def949d4d049afad0" kindref="member">isGlobalVar</ref>()<sp/>?<sp/>eastl::get&lt;GlobalVar&gt;(<ref refid="structsemantic_1_1NamedConstInitializerElement_1af160684b647e0387d394b1ce75a11cfa" kindref="member">value</ref>).type<sp/>:<sp/>eastl::get&lt;MaterialVar&gt;(<ref refid="structsemantic_1_1NamedConstInitializerElement_1af160684b647e0387d394b1ce75a11cfa" kindref="member">value</ref>).type;</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="234" refid="structsemantic_1_1NamedConstInitializerElement_1ad45dafd9c499726c13ce832c7a80877f" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="structsemantic_1_1NamedConstInitializerElement_1ad45dafd9c499726c13ce832c7a80877f" kindref="member">builtinVarNum</ref>()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="235"><highlight class="keyword"><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/>G_ASSERT(<ref refid="structsemantic_1_1NamedConstInitializerElement_1aac51906d4da1a5ce64776922c091492b" kindref="member">isBuiltinVar</ref>());</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>eastl::get&lt;BuiltinVar&gt;(<ref refid="structsemantic_1_1NamedConstInitializerElement_1af160684b647e0387d394b1ce75a11cfa" kindref="member">value</ref>).tokNum;</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="239"><highlight class="normal">};</highlight></codeline>
<codeline lineno="240"><highlight class="normal"></highlight></codeline>
<codeline lineno="241"><highlight class="normal"></highlight><highlight class="comment">//<sp/>@TODO:<sp/>maybe<sp/>reorganize<sp/>fields,<sp/>since<sp/>this<sp/>thing<sp/>is<sp/>&gt;cache<sp/>line</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="242" refid="structsemantic_1_1NamedConstDefInfo" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structsemantic_1_1NamedConstDefInfo" kindref="compound">NamedConstDefInfo</ref></highlight></codeline>
<codeline lineno="243"><highlight class="normal">{</highlight></codeline>
<codeline lineno="244" refid="structsemantic_1_1NamedConstDefInfo_1aa07b5d897db7090d1b839783c54a1f81" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="structsemantic_1_1NamedConstDefInfo_1aa07b5d897db7090d1b839783c54a1f81" kindref="member">baseName</ref><sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="245" refid="structsemantic_1_1NamedConstDefInfo_1aa34d1200eefa8c3bfa01ad34fc659012" refkind="member"><highlight class="normal"><sp/><sp/>String<sp/><ref refid="structsemantic_1_1NamedConstDefInfo_1aa34d1200eefa8c3bfa01ad34fc659012" kindref="member">mangledName</ref>{};</highlight></codeline>
<codeline lineno="246"><highlight class="normal"></highlight></codeline>
<codeline lineno="247" refid="structsemantic_1_1NamedConstDefInfo_1a84ea39f76a9f28dad3f3b3f7bbd588f1" refkind="member"><highlight class="normal"><sp/><sp/>Tab&lt;NamedConstInitializerElement&gt;<sp/><ref refid="structsemantic_1_1NamedConstDefInfo_1a84ea39f76a9f28dad3f3b3f7bbd588f1" kindref="member">initializer</ref>{};</highlight></codeline>
<codeline lineno="248" refid="structsemantic_1_1NamedConstDefInfo_1a2538d3254a9a28c20d44a6ea0c2c2e65" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="structsemantic_1_1NamedConstDefInfo_1a2538d3254a9a28c20d44a6ea0c2c2e65" kindref="member">registerSize</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="249" refid="structsemantic_1_1NamedConstDefInfo_1a4dd2bec578ada9674546a932860f1f17" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="structsemantic_1_1NamedConstDefInfo_1a4dd2bec578ada9674546a932860f1f17" kindref="member">arrayElemCount</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="250" refid="structsemantic_1_1NamedConstDefInfo_1aa18633d67a9a9e2c726ad327541a55f7" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="structsemantic_1_1NamedConstDefInfo_1aa18633d67a9a9e2c726ad327541a55f7" kindref="member">hardcodedRegister</ref><sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="251"><highlight class="normal"></highlight></codeline>
<codeline lineno="252" refid="structsemantic_1_1NamedConstDefInfo_1a40a99bfe135ba6f6802136b1389a5aca" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="namespacesemantic_1a1fd7ba909c618ad56fbacae8b3226182" kindref="member">VariableType</ref><sp/><ref refid="structsemantic_1_1NamedConstDefInfo_1a40a99bfe135ba6f6802136b1389a5aca" kindref="member">type</ref>;</highlight></codeline>
<codeline lineno="253" refid="structsemantic_1_1NamedConstDefInfo_1a779da705277912ae2c2cfe818c24c7b0" refkind="member"><highlight class="normal"><sp/><sp/>ShaderVarType<sp/><ref refid="structsemantic_1_1NamedConstDefInfo_1a779da705277912ae2c2cfe818c24c7b0" kindref="member">shvarType</ref><sp/>=<sp/>SHVT_UNKNOWN;</highlight></codeline>
<codeline lineno="254" refid="structsemantic_1_1NamedConstDefInfo_1ad923eec979d61f160ba1fcaa1032894f" refkind="member"><highlight class="normal"><sp/><sp/>ShaderVarTextureType<sp/><ref refid="structsemantic_1_1NamedConstDefInfo_1ad923eec979d61f160ba1fcaa1032894f" kindref="member">shvarTexType</ref><sp/>=<sp/>SHVT_TEX_UNKNOWN;</highlight></codeline>
<codeline lineno="255" refid="structsemantic_1_1NamedConstDefInfo_1a20cadfab62d2fe81e136c3c5b581a030" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="hlslRegisters_8h_1aa3a591153956a0cd6630e2d20870fb9b" kindref="member">HlslRegisterSpace</ref><sp/><ref refid="structsemantic_1_1NamedConstDefInfo_1a20cadfab62d2fe81e136c3c5b581a030" kindref="member">regSpace</ref><sp/>=<sp/><ref refid="hlslRegisters_8h_1aa3a591153956a0cd6630e2d20870fb9bad5745a160a89af61c690124ec02558c2" kindref="member">HLSL_RSPACE_INVALID</ref>;</highlight></codeline>
<codeline lineno="256" refid="structsemantic_1_1NamedConstDefInfo_1a17d28ce51c6f4cd40d3e731e69c63392" refkind="member"><highlight class="normal"><sp/><sp/>ShaderStage<sp/><ref refid="structsemantic_1_1NamedConstDefInfo_1a17d28ce51c6f4cd40d3e731e69c63392" kindref="member">stage</ref>;</highlight></codeline>
<codeline lineno="257"><highlight class="normal"></highlight></codeline>
<codeline lineno="258" refid="structsemantic_1_1NamedConstDefInfo_1a52fd7afc7dff324248e68eb1185143a4" refkind="member"><highlight class="normal"><sp/><sp/>Terminal<sp/>*<ref refid="structsemantic_1_1NamedConstDefInfo_1a52fd7afc7dff324248e68eb1185143a4" kindref="member">varTerm</ref><sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="259" refid="structsemantic_1_1NamedConstDefInfo_1ac71de402da6f259cd1b9f625209853ae" refkind="member"><highlight class="normal"><sp/><sp/>Terminal<sp/>*<ref refid="structsemantic_1_1NamedConstDefInfo_1ac71de402da6f259cd1b9f625209853ae" kindref="member">nameSpaceTerm</ref><sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="260" refid="structsemantic_1_1NamedConstDefInfo_1a0ffb05c784ff92d9b19eb43ebd8e5d2b" refkind="member"><highlight class="normal"><sp/><sp/>Terminal<sp/>*<ref refid="structsemantic_1_1NamedConstDefInfo_1a0ffb05c784ff92d9b19eb43ebd8e5d2b" kindref="member">shaderVarTerm</ref><sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="261" refid="structsemantic_1_1NamedConstDefInfo_1a8db347b8772c7465c68e0d07bec8045e" refkind="member"><highlight class="normal"><sp/><sp/>Terminal<sp/>*<ref refid="structsemantic_1_1NamedConstDefInfo_1a8db347b8772c7465c68e0d07bec8045e" kindref="member">builtinVarTerm</ref><sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="262" refid="structsemantic_1_1NamedConstDefInfo_1af20857d76c9de0988409b6d159444bfc" refkind="member"><highlight class="normal"><sp/><sp/>Terminal<sp/>*<ref refid="structsemantic_1_1NamedConstDefInfo_1af20857d76c9de0988409b6d159444bfc" kindref="member">sizeVarTerm</ref><sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="263" refid="structsemantic_1_1NamedConstDefInfo_1a23c2808d87320936f88c1767cd492a1e" refkind="member"><highlight class="normal"><sp/><sp/>SHTOK_hlsl_text<sp/>*<ref refid="structsemantic_1_1NamedConstDefInfo_1a23c2808d87320936f88c1767cd492a1e" kindref="member">hlsl</ref><sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="264"><highlight class="normal"></highlight></codeline>
<codeline lineno="265" refid="structsemantic_1_1NamedConstDefInfo_1a4e2837802dde1e094a88a8895010fc93" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="structsemantic_1_1NamedConstDefInfo_1a4e2837802dde1e094a88a8895010fc93" kindref="member">bindlessVarId</ref><sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="266"><highlight class="normal"></highlight></codeline>
<codeline lineno="267" refid="structsemantic_1_1NamedConstDefInfo_1aeb9fefcdec41f3f6ad3e13b9b4a41ec1" refkind="member"><highlight class="normal"><sp/><sp/>sampler_decl<sp/>*<ref refid="structsemantic_1_1NamedConstDefInfo_1aeb9fefcdec41f3f6ad3e13b9b4a41ec1" kindref="member">pairSamplerTmpDecl</ref><sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="268" refid="structsemantic_1_1NamedConstDefInfo_1ab6549c450f83058df1a86ae188646adf" refkind="member"><highlight class="normal"><sp/><sp/>String<sp/><ref refid="structsemantic_1_1NamedConstDefInfo_1ab6549c450f83058df1a86ae188646adf" kindref="member">pairSamplerName</ref>{};</highlight></codeline>
<codeline lineno="269" refid="structsemantic_1_1NamedConstDefInfo_1a753999253bf724e84079f91eda852452" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="structsemantic_1_1NamedConstDefInfo_1a753999253bf724e84079f91eda852452" kindref="member">pairSamplerBindSuffix</ref><sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="270"><highlight class="normal"></highlight></codeline>
<codeline lineno="271" refid="structsemantic_1_1NamedConstDefInfo_1ae129b16033d7fdeabf80f748110250a1" refkind="member"><highlight class="normal"><sp/><sp/>Symbol<sp/>*<ref refid="structsemantic_1_1NamedConstDefInfo_1ae129b16033d7fdeabf80f748110250a1" kindref="member">exprWithDynamicAndMaterialTerms</ref><sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="272"><highlight class="normal"></highlight></codeline>
<codeline lineno="273" refid="structsemantic_1_1NamedConstDefInfo_1a1618a590cbf1c99259813de7cb83c29a" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="structsemantic_1_1NamedConstDefInfo_1a1618a590cbf1c99259813de7cb83c29a" kindref="member">isDynamic</ref><sp/>:<sp/>1<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="274" refid="structsemantic_1_1NamedConstDefInfo_1ad1d123b45962d8ebe20a34eddc4fab12" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="structsemantic_1_1NamedConstDefInfo_1ad1d123b45962d8ebe20a34eddc4fab12" kindref="member">isArray</ref><sp/>:<sp/>1<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="275" refid="structsemantic_1_1NamedConstDefInfo_1a263a1698c52462d32bec85c14a4e6dd1" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="structsemantic_1_1NamedConstDefInfo_1a263a1698c52462d32bec85c14a4e6dd1" kindref="member">isBindless</ref><sp/>:<sp/>1<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="276" refid="structsemantic_1_1NamedConstDefInfo_1a4d790db1104a8bf1731013569f5fac4e" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="structsemantic_1_1NamedConstDefInfo_1a4d790db1104a8bf1731013569f5fac4e" kindref="member">pairSamplerIsGlobal</ref><sp/>:<sp/>1<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="277" refid="structsemantic_1_1NamedConstDefInfo_1a747de66f9d463bac25b0582accbbfdf1" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="structsemantic_1_1NamedConstDefInfo_1a747de66f9d463bac25b0582accbbfdf1" kindref="member">pairSamplerIsShadow</ref><sp/>:<sp/>1<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="278" refid="structsemantic_1_1NamedConstDefInfo_1a8fdf3096ebc54b328316c18789aa5ed7" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="structsemantic_1_1NamedConstDefInfo_1a8fdf3096ebc54b328316c18789aa5ed7" kindref="member">hasDynStcodeRelyingOnMaterialParams</ref><sp/>:<sp/>1<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="279"><highlight class="normal"></highlight></codeline>
<codeline lineno="280" refid="structsemantic_1_1NamedConstDefInfo_1a6871a372366521a74c2e99dd0690fc52" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="structsemantic_1_1NamedConstDefInfo_1a6871a372366521a74c2e99dd0690fc52" kindref="member">isHardcodedArray</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structsemantic_1_1NamedConstDefInfo_1aa18633d67a9a9e2c726ad327541a55f7" kindref="member">hardcodedRegister</ref><sp/>&gt;=<sp/>0<sp/>&amp;&amp;<sp/><ref refid="structsemantic_1_1NamedConstDefInfo_1ad1d123b45962d8ebe20a34eddc4fab12" kindref="member">isArray</ref>;<sp/>}</highlight></codeline>
<codeline lineno="281" refid="structsemantic_1_1NamedConstDefInfo_1aa5581e46d56dba52bddebcc9663f2682" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="structsemantic_1_1NamedConstDefInfo_1aa5581e46d56dba52bddebcc9663f2682" kindref="member">isRegularArray</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structsemantic_1_1NamedConstDefInfo_1ad1d123b45962d8ebe20a34eddc4fab12" kindref="member">isArray</ref><sp/>&amp;&amp;<sp/>!<ref refid="structsemantic_1_1NamedConstDefInfo_1a6871a372366521a74c2e99dd0690fc52" kindref="member">isHardcodedArray</ref>();<sp/>}</highlight></codeline>
<codeline lineno="282"><highlight class="normal">};</highlight></codeline>
<codeline lineno="283"><highlight class="normal"></highlight></codeline>
<codeline lineno="284" refid="namespacesemantic_1af126f5a1c2217c70427cbebf8a43a267" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="namespacesemantic_1a1fd7ba909c618ad56fbacae8b3226182" kindref="member">VariableType</ref><sp/><ref refid="namespacesemantic_1af126f5a1c2217c70427cbebf8a43a267" kindref="member">parse_named_const_type</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>state_block_stat<sp/>&amp;state_block)</highlight></codeline>
<codeline lineno="285"><highlight class="normal">{</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/>SHTOK_type_ident<sp/>*ns<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(state_block.var)</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/>ns<sp/>=<sp/>state_block.var-&gt;var-&gt;nameSpace;</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(state_block.arr)</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/>ns<sp/>=<sp/>state_block.arr-&gt;var-&gt;nameSpace;</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(state_block.reg)</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/>ns<sp/>=<sp/>state_block.reg-&gt;var-&gt;nameSpace;</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(state_block.reg_arr)</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/>ns<sp/>=<sp/>state_block.reg_arr-&gt;var-&gt;nameSpace;</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespacesemantic_1a26809badc21277913c28bf87a518169e" kindref="member">name_space_to_type</ref>(ns-&gt;text);</highlight></codeline>
<codeline lineno="296"><highlight class="normal">}</highlight></codeline>
<codeline lineno="297"><highlight class="normal"></highlight></codeline>
<codeline lineno="298"><highlight class="normal">eastl::optional&lt;NamedConstDefInfo&gt;<sp/><ref refid="namespacesemantic_1af0b1e07e31a716f1a8699d9ca402b2a0" kindref="member">parse_named_const_definition</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>state_block_stat<sp/>&amp;state_block,<sp/>ShaderStage<sp/>stage,</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><ref refid="namespacesemantic_1a1fd7ba909c618ad56fbacae8b3226182" kindref="member">VariableType</ref><sp/>vt,<sp/><ref refid="classshc_1_1VariantContext" kindref="compound">shc::VariantContext</ref><sp/>&amp;ctx,<sp/>IMemAlloc<sp/>*tmp_memory<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="300"><highlight class="normal"></highlight></codeline>
<codeline lineno="301" refid="structsemantic_1_1LocalVarDefInfo" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structsemantic_1_1LocalVarDefInfo" kindref="compound">LocalVarDefInfo</ref></highlight></codeline>
<codeline lineno="302"><highlight class="normal">{</highlight></codeline>
<codeline lineno="303" refid="structsemantic_1_1LocalVarDefInfo_1a527e63663e14d98ae38f1e26e04390de" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="structLocalVar" kindref="compound">LocalVar</ref><sp/>*<ref refid="structsemantic_1_1LocalVarDefInfo_1a527e63663e14d98ae38f1e26e04390de" kindref="member">var</ref>;</highlight></codeline>
<codeline lineno="304" refid="structsemantic_1_1LocalVarDefInfo_1a66a7b5d17b2d262945565f782a573950" refkind="member"><highlight class="normal"><sp/><sp/>eastl::unique_ptr&lt;ShaderParser::ComplexExpression&gt;<sp/><ref refid="structsemantic_1_1LocalVarDefInfo_1a66a7b5d17b2d262945565f782a573950" kindref="member">expr</ref>;</highlight></codeline>
<codeline lineno="305"><highlight class="normal">};</highlight></codeline>
<codeline lineno="306"><highlight class="normal"></highlight></codeline>
<codeline lineno="307"><highlight class="normal">eastl::optional&lt;LocalVarDefInfo&gt;<sp/><ref refid="namespacesemantic_1aa7d8cdb06eb014e4ae6ba3205f29b555" kindref="member">parse_local_var_decl</ref>(local_var_decl<sp/>&amp;decl,<sp/><ref refid="classshc_1_1VariantContext" kindref="compound">shc::VariantContext</ref><sp/>&amp;ctx,</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>ignore_color_dimension_mismatch<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>allow_override<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="309"><highlight class="normal"></highlight></codeline>
<codeline lineno="310"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>semantic</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="variantSemantic.h"/>
  </compounddef>
</doxygen>
