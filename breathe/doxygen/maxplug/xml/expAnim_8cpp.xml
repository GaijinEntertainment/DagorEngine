<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.7" xml:lang="en-US">
  <compounddef id="expAnim_8cpp" kind="file" language="C++">
    <compoundname>expAnim.cpp</compoundname>
    <includes local="no">max.h</includes>
    <includes refid="expanim_8h" local="yes">expanim.h</includes>
    <includes refid="dagor_8h" local="yes">dagor.h</includes>
    <includes refid="resource_8h" local="yes">resource.h</includes>
    <incdepgraph>
      <node id="4">
        <label>dagor.h</label>
        <link refid="dagor_8h"/>
      </node>
      <node id="1">
        <label>expAnim.cpp</label>
        <link refid="expAnim_8cpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>expanim.h</label>
        <link refid="expanim_8h"/>
      </node>
      <node id="5">
        <label>resource.h</label>
        <link refid="resource_8h"/>
      </node>
      <node id="2">
        <label>max.h</label>
      </node>
    </incdepgraph>
    <innerclass refid="structTMCache" prot="public">TMCache</innerclass>
      <sectiondef kind="var">
      <memberdef kind="variable" id="expAnim_8cpp_1afa2a135a5d79a1b9b16782f89a26c394" prot="public" static="yes" mutable="no">
        <type>Interval</type>
        <definition>Interval lim</definition>
        <argsstring></argsstring>
        <name>lim</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="expAnim.cpp" line="9" column="17" bodyfile="expAnim.cpp" bodystart="9" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="expAnim_8cpp_1a3752516b7997c1a03d6d0651d0d3f47f" prot="public" static="yes" mutable="no">
        <type>float</type>
        <definition>float ort_thr</definition>
        <argsstring></argsstring>
        <name>ort_thr</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="expAnim.cpp" line="10" column="14" bodyfile="expAnim.cpp" bodystart="10" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="expAnim_8cpp_1a91c71f6a0e98e165f693ac7d75dc42f1" prot="public" static="yes" mutable="no">
        <type>char</type>
        <definition>char _usekeys</definition>
        <argsstring></argsstring>
        <name>_usekeys</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="expAnim.cpp" line="11" column="13" bodyfile="expAnim.cpp" bodystart="11" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="expAnim_8cpp_1a562fea8010dc458493c75cb8f59dfc01" prot="public" static="yes" mutable="no">
        <type>Tab&lt; TimeValue &gt;</type>
        <definition>Tab&lt;TimeValue&gt; ktime</definition>
        <argsstring></argsstring>
        <name>ktime</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="expAnim.cpp" line="13" column="12" bodyfile="expAnim.cpp" bodystart="13" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="expAnim_8cpp_1ad808f53460b016f6845ed62be8b92f4c" prot="public" static="yes" mutable="no">
        <type>Tab&lt; <ref refid="structTMCache" kindref="compound">TMCache</ref> &gt;</type>
        <definition>Tab&lt;TMCache&gt; tmcache</definition>
        <argsstring></argsstring>
        <name>tmcache</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="expAnim.cpp" line="161" column="12" bodyfile="expAnim.cpp" bodystart="161" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="expAnim_8cpp_1a57afa6e1038225537ef9ecb65808d8ec" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>Quat</type>
        <definition>static Quat qadd</definition>
        <argsstring>(Quat a, Quat b)</argsstring>
        <name>qadd</name>
        <param>
          <type>Quat</type>
          <declname>a</declname>
        </param>
        <param>
          <type>Quat</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="expAnim.cpp" line="15" column="20" bodyfile="expAnim.cpp" bodystart="15" bodyend="15"/>
      </memberdef>
      <memberdef kind="function" id="expAnim_8cpp_1a8bc5f96b77c535fed781fecf26885fc1" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>Quat</type>
        <definition>static Quat SLERP</definition>
        <argsstring>(Quat a, Quat b, float t)</argsstring>
        <name>SLERP</name>
        <param>
          <type>Quat</type>
          <declname>a</declname>
        </param>
        <param>
          <type>Quat</type>
          <declname>b</declname>
        </param>
        <param>
          <type>float</type>
          <declname>t</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="expAnim.cpp" line="17" column="20" bodyfile="expAnim.cpp" bodystart="17" bodyend="40"/>
      </memberdef>
      <memberdef kind="function" id="expAnim_8cpp_1a2ae5ab2353adb105767c116b2cd3f36b" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int cmp_time</definition>
        <argsstring>(const void *a, const void *b)</argsstring>
        <name>cmp_time</name>
        <param>
          <type>const void *</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="expAnim.cpp" line="42" column="12" bodyfile="expAnim.cpp" bodystart="42" bodyend="42"/>
      </memberdef>
      <memberdef kind="function" id="expAnim_8cpp_1a9967c23f264145d299aea398596d74c1" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void sort_ktime</definition>
        <argsstring>()</argsstring>
        <name>sort_ktime</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="expAnim.cpp" line="44" column="20" bodyfile="expAnim.cpp" bodystart="44" bodyend="44"/>
      </memberdef>
      <memberdef kind="function" id="expAnim_8cpp_1aef32b13a998e217c5239b1a46e0fd44a" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void add_ktime</definition>
        <argsstring>(TimeValue t)</argsstring>
        <name>add_ktime</name>
        <param>
          <type>TimeValue</type>
          <declname>t</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="expAnim.cpp" line="46" column="20" bodyfile="expAnim.cpp" bodystart="46" bodyend="52"/>
      </memberdef>
      <memberdef kind="function" id="expAnim_8cpp_1a9472be0174fbddf8253a8e1d8828289d" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void calc_cp</definition>
        <argsstring>(PosKey &amp;k0, PosKey &amp;k1, Point3 p13, Point3 p23)</argsstring>
        <name>calc_cp</name>
        <param>
          <type><ref refid="structPosKey" kindref="compound">PosKey</ref> &amp;</type>
          <declname>k0</declname>
        </param>
        <param>
          <type><ref refid="structPosKey" kindref="compound">PosKey</ref> &amp;</type>
          <declname>k1</declname>
        </param>
        <param>
          <type>Point3</type>
          <declname>p13</declname>
        </param>
        <param>
          <type>Point3</type>
          <declname>p23</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="expAnim.cpp" line="54" column="20" bodyfile="expAnim.cpp" bodystart="54" bodyend="58"/>
      </memberdef>
      <memberdef kind="function" id="expAnim_8cpp_1a1fd97171a1606a9c25ec0b898a75ee4f" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void calc_cpi</definition>
        <argsstring>(PosKey &amp;k0, PosKey &amp;k1, Point3 p23)</argsstring>
        <name>calc_cpi</name>
        <param>
          <type><ref refid="structPosKey" kindref="compound">PosKey</ref> &amp;</type>
          <declname>k0</declname>
        </param>
        <param>
          <type><ref refid="structPosKey" kindref="compound">PosKey</ref> &amp;</type>
          <declname>k1</declname>
        </param>
        <param>
          <type>Point3</type>
          <declname>p23</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="expAnim.cpp" line="60" column="20" bodyfile="expAnim.cpp" bodystart="60" bodyend="63"/>
      </memberdef>
      <memberdef kind="function" id="expAnim_8cpp_1afd37747c13891bca5d49f7df2076722f" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void calc_cpo</definition>
        <argsstring>(PosKey &amp;k0, PosKey &amp;k1, Point3 p13)</argsstring>
        <name>calc_cpo</name>
        <param>
          <type><ref refid="structPosKey" kindref="compound">PosKey</ref> &amp;</type>
          <declname>k0</declname>
        </param>
        <param>
          <type><ref refid="structPosKey" kindref="compound">PosKey</ref> &amp;</type>
          <declname>k1</declname>
        </param>
        <param>
          <type>Point3</type>
          <declname>p13</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="expAnim.cpp" line="65" column="20" bodyfile="expAnim.cpp" bodystart="65" bodyend="68"/>
      </memberdef>
      <memberdef kind="function" id="expAnim_8cpp_1a5e4ed28141d077fc74719cea7f40e97a" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void calc_cp</definition>
        <argsstring>(RotKey &amp;k0, RotKey &amp;k1, Quat p13, Quat p23)</argsstring>
        <name>calc_cp</name>
        <param>
          <type><ref refid="structRotKey" kindref="compound">RotKey</ref> &amp;</type>
          <declname>k0</declname>
        </param>
        <param>
          <type><ref refid="structRotKey" kindref="compound">RotKey</ref> &amp;</type>
          <declname>k1</declname>
        </param>
        <param>
          <type>Quat</type>
          <declname>p13</declname>
        </param>
        <param>
          <type>Quat</type>
          <declname>p23</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="expAnim.cpp" line="70" column="20" bodyfile="expAnim.cpp" bodystart="70" bodyend="78"/>
      </memberdef>
      <memberdef kind="function" id="expAnim_8cpp_1aacc9aea059e54debf28969ce4a669775" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void calc_cpi</definition>
        <argsstring>(RotKey &amp;k0, RotKey &amp;k1, Quat p23)</argsstring>
        <name>calc_cpi</name>
        <param>
          <type><ref refid="structRotKey" kindref="compound">RotKey</ref> &amp;</type>
          <declname>k0</declname>
        </param>
        <param>
          <type><ref refid="structRotKey" kindref="compound">RotKey</ref> &amp;</type>
          <declname>k1</declname>
        </param>
        <param>
          <type>Quat</type>
          <declname>p23</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="expAnim.cpp" line="80" column="20" bodyfile="expAnim.cpp" bodystart="80" bodyend="84"/>
      </memberdef>
      <memberdef kind="function" id="expAnim_8cpp_1a2312c5b42fc6404bff3fbd971da03ae1" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void calc_cpo</definition>
        <argsstring>(RotKey &amp;k0, RotKey &amp;k1, Quat p13)</argsstring>
        <name>calc_cpo</name>
        <param>
          <type><ref refid="structRotKey" kindref="compound">RotKey</ref> &amp;</type>
          <declname>k0</declname>
        </param>
        <param>
          <type><ref refid="structRotKey" kindref="compound">RotKey</ref> &amp;</type>
          <declname>k1</declname>
        </param>
        <param>
          <type>Quat</type>
          <declname>p13</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="expAnim.cpp" line="86" column="20" bodyfile="expAnim.cpp" bodystart="86" bodyend="90"/>
      </memberdef>
      <memberdef kind="function" id="expAnim_8cpp_1ab378bb0ca4e071313913dbf4a3b4f10e" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>static bool add_anim_range</definition>
        <argsstring>(Animatable *anim, Interval &amp;rng)</argsstring>
        <name>add_anim_range</name>
        <param>
          <type>Animatable *</type>
          <declname>anim</declname>
        </param>
        <param>
          <type>Interval &amp;</type>
          <declname>rng</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="expAnim.cpp" line="92" column="13" bodyfile="expAnim.cpp" bodystart="92" bodyend="140"/>
      </memberdef>
      <memberdef kind="function" id="expAnim_8cpp_1a5cf62865552580a6e51d5aa1a69e1f63" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>static int is_orthog</definition>
        <argsstring>(Point3 ax, Point3 ay, Point3 az)</argsstring>
        <name>is_orthog</name>
        <param>
          <type>Point3</type>
          <declname>ax</declname>
        </param>
        <param>
          <type>Point3</type>
          <declname>ay</declname>
        </param>
        <param>
          <type>Point3</type>
          <declname>az</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="expAnim.cpp" line="142" column="19" bodyfile="expAnim.cpp" bodystart="142" bodyend="151"/>
      </memberdef>
      <memberdef kind="function" id="expAnim_8cpp_1afedaecf8b7c05db0ab37b950aacaa3b6" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void clear_tmcache</definition>
        <argsstring>()</argsstring>
        <name>clear_tmcache</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="expAnim.cpp" line="163" column="13" bodyfile="expAnim.cpp" bodystart="163" bodyend="163"/>
      </memberdef>
      <memberdef kind="function" id="expAnim_8cpp_1a401bc36546369ee5bdaeeea99d94d3ce" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void interp_tm</definition>
        <argsstring>(TimeValue t, Point3 &amp;p, Quat &amp;q, Point3 &amp;s, ExpTMAnimCB &amp;cb)</argsstring>
        <name>interp_tm</name>
        <param>
          <type>TimeValue</type>
          <declname>t</declname>
        </param>
        <param>
          <type>Point3 &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>Quat &amp;</type>
          <declname>q</declname>
        </param>
        <param>
          <type>Point3 &amp;</type>
          <declname>s</declname>
        </param>
        <param>
          <type><ref refid="classExpTMAnimCB" kindref="compound">ExpTMAnimCB</ref> &amp;</type>
          <declname>cb</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="expAnim.cpp" line="165" column="13" bodyfile="expAnim.cpp" bodystart="165" bodyend="203"/>
      </memberdef>
      <memberdef kind="function" id="expAnim_8cpp_1a749ded6cb3adf95664248478552a9978" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>Matrix3</type>
        <definition>static Matrix3 make_tm</definition>
        <argsstring>(Point3 p, Quat r, Point3 s)</argsstring>
        <name>make_tm</name>
        <param>
          <type>Point3</type>
          <declname>p</declname>
        </param>
        <param>
          <type>Quat</type>
          <declname>r</declname>
        </param>
        <param>
          <type>Point3</type>
          <declname>s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="expAnim.cpp" line="205" column="23" bodyfile="expAnim.cpp" bodystart="205" bodyend="214"/>
      </memberdef>
      <memberdef kind="function" id="expAnim_8cpp_1a54b93c8442d246adbe5bc734605f9c14" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>BOOL</type>
        <definition>static BOOL pos_equal</definition>
        <argsstring>(Point3 a, Point3 b, float t)</argsstring>
        <name>pos_equal</name>
        <param>
          <type>Point3</type>
          <declname>a</declname>
        </param>
        <param>
          <type>Point3</type>
          <declname>b</declname>
        </param>
        <param>
          <type>float</type>
          <declname>t</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="expAnim.cpp" line="216" column="20" bodyfile="expAnim.cpp" bodystart="216" bodyend="222"/>
      </memberdef>
      <memberdef kind="function" id="expAnim_8cpp_1a9f48eb61ec05baf28dda4c86600d3941" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>BOOL</type>
        <definition>static BOOL rot_equal</definition>
        <argsstring>(Quat a, Quat b, float t)</argsstring>
        <name>rot_equal</name>
        <param>
          <type>Quat</type>
          <declname>a</declname>
        </param>
        <param>
          <type>Quat</type>
          <declname>b</declname>
        </param>
        <param>
          <type>float</type>
          <declname>t</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="expAnim.cpp" line="224" column="20" bodyfile="expAnim.cpp" bodystart="224" bodyend="224"/>
      </memberdef>
      <memberdef kind="function" id="expAnim_8cpp_1abe573993c63076b20b621d22acc7faf0" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>BOOL</type>
        <definition>static BOOL scl_equal</definition>
        <argsstring>(Point3 a, Point3 b, float t)</argsstring>
        <name>scl_equal</name>
        <param>
          <type>Point3</type>
          <declname>a</declname>
        </param>
        <param>
          <type>Point3</type>
          <declname>b</declname>
        </param>
        <param>
          <type>float</type>
          <declname>t</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="expAnim.cpp" line="226" column="20" bodyfile="expAnim.cpp" bodystart="226" bodyend="230"/>
      </memberdef>
      <memberdef kind="function" id="expAnim_8cpp_1a478602feace2dde8c30afe472e37fb9b" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>Point3</type>
        <definition>static Point3 interp_seg</definition>
        <argsstring>(PosKey a, PosKey b, TimeValue time)</argsstring>
        <name>interp_seg</name>
        <param>
          <type><ref refid="structPosKey" kindref="compound">PosKey</ref></type>
          <declname>a</declname>
        </param>
        <param>
          <type><ref refid="structPosKey" kindref="compound">PosKey</ref></type>
          <declname>b</declname>
        </param>
        <param>
          <type>TimeValue</type>
          <declname>time</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="expAnim.cpp" line="232" column="22" bodyfile="expAnim.cpp" bodystart="232" bodyend="237"/>
      </memberdef>
      <memberdef kind="function" id="expAnim_8cpp_1a3db5785e7d721e3a5067c0be4a9ffcb9" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>Quat</type>
        <definition>static Quat interp_seg</definition>
        <argsstring>(RotKey a, RotKey b, TimeValue time)</argsstring>
        <name>interp_seg</name>
        <param>
          <type><ref refid="structRotKey" kindref="compound">RotKey</ref></type>
          <declname>a</declname>
        </param>
        <param>
          <type><ref refid="structRotKey" kindref="compound">RotKey</ref></type>
          <declname>b</declname>
        </param>
        <param>
          <type>TimeValue</type>
          <declname>time</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="expAnim.cpp" line="239" column="20" bodyfile="expAnim.cpp" bodystart="239" bodyend="246"/>
      </memberdef>
      <memberdef kind="function" id="expAnim_8cpp_1a0f4dd4c01c79a1c90631729d167bd502" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void make_seg_smooth</definition>
        <argsstring>(PosKey a, PosKey &amp;b, PosKey &amp;c, PosKey d)</argsstring>
        <name>make_seg_smooth</name>
        <param>
          <type><ref refid="structPosKey" kindref="compound">PosKey</ref></type>
          <declname>a</declname>
        </param>
        <param>
          <type><ref refid="structPosKey" kindref="compound">PosKey</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <param>
          <type><ref refid="structPosKey" kindref="compound">PosKey</ref> &amp;</type>
          <declname>c</declname>
        </param>
        <param>
          <type><ref refid="structPosKey" kindref="compound">PosKey</ref></type>
          <declname>d</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="expAnim.cpp" line="248" column="20" bodyfile="expAnim.cpp" bodystart="248" bodyend="257"/>
      </memberdef>
      <memberdef kind="function" id="expAnim_8cpp_1a2b234b795b6e90bfd0bc6617a7d8d3b2" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>float</type>
        <definition>static float quatang</definition>
        <argsstring>(Quat a, Quat b)</argsstring>
        <name>quatang</name>
        <param>
          <type>Quat</type>
          <declname>a</declname>
        </param>
        <param>
          <type>Quat</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="expAnim.cpp" line="259" column="21" bodyfile="expAnim.cpp" bodystart="259" bodyend="265"/>
      </memberdef>
      <memberdef kind="function" id="expAnim_8cpp_1a3fe8d796e89186f9eddeff470da1cffd" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void make_seg_smooth</definition>
        <argsstring>(RotKey a, RotKey &amp;b, RotKey &amp;c, RotKey d)</argsstring>
        <name>make_seg_smooth</name>
        <param>
          <type><ref refid="structRotKey" kindref="compound">RotKey</ref></type>
          <declname>a</declname>
        </param>
        <param>
          <type><ref refid="structRotKey" kindref="compound">RotKey</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <param>
          <type><ref refid="structRotKey" kindref="compound">RotKey</ref> &amp;</type>
          <declname>c</declname>
        </param>
        <param>
          <type><ref refid="structRotKey" kindref="compound">RotKey</ref></type>
          <declname>d</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="expAnim.cpp" line="267" column="20" bodyfile="expAnim.cpp" bodystart="267" bodyend="285"/>
      </memberdef>
      <memberdef kind="function" id="expAnim_8cpp_1a85b4ef97de80b3fcd181c4136ee943a6" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>DWORD WINAPI</type>
        <definition>static DWORD WINAPI dummyfn</definition>
        <argsstring>(LPVOID a)</argsstring>
        <name>dummyfn</name>
        <param>
          <type>LPVOID</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="expAnim.cpp" line="294" column="21" bodyfile="expAnim.cpp" bodystart="294" bodyend="294"/>
      </memberdef>
      <memberdef kind="function" id="expAnim_8cpp_1a99c6952b5556c40842c11abd9dae75cf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool get_tm_anim</definition>
        <argsstring>(Tab&lt; PosKey &gt; &amp;pos, Tab&lt; RotKey &gt; &amp;rot, Tab&lt; PosKey &gt; &amp;scl, Tab&lt; TimeValue &gt; &amp;gkeys, Interval limit, Animatable *ctrl, ExpTMAnimCB &amp;cb, TimeValue mindt, float pos_thr, float rot_thr, float scl_thr, float ort_eps, char usekeys, char usegkeys, char dontchkkeys)</argsstring>
        <name>get_tm_anim</name>
        <param>
          <type>Tab&lt; <ref refid="structPosKey" kindref="compound">PosKey</ref> &gt; &amp;</type>
          <declname>pos</declname>
        </param>
        <param>
          <type>Tab&lt; <ref refid="structRotKey" kindref="compound">RotKey</ref> &gt; &amp;</type>
          <declname>rot</declname>
        </param>
        <param>
          <type>Tab&lt; <ref refid="structPosKey" kindref="compound">PosKey</ref> &gt; &amp;</type>
          <declname>scl</declname>
        </param>
        <param>
          <type>Tab&lt; TimeValue &gt; &amp;</type>
          <declname>gkeys</declname>
        </param>
        <param>
          <type>Interval</type>
          <declname>limit</declname>
        </param>
        <param>
          <type>Animatable *</type>
          <declname>ctrl</declname>
        </param>
        <param>
          <type><ref refid="classExpTMAnimCB" kindref="compound">ExpTMAnimCB</ref> &amp;</type>
          <declname>cb</declname>
        </param>
        <param>
          <type>TimeValue</type>
          <declname>mindt</declname>
        </param>
        <param>
          <type>float</type>
          <declname>pos_thr</declname>
        </param>
        <param>
          <type>float</type>
          <declname>rot_thr</declname>
        </param>
        <param>
          <type>float</type>
          <declname>scl_thr</declname>
        </param>
        <param>
          <type>float</type>
          <declname>ort_eps</declname>
        </param>
        <param>
          <type>char</type>
          <declname>usekeys</declname>
        </param>
        <param>
          <type>char</type>
          <declname>usegkeys</declname>
        </param>
        <param>
          <type>char</type>
          <declname>dontchkkeys</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="expAnim.cpp" line="296" column="6" bodyfile="expAnim.cpp" bodystart="296" bodyend="601"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/>Copyright<sp/>(C)<sp/>Gaijin<sp/>Games<sp/>KFT.<sp/><sp/>All<sp/>rights<sp/>reserved.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;max.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="expanim_8h" kindref="compound">expanim.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="dagor_8h" kindref="compound">dagor.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="resource_8h" kindref="compound">resource.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="comment">//<sp/>#include<sp/>&quot;debug.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>Interval<sp/>lim;</highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>ort_thr;</highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>_usekeys;</highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>Tab&lt;TimeValue&gt;<sp/>ktime;</highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>Quat<sp/>qadd(Quat<sp/>a,<sp/>Quat<sp/>b)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Quat(a.x<sp/>+<sp/>b.x,<sp/>a.y<sp/>+<sp/>b.y,<sp/>a.z<sp/>+<sp/>b.z,<sp/>a.w<sp/>+<sp/>b.w);<sp/>}</highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>Quat<sp/>SLERP(Quat<sp/>a,<sp/>Quat<sp/>b,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>t)</highlight></codeline>
<codeline lineno="18"><highlight class="normal">{</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>f<sp/>=<sp/>a.x<sp/>*<sp/>b.x<sp/>+<sp/>a.y<sp/>*<sp/>b.y<sp/>+<sp/>a.z<sp/>*<sp/>b.z<sp/>+<sp/>a.w<sp/>*<sp/>b.w;</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(f<sp/>&gt;=<sp/>0.9999)</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>qadd(a<sp/>*<sp/>(1<sp/>-<sp/>t),<sp/>b<sp/>*<sp/>t);</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(f<sp/>&lt;=<sp/>-0.9999)</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>qadd(a<sp/>*<sp/>(t<sp/>-<sp/>1),<sp/>b<sp/>*<sp/>t);</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>w<sp/>=<sp/>acosf(f);</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(f<sp/>&gt;=<sp/>0)</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>sinw<sp/>=<sp/>sinf(w);</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>qadd(a<sp/>*<sp/>(sinf(w<sp/>*<sp/>(1<sp/>-<sp/>t))<sp/>/<sp/>sinw),<sp/>b<sp/>*<sp/>(sinf(w<sp/>*<sp/>t)<sp/>/<sp/>sinw));</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/>w<sp/>=<sp/>PI<sp/>-<sp/>w;</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>sinw<sp/>=<sp/>sinf(w);</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>qadd(a<sp/>*<sp/>(-sinf(w<sp/>*<sp/>(1<sp/>-<sp/>t))<sp/>/<sp/>sinw),<sp/>b<sp/>*<sp/>(sinf(w<sp/>*<sp/>t)<sp/>/<sp/>sinw));</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="40"><highlight class="normal">}</highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cmp_time(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*a,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*b)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*(TimeValue<sp/>*)a<sp/>-<sp/>*(TimeValue<sp/>*)b;<sp/>}</highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>sort_ktime()<sp/>{<sp/>ktime.Sort(cmp_time);<sp/>}</highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>add_ktime(TimeValue<sp/>t)</highlight></codeline>
<codeline lineno="47"><highlight class="normal">{</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>ktime.Count();<sp/>++i)</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ktime[i]<sp/>==<sp/>t)</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/>ktime.Append(1,<sp/>&amp;t);</highlight></codeline>
<codeline lineno="52"><highlight class="normal">}</highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>calc_cp(<ref refid="structPosKey" kindref="compound">PosKey</ref><sp/>&amp;k0,<sp/><ref refid="structPosKey" kindref="compound">PosKey</ref><sp/>&amp;k1,<sp/>Point3<sp/>p13,<sp/>Point3<sp/>p23)</highlight></codeline>
<codeline lineno="55"><highlight class="normal">{</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/>k0.<ref refid="structPosKey_1ae2b4416bf124557b30989079008484ee" kindref="member">o</ref><sp/>=<sp/>k0.<ref refid="structPosKey_1a3503f0dc950198c6ec9e937e205da997" kindref="member">p</ref><sp/>*<sp/>(-5.0f<sp/>/<sp/>6.0f)<sp/>+<sp/>k1.<ref refid="structPosKey_1a3503f0dc950198c6ec9e937e205da997" kindref="member">p</ref><sp/>*<sp/>(1.0f<sp/>/<sp/>3.0f)<sp/>+<sp/>p13<sp/>*<sp/>3<sp/>-<sp/>p23<sp/>*<sp/>1.5f;</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/>k1.<ref refid="structPosKey_1a3c4a9d46d6c7a652140bbabecd081f50" kindref="member">i</ref><sp/>=<sp/>k1.<ref refid="structPosKey_1a3503f0dc950198c6ec9e937e205da997" kindref="member">p</ref><sp/>*<sp/>(-5.0f<sp/>/<sp/>6.0f)<sp/>+<sp/>k0.<ref refid="structPosKey_1a3503f0dc950198c6ec9e937e205da997" kindref="member">p</ref><sp/>*<sp/>(1.0f<sp/>/<sp/>3.0f)<sp/>+<sp/>p23<sp/>*<sp/>3<sp/>-<sp/>p13<sp/>*<sp/>1.5f;</highlight></codeline>
<codeline lineno="58"><highlight class="normal">}</highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>calc_cpi(<ref refid="structPosKey" kindref="compound">PosKey</ref><sp/>&amp;k0,<sp/><ref refid="structPosKey" kindref="compound">PosKey</ref><sp/>&amp;k1,<sp/>Point3<sp/>p23)</highlight></codeline>
<codeline lineno="61"><highlight class="normal">{</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/>k1.<ref refid="structPosKey_1a3c4a9d46d6c7a652140bbabecd081f50" kindref="member">i</ref><sp/>=<sp/>k1.<ref refid="structPosKey_1a3503f0dc950198c6ec9e937e205da997" kindref="member">p</ref><sp/>*<sp/>(-2.0f<sp/>/<sp/>3.0f)<sp/>-<sp/>k0.<ref refid="structPosKey_1a3503f0dc950198c6ec9e937e205da997" kindref="member">p</ref><sp/>*<sp/>(1.0f<sp/>/<sp/>12.0f)<sp/>-<sp/>k0.<ref refid="structPosKey_1ae2b4416bf124557b30989079008484ee" kindref="member">o</ref><sp/>*<sp/>0.5f<sp/>+<sp/>p23<sp/>*<sp/>(9.0f<sp/>/<sp/>4.0f);</highlight></codeline>
<codeline lineno="63"><highlight class="normal">}</highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>calc_cpo(<ref refid="structPosKey" kindref="compound">PosKey</ref><sp/>&amp;k0,<sp/><ref refid="structPosKey" kindref="compound">PosKey</ref><sp/>&amp;k1,<sp/>Point3<sp/>p13)</highlight></codeline>
<codeline lineno="66"><highlight class="normal">{</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/>k0.<ref refid="structPosKey_1ae2b4416bf124557b30989079008484ee" kindref="member">o</ref><sp/>=<sp/>k0.<ref refid="structPosKey_1a3503f0dc950198c6ec9e937e205da997" kindref="member">p</ref><sp/>*<sp/>(-2.0f<sp/>/<sp/>3.0f)<sp/>-<sp/>k1.<ref refid="structPosKey_1a3503f0dc950198c6ec9e937e205da997" kindref="member">p</ref><sp/>*<sp/>(1.0f<sp/>/<sp/>12.0f)<sp/>-<sp/>k1.<ref refid="structPosKey_1a3c4a9d46d6c7a652140bbabecd081f50" kindref="member">i</ref><sp/>*<sp/>0.5f<sp/>+<sp/>p13<sp/>*<sp/>(9.0f<sp/>/<sp/>4.0f);</highlight></codeline>
<codeline lineno="68"><highlight class="normal">}</highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>calc_cp(<ref refid="structRotKey" kindref="compound">RotKey</ref><sp/>&amp;k0,<sp/><ref refid="structRotKey" kindref="compound">RotKey</ref><sp/>&amp;k1,<sp/>Quat<sp/>p13,<sp/>Quat<sp/>p23)</highlight></codeline>
<codeline lineno="71"><highlight class="normal">{</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/>Quat<sp/>q0<sp/>=<sp/>SLERP(SLERP(k0.<ref refid="structRotKey_1aabcae9a33d299bc06864e4b0370f1b89" kindref="member">p</ref>,<sp/>k1.<ref refid="structRotKey_1aabcae9a33d299bc06864e4b0370f1b89" kindref="member">p</ref>,<sp/>1.0f<sp/>/<sp/>3.0f),<sp/>p13,<sp/>9.0f<sp/>/<sp/>4.0f);</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/>Quat<sp/>q1<sp/>=<sp/>SLERP(SLERP(k1.<ref refid="structRotKey_1aabcae9a33d299bc06864e4b0370f1b89" kindref="member">p</ref>,<sp/>k0.<ref refid="structRotKey_1aabcae9a33d299bc06864e4b0370f1b89" kindref="member">p</ref>,<sp/>1.0f<sp/>/<sp/>3.0f),<sp/>p23,<sp/>9.0f<sp/>/<sp/>4.0f);</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/>k0.<ref refid="structRotKey_1a2d9e76ec0a9a2031cbc604bda81e22be" kindref="member">o</ref><sp/>=<sp/>SLERP(q0,<sp/>q1,<sp/>-1);</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/>k1.<ref refid="structRotKey_1ad9e68829872fbc8469876aa666ae1525" kindref="member">i</ref><sp/>=<sp/>SLERP(q1,<sp/>q0,<sp/>-1);</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>k0.o=SLERP(SLERP(q0,q1,-1),k1.p,1.0f/3.0f);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>k1.i=SLERP(SLERP(q1,q0,-1),k0.p,1.0f/3.0f);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal">}</highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>calc_cpi(<ref refid="structRotKey" kindref="compound">RotKey</ref><sp/>&amp;k0,<sp/><ref refid="structRotKey" kindref="compound">RotKey</ref><sp/>&amp;k1,<sp/>Quat<sp/>p23)</highlight></codeline>
<codeline lineno="81"><highlight class="normal">{</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/>Quat<sp/>q1<sp/>=<sp/>SLERP(SLERP(k1.<ref refid="structRotKey_1aabcae9a33d299bc06864e4b0370f1b89" kindref="member">p</ref>,<sp/>k0.<ref refid="structRotKey_1aabcae9a33d299bc06864e4b0370f1b89" kindref="member">p</ref>,<sp/>1.0f<sp/>/<sp/>3.0f),<sp/>p23,<sp/>9.0f<sp/>/<sp/>4.0f);</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/>k1.<ref refid="structRotKey_1ad9e68829872fbc8469876aa666ae1525" kindref="member">i</ref><sp/>=<sp/>SLERP(k0.<ref refid="structRotKey_1a2d9e76ec0a9a2031cbc604bda81e22be" kindref="member">o</ref>,<sp/>q1,<sp/>1.5f);</highlight></codeline>
<codeline lineno="84"><highlight class="normal">}</highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>calc_cpo(<ref refid="structRotKey" kindref="compound">RotKey</ref><sp/>&amp;k0,<sp/><ref refid="structRotKey" kindref="compound">RotKey</ref><sp/>&amp;k1,<sp/>Quat<sp/>p13)</highlight></codeline>
<codeline lineno="87"><highlight class="normal">{</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/>Quat<sp/>q0<sp/>=<sp/>SLERP(SLERP(k0.<ref refid="structRotKey_1aabcae9a33d299bc06864e4b0370f1b89" kindref="member">p</ref>,<sp/>k1.<ref refid="structRotKey_1aabcae9a33d299bc06864e4b0370f1b89" kindref="member">p</ref>,<sp/>1.0f<sp/>/<sp/>3.0f),<sp/>p13,<sp/>9.0f<sp/>/<sp/>4.0f);</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/>k0.<ref refid="structRotKey_1a2d9e76ec0a9a2031cbc604bda81e22be" kindref="member">o</ref><sp/>=<sp/>SLERP(k1.<ref refid="structRotKey_1ad9e68829872fbc8469876aa666ae1525" kindref="member">i</ref>,<sp/>q0,<sp/>1.5f);</highlight></codeline>
<codeline lineno="90"><highlight class="normal">}</highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>add_anim_range(Animatable<sp/>*anim,<sp/>Interval<sp/>&amp;rng)</highlight></codeline>
<codeline lineno="93"><highlight class="normal">{</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!anim)</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>DebugPrint(&quot;%X<sp/>sub-anims:<sp/>%d\n&quot;,anim,anim-&gt;NumSubs());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>ok<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>anim-&gt;NumSubs();<sp/>++i)</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(add_anim_range(anim-&gt;SubAnim(i),<sp/>rng))</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ok<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/>Interval<sp/>r;</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>num<sp/>=<sp/>anim-&gt;NumKeys();</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>DebugPrint(&quot;%X<sp/>keys:<sp/>%d\n&quot;,anim,num);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(num<sp/>==<sp/>NOT_KEYFRAMEABLE)</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/>r<sp/>=<sp/>anim-&gt;GetTimeRange(TIMERANGE_ALL);</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(num<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/>r.SetEmpty();</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/>ok<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/>r.Set(anim-&gt;GetKeyTime(0),<sp/>anim-&gt;GetKeyTime(num<sp/>-<sp/>1));</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(_usekeys)</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>1;<sp/>i<sp/>&lt;<sp/>num<sp/>-<sp/>1;<sp/>++i)</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TimeValue<sp/>t<sp/>=<sp/>anim-&gt;GetKeyTime(i);</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(t<sp/>&gt;=<sp/>lim.Start()<sp/>&amp;&amp;<sp/>t<sp/>&lt;=<sp/>lim.End())</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>add_ktime(t);</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/>r<sp/>&amp;=<sp/>lim;</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(r.Empty())</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ok;</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(_usekeys)</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/>add_ktime(r.Start());</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/>add_ktime(r.End());</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(rng.Empty())</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/>rng.Set(r.Start(),<sp/>r.End());</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/>rng<sp/>+=<sp/>r.Start();</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/>rng<sp/>+=<sp/>r.End();</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ok;</highlight></codeline>
<codeline lineno="140"><highlight class="normal">}</highlight></codeline>
<codeline lineno="141"><highlight class="normal"></highlight></codeline>
<codeline lineno="142"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>is_orthog(Point3<sp/>ax,<sp/>Point3<sp/>ay,<sp/>Point3<sp/>az)</highlight></codeline>
<codeline lineno="143"><highlight class="normal">{</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fabsf(DotProd(ax,<sp/>ay))<sp/>&gt;<sp/>ort_thr)</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fabsf(DotProd(ax,<sp/>az))<sp/>&gt;<sp/>ort_thr)</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fabsf(DotProd(ay,<sp/>az))<sp/>&gt;<sp/>ort_thr)</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="151"><highlight class="normal">}</highlight></codeline>
<codeline lineno="152"><highlight class="normal"></highlight></codeline>
<codeline lineno="153" refid="structTMCache" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structTMCache" kindref="compound">TMCache</ref></highlight></codeline>
<codeline lineno="154"><highlight class="normal">{</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/>TimeValue<sp/><ref refid="structTMCache_1a52c506b00d1154df00a3d6e477b5c263" kindref="member">t</ref>;</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/>Point3<sp/><ref refid="structTMCache_1a09b98f070e7ef7874f4c608b1eeba601" kindref="member">p</ref>;</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/>Quat<sp/><ref refid="structTMCache_1a53c533cbc62bef38db234080e047b6a3" kindref="member">r</ref>;</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/>Point3<sp/><ref refid="structTMCache_1a303573e8488111bbb08004812ab16299" kindref="member">s</ref>;</highlight></codeline>
<codeline lineno="159"><highlight class="normal">};</highlight></codeline>
<codeline lineno="160"><highlight class="normal"></highlight></codeline>
<codeline lineno="161"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>Tab&lt;TMCache&gt;<sp/>tmcache;</highlight></codeline>
<codeline lineno="162"><highlight class="normal"></highlight></codeline>
<codeline lineno="163"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>clear_tmcache()<sp/>{<sp/>tmcache.ZeroCount();<sp/>}</highlight></codeline>
<codeline lineno="164"><highlight class="normal"></highlight></codeline>
<codeline lineno="165"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>interp_tm(TimeValue<sp/>t,<sp/>Point3<sp/>&amp;<ref refid="polyBumpUtil_8cpp_1aaa1ebe818ec1c763a776cc580551f3e6" kindref="member">p</ref>,<sp/>Quat<sp/>&amp;q,<sp/>Point3<sp/>&amp;s,<sp/><ref refid="classExpTMAnimCB" kindref="compound">ExpTMAnimCB</ref><sp/>&amp;cb)</highlight></codeline>
<codeline lineno="166"><highlight class="normal">{</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>tmcache.Count();<sp/>++i)</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(tmcache[i].t<sp/>==<sp/>t)</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="polyBumpUtil_8cpp_1aaa1ebe818ec1c763a776cc580551f3e6" kindref="member">p</ref><sp/>=<sp/>tmcache[i].p;</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>q<sp/>=<sp/>tmcache[i].r;</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>s<sp/>=<sp/>tmcache[i].s;</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/>Matrix3<sp/>m;</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/>cb.<ref refid="classExpTMAnimCB_1ae0c42715a97d401a20c33d79513632f8" kindref="member">interp_tm</ref>(t,<sp/>m);</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/>Point3<sp/>ax<sp/>=<sp/>m.GetRow(0),<sp/>ay<sp/>=<sp/>m.GetRow(1),<sp/>az<sp/>=<sp/>m.GetRow(2);</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><ref refid="polyBumpUtil_8cpp_1aaa1ebe818ec1c763a776cc580551f3e6" kindref="member">p</ref><sp/>=<sp/>m.GetRow(3);</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>lx<sp/>=<sp/>Length(ax),<sp/>ly<sp/>=<sp/>Length(ay),<sp/>lz<sp/>=<sp/>Length(az);</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m.Parity())</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/>lz<sp/>=<sp/>-lz;</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/>s<sp/>=<sp/>Point3(lx,<sp/>ly,<sp/>lz);</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(lx<sp/>!=<sp/>0)</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/>m.SetRow(0,<sp/>ax<sp/>/=<sp/>lx);</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ly<sp/>!=<sp/>0)</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/>m.SetRow(1,<sp/>ay<sp/>/=<sp/>ly);</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(lz<sp/>!=<sp/>0)</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/>m.SetRow(2,<sp/>az<sp/>/=<sp/>lz);</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>m.SetRow(3,Point3(0,0,0));</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!is_orthog(ax,<sp/>ay,<sp/>az))</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/>cb.<ref refid="classExpTMAnimCB_1af5f3138f4c485c75b29c1b0026c70b0b" kindref="member">non_orthog_tm</ref>(t);</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/>m.Orthogonalize();</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>m.SetIdentFlags(POS_IDENT|SCL_IDENT);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/>q<sp/>=<sp/>Quat(m);</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><ref refid="structTMCache" kindref="compound">TMCache</ref><sp/>ca;</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/>ca.<ref refid="structTMCache_1a52c506b00d1154df00a3d6e477b5c263" kindref="member">t</ref><sp/>=<sp/>t;</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/>ca.<ref refid="structTMCache_1a09b98f070e7ef7874f4c608b1eeba601" kindref="member">p</ref><sp/>=<sp/><ref refid="polyBumpUtil_8cpp_1aaa1ebe818ec1c763a776cc580551f3e6" kindref="member">p</ref>;</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/>ca.<ref refid="structTMCache_1a53c533cbc62bef38db234080e047b6a3" kindref="member">r</ref><sp/>=<sp/>q;</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/>ca.<ref refid="structTMCache_1a303573e8488111bbb08004812ab16299" kindref="member">s</ref><sp/>=<sp/>s;</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/>tmcache.Append(1,<sp/>&amp;ca,<sp/>100);</highlight></codeline>
<codeline lineno="203"><highlight class="normal">}</highlight></codeline>
<codeline lineno="204"><highlight class="normal"></highlight></codeline>
<codeline lineno="205"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>Matrix3<sp/>make_tm(Point3<sp/><ref refid="polyBumpUtil_8cpp_1aaa1ebe818ec1c763a776cc580551f3e6" kindref="member">p</ref>,<sp/>Quat<sp/>r,<sp/>Point3<sp/>s)</highlight></codeline>
<codeline lineno="206"><highlight class="normal">{</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/>Matrix3<sp/>m(1);</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/>m.Scale(s);</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/>Matrix3<sp/>qm;</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/>r.MakeMatrix(qm);</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/>m<sp/>=<sp/>m<sp/>*<sp/>qm;</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/>m.Translate(<ref refid="polyBumpUtil_8cpp_1aaa1ebe818ec1c763a776cc580551f3e6" kindref="member">p</ref>);</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m;</highlight></codeline>
<codeline lineno="214"><highlight class="normal">}</highlight></codeline>
<codeline lineno="215"><highlight class="normal"></highlight></codeline>
<codeline lineno="216"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>BOOL<sp/>pos_equal(Point3<sp/>a,<sp/>Point3<sp/>b,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>t)</highlight></codeline>
<codeline lineno="217"><highlight class="normal">{</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>d<sp/>=<sp/>LengthSquared(a<sp/>-<sp/>b);</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(d<sp/>&lt;=<sp/>t<sp/>*<sp/>t)</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="222"><highlight class="normal">}</highlight></codeline>
<codeline lineno="223"><highlight class="normal"></highlight></codeline>
<codeline lineno="224"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>BOOL<sp/>rot_equal(Quat<sp/>a,<sp/>Quat<sp/>b,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>t)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>fabsf(a.x<sp/>*<sp/>b.x<sp/>+<sp/>a.y<sp/>*<sp/>b.y<sp/>+<sp/>a.z<sp/>*<sp/>b.z<sp/>+<sp/>a.w<sp/>*<sp/>b.w)<sp/>&gt;=<sp/>t;<sp/>}</highlight></codeline>
<codeline lineno="225"><highlight class="normal"></highlight></codeline>
<codeline lineno="226"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>BOOL<sp/>scl_equal(Point3<sp/>a,<sp/>Point3<sp/>b,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>t)</highlight></codeline>
<codeline lineno="227"><highlight class="normal">{</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>fabsf(a.x<sp/>-<sp/>b.x)<sp/>*<sp/>2<sp/>&lt;=<sp/>t<sp/>*<sp/>(fabsf(a.x)<sp/>+<sp/>fabsf(b.x))<sp/>&amp;&amp;<sp/>fabsf(a.y<sp/>-<sp/>b.y)<sp/>*<sp/>2<sp/>&lt;=<sp/>t<sp/>*<sp/>(fabsf(a.y)<sp/>+<sp/>fabsf(b.y))<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fabsf(a.z<sp/>-<sp/>b.z)<sp/>*<sp/>2<sp/>&lt;=<sp/>t<sp/>*<sp/>(fabsf(a.z)<sp/>+<sp/>fabsf(b.z));</highlight></codeline>
<codeline lineno="230"><highlight class="normal">}</highlight></codeline>
<codeline lineno="231"><highlight class="normal"></highlight></codeline>
<codeline lineno="232"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>Point3<sp/>interp_seg(<ref refid="structPosKey" kindref="compound">PosKey</ref><sp/>a,<sp/><ref refid="structPosKey" kindref="compound">PosKey</ref><sp/>b,<sp/>TimeValue<sp/>time)</highlight></codeline>
<codeline lineno="233"><highlight class="normal">{</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>t<sp/>=<sp/>float(time<sp/>-<sp/>a.<ref refid="structPosKey_1aaf9b66ae39fd7ee284594a277ee9eec9" kindref="member">t</ref>)<sp/>/<sp/>float(b.<ref refid="structPosKey_1aaf9b66ae39fd7ee284594a277ee9eec9" kindref="member">t</ref><sp/>-<sp/>a.<ref refid="structPosKey_1aaf9b66ae39fd7ee284594a277ee9eec9" kindref="member">t</ref>);</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>s<sp/>=<sp/>1<sp/>-<sp/>t;</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>a.<ref refid="structPosKey_1a3503f0dc950198c6ec9e937e205da997" kindref="member">p</ref><sp/>*<sp/>(s<sp/>*<sp/>s<sp/>*<sp/>s)<sp/>+<sp/>a.<ref refid="structPosKey_1ae2b4416bf124557b30989079008484ee" kindref="member">o</ref><sp/>*<sp/>(3<sp/>*<sp/>s<sp/>*<sp/>s<sp/>*<sp/>t)<sp/>+<sp/>b.<ref refid="structPosKey_1a3c4a9d46d6c7a652140bbabecd081f50" kindref="member">i</ref><sp/>*<sp/>(3<sp/>*<sp/>s<sp/>*<sp/>t<sp/>*<sp/>t)<sp/>+<sp/>b.<ref refid="structPosKey_1a3503f0dc950198c6ec9e937e205da997" kindref="member">p</ref><sp/>*<sp/>(t<sp/>*<sp/>t<sp/>*<sp/>t);</highlight></codeline>
<codeline lineno="237"><highlight class="normal">}</highlight></codeline>
<codeline lineno="238"><highlight class="normal"></highlight></codeline>
<codeline lineno="239"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>Quat<sp/>interp_seg(<ref refid="structRotKey" kindref="compound">RotKey</ref><sp/>a,<sp/><ref refid="structRotKey" kindref="compound">RotKey</ref><sp/>b,<sp/>TimeValue<sp/>time)</highlight></codeline>
<codeline lineno="240"><highlight class="normal">{</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>t<sp/>=<sp/>float(time<sp/>-<sp/>a.<ref refid="structRotKey_1a01935b0e6de647c19e43a66e2b544175" kindref="member">t</ref>)<sp/>/<sp/>float(b.<ref refid="structRotKey_1a01935b0e6de647c19e43a66e2b544175" kindref="member">t</ref><sp/>-<sp/>a.<ref refid="structRotKey_1a01935b0e6de647c19e43a66e2b544175" kindref="member">t</ref>);</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>SLERP(SLERP(a.<ref refid="structRotKey_1aabcae9a33d299bc06864e4b0370f1b89" kindref="member">p</ref>,<sp/>b.<ref refid="structRotKey_1aabcae9a33d299bc06864e4b0370f1b89" kindref="member">p</ref>,<sp/>t),<sp/>SLERP(a.<ref refid="structRotKey_1a2d9e76ec0a9a2031cbc604bda81e22be" kindref="member">o</ref>,<sp/>b.<ref refid="structRotKey_1ad9e68829872fbc8469876aa666ae1525" kindref="member">i</ref>,<sp/>t),<sp/>2<sp/>*<sp/>(1<sp/>-<sp/>t)<sp/>*<sp/>t);</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/><sp/><sp/>Quat<sp/>q1=SLERP(a.o,b.i,t);</highlight></codeline>
<codeline lineno="244"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>SLERP(SLERP(SLERP(a.p,a.o,t),q1,t),SLERP(q1,SLERP(b.i,b.p,t),t),t);</highlight></codeline>
<codeline lineno="245"><highlight class="comment"><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="246"><highlight class="normal">}</highlight></codeline>
<codeline lineno="247"><highlight class="normal"></highlight></codeline>
<codeline lineno="248"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>make_seg_smooth(<ref refid="structPosKey" kindref="compound">PosKey</ref><sp/>a,<sp/><ref refid="structPosKey" kindref="compound">PosKey</ref><sp/>&amp;b,<sp/><ref refid="structPosKey" kindref="compound">PosKey</ref><sp/>&amp;c,<sp/><ref refid="structPosKey" kindref="compound">PosKey</ref><sp/>d)</highlight></codeline>
<codeline lineno="249"><highlight class="normal">{</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>l<sp/>=<sp/>Length(c.<ref refid="structPosKey_1a3503f0dc950198c6ec9e937e205da997" kindref="member">p</ref><sp/>-<sp/>b.<ref refid="structPosKey_1a3503f0dc950198c6ec9e937e205da997" kindref="member">p</ref>);</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/>Point3<sp/>t<sp/>=<sp/>c.<ref refid="structPosKey_1a3503f0dc950198c6ec9e937e205da997" kindref="member">p</ref><sp/>-<sp/>a.<ref refid="structPosKey_1a3503f0dc950198c6ec9e937e205da997" kindref="member">p</ref>;</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>tl<sp/>=<sp/>Length(t);</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/>b.<ref refid="structPosKey_1ae2b4416bf124557b30989079008484ee" kindref="member">o</ref><sp/>=<sp/>b.<ref refid="structPosKey_1a3503f0dc950198c6ec9e937e205da997" kindref="member">p</ref><sp/>+<sp/>t<sp/>*<sp/>(l<sp/>/<sp/>(tl<sp/>*<sp/>3));</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/>t<sp/>=<sp/>d.p<sp/>-<sp/>b.<ref refid="structRotKey_1aabcae9a33d299bc06864e4b0370f1b89" kindref="member">p</ref>;</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/>tl<sp/>=<sp/>Length(t);</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/>c.i<sp/>=<sp/>c.p<sp/>-<sp/>t<sp/>*<sp/>(l<sp/>/<sp/>(tl<sp/>*<sp/>3));</highlight></codeline>
<codeline lineno="257"><highlight class="normal">}</highlight></codeline>
<codeline lineno="258"><highlight class="normal"></highlight></codeline>
<codeline lineno="259"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>quatang(Quat<sp/>a,<sp/>Quat<sp/>b)</highlight></codeline>
<codeline lineno="260"><highlight class="normal">{</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>f<sp/>=<sp/>fabsf(a.x<sp/>*<sp/>b.x<sp/>+<sp/>a.y<sp/>*<sp/>b.y<sp/>+<sp/>a.z<sp/>*<sp/>b.z<sp/>+<sp/>a.w<sp/>*<sp/>b.w);</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(f<sp/>&gt;=<sp/>1)</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>acosf(f);</highlight></codeline>
<codeline lineno="265"><highlight class="normal">}</highlight></codeline>
<codeline lineno="266"><highlight class="normal"></highlight></codeline>
<codeline lineno="267"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>make_seg_smooth(<ref refid="structRotKey" kindref="compound">RotKey</ref><sp/>a,<sp/><ref refid="structRotKey" kindref="compound">RotKey</ref><sp/>&amp;b,<sp/><ref refid="structRotKey" kindref="compound">RotKey</ref><sp/>&amp;c,<sp/><ref refid="structRotKey" kindref="compound">RotKey</ref><sp/>d)</highlight></codeline>
<codeline lineno="268"><highlight class="normal">{</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>l<sp/>=<sp/>quatang(b.<ref refid="structRotKey_1aabcae9a33d299bc06864e4b0370f1b89" kindref="member">p</ref>,<sp/>c.<ref refid="structRotKey_1aabcae9a33d299bc06864e4b0370f1b89" kindref="member">p</ref>);</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/>Quat<sp/>cp<sp/>=<sp/>SLERP(SLERP(b.<ref refid="structRotKey_1aabcae9a33d299bc06864e4b0370f1b89" kindref="member">p</ref>,<sp/>a.<ref refid="structRotKey_1aabcae9a33d299bc06864e4b0370f1b89" kindref="member">p</ref>,<sp/>-1.0f<sp/>/<sp/>3.0f),<sp/>SLERP(b.<ref refid="structRotKey_1aabcae9a33d299bc06864e4b0370f1b89" kindref="member">p</ref>,<sp/>c.<ref refid="structRotKey_1aabcae9a33d299bc06864e4b0370f1b89" kindref="member">p</ref>,<sp/>1.0f<sp/>/<sp/>3.0f),<sp/>0.5f);</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>tl<sp/>=<sp/>quatang(b.<ref refid="structRotKey_1aabcae9a33d299bc06864e4b0370f1b89" kindref="member">p</ref>,<sp/>cp);</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(tl<sp/>!=<sp/>0)</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/>cp<sp/>=<sp/>SLERP(b.<ref refid="structRotKey_1aabcae9a33d299bc06864e4b0370f1b89" kindref="member">p</ref>,<sp/>cp,<sp/>l<sp/>/<sp/>(tl<sp/>*<sp/>3));</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/>cp<sp/>=<sp/>b.<ref refid="structRotKey_1aabcae9a33d299bc06864e4b0370f1b89" kindref="member">p</ref>;</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/>b.<ref refid="structRotKey_1a2d9e76ec0a9a2031cbc604bda81e22be" kindref="member">o</ref><sp/>=<sp/>SLERP(cp,<sp/>c.<ref refid="structRotKey_1aabcae9a33d299bc06864e4b0370f1b89" kindref="member">p</ref>,<sp/>-0.5f);</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/>cp<sp/>=<sp/>SLERP(SLERP(c.<ref refid="structRotKey_1aabcae9a33d299bc06864e4b0370f1b89" kindref="member">p</ref>,<sp/>b.<ref refid="structRotKey_1aabcae9a33d299bc06864e4b0370f1b89" kindref="member">p</ref>,<sp/>-1.0f<sp/>/<sp/>3.0f),<sp/>SLERP(c.<ref refid="structRotKey_1aabcae9a33d299bc06864e4b0370f1b89" kindref="member">p</ref>,<sp/>d.<ref refid="structRotKey_1aabcae9a33d299bc06864e4b0370f1b89" kindref="member">p</ref>,<sp/>1.0f<sp/>/<sp/>3.0f),<sp/>0.5f);</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/>cp<sp/>=<sp/>SLERP(c.<ref refid="structRotKey_1aabcae9a33d299bc06864e4b0370f1b89" kindref="member">p</ref>,<sp/>cp,<sp/>-1);</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/>tl<sp/>=<sp/>quatang(c.<ref refid="structRotKey_1aabcae9a33d299bc06864e4b0370f1b89" kindref="member">p</ref>,<sp/>cp);</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(tl<sp/>!=<sp/>0)</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/>cp<sp/>=<sp/>SLERP(c.<ref refid="structRotKey_1aabcae9a33d299bc06864e4b0370f1b89" kindref="member">p</ref>,<sp/>cp,<sp/>l<sp/>/<sp/>(tl<sp/>*<sp/>3));</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/>cp<sp/>=<sp/>c.<ref refid="structRotKey_1aabcae9a33d299bc06864e4b0370f1b89" kindref="member">p</ref>;</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/>c.<ref refid="structRotKey_1ad9e68829872fbc8469876aa666ae1525" kindref="member">i</ref><sp/>=<sp/>SLERP(cp,<sp/>b.<ref refid="structRotKey_1aabcae9a33d299bc06864e4b0370f1b89" kindref="member">p</ref>,<sp/>-0.5f);</highlight></codeline>
<codeline lineno="285"><highlight class="normal">}</highlight></codeline>
<codeline lineno="286"><highlight class="normal"></highlight></codeline>
<codeline lineno="287"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="288"><highlight class="comment">static<sp/>inline<sp/>void<sp/>make_seg_smooth(RotKey<sp/>a,RotKey<sp/>&amp;b,RotKey<sp/>&amp;c,RotKey<sp/>d)<sp/>{</highlight></codeline>
<codeline lineno="289"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>b.o=b.p;</highlight></codeline>
<codeline lineno="290"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c.i=c.p;</highlight></codeline>
<codeline lineno="291"><highlight class="comment">}</highlight></codeline>
<codeline lineno="292"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="293"><highlight class="normal"></highlight></codeline>
<codeline lineno="294"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>DWORD<sp/>WINAPI<sp/>dummyfn(LPVOID<sp/>a)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;<sp/>}</highlight></codeline>
<codeline lineno="295"><highlight class="normal"></highlight></codeline>
<codeline lineno="296"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="expAnim_8cpp_1a99c6952b5556c40842c11abd9dae75cf" kindref="member">get_tm_anim</ref>(Tab&lt;PosKey&gt;<sp/>&amp;pos,<sp/>Tab&lt;RotKey&gt;<sp/>&amp;rot,<sp/>Tab&lt;PosKey&gt;<sp/>&amp;scl,<sp/>Tab&lt;TimeValue&gt;<sp/>&amp;gkeys,<sp/>Interval<sp/>limit,<sp/>Animatable<sp/>*ctrl,</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><ref refid="classExpTMAnimCB" kindref="compound">ExpTMAnimCB</ref><sp/>&amp;cb,<sp/>TimeValue<sp/>mindt,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>pos_thr,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>rot_thr,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>scl_thr,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>ort_eps,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>usekeys,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>usegkeys,</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>dontchkkeys)</highlight></codeline>
<codeline lineno="299"><highlight class="normal">{</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/>_usekeys<sp/>=<sp/>usekeys;</highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/>ort_thr<sp/>=<sp/>ort_eps;</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/>lim<sp/>=<sp/>limit;</highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/>ktime.ZeroCount();</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/>clear_tmcache();</highlight></codeline>
<codeline lineno="305"><highlight class="normal"></highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>DebugPrint(&quot;%d..%d\n&quot;,lim.Start(),lim.End());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/>{<sp/></highlight><highlight class="comment">//<sp/>find<sp/>anim<sp/>range</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/>Interval<sp/>rng;</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/>rng.SetEmpty();</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!add_anim_range(ctrl,<sp/>rng))</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>dontchkkeys<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="313"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if(rng.Empty())<sp/>{</highlight></codeline>
<codeline lineno="314"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if(lim.Start()!=TIME_NegInfinity)<sp/>rng.SetInstant(lim.Start());</highlight></codeline>
<codeline lineno="315"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>else<sp/>rng.SetInstant(0);</highlight></codeline>
<codeline lineno="316"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="317"><highlight class="comment"><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!rng.Empty())</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>lim<sp/>&amp;=<sp/>rng;</highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>DebugPrint(&quot;%d..%d\n&quot;,lim.Start(),lim.End());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(usegkeys)</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/>{<sp/></highlight><highlight class="comment">//<sp/>add<sp/>global<sp/>keys</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>kb<sp/>=<sp/>0,<sp/>ka<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>gkeys.Count();<sp/>++i)</highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>DebugPrint(&quot;gkey[%d]=%d\n&quot;,i,gkeys[i]);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(gkeys[i]<sp/>&lt;<sp/>lim.Start())</highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>kb<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(gkeys[i]<sp/>&gt;<sp/>lim.End())</highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ka<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>add_ktime(gkeys[i]);</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(kb)</highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>add_ktime(lim.Start());</highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ka)</highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>add_ktime(lim.End());</highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(lim.Start()<sp/>==<sp/>TIME_NegInfinity)</highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/>lim.SetInstant(0);</highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>DebugPrint(&quot;%d..%d\n&quot;,lim.Start(),lim.End());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(lim.Start()<sp/>==<sp/>lim.End())</highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><sp/><sp/>add_ktime(lim.Start());</highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ktime.Count()<sp/>&lt;<sp/>2)</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/>add_ktime(lim.Start());</highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/><sp/>add_ktime(lim.End());</highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/>sort_ktime();</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>debug(&quot;lim:<sp/>%d<sp/>%d&quot;,lim.Start()/GetTicksPerFrame(),lim.End()/GetTicksPerFrame());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="352"><highlight class="normal"></highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/>pos.SetCount(ktime.Count());</highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/>rot.SetCount(ktime.Count());</highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/>scl.SetCount(ktime.Count());</highlight></codeline>
<codeline lineno="356"><highlight class="normal"></highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/>pos[0].t<sp/>=<sp/>rot[0].t<sp/>=<sp/>scl[0].t<sp/>=<sp/>ktime[0];</highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/>pos[0].f<sp/>=<sp/>rot[0].f<sp/>=<sp/>scl[0].f<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/>interp_tm(ktime[0],<sp/>pos[0].<ref refid="polyBumpUtil_8cpp_1aaa1ebe818ec1c763a776cc580551f3e6" kindref="member">p</ref>,<sp/>rot[0].<ref refid="polyBumpUtil_8cpp_1aaa1ebe818ec1c763a776cc580551f3e6" kindref="member">p</ref>,<sp/>scl[0].<ref refid="polyBumpUtil_8cpp_1aaa1ebe818ec1c763a776cc580551f3e6" kindref="member">p</ref>,<sp/>cb);</highlight></codeline>
<codeline lineno="360"><highlight class="normal"></highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ktime.Count()<sp/>==<sp/>1)</highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/>assert(ktime.Count()<sp/>&gt;<sp/>1);</highlight></codeline>
<codeline lineno="364"><highlight class="normal"></highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/>Interface<sp/>*ip<sp/>=<sp/>GetCOREInterface();</highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/>ip-&gt;ProgressStart((TCHAR<sp/>*)cb.<ref refid="classExpTMAnimCB_1a7d8141f5773d9d46f76cbb0231e55089" kindref="member">get_name</ref>(),<sp/>FALSE,<sp/>dummyfn,<sp/>NULL);</highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/>ip-&gt;ProgressUpdate(0,<sp/>FALSE,<sp/>_T(</highlight><highlight class="stringliteral">&quot;initial<sp/>keys&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="368"><highlight class="normal"></highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>set<sp/>up<sp/>keys<sp/>and<sp/>segments</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>1;<sp/>i<sp/>&lt;<sp/>ktime.Count();<sp/>++i)</highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/><sp/><sp/>pos[i].t<sp/>=<sp/>rot[i].t<sp/>=<sp/>scl[i].t<sp/>=<sp/>ktime[i];</highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/><sp/><sp/>pos[i].f<sp/>=<sp/>rot[i].f<sp/>=<sp/>scl[i].f<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/><sp/><sp/>interp_tm(ktime[i],<sp/>pos[i].<ref refid="polyBumpUtil_8cpp_1aaa1ebe818ec1c763a776cc580551f3e6" kindref="member">p</ref>,<sp/>rot[i].<ref refid="polyBumpUtil_8cpp_1aaa1ebe818ec1c763a776cc580551f3e6" kindref="member">p</ref>,<sp/>scl[i].<ref refid="polyBumpUtil_8cpp_1aaa1ebe818ec1c763a776cc580551f3e6" kindref="member">p</ref>,<sp/>cb);</highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><sp/><sp/>Point3<sp/>p0,<sp/>p1,<sp/>s0,<sp/>s1;</highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/><sp/><sp/>Quat<sp/>r0,<sp/>r1;</highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/><sp/><sp/>TimeValue<sp/>tt<sp/>=<sp/>(ktime[i]<sp/>-<sp/>ktime[i<sp/>-<sp/>1])<sp/>/<sp/>3;</highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(tt<sp/>&lt;=<sp/>0)</highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>tt<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/><sp/><sp/>interp_tm(ktime[i<sp/>-<sp/>1]<sp/>+<sp/>tt,<sp/>p0,<sp/>r0,<sp/>s0,<sp/>cb);</highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/><sp/><sp/>interp_tm(ktime[i]<sp/>-<sp/>tt,<sp/>p1,<sp/>r1,<sp/>s1,<sp/>cb);</highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/><sp/><sp/>calc_cp(pos[i<sp/>-<sp/>1],<sp/>pos[i],<sp/>p0,<sp/>p1);</highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/><sp/><sp/>calc_cp(rot[i<sp/>-<sp/>1],<sp/>rot[i],<sp/>r0,<sp/>r1);</highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/><sp/><sp/>calc_cp(scl[i<sp/>-<sp/>1],<sp/>scl[i],<sp/>s0,<sp/>s1);</highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/>pos[0].i<sp/>=<sp/>pos[0].p<sp/>*<sp/>2<sp/>-<sp/>pos[0].o;</highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/>rot[0].i<sp/>=<sp/>SLERP(rot[0].<ref refid="polyBumpUtil_8cpp_1aaa1ebe818ec1c763a776cc580551f3e6" kindref="member">p</ref>,<sp/>rot[0].o,<sp/>-1);</highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/>scl[0].i<sp/>=<sp/>scl[0].p<sp/>*<sp/>2<sp/>-<sp/>scl[0].o;</highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/>i<sp/>=<sp/>ktime.Count()<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/>pos[i].o<sp/>=<sp/>pos[i].p<sp/>*<sp/>2<sp/>-<sp/>pos[i].i;</highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/>rot[i].o<sp/>=<sp/>SLERP(rot[i].<ref refid="polyBumpUtil_8cpp_1aaa1ebe818ec1c763a776cc580551f3e6" kindref="member">p</ref>,<sp/>rot[i].i,<sp/>-1);</highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/>scl[i].o<sp/>=<sp/>scl[i].p<sp/>*<sp/>2<sp/>-<sp/>scl[i].i;</highlight></codeline>
<codeline lineno="394"><highlight class="normal"></highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/>ip-&gt;ProgressUpdate(0,<sp/>FALSE,<sp/>_T(</highlight><highlight class="stringliteral">&quot;about&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="396"><highlight class="normal"></highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>check<sp/>segments</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!dontchkkeys)</highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>1;<sp/>i<sp/>&lt;<sp/>ktime.Count();<sp/>++i)</highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>TSTR<sp/>str;</highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>str.printf(_T(</highlight><highlight class="stringliteral">&quot;%d/%d&quot;</highlight><highlight class="normal">),<sp/>i,<sp/>ktime.Count()<sp/>-<sp/>1);</highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ip-&gt;ProgressUpdate(i<sp/>*<sp/>100<sp/>/<sp/>ktime.Count(),<sp/>FALSE,<sp/>str);</highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ip-&gt;GetCancel())</highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>poseq<sp/>=<sp/>1,<sp/>roteq<sp/>=<sp/>1,<sp/>scleq<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>TimeValue<sp/>tstep<sp/>=<sp/>mindt<sp/>/<sp/>2;</highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(tstep<sp/>&lt;=<sp/>0)</highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tstep<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cnt<sp/>=<sp/>0,<sp/>cnti<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ktime.Count()<sp/>==<sp/>2)</highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cnti<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(TimeValue<sp/>t<sp/>=<sp/>ktime[i<sp/>-<sp/>1]<sp/>+<sp/>tstep;<sp/>t<sp/>&lt;<sp/>ktime[i];<sp/>t<sp/>+=<sp/>tstep,<sp/>cnt<sp/>+=<sp/>cnti)</highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cnt<sp/>&gt;=<sp/>30)</highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cnt<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ip-&gt;ProgressUpdate((t<sp/>-<sp/>ktime[i<sp/>-<sp/>1])<sp/>*<sp/>100<sp/>/<sp/>(ktime[i]<sp/>-<sp/>ktime[i<sp/>-<sp/>1]),<sp/>FALSE,<sp/>str);</highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ip-&gt;GetCancel())</highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Point3<sp/><ref refid="polyBumpUtil_8cpp_1aaa1ebe818ec1c763a776cc580551f3e6" kindref="member">p</ref>,<sp/>s;</highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Quat<sp/>r;</highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>interp_tm(t,<sp/><ref refid="polyBumpUtil_8cpp_1aaa1ebe818ec1c763a776cc580551f3e6" kindref="member">p</ref>,<sp/>r,<sp/>s,<sp/>cb);</highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!pos_equal(<ref refid="polyBumpUtil_8cpp_1aaa1ebe818ec1c763a776cc580551f3e6" kindref="member">p</ref>,<sp/>interp_seg(pos[i<sp/>-<sp/>1],<sp/>pos[i],<sp/>t),<sp/>pos_thr))</highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>poseq<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!rot_equal(r,<sp/>interp_seg(rot[i<sp/>-<sp/>1],<sp/>rot[i],<sp/>t),<sp/>rot_thr))</highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>roteq<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!scl_equal(s,<sp/>interp_seg(scl[i<sp/>-<sp/>1],<sp/>scl[i],<sp/>t),<sp/>scl_thr))</highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>scleq<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!poseq<sp/>&amp;&amp;<sp/>!roteq<sp/>&amp;&amp;<sp/>!scleq)</highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ip-&gt;GetCancel())</highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!poseq<sp/>||<sp/>!roteq<sp/>||<sp/>!scleq)</highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TimeValue<sp/>dt<sp/>=<sp/>(ktime[i]<sp/>-<sp/>ktime[i<sp/>-<sp/>1])<sp/>/<sp/>2;</highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(dt<sp/>&lt;<sp/>mindt)</highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!poseq)</highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>make_seg_smooth(pos[i<sp/>&gt;<sp/>1<sp/>?<sp/>i<sp/>-<sp/>2<sp/>:<sp/>0],<sp/>pos[i<sp/>-<sp/>1],<sp/>pos[i],<sp/>pos[i<sp/>+<sp/>1<sp/>&lt;<sp/>ktime.Count()<sp/>?<sp/>i<sp/>+<sp/>1<sp/>:<sp/>i]);</highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!roteq)</highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>make_seg_smooth(rot[i<sp/>&gt;<sp/>1<sp/>?<sp/>i<sp/>-<sp/>2<sp/>:<sp/>0],<sp/>rot[i<sp/>-<sp/>1],<sp/>rot[i],<sp/>rot[i<sp/>+<sp/>1<sp/>&lt;<sp/>ktime.Count()<sp/>?<sp/>i<sp/>+<sp/>1<sp/>:<sp/>i]);</highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!scleq)</highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>make_seg_smooth(scl[i<sp/>&gt;<sp/>1<sp/>?<sp/>i<sp/>-<sp/>2<sp/>:<sp/>0],<sp/>scl[i<sp/>-<sp/>1],<sp/>scl[i],<sp/>scl[i<sp/>+<sp/>1<sp/>&lt;<sp/>ktime.Count()<sp/>?<sp/>i<sp/>+<sp/>1<sp/>:<sp/>i]);</highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dt<sp/>-=<sp/>dt<sp/>%<sp/>mindt;</highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TimeValue<sp/>t<sp/>=<sp/>ktime[i<sp/>-<sp/>1]<sp/>+<sp/>dt;</highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Point3<sp/>p0,<sp/>p1,<sp/>s0,<sp/>s1;</highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Quat<sp/>r0,<sp/>r1;</highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>interp_tm(t,<sp/>p0,<sp/>r0,<sp/>s0,<sp/>cb);</highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ktime.Insert(i,<sp/>1,<sp/>&amp;t);</highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structPosKey" kindref="compound">PosKey</ref><sp/>pk;</highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pk.<ref refid="structPosKey_1aaf9b66ae39fd7ee284594a277ee9eec9" kindref="member">t</ref><sp/>=<sp/>t;</highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pk.<ref refid="structPosKey_1afe32b8ac7aec0ad6af12a4d7b41fbc0b" kindref="member">f</ref><sp/>=<sp/>poseq;</highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pk.<ref refid="structPosKey_1a3503f0dc950198c6ec9e937e205da997" kindref="member">p</ref><sp/>=<sp/>p0;</highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pos.Insert(i,<sp/>1,<sp/>&amp;pk);</highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structRotKey" kindref="compound">RotKey</ref><sp/>rk;</highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rk.<ref refid="structRotKey_1a01935b0e6de647c19e43a66e2b544175" kindref="member">t</ref><sp/>=<sp/>t;</highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rk.<ref refid="structRotKey_1a063b3f003b449fd36af29dd302e6c480" kindref="member">f</ref><sp/>=<sp/>roteq;</highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rk.<ref refid="structRotKey_1aabcae9a33d299bc06864e4b0370f1b89" kindref="member">p</ref><sp/>=<sp/>r0;</highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rot.Insert(i,<sp/>1,<sp/>&amp;rk);</highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structPosKey" kindref="compound">PosKey</ref><sp/>sk;</highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sk.<ref refid="structPosKey_1aaf9b66ae39fd7ee284594a277ee9eec9" kindref="member">t</ref><sp/>=<sp/>t;</highlight></codeline>
<codeline lineno="467"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sk.<ref refid="structPosKey_1afe32b8ac7aec0ad6af12a4d7b41fbc0b" kindref="member">f</ref><sp/>=<sp/>scleq;</highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sk.<ref refid="structPosKey_1a3503f0dc950198c6ec9e937e205da997" kindref="member">p</ref><sp/>=<sp/>s0;</highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>scl.Insert(i,<sp/>1,<sp/>&amp;sk);</highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TimeValue<sp/>tt<sp/>=<sp/>floorf(dt<sp/>/<sp/>3.0f);</highlight></codeline>
<codeline lineno="471"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(tt<sp/>&lt;=<sp/>0)</highlight></codeline>
<codeline lineno="472"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tt<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>interp_tm(ktime[i<sp/>-<sp/>1]<sp/>+<sp/>tt,<sp/>p0,<sp/>r0,<sp/>s0,<sp/>cb);</highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>interp_tm(t<sp/>-<sp/>tt,<sp/>p1,<sp/>r1,<sp/>s1,<sp/>cb);</highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>calc_cp(pos[i<sp/>-<sp/>1],<sp/>pos[i],<sp/>p0,<sp/>p1);</highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>calc_cp(rot[i<sp/>-<sp/>1],<sp/>rot[i],<sp/>r0,<sp/>r1);</highlight></codeline>
<codeline lineno="477"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>calc_cp(scl[i<sp/>-<sp/>1],<sp/>scl[i],<sp/>s0,<sp/>s1);</highlight></codeline>
<codeline lineno="478"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tt<sp/>=<sp/>floorf((ktime[i<sp/>+<sp/>1]<sp/>-<sp/>t)<sp/>/<sp/>3.0f);</highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(tt<sp/>&lt;=<sp/>0)</highlight></codeline>
<codeline lineno="480"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tt<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>interp_tm(t<sp/>+<sp/>tt,<sp/>p0,<sp/>r0,<sp/>s0,<sp/>cb);</highlight></codeline>
<codeline lineno="482"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>interp_tm(ktime[i<sp/>+<sp/>1]<sp/>-<sp/>tt,<sp/>p1,<sp/>r1,<sp/>s1,<sp/>cb);</highlight></codeline>
<codeline lineno="483"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>calc_cp(pos[i],<sp/>pos[i<sp/>+<sp/>1],<sp/>p0,<sp/>p1);</highlight></codeline>
<codeline lineno="484"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>calc_cp(rot[i],<sp/>rot[i<sp/>+<sp/>1],<sp/>r0,<sp/>r1);</highlight></codeline>
<codeline lineno="485"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>calc_cp(scl[i],<sp/>scl[i<sp/>+<sp/>1],<sp/>s0,<sp/>s1);</highlight></codeline>
<codeline lineno="486"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>--i;</highlight></codeline>
<codeline lineno="487"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="488"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="489"><highlight class="normal"></highlight></codeline>
<codeline lineno="490"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ip-&gt;GetCancel())</highlight></codeline>
<codeline lineno="491"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/><sp/><sp/><sp/>ip-&gt;ProgressEnd();</highlight></codeline>
<codeline lineno="493"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="495"><highlight class="normal"></highlight></codeline>
<codeline lineno="496"><highlight class="normal"><sp/><sp/>ip-&gt;ProgressEnd();</highlight></codeline>
<codeline lineno="497"><highlight class="normal"></highlight></codeline>
<codeline lineno="498"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="499"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>for(i=1;i&lt;ktime.Count();++i)<sp/>{</highlight></codeline>
<codeline lineno="500"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>make_seg_smooth(pos[i&gt;1?i-2:0],pos[i-1],pos[i],pos[i+1&lt;ktime.Count()?i+1:i]);</highlight></codeline>
<codeline lineno="501"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>make_seg_smooth(rot[i&gt;1?i-2:0],rot[i-1],rot[i],rot[i+1&lt;ktime.Count()?i+1:i]);</highlight></codeline>
<codeline lineno="502"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>make_seg_smooth(scl[i&gt;1?i-2:0],scl[i-1],scl[i],scl[i+1&lt;ktime.Count()?i+1:i]);</highlight></codeline>
<codeline lineno="503"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="504"><highlight class="comment"><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="505"><highlight class="normal"></highlight></codeline>
<codeline lineno="506"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>reduce<sp/>keys</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="507"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>ok;</highlight></codeline>
<codeline lineno="508"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="509"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="510"><highlight class="normal"><sp/><sp/><sp/><sp/>ok<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="511"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>1;<sp/>i<sp/>&lt;<sp/>pos.Count()<sp/>-<sp/>1;)</highlight></codeline>
<codeline lineno="512"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pos[i].f)</highlight></codeline>
<codeline lineno="513"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="514"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pos.Delete(i,<sp/>1);</highlight></codeline>
<codeline lineno="515"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ok<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="516"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="517"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>else{</highlight></codeline>
<codeline lineno="518"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Point3<sp/>p=interp_seg(pos[i-1],pos[i+1],pos[i].t);</highlight></codeline>
<codeline lineno="519"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if(pos_equal(p,pos[i].p,pos_thr))<sp/>{pos.Delete(i,1);ok=1;}</highlight></codeline>
<codeline lineno="520"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="521"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="522"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++i;</highlight></codeline>
<codeline lineno="523"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="524"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(ok);</highlight></codeline>
<codeline lineno="525"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pos.Count()<sp/>==<sp/>2)</highlight></codeline>
<codeline lineno="526"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="527"><highlight class="normal"><sp/><sp/><sp/><sp/>TimeValue<sp/>dt<sp/>=<sp/>pos[1].t<sp/>-<sp/>pos[0].t;</highlight></codeline>
<codeline lineno="528"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>1;<sp/>i<sp/>&lt;=<sp/>5;<sp/>++i)</highlight></codeline>
<codeline lineno="529"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="530"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Point3<sp/><ref refid="polyBumpUtil_8cpp_1aaa1ebe818ec1c763a776cc580551f3e6" kindref="member">p</ref><sp/>=<sp/>interp_seg(pos[0],<sp/>pos[1],<sp/>dt<sp/>*<sp/>i<sp/>/<sp/>5<sp/>+<sp/>pos[0].t);</highlight></codeline>
<codeline lineno="531"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!pos_equal(<ref refid="polyBumpUtil_8cpp_1aaa1ebe818ec1c763a776cc580551f3e6" kindref="member">p</ref>,<sp/>pos[0].<ref refid="polyBumpUtil_8cpp_1aaa1ebe818ec1c763a776cc580551f3e6" kindref="member">p</ref>,<sp/>pos_thr))</highlight></codeline>
<codeline lineno="532"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="533"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="534"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i<sp/>&gt;<sp/>5)</highlight></codeline>
<codeline lineno="535"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>pos.Delete(1,<sp/>1);</highlight></codeline>
<codeline lineno="536"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="537"><highlight class="normal"></highlight></codeline>
<codeline lineno="538"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="539"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="540"><highlight class="normal"><sp/><sp/><sp/><sp/>ok<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="541"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>1;<sp/>i<sp/>&lt;<sp/>rot.Count()<sp/>-<sp/>1;)</highlight></codeline>
<codeline lineno="542"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(rot[i].f)</highlight></codeline>
<codeline lineno="543"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="544"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rot.Delete(i,<sp/>1);</highlight></codeline>
<codeline lineno="545"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ok<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="546"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="547"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>else{</highlight></codeline>
<codeline lineno="548"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Quat<sp/>p=interp_seg(rot[i-1],rot[i+1],rot[i].t);</highlight></codeline>
<codeline lineno="549"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if(rot_equal(p,rot[i].p,rot_thr))<sp/>{rot.Delete(i,1);ok=1;}</highlight></codeline>
<codeline lineno="550"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="551"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="552"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++i;</highlight></codeline>
<codeline lineno="553"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="554"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(ok);</highlight></codeline>
<codeline lineno="555"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(rot.Count()<sp/>==<sp/>2)</highlight></codeline>
<codeline lineno="556"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="557"><highlight class="normal"><sp/><sp/><sp/><sp/>TimeValue<sp/>dt<sp/>=<sp/>rot[1].t<sp/>-<sp/>rot[0].t;</highlight></codeline>
<codeline lineno="558"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>1;<sp/>i<sp/>&lt;=<sp/>5;<sp/>++i)</highlight></codeline>
<codeline lineno="559"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="560"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Quat<sp/><ref refid="polyBumpUtil_8cpp_1aaa1ebe818ec1c763a776cc580551f3e6" kindref="member">p</ref><sp/>=<sp/>interp_seg(rot[0],<sp/>rot[1],<sp/>dt<sp/>*<sp/>i<sp/>/<sp/>5<sp/>+<sp/>rot[0].t);</highlight></codeline>
<codeline lineno="561"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!rot_equal(<ref refid="polyBumpUtil_8cpp_1aaa1ebe818ec1c763a776cc580551f3e6" kindref="member">p</ref>,<sp/>rot[0].<ref refid="polyBumpUtil_8cpp_1aaa1ebe818ec1c763a776cc580551f3e6" kindref="member">p</ref>,<sp/>rot_thr))</highlight></codeline>
<codeline lineno="562"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="563"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="564"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i<sp/>&gt;<sp/>5)</highlight></codeline>
<codeline lineno="565"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>rot.Delete(1,<sp/>1);</highlight></codeline>
<codeline lineno="566"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="567"><highlight class="normal"></highlight></codeline>
<codeline lineno="568"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="569"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="570"><highlight class="normal"><sp/><sp/><sp/><sp/>ok<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="571"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>1;<sp/>i<sp/>&lt;<sp/>scl.Count()<sp/>-<sp/>1;)</highlight></codeline>
<codeline lineno="572"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(scl[i].f)</highlight></codeline>
<codeline lineno="573"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="574"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>scl.Delete(i,<sp/>1);</highlight></codeline>
<codeline lineno="575"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ok<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="576"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="577"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>else{</highlight></codeline>
<codeline lineno="578"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Point3<sp/>p=interp_seg(scl[i-1],scl[i+1],scl[i].t);</highlight></codeline>
<codeline lineno="579"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if(scl_equal(p,scl[i].p,scl_thr))<sp/>{scl.Delete(i,1);ok=1;}</highlight></codeline>
<codeline lineno="580"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="581"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="582"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++i;</highlight></codeline>
<codeline lineno="583"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="584"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(ok);</highlight></codeline>
<codeline lineno="585"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(scl.Count()<sp/>==<sp/>2)</highlight></codeline>
<codeline lineno="586"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="587"><highlight class="normal"><sp/><sp/><sp/><sp/>TimeValue<sp/>dt<sp/>=<sp/>scl[1].t<sp/>-<sp/>scl[0].t;</highlight></codeline>
<codeline lineno="588"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>1;<sp/>i<sp/>&lt;=<sp/>5;<sp/>++i)</highlight></codeline>
<codeline lineno="589"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="590"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Point3<sp/><ref refid="polyBumpUtil_8cpp_1aaa1ebe818ec1c763a776cc580551f3e6" kindref="member">p</ref><sp/>=<sp/>interp_seg(scl[0],<sp/>scl[1],<sp/>dt<sp/>*<sp/>i<sp/>/<sp/>5<sp/>+<sp/>scl[0].t);</highlight></codeline>
<codeline lineno="591"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!scl_equal(<ref refid="polyBumpUtil_8cpp_1aaa1ebe818ec1c763a776cc580551f3e6" kindref="member">p</ref>,<sp/>scl[0].<ref refid="polyBumpUtil_8cpp_1aaa1ebe818ec1c763a776cc580551f3e6" kindref="member">p</ref>,<sp/>scl_thr))</highlight></codeline>
<codeline lineno="592"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="593"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="594"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i<sp/>&gt;<sp/>5)</highlight></codeline>
<codeline lineno="595"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>scl.Delete(1,<sp/>1);</highlight></codeline>
<codeline lineno="596"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="597"><highlight class="normal"></highlight></codeline>
<codeline lineno="598"><highlight class="normal"><sp/><sp/>clear_tmcache();</highlight></codeline>
<codeline lineno="599"><highlight class="normal"></highlight></codeline>
<codeline lineno="600"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="601"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="expAnim.cpp"/>
  </compounddef>
</doxygen>
