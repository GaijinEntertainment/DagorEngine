<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.7" xml:lang="en-US">
  <compounddef id="milkShapeAnimImport_8cpp" kind="file" language="C++">
    <compoundname>milkShapeAnimImport.cpp</compoundname>
    <includes local="no">max.h</includes>
    <includes local="no">maxscrpt/maxscrpt.h</includes>
    <includes local="no">locale.h</includes>
    <includes refid="dagor_8h" local="yes">dagor.h</includes>
    <includes refid="resource_8h" local="yes">resource.h</includes>
    <includes refid="debug_8h" local="yes">debug.h</includes>
    <includes local="no">string</includes>
    <incdepgraph>
      <node id="5">
        <label>dagor.h</label>
        <link refid="dagor_8h"/>
      </node>
      <node id="7">
        <label>debug.h</label>
        <link refid="debug_8h"/>
      </node>
      <node id="1">
        <label>milkShapeAnimImport.cpp</label>
        <link refid="milkShapeAnimImport_8cpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>resource.h</label>
        <link refid="resource_8h"/>
      </node>
      <node id="4">
        <label>locale.h</label>
      </node>
      <node id="2">
        <label>max.h</label>
      </node>
      <node id="3">
        <label>maxscrpt/maxscrpt.h</label>
      </node>
      <node id="8">
        <label>string</label>
      </node>
    </incdepgraph>
    <innerclass refid="structMilkshapeKey" prot="public">MilkshapeKey</innerclass>
    <innerclass refid="structMilkshapeAnimTrack" prot="public">MilkshapeAnimTrack</innerclass>
    <innerclass refid="structMilkshapeNodeAnim" prot="public">MilkshapeNodeAnim</innerclass>
      <sectiondef kind="var">
      <memberdef kind="variable" id="milkShapeAnimImport_8cpp_1a02ca9442bf45927ec90d509c076d3701" prot="public" static="yes" mutable="no">
        <type>TCHAR</type>
        <definition>TCHAR importFilename[256]</definition>
        <argsstring>[256]</argsstring>
        <name>importFilename</name>
        <initializer>= _T(&quot;F:\\SETUPS\\Graphics\\MilkShape\\ascii\\Walk_Forward.txt&quot;)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="milkShapeAnimImport.cpp" line="22" column="14" bodyfile="milkShapeAnimImport.cpp" bodystart="22" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="milkShapeAnimImport_8cpp_1ac9fb07f5e9a035c1eca78f6428d9a590" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="max__cpt_8h_1aac8fc27342213a2c8f99bf3ed5a11a2a" kindref="member">M_STD_STRING</ref></type>
        <definition>M_STD_STRING strToWide</definition>
        <argsstring>(const char *sz)</argsstring>
        <name>strToWide</name>
        <param>
          <type>const char *</type>
          <declname>sz</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="milkShapeAnimImport.cpp" line="18" column="14" bodyfile="common.cpp" bodystart="99" bodyend="112" declfile="milkShapeAnimImport.cpp" declline="18" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="milkShapeAnimImport_8cpp_1a9247db5a252f97c6442d08793a38a1d4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string wideToStr</definition>
        <argsstring>(const TCHAR *sw)</argsstring>
        <name>wideToStr</name>
        <param>
          <type>const TCHAR *</type>
          <declname>sw</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="milkShapeAnimImport.cpp" line="19" column="13" bodyfile="common.cpp" bodystart="115" bodyend="129" declfile="milkShapeAnimImport.cpp" declline="19" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="milkShapeAnimImport_8cpp_1a71c39472400b6843bf6907f7366144d9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool inputFilename</definition>
        <argsstring>(HWND hpanel)</argsstring>
        <name>inputFilename</name>
        <param>
          <type>HWND</type>
          <declname>hpanel</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="milkShapeAnimImport.cpp" line="25" column="6" bodyfile="milkShapeAnimImport.cpp" bodystart="25" bodyend="56"/>
      </memberdef>
      <memberdef kind="function" id="milkShapeAnimImport_8cpp_1a0910948b10221f31c631e5156b591df1" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void tabPrintf</definition>
        <argsstring>(Tab&lt; TCHAR &gt; &amp;tab, const TCHAR *fmt,...)</argsstring>
        <name>tabPrintf</name>
        <param>
          <type>Tab&lt; TCHAR &gt; &amp;</type>
          <declname>tab</declname>
        </param>
        <param>
          <type>const TCHAR *</type>
          <declname>fmt</declname>
        </param>
        <param>
          <type>...</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="milkShapeAnimImport.cpp" line="59" column="13" bodyfile="milkShapeAnimImport.cpp" bodystart="59" bodyend="73"/>
      </memberdef>
      <memberdef kind="function" id="milkShapeAnimImport_8cpp_1acb33ae081833633408b64fcaaeb19c22" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>Quat</type>
        <definition>static Quat qadd</definition>
        <argsstring>(const Quat &amp;a, const Quat &amp;b)</argsstring>
        <name>qadd</name>
        <param>
          <type>const Quat &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const Quat &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="milkShapeAnimImport.cpp" line="90" column="20" bodyfile="milkShapeAnimImport.cpp" bodystart="90" bodyend="95"/>
      </memberdef>
      <memberdef kind="function" id="milkShapeAnimImport_8cpp_1ab1d14af3f76f4b255db553861a12964a" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>Quat</type>
        <definition>static Quat SLERP</definition>
        <argsstring>(const Quat &amp;a, const Quat &amp;b, float t)</argsstring>
        <name>SLERP</name>
        <param>
          <type>const Quat &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const Quat &amp;</type>
          <declname>b</declname>
        </param>
        <param>
          <type>float</type>
          <declname>t</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="milkShapeAnimImport.cpp" line="97" column="20" bodyfile="milkShapeAnimImport.cpp" bodystart="97" bodyend="120"/>
      </memberdef>
      <memberdef kind="function" id="milkShapeAnimImport_8cpp_1a3d503cab83f5a2fd7a646503b0149330" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void import_milkshape_anim</definition>
        <argsstring>(Interface *ip, HWND hpanel)</argsstring>
        <name>import_milkshape_anim</name>
        <param>
          <type>Interface *</type>
          <declname>ip</declname>
        </param>
        <param>
          <type>HWND</type>
          <declname>hpanel</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="milkShapeAnimImport.cpp" line="173" column="6" bodyfile="milkShapeAnimImport.cpp" bodystart="173" bodyend="444"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/>Copyright<sp/>(C)<sp/>Gaijin<sp/>Games<sp/>KFT.<sp/><sp/>All<sp/>rights<sp/>reserved.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;max.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(MAX_RELEASE_R14)<sp/>&amp;&amp;<sp/>MAX_RELEASE<sp/>&gt;=<sp/>MAX_RELEASE_R14</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;maxScript/maxScript.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;maxscrpt/maxscrpt.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;locale.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="dagor_8h" kindref="compound">dagor.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="resource_8h" kindref="compound">resource.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="debug_8h" kindref="compound">debug.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"><ref refid="max__cpt_8h_1aac8fc27342213a2c8f99bf3ed5a11a2a" kindref="member">M_STD_STRING</ref><sp/><ref refid="milkShapeAnimImport_8cpp_1ac9fb07f5e9a035c1eca78f6428d9a590" kindref="member">strToWide</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*sz);</highlight></codeline>
<codeline lineno="19"><highlight class="normal">std::string<sp/><ref refid="milkShapeAnimImport_8cpp_1a9247db5a252f97c6442d08793a38a1d4" kindref="member">wideToStr</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TCHAR<sp/>*sw);</highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>TCHAR<sp/>importFilename[256]<sp/>=<sp/>_T(</highlight><highlight class="stringliteral">&quot;F:\\SETUPS\\Graphics\\MilkShape\\ascii\\Walk_Forward.txt&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="milkShapeAnimImport_8cpp_1a71c39472400b6843bf6907f7366144d9" kindref="member">inputFilename</ref>(HWND<sp/>hpanel)</highlight></codeline>
<codeline lineno="26"><highlight class="normal">{</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>TCHAR<sp/>fname[260];</highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/>_tcsncpy(fname,<sp/>::importFilename,<sp/>259);</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/>fname[259]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/>OPENFILENAME<sp/>ofn;</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/>memset(&amp;ofn,<sp/>0,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(ofn));</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/>FilterList<sp/>fl;</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/>fl.Append(_T(</highlight><highlight class="stringliteral">&quot;Milkshape<sp/>ASCII&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/>fl.Append(_T(</highlight><highlight class="stringliteral">&quot;*.txt&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/>TSTR<sp/>title<sp/>=<sp/>_T(</highlight><highlight class="stringliteral">&quot;Import<sp/>MilkShape<sp/>Animation&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/>ofn.lStructSize<sp/>=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(OPENFILENAME);</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/>ofn.hwndOwner<sp/>=<sp/>hpanel;</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/>ofn.lpstrFilter<sp/>=<sp/>fl;</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/>ofn.lpstrFile<sp/>=<sp/>fname;</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/>ofn.nMaxFile<sp/>=<sp/>256;</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/>ofn.lpstrInitialDir<sp/>=<sp/>_T<sp/>(</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/>ofn.Flags<sp/>=<sp/>OFN_FILEMUSTEXIST<sp/>|<sp/>OFN_PATHMUSTEXIST<sp/>|<sp/>OFN_HIDEREADONLY;</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/>ofn.lpstrDefExt<sp/>=<sp/>_T<sp/>(</highlight><highlight class="stringliteral">&quot;txt&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/>ofn.lpstrTitle<sp/>=<sp/>title;</highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(GetOpenFileName(&amp;ofn))</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/>_tcscpy(::importFilename,<sp/>fname);</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="56"><highlight class="normal">}</highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>tabPrintf(Tab&lt;TCHAR&gt;<sp/>&amp;tab,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TCHAR<sp/>*fmt,<sp/>...)</highlight></codeline>
<codeline lineno="60"><highlight class="normal">{</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/>TCHAR<sp/>buf[2048];</highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/>va_list<sp/>ap;</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/>va_start(ap,<sp/>fmt);</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/>_vstprintf(buf,<sp/>fmt,<sp/>ap);</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/>va_end(ap);</highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!tab.Count())</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/>tab.Append(1,<sp/>(TCHAR<sp/>*)_T(</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/>tab.Insert(tab.Count()<sp/>-<sp/>1,<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)_tcslen(buf),<sp/>buf);</highlight></codeline>
<codeline lineno="73"><highlight class="normal">}</highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight></codeline>
<codeline lineno="76" refid="structMilkshapeKey" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structMilkshapeKey" kindref="compound">MilkshapeKey</ref></highlight></codeline>
<codeline lineno="77"><highlight class="normal">{</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><ref refid="structMilkshapeKey_1a1bea5338e09509d537313d3bb0c1fcc4" kindref="member">time</ref>;</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/>Point3<sp/><ref refid="structMilkshapeKey_1af736888975b243f898cc7a2bf3ebf57b" kindref="member">val</ref>;</highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/>Quat<sp/><ref refid="structMilkshapeKey_1a3311f973ef290e65b2143faea6cdbb31" kindref="member">quatVal</ref>()</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/>Quat<sp/>q;</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/>EulerToQuat(Point3(-<ref refid="structMilkshapeKey_1af736888975b243f898cc7a2bf3ebf57b" kindref="member">val</ref>.x,<sp/>-<ref refid="structMilkshapeKey_1af736888975b243f898cc7a2bf3ebf57b" kindref="member">val</ref>.y,<sp/><ref refid="structMilkshapeKey_1af736888975b243f898cc7a2bf3ebf57b" kindref="member">val</ref>.z),<sp/>q,<sp/>EULERTYPE_XYZ);</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>q;</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="87"><highlight class="normal">};</highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>Quat<sp/>qadd(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Quat<sp/>&amp;a,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Quat<sp/>&amp;b)</highlight></codeline>
<codeline lineno="91"><highlight class="normal">{</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/>Quat<sp/>q(a.x<sp/>+<sp/>b.x,<sp/>a.y<sp/>+<sp/>b.y,<sp/>a.z<sp/>+<sp/>b.z,<sp/>a.w<sp/>+<sp/>b.w);</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/>q.Normalize();</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>q;</highlight></codeline>
<codeline lineno="95"><highlight class="normal">}</highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>Quat<sp/>SLERP(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Quat<sp/>&amp;a,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Quat<sp/>&amp;b,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>t)</highlight></codeline>
<codeline lineno="98"><highlight class="normal">{</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>f<sp/>=<sp/>a.x<sp/>*<sp/>b.x<sp/>+<sp/>a.y<sp/>*<sp/>b.y<sp/>+<sp/>a.z<sp/>*<sp/>b.z<sp/>+<sp/>a.w<sp/>*<sp/>b.w;</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(f<sp/>&gt;=<sp/>0.9999)</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>qadd(a<sp/>*<sp/>(1<sp/>-<sp/>t),<sp/>b<sp/>*<sp/>t);</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(f<sp/>&lt;=<sp/>-0.9999)</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>qadd(a<sp/>*<sp/>(t<sp/>-<sp/>1),<sp/>b<sp/>*<sp/>t);</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>w<sp/>=<sp/>acosf(f);</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(f<sp/>&gt;=<sp/>0)</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>sinw<sp/>=<sp/>sinf(w);</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>qadd(a<sp/>*<sp/>(sinf(w<sp/>*<sp/>(1<sp/>-<sp/>t))<sp/>/<sp/>sinw),<sp/>b<sp/>*<sp/>(sinf(w<sp/>*<sp/>t)<sp/>/<sp/>sinw));</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/>w<sp/>=<sp/>PI<sp/>-<sp/>w;</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>sinw<sp/>=<sp/>sinf(w);</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>qadd(a<sp/>*<sp/>(-sinf(w<sp/>*<sp/>(1<sp/>-<sp/>t))<sp/>/<sp/>sinw),<sp/>b<sp/>*<sp/>(sinf(w<sp/>*<sp/>t)<sp/>/<sp/>sinw));</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="120"><highlight class="normal">}</highlight></codeline>
<codeline lineno="121"><highlight class="normal"></highlight></codeline>
<codeline lineno="122"><highlight class="normal"></highlight></codeline>
<codeline lineno="123" refid="structMilkshapeAnimTrack" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structMilkshapeAnimTrack" kindref="compound">MilkshapeAnimTrack</ref></highlight></codeline>
<codeline lineno="124"><highlight class="normal">{</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/>Tab&lt;MilkshapeKey&gt;<sp/><ref refid="structMilkshapeAnimTrack_1a8547cef21c9f805a917da444244e1ef4" kindref="member">keys</ref>;</highlight></codeline>
<codeline lineno="126"><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/>Point3<sp/><ref refid="structMilkshapeAnimTrack_1afcf27f78ccfba627e181ddba898d6a6a" kindref="member">interp</ref>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>time)</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/><ref refid="structMilkshapeAnimTrack_1a8547cef21c9f805a917da444244e1ef4" kindref="member">keys</ref>.Count();<sp/>++i)</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(time<sp/>&lt;<sp/><ref refid="structMilkshapeAnimTrack_1a8547cef21c9f805a917da444244e1ef4" kindref="member">keys</ref>[i].time)</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="133"><highlight class="normal"></highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structMilkshapeAnimTrack_1a8547cef21c9f805a917da444244e1ef4" kindref="member">keys</ref>[i].val;</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i<sp/>&gt;=<sp/><ref refid="structMilkshapeAnimTrack_1a8547cef21c9f805a917da444244e1ef4" kindref="member">keys</ref>.Count())</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structMilkshapeAnimTrack_1a8547cef21c9f805a917da444244e1ef4" kindref="member">keys</ref>[i<sp/>-<sp/>1].val;</highlight></codeline>
<codeline lineno="138"><highlight class="normal"></highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>t<sp/>=<sp/>(time<sp/>-<sp/><ref refid="structMilkshapeAnimTrack_1a8547cef21c9f805a917da444244e1ef4" kindref="member">keys</ref>[i<sp/>-<sp/>1].time)<sp/>/<sp/>(<ref refid="structMilkshapeAnimTrack_1a8547cef21c9f805a917da444244e1ef4" kindref="member">keys</ref>[i].time<sp/>-<sp/><ref refid="structMilkshapeAnimTrack_1a8547cef21c9f805a917da444244e1ef4" kindref="member">keys</ref>[i<sp/>-<sp/>1].time);</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structMilkshapeAnimTrack_1a8547cef21c9f805a917da444244e1ef4" kindref="member">keys</ref>[i].val<sp/>*<sp/>t<sp/>+<sp/><ref refid="structMilkshapeAnimTrack_1a8547cef21c9f805a917da444244e1ef4" kindref="member">keys</ref>[i<sp/>-<sp/>1].val<sp/>*<sp/>(1<sp/>-<sp/>t);</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="142"><highlight class="normal"></highlight></codeline>
<codeline lineno="143"><highlight class="normal"></highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/>Quat<sp/><ref refid="structMilkshapeAnimTrack_1acbc817881cc65a8e4acf03afddabdf27" kindref="member">interpRot</ref>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>time)</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/><ref refid="structMilkshapeAnimTrack_1a8547cef21c9f805a917da444244e1ef4" kindref="member">keys</ref>.Count();<sp/>++i)</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(time<sp/>&lt;<sp/><ref refid="structMilkshapeAnimTrack_1a8547cef21c9f805a917da444244e1ef4" kindref="member">keys</ref>[i].time)</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="150"><highlight class="normal"></highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structMilkshapeAnimTrack_1a8547cef21c9f805a917da444244e1ef4" kindref="member">keys</ref>[i].quatVal();</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i<sp/>&gt;=<sp/><ref refid="structMilkshapeAnimTrack_1a8547cef21c9f805a917da444244e1ef4" kindref="member">keys</ref>.Count())</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structMilkshapeAnimTrack_1a8547cef21c9f805a917da444244e1ef4" kindref="member">keys</ref>[i<sp/>-<sp/>1].quatVal();</highlight></codeline>
<codeline lineno="155"><highlight class="normal"></highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/>Quat<sp/>q1<sp/>=<sp/><ref refid="structMilkshapeAnimTrack_1a8547cef21c9f805a917da444244e1ef4" kindref="member">keys</ref>[i<sp/>-<sp/>1].quatVal();</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/>Quat<sp/>q2<sp/>=<sp/><ref refid="structMilkshapeAnimTrack_1a8547cef21c9f805a917da444244e1ef4" kindref="member">keys</ref>[i].quatVal();</highlight></codeline>
<codeline lineno="158"><highlight class="normal"></highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>t<sp/>=<sp/>(time<sp/>-<sp/><ref refid="structMilkshapeAnimTrack_1a8547cef21c9f805a917da444244e1ef4" kindref="member">keys</ref>[i<sp/>-<sp/>1].time)<sp/>/<sp/>(<ref refid="structMilkshapeAnimTrack_1a8547cef21c9f805a917da444244e1ef4" kindref="member">keys</ref>[i].time<sp/>-<sp/><ref refid="structMilkshapeAnimTrack_1a8547cef21c9f805a917da444244e1ef4" kindref="member">keys</ref>[i<sp/>-<sp/>1].time);</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>SLERP(q1,<sp/>q2,<sp/>t);</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="162"><highlight class="normal">};</highlight></codeline>
<codeline lineno="163"><highlight class="normal"></highlight></codeline>
<codeline lineno="164"><highlight class="normal"></highlight></codeline>
<codeline lineno="165" refid="structMilkshapeNodeAnim" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structMilkshapeNodeAnim" kindref="compound">MilkshapeNodeAnim</ref></highlight></codeline>
<codeline lineno="166"><highlight class="normal">{</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/>TSTR<sp/><ref refid="structMilkshapeNodeAnim_1ad20dbb6beee78ec314ceb34b145ef415" kindref="member">name</ref>;</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><ref refid="structMilkshapeAnimTrack" kindref="compound">MilkshapeAnimTrack</ref><sp/><ref refid="structMilkshapeNodeAnim_1a92b94859957503a95474ab97907d3c7b" kindref="member">pos</ref>,<sp/><ref refid="structMilkshapeNodeAnim_1a08aacd5d827f70a2d166ad65052351bc" kindref="member">rot</ref>;</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/>Point3<sp/><ref refid="structMilkshapeNodeAnim_1a426fe15212bdd24a5b0ba19d2224e11c" kindref="member">lpos</ref>,<sp/><ref refid="structMilkshapeNodeAnim_1a79ad01abd33d145de1a626ed54061221" kindref="member">lrot</ref>;</highlight></codeline>
<codeline lineno="170"><highlight class="normal">};</highlight></codeline>
<codeline lineno="171"><highlight class="normal"></highlight></codeline>
<codeline lineno="172"><highlight class="normal"></highlight></codeline>
<codeline lineno="173"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="milkShapeAnimImport_8cpp_1a3d503cab83f5a2fd7a646503b0149330" kindref="member">import_milkshape_anim</ref>(Interface<sp/>*ip,<sp/>HWND<sp/>hpanel)</highlight></codeline>
<codeline lineno="174"><highlight class="normal">{</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="milkShapeAnimImport_8cpp_1a71c39472400b6843bf6907f7366144d9" kindref="member">::inputFilename</ref>(hpanel))</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="177"><highlight class="normal"></highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/>FILE<sp/>*fh<sp/>=<sp/>_tfopen(::importFilename,<sp/>_T(</highlight><highlight class="stringliteral">&quot;rt&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!fh)</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/>TSTR<sp/>msg;</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/>msg.printf(_T(</highlight><highlight class="stringliteral">&quot;Can&apos;t<sp/>open<sp/>file<sp/>%s&quot;</highlight><highlight class="normal">),<sp/>::importFilename);</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/>MessageBox(hpanel,<sp/>msg,<sp/>_T(</highlight><highlight class="stringliteral">&quot;Milkshape<sp/>animation<sp/>import&quot;</highlight><highlight class="normal">),<sp/>MB_OK);</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="186"><highlight class="normal"></highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/>setlocale(LC_NUMERIC,<sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="188"><highlight class="normal"></highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>LINELEN<sp/>=<sp/>1024;</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>str[LINELEN];</highlight></codeline>
<codeline lineno="191"><highlight class="normal"></highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>numBones<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="193"><highlight class="normal"></highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/>Tab&lt;TCHAR&gt;<sp/>missingNodes;</highlight></codeline>
<codeline lineno="195"><highlight class="normal"></highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>skip<sp/>to<sp/>bones</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;<sp/>fgets(str,<sp/>LINELEN,<sp/>fh);)</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sscanf(str,<sp/></highlight><highlight class="stringliteral">&quot;Bones:<sp/>%d&quot;</highlight><highlight class="normal">,<sp/>&amp;numBones)<sp/>==<sp/>1)</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="200"><highlight class="normal"></highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>name[256]<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">,<sp/>parentName[256];</highlight></codeline>
<codeline lineno="202"><highlight class="normal"></highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>errLine<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="204"><highlight class="normal"></highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><ref refid="structMilkshapeNodeAnim" kindref="compound">MilkshapeNodeAnim</ref><sp/>*bones<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="structMilkshapeNodeAnim" kindref="compound">MilkshapeNodeAnim</ref>[numBones];</highlight></codeline>
<codeline lineno="206"><highlight class="normal"></highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>minTime<sp/>=<sp/>1e30f,<sp/>maxTime<sp/>=<sp/>-1e30f;</highlight></codeline>
<codeline lineno="208"><highlight class="normal"></highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>boneInd;</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(boneInd<sp/>=<sp/>0;<sp/>boneInd<sp/>&lt;<sp/>numBones;<sp/>++boneInd)</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structMilkshapeNodeAnim" kindref="compound">MilkshapeNodeAnim</ref><sp/>&amp;anim<sp/>=<sp/>bones[boneInd];</highlight></codeline>
<codeline lineno="213"><highlight class="normal"></highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/>errLine<sp/>=<sp/>__LINE__;</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!fgets(str,<sp/>LINELEN,<sp/>fh))</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sscanf(str,<sp/></highlight><highlight class="stringliteral">&quot;\&quot;%[^\&quot;]\&quot;&quot;</highlight><highlight class="normal">,<sp/>name)<sp/>!=<sp/>1)</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="219"><highlight class="normal"></highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/>errLine<sp/>=<sp/>__LINE__;</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!fgets(str,<sp/>LINELEN,<sp/>fh))</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strncmp(str,<sp/></highlight><highlight class="stringliteral">&quot;\&quot;\&quot;&quot;</highlight><highlight class="normal">,<sp/>2)<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>strcpy(parentName,<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sscanf(str,<sp/></highlight><highlight class="stringliteral">&quot;\&quot;%[^\&quot;]\&quot;&quot;</highlight><highlight class="normal">,<sp/>parentName)<sp/>!=<sp/>1)</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="227"><highlight class="normal"></highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/>anim.<ref refid="structMilkshapeNodeAnim_1ad20dbb6beee78ec314ceb34b145ef415" kindref="member">name</ref><sp/>=<sp/><ref refid="milkShapeAnimImport_8cpp_1ac9fb07f5e9a035c1eca78f6428d9a590" kindref="member">strToWide</ref>(name).c_str();</highlight></codeline>
<codeline lineno="229"><highlight class="normal"></highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>flags;</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/>Point3<sp/>lpos,<sp/>lrot;</highlight></codeline>
<codeline lineno="232"><highlight class="normal"></highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/>errLine<sp/>=<sp/>__LINE__;</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!fgets(str,<sp/>LINELEN,<sp/>fh))</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sscanf(str,<sp/></highlight><highlight class="stringliteral">&quot;%d<sp/>%f<sp/>%f<sp/>%f<sp/>%f<sp/>%f<sp/>%f&quot;</highlight><highlight class="normal">,<sp/>&amp;flags,<sp/>&amp;lpos.x,<sp/>&amp;lpos.y,<sp/>&amp;lpos.z,<sp/>&amp;lrot.x,<sp/>&amp;lrot.y,<sp/>&amp;lrot.z)<sp/>!=<sp/>7)</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="238"><highlight class="normal"></highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/>anim.<ref refid="structMilkshapeNodeAnim_1a426fe15212bdd24a5b0ba19d2224e11c" kindref="member">lpos</ref><sp/>=<sp/>lpos;</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/>anim.<ref refid="structMilkshapeNodeAnim_1a79ad01abd33d145de1a626ed54061221" kindref="member">lrot</ref><sp/>=<sp/>lrot;</highlight></codeline>
<codeline lineno="241"><highlight class="normal"></highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>num<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="243"><highlight class="normal"></highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>pos<sp/>keys</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/>errLine<sp/>=<sp/>__LINE__;</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!fgets(str,<sp/>LINELEN,<sp/>fh))</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sscanf(str,<sp/></highlight><highlight class="stringliteral">&quot;%d&quot;</highlight><highlight class="normal">,<sp/>&amp;num)<sp/>!=<sp/>1)</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="250"><highlight class="normal"></highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/>Tab&lt;MilkshapeKey&gt;<sp/>&amp;posKeys<sp/>=<sp/>anim.<ref refid="structMilkshapeNodeAnim_1a92b94859957503a95474ab97907d3c7b" kindref="member">pos</ref>.<ref refid="structMilkshapeAnimTrack_1a8547cef21c9f805a917da444244e1ef4" kindref="member">keys</ref>;</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/>posKeys.SetCount(num);</highlight></codeline>
<codeline lineno="253"><highlight class="normal"></highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>posKeys.Count();<sp/>++i)</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structMilkshapeKey" kindref="compound">MilkshapeKey</ref><sp/>&amp;k<sp/>=<sp/>posKeys[i];</highlight></codeline>
<codeline lineno="258"><highlight class="normal"></highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>errLine<sp/>=<sp/>__LINE__;</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!fgets(str,<sp/>LINELEN,<sp/>fh))</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sscanf(str,<sp/></highlight><highlight class="stringliteral">&quot;%f<sp/>%f<sp/>%f<sp/>%f&quot;</highlight><highlight class="normal">,<sp/>&amp;k.<ref refid="structMilkshapeKey_1a1bea5338e09509d537313d3bb0c1fcc4" kindref="member">time</ref>,<sp/>&amp;k.<ref refid="structMilkshapeKey_1af736888975b243f898cc7a2bf3ebf57b" kindref="member">val</ref>.x,<sp/>&amp;k.<ref refid="structMilkshapeKey_1af736888975b243f898cc7a2bf3ebf57b" kindref="member">val</ref>.y,<sp/>&amp;k.<ref refid="structMilkshapeKey_1af736888975b243f898cc7a2bf3ebf57b" kindref="member">val</ref>.z)<sp/>!=<sp/>4)</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="264"><highlight class="normal"></highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(k.<ref refid="structMilkshapeKey_1a1bea5338e09509d537313d3bb0c1fcc4" kindref="member">time</ref><sp/>&lt;<sp/>minTime)</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>minTime<sp/>=<sp/>k.<ref refid="structMilkshapeKey_1a1bea5338e09509d537313d3bb0c1fcc4" kindref="member">time</ref>;</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(k.<ref refid="structMilkshapeKey_1a1bea5338e09509d537313d3bb0c1fcc4" kindref="member">time</ref><sp/>&gt;<sp/>maxTime)</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>maxTime<sp/>=<sp/>k.<ref refid="structMilkshapeKey_1a1bea5338e09509d537313d3bb0c1fcc4" kindref="member">time</ref>;</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i<sp/>&lt;<sp/>posKeys.Count())</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="272"><highlight class="normal"></highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>rot<sp/>keys</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/>errLine<sp/>=<sp/>__LINE__;</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!fgets(str,<sp/>LINELEN,<sp/>fh))</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sscanf(str,<sp/></highlight><highlight class="stringliteral">&quot;%d&quot;</highlight><highlight class="normal">,<sp/>&amp;num)<sp/>!=<sp/>1)</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="279"><highlight class="normal"></highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/>Tab&lt;MilkshapeKey&gt;<sp/>&amp;rotKeys<sp/>=<sp/>anim.<ref refid="structMilkshapeNodeAnim_1a08aacd5d827f70a2d166ad65052351bc" kindref="member">rot</ref>.<ref refid="structMilkshapeAnimTrack_1a8547cef21c9f805a917da444244e1ef4" kindref="member">keys</ref>;</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/>rotKeys.SetCount(num);</highlight></codeline>
<codeline lineno="282"><highlight class="normal"></highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>rotKeys.Count();<sp/>++i)</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structMilkshapeKey" kindref="compound">MilkshapeKey</ref><sp/>&amp;k<sp/>=<sp/>rotKeys[i];</highlight></codeline>
<codeline lineno="286"><highlight class="normal"></highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>errLine<sp/>=<sp/>__LINE__;</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!fgets(str,<sp/>LINELEN,<sp/>fh))</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sscanf(str,<sp/></highlight><highlight class="stringliteral">&quot;%f<sp/>%f<sp/>%f<sp/>%f&quot;</highlight><highlight class="normal">,<sp/>&amp;k.<ref refid="structMilkshapeKey_1a1bea5338e09509d537313d3bb0c1fcc4" kindref="member">time</ref>,<sp/>&amp;k.<ref refid="structMilkshapeKey_1af736888975b243f898cc7a2bf3ebf57b" kindref="member">val</ref>.x,<sp/>&amp;k.<ref refid="structMilkshapeKey_1af736888975b243f898cc7a2bf3ebf57b" kindref="member">val</ref>.y,<sp/>&amp;k.<ref refid="structMilkshapeKey_1af736888975b243f898cc7a2bf3ebf57b" kindref="member">val</ref>.z)<sp/>!=<sp/>4)</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="292"><highlight class="normal"></highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(k.<ref refid="structMilkshapeKey_1a1bea5338e09509d537313d3bb0c1fcc4" kindref="member">time</ref><sp/>&lt;<sp/>minTime)</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>minTime<sp/>=<sp/>k.<ref refid="structMilkshapeKey_1a1bea5338e09509d537313d3bb0c1fcc4" kindref="member">time</ref>;</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(k.<ref refid="structMilkshapeKey_1a1bea5338e09509d537313d3bb0c1fcc4" kindref="member">time</ref><sp/>&gt;<sp/>maxTime)</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>maxTime<sp/>=<sp/>k.<ref refid="structMilkshapeKey_1a1bea5338e09509d537313d3bb0c1fcc4" kindref="member">time</ref>;</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i<sp/>&lt;<sp/>rotKeys.Count())</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="300"><highlight class="normal"></highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>get<sp/>node<sp/>and<sp/>set<sp/>keys</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="302"><highlight class="normal"></highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/>INode<sp/>*node<sp/>=<sp/>ip-&gt;GetINodeByName(anim.<ref refid="structMilkshapeNodeAnim_1ad20dbb6beee78ec314ceb34b145ef415" kindref="member">name</ref>);</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!node)</highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>TSTR<sp/>s;</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>s.printf(_T(</highlight><highlight class="stringliteral">&quot;\&quot;%s\&quot;,<sp/>&quot;</highlight><highlight class="normal">),<sp/>anim.<ref refid="structMilkshapeNodeAnim_1ad20dbb6beee78ec314ceb34b145ef415" kindref="member">name</ref>);</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>missingNodes.Append(s.Length(),<sp/>(TCHAR<sp/>*)s.data());</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="312"><highlight class="normal"></highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>handle<sp/>read<sp/>error</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(boneInd<sp/>&lt;<sp/>numBones)</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/>TSTR<sp/>msg;</highlight></codeline>
<codeline lineno="317"><highlight class="normal"></highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/>msg.printf(_T(</highlight><highlight class="stringliteral">&quot;Error<sp/>reading<sp/>bone<sp/>#%d<sp/>(%s),<sp/>line<sp/>%d&quot;</highlight><highlight class="normal">),<sp/>boneInd<sp/>+<sp/>1,<sp/><ref refid="milkShapeAnimImport_8cpp_1ac9fb07f5e9a035c1eca78f6428d9a590" kindref="member">strToWide</ref>(name).c_str(),<sp/>errLine);</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/>MessageBox(hpanel,<sp/>msg,<sp/>_T(</highlight><highlight class="stringliteral">&quot;Milkshape<sp/>animation<sp/>import&quot;</highlight><highlight class="normal">),<sp/>MB_OK);</highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(missingNodes.Count())</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/>missingNodes.Append(1,<sp/>(TCHAR<sp/>*)_T(</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/>TSTR<sp/>msg;</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/>msg<sp/>=<sp/>_T(</highlight><highlight class="stringliteral">&quot;Missing<sp/>bones:\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/>msg<sp/>+=<sp/>&amp;missingNodes[0];</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/>MessageBox(hpanel,<sp/>msg,<sp/>_T(</highlight><highlight class="stringliteral">&quot;Milkshape<sp/>animation<sp/>import&quot;</highlight><highlight class="normal">),<sp/>MB_OK);</highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/><sp/><sp/>MessageBox(hpanel,<sp/>_T(</highlight><highlight class="stringliteral">&quot;Imported<sp/>successfully&quot;</highlight><highlight class="normal">),<sp/>_T(</highlight><highlight class="stringliteral">&quot;Milkshape<sp/>animation<sp/>import&quot;</highlight><highlight class="normal">),<sp/>MB_OK);</highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="333"><highlight class="normal"></highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><ref refid="polyBumpUtil_8cpp_1aed5a458133572985ccc7fc10a3159f6b" kindref="member">fclose</ref>(fh);</highlight></codeline>
<codeline lineno="335"><highlight class="normal"></highlight></codeline>
<codeline lineno="336"><highlight class="normal"></highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>create<sp/>keys</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/>ip-&gt;DisableSceneRedraw();</highlight></codeline>
<codeline lineno="339"><highlight class="normal"></highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>keyTime<sp/>=<sp/>minTime;<sp/>keyTime<sp/>&lt;=<sp/>maxTime;<sp/>keyTime<sp/>+=<sp/>1)</highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(boneInd<sp/>=<sp/>0;<sp/>boneInd<sp/>&lt;<sp/>numBones;<sp/>++boneInd)</highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structMilkshapeNodeAnim" kindref="compound">MilkshapeNodeAnim</ref><sp/>&amp;anim<sp/>=<sp/>bones[boneInd];</highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TCHAR<sp/>*name<sp/>=<sp/>anim.<ref refid="structMilkshapeNodeAnim_1ad20dbb6beee78ec314ceb34b145ef415" kindref="member">name</ref>;</highlight></codeline>
<codeline lineno="346"><highlight class="normal"></highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>get<sp/>node<sp/>and<sp/>set<sp/>keys</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>INode<sp/>*node<sp/>=<sp/>ip-&gt;GetINodeByName(name);</highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!node)</highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="351"><highlight class="normal"></highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>TimeValue<sp/>time(GetTicksPerFrame()<sp/>*<sp/>keyTime);</highlight></codeline>
<codeline lineno="353"><highlight class="normal"></highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Tab&lt;TCHAR&gt;<sp/>s;</highlight></codeline>
<codeline lineno="355"><highlight class="normal"></highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>set<sp/>time<sp/>slider</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>tabPrintf(s,<sp/>_T(</highlight><highlight class="stringliteral">&quot;sliderTime=%ff\n&quot;</highlight><highlight class="normal">),<sp/>keyTime);</highlight></codeline>
<codeline lineno="358"><highlight class="normal"></highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>set<sp/>pos<sp/>keys</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>(0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>(stricmp(name,<sp/>&quot;Bip01&quot;)==0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(_tcsicmp(name,<sp/>_T(</highlight><highlight class="stringliteral">&quot;Bip01&quot;</highlight><highlight class="normal">))<sp/>==<sp/>0<sp/>||<sp/>_tcsstr(name,<sp/>_T(</highlight><highlight class="stringliteral">&quot;Pelvis&quot;</highlight><highlight class="normal">)))</highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Matrix3<sp/>baseTm;</highlight></codeline>
<codeline lineno="365"><highlight class="normal"></highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Point3<sp/>r<sp/>=<sp/>anim.<ref refid="structMilkshapeNodeAnim_1a79ad01abd33d145de1a626ed54061221" kindref="member">lrot</ref>;</highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EulerToMatrix(Point3(-r.x,<sp/>-r.y,<sp/>r.z),<sp/>baseTm,<sp/>EULERTYPE_XYZ);</highlight></codeline>
<codeline lineno="368"><highlight class="normal"></highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>baseTm.SetTrans(anim.<ref refid="structMilkshapeNodeAnim_1a426fe15212bdd24a5b0ba19d2224e11c" kindref="member">lpos</ref>);</highlight></codeline>
<codeline lineno="370"><highlight class="normal"></highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Matrix3<sp/>ptm<sp/>=<sp/>node-&gt;GetParentNode()-&gt;GetNodeTM(time);</highlight></codeline>
<codeline lineno="372"><highlight class="normal"></highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(node-&gt;GetParentNode()-&gt;IsRootNode())</highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Point3<sp/>a<sp/>=<sp/>ptm.GetRow(1);</highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ptm.SetRow(1,<sp/>ptm.GetRow(2));</highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ptm.SetRow(2,<sp/>a);</highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ptm.SetRow(0,<sp/>-ptm.GetRow(0));</highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="380"><highlight class="normal"></highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Matrix3<sp/>ntm=node-&gt;GetNodeTM(time);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="382"><highlight class="normal"></highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Matrix3<sp/>tm<sp/>=<sp/>baseTm<sp/>*<sp/>ptm;</highlight></codeline>
<codeline lineno="384"><highlight class="normal"></highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Point3<sp/>pk<sp/>=<sp/>anim.<ref refid="structMilkshapeNodeAnim_1a92b94859957503a95474ab97907d3c7b" kindref="member">pos</ref>.<ref refid="structMilkshapeAnimTrack_1afcf27f78ccfba627e181ddba898d6a6a" kindref="member">interp</ref>(keyTime);</highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Point3<sp/><ref refid="polyBumpUtil_8cpp_1aaa1ebe818ec1c763a776cc580551f3e6" kindref="member">p</ref><sp/>=<sp/>tm.PointTransform(Point3(-pk.x,<sp/>pk.y,<sp/>-pk.z));</highlight></codeline>
<codeline lineno="387"><highlight class="normal"></highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(_tcsstr(name,<sp/>_T(</highlight><highlight class="stringliteral">&quot;Pelvis&quot;</highlight><highlight class="normal">)))</highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tabPrintf(s,<sp/>_T(</highlight><highlight class="stringliteral">&quot;biped.setTransform<sp/>$&apos;Bip01&apos;<sp/>#pos<sp/>[%g,<sp/>%g,<sp/>%g]<sp/>true\n&quot;</highlight><highlight class="normal">),<sp/><ref refid="polyBumpUtil_8cpp_1aaa1ebe818ec1c763a776cc580551f3e6" kindref="member">p</ref>.x,<sp/><ref refid="polyBumpUtil_8cpp_1aaa1ebe818ec1c763a776cc580551f3e6" kindref="member">p</ref>.y,<sp/><ref refid="polyBumpUtil_8cpp_1aaa1ebe818ec1c763a776cc580551f3e6" kindref="member">p</ref>.z);</highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tabPrintf(s,<sp/>_T(</highlight><highlight class="stringliteral">&quot;biped.setTransform<sp/>$&apos;%s&apos;<sp/>#pos<sp/>[%g,<sp/>%g,<sp/>%g]<sp/>true\n&quot;</highlight><highlight class="normal">),<sp/>name,<sp/><ref refid="polyBumpUtil_8cpp_1aaa1ebe818ec1c763a776cc580551f3e6" kindref="member">p</ref>.x,<sp/><ref refid="polyBumpUtil_8cpp_1aaa1ebe818ec1c763a776cc580551f3e6" kindref="member">p</ref>.y,<sp/><ref refid="polyBumpUtil_8cpp_1aaa1ebe818ec1c763a776cc580551f3e6" kindref="member">p</ref>.z);</highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="397"><highlight class="normal"></highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>set<sp/>rot<sp/>keys</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>(stricmp(name,<sp/>&quot;Bip01<sp/>Spine&quot;)==0<sp/>||<sp/>stricmp(name,<sp/>&quot;Bip01<sp/>Spine1&quot;)==0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>(stricmp(name,<sp/>&quot;Bip01&quot;)==0<sp/>||<sp/>stricmp(name,<sp/>&quot;Bip01<sp/>PelvisX&quot;)==0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Matrix3<sp/>baseTm;</highlight></codeline>
<codeline lineno="403"><highlight class="normal"></highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Point3<sp/>r<sp/>=<sp/>anim.<ref refid="structMilkshapeNodeAnim_1a79ad01abd33d145de1a626ed54061221" kindref="member">lrot</ref>;</highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EulerToMatrix(Point3(-r.x,<sp/>-r.y,<sp/>r.z),<sp/>baseTm,<sp/>EULERTYPE_XYZ);</highlight></codeline>
<codeline lineno="406"><highlight class="normal"></highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Matrix3<sp/>ptm<sp/>=<sp/>node-&gt;GetParentNode()-&gt;GetNodeTM(time);</highlight></codeline>
<codeline lineno="408"><highlight class="normal"></highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(node-&gt;GetParentNode()-&gt;IsRootNode())</highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Point3<sp/>a<sp/>=<sp/>ptm.GetRow(1);</highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ptm.SetRow(1,<sp/>ptm.GetRow(2));</highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ptm.SetRow(2,<sp/>a);</highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ptm.SetRow(0,<sp/>-ptm.GetRow(0));</highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="416"><highlight class="normal"></highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Quat<sp/>q;</highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>q<sp/>=<sp/>anim.<ref refid="structMilkshapeNodeAnim_1a08aacd5d827f70a2d166ad65052351bc" kindref="member">rot</ref>.<ref refid="structMilkshapeAnimTrack_1acbc817881cc65a8e4acf03afddabdf27" kindref="member">interpRot</ref>(keyTime);</highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Matrix3<sp/>rtm;</highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>q.MakeMatrix(rtm,<sp/>TRUE);</highlight></codeline>
<codeline lineno="421"><highlight class="normal"></highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Matrix3<sp/>tm<sp/>=<sp/>rtm<sp/>*<sp/>baseTm<sp/>*<sp/>ptm;</highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Matrix3<sp/>tm=baseTm*ptm;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>q<sp/>=<sp/>Quat(tm);</highlight></codeline>
<codeline lineno="425"><highlight class="normal"></highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tabPrintf(s,<sp/>_T(</highlight><highlight class="stringliteral">&quot;biped.setTransform<sp/>$&apos;%s&apos;<sp/>#rotation<sp/>(quat<sp/>%g<sp/>%g<sp/>%g<sp/>%g)<sp/>true\n&quot;</highlight><highlight class="normal">),<sp/>name,<sp/>q.x,<sp/>q.y,<sp/>q.z,<sp/>q.w);</highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="428"><highlight class="normal"></highlight></codeline>
<codeline lineno="429"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(MAX_RELEASE_R24)<sp/>&amp;&amp;<sp/>MAX_RELEASE<sp/>&gt;=<sp/>MAX_RELEASE_R24</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ExecuteMAXScriptScript(&amp;s[0],<sp/>MAXScript::ScriptSource::NotSpecified);</highlight></codeline>
<codeline lineno="431"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ExecuteMAXScriptScript(&amp;s[0]);</highlight></codeline>
<codeline lineno="433"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="436"><highlight class="normal"></highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/>ip-&gt;EnableSceneRedraw();</highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/>ip-&gt;RedrawViews(ip-&gt;GetTime());</highlight></codeline>
<codeline lineno="439"><highlight class="normal"></highlight></codeline>
<codeline lineno="440"><highlight class="normal"></highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">[]<sp/>bones;</highlight></codeline>
<codeline lineno="442"><highlight class="normal"></highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/>setlocale(LC_NUMERIC,<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="444"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="milkShapeAnimImport.cpp"/>
  </compounddef>
</doxygen>
