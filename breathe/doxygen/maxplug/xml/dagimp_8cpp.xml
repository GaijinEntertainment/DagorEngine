<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.7" xml:lang="en-US">
  <compounddef id="dagimp_8cpp" kind="file" language="C++">
    <compoundname>dagimp.cpp</compoundname>
    <includes local="no">functional</includes>
    <includes local="no">regex</includes>
    <includes local="no">unordered_set</includes>
    <includes local="no">max.h</includes>
    <includes local="no">CommCtrl.h</includes>
    <includes local="no">plugapi.h</includes>
    <includes local="no">utilapi.h</includes>
    <includes local="no">ilayermanager.h</includes>
    <includes local="no">ILayerProperties.h</includes>
    <includes local="no">ilayer.h</includes>
    <includes local="no">modstack.h</includes>
    <includes local="no">iparamb2.h</includes>
    <includes local="no">iskin.h</includes>
    <includes local="no">bmmlib.h</includes>
    <includes local="no">stdmat.h</includes>
    <includes local="no">splshape.h</includes>
    <includes local="no">notetrck.h</includes>
    <includes local="no">MeshNormalSpec.h</includes>
    <includes refid="dagor_8h" local="yes">dagor.h</includes>
    <includes refid="dagfmt_8h" local="yes">dagfmt.h</includes>
    <includes refid="mater_8h" local="yes">mater.h</includes>
    <includes refid="resource_8h" local="yes">resource.h</includes>
    <includes refid="debug_8h" local="yes">debug.h</includes>
    <includes refid="enumnode_8h" local="yes">enumnode.h</includes>
    <includes refid="layout_8h" local="yes">layout.h</includes>
    <includes refid="common_8h" local="yes">common.h</includes>
    <includes refid="dagorLogWindow_8h" local="yes">dagorLogWindow.h</includes>
    <includes local="no">io.h</includes>
    <incdepgraph>
      <node id="27">
        <label>common.h</label>
        <link refid="common_8h"/>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="21">
        <label>dagfmt.h</label>
        <link refid="dagfmt_8h"/>
      </node>
      <node id="1">
        <label>dagimp.cpp</label>
        <link refid="dagimp_8cpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
      </node>
      <node id="20">
        <label>dagor.h</label>
        <link refid="dagor_8h"/>
      </node>
      <node id="29">
        <label>dagorLogWindow.h</label>
        <link refid="dagorLogWindow_8h"/>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
      </node>
      <node id="24">
        <label>debug.h</label>
        <link refid="debug_8h"/>
      </node>
      <node id="25">
        <label>enumnode.h</label>
        <link refid="enumnode_8h"/>
        <childnode refid="11" relation="include">
        </childnode>
      </node>
      <node id="26">
        <label>layout.h</label>
        <link refid="layout_8h"/>
      </node>
      <node id="22">
        <label>mater.h</label>
        <link refid="mater_8h"/>
      </node>
      <node id="23">
        <label>resource.h</label>
        <link refid="resource_8h"/>
      </node>
      <node id="6">
        <label>CommCtrl.h</label>
      </node>
      <node id="10">
        <label>ILayerProperties.h</label>
      </node>
      <node id="19">
        <label>MeshNormalSpec.h</label>
      </node>
      <node id="15">
        <label>bmmlib.h</label>
      </node>
      <node id="2">
        <label>functional</label>
      </node>
      <node id="11">
        <label>ilayer.h</label>
      </node>
      <node id="9">
        <label>ilayermanager.h</label>
      </node>
      <node id="31">
        <label>io.h</label>
      </node>
      <node id="13">
        <label>iparamb2.h</label>
      </node>
      <node id="14">
        <label>iskin.h</label>
      </node>
      <node id="5">
        <label>max.h</label>
      </node>
      <node id="12">
        <label>modstack.h</label>
      </node>
      <node id="18">
        <label>notetrck.h</label>
      </node>
      <node id="7">
        <label>plugapi.h</label>
      </node>
      <node id="3">
        <label>regex</label>
      </node>
      <node id="17">
        <label>splshape.h</label>
      </node>
      <node id="16">
        <label>stdmat.h</label>
      </node>
      <node id="30">
        <label>strclass.h</label>
      </node>
      <node id="4">
        <label>unordered_set</label>
      </node>
      <node id="8">
        <label>utilapi.h</label>
      </node>
      <node id="28">
        <label>vector</label>
      </node>
    </incdepgraph>
    <innerclass refid="structSkinData" prot="public">SkinData</innerclass>
    <innerclass refid="structNodeId" prot="public">NodeId</innerclass>
    <innerclass refid="structBlock" prot="public">Block</innerclass>
    <innerclass refid="structImportedFile" prot="public">ImportedFile</innerclass>
    <innerclass refid="structImportedFileHash" prot="public">ImportedFileHash</innerclass>
    <innerclass refid="classDagImp" prot="public">DagImp</innerclass>
    <innerclass refid="structDagImp_1_1Categories" prot="public">DagImp::Categories</innerclass>
    <innerclass refid="classDagImpCD" prot="public">DagImpCD</innerclass>
    <innerclass refid="classImpUtil" prot="public">ImpUtil</innerclass>
    <innerclass refid="structImpUtil_1_1Rules" prot="public">ImpUtil::Rules</innerclass>
    <innerclass refid="classWListView" prot="public">WListView</innerclass>
    <innerclass refid="classImpUtilDesc" prot="public">ImpUtilDesc</innerclass>
    <innerclass refid="structImpMat" prot="public">ImpMat</innerclass>
    <innerclass refid="structImpnode" prot="public">Impnode</innerclass>
    <innerclass refid="structResolvedLayer" prot="public">ResolvedLayer</innerclass>
    <innerclass refid="classIDagorImportUtil" prot="public">IDagorImportUtil</innerclass>
      <sectiondef kind="define">
      <memberdef kind="define" id="dagimp_8cpp_1a398da37e411bb2d829f85232480defea" prot="public" static="no">
        <name>ERRMSG_DELAY</name>
        <initializer>5000</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dagimp.cpp" line="32" column="9" bodyfile="dagimp.cpp" bodystart="32" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="dagimp_8cpp_1a6764ce99b0393b85506b58e2e731df39" prot="public" static="no">
        <name>VALID_REGEX_COLOR_BG</name>
        <initializer>(RGB(255, 255, 255))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dagimp.cpp" line="34" column="9" bodyfile="dagimp.cpp" bodystart="34" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="dagimp_8cpp_1aab45c8dedb9864c4638559b56af46335" prot="public" static="no">
        <name>INVALID_REGEX_COLOR_BG</name>
        <initializer>(RGB(255, 192, 192))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dagimp.cpp" line="35" column="9" bodyfile="dagimp.cpp" bodystart="35" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="dagimp_8cpp_1a687ce463dce05873a78f8b29a3a808be" prot="public" static="no">
        <name>rd</name>
        <param><defname>p</defname></param>
        <param><defname>l</defname></param>
        <initializer>  {                             \
    <ref refid="polyBumpUtil_8cpp_1a7699f0fa17b7a8c6cc60895b6ec8bb97" kindref="member">if</ref> (fread(<ref refid="polyBumpUtil_8cpp_1aaa1ebe818ec1c763a776cc580551f3e6" kindref="member">p</ref>, l, 1, <ref refid="polyBumpUtil_8cpp_1a48d03c7323d95df49ef19db24dcb5c71" kindref="member">h</ref>) != 1) \
      goto read_err;            \
  }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dagimp.cpp" line="1453" column="9" bodyfile="dagimp.cpp" bodystart="1453" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="dagimp_8cpp_1a258f4e1cc409c86d8964e61a1ff3407e" prot="public" static="no">
        <name>bblk</name>
        <initializer>  {                   \
    <ref refid="polyBumpUtil_8cpp_1a7699f0fa17b7a8c6cc60895b6ec8bb97" kindref="member">if</ref> (!begin_blk()) \
      goto read_err;  \
  }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dagimp.cpp" line="1458" column="9" bodyfile="dagimp.cpp" bodystart="1458" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="dagimp_8cpp_1af72073a672fb009b5005670cb78a4598" prot="public" static="no">
        <name>eblk</name>
        <initializer>  {                  \
    <ref refid="polyBumpUtil_8cpp_1a7699f0fa17b7a8c6cc60895b6ec8bb97" kindref="member">if</ref> (!end_blk())  \
      goto read_err; \
  }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dagimp.cpp" line="1463" column="9" bodyfile="dagimp.cpp" bodystart="1463" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="dagimp_8cpp_1a687ce463dce05873a78f8b29a3a808be" prot="public" static="no">
        <name>rd</name>
        <param><defname>p</defname></param>
        <param><defname>l</defname></param>
        <initializer>  {                             \
    <ref refid="polyBumpUtil_8cpp_1a7699f0fa17b7a8c6cc60895b6ec8bb97" kindref="member">if</ref> (fread(<ref refid="polyBumpUtil_8cpp_1aaa1ebe818ec1c763a776cc580551f3e6" kindref="member">p</ref>, l, 1, <ref refid="polyBumpUtil_8cpp_1a48d03c7323d95df49ef19db24dcb5c71" kindref="member">h</ref>) != 1) \
      goto read_err;            \
  }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dagimp.cpp" line="2874" column="9" bodyfile="dagimp.cpp" bodystart="1453" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="dagimp_8cpp_1aedf2203f712fbe26b8b78029f109b331" prot="public" static="no" strong="no">
        <type></type>
        <name>ImpOps</name>
        <enumvalue id="dagimp_8cpp_1aedf2203f712fbe26b8b78029f109b331ad82a474a31c22cdf2df99a7172b4ed30" prot="public">
          <name>fun_import</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dagimp.cpp" line="3125" column="1" bodyfile="dagimp.cpp" bodystart="3126" bodyend="3128"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="dagimp_8cpp_1a65f85814a8290f9797005d3b28e7e5fc" prot="public" static="no">
        <type>unsigned char</type>
        <definition>typedef unsigned char uchar</definition>
        <argsstring></argsstring>
        <name>uchar</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dagimp.cpp" line="54" column="23" bodyfile="dagimp.cpp" bodystart="54" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="dagimp_8cpp_1ab95f123a6c9bcfee6a343170ef8c5f69" prot="public" static="no">
        <type>unsigned short</type>
        <definition>typedef unsigned short ushort</definition>
        <argsstring></argsstring>
        <name>ushort</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dagimp.cpp" line="55" column="24" bodyfile="dagimp.cpp" bodystart="55" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="dagimp_8cpp_1a91ad9478d81a7aaf2593e8d9c3d06a14" prot="public" static="no">
        <type>unsigned int</type>
        <definition>typedef unsigned int uint</definition>
        <argsstring></argsstring>
        <name>uint</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dagimp.cpp" line="56" column="22" bodyfile="dagimp.cpp" bodystart="56" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="var">
      <memberdef kind="variable" id="dagimp_8cpp_1a0078deee7f7e8c27d4c0ce0d13ef34db" prot="public" static="yes" mutable="no">
        <type>Tab&lt; <ref refid="structBlock" kindref="compound">Block</ref> &gt;</type>
        <definition>Tab&lt;Block&gt; blk</definition>
        <argsstring></argsstring>
        <name>blk</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dagimp.cpp" line="91" column="12" bodyfile="dagimp.cpp" bodystart="91" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="dagimp_8cpp_1aca9ba5fb8820a1fb40ac72dcc873bd71" prot="public" static="yes" mutable="no">
        <type>FILE *</type>
        <definition>FILE* fileh</definition>
        <argsstring></argsstring>
        <name>fileh</name>
        <initializer>= NULL</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dagimp.cpp" line="92" column="13" bodyfile="dagimp.cpp" bodystart="92" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="dagimp_8cpp_1a0707ee1a6508a76e03893e38b8e7db1a" prot="public" static="yes" mutable="no">
        <type><ref refid="classDagImpCD" kindref="compound">DagImpCD</ref></type>
        <definition>DagImpCD dagimpcd</definition>
        <argsstring></argsstring>
        <name>dagimpcd</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dagimp.cpp" line="420" column="17" bodyfile="dagimp.cpp" bodystart="420" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="dagimp_8cpp_1a168fc0d0dab8264379e0f9008e2fbb3d" prot="public" static="yes" mutable="no">
        <type><ref refid="classImpUtil" kindref="compound">ImpUtil</ref></type>
        <definition>ImpUtil util</definition>
        <argsstring></argsstring>
        <name>util</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dagimp.cpp" line="480" column="16" bodyfile="dagimp.cpp" bodystart="480" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="dagimp_8cpp_1aa687a24107781689ab4fa6ea47dbf837" prot="public" static="yes" mutable="no">
        <type><ref refid="classImpUtilDesc" kindref="compound">ImpUtilDesc</ref></type>
        <definition>ImpUtilDesc utilDesc</definition>
        <argsstring></argsstring>
        <name>utilDesc</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dagimp.cpp" line="1281" column="20" bodyfile="dagimp.cpp" bodystart="1281" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="dagimp_8cpp_1a186a6c05622da1e5527d49f3c625c3f7" prot="public" static="yes" mutable="no">
        <type>Tab&lt; TCHAR * &gt;</type>
        <definition>Tab&lt;TCHAR *&gt; tex</definition>
        <argsstring></argsstring>
        <name>tex</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dagimp.cpp" line="1308" column="12" bodyfile="dagimp.cpp" bodystart="1308" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="dagimp_8cpp_1a30c6920307636661736d135d88eb0383" prot="public" static="yes" mutable="no">
        <type>Tab&lt; <ref refid="structImpMat" kindref="compound">ImpMat</ref> &gt;</type>
        <definition>Tab&lt;ImpMat&gt; mat</definition>
        <argsstring></argsstring>
        <name>mat</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dagimp.cpp" line="1309" column="12" bodyfile="dagimp.cpp" bodystart="1309" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="dagimp_8cpp_1abf5ceb40e5af9cd5796c054f28543c47" prot="public" static="yes" mutable="no">
        <type>Tab&lt; TCHAR * &gt;</type>
        <definition>Tab&lt;TCHAR *&gt; keylabel</definition>
        <argsstring></argsstring>
        <name>keylabel</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dagimp.cpp" line="1311" column="12" bodyfile="dagimp.cpp" bodystart="1311" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="dagimp_8cpp_1ad8ee823dd75a782af29f8c29b4371767" prot="public" static="yes" mutable="no">
        <type>Tab&lt; DefNoteTrack * &gt;</type>
        <definition>Tab&lt;DefNoteTrack *&gt; ntrack</definition>
        <argsstring></argsstring>
        <name>ntrack</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dagimp.cpp" line="1312" column="12" bodyfile="dagimp.cpp" bodystart="1312" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="dagimp_8cpp_1a14fc55e7b4e4ed6d021bca4595d20674" prot="public" static="yes" mutable="no">
        <type>TSTR</type>
        <definition>TSTR scene_name</definition>
        <argsstring></argsstring>
        <name>scene_name</name>
        <initializer>= _T(&quot;&quot;)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dagimp.cpp" line="1316" column="13" bodyfile="dagimp.cpp" bodystart="1316" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="dagimp_8cpp_1af83a63b1b5879a56c0575d9ff9b81fd6" prot="public" static="yes" mutable="no">
        <type><ref refid="classIDagorImportUtil" kindref="compound">IDagorImportUtil</ref></type>
        <definition>IDagorImportUtil dagorimputiliface(Interface_ID(0x20906172, 0x435c11e0), _T(&quot;dagorImport&quot;), IDS_DAGOR_IMPORT_IFACE, NULL, FP_CORE, fun_import, _T(&quot;import&quot;), -1, TYPE_BOOL, 0, 9, _T(&quot;filename&quot;), -1, TYPE_STRING, _T(&quot;separateLayers&quot;), -1, TYPE_BOOL, f_keyArgDefault, true, _T(&quot;suppressPrompts&quot;), -1, TYPE_BOOL, f_keyArgDefault, false, _T(&quot;renameLayerCollision&quot;), -1, TYPE_BOOL, f_keyArgDefault, true, _T(&quot;useLegacyImport&quot;), -1, TYPE_BOOL, f_keyArgDefault, true, _T(&quot;importLod&quot;), -1, TYPE_BOOL, f_keyArgDefault, true, _T(&quot;importDestr&quot;), -1, TYPE_BOOL, f_keyArgDefault, true, _T(&quot;importDp&quot;), -1, TYPE_BOOL, f_keyArgDefault, true, _T(&quot;importDmg&quot;), -1, TYPE_BOOL, f_keyArgDefault, true, end)</definition>
        <argsstring>(Interface_ID(0x20906172, 0x435c11e0), _T(&quot;dagorImport&quot;), IDS_DAGOR_IMPORT_IFACE, NULL, FP_CORE, fun_import, _T(&quot;import&quot;), -1, TYPE_BOOL, 0, 9, _T(&quot;filename&quot;), -1, TYPE_STRING, _T(&quot;separateLayers&quot;), -1, TYPE_BOOL, f_keyArgDefault, true, _T(&quot;suppressPrompts&quot;), -1, TYPE_BOOL, f_keyArgDefault, false, _T(&quot;renameLayerCollision&quot;), -1, TYPE_BOOL, f_keyArgDefault, true, _T(&quot;useLegacyImport&quot;), -1, TYPE_BOOL, f_keyArgDefault, true, _T(&quot;importLod&quot;), -1, TYPE_BOOL, f_keyArgDefault, true, _T(&quot;importDestr&quot;), -1, TYPE_BOOL, f_keyArgDefault, true, _T(&quot;importDp&quot;), -1, TYPE_BOOL, f_keyArgDefault, true, _T(&quot;importDmg&quot;), -1, TYPE_BOOL, f_keyArgDefault, true, end)</argsstring>
        <name>dagorimputiliface</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dagimp.cpp" line="3166" column="25"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="dagimp_8cpp_1a8036daeeff4e66e0424a344a3ed8da70" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void update_export_mode</definition>
        <argsstring>(bool use_legacy_import)</argsstring>
        <name>update_export_mode</name>
        <param>
          <type>bool</type>
          <declname>use_legacy_import</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dagimp.cpp" line="37" column="13" bodyfile="expUtil.cpp" bodystart="5176" bodyend="5180" declfile="dagimp.cpp" declline="37" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="dagimp_8cpp_1ad0d9f9930215478f9f60bb94f0d82ace" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void convertnew</definition>
        <argsstring>(Interface *ip, bool on_import)</argsstring>
        <name>convertnew</name>
        <param>
          <type>Interface *</type>
          <declname>ip</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>on_import</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dagimp.cpp" line="58" column="13" bodyfile="util.cpp" bodystart="191" bodyend="199" declfile="dagimp.cpp" declline="58" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="dagimp_8cpp_1a0ddaaf012ae2076da5bc08fe5a94be52" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void collapse_materials</definition>
        <argsstring>(Interface *ip)</argsstring>
        <name>collapse_materials</name>
        <param>
          <type>Interface *</type>
          <declname>ip</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dagimp.cpp" line="59" column="13" bodyfile="util.cpp" bodystart="2141" bodyend="2149" declfile="dagimp.cpp" declline="59" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="dagimp_8cpp_1a1d3be838d048c85d30335b00e10215d1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>TCHAR *</type>
        <definition>TCHAR * ReadCharString</definition>
        <argsstring>(int len, FILE *h)</argsstring>
        <name>ReadCharString</name>
        <param>
          <type>int</type>
          <declname>len</declname>
        </param>
        <param>
          <type>FILE *</type>
          <declname>h</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dagimp.cpp" line="61" column="7" bodyfile="dagimp.cpp" bodystart="61" bodyend="82"/>
      </memberdef>
      <memberdef kind="function" id="dagimp_8cpp_1acd5ed247b8e01c268af885839e8762cd" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void init_blk</definition>
        <argsstring>(FILE *h)</argsstring>
        <name>init_blk</name>
        <param>
          <type>FILE *</type>
          <declname>h</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dagimp.cpp" line="94" column="13" bodyfile="dagimp.cpp" bodystart="94" bodyend="98"/>
      </memberdef>
      <memberdef kind="function" id="dagimp_8cpp_1af64f2041d77d959f86452c2b921df8ed" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int begin_blk</definition>
        <argsstring>()</argsstring>
        <name>begin_blk</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dagimp.cpp" line="100" column="12" bodyfile="dagimp.cpp" bodystart="100" bodyend="114"/>
      </memberdef>
      <memberdef kind="function" id="dagimp_8cpp_1afadc387182e7b852abe0804ecd17c564" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int end_blk</definition>
        <argsstring>()</argsstring>
        <name>end_blk</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dagimp.cpp" line="116" column="12" bodyfile="dagimp.cpp" bodystart="116" bodyend="124"/>
      </memberdef>
      <memberdef kind="function" id="dagimp_8cpp_1a034e068f71f3dbaa2bd4fadc01f3af4f" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int blk_type</definition>
        <argsstring>()</argsstring>
        <name>blk_type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dagimp.cpp" line="126" column="12" bodyfile="dagimp.cpp" bodystart="126" bodyend="135"/>
      </memberdef>
      <memberdef kind="function" id="dagimp_8cpp_1a799527fbc286edea59e0a6742fbf4287" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int blk_len</definition>
        <argsstring>()</argsstring>
        <name>blk_len</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dagimp.cpp" line="137" column="12" bodyfile="dagimp.cpp" bodystart="137" bodyend="146"/>
      </memberdef>
      <memberdef kind="function" id="dagimp_8cpp_1a53ba3c46f8a14d96079f5bb61e05f730" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int blk_rest</definition>
        <argsstring>()</argsstring>
        <name>blk_rest</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dagimp.cpp" line="148" column="12" bodyfile="dagimp.cpp" bodystart="148" bodyend="157"/>
      </memberdef>
      <memberdef kind="function" id="dagimp_8cpp_1a2cd26433f9130caa32b5040061b9152d" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void do_files_include_re</definition>
        <argsstring>(std::vector&lt; TSTR &gt; &amp;result, const std::vector&lt; TSTR &gt; &amp;files, const TSTR &amp;re)</argsstring>
        <name>do_files_include_re</name>
        <param>
          <type>std::vector&lt; TSTR &gt; &amp;</type>
          <declname>result</declname>
        </param>
        <param>
          <type>const std::vector&lt; TSTR &gt; &amp;</type>
          <declname>files</declname>
        </param>
        <param>
          <type>const TSTR &amp;</type>
          <declname>re</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dagimp.cpp" line="161" column="13" bodyfile="dagimp.cpp" bodystart="161" bodyend="180"/>
      </memberdef>
      <memberdef kind="function" id="dagimp_8cpp_1a037d6bce0c52625f2b1ce96cdc769f22" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void do_files_exclude_re</definition>
        <argsstring>(std::vector&lt; TSTR &gt; &amp;result, const std::vector&lt; TSTR &gt; &amp;files, const TSTR &amp;re)</argsstring>
        <name>do_files_exclude_re</name>
        <param>
          <type>std::vector&lt; TSTR &gt; &amp;</type>
          <declname>result</declname>
        </param>
        <param>
          <type>const std::vector&lt; TSTR &gt; &amp;</type>
          <declname>files</declname>
        </param>
        <param>
          <type>const TSTR &amp;</type>
          <declname>re</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dagimp.cpp" line="182" column="13" bodyfile="dagimp.cpp" bodystart="182" bodyend="202"/>
      </memberdef>
      <memberdef kind="function" id="dagimp_8cpp_1a524a27a309638dc63bc328e5fd09d1a6" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; TSTR &gt;</type>
        <definition>static std::vector&lt; TSTR &gt; files_include_re</definition>
        <argsstring>(const std::vector&lt; TSTR &gt; &amp;files, const TSTR &amp;re)</argsstring>
        <name>files_include_re</name>
        <param>
          <type>const std::vector&lt; TSTR &gt; &amp;</type>
          <declname>files</declname>
        </param>
        <param>
          <type>const TSTR &amp;</type>
          <declname>re</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dagimp.cpp" line="204" column="20" bodyfile="dagimp.cpp" bodystart="204" bodyend="210"/>
      </memberdef>
      <memberdef kind="function" id="dagimp_8cpp_1a24d762954ee30af8219b99a92b74a355" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; TSTR &gt;</type>
        <definition>static std::vector&lt; TSTR &gt; files_exclude_re</definition>
        <argsstring>(const std::vector&lt; TSTR &gt; &amp;files, const TSTR &amp;re)</argsstring>
        <name>files_exclude_re</name>
        <param>
          <type>const std::vector&lt; TSTR &gt; &amp;</type>
          <declname>files</declname>
        </param>
        <param>
          <type>const TSTR &amp;</type>
          <declname>re</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dagimp.cpp" line="212" column="20" bodyfile="dagimp.cpp" bodystart="212" bodyend="218"/>
      </memberdef>
      <memberdef kind="function" id="dagimp_8cpp_1a891cfd7f0750ca8ce9621ac78eb72a1a" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>static bool probe_match_re</definition>
        <argsstring>(const std::vector&lt; TSTR &gt; &amp;files, const TSTR &amp;re)</argsstring>
        <name>probe_match_re</name>
        <param>
          <type>const std::vector&lt; TSTR &gt; &amp;</type>
          <declname>files</declname>
        </param>
        <param>
          <type>const TSTR &amp;</type>
          <declname>re</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dagimp.cpp" line="220" column="13" bodyfile="dagimp.cpp" bodystart="220" bodyend="231"/>
      </memberdef>
      <memberdef kind="function" id="dagimp_8cpp_1a84d159942ec753b7f337076a9b2a51e1" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::wstring</type>
        <definition>static std::wstring replace_all</definition>
        <argsstring>(std::wstring str, const std::wstring &amp;from, const std::wstring &amp;to)</argsstring>
        <name>replace_all</name>
        <param>
          <type>std::wstring</type>
          <declname>str</declname>
        </param>
        <param>
          <type>const std::wstring &amp;</type>
          <declname>from</declname>
        </param>
        <param>
          <type>const std::wstring &amp;</type>
          <declname>to</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dagimp.cpp" line="233" column="21" bodyfile="dagimp.cpp" bodystart="233" bodyend="240"/>
      </memberdef>
      <memberdef kind="function" id="dagimp_8cpp_1a1c81aa4d80cb6ce5a07367cb14959039" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::wstring</type>
        <definition>static std::wstring fnmatch_to_regex</definition>
        <argsstring>(const std::wstring &amp;wildcard)</argsstring>
        <name>fnmatch_to_regex</name>
        <param>
          <type>const std::wstring &amp;</type>
          <declname>wildcard</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dagimp.cpp" line="242" column="21" bodyfile="dagimp.cpp" bodystart="242" bodyend="314"/>
      </memberdef>
      <memberdef kind="function" id="dagimp_8cpp_1a29bf723d61dbb94b9dde74ae7c3fe3e0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ClassDesc *</type>
        <definition>ClassDesc * GetDAGIMPCD</definition>
        <argsstring>()</argsstring>
        <name>GetDAGIMPCD</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dagimp.cpp" line="422" column="11" bodyfile="dagimp.cpp" bodystart="422" bodyend="422"/>
      </memberdef>
      <memberdef kind="function" id="dagimp_8cpp_1a256b6f129db7cf5404436fe0b89b01c6" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>INT_PTR CALLBACK</type>
        <definition>static INT_PTR CALLBACK legacy_dlg_proc</definition>
        <argsstring>(HWND hDlg, UINT message, WPARAM wParam, LPARAM lParam)</argsstring>
        <name>legacy_dlg_proc</name>
        <param>
          <type>HWND</type>
          <declname>hDlg</declname>
        </param>
        <param>
          <type>UINT</type>
          <declname>message</declname>
        </param>
        <param>
          <type>WPARAM</type>
          <declname>wParam</declname>
        </param>
        <param>
          <type>LPARAM</type>
          <declname>lParam</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dagimp.cpp" line="877" column="25" bodyfile="dagimp.cpp" bodystart="877" bodyend="939" declfile="dagimp.cpp" declline="528" declcolumn="25"/>
      </memberdef>
      <memberdef kind="function" id="dagimp_8cpp_1a5a7e46496f21eecf805ee72cf27f284d" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>INT_PTR CALLBACK</type>
        <definition>static INT_PTR CALLBACK standard_dlg_proc</definition>
        <argsstring>(HWND hDlg, UINT message, WPARAM wParam, LPARAM lParam)</argsstring>
        <name>standard_dlg_proc</name>
        <param>
          <type>HWND</type>
          <declname>hDlg</declname>
        </param>
        <param>
          <type>UINT</type>
          <declname>message</declname>
        </param>
        <param>
          <type>WPARAM</type>
          <declname>wParam</declname>
        </param>
        <param>
          <type>LPARAM</type>
          <declname>lParam</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dagimp.cpp" line="941" column="25" bodyfile="dagimp.cpp" bodystart="941" bodyend="1015" declfile="dagimp.cpp" declline="529" declcolumn="25"/>
      </memberdef>
      <memberdef kind="function" id="dagimp_8cpp_1aecdcd1e74753723acdf6c4ecb3efe880" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>INT_PTR CALLBACK</type>
        <definition>static INT_PTR CALLBACK regex_dlg_proc</definition>
        <argsstring>(HWND hDlg, UINT message, WPARAM wParam, LPARAM lParam)</argsstring>
        <name>regex_dlg_proc</name>
        <param>
          <type>HWND</type>
          <declname>hDlg</declname>
        </param>
        <param>
          <type>UINT</type>
          <declname>message</declname>
        </param>
        <param>
          <type>WPARAM</type>
          <declname>wParam</declname>
        </param>
        <param>
          <type>LPARAM</type>
          <declname>lParam</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dagimp.cpp" line="1018" column="25" bodyfile="dagimp.cpp" bodystart="1018" bodyend="1134" declfile="dagimp.cpp" declline="530" declcolumn="25"/>
      </memberdef>
      <memberdef kind="function" id="dagimp_8cpp_1adaa8b6f262cddb7f2d6bfcb4384607a6" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>static bool do_open_import_directory</definition>
        <argsstring>(TSTR &amp;path)</argsstring>
        <name>do_open_import_directory</name>
        <param>
          <type>TSTR &amp;</type>
          <declname>path</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dagimp.cpp" line="631" column="13" bodyfile="dagimp.cpp" bodystart="631" bodyend="642"/>
      </memberdef>
      <memberdef kind="function" id="dagimp_8cpp_1a02c43fb0ae521ee4be1217c053e31384" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>static bool is_regex_empty</definition>
        <argsstring>(const TSTR &amp;re)</argsstring>
        <name>is_regex_empty</name>
        <param>
          <type>const TSTR &amp;</type>
          <declname>re</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dagimp.cpp" line="665" column="13" bodyfile="dagimp.cpp" bodystart="665" bodyend="673"/>
      </memberdef>
      <memberdef kind="function" id="dagimp_8cpp_1ad375ec707dc0c96254d51d888dd4d2f9" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>static bool is_regex_valid</definition>
        <argsstring>(bool isWildcard, TSTR &amp;re)</argsstring>
        <name>is_regex_valid</name>
        <param>
          <type>bool</type>
          <declname>isWildcard</declname>
        </param>
        <param>
          <type>TSTR &amp;</type>
          <declname>re</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dagimp.cpp" line="675" column="13" bodyfile="dagimp.cpp" bodystart="675" bodyend="693"/>
      </memberdef>
      <memberdef kind="function" id="dagimp_8cpp_1a352433f15b5458352e5174fded1a3040" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; TSTR &gt;</type>
        <definition>static std::vector&lt; TSTR &gt; get_valid_rules</definition>
        <argsstring>(bool isWildcard, const std::vector&lt; TSTR &gt; &amp;rules)</argsstring>
        <name>get_valid_rules</name>
        <param>
          <type>bool</type>
          <declname>isWildcard</declname>
        </param>
        <param>
          <type>const std::vector&lt; TSTR &gt; &amp;</type>
          <declname>rules</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dagimp.cpp" line="695" column="20" bodyfile="dagimp.cpp" bodystart="695" bodyend="705"/>
      </memberdef>
      <memberdef kind="function" id="dagimp_8cpp_1a7f056dccc00f27956c6b1189e33ac95d" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>INT_PTR CALLBACK</type>
        <definition>static INT_PTR CALLBACK imp_help_dlg_proc</definition>
        <argsstring>(HWND hDlg, UINT message, WPARAM wParam, LPARAM lParam)</argsstring>
        <name>imp_help_dlg_proc</name>
        <param>
          <type>HWND</type>
          <declname>hDlg</declname>
        </param>
        <param>
          <type>UINT</type>
          <declname>message</declname>
        </param>
        <param>
          <type>WPARAM</type>
          <declname>wParam</declname>
        </param>
        <param>
          <type>LPARAM</type>
          <declname>lParam</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dagimp.cpp" line="1136" column="25" bodyfile="dagimp.cpp" bodystart="1136" bodyend="1152"/>
      </memberdef>
      <memberdef kind="function" id="dagimp_8cpp_1aa9bce49b328af0e37bb160c141576e53" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>INT_PTR CALLBACK</type>
        <definition>static INT_PTR CALLBACK imp_param_dlg_proc</definition>
        <argsstring>(HWND hDlg, UINT message, WPARAM wParam, LPARAM lParam)</argsstring>
        <name>imp_param_dlg_proc</name>
        <param>
          <type>HWND</type>
          <declname>hDlg</declname>
        </param>
        <param>
          <type>UINT</type>
          <declname>message</declname>
        </param>
        <param>
          <type>WPARAM</type>
          <declname>wParam</declname>
        </param>
        <param>
          <type>LPARAM</type>
          <declname>lParam</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dagimp.cpp" line="1154" column="25" bodyfile="dagimp.cpp" bodystart="1154" bodyend="1178"/>
      </memberdef>
      <memberdef kind="function" id="dagimp_8cpp_1a1fc382104b3aa7ba8875617bc070c0f2" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>INT_PTR CALLBACK</type>
        <definition>static INT_PTR CALLBACK imp_dlg_proc</definition>
        <argsstring>(HWND hDlg, UINT message, WPARAM wParam, LPARAM lParam)</argsstring>
        <name>imp_dlg_proc</name>
        <param>
          <type>HWND</type>
          <declname>hDlg</declname>
        </param>
        <param>
          <type>UINT</type>
          <declname>message</declname>
        </param>
        <param>
          <type>WPARAM</type>
          <declname>wParam</declname>
        </param>
        <param>
          <type>LPARAM</type>
          <declname>lParam</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dagimp.cpp" line="1180" column="25" bodyfile="dagimp.cpp" bodystart="1180" bodyend="1236"/>
      </memberdef>
      <memberdef kind="function" id="dagimp_8cpp_1a087ee67f0c94cc487312ccd5a4f327dc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ClassDesc *</type>
        <definition>ClassDesc * GetImpUtilCD</definition>
        <argsstring>()</argsstring>
        <name>GetImpUtilCD</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dagimp.cpp" line="1282" column="11" bodyfile="dagimp.cpp" bodystart="1282" bodyend="1282"/>
      </memberdef>
      <memberdef kind="function" id="dagimp_8cpp_1a900988cf1538fe4778d5241b6c8faa60" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void cleanup</definition>
        <argsstring>(int err=0)</argsstring>
        <name>cleanup</name>
        <param>
          <type>int</type>
          <declname>err</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dagimp.cpp" line="1318" column="13" bodyfile="dagimp.cpp" bodystart="1318" bodyend="1357"/>
      </memberdef>
      <memberdef kind="function" id="dagimp_8cpp_1a3420fc09800d469487e84dbed3cf3e5d" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void make_mtl</definition>
        <argsstring>(ImpMat &amp;m, int ind, Class_ID cid)</argsstring>
        <name>make_mtl</name>
        <param>
          <type><ref refid="structImpMat" kindref="compound">ImpMat</ref> &amp;</type>
          <declname>m</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ind</declname>
        </param>
        <param>
          <type>Class_ID</type>
          <declname>cid</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dagimp.cpp" line="1359" column="13" bodyfile="dagimp.cpp" bodystart="1359" bodyend="1421"/>
      </memberdef>
      <memberdef kind="function" id="dagimp_8cpp_1a64fedb53ab6e3c9e5e1a151863d06a61" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void adj_wtm</definition>
        <argsstring>(Matrix3 &amp;tm)</argsstring>
        <name>adj_wtm</name>
        <param>
          <type>Matrix3 &amp;</type>
          <declname>tm</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dagimp.cpp" line="1423" column="13" bodyfile="dagimp.cpp" bodystart="1423" bodyend="1433"/>
      </memberdef>
      <memberdef kind="function" id="dagimp_8cpp_1a33425a39fe6e8cb7a98b988bb78c46d1" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void adj_pos</definition>
        <argsstring>(Point3 &amp;p)</argsstring>
        <name>adj_pos</name>
        <param>
          <type>Point3 &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dagimp.cpp" line="1435" column="13" bodyfile="dagimp.cpp" bodystart="1435" bodyend="1440"/>
      </memberdef>
      <memberdef kind="function" id="dagimp_8cpp_1ad79157251ea3465bad74b40ac3c57e0a" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void adj_rot</definition>
        <argsstring>(Quat &amp;q)</argsstring>
        <name>adj_rot</name>
        <param>
          <type>Quat &amp;</type>
          <declname>q</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dagimp.cpp" line="1442" column="13" bodyfile="dagimp.cpp" bodystart="1442" bodyend="1449"/>
      </memberdef>
      <memberdef kind="function" id="dagimp_8cpp_1ad4502459b03b27c0f4a494a079d86d05" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void adj_scl</definition>
        <argsstring>(Point3 &amp;p)</argsstring>
        <name>adj_scl</name>
        <param>
          <type>Point3 &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dagimp.cpp" line="1451" column="13" bodyfile="dagimp.cpp" bodystart="1451" bodyend="1451"/>
      </memberdef>
      <memberdef kind="function" id="dagimp_8cpp_1a26d8629d41a2a53a80ab9955d93fc03c" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void flip_normals</definition>
        <argsstring>(Mesh &amp;m)</argsstring>
        <name>flip_normals</name>
        <param>
          <type>Mesh &amp;</type>
          <declname>m</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dagimp.cpp" line="1469" column="13" bodyfile="dagimp.cpp" bodystart="1469" bodyend="1473"/>
      </memberdef>
      <memberdef kind="function" id="dagimp_8cpp_1acb529a218f342195eecea858635225e8" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int load_node</definition>
        <argsstring>(INode *pnode, FILE *h, ImpInterface *ii, Interface *ip, Tab&lt; SkinData * &gt; &amp;skin_data, Tab&lt; NodeId &gt; &amp;node_id)</argsstring>
        <name>load_node</name>
        <param>
          <type>INode *</type>
          <declname>pnode</declname>
        </param>
        <param>
          <type>FILE *</type>
          <declname>h</declname>
        </param>
        <param>
          <type>ImpInterface *</type>
          <declname>ii</declname>
        </param>
        <param>
          <type>Interface *</type>
          <declname>ip</declname>
        </param>
        <param>
          <type>Tab&lt; <ref refid="structSkinData" kindref="compound">SkinData</ref> * &gt; &amp;</type>
          <declname>skin_data</declname>
        </param>
        <param>
          <type>Tab&lt; <ref refid="structNodeId" kindref="compound">NodeId</ref> &gt; &amp;</type>
          <declname>node_id</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dagimp.cpp" line="1475" column="12" bodyfile="dagimp.cpp" bodystart="1475" bodyend="2223"/>
      </memberdef>
      <memberdef kind="function" id="dagimp_8cpp_1af68eb2d9a82fc86180178c4ab563096c" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>BOOL CALLBACK</type>
        <definition>static BOOL CALLBACK ImportOptDlgProc</definition>
        <argsstring>(HWND hwndDlg, UINT message, WPARAM wParam, LPARAM lParam)</argsstring>
        <name>ImportOptDlgProc</name>
        <param>
          <type>HWND</type>
          <declname>hwndDlg</declname>
        </param>
        <param>
          <type>UINT</type>
          <declname>message</declname>
        </param>
        <param>
          <type>WPARAM</type>
          <declname>wParam</declname>
        </param>
        <param>
          <type>LPARAM</type>
          <declname>lParam</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dagimp.cpp" line="2345" column="22" bodyfile="dagimp.cpp" bodystart="2345" bodyend="2427"/>
      </memberdef>
      <memberdef kind="function" id="dagimp_8cpp_1abaaf21a8a55d6976eb97b509d0ea699e" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>TSTR</type>
        <definition>static TSTR filenameToRegex</definition>
        <argsstring>(const TSTR &amp;filename, bool dp, bool lods, bool destr, bool dmg, TSTR &amp;base_name, bool &amp;exact_match)</argsstring>
        <name>filenameToRegex</name>
        <param>
          <type>const TSTR &amp;</type>
          <declname>filename</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>dp</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>lods</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>destr</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>dmg</declname>
        </param>
        <param>
          <type>TSTR &amp;</type>
          <declname>base_name</declname>
        </param>
        <param>
          <type>bool &amp;</type>
          <declname>exact_match</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dagimp.cpp" line="2429" column="13" bodyfile="dagimp.cpp" bodystart="2429" bodyend="2466"/>
      </memberdef>
      <memberdef kind="function" id="dagimp_8cpp_1a96d82c777447bcc7140fe11f6ab7ed8a" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void deleteNode</definition>
        <argsstring>(INode *node)</argsstring>
        <name>deleteNode</name>
        <param>
          <type>INode *</type>
          <declname>node</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dagimp.cpp" line="2468" column="13" bodyfile="dagimp.cpp" bodystart="2468" bodyend="2474"/>
      </memberdef>
      <memberdef kind="function" id="dagimp_8cpp_1afaa48577875c61ac46ed126f7ef6645d" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>TSTR</type>
        <definition>static TSTR makeMangledLayerName</definition>
        <argsstring>(TSTR name)</argsstring>
        <name>makeMangledLayerName</name>
        <param>
          <type>TSTR</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dagimp.cpp" line="2477" column="13" bodyfile="dagimp.cpp" bodystart="2477" bodyend="2505"/>
      </memberdef>
      <memberdef kind="function" id="dagimp_8cpp_1af2f3c9525a626fe6725563083f5cf3cb" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structResolvedLayer" kindref="compound">ResolvedLayer</ref></type>
        <definition>static ResolvedLayer resolveLayerNameCollision</definition>
        <argsstring>(const TSTR &amp;layerName)</argsstring>
        <name>resolveLayerNameCollision</name>
        <param>
          <type>const TSTR &amp;</type>
          <declname>layerName</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dagimp.cpp" line="2515" column="22" bodyfile="dagimp.cpp" bodystart="2515" bodyend="2558"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/>Copyright<sp/>(C)<sp/>Gaijin<sp/>Games<sp/>KFT.<sp/><sp/>All<sp/>rights<sp/>reserved.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;functional&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;regex&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;unordered_set&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;max.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;CommCtrl.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;plugapi.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;utilapi.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;ilayermanager.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;ILayerProperties.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;ilayer.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;modstack.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;iparamb2.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;iskin.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;bmmlib.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdmat.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;splshape.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;notetrck.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;MeshNormalSpec.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="dagor_8h" kindref="compound">dagor.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="dagfmt_8h" kindref="compound">dagfmt.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="mater_8h" kindref="compound">mater.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="resource_8h" kindref="compound">resource.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="debug_8h" kindref="compound">debug.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="enumnode_8h" kindref="compound">enumnode.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="layout_8h" kindref="compound">layout.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="common_8h" kindref="compound">common.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="dagorLogWindow_8h" kindref="compound">dagorLogWindow.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;io.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ERRMSG_DELAY<sp/>5000</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>VALID_REGEX_COLOR_BG<sp/><sp/><sp/>(RGB(255,<sp/>255,<sp/>255))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>INVALID_REGEX_COLOR_BG<sp/>(RGB(255,<sp/>192,<sp/>192))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="dagimp_8cpp_1a8036daeeff4e66e0424a344a3ed8da70" kindref="member">update_export_mode</ref>(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>use_legacy_import);</highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight></codeline>
<codeline lineno="39" refid="structSkinData" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structSkinData" kindref="compound">SkinData</ref></highlight></codeline>
<codeline lineno="40"><highlight class="normal">{</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="structSkinData_1a4167e987be1ffc0d7e646de9e751b7d8" kindref="member">numb</ref>,<sp/><ref refid="structSkinData_1afda32c4bcf06a06aa0c4256dd4dc4264" kindref="member">numvert</ref>;</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/>Tab&lt;DagBone&gt;<sp/><ref refid="structSkinData_1a39f8918842ee3cab77ef895ba17be64a" kindref="member">bones</ref>;</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/>Tab&lt;float&gt;<sp/><ref refid="structSkinData_1a9900c187aea406202c9f86311d195897" kindref="member">wt</ref>;</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/>INode<sp/>*<ref refid="structSkinData_1a301c71b860d61b66cc134d8fa32c0d40" kindref="member">skinNode</ref>;</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><ref refid="structSkinData_1a35bfa84da3feb2737d2203b7f8797919" kindref="member">SkinData</ref>()<sp/>:<sp/><ref refid="structSkinData_1a4167e987be1ffc0d7e646de9e751b7d8" kindref="member">numb</ref>(0),<sp/><ref refid="structSkinData_1afda32c4bcf06a06aa0c4256dd4dc4264" kindref="member">numvert</ref>(0),<sp/><ref refid="structSkinData_1a301c71b860d61b66cc134d8fa32c0d40" kindref="member">skinNode</ref>(NULL)<sp/>{}</highlight></codeline>
<codeline lineno="46"><highlight class="normal">};</highlight></codeline>
<codeline lineno="47" refid="structNodeId" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structNodeId" kindref="compound">NodeId</ref></highlight></codeline>
<codeline lineno="48"><highlight class="normal">{</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="structNodeId_1a2f33369873f35846260527c51ef4533c" kindref="member">id</ref>;</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/>INode<sp/>*<ref refid="structNodeId_1aaa873eb9d511594feaa9dec48d086ba3" kindref="member">node</ref>;</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><ref refid="structNodeId" kindref="compound">NodeId</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>_id,<sp/>INode<sp/>*n)<sp/>:<sp/><ref refid="structNodeId_1a2f33369873f35846260527c51ef4533c" kindref="member">id</ref>(_id),<sp/><ref refid="structNodeId_1aaa873eb9d511594feaa9dec48d086ba3" kindref="member">node</ref>(n)<sp/>{}</highlight></codeline>
<codeline lineno="52"><highlight class="normal">};</highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><ref refid="dagimp_8cpp_1a65f85814a8290f9797005d3b28e7e5fc" kindref="member">uchar</ref>;</highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/><ref refid="dagimp_8cpp_1ab95f123a6c9bcfee6a343170ef8c5f69" kindref="member">ushort</ref>;</highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="dagimp_8cpp_1a91ad9478d81a7aaf2593e8d9c3d06a14" kindref="member">uint</ref>;</highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="dagimp_8cpp_1ad0d9f9930215478f9f60bb94f0d82ace" kindref="member">convertnew</ref>(Interface<sp/>*ip,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>on_import);</highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="dagimp_8cpp_1a0ddaaf012ae2076da5bc08fe5a94be52" kindref="member">collapse_materials</ref>(Interface<sp/>*ip);</highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal">TCHAR<sp/>*<ref refid="dagimp_8cpp_1a1d3be838d048c85d30335b00e10215d1" kindref="member">ReadCharString</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>len,<sp/>FILE<sp/>*<ref refid="polyBumpUtil_8cpp_1a48d03c7323d95df49ef19db24dcb5c71" kindref="member">h</ref>)</highlight></codeline>
<codeline lineno="62"><highlight class="normal">{</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*s<sp/>=<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)malloc(len<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/>assert(s);</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(len)</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fread(s,<sp/>len,<sp/>1,<sp/><ref refid="polyBumpUtil_8cpp_1a48d03c7323d95df49ef19db24dcb5c71" kindref="member">h</ref>)<sp/>!=<sp/>1)</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>free(s);</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/>s[len]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>_UNICODE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/>TCHAR<sp/>*sw<sp/>=<sp/>(TCHAR<sp/>*)malloc(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(TCHAR)<sp/>*<sp/>(len<sp/>+<sp/>1));</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/>mbstowcs(sw,<sp/>s,<sp/>len<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/>free(s);</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>sw;</highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>s;</highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal">}</highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight></codeline>
<codeline lineno="85" refid="structBlock" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structBlock" kindref="compound">Block</ref></highlight></codeline>
<codeline lineno="86"><highlight class="normal">{</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="structBlock_1a4c72705c2d5aba13ad391db7672e70dd" kindref="member">ofs</ref>,<sp/><ref refid="structBlock_1a21d50926441045b69fe825bbbc02f7ed" kindref="member">len</ref>;</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="structBlock_1a99c9706831644a317def3404ad2c72c8" kindref="member">t</ref>;</highlight></codeline>
<codeline lineno="89"><highlight class="normal">};</highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>Tab&lt;Block&gt;<sp/>blk;</highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>FILE<sp/>*fileh<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>init_blk(FILE<sp/>*<ref refid="polyBumpUtil_8cpp_1a48d03c7323d95df49ef19db24dcb5c71" kindref="member">h</ref>)</highlight></codeline>
<codeline lineno="95"><highlight class="normal">{</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/>blk.SetCount(0);</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/>fileh<sp/>=<sp/><ref refid="polyBumpUtil_8cpp_1a48d03c7323d95df49ef19db24dcb5c71" kindref="member">h</ref>;</highlight></codeline>
<codeline lineno="98"><highlight class="normal">}</highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>begin_blk()</highlight></codeline>
<codeline lineno="101"><highlight class="normal">{</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><ref refid="structBlock" kindref="compound">Block</ref><sp/>b;</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fread(&amp;b.<ref refid="structBlock_1a21d50926441045b69fe825bbbc02f7ed" kindref="member">len</ref>,<sp/>4,<sp/>1,<sp/>fileh)<sp/>!=<sp/>1)</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fread(&amp;b.<ref refid="structBlock_1a99c9706831644a317def3404ad2c72c8" kindref="member">t</ref>,<sp/>4,<sp/>1,<sp/>fileh)<sp/>!=<sp/>1)</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/>b.<ref refid="structBlock_1a21d50926441045b69fe825bbbc02f7ed" kindref="member">len</ref><sp/>-=<sp/>4;</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/>b.<ref refid="structBlock_1a4c72705c2d5aba13ad391db7672e70dd" kindref="member">ofs</ref><sp/>=<sp/>ftell(fileh);</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n<sp/>=<sp/>blk.Count();</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/>blk.Append(1,<sp/>&amp;b);</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(blk.Count()<sp/>!=<sp/>n<sp/>+<sp/>1)</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="114"><highlight class="normal">}</highlight></codeline>
<codeline lineno="115"><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>end_blk()</highlight></codeline>
<codeline lineno="117"><highlight class="normal">{</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>blk.Count()<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i<sp/>&lt;<sp/>0)</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/>fseek(fileh,<sp/>blk[i].ofs<sp/>+<sp/>blk[i].len,<sp/>SEEK_SET);</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/>blk.Delete(i,<sp/>1);</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="124"><highlight class="normal">}</highlight></codeline>
<codeline lineno="125"><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>blk_type()</highlight></codeline>
<codeline lineno="127"><highlight class="normal">{</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>blk.Count()<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i<sp/>&lt;<sp/>0)</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(0);</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>blk[i].t;</highlight></codeline>
<codeline lineno="135"><highlight class="normal">}</highlight></codeline>
<codeline lineno="136"><highlight class="normal"></highlight></codeline>
<codeline lineno="137"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>blk_len()</highlight></codeline>
<codeline lineno="138"><highlight class="normal">{</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>blk.Count()<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i<sp/>&lt;<sp/>0)</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(0);</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>blk[i].len;</highlight></codeline>
<codeline lineno="146"><highlight class="normal">}</highlight></codeline>
<codeline lineno="147"><highlight class="normal"></highlight></codeline>
<codeline lineno="148"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>blk_rest()</highlight></codeline>
<codeline lineno="149"><highlight class="normal">{</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>blk.Count()<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i<sp/>&lt;<sp/>0)</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(0);</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>blk[i].ofs<sp/>+<sp/>blk[i].len<sp/>-<sp/>ftell(fileh);</highlight></codeline>
<codeline lineno="157"><highlight class="normal">}</highlight></codeline>
<codeline lineno="158"><highlight class="normal"></highlight></codeline>
<codeline lineno="159"><highlight class="normal"></highlight><highlight class="comment">//===============================================================================//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="160"><highlight class="normal"></highlight></codeline>
<codeline lineno="161"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>do_files_include_re(std::vector&lt;TSTR&gt;<sp/>&amp;result,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;TSTR&gt;<sp/>&amp;files,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TSTR<sp/>&amp;re)</highlight></codeline>
<codeline lineno="162"><highlight class="normal">{</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/>std::wregex<sp/>reg(re,<sp/>std::regex_constants::icase);</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TSTR<sp/>&amp;f<sp/>:<sp/>files)</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>TSTR<sp/>filename,<sp/>ext;</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>SplitFilename(f,<sp/>0,<sp/>&amp;filename,<sp/>&amp;ext);</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(std::regex_match(filename.data(),<sp/>reg)<sp/>||<sp/>std::regex_match((filename<sp/>+<sp/>ext).data(),<sp/>reg))</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result.push_back(f);</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal"><sp/>(std::regex_error<sp/>&amp;e)</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/>TSTR<sp/>msg;</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/>msg.printf(_T(</highlight><highlight class="stringliteral">&quot;%s\n%s&quot;</highlight><highlight class="normal">),<sp/>re,<sp/><ref refid="common_8cpp_1ac9fb07f5e9a035c1eca78f6428d9a590" kindref="member">strToWide</ref>(e.what()));</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/>MessageBox(NULL,<sp/>msg.data(),<sp/>_T(</highlight><highlight class="stringliteral">&quot;Include<sp/>error&quot;</highlight><highlight class="normal">),<sp/>MB_ICONERROR<sp/>|<sp/>MB_OK);</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="180"><highlight class="normal">}</highlight></codeline>
<codeline lineno="181"><highlight class="normal"></highlight></codeline>
<codeline lineno="182"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>do_files_exclude_re(std::vector&lt;TSTR&gt;<sp/>&amp;result,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;TSTR&gt;<sp/>&amp;files,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TSTR<sp/>&amp;re)</highlight></codeline>
<codeline lineno="183"><highlight class="normal">{</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/>std::wregex<sp/>reg(re,<sp/>std::regex_constants::icase);</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TSTR<sp/>&amp;f<sp/>:<sp/>files)</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>TSTR<sp/>filename,<sp/>ext;</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>SplitFilename(f,<sp/>0,<sp/>&amp;filename,<sp/>&amp;ext);</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(std::regex_match(filename.data(),<sp/>reg)<sp/>||<sp/>std::regex_match((filename<sp/>+<sp/>ext).data(),<sp/>reg))</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>result.push_back(f);</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal"><sp/>(std::regex_error<sp/>&amp;e)</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/>TSTR<sp/>msg;</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/>msg.printf(_T(</highlight><highlight class="stringliteral">&quot;%s\n%s&quot;</highlight><highlight class="normal">),<sp/>re,<sp/><ref refid="common_8cpp_1ac9fb07f5e9a035c1eca78f6428d9a590" kindref="member">strToWide</ref>(e.what()));</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/>MessageBox(NULL,<sp/>msg.data(),<sp/>_T(</highlight><highlight class="stringliteral">&quot;Exclude<sp/>error&quot;</highlight><highlight class="normal">),<sp/>MB_ICONERROR<sp/>|<sp/>MB_OK);</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="202"><highlight class="normal">}</highlight></codeline>
<codeline lineno="203"><highlight class="normal"></highlight></codeline>
<codeline lineno="204"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>std::vector&lt;TSTR&gt;<sp/>files_include_re(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;TSTR&gt;<sp/>&amp;files,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TSTR<sp/>&amp;re)</highlight></codeline>
<codeline lineno="205"><highlight class="normal">{</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/>std::vector&lt;TSTR&gt;<sp/>result;</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/>result.reserve(32);</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/>do_files_include_re(result,<sp/>files,<sp/>re);</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="210"><highlight class="normal">}</highlight></codeline>
<codeline lineno="211"><highlight class="normal"></highlight></codeline>
<codeline lineno="212"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>std::vector&lt;TSTR&gt;<sp/>files_exclude_re(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;TSTR&gt;<sp/>&amp;files,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TSTR<sp/>&amp;re)</highlight></codeline>
<codeline lineno="213"><highlight class="normal">{</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/>std::vector&lt;TSTR&gt;<sp/>result;</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/>result.reserve(32);</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/>do_files_exclude_re(result,<sp/>files,<sp/>re);</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="218"><highlight class="normal">}</highlight></codeline>
<codeline lineno="219"><highlight class="normal"></highlight></codeline>
<codeline lineno="220"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>probe_match_re(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;TSTR&gt;<sp/>&amp;files,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TSTR<sp/>&amp;re)</highlight></codeline>
<codeline lineno="221"><highlight class="normal">{</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/>std::wregex<sp/>reg(re,<sp/>std::regex_constants::icase);</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TSTR<sp/>&amp;f<sp/>:<sp/>files)</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/>TSTR<sp/>filename,<sp/>ext;</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/>SplitFilename(f,<sp/>0,<sp/>&amp;filename,<sp/>&amp;ext);</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(std::regex_match(filename.data(),<sp/>reg)<sp/>||<sp/>std::regex_match((filename<sp/>+<sp/>ext).data(),<sp/>reg))</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="231"><highlight class="normal">}</highlight></codeline>
<codeline lineno="232"><highlight class="normal"></highlight></codeline>
<codeline lineno="233"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>std::wstring<sp/>replace_all(std::wstring<sp/>str,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::wstring<sp/>&amp;from,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::wstring<sp/>&amp;to)</highlight></codeline>
<codeline lineno="234"><highlight class="normal">{</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(from.empty())</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>str;</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>pos<sp/>=<sp/>0;<sp/>(pos<sp/>=<sp/>str.find(from,<sp/>pos))<sp/>!=<sp/>std::wstring::npos;<sp/>pos<sp/>+=<sp/>to.size())</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/>str.replace(pos,<sp/>from.size(),<sp/>to);</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>str;</highlight></codeline>
<codeline lineno="240"><highlight class="normal">}</highlight></codeline>
<codeline lineno="241"><highlight class="normal"></highlight></codeline>
<codeline lineno="242"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>std::wstring<sp/>fnmatch_to_regex(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::wstring<sp/>&amp;wildcard)</highlight></codeline>
<codeline lineno="243"><highlight class="normal">{</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0,<sp/>n<sp/>=<sp/>wildcard.size();</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/>std::wstring<sp/>result;</highlight></codeline>
<codeline lineno="246"><highlight class="normal"></highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(i<sp/>&lt;<sp/>n)</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/>TCHAR<sp/>c<sp/>=<sp/>wildcard[i];</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/>++i;</highlight></codeline>
<codeline lineno="251"><highlight class="normal"></highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(c<sp/>==<sp/>_T(</highlight><highlight class="charliteral">&apos;*&apos;</highlight><highlight class="normal">))</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>+=<sp/>_T(</highlight><highlight class="stringliteral">&quot;.*&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="257"><highlight class="normal"></highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(c<sp/>==<sp/>_T(</highlight><highlight class="charliteral">&apos;?&apos;</highlight><highlight class="normal">))</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>+=<sp/>_T(</highlight><highlight class="charliteral">&apos;.&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="263"><highlight class="normal"></highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(c<sp/>==<sp/>_T(</highlight><highlight class="charliteral">&apos;[&apos;</highlight><highlight class="normal">))</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>i;</highlight></codeline>
<codeline lineno="267"><highlight class="normal"></highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(j<sp/>&lt;<sp/>n<sp/>&amp;&amp;<sp/>wildcard[j]<sp/>==<sp/>_T(</highlight><highlight class="charliteral">&apos;!&apos;</highlight><highlight class="normal">))</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++j;</highlight></codeline>
<codeline lineno="270"><highlight class="normal"></highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(j<sp/>&lt;<sp/>n<sp/>&amp;&amp;<sp/>wildcard[j]<sp/>==<sp/>_T(</highlight><highlight class="charliteral">&apos;]&apos;</highlight><highlight class="normal">))</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++j;</highlight></codeline>
<codeline lineno="273"><highlight class="normal"></highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(j<sp/>&lt;<sp/>n<sp/>&amp;&amp;<sp/>wildcard[j]<sp/>!=<sp/>_T(</highlight><highlight class="charliteral">&apos;]&apos;</highlight><highlight class="normal">))</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++j;</highlight></codeline>
<codeline lineno="276"><highlight class="normal"></highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(j<sp/>&gt;=<sp/>n)</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>+=<sp/>_T(</highlight><highlight class="stringliteral">&quot;\\[&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="282"><highlight class="normal"></highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::wstring<sp/>stuff<sp/>=<sp/>replace_all(std::wstring(&amp;wildcard[i],<sp/>j<sp/>-<sp/>i),<sp/>_T(</highlight><highlight class="stringliteral">&quot;\\&quot;</highlight><highlight class="normal">),<sp/>_T(</highlight><highlight class="stringliteral">&quot;\\\\&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="284"><highlight class="normal"></highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>TCHAR<sp/>first_char<sp/>=<sp/>wildcard[i];</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>i<sp/>=<sp/>j<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>+=<sp/>_T(</highlight><highlight class="stringliteral">&quot;[&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="288"><highlight class="normal"></highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(first_char<sp/>==<sp/>_T(</highlight><highlight class="charliteral">&apos;!&apos;</highlight><highlight class="normal">))</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>+=<sp/>_T(</highlight><highlight class="stringliteral">&quot;^&quot;</highlight><highlight class="normal">)<sp/>+<sp/>stuff.substr(1);</highlight></codeline>
<codeline lineno="291"><highlight class="normal"></highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(first_char<sp/>==<sp/>_T(</highlight><highlight class="charliteral">&apos;^&apos;</highlight><highlight class="normal">))</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>+=<sp/>_T(</highlight><highlight class="stringliteral">&quot;\\&quot;</highlight><highlight class="normal">)<sp/>+<sp/>stuff;</highlight></codeline>
<codeline lineno="294"><highlight class="normal"></highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>+=<sp/>stuff;</highlight></codeline>
<codeline lineno="297"><highlight class="normal"></highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>+=<sp/>_T(</highlight><highlight class="stringliteral">&quot;]&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="299"><highlight class="normal"></highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="302"><highlight class="normal"></highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(isalnum(c))</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>+=<sp/>c;</highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="308"><highlight class="normal"></highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/>result<sp/>+=<sp/>_T(</highlight><highlight class="stringliteral">&quot;\\&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/>result<sp/>+=<sp/>c;</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="312"><highlight class="normal"></highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="314"><highlight class="normal">}</highlight></codeline>
<codeline lineno="315"><highlight class="normal"></highlight></codeline>
<codeline lineno="316"><highlight class="normal"></highlight><highlight class="comment">//===============================================================================//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="317"><highlight class="normal"></highlight></codeline>
<codeline lineno="318" refid="structImportedFile" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structImportedFile" kindref="compound">ImportedFile</ref></highlight></codeline>
<codeline lineno="319"><highlight class="normal">{</highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/>std::wstring<sp/><ref refid="structImportedFile_1a4d2d29f48fd7a5609dd590ae9d7fe0a3" kindref="member">fullpath</ref>;</highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/>std::wstring<sp/><ref refid="structImportedFile_1a517bdf5f4b421874b9f3a0faff1f3396" kindref="member">basename</ref>;</highlight></codeline>
<codeline lineno="322"><highlight class="normal"></highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="structImportedFile" kindref="compound">ImportedFile</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TCHAR<sp/>*fname)<sp/>:<sp/><ref refid="structImportedFile_1a4d2d29f48fd7a5609dd590ae9d7fe0a3" kindref="member">fullpath</ref>(fname),<sp/><ref refid="structImportedFile_1a517bdf5f4b421874b9f3a0faff1f3396" kindref="member">basename</ref>(<ref refid="common_8cpp_1ace8247bb8d3b7d8c28336a7ddfb0e2da" kindref="member">extract_basename</ref>(fname).data())<sp/>{}</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="structImportedFile_1a9c2c99b5b688be7fbe28776051ffdfa4" kindref="member">operator==</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structImportedFile" kindref="compound">ImportedFile</ref><sp/>&amp;other)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structImportedFile_1a4d2d29f48fd7a5609dd590ae9d7fe0a3" kindref="member">fullpath</ref><sp/>==<sp/>other.<ref refid="structImportedFile_1a4d2d29f48fd7a5609dd590ae9d7fe0a3" kindref="member">fullpath</ref>;<sp/>}</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="structImportedFile_1a09595d53f87ec9e467a5ec71ba53e13e" kindref="member">equalBasename</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TSTR<sp/>&amp;bname)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structImportedFile_1a517bdf5f4b421874b9f3a0faff1f3396" kindref="member">basename</ref><sp/>==<sp/>std::wstring(bname.data());<sp/>}</highlight></codeline>
<codeline lineno="326"><highlight class="normal">};</highlight></codeline>
<codeline lineno="327"><highlight class="normal"></highlight></codeline>
<codeline lineno="328" refid="structImportedFileHash" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structImportedFileHash" kindref="compound">ImportedFileHash</ref></highlight></codeline>
<codeline lineno="329"><highlight class="normal">{</highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="structImportedFileHash_1a0d124532bd78f91c7774b053098ff9a2" kindref="member">operator()</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structImportedFile" kindref="compound">ImportedFile</ref><sp/>&amp;imp)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="331"><highlight class="keyword"><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>h1<sp/>=<sp/>std::hash&lt;std::wstring&gt;()(imp.<ref refid="structImportedFile_1a4d2d29f48fd7a5609dd590ae9d7fe0a3" kindref="member">fullpath</ref>);</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>h2<sp/>=<sp/>std::hash&lt;std::wstring&gt;()(imp.<ref refid="structImportedFile_1a517bdf5f4b421874b9f3a0faff1f3396" kindref="member">basename</ref>);</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>h1<sp/>^<sp/>(h2<sp/>&lt;&lt;<sp/>1);</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="336"><highlight class="normal">};</highlight></codeline>
<codeline lineno="337"><highlight class="normal"></highlight></codeline>
<codeline lineno="338"><highlight class="normal"></highlight><highlight class="comment">//===============================================================================//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="339"><highlight class="normal"></highlight></codeline>
<codeline lineno="340" refid="classDagImp" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classDagImp" kindref="compound">DagImp</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>SceneImport</highlight></codeline>
<codeline lineno="341"><highlight class="normal">{</highlight></codeline>
<codeline lineno="342"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><ref refid="classDagImp_1a812f8ca0d79d104b42f2692bef9d3951" kindref="member">DagImp</ref>()<sp/>{}</highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><ref refid="classDagImp_1ab2057d6a44191a3103844631307a89f7" kindref="member">~DagImp</ref>()</highlight><highlight class="keyword"><sp/>override<sp/></highlight><highlight class="normal">{}</highlight></codeline>
<codeline lineno="345"><highlight class="normal"></highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="classDagImp_1a2e4b9117a75efabd0c98cba92cf41513" kindref="member">ExtCount</ref>()</highlight><highlight class="keyword"><sp/>override<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;<sp/>}</highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TCHAR<sp/>*<ref refid="classDagImp_1ac9d191cff98462f15f579257ffb284cf" kindref="member">Ext</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n)</highlight><highlight class="keyword"><sp/>override<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>_T(</highlight><highlight class="stringliteral">&quot;dag&quot;</highlight><highlight class="normal">);<sp/>}</highlight></codeline>
<codeline lineno="348"><highlight class="normal"></highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TCHAR<sp/>*<ref refid="classDagImp_1a9620302be9826d316d7882c5b6d66b10" kindref="member">LongDesc</ref>()</highlight><highlight class="keyword"><sp/>override<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="common_8cpp_1aeb87de5dfb5d632579574b4bc8709019" kindref="member">GetString</ref>(<ref refid="resource_8h_1a1ab149ba77ef1df410e33c0944d1bd67" kindref="member">IDS_DAGIMP_LONG</ref>);<sp/>}</highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TCHAR<sp/>*<ref refid="classDagImp_1aa8eb9eb2e0b417dcf20371ea8df861b2" kindref="member">ShortDesc</ref>()</highlight><highlight class="keyword"><sp/>override<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="common_8cpp_1aeb87de5dfb5d632579574b4bc8709019" kindref="member">GetString</ref>(<ref refid="resource_8h_1a3d565038f0680240e193147138f295eb" kindref="member">IDS_DAGIMP_SHORT</ref>);<sp/>}</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TCHAR<sp/>*<ref refid="classDagImp_1a23e5d4a244120ee5c6bc8dd930302fe2" kindref="member">AuthorName</ref>()</highlight><highlight class="keyword"><sp/>override<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="common_8cpp_1aeb87de5dfb5d632579574b4bc8709019" kindref="member">GetString</ref>(<ref refid="resource_8h_1af24e0543d77d2d080e2f746f81079e8a" kindref="member">IDS_AUTHOR</ref>);<sp/>}</highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TCHAR<sp/>*<ref refid="classDagImp_1a0fd50bbebcefe09def54a72405915cc5" kindref="member">CopyrightMessage</ref>()</highlight><highlight class="keyword"><sp/>override<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="common_8cpp_1aeb87de5dfb5d632579574b4bc8709019" kindref="member">GetString</ref>(<ref refid="resource_8h_1adeac7106dc07fa16a93146f9143a3e1a" kindref="member">IDS_COPYRIGHT</ref>);<sp/>}</highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TCHAR<sp/>*<ref refid="classDagImp_1a0d337ffbc838237f60b3dda8b99b5d5b" kindref="member">OtherMessage1</ref>()</highlight><highlight class="keyword"><sp/>override<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>_T(</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);<sp/>}</highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TCHAR<sp/>*<ref refid="classDagImp_1a2790cc26ea077d23ef35b2027d8ba389" kindref="member">OtherMessage2</ref>()</highlight><highlight class="keyword"><sp/>override<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>_T(</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);<sp/>}</highlight></codeline>
<codeline lineno="355"><highlight class="normal"></highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="classDagImp_1a4b7bfd59bcba9bb00458e95ec0b45957" kindref="member">Version</ref>()</highlight><highlight class="keyword"><sp/>override<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;<sp/>}</highlight></codeline>
<codeline lineno="357"><highlight class="normal"></highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classDagImp_1a9c0ab9528493f62ffbdd214f5ea19c8b" kindref="member">ShowAbout</ref>(HWND<sp/>hWnd)</highlight><highlight class="keyword"><sp/>override<sp/></highlight><highlight class="normal">{}</highlight></codeline>
<codeline lineno="359"><highlight class="normal"></highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="classDagImp_1af2ba2d0d275e03c8753f75812f3d5b17" kindref="member">DoImport</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TCHAR<sp/>*name,<sp/>ImpInterface<sp/>*ii,<sp/>Interface<sp/>*i,<sp/>BOOL<sp/>suppressPrompts<sp/>=<sp/>FALSE)<sp/></highlight><highlight class="keyword">override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="classDagImp_1a1d928bae92dbdbb33e0881d947a9913b" kindref="member">doImportOne</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TCHAR<sp/>*name,<sp/>ImpInterface<sp/>*ii,<sp/>Interface<sp/>*i,<sp/>BOOL<sp/>suppressPrompts);</highlight></codeline>
<codeline lineno="362"><highlight class="normal"></highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classDagImp_1a1d12c2444eae41164409f661f59a25b8" kindref="member">separateLayers</ref>;<sp/></highlight><highlight class="comment">//<sp/>Only<sp/>used<sp/>when<sp/>suppressPrompts<sp/>is<sp/>set.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="364"><highlight class="normal"></highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classDagImp_1ae89838cf454485eaab1a6f5b752f4c15" kindref="member">useLegacyImport</ref>;</highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classDagImp_1aed5e30f8490310f5b2b512ea7f98587e" kindref="member">searchInSubfolders</ref>;</highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classDagImp_1a6a73e019f74e964f8a0121334ffb9903" kindref="member">reimportExisting</ref>;</highlight></codeline>
<codeline lineno="368"><highlight class="normal"></highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classDagImp_1ab1597f608c0098f1df0acf54f9ca1b17" kindref="member">nonInteractive</ref>;</highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classDagImp_1af4fa04ae6927daef2847cf022afd47fd" kindref="member">calledFromBatchImport</ref>;</highlight></codeline>
<codeline lineno="371"><highlight class="normal"></highlight></codeline>
<codeline lineno="372" refid="structDagImp_1_1Categories" refkind="compound"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structDagImp_1_1Categories" kindref="compound">Categories</ref></highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="structDagImp_1_1Categories_1a509875fe77af0158bb4bcb366a3f09b4" kindref="member">lod</ref>;</highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="structDagImp_1_1Categories_1ab947250827de77b24220484843131753" kindref="member">destr</ref>;</highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="structDagImp_1_1Categories_1a183c0c95383a5e5c5bd3b325fd30d4e3" kindref="member">dp</ref>;</highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="structDagImp_1_1Categories_1a1e681220bbe07d46e3e84808d4ebc102" kindref="member">dmg</ref>;</highlight></codeline>
<codeline lineno="378"><highlight class="normal"></highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="structDagImp_1_1Categories_1aa44cc0327e77e78e34eb93f451ad8889" kindref="member">any</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structDagImp_1_1Categories_1a509875fe77af0158bb4bcb366a3f09b4" kindref="member">lod</ref><sp/>||<sp/><ref refid="structDagImp_1_1Categories_1ab947250827de77b24220484843131753" kindref="member">destr</ref><sp/>||<sp/><ref refid="structDagImp_1_1Categories_1a183c0c95383a5e5c5bd3b325fd30d4e3" kindref="member">dp</ref><sp/>||<sp/><ref refid="structDagImp_1_1Categories_1a1e681220bbe07d46e3e84808d4ebc102" kindref="member">dmg</ref>;<sp/>}</highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="structDagImp_1_1Categories_1a9a59aa661923e314dc2309ebce6c28b9" kindref="member">enableAll</ref>()<sp/>{<sp/><ref refid="structDagImp_1_1Categories_1a509875fe77af0158bb4bcb366a3f09b4" kindref="member">lod</ref><sp/>=<sp/><ref refid="structDagImp_1_1Categories_1ab947250827de77b24220484843131753" kindref="member">destr</ref><sp/>=<sp/><ref refid="structDagImp_1_1Categories_1a183c0c95383a5e5c5bd3b325fd30d4e3" kindref="member">dp</ref><sp/>=<sp/><ref refid="structDagImp_1_1Categories_1a1e681220bbe07d46e3e84808d4ebc102" kindref="member">dmg</ref><sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;<sp/>};</highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="382"><highlight class="normal"></highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structDagImp_1_1Categories" kindref="compound">Categories</ref><sp/><ref refid="classDagImp_1a7b2fc6f616381d3743a667637b550f4b" kindref="member">checked</ref>;</highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structDagImp_1_1Categories" kindref="compound">Categories</ref><sp/><ref refid="classDagImp_1ab8197c0af5ecad271da496a2f5ac2095" kindref="member">detected</ref>;</highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>ToolTipExtender<sp/><ref refid="classDagImp_1aab7bf3e54d9079f0425c2bd67c265746" kindref="member">tooltipExtender</ref>;</highlight></codeline>
<codeline lineno="386"><highlight class="normal"></highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>std::vector&lt;TSTR&gt;<sp/><ref refid="classDagImp_1a3555246bf49a7cf63848c468cbf75d26" kindref="member">batchImportFiles</ref>;</highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>std::unordered_set&lt;ImportedFile,<sp/>ImportedFileHash&gt;<sp/><ref refid="classDagImp_1ab8685f3fdc76d40008c8c07f7db3689e" kindref="member">importedFiles</ref>;</highlight></codeline>
<codeline lineno="389"><highlight class="normal"></highlight></codeline>
<codeline lineno="390"><highlight class="normal"></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>doHierImport(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TSTR<sp/>&amp;fname,<sp/>ImpInterface<sp/>*ii,<sp/>Interface<sp/>*ip,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>suppressPrompts);</highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>makeHierLayer(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;TSTR&gt;<sp/>&amp;fnames,<sp/>ImpInterface<sp/>*ii,<sp/>Interface<sp/>*ip,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>nomsg);</highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>makeHierLayer(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TSTR<sp/>&amp;fname,<sp/>ImpInterface<sp/>*ii,<sp/>Interface<sp/>*ip,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>nomsg);</highlight></codeline>
<codeline lineno="394"><highlight class="normal"></highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>doLegacyImport(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TCHAR<sp/>*fname,<sp/>ImpInterface<sp/>*ii,<sp/>Interface<sp/>*ip,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>nomsg);</highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>doBatchImport(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TSTR<sp/>&amp;fname,<sp/>ImpInterface<sp/>*ii,<sp/>Interface<sp/>*ip,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>nomsg);</highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>doMaxscriptImport(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TSTR<sp/>&amp;fname,<sp/>ImpInterface<sp/>*ii,<sp/>Interface<sp/>*ip,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>nomsg);</highlight></codeline>
<codeline lineno="398"><highlight class="normal"></highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isNamesake(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TSTR<sp/>&amp;fname)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="400"><highlight class="normal">};</highlight></codeline>
<codeline lineno="401"><highlight class="normal"></highlight></codeline>
<codeline lineno="402" refid="classDagImpCD" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classDagImpCD" kindref="compound">DagImpCD</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>ClassDesc</highlight></codeline>
<codeline lineno="403"><highlight class="normal">{</highlight></codeline>
<codeline lineno="404"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="classDagImpCD_1a47f56acc8b8044454a05d3b27b41fc18" kindref="member">IsPublic</ref>()</highlight><highlight class="keyword"><sp/>override<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>TRUE;<sp/>}</highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="classDagImpCD_1a33f657bd8bc726efb8e4ecef4ce029a3" kindref="member">Create</ref>(BOOL<sp/>loading)</highlight><highlight class="keyword"><sp/>override<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="classDagImp" kindref="compound">DagImp</ref>;<sp/>}</highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TCHAR<sp/>*<ref refid="classDagImpCD_1a450c26d8ef344ffb18a0e6599b665b31" kindref="member">ClassName</ref>()</highlight><highlight class="keyword"><sp/>override<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="common_8cpp_1aeb87de5dfb5d632579574b4bc8709019" kindref="member">GetString</ref>(<ref refid="resource_8h_1a3f2929fe1ff7d89eef27c09d1048e898" kindref="member">IDS_DAGIMP</ref>);<sp/>}</highlight></codeline>
<codeline lineno="408"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(MAX_RELEASE_R24)<sp/>&amp;&amp;<sp/>MAX_RELEASE<sp/>&gt;=<sp/>MAX_RELEASE_R24</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="max__cpt_8h_1ac2ec3340fbe0c6ea0663fd3923d13fe5" kindref="member">MCHAR</ref><sp/>*<ref refid="classDagImpCD_1ae496ec44a4376165b99a378741ad030d" kindref="member">NonLocalizedClassName</ref>()</highlight><highlight class="keyword"><sp/>override<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classDagImpCD_1a450c26d8ef344ffb18a0e6599b665b31" kindref="member">ClassName</ref>();<sp/>}</highlight></codeline>
<codeline lineno="410"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="max__cpt_8h_1ac2ec3340fbe0c6ea0663fd3923d13fe5" kindref="member">MCHAR</ref><sp/>*<ref refid="classDagImpCD_1ae496ec44a4376165b99a378741ad030d" kindref="member">NonLocalizedClassName</ref>()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classDagImpCD_1a450c26d8ef344ffb18a0e6599b665b31" kindref="member">ClassName</ref>();<sp/>}</highlight></codeline>
<codeline lineno="412"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/>SClass_ID<sp/><ref refid="classDagImpCD_1a1803a96315fdebe759933677df69f733" kindref="member">SuperClassID</ref>()</highlight><highlight class="keyword"><sp/>override<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>SCENE_IMPORT_CLASS_ID;<sp/>}</highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/>Class_ID<sp/><ref refid="classDagImpCD_1af33fa9c5e4ea659014eb7dec055229b0" kindref="member">ClassID</ref>()</highlight><highlight class="keyword"><sp/>override<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="dagor_8h_1a6d186c5220f0d7c29e9ca9ce821cb963" kindref="member">DAGIMP_CID</ref>;<sp/>}</highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TCHAR<sp/>*<ref refid="classDagImpCD_1a04bbee1bd68bdb682f4b8919c10b3418" kindref="member">Category</ref>()</highlight><highlight class="keyword"><sp/>override<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>_T(</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);<sp/>}</highlight></codeline>
<codeline lineno="416"><highlight class="normal"></highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TCHAR<sp/>*<ref refid="classDagImpCD_1a78b119ab29f2d5976bfd6010706a047f" kindref="member">InternalName</ref>()</highlight><highlight class="keyword"><sp/>override<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>_T(</highlight><highlight class="stringliteral">&quot;DagImporter&quot;</highlight><highlight class="normal">);<sp/>}</highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/>HINSTANCE<sp/><ref refid="classDagImpCD_1accfa0c35947e2acdf3bd268e04b303f6" kindref="member">HInstance</ref>()</highlight><highlight class="keyword"><sp/>override<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="dagor_8h_1a74029128723095e7bf00a71d46af8b24" kindref="member">hInstance</ref>;<sp/>}</highlight></codeline>
<codeline lineno="419"><highlight class="normal">};</highlight></codeline>
<codeline lineno="420"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="classDagImpCD" kindref="compound">DagImpCD</ref><sp/>dagimpcd;</highlight></codeline>
<codeline lineno="421"><highlight class="normal"></highlight></codeline>
<codeline lineno="422"><highlight class="normal">ClassDesc<sp/>*<ref refid="dagimp_8cpp_1a29bf723d61dbb94b9dde74ae7c3fe3e0" kindref="member">GetDAGIMPCD</ref>()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>&amp;dagimpcd;<sp/>}</highlight></codeline>
<codeline lineno="423"><highlight class="normal"></highlight></codeline>
<codeline lineno="424"><highlight class="normal"></highlight><highlight class="comment">//===============================================================================//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="425"><highlight class="normal"></highlight></codeline>
<codeline lineno="426" refid="classImpUtil" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classImpUtil" kindref="compound">ImpUtil</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>UtilityObj</highlight></codeline>
<codeline lineno="427"><highlight class="normal">{</highlight></codeline>
<codeline lineno="428"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="429" refid="structImpUtil_1_1Rules" refkind="compound"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structImpUtil_1_1Rules" kindref="compound">Rules</ref></highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="structImpUtil_1_1Rules_1a25d3a31ac97a0a96bc4d70253f3cb027" kindref="member">isWildcard</ref>;</highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;TSTR&gt;<sp/><ref refid="structImpUtil_1_1Rules_1a714be1d9ee0f72ffd6272fb066836009" kindref="member">incl</ref>;</highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;TSTR&gt;<sp/><ref refid="structImpUtil_1_1Rules_1af17e1ad7be0aae9dd0823fa5279f581e" kindref="member">excl</ref>;</highlight></codeline>
<codeline lineno="434"><highlight class="normal"></highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="structImpUtil_1_1Rules" kindref="compound">Rules</ref>(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isWildcard_)<sp/>:<sp/><ref refid="structImpUtil_1_1Rules_1a25d3a31ac97a0a96bc4d70253f3cb027" kindref="member">isWildcard</ref>(isWildcard_)<sp/>{}</highlight></codeline>
<codeline lineno="436"><highlight class="normal"></highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="structImpUtil_1_1Rules_1ae255e8014e6a77028ce11373944a64e7" kindref="member">clear</ref>()</highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structImpUtil_1_1Rules_1a714be1d9ee0f72ffd6272fb066836009" kindref="member">incl</ref>.clear();</highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structImpUtil_1_1Rules_1af17e1ad7be0aae9dd0823fa5279f581e" kindref="member">excl</ref>.clear();</highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="443"><highlight class="normal"></highlight></codeline>
<codeline lineno="444"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/>IUtil<sp/>*<ref refid="classImpUtil_1a6fa3af8024f3fa308c487db77fee6ede" kindref="member">iu</ref>;</highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/>Interface<sp/>*<ref refid="classImpUtil_1abd454717661b78a9507fe23361ed9906" kindref="member">ip</ref>;</highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/>HWND<sp/><ref refid="classImpUtil_1a127fc868d986c3f635b8c1c652624e22" kindref="member">hImpHelp</ref>,<sp/><ref refid="classImpUtil_1acab5fd278f79b1b72c8dcd82af71e061" kindref="member">hImpParam</ref>,<sp/><ref refid="classImpUtil_1afdee8ac4d3b2b7882bdb93cb2fda0b35" kindref="member">hImpPanel</ref>,<sp/><ref refid="classImpUtil_1a2399dee70c6460f25cf0953a1a0de2eb" kindref="member">hTab</ref>,<sp/><ref refid="classImpUtil_1a8ea0b33860fea64c6ecf2a0b900e9e1a" kindref="member">hTabVisible</ref>;</highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="classImpUtil_1abaa4f7a4b5a084beeaccb2921fb2e8dc" kindref="member">selectedTab</ref>;</highlight></codeline>
<codeline lineno="449"><highlight class="normal"></highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/><ref refid="structImpUtil_1_1Rules" kindref="compound">Rules</ref><sp/><ref refid="classImpUtil_1a46b719be93e53180788285db6edd9f23" kindref="member">wildcard</ref>,<sp/><ref refid="classImpUtil_1a3be70cdfe85ab05d0b1729674674f5ec" kindref="member">regex</ref>;</highlight></codeline>
<codeline lineno="451"><highlight class="normal"></highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/>TSTR<sp/><ref refid="classImpUtil_1a674477879ac16175c457b88d0edafef7" kindref="member">dirPath</ref>;</highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/>TSTR<sp/><ref refid="classImpUtil_1a717627038cc29886843554f578b0b3f6" kindref="member">filePath</ref>;</highlight></codeline>
<codeline lineno="454"><highlight class="normal"></highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/>ToolTipExtender<sp/><ref refid="classImpUtil_1a9e360dcd2d3d40b3f112e39e0ed55d32" kindref="member">tooltipExtender</ref>;</highlight></codeline>
<codeline lineno="456"><highlight class="normal"></highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/><ref refid="classImpUtil_1a154d6b3f03b126569f46e0f40b0af63c" kindref="member">ImpUtil</ref>();</highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classImpUtil_1a6e7787bbc39d7632222552ccf0323399" kindref="member">BeginEditParams</ref>(Interface<sp/>*<ref refid="classImpUtil_1abd454717661b78a9507fe23361ed9906" kindref="member">ip</ref>,<sp/>IUtil<sp/>*<ref refid="classImpUtil_1a6fa3af8024f3fa308c487db77fee6ede" kindref="member">iu</ref>)<sp/></highlight><highlight class="keyword">override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classImpUtil_1a202028631f572f0cdb36921b290e885a" kindref="member">EndEditParams</ref>(Interface<sp/>*<ref refid="classImpUtil_1abd454717661b78a9507fe23361ed9906" kindref="member">ip</ref>,<sp/>IUtil<sp/>*<ref refid="classImpUtil_1a6fa3af8024f3fa308c487db77fee6ede" kindref="member">iu</ref>)<sp/></highlight><highlight class="keyword">override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classImpUtil_1ad5a555b35acb06df6ff37fcf351c2292" kindref="member">DeleteThis</ref>()</highlight><highlight class="keyword"><sp/>override<sp/></highlight><highlight class="normal">{}</highlight></codeline>
<codeline lineno="461"><highlight class="normal"></highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/>LPCTSTR<sp/><ref refid="classImpUtil_1a61a1dced2b2f33ab231a454de75480ba" kindref="member">tabResourceName</ref>()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/>DLGPROC<sp/><ref refid="classImpUtil_1ae6f7afa32da78452cee412372791c367" kindref="member">tabDlgProc</ref>()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/>LPARAM<sp/><ref refid="classImpUtil_1af4bbfbee394353e1089d2c6038dbd461" kindref="member">tabInitParam</ref>()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/>LPCTSTR<sp/><ref refid="classImpUtil_1acd2984afc6eb47a284be680ade122a97" kindref="member">tabHelp</ref>()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/>LPCTSTR<sp/><ref refid="classImpUtil_1ac250df592f1b30563f180dc31cf155b7" kindref="member">tabHint</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>index)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="467"><highlight class="normal"></highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classImpUtil_1a74110bb86e1204d3be9e995203c9fef4" kindref="member">updateUi</ref>()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classImpUtil_1a2ffb6fd1ef20d9d0386983a83f3df3ab" kindref="member">updateTab</ref>()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classImpUtil_1a5eb3600bf909ff732723cd66d0d8b561" kindref="member">onTabChanged</ref>(HWND<sp/>hDlg);</highlight></codeline>
<codeline lineno="471"><highlight class="normal"></highlight></codeline>
<codeline lineno="472"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classImpUtil_1acbaed671d5e372cbd174ab4ece37234d" kindref="member">openImportDirectory</ref>()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classImpUtil_1a96b7bdc4d3e30f24b0ee8c9544d7e886" kindref="member">openDocumentation</ref>()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="474"><highlight class="normal"></highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classImpUtil_1a998d5c514b5d8a2f0cddc8c015261035" kindref="member">doImport</ref>();</highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classImpUtil_1a9e9bc30cd434796eb680dd94bb3f809b" kindref="member">doStandardImport</ref>()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="477"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classImpUtil_1a2f146d87460807d80b88287d70ef3376" kindref="member">doRegexImport</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Rules<sp/>&amp;rules);</highlight></codeline>
<codeline lineno="478"><highlight class="normal">};</highlight></codeline>
<codeline lineno="479"><highlight class="normal"></highlight></codeline>
<codeline lineno="480"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="classImpUtil" kindref="compound">ImpUtil</ref><sp/>util;</highlight></codeline>
<codeline lineno="481"><highlight class="normal"></highlight></codeline>
<codeline lineno="482"><highlight class="normal"><ref refid="classImpUtil_1a154d6b3f03b126569f46e0f40b0af63c" kindref="member">ImpUtil::ImpUtil</ref>()<sp/>:</highlight></codeline>
<codeline lineno="483"><highlight class="normal"><sp/><sp/>iu(0),</highlight></codeline>
<codeline lineno="484"><highlight class="normal"><sp/><sp/>ip(0),</highlight></codeline>
<codeline lineno="485"><highlight class="normal"><sp/><sp/>hImpHelp(0),</highlight></codeline>
<codeline lineno="486"><highlight class="normal"><sp/><sp/>hImpParam(0),</highlight></codeline>
<codeline lineno="487"><highlight class="normal"><sp/><sp/>hImpPanel(0),</highlight></codeline>
<codeline lineno="488"><highlight class="normal"><sp/><sp/>hTab(0),</highlight></codeline>
<codeline lineno="489"><highlight class="normal"><sp/><sp/>hTabVisible(0),</highlight></codeline>
<codeline lineno="490"><highlight class="normal"><sp/><sp/>selectedTab(1),</highlight></codeline>
<codeline lineno="491"><highlight class="normal"><sp/><sp/>wildcard(true),</highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/><sp/>regex(false),</highlight></codeline>
<codeline lineno="493"><highlight class="normal"><sp/><sp/>dirPath(_T(</highlight><highlight class="stringliteral">&quot;c:\\tmp&quot;</highlight><highlight class="normal">))</highlight></codeline>
<codeline lineno="494"><highlight class="normal">{}</highlight></codeline>
<codeline lineno="495"><highlight class="normal"></highlight></codeline>
<codeline lineno="496"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classImpUtil_1a74110bb86e1204d3be9e995203c9fef4" kindref="member">ImpUtil::updateUi</ref>()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="497"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="498"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="classImpUtil_1afdee8ac4d3b2b7882bdb93cb2fda0b35" kindref="member">hImpPanel</ref>)</highlight></codeline>
<codeline lineno="499"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="500"><highlight class="normal"></highlight></codeline>
<codeline lineno="501"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(<ref refid="classImpUtil_1abaa4f7a4b5a084beeaccb2921fb2e8dc" kindref="member">selectedTab</ref>)</highlight></codeline>
<codeline lineno="502"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="503"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>0:<sp/>CheckDlgButton(<ref refid="classImpUtil_1a8ea0b33860fea64c6ecf2a0b900e9e1a" kindref="member">hTabVisible</ref>,<sp/><ref refid="resource_8h_1ab49353df03e46091e60caf3aeb6b1a9c" kindref="member">IDC_SEPARATE_LAYERS</ref>,<sp/><ref refid="classDagImp_1a1d12c2444eae41164409f661f59a25b8" kindref="member">DagImp::separateLayers</ref>);<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="504"><highlight class="normal"></highlight></codeline>
<codeline lineno="505"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>1:</highlight></codeline>
<codeline lineno="506"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>CheckDlgButton(<ref refid="classImpUtil_1a8ea0b33860fea64c6ecf2a0b900e9e1a" kindref="member">hTabVisible</ref>,<sp/><ref refid="resource_8h_1add3e571034800bbfd52e5a8c9dc5f703" kindref="member">IDC_IMPORT_LOD</ref>,<sp/><ref refid="classDagImp_1a7b2fc6f616381d3743a667637b550f4b" kindref="member">DagImp::checked</ref>.lod);</highlight></codeline>
<codeline lineno="507"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>CheckDlgButton(<ref refid="classImpUtil_1a8ea0b33860fea64c6ecf2a0b900e9e1a" kindref="member">hTabVisible</ref>,<sp/><ref refid="resource_8h_1a9d8c27492b3468efc9f9d9c3ba210f5e" kindref="member">IDC_IMPORT_DP</ref>,<sp/><ref refid="classDagImp_1a7b2fc6f616381d3743a667637b550f4b" kindref="member">DagImp::checked</ref>.dp);</highlight></codeline>
<codeline lineno="508"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>CheckDlgButton(<ref refid="classImpUtil_1a8ea0b33860fea64c6ecf2a0b900e9e1a" kindref="member">hTabVisible</ref>,<sp/><ref refid="resource_8h_1a6322bcd9958d0205b8504798e7682c56" kindref="member">IDC_IMPORT_DMG</ref>,<sp/><ref refid="classDagImp_1a7b2fc6f616381d3743a667637b550f4b" kindref="member">DagImp::checked</ref>.dmg);</highlight></codeline>
<codeline lineno="509"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>CheckDlgButton(<ref refid="classImpUtil_1a8ea0b33860fea64c6ecf2a0b900e9e1a" kindref="member">hTabVisible</ref>,<sp/><ref refid="resource_8h_1abad6b5a5c1619c41a66cd69f1f67ef02" kindref="member">IDC_IMPORT_DESTR</ref>,<sp/><ref refid="classDagImp_1a7b2fc6f616381d3743a667637b550f4b" kindref="member">DagImp::checked</ref>.destr);</highlight></codeline>
<codeline lineno="510"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>CheckDlgButton(<ref refid="classImpUtil_1a8ea0b33860fea64c6ecf2a0b900e9e1a" kindref="member">hTabVisible</ref>,<sp/>(!<ref refid="classDagImp_1a6a73e019f74e964f8a0121334ffb9903" kindref="member">DagImp::reimportExisting</ref><sp/>?<sp/><ref refid="resource_8h_1a49180c0940a8073669c4611dd1af6bbe" kindref="member">IDC_RENAME_NEW_LAYER</ref><sp/>:<sp/><ref refid="resource_8h_1a3c186b8cc23d9243cbfc1628022cfb06" kindref="member">IDC_REPLACE_EXISTING_LAYER</ref>),<sp/>true);</highlight></codeline>
<codeline lineno="511"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>CheckDlgButton(<ref refid="classImpUtil_1a8ea0b33860fea64c6ecf2a0b900e9e1a" kindref="member">hTabVisible</ref>,<sp/>(<ref refid="classDagImp_1a6a73e019f74e964f8a0121334ffb9903" kindref="member">DagImp::reimportExisting</ref><sp/>?<sp/><ref refid="resource_8h_1a49180c0940a8073669c4611dd1af6bbe" kindref="member">IDC_RENAME_NEW_LAYER</ref><sp/>:<sp/><ref refid="resource_8h_1a3c186b8cc23d9243cbfc1628022cfb06" kindref="member">IDC_REPLACE_EXISTING_LAYER</ref>),<sp/>false);</highlight></codeline>
<codeline lineno="512"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="513"><highlight class="normal"></highlight></codeline>
<codeline lineno="514"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="515"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="516"><highlight class="normal"></highlight></codeline>
<codeline lineno="517"><highlight class="normal"><sp/><sp/>SetDlgItemText(<ref refid="classImpUtil_1afdee8ac4d3b2b7882bdb93cb2fda0b35" kindref="member">hImpPanel</ref>,<sp/><ref refid="resource_8h_1abb5cc701f25306ac5f24f59d96471e8c" kindref="member">IDC_DAGORPATH</ref>,<sp/><ref refid="classImpUtil_1a717627038cc29886843554f578b0b3f6" kindref="member">filePath</ref>.data());</highlight></codeline>
<codeline lineno="518"><highlight class="normal">}</highlight></codeline>
<codeline lineno="519"><highlight class="normal"></highlight></codeline>
<codeline lineno="520"><highlight class="normal">LPCTSTR<sp/><ref refid="classImpUtil_1a61a1dced2b2f33ab231a454de75480ba" kindref="member">ImpUtil::tabResourceName</ref>()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="521"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="522"><highlight class="normal"><sp/><sp/>assert(<ref refid="classImpUtil_1abaa4f7a4b5a084beeaccb2921fb2e8dc" kindref="member">selectedTab</ref><sp/>&lt;<sp/>4);</highlight></codeline>
<codeline lineno="523"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>LPCTSTR<sp/>data[]<sp/>=<sp/>{MAKEINTRESOURCE(<ref refid="resource_8h_1a73c9a0640bbbe10ed9d3387add75a765" kindref="member">IDD_IMPUTIL_LEGACY</ref>),<sp/>MAKEINTRESOURCE(<ref refid="resource_8h_1a90d8027d4da23a71b9429ad1805d48aa" kindref="member">IDD_IMPUTIL_STANDARD</ref>),</highlight></codeline>
<codeline lineno="524"><highlight class="normal"><sp/><sp/><sp/><sp/>MAKEINTRESOURCE(<ref refid="resource_8h_1a60e20140438c9a01d609282f47e672eb" kindref="member">IDD_IMPUTIL_REGEX</ref>),<sp/>MAKEINTRESOURCE(<ref refid="resource_8h_1a60e20140438c9a01d609282f47e672eb" kindref="member">IDD_IMPUTIL_REGEX</ref>)};</highlight></codeline>
<codeline lineno="525"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>data[<ref refid="classImpUtil_1abaa4f7a4b5a084beeaccb2921fb2e8dc" kindref="member">selectedTab</ref>];</highlight></codeline>
<codeline lineno="526"><highlight class="normal">}</highlight></codeline>
<codeline lineno="527"><highlight class="normal"></highlight></codeline>
<codeline lineno="528"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>INT_PTR<sp/>CALLBACK<sp/>legacy_dlg_proc(HWND<sp/>hDlg,<sp/>UINT<sp/>message,<sp/>WPARAM<sp/>wParam,<sp/>LPARAM<sp/>lParam);</highlight></codeline>
<codeline lineno="529"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>INT_PTR<sp/>CALLBACK<sp/>standard_dlg_proc(HWND<sp/>hDlg,<sp/>UINT<sp/>message,<sp/>WPARAM<sp/>wParam,<sp/>LPARAM<sp/>lParam);</highlight></codeline>
<codeline lineno="530"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>INT_PTR<sp/>CALLBACK<sp/>regex_dlg_proc(HWND<sp/>hDlg,<sp/>UINT<sp/>message,<sp/>WPARAM<sp/>wParam,<sp/>LPARAM<sp/>lParam);</highlight></codeline>
<codeline lineno="531"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>INT_PTR<sp/>CALLBACK<sp/>regex_dlg_proc(HWND<sp/>hDlg,<sp/>UINT<sp/>message,<sp/>WPARAM<sp/>wParam,<sp/>LPARAM<sp/>lParam);</highlight></codeline>
<codeline lineno="532"><highlight class="normal"></highlight></codeline>
<codeline lineno="533"><highlight class="normal">DLGPROC<sp/><ref refid="classImpUtil_1ae6f7afa32da78452cee412372791c367" kindref="member">ImpUtil::tabDlgProc</ref>()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="534"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="535"><highlight class="normal"><sp/><sp/>assert(<ref refid="classImpUtil_1abaa4f7a4b5a084beeaccb2921fb2e8dc" kindref="member">selectedTab</ref><sp/>&lt;<sp/>4);</highlight></codeline>
<codeline lineno="536"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>DLGPROC<sp/>data[]<sp/>=<sp/>{legacy_dlg_proc,<sp/>standard_dlg_proc,<sp/>regex_dlg_proc,<sp/>regex_dlg_proc};</highlight></codeline>
<codeline lineno="537"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>data[<ref refid="classImpUtil_1abaa4f7a4b5a084beeaccb2921fb2e8dc" kindref="member">selectedTab</ref>];</highlight></codeline>
<codeline lineno="538"><highlight class="normal">}</highlight></codeline>
<codeline lineno="539"><highlight class="normal"></highlight></codeline>
<codeline lineno="540"><highlight class="normal">LPARAM<sp/><ref refid="classImpUtil_1af4bbfbee394353e1089d2c6038dbd461" kindref="member">ImpUtil::tabInitParam</ref>()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="541"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="542"><highlight class="normal"><sp/><sp/>assert(<ref refid="classImpUtil_1abaa4f7a4b5a084beeaccb2921fb2e8dc" kindref="member">selectedTab</ref><sp/>&lt;<sp/>4);</highlight></codeline>
<codeline lineno="543"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>LPARAM<sp/>data[]<sp/>=<sp/>{0,<sp/>0,<sp/>(LPARAM)&amp;<ref refid="classImpUtil_1a46b719be93e53180788285db6edd9f23" kindref="member">wildcard</ref>,<sp/>(LPARAM)&amp;<ref refid="classImpUtil_1a3be70cdfe85ab05d0b1729674674f5ec" kindref="member">regex</ref>};</highlight></codeline>
<codeline lineno="544"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>data[<ref refid="classImpUtil_1abaa4f7a4b5a084beeaccb2921fb2e8dc" kindref="member">selectedTab</ref>];</highlight></codeline>
<codeline lineno="545"><highlight class="normal">}</highlight></codeline>
<codeline lineno="546"><highlight class="normal"></highlight></codeline>
<codeline lineno="547"><highlight class="normal">LPCTSTR<sp/><ref refid="classImpUtil_1acd2984afc6eb47a284be680ade122a97" kindref="member">ImpUtil::tabHelp</ref>()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="548"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="549"><highlight class="normal"><sp/><sp/>assert(<ref refid="classImpUtil_1abaa4f7a4b5a084beeaccb2921fb2e8dc" kindref="member">selectedTab</ref><sp/>&lt;<sp/>4);</highlight></codeline>
<codeline lineno="550"><highlight class="normal"></highlight></codeline>
<codeline lineno="551"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>clang-format<sp/>off</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="552"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>LPCTSTR<sp/>data[]<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="553"><highlight class="normal"><sp/><sp/><sp/><sp/>_T(</highlight><highlight class="stringliteral">&quot;Use<sp/>the<sp/>previous<sp/>import<sp/>method:\n&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="554"><highlight class="normal"><sp/><sp/><sp/><sp/>_T(&quot;detect<sp/>linked<sp/>DAGs\n&quot;)</highlight></codeline>
<codeline lineno="555"><highlight class="normal"><sp/><sp/><sp/><sp/>_T(&quot;and<sp/>load<sp/>them<sp/>at<sp/>once\n&quot;)</highlight></codeline>
<codeline lineno="556"><highlight class="normal"><sp/><sp/><sp/><sp/>_T(&quot;into<sp/>separate<sp/>layers.&quot;),</highlight></codeline>
<codeline lineno="557"><highlight class="normal"></highlight></codeline>
<codeline lineno="558"><highlight class="normal"><sp/><sp/><sp/><sp/>_T(&quot;Import<sp/>\&quot;*<sp/>.dag\&quot;\nand<sp/>related<sp/>variations.&quot;),</highlight></codeline>
<codeline lineno="559"><highlight class="normal"></highlight></codeline>
<codeline lineno="560"><highlight class="normal"><sp/><sp/><sp/><sp/>_T(&quot;Uses<sp/>fnmatch-like<sp/>syntax\n&quot;)</highlight></codeline>
<codeline lineno="561"><highlight class="normal"><sp/><sp/><sp/><sp/>_T(&quot;to<sp/>check<sp/>asset<sp/>names.\n&quot;)</highlight></codeline>
<codeline lineno="562"><highlight class="normal"><sp/><sp/><sp/><sp/>_T(&quot;<sp/>*<sp/>anything\n&quot;)</highlight></codeline>
<codeline lineno="563"><highlight class="normal"><sp/><sp/><sp/><sp/>_T(&quot;<sp/>?<sp/>any<sp/>single<sp/>character\n&quot;)</highlight></codeline>
<codeline lineno="564"><highlight class="normal"><sp/><sp/><sp/><sp/>_T(&quot;[seq]<sp/><sp/>any<sp/>character<sp/>in<sp/>seq\n&quot;)</highlight></codeline>
<codeline lineno="565"><highlight class="normal"><sp/><sp/><sp/><sp/>_T(&quot;[!seq]<sp/>any<sp/>character<sp/>not<sp/>in<sp/>seq\n&quot;),</highlight></codeline>
<codeline lineno="566"><highlight class="normal"></highlight></codeline>
<codeline lineno="567"><highlight class="normal"><sp/><sp/><sp/><sp/>_T(&quot;Uses<sp/>regular<sp/>expressions\n&quot;)</highlight></codeline>
<codeline lineno="568"><highlight class="normal"><sp/><sp/><sp/><sp/>_T(&quot;to<sp/>check<sp/>asset<sp/>names.\n&quot;)</highlight></codeline>
<codeline lineno="569"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="570"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>clang-format<sp/>on</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="571"><highlight class="normal"></highlight></codeline>
<codeline lineno="572"><highlight class="normal"><sp/><sp/><ref refid="polyBumpUtil_8cpp_1a9717e7bbecb906637e86cef6da3d83c2" kindref="member">return</ref><sp/>data[<ref refid="classImpUtil_1abaa4f7a4b5a084beeaccb2921fb2e8dc" kindref="member">selectedTab</ref>];</highlight></codeline>
<codeline lineno="573"><highlight class="normal">}</highlight></codeline>
<codeline lineno="574"><highlight class="normal"></highlight></codeline>
<codeline lineno="575"><highlight class="normal">LPCTSTR<sp/><ref refid="classImpUtil" kindref="compound">ImpUtil</ref>::<ref refid="classImpUtil_1ac250df592f1b30563f180dc31cf155b7" kindref="member">tabHint</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>index)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="576"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="577"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>clang-format<sp/>off</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="578"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>LPCTSTR<sp/>data[]<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="579"><highlight class="normal"><sp/><sp/><sp/><sp/>_T(</highlight><highlight class="stringliteral">&quot;The<sp/>previous<sp/>import<sp/>method&quot;</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="580"><highlight class="normal"><sp/><sp/><sp/><sp/>_T(</highlight><highlight class="stringliteral">&quot;Import<sp/>single<sp/>asset<sp/>and<sp/>its<sp/>related<sp/>files&quot;</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="581"><highlight class="normal"><sp/><sp/><sp/><sp/>_T(</highlight><highlight class="stringliteral">&quot;Import<sp/>multiple<sp/>assets<sp/>using<sp/>fnmatch<sp/>search&quot;</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="582"><highlight class="normal"><sp/><sp/><sp/><sp/>_T(</highlight><highlight class="stringliteral">&quot;Import<sp/>multiple<sp/>assets<sp/>using<sp/>regular<sp/>expressions<sp/>for<sp/>search&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="583"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="584"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>clang-format<sp/>on</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="585"><highlight class="normal"></highlight></codeline>
<codeline lineno="586"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(0<sp/>&lt;=<sp/>index<sp/>&amp;&amp;<sp/>index<sp/>&lt;=<sp/>3)<sp/>?<sp/>data[index]<sp/>:<sp/>_T(</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="587"><highlight class="normal">}</highlight></codeline>
<codeline lineno="588"><highlight class="normal"></highlight></codeline>
<codeline lineno="589"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classImpUtil_1a2ffb6fd1ef20d9d0386983a83f3df3ab" kindref="member">ImpUtil::updateTab</ref>()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="590"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="591"><highlight class="normal"><sp/><sp/>RECT<sp/>rc;</highlight></codeline>
<codeline lineno="592"><highlight class="normal"><sp/><sp/>GetClientRect(<ref refid="classImpUtil_1a2399dee70c6460f25cf0953a1a0de2eb" kindref="member">hTab</ref>,<sp/>&amp;rc);</highlight></codeline>
<codeline lineno="593"><highlight class="normal"><sp/><sp/>TabCtrl_AdjustRect(<ref refid="classImpUtil_1a2399dee70c6460f25cf0953a1a0de2eb" kindref="member">hTab</ref>,<sp/>FALSE,<sp/>&amp;rc);</highlight></codeline>
<codeline lineno="594"><highlight class="normal"><sp/><sp/>MoveWindow(<ref refid="classImpUtil_1a8ea0b33860fea64c6ecf2a0b900e9e1a" kindref="member">hTabVisible</ref>,<sp/>rc.left,<sp/>rc.top<sp/>*<sp/>1.2,<sp/>rc.right<sp/>-<sp/>rc.left,<sp/>rc.bottom<sp/>-<sp/>rc.top,<sp/>TRUE);</highlight></codeline>
<codeline lineno="595"><highlight class="normal"></highlight></codeline>
<codeline lineno="596"><highlight class="normal"><sp/><sp/>RECT<sp/>rct;</highlight></codeline>
<codeline lineno="597"><highlight class="normal"><sp/><sp/>GetWindowRect(<ref refid="classImpUtil_1a8ea0b33860fea64c6ecf2a0b900e9e1a" kindref="member">hTabVisible</ref>,<sp/>&amp;rct);</highlight></codeline>
<codeline lineno="598"><highlight class="normal"><sp/><sp/><ref refid="layout_8h_1a0f78de1e7a5f8967c29550905ff30670" kindref="member">update_layout</ref>(<ref refid="classImpUtil_1a8ea0b33860fea64c6ecf2a0b900e9e1a" kindref="member">hTabVisible</ref>,<sp/>MAKELPARAM(rc.right<sp/>-<sp/>rc.left,<sp/>rct.bottom<sp/>-<sp/>rct.top));</highlight></codeline>
<codeline lineno="599"><highlight class="normal"></highlight></codeline>
<codeline lineno="600"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>hack:<sp/>force<sp/>repaint<sp/>ALL<sp/>the<sp/>area<sp/>of<sp/>the<sp/>panel</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="601"><highlight class="normal"><sp/><sp/>ShowWindow(<ref refid="classImpUtil_1a8ea0b33860fea64c6ecf2a0b900e9e1a" kindref="member">hTabVisible</ref>,<sp/>SW_HIDE);</highlight></codeline>
<codeline lineno="602"><highlight class="normal"><sp/><sp/>ShowWindow(<ref refid="classImpUtil_1a8ea0b33860fea64c6ecf2a0b900e9e1a" kindref="member">hTabVisible</ref>,<sp/>SW_SHOW);</highlight></codeline>
<codeline lineno="603"><highlight class="normal">}</highlight></codeline>
<codeline lineno="604"><highlight class="normal"></highlight></codeline>
<codeline lineno="605"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classImpUtil_1a5eb3600bf909ff732723cd66d0d8b561" kindref="member">ImpUtil::onTabChanged</ref>(HWND<sp/>hDlg)</highlight></codeline>
<codeline lineno="606"><highlight class="normal">{</highlight></codeline>
<codeline lineno="607"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="classImpUtil_1a2399dee70c6460f25cf0953a1a0de2eb" kindref="member">hTab</ref>)</highlight></codeline>
<codeline lineno="608"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="609"><highlight class="normal"></highlight></codeline>
<codeline lineno="610"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classImpUtil_1a8ea0b33860fea64c6ecf2a0b900e9e1a" kindref="member">hTabVisible</ref>)</highlight></codeline>
<codeline lineno="611"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="612"><highlight class="normal"><sp/><sp/><sp/><sp/>DestroyWindow(<ref refid="classImpUtil_1a8ea0b33860fea64c6ecf2a0b900e9e1a" kindref="member">hTabVisible</ref>);</highlight></codeline>
<codeline lineno="613"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classImpUtil_1a8ea0b33860fea64c6ecf2a0b900e9e1a" kindref="member">hTabVisible</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="614"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="615"><highlight class="normal"></highlight></codeline>
<codeline lineno="616"><highlight class="normal"><sp/><sp/><ref refid="classImpUtil_1abaa4f7a4b5a084beeaccb2921fb2e8dc" kindref="member">selectedTab</ref><sp/>=<sp/>TabCtrl_GetCurSel(<ref refid="classImpUtil_1a2399dee70c6460f25cf0953a1a0de2eb" kindref="member">hTab</ref>);</highlight></codeline>
<codeline lineno="617"><highlight class="normal"><sp/><sp/>assert(<ref refid="classImpUtil_1abaa4f7a4b5a084beeaccb2921fb2e8dc" kindref="member">selectedTab</ref><sp/>&gt;=<sp/>0<sp/>&amp;&amp;<sp/><ref refid="classImpUtil_1abaa4f7a4b5a084beeaccb2921fb2e8dc" kindref="member">selectedTab</ref><sp/>&lt;=<sp/>3);</highlight></codeline>
<codeline lineno="618"><highlight class="normal"><sp/><sp/><ref refid="classDagImp_1ae89838cf454485eaab1a6f5b752f4c15" kindref="member">DagImp::useLegacyImport</ref><sp/>=<sp/>(<ref refid="classImpUtil_1abaa4f7a4b5a084beeaccb2921fb2e8dc" kindref="member">selectedTab</ref><sp/>==<sp/>0);</highlight></codeline>
<codeline lineno="619"><highlight class="normal"></highlight></codeline>
<codeline lineno="620"><highlight class="normal"><sp/><sp/><ref refid="classImpUtil_1a8ea0b33860fea64c6ecf2a0b900e9e1a" kindref="member">hTabVisible</ref><sp/>=<sp/>CreateDialogParam(<ref refid="dagor_8h_1a74029128723095e7bf00a71d46af8b24" kindref="member">hInstance</ref>,<sp/><ref refid="classImpUtil_1a61a1dced2b2f33ab231a454de75480ba" kindref="member">tabResourceName</ref>(),<sp/>hDlg,<sp/><ref refid="classImpUtil_1ae6f7afa32da78452cee412372791c367" kindref="member">tabDlgProc</ref>(),<sp/><ref refid="classImpUtil_1af4bbfbee394353e1089d2c6038dbd461" kindref="member">tabInitParam</ref>());</highlight></codeline>
<codeline lineno="621"><highlight class="normal"><sp/><sp/><ref refid="layout_8h_1a669eed1f4b64faa16a46a73d7ea88298" kindref="member">attach_layout_to_dialog</ref>(<ref refid="classImpUtil_1a8ea0b33860fea64c6ecf2a0b900e9e1a" kindref="member">hTabVisible</ref>,<sp/><ref refid="classImpUtil_1a61a1dced2b2f33ab231a454de75480ba" kindref="member">tabResourceName</ref>());</highlight></codeline>
<codeline lineno="622"><highlight class="normal"><sp/><sp/><ref refid="classImpUtil_1a2ffb6fd1ef20d9d0386983a83f3df3ab" kindref="member">updateTab</ref>();</highlight></codeline>
<codeline lineno="623"><highlight class="normal"></highlight></codeline>
<codeline lineno="624"><highlight class="normal"><sp/><sp/>SetWindowText(GetDlgItem(<ref refid="classImpUtil_1a127fc868d986c3f635b8c1c652624e22" kindref="member">hImpHelp</ref>,<sp/><ref refid="resource_8h_1a37f587596b464239581b844e04dda1da" kindref="member">IDC_STATIC1</ref>),<sp/><ref refid="classImpUtil_1acd2984afc6eb47a284be680ade122a97" kindref="member">tabHelp</ref>());</highlight></codeline>
<codeline lineno="625"><highlight class="normal"><sp/><sp/>EnableWindow(GetDlgItem(<ref refid="classImpUtil_1a127fc868d986c3f635b8c1c652624e22" kindref="member">hImpHelp</ref>,<sp/><ref refid="resource_8h_1ac87f12c41e8687b432d22a07d18bef92" kindref="member">IDC_OPEN_DOC</ref>),<sp/><ref refid="classImpUtil_1abaa4f7a4b5a084beeaccb2921fb2e8dc" kindref="member">selectedTab</ref><sp/>&gt;=<sp/>2);</highlight></codeline>
<codeline lineno="626"><highlight class="normal"></highlight></codeline>
<codeline lineno="627"><highlight class="normal"><sp/><sp/>EnableWindow(GetDlgItem(<ref refid="classImpUtil_1acab5fd278f79b1b72c8dcd82af71e061" kindref="member">hImpParam</ref>,<sp/><ref refid="resource_8h_1ad907d3b990dc93c78d60047e8d7edd77" kindref="member">IDC_SEARCH_IN_SUBFOLDERS</ref>),<sp/><ref refid="classImpUtil_1abaa4f7a4b5a084beeaccb2921fb2e8dc" kindref="member">selectedTab</ref><sp/>&gt;=<sp/>1);</highlight></codeline>
<codeline lineno="628"><highlight class="normal"><sp/><sp/>EnableWindow(GetDlgItem(<ref refid="classImpUtil_1acab5fd278f79b1b72c8dcd82af71e061" kindref="member">hImpParam</ref>,<sp/><ref refid="resource_8h_1aa6ab808ecee7a9c1230440bc1f659085" kindref="member">IDC_REIMPORT_EXISTING</ref>),<sp/><ref refid="classImpUtil_1abaa4f7a4b5a084beeaccb2921fb2e8dc" kindref="member">selectedTab</ref><sp/>&gt;=<sp/>1);</highlight></codeline>
<codeline lineno="629"><highlight class="normal">}</highlight></codeline>
<codeline lineno="630"><highlight class="normal"></highlight></codeline>
<codeline lineno="631"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>do_open_import_directory(TSTR<sp/>&amp;path)</highlight></codeline>
<codeline lineno="632"><highlight class="normal">{</highlight></codeline>
<codeline lineno="633"><highlight class="normal"><sp/><sp/>DWORD<sp/>attr<sp/>=<sp/>GetFileAttributes(path.data());</highlight></codeline>
<codeline lineno="634"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!(attr<sp/>&amp;<sp/>FILE_ATTRIBUTE_DIRECTORY))</highlight></codeline>
<codeline lineno="635"><highlight class="normal"><sp/><sp/><sp/><sp/>path<sp/>=<sp/><ref refid="common_8cpp_1a49afa681b6ba6f6b96b8a8e17a58a362" kindref="member">extract_directory</ref>(path);</highlight></codeline>
<codeline lineno="636"><highlight class="normal"></highlight></codeline>
<codeline lineno="637"><highlight class="normal"><sp/><sp/>INT_PTR<sp/>result<sp/>=<sp/>(INT_PTR)ShellExecute(NULL,<sp/>_T(</highlight><highlight class="stringliteral">&quot;explore&quot;</highlight><highlight class="normal">),<sp/>path.data(),<sp/>NULL,<sp/>NULL,<sp/>SW_SHOW);</highlight></codeline>
<codeline lineno="638"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(result<sp/>&lt;=<sp/>32)</highlight></codeline>
<codeline lineno="639"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="640"><highlight class="normal"></highlight></codeline>
<codeline lineno="641"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="642"><highlight class="normal">}</highlight></codeline>
<codeline lineno="643"><highlight class="normal"></highlight></codeline>
<codeline lineno="644"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classImpUtil_1acbaed671d5e372cbd174ab4ece37234d" kindref="member">ImpUtil::openImportDirectory</ref>()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="645"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="646"><highlight class="normal"><sp/><sp/>TSTR<sp/>path<sp/>=<sp/>(<ref refid="classImpUtil_1abaa4f7a4b5a084beeaccb2921fb2e8dc" kindref="member">selectedTab</ref><sp/>&lt;=<sp/>1)<sp/>?<sp/><ref refid="classImpUtil_1a717627038cc29886843554f578b0b3f6" kindref="member">filePath</ref>.data()<sp/>:<sp/><ref refid="classImpUtil_1a674477879ac16175c457b88d0edafef7" kindref="member">dirPath</ref>.data();</highlight></codeline>
<codeline lineno="647"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(path.isNull()<sp/>||<sp/>!do_open_import_directory(path))</highlight></codeline>
<codeline lineno="648"><highlight class="normal"><sp/><sp/><sp/><sp/>MessageBox(NULL,<sp/>(TSTR(_T(</highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>open<sp/>directory:<sp/>\&quot;&quot;</highlight><highlight class="normal">))<sp/>+<sp/>path<sp/>+<sp/>TSTR(_T(</highlight><highlight class="stringliteral">&quot;\&quot;&quot;</highlight><highlight class="normal">))).data(),<sp/>_T(</highlight><highlight class="stringliteral">&quot;Error&quot;</highlight><highlight class="normal">),<sp/>MB_ICONERROR<sp/>|<sp/>MB_OK);</highlight></codeline>
<codeline lineno="649"><highlight class="normal">}</highlight></codeline>
<codeline lineno="650"><highlight class="normal"></highlight></codeline>
<codeline lineno="651"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classImpUtil_1a96b7bdc4d3e30f24b0ee8c9544d7e886" kindref="member">ImpUtil::openDocumentation</ref>()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="652"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="653"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>clang-format<sp/>off</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="654"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TSTR<sp/>url[]<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="655"><highlight class="normal"><sp/><sp/><sp/><sp/>_T(</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="656"><highlight class="normal"><sp/><sp/><sp/><sp/>_T(</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="657"><highlight class="normal"><sp/><sp/><sp/><sp/>_T(</highlight><highlight class="stringliteral">&quot;https://docs.python.org/3/library/fnmatch.html&quot;</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="658"><highlight class="normal"><sp/><sp/><sp/><sp/>_T(</highlight><highlight class="stringliteral">&quot;https://docs.python.org/3/library/re.html#regular-expression-syntax&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="659"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="660"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>clang-format<sp/>on</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="661"><highlight class="normal"></highlight></codeline>
<codeline lineno="662"><highlight class="normal"><sp/><sp/>ShellExecute(NULL,<sp/>_T(</highlight><highlight class="stringliteral">&quot;open&quot;</highlight><highlight class="normal">),<sp/>url[<ref refid="classImpUtil_1abaa4f7a4b5a084beeaccb2921fb2e8dc" kindref="member">selectedTab</ref>],<sp/>NULL,<sp/>NULL,<sp/>SW_SHOWNORMAL);</highlight></codeline>
<codeline lineno="663"><highlight class="normal">}</highlight></codeline>
<codeline lineno="664"><highlight class="normal"></highlight></codeline>
<codeline lineno="665"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>is_regex_empty(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TSTR<sp/>&amp;re)</highlight></codeline>
<codeline lineno="666"><highlight class="normal">{</highlight></codeline>
<codeline lineno="667"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>rule<sp/>that<sp/>consists<sp/>solely<sp/>of<sp/>spaces<sp/>is<sp/>invalid</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="668"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>re.Length();<sp/>++i)</highlight></codeline>
<codeline lineno="669"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(re[i]<sp/>!=<sp/>_T(</highlight><highlight class="charliteral">&apos;<sp/>&apos;</highlight><highlight class="normal">))</highlight></codeline>
<codeline lineno="670"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="671"><highlight class="normal"></highlight></codeline>
<codeline lineno="672"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="673"><highlight class="normal">}</highlight></codeline>
<codeline lineno="674"><highlight class="normal"></highlight></codeline>
<codeline lineno="675"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>is_regex_valid(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isWildcard,<sp/>TSTR<sp/>&amp;re)</highlight></codeline>
<codeline lineno="676"><highlight class="normal">{</highlight></codeline>
<codeline lineno="677"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(is_regex_empty(re))</highlight></codeline>
<codeline lineno="678"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="679"><highlight class="normal"></highlight></codeline>
<codeline lineno="680"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="681"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="682"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(isWildcard)</highlight></codeline>
<codeline lineno="683"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>re<sp/>=<sp/>fnmatch_to_regex(re.data()).data();</highlight></codeline>
<codeline lineno="684"><highlight class="normal"></highlight></codeline>
<codeline lineno="685"><highlight class="normal"><sp/><sp/><sp/><sp/>std::wregex<sp/>reg(re,<sp/>std::regex_constants::icase);</highlight></codeline>
<codeline lineno="686"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="687"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal"><sp/>(std::regex_error)</highlight></codeline>
<codeline lineno="688"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="689"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="690"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="691"><highlight class="normal"></highlight></codeline>
<codeline lineno="692"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="693"><highlight class="normal">}</highlight></codeline>
<codeline lineno="694"><highlight class="normal"></highlight></codeline>
<codeline lineno="695"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>std::vector&lt;TSTR&gt;<sp/>get_valid_rules(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isWildcard,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;TSTR&gt;<sp/>&amp;rules)</highlight></codeline>
<codeline lineno="696"><highlight class="normal">{</highlight></codeline>
<codeline lineno="697"><highlight class="normal"><sp/><sp/>std::vector&lt;TSTR&gt;<sp/>result;</highlight></codeline>
<codeline lineno="698"><highlight class="normal"><sp/><sp/>result.reserve(rules.size());</highlight></codeline>
<codeline lineno="699"><highlight class="normal"></highlight></codeline>
<codeline lineno="700"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(TSTR<sp/>r<sp/>:<sp/>rules)</highlight></codeline>
<codeline lineno="701"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="polyBumpUtil_8cpp_1a7699f0fa17b7a8c6cc60895b6ec8bb97" kindref="member">if</ref><sp/>(is_regex_valid(isWildcard,<sp/>r))</highlight></codeline>
<codeline lineno="702"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>result.push_back(r);</highlight></codeline>
<codeline lineno="703"><highlight class="normal"></highlight></codeline>
<codeline lineno="704"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="705"><highlight class="normal">}</highlight></codeline>
<codeline lineno="706"><highlight class="normal"></highlight></codeline>
<codeline lineno="707"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classImpUtil_1a9e9bc30cd434796eb680dd94bb3f809b" kindref="member">ImpUtil::doStandardImport</ref>()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="708"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="709"><highlight class="normal"><sp/><sp/><ref refid="classAutotoggle" kindref="compound">Autotoggle</ref><sp/>guard(<ref refid="classDagImp_1ab1597f608c0098f1df0acf54f9ca1b17" kindref="member">DagImp::nonInteractive</ref>);</highlight></codeline>
<codeline lineno="710"><highlight class="normal"><sp/><sp/>GetCOREInterface()-&gt;ImportFromFile(<ref refid="classImpUtil_1a717627038cc29886843554f578b0b3f6" kindref="member">filePath</ref>,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="711"><highlight class="normal">}</highlight></codeline>
<codeline lineno="712"><highlight class="normal"></highlight></codeline>
<codeline lineno="713"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classImpUtil_1a2f146d87460807d80b88287d70ef3376" kindref="member">ImpUtil::doRegexImport</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Rules<sp/>&amp;rules)</highlight></codeline>
<codeline lineno="714"><highlight class="normal">{</highlight></codeline>
<codeline lineno="715"><highlight class="normal"><sp/><sp/>std::vector&lt;TSTR&gt;<sp/>files<sp/>=<sp/><ref refid="common_8cpp_1a83c0e73436ecc6fe3df3f4b066604a80" kindref="member">glob</ref>(<ref refid="classImpUtil_1a674477879ac16175c457b88d0edafef7" kindref="member">dirPath</ref>.data(),<sp/><ref refid="classDagImp_1aed5e30f8490310f5b2b512ea7f98587e" kindref="member">DagImp::searchInSubfolders</ref>);</highlight></codeline>
<codeline lineno="716"><highlight class="normal"></highlight></codeline>
<codeline lineno="717"><highlight class="normal"><sp/><sp/>std::vector&lt;TSTR&gt;<sp/>valid_rules<sp/>=<sp/>get_valid_rules(rules.isWildcard,<sp/>rules.incl);</highlight></codeline>
<codeline lineno="718"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!valid_rules.empty())</highlight></codeline>
<codeline lineno="719"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="720"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;TSTR&gt;<sp/>tmp_files;</highlight></codeline>
<codeline lineno="721"><highlight class="normal"><sp/><sp/><sp/><sp/>tmp_files.reserve(files.size());</highlight></codeline>
<codeline lineno="722"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TSTR<sp/>&amp;re<sp/>:<sp/>valid_rules)</highlight></codeline>
<codeline lineno="723"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>do_files_include_re(tmp_files,<sp/>files,<sp/>re);</highlight></codeline>
<codeline lineno="724"><highlight class="normal"><sp/><sp/><sp/><sp/>files<sp/>=<sp/>tmp_files;</highlight></codeline>
<codeline lineno="725"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="726"><highlight class="normal"></highlight></codeline>
<codeline lineno="727"><highlight class="normal"><sp/><sp/>valid_rules<sp/>=<sp/>get_valid_rules(rules.isWildcard,<sp/>rules.excl);</highlight></codeline>
<codeline lineno="728"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!valid_rules.empty())</highlight></codeline>
<codeline lineno="729"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="730"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;TSTR&gt;<sp/>tmp_files;</highlight></codeline>
<codeline lineno="731"><highlight class="normal"><sp/><sp/><sp/><sp/>tmp_files.reserve(files.size());</highlight></codeline>
<codeline lineno="732"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TSTR<sp/>&amp;re<sp/>:<sp/>valid_rules)</highlight></codeline>
<codeline lineno="733"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>do_files_exclude_re(tmp_files,<sp/>files,<sp/>re);</highlight></codeline>
<codeline lineno="734"><highlight class="normal"><sp/><sp/><sp/><sp/>files<sp/>=<sp/>tmp_files;</highlight></codeline>
<codeline lineno="735"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="736"><highlight class="normal"></highlight></codeline>
<codeline lineno="737"><highlight class="normal"><sp/><sp/><ref refid="classDagImp_1a3555246bf49a7cf63848c468cbf75d26" kindref="member">DagImp::batchImportFiles</ref><sp/>=<sp/>files;</highlight></codeline>
<codeline lineno="738"><highlight class="normal"><sp/><sp/><ref refid="classAutotoggle" kindref="compound">Autotoggle</ref><sp/>guard(<ref refid="classDagImp_1af4fa04ae6927daef2847cf022afd47fd" kindref="member">DagImp::calledFromBatchImport</ref>);</highlight></codeline>
<codeline lineno="739"><highlight class="normal"><sp/><sp/>GetCOREInterface()-&gt;ImportFromFile(_T(</highlight><highlight class="stringliteral">&quot;ignored.dag&quot;</highlight><highlight class="normal">),<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="740"><highlight class="normal">}</highlight></codeline>
<codeline lineno="741"><highlight class="normal"></highlight></codeline>
<codeline lineno="742"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classImpUtil_1a998d5c514b5d8a2f0cddc8c015261035" kindref="member">ImpUtil::doImport</ref>()</highlight></codeline>
<codeline lineno="743"><highlight class="normal">{</highlight></codeline>
<codeline lineno="744"><highlight class="normal"><sp/><sp/>assert(<ref refid="classImpUtil_1abaa4f7a4b5a084beeaccb2921fb2e8dc" kindref="member">selectedTab</ref><sp/>&lt;<sp/>4);</highlight></codeline>
<codeline lineno="745"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>DagorLogWindow::clearLog();</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="746"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(<ref refid="classImpUtil_1abaa4f7a4b5a084beeaccb2921fb2e8dc" kindref="member">selectedTab</ref>)</highlight></codeline>
<codeline lineno="747"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="748"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>0:</highlight></codeline>
<codeline lineno="749"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>1:<sp/><ref refid="classImpUtil_1a9e9bc30cd434796eb680dd94bb3f809b" kindref="member">doStandardImport</ref>();<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="750"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>2:<sp/><ref refid="classImpUtil_1a2f146d87460807d80b88287d70ef3376" kindref="member">doRegexImport</ref>(util.<ref refid="classImpUtil_1a46b719be93e53180788285db6edd9f23" kindref="member">wildcard</ref>);<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="751"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>3:<sp/><ref refid="classImpUtil_1a2f146d87460807d80b88287d70ef3376" kindref="member">doRegexImport</ref>(util.<ref refid="classImpUtil_1a3be70cdfe85ab05d0b1729674674f5ec" kindref="member">regex</ref>);<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="752"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:<sp/>assert(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="753"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="754"><highlight class="normal">}</highlight></codeline>
<codeline lineno="755"><highlight class="normal"></highlight></codeline>
<codeline lineno="756"><highlight class="normal"></highlight><highlight class="comment">//==========================================================================//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="757"><highlight class="normal"></highlight></codeline>
<codeline lineno="758" refid="classWListView" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classWListView" kindref="compound">WListView</ref></highlight></codeline>
<codeline lineno="759"><highlight class="normal">{</highlight></codeline>
<codeline lineno="760"><highlight class="normal"><sp/><sp/>HWND<sp/>hw;</highlight></codeline>
<codeline lineno="761"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isWildcard;</highlight></codeline>
<codeline lineno="762"><highlight class="normal"><sp/><sp/>std::vector&lt;TSTR&gt;<sp/>&amp;rules;</highlight></codeline>
<codeline lineno="763"><highlight class="normal"></highlight></codeline>
<codeline lineno="764"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="765"><highlight class="normal"><sp/><sp/><ref refid="classWListView" kindref="compound">WListView</ref>(HWND<sp/>hw_,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isWildcard_,<sp/>std::vector&lt;TSTR&gt;<sp/>&amp;rules_);</highlight></codeline>
<codeline lineno="766"><highlight class="normal"></highlight></codeline>
<codeline lineno="767"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>AddRule();</highlight></codeline>
<codeline lineno="768"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>DelRule();</highlight></codeline>
<codeline lineno="769"><highlight class="normal"><sp/><sp/>INT_PTR<sp/>EditRule(LPARAM<sp/>lParam);</highlight></codeline>
<codeline lineno="770"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>UpdateView();</highlight></codeline>
<codeline lineno="771"><highlight class="normal"></highlight></codeline>
<codeline lineno="772"><highlight class="normal"></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="773"><highlight class="normal"><sp/><sp/>COLORREF<sp/>ruleColor(TSTR<sp/>rule);</highlight></codeline>
<codeline lineno="774"><highlight class="normal">};</highlight></codeline>
<codeline lineno="775"><highlight class="normal"></highlight></codeline>
<codeline lineno="776"><highlight class="normal"><ref refid="classWListView_1ae7c2f8a6be6a751c52fb0b506750f58a" kindref="member">WListView::WListView</ref>(HWND<sp/>hw_,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isWildcard_,<sp/>std::vector&lt;TSTR&gt;<sp/>&amp;rules_)<sp/>:<sp/>hw(hw_),<sp/>isWildcard(isWildcard),<sp/>rules(rules_)</highlight></codeline>
<codeline lineno="777"><highlight class="normal">{</highlight></codeline>
<codeline lineno="778"><highlight class="normal"><sp/><sp/>ListView_SetExtendedListViewStyle(hw,<sp/>LVS_EX_FULLROWSELECT);</highlight></codeline>
<codeline lineno="779"><highlight class="normal"></highlight></codeline>
<codeline lineno="780"><highlight class="normal"><sp/><sp/>LVCOLUMN<sp/>lvc;</highlight></codeline>
<codeline lineno="781"><highlight class="normal"><sp/><sp/>memset(&amp;lvc,<sp/>0,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(lvc));</highlight></codeline>
<codeline lineno="782"><highlight class="normal"><sp/><sp/>lvc.mask<sp/>=<sp/>LVCF_WIDTH;</highlight></codeline>
<codeline lineno="783"><highlight class="normal"><sp/><sp/>lvc.cx<sp/>=<sp/>1024;</highlight></codeline>
<codeline lineno="784"><highlight class="normal"><sp/><sp/>ListView_InsertColumn(hw,<sp/>0,<sp/>&amp;lvc);</highlight></codeline>
<codeline lineno="785"><highlight class="normal"></highlight></codeline>
<codeline lineno="786"><highlight class="normal"><sp/><sp/><ref refid="classWListView_1ad0b036dcaff752bc341af456ff572c3d" kindref="member">UpdateView</ref>();</highlight></codeline>
<codeline lineno="787"><highlight class="normal">}</highlight></codeline>
<codeline lineno="788"><highlight class="normal"></highlight></codeline>
<codeline lineno="789"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classWListView_1a8f5d8b1730f641cb3ab6fd5fd53b6720" kindref="member">WListView::AddRule</ref>()</highlight></codeline>
<codeline lineno="790"><highlight class="normal">{</highlight></codeline>
<codeline lineno="791"><highlight class="normal"><sp/><sp/>LVITEM<sp/>lvi;</highlight></codeline>
<codeline lineno="792"><highlight class="normal"><sp/><sp/>memset(&amp;lvi,<sp/>0,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(lvi));</highlight></codeline>
<codeline lineno="793"><highlight class="normal"><sp/><sp/>lvi.mask<sp/>=<sp/>LVIF_TEXT;</highlight></codeline>
<codeline lineno="794"><highlight class="normal"><sp/><sp/>lvi.cchTextMax<sp/>=<sp/>MAX_PATH;</highlight></codeline>
<codeline lineno="795"><highlight class="normal"><sp/><sp/>lvi.iItem<sp/>=<sp/>ListView_GetItemCount(hw);</highlight></codeline>
<codeline lineno="796"><highlight class="normal"><sp/><sp/>lvi.iSubItem<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="797"><highlight class="normal"><sp/><sp/>lvi.pszText<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="798"><highlight class="normal"><sp/><sp/>ListView_InsertItem(hw,<sp/>&amp;lvi);</highlight></codeline>
<codeline lineno="799"><highlight class="normal"><sp/><sp/>rules.push_back(lvi.pszText);</highlight></codeline>
<codeline lineno="800"><highlight class="normal">}</highlight></codeline>
<codeline lineno="801"><highlight class="normal"></highlight></codeline>
<codeline lineno="802"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classWListView_1a9e0c772c6d8955a914743805d21bad55" kindref="member">WListView::DelRule</ref>()</highlight></codeline>
<codeline lineno="803"><highlight class="normal">{</highlight></codeline>
<codeline lineno="804"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>ListView_GetNextItem(hw,<sp/>-1,<sp/>LVNI_SELECTED);</highlight></codeline>
<codeline lineno="805"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i<sp/>!=<sp/>-1)</highlight></codeline>
<codeline lineno="806"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="807"><highlight class="normal"><sp/><sp/><sp/><sp/>ListView_DeleteItem(hw,<sp/>i);</highlight></codeline>
<codeline lineno="808"><highlight class="normal"><sp/><sp/><sp/><sp/>rules.erase(rules.begin()<sp/>+<sp/>i);</highlight></codeline>
<codeline lineno="809"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="810"><highlight class="normal">}</highlight></codeline>
<codeline lineno="811"><highlight class="normal"></highlight></codeline>
<codeline lineno="812"><highlight class="normal">INT_PTR<sp/><ref refid="classWListView_1ab99d3b358ec0d0415560e5e72112ba73" kindref="member">WListView::EditRule</ref>(LPARAM<sp/>lParam)</highlight></codeline>
<codeline lineno="813"><highlight class="normal">{</highlight></codeline>
<codeline lineno="814"><highlight class="normal"><sp/><sp/>UINT<sp/>code<sp/>=<sp/>((LPNMHDR)lParam)-&gt;code;</highlight></codeline>
<codeline lineno="815"><highlight class="normal"></highlight></codeline>
<codeline lineno="816"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(code<sp/>==<sp/>LVN_BEGINLABELEDIT)</highlight></codeline>
<codeline lineno="817"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="818"><highlight class="normal"><sp/><sp/><sp/><sp/>DisableAccelerators();</highlight></codeline>
<codeline lineno="819"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>FALSE;<sp/></highlight><highlight class="comment">//<sp/>allow<sp/>edit</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="820"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="821"><highlight class="normal"></highlight></codeline>
<codeline lineno="822"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(code<sp/>==<sp/>LVN_ENDLABELEDIT)</highlight></codeline>
<codeline lineno="823"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="824"><highlight class="normal"><sp/><sp/><sp/><sp/>EnableAccelerators();</highlight></codeline>
<codeline lineno="825"><highlight class="normal"></highlight></codeline>
<codeline lineno="826"><highlight class="normal"><sp/><sp/><sp/><sp/>LVITEM<sp/>&amp;item<sp/>=<sp/>((LPNMLVDISPINFOW)lParam)-&gt;item;</highlight></codeline>
<codeline lineno="827"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!item.pszText)</highlight></codeline>
<codeline lineno="828"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>FALSE;<sp/></highlight><highlight class="comment">//<sp/>cancelled<sp/>by<sp/>user</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="829"><highlight class="normal"></highlight></codeline>
<codeline lineno="830"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>simple<sp/>`return<sp/>TRUE/FALSE`<sp/>doesn&apos;t<sp/>work<sp/>here,<sp/>I<sp/>don&apos;t<sp/>know<sp/>why</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="831"><highlight class="normal"><sp/><sp/><sp/><sp/>ListView_SetItemText(hw,<sp/>item.iItem,<sp/>0,<sp/>item.pszText);</highlight></codeline>
<codeline lineno="832"><highlight class="normal"><sp/><sp/><sp/><sp/>rules[item.iItem]<sp/>=<sp/>item.pszText;</highlight></codeline>
<codeline lineno="833"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>TRUE;</highlight></codeline>
<codeline lineno="834"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="835"><highlight class="normal"></highlight></codeline>
<codeline lineno="836"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(code<sp/>==<sp/>NM_CUSTOMDRAW)</highlight></codeline>
<codeline lineno="837"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="838"><highlight class="normal"><sp/><sp/><sp/><sp/>LPNMCUSTOMDRAW<sp/>lpnmcd<sp/>=<sp/>(LPNMCUSTOMDRAW)lParam;</highlight></codeline>
<codeline lineno="839"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(lpnmcd-&gt;dwDrawStage<sp/>==<sp/>CDDS_PREPAINT)</highlight></codeline>
<codeline lineno="840"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="841"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>SetWindowLong(GetParent(hw),<sp/>DWLP_MSGRESULT,<sp/>CDRF_NOTIFYITEMDRAW);</highlight></codeline>
<codeline lineno="842"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>CDRF_NOTIFYITEMDRAW;</highlight></codeline>
<codeline lineno="843"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="844"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(lpnmcd-&gt;dwDrawStage<sp/>==<sp/>CDDS_ITEMPREPAINT)</highlight></codeline>
<codeline lineno="845"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="846"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>LPNMLVCUSTOMDRAW<sp/>lplvcd<sp/>=<sp/>(LPNMLVCUSTOMDRAW)lParam;</highlight></codeline>
<codeline lineno="847"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>iItem<sp/>=<sp/>(int)lplvcd-&gt;nmcd.dwItemSpec;</highlight></codeline>
<codeline lineno="848"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>lplvcd-&gt;clrTextBk<sp/>=<sp/>ruleColor(rules[iItem]);</highlight></codeline>
<codeline lineno="849"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="850"><highlight class="normal"><sp/><sp/><sp/><sp/>SetWindowLong(GetParent(hw),<sp/>DWLP_MSGRESULT,<sp/>CDRF_DODEFAULT);</highlight></codeline>
<codeline lineno="851"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>CDRF_DODEFAULT;</highlight></codeline>
<codeline lineno="852"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="853"><highlight class="normal"></highlight></codeline>
<codeline lineno="854"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>TRUE;</highlight></codeline>
<codeline lineno="855"><highlight class="normal">}</highlight></codeline>
<codeline lineno="856"><highlight class="normal"></highlight></codeline>
<codeline lineno="857"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classWListView_1ad0b036dcaff752bc341af456ff572c3d" kindref="member">WListView::UpdateView</ref>()</highlight></codeline>
<codeline lineno="858"><highlight class="normal">{</highlight></codeline>
<codeline lineno="859"><highlight class="normal"><sp/><sp/>ListView_DeleteAllItems(hw);</highlight></codeline>
<codeline lineno="860"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(TSTR<sp/>&amp;s<sp/>:<sp/>rules)</highlight></codeline>
<codeline lineno="861"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="862"><highlight class="normal"><sp/><sp/><sp/><sp/>LVITEM<sp/>lvi;</highlight></codeline>
<codeline lineno="863"><highlight class="normal"><sp/><sp/><sp/><sp/>memset(&amp;lvi,<sp/>0,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(lvi));</highlight></codeline>
<codeline lineno="864"><highlight class="normal"><sp/><sp/><sp/><sp/>lvi.mask<sp/>=<sp/>LVIF_TEXT;</highlight></codeline>
<codeline lineno="865"><highlight class="normal"><sp/><sp/><sp/><sp/>lvi.cchTextMax<sp/>=<sp/>MAX_PATH;</highlight></codeline>
<codeline lineno="866"><highlight class="normal"><sp/><sp/><sp/><sp/>lvi.iItem<sp/>=<sp/>ListView_GetItemCount(hw);</highlight></codeline>
<codeline lineno="867"><highlight class="normal"><sp/><sp/><sp/><sp/>lvi.iSubItem<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="868"><highlight class="normal"><sp/><sp/><sp/><sp/>lvi.pszText<sp/>=<sp/>(LPWSTR)s.data();</highlight></codeline>
<codeline lineno="869"><highlight class="normal"><sp/><sp/><sp/><sp/>ListView_InsertItem(hw,<sp/>&amp;lvi);</highlight></codeline>
<codeline lineno="870"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="871"><highlight class="normal">}</highlight></codeline>
<codeline lineno="872"><highlight class="normal"></highlight></codeline>
<codeline lineno="873"><highlight class="normal">COLORREF<sp/>WListView::ruleColor(TSTR<sp/>rule)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>is_regex_valid(isWildcard,<sp/>rule)<sp/>?<sp/><ref refid="dagimp_8cpp_1a6764ce99b0393b85506b58e2e731df39" kindref="member">VALID_REGEX_COLOR_BG</ref><sp/>:<sp/><ref refid="dagimp_8cpp_1aab45c8dedb9864c4638559b56af46335" kindref="member">INVALID_REGEX_COLOR_BG</ref>;<sp/>}</highlight></codeline>
<codeline lineno="874"><highlight class="normal"></highlight></codeline>
<codeline lineno="875"><highlight class="normal"></highlight><highlight class="comment">//==========================================================================//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="876"><highlight class="normal"></highlight></codeline>
<codeline lineno="877"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>INT_PTR<sp/>CALLBACK<sp/>legacy_dlg_proc(HWND<sp/>hDlg,<sp/>UINT<sp/>message,<sp/>WPARAM<sp/>wParam,<sp/>LPARAM<sp/>lParam)</highlight></codeline>
<codeline lineno="878"><highlight class="normal">{</highlight></codeline>
<codeline lineno="879"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>TCHAR<sp/>path[MAX_PATH]<sp/>=<sp/>_T(</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="880"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>prevent_enchange<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="881"><highlight class="normal"></highlight></codeline>
<codeline lineno="882"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(message)</highlight></codeline>
<codeline lineno="883"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="884"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>WM_INITDIALOG:</highlight></codeline>
<codeline lineno="885"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>CheckDlgButton(hDlg,<sp/><ref refid="resource_8h_1ab49353df03e46091e60caf3aeb6b1a9c" kindref="member">IDC_SEPARATE_LAYERS</ref>,<sp/><ref refid="classDagImp_1a1d12c2444eae41164409f661f59a25b8" kindref="member">DagImp::separateLayers</ref>);</highlight></codeline>
<codeline lineno="886"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="common_8cpp_1adc4b6cbb3c15d79ea757b361472a5430" kindref="member">update_path_edit_control</ref>(hDlg,<sp/><ref refid="resource_8h_1abb5cc701f25306ac5f24f59d96471e8c" kindref="member">IDC_DAGORPATH</ref>,<sp/>util.<ref refid="classImpUtil_1a717627038cc29886843554f578b0b3f6" kindref="member">filePath</ref>);</highlight></codeline>
<codeline lineno="887"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>util.<ref refid="classImpUtil_1a9e360dcd2d3d40b3f112e39e0ed55d32" kindref="member">tooltipExtender</ref>.SetToolTip(GetDlgItem(hDlg,<sp/><ref refid="resource_8h_1ab49353df03e46091e60caf3aeb6b1a9c" kindref="member">IDC_SEPARATE_LAYERS</ref>),<sp/>TSTR(_T(</highlight><highlight class="stringliteral">&quot;Import<sp/>layered<sp/>DAGs&quot;</highlight><highlight class="normal">)));</highlight></codeline>
<codeline lineno="888"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>util.<ref refid="classImpUtil_1a9e360dcd2d3d40b3f112e39e0ed55d32" kindref="member">tooltipExtender</ref>.SetToolTip(GetDlgItem(hDlg,<sp/><ref refid="resource_8h_1abb5cc701f25306ac5f24f59d96471e8c" kindref="member">IDC_DAGORPATH</ref>),<sp/>TSTR(_T(</highlight><highlight class="stringliteral">&quot;Path<sp/>to<sp/>file<sp/>that<sp/>should<sp/>be<sp/>imported&quot;</highlight><highlight class="normal">)));</highlight></codeline>
<codeline lineno="889"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>util.<ref refid="classImpUtil_1a9e360dcd2d3d40b3f112e39e0ed55d32" kindref="member">tooltipExtender</ref>.SetToolTip(GetDlgItem(hDlg,<sp/><ref refid="resource_8h_1a5c9b41442acf5f01b8296c64cb5ed95f" kindref="member">IDC_SET_DAGORPATH</ref>),<sp/>TSTR(_T(</highlight><highlight class="stringliteral">&quot;Open<sp/>a<sp/>file<sp/>browser&quot;</highlight><highlight class="normal">)));</highlight></codeline>
<codeline lineno="890"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>FALSE;</highlight></codeline>
<codeline lineno="891"><highlight class="normal"></highlight></codeline>
<codeline lineno="892"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>WM_COMMAND:</highlight></codeline>
<codeline lineno="893"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(LOWORD(wParam))</highlight></codeline>
<codeline lineno="894"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="895"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="resource_8h_1ab49353df03e46091e60caf3aeb6b1a9c" kindref="member">IDC_SEPARATE_LAYERS</ref>:</highlight></codeline>
<codeline lineno="896"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(HIWORD(wParam)<sp/>==<sp/>BN_CLICKED)</highlight></codeline>
<codeline lineno="897"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classDagImp_1a1d12c2444eae41164409f661f59a25b8" kindref="member">DagImp::separateLayers</ref><sp/>=<sp/>IsDlgButtonChecked(hDlg,<sp/><ref refid="resource_8h_1ab49353df03e46091e60caf3aeb6b1a9c" kindref="member">IDC_SEPARATE_LAYERS</ref>);</highlight></codeline>
<codeline lineno="898"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="899"><highlight class="normal"></highlight></codeline>
<codeline lineno="900"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="resource_8h_1a5c9b41442acf5f01b8296c64cb5ed95f" kindref="member">IDC_SET_DAGORPATH</ref>:</highlight></codeline>
<codeline lineno="901"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="common_8cpp_1a7eb15367ce26c82682ab764b5a5596e6" kindref="member">get_open_filename</ref>(hDlg,<sp/>util.<ref refid="classImpUtil_1a717627038cc29886843554f578b0b3f6" kindref="member">filePath</ref>))</highlight></codeline>
<codeline lineno="902"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="903"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classAutotoggle" kindref="compound">Autotoggle</ref><sp/>eguard(prevent_enchange);</highlight></codeline>
<codeline lineno="904"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="common_8cpp_1adc4b6cbb3c15d79ea757b361472a5430" kindref="member">update_path_edit_control</ref>(hDlg,<sp/><ref refid="resource_8h_1abb5cc701f25306ac5f24f59d96471e8c" kindref="member">IDC_DAGORPATH</ref>,<sp/>util.<ref refid="classImpUtil_1a717627038cc29886843554f578b0b3f6" kindref="member">filePath</ref>);</highlight></codeline>
<codeline lineno="905"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="906"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="907"><highlight class="normal"></highlight></codeline>
<codeline lineno="908"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="resource_8h_1abb5cc701f25306ac5f24f59d96471e8c" kindref="member">IDC_DAGORPATH</ref>:</highlight></codeline>
<codeline lineno="909"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(HIWORD(wParam))</highlight></codeline>
<codeline lineno="910"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="911"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>EN_SETFOCUS:<sp/>DisableAccelerators();<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="912"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>EN_KILLFOCUS:<sp/>EnableAccelerators();<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="913"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>EN_CHANGE:</highlight></codeline>
<codeline lineno="914"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!prevent_enchange)</highlight></codeline>
<codeline lineno="915"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="916"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GetDlgItemText(hDlg,<sp/><ref refid="resource_8h_1abb5cc701f25306ac5f24f59d96471e8c" kindref="member">IDC_DAGORPATH</ref>,<sp/>path,<sp/>MAX_PATH);</highlight></codeline>
<codeline lineno="917"><highlight class="normal"></highlight></codeline>
<codeline lineno="918"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TSTR<sp/>new_path<sp/>=<sp/><ref refid="common_8cpp_1a7987669935f82bfd122e32c8f3ae2d58" kindref="member">drop_quotation_marks</ref>(path);</highlight></codeline>
<codeline lineno="919"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(path<sp/>!=<sp/>new_path)</highlight></codeline>
<codeline lineno="920"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="921"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classAutotoggle" kindref="compound">Autotoggle</ref><sp/>eguard(prevent_enchange);</highlight></codeline>
<codeline lineno="922"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="common_8cpp_1adc4b6cbb3c15d79ea757b361472a5430" kindref="member">update_path_edit_control</ref>(hDlg,<sp/><ref refid="resource_8h_1abb5cc701f25306ac5f24f59d96471e8c" kindref="member">IDC_DAGORPATH</ref>,<sp/>new_path);</highlight></codeline>
<codeline lineno="923"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>util.<ref refid="classImpUtil_1a717627038cc29886843554f578b0b3f6" kindref="member">filePath</ref><sp/>=<sp/>new_path;</highlight></codeline>
<codeline lineno="924"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="925"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="926"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="927"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="928"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="929"><highlight class="normal"></highlight></codeline>
<codeline lineno="930"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="resource_8h_1aa0dbd03604c4c0290dceed41e68c848b" kindref="member">IDC_OPENDIR</ref>:<sp/>util.<ref refid="classImpUtil_1acbaed671d5e372cbd174ab4ece37234d" kindref="member">openImportDirectory</ref>();<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="931"><highlight class="normal"></highlight></codeline>
<codeline lineno="932"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="933"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="934"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="935"><highlight class="normal"></highlight></codeline>
<codeline lineno="936"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>FALSE;</highlight></codeline>
<codeline lineno="937"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="938"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>TRUE;</highlight></codeline>
<codeline lineno="939"><highlight class="normal">}</highlight></codeline>
<codeline lineno="940"><highlight class="normal"></highlight></codeline>
<codeline lineno="941"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>INT_PTR<sp/>CALLBACK<sp/>standard_dlg_proc(HWND<sp/>hDlg,<sp/>UINT<sp/>message,<sp/>WPARAM<sp/>wParam,<sp/>LPARAM<sp/>lParam)</highlight></codeline>
<codeline lineno="942"><highlight class="normal">{</highlight></codeline>
<codeline lineno="943"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>TCHAR<sp/>path[MAX_PATH];</highlight></codeline>
<codeline lineno="944"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>prevent_enchange<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="945"><highlight class="normal"></highlight></codeline>
<codeline lineno="946"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(message)</highlight></codeline>
<codeline lineno="947"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="948"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>WM_INITDIALOG:</highlight></codeline>
<codeline lineno="949"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="950"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>CheckDlgButton(hDlg,<sp/><ref refid="resource_8h_1add3e571034800bbfd52e5a8c9dc5f703" kindref="member">IDC_IMPORT_LOD</ref>,<sp/><ref refid="classDagImp_1a7b2fc6f616381d3743a667637b550f4b" kindref="member">DagImp::checked</ref>.lod);</highlight></codeline>
<codeline lineno="951"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>CheckDlgButton(hDlg,<sp/><ref refid="resource_8h_1a9d8c27492b3468efc9f9d9c3ba210f5e" kindref="member">IDC_IMPORT_DP</ref>,<sp/><ref refid="classDagImp_1a7b2fc6f616381d3743a667637b550f4b" kindref="member">DagImp::checked</ref>.dp);</highlight></codeline>
<codeline lineno="952"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>CheckDlgButton(hDlg,<sp/><ref refid="resource_8h_1a6322bcd9958d0205b8504798e7682c56" kindref="member">IDC_IMPORT_DMG</ref>,<sp/><ref refid="classDagImp_1a7b2fc6f616381d3743a667637b550f4b" kindref="member">DagImp::checked</ref>.dmg);</highlight></codeline>
<codeline lineno="953"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>CheckDlgButton(hDlg,<sp/><ref refid="resource_8h_1abad6b5a5c1619c41a66cd69f1f67ef02" kindref="member">IDC_IMPORT_DESTR</ref>,<sp/><ref refid="classDagImp_1a7b2fc6f616381d3743a667637b550f4b" kindref="member">DagImp::checked</ref>.destr);</highlight></codeline>
<codeline lineno="954"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classAutotoggle" kindref="compound">Autotoggle</ref><sp/>guard(prevent_enchange,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="955"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="common_8cpp_1adc4b6cbb3c15d79ea757b361472a5430" kindref="member">update_path_edit_control</ref>(hDlg,<sp/><ref refid="resource_8h_1abb5cc701f25306ac5f24f59d96471e8c" kindref="member">IDC_DAGORPATH</ref>,<sp/>util.<ref refid="classImpUtil_1a717627038cc29886843554f578b0b3f6" kindref="member">filePath</ref>);</highlight></codeline>
<codeline lineno="956"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>util.<ref refid="classImpUtil_1a9e360dcd2d3d40b3f112e39e0ed55d32" kindref="member">tooltipExtender</ref>.SetToolTip(GetDlgItem(hDlg,<sp/><ref refid="resource_8h_1add3e571034800bbfd52e5a8c9dc5f703" kindref="member">IDC_IMPORT_LOD</ref>),<sp/>TSTR(_T(</highlight><highlight class="stringliteral">&quot;Search<sp/>for<sp/>other<sp/>levels<sp/>of<sp/>detail&quot;</highlight><highlight class="normal">)));</highlight></codeline>
<codeline lineno="957"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>util.<ref refid="classImpUtil_1a9e360dcd2d3d40b3f112e39e0ed55d32" kindref="member">tooltipExtender</ref>.SetToolTip(GetDlgItem(hDlg,<sp/><ref refid="resource_8h_1a9d8c27492b3468efc9f9d9c3ba210f5e" kindref="member">IDC_IMPORT_DP</ref>),<sp/>TSTR(_T(</highlight><highlight class="stringliteral">&quot;Search<sp/>for<sp/>related<sp/>Damage<sp/>Parts&quot;</highlight><highlight class="normal">)));</highlight></codeline>
<codeline lineno="958"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>util.<ref refid="classImpUtil_1a9e360dcd2d3d40b3f112e39e0ed55d32" kindref="member">tooltipExtender</ref>.SetToolTip(GetDlgItem(hDlg,<sp/><ref refid="resource_8h_1a6322bcd9958d0205b8504798e7682c56" kindref="member">IDC_IMPORT_DMG</ref>),<sp/>TSTR(_T(</highlight><highlight class="stringliteral">&quot;Search<sp/>for<sp/>Damaged<sp/>versions&quot;</highlight><highlight class="normal">)));</highlight></codeline>
<codeline lineno="959"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>util.<ref refid="classImpUtil_1a9e360dcd2d3d40b3f112e39e0ed55d32" kindref="member">tooltipExtender</ref>.SetToolTip(GetDlgItem(hDlg,<sp/><ref refid="resource_8h_1abad6b5a5c1619c41a66cd69f1f67ef02" kindref="member">IDC_IMPORT_DESTR</ref>),<sp/>TSTR(_T(</highlight><highlight class="stringliteral">&quot;Search<sp/>for<sp/>dynamic<sp/>destr<sp/>asset&quot;</highlight><highlight class="normal">)));</highlight></codeline>
<codeline lineno="960"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>util.<ref refid="classImpUtil_1a9e360dcd2d3d40b3f112e39e0ed55d32" kindref="member">tooltipExtender</ref>.SetToolTip(GetDlgItem(hDlg,<sp/><ref refid="resource_8h_1abb5cc701f25306ac5f24f59d96471e8c" kindref="member">IDC_DAGORPATH</ref>),<sp/>TSTR(_T(</highlight><highlight class="stringliteral">&quot;Path<sp/>to<sp/>file<sp/>that<sp/>should<sp/>be<sp/>imported&quot;</highlight><highlight class="normal">)));</highlight></codeline>
<codeline lineno="961"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>util.<ref refid="classImpUtil_1a9e360dcd2d3d40b3f112e39e0ed55d32" kindref="member">tooltipExtender</ref>.SetToolTip(GetDlgItem(hDlg,<sp/><ref refid="resource_8h_1a5c9b41442acf5f01b8296c64cb5ed95f" kindref="member">IDC_SET_DAGORPATH</ref>),<sp/>TSTR(_T(</highlight><highlight class="stringliteral">&quot;Open<sp/>a<sp/>file<sp/>browser&quot;</highlight><highlight class="normal">)));</highlight></codeline>
<codeline lineno="962"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="963"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>FALSE;</highlight></codeline>
<codeline lineno="964"><highlight class="normal"></highlight></codeline>
<codeline lineno="965"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>WM_COMMAND:</highlight></codeline>
<codeline lineno="966"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(HIWORD(wParam)<sp/>==<sp/>BN_CLICKED)</highlight></codeline>
<codeline lineno="967"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="968"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classDagImp_1a7b2fc6f616381d3743a667637b550f4b" kindref="member">DagImp::checked</ref>.<ref refid="structDagImp_1_1Categories_1a509875fe77af0158bb4bcb366a3f09b4" kindref="member">lod</ref><sp/>=<sp/>IsDlgButtonChecked(hDlg,<sp/><ref refid="resource_8h_1add3e571034800bbfd52e5a8c9dc5f703" kindref="member">IDC_IMPORT_LOD</ref>);</highlight></codeline>
<codeline lineno="969"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classDagImp_1a7b2fc6f616381d3743a667637b550f4b" kindref="member">DagImp::checked</ref>.<ref refid="structDagImp_1_1Categories_1a183c0c95383a5e5c5bd3b325fd30d4e3" kindref="member">dp</ref><sp/>=<sp/>IsDlgButtonChecked(hDlg,<sp/><ref refid="resource_8h_1a9d8c27492b3468efc9f9d9c3ba210f5e" kindref="member">IDC_IMPORT_DP</ref>);</highlight></codeline>
<codeline lineno="970"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classDagImp_1a7b2fc6f616381d3743a667637b550f4b" kindref="member">DagImp::checked</ref>.<ref refid="structDagImp_1_1Categories_1a1e681220bbe07d46e3e84808d4ebc102" kindref="member">dmg</ref><sp/>=<sp/>IsDlgButtonChecked(hDlg,<sp/><ref refid="resource_8h_1a6322bcd9958d0205b8504798e7682c56" kindref="member">IDC_IMPORT_DMG</ref>);</highlight></codeline>
<codeline lineno="971"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classDagImp_1a7b2fc6f616381d3743a667637b550f4b" kindref="member">DagImp::checked</ref>.<ref refid="structDagImp_1_1Categories_1ab947250827de77b24220484843131753" kindref="member">destr</ref><sp/>=<sp/>IsDlgButtonChecked(hDlg,<sp/><ref refid="resource_8h_1abad6b5a5c1619c41a66cd69f1f67ef02" kindref="member">IDC_IMPORT_DESTR</ref>);</highlight></codeline>
<codeline lineno="972"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="973"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(LOWORD(wParam))</highlight></codeline>
<codeline lineno="974"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="975"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="resource_8h_1a5c9b41442acf5f01b8296c64cb5ed95f" kindref="member">IDC_SET_DAGORPATH</ref>:</highlight></codeline>
<codeline lineno="976"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="common_8cpp_1a7eb15367ce26c82682ab764b5a5596e6" kindref="member">get_open_filename</ref>(hDlg,<sp/>util.<ref refid="classImpUtil_1a717627038cc29886843554f578b0b3f6" kindref="member">filePath</ref>))</highlight></codeline>
<codeline lineno="977"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="978"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classAutotoggle" kindref="compound">Autotoggle</ref><sp/>eguard(prevent_enchange);</highlight></codeline>
<codeline lineno="979"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="common_8cpp_1adc4b6cbb3c15d79ea757b361472a5430" kindref="member">update_path_edit_control</ref>(hDlg,<sp/><ref refid="resource_8h_1abb5cc701f25306ac5f24f59d96471e8c" kindref="member">IDC_DAGORPATH</ref>,<sp/>util.<ref refid="classImpUtil_1a717627038cc29886843554f578b0b3f6" kindref="member">filePath</ref>);</highlight></codeline>
<codeline lineno="980"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="981"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="982"><highlight class="normal"></highlight></codeline>
<codeline lineno="983"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="resource_8h_1abb5cc701f25306ac5f24f59d96471e8c" kindref="member">IDC_DAGORPATH</ref>:</highlight></codeline>
<codeline lineno="984"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(HIWORD(wParam))</highlight></codeline>
<codeline lineno="985"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="986"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>EN_SETFOCUS:<sp/>DisableAccelerators();<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="987"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>EN_KILLFOCUS:<sp/>EnableAccelerators();<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="988"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>EN_CHANGE:</highlight></codeline>
<codeline lineno="989"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!prevent_enchange)</highlight></codeline>
<codeline lineno="990"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="991"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GetDlgItemText(hDlg,<sp/><ref refid="resource_8h_1abb5cc701f25306ac5f24f59d96471e8c" kindref="member">IDC_DAGORPATH</ref>,<sp/>path,<sp/>MAX_PATH);</highlight></codeline>
<codeline lineno="992"><highlight class="normal"></highlight></codeline>
<codeline lineno="993"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TSTR<sp/>new_path<sp/>=<sp/><ref refid="common_8cpp_1a7987669935f82bfd122e32c8f3ae2d58" kindref="member">drop_quotation_marks</ref>(path);</highlight></codeline>
<codeline lineno="994"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(path<sp/>!=<sp/>new_path)</highlight></codeline>
<codeline lineno="995"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="996"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classAutotoggle" kindref="compound">Autotoggle</ref><sp/>eguard(prevent_enchange);</highlight></codeline>
<codeline lineno="997"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="common_8cpp_1adc4b6cbb3c15d79ea757b361472a5430" kindref="member">update_path_edit_control</ref>(hDlg,<sp/><ref refid="resource_8h_1abb5cc701f25306ac5f24f59d96471e8c" kindref="member">IDC_DAGORPATH</ref>,<sp/>new_path);</highlight></codeline>
<codeline lineno="998"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="999"><highlight class="normal"></highlight></codeline>
<codeline lineno="1000"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>util.<ref refid="classImpUtil_1a717627038cc29886843554f578b0b3f6" kindref="member">filePath</ref><sp/>=<sp/>new_path;</highlight></codeline>
<codeline lineno="1001"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1002"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1003"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1004"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1005"><highlight class="normal"></highlight></codeline>
<codeline lineno="1006"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="resource_8h_1aa0dbd03604c4c0290dceed41e68c848b" kindref="member">IDC_OPENDIR</ref>:<sp/>util.<ref refid="classImpUtil_1acbaed671d5e372cbd174ab4ece37234d" kindref="member">openImportDirectory</ref>();<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1007"><highlight class="normal"></highlight></codeline>
<codeline lineno="1008"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1009"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1010"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1011"><highlight class="normal"></highlight></codeline>
<codeline lineno="1012"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>FALSE;</highlight></codeline>
<codeline lineno="1013"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1014"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>TRUE;</highlight></codeline>
<codeline lineno="1015"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1016"><highlight class="normal"></highlight></codeline>
<codeline lineno="1017"><highlight class="normal"></highlight></codeline>
<codeline lineno="1018"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>INT_PTR<sp/>CALLBACK<sp/>regex_dlg_proc(HWND<sp/>hDlg,<sp/>UINT<sp/>message,<sp/>WPARAM<sp/>wParam,<sp/>LPARAM<sp/>lParam)</highlight></codeline>
<codeline lineno="1019"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1020"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">wchar_t</highlight><highlight class="normal"><sp/>*PROP_INCL<sp/>=<sp/>_T(</highlight><highlight class="stringliteral">&quot;INCL&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1021"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">wchar_t</highlight><highlight class="normal"><sp/>*PROP_EXCL<sp/>=<sp/>_T(</highlight><highlight class="stringliteral">&quot;EXCL&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1022"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>TCHAR<sp/>path[MAX_PATH];</highlight></codeline>
<codeline lineno="1023"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>prevent_enchange<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1024"><highlight class="normal"></highlight></codeline>
<codeline lineno="1025"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(message)</highlight></codeline>
<codeline lineno="1026"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1027"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>WM_INITDIALOG:</highlight></codeline>
<codeline lineno="1028"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1029"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structImpUtil_1_1Rules" kindref="compound">ImpUtil::Rules</ref><sp/>&amp;rules<sp/>=<sp/>*</highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="normal"><ref refid="structImpUtil_1_1Rules" kindref="compound">ImpUtil::Rules</ref><sp/>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(lParam);</highlight></codeline>
<codeline lineno="1030"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>SetProp(hDlg,<sp/>PROP_INCL,<sp/>(HANDLE)<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="classWListView" kindref="compound">WListView</ref>(GetDlgItem(hDlg,<sp/><ref refid="resource_8h_1ace258312b64f21abd3232a425704afd8" kindref="member">IDC_PATHLIST_INCL</ref>),<sp/>rules.<ref refid="structImpUtil_1_1Rules_1a25d3a31ac97a0a96bc4d70253f3cb027" kindref="member">isWildcard</ref>,<sp/>rules.<ref refid="structImpUtil_1_1Rules_1a714be1d9ee0f72ffd6272fb066836009" kindref="member">incl</ref>));</highlight></codeline>
<codeline lineno="1031"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>SetProp(hDlg,<sp/>PROP_EXCL,<sp/>(HANDLE)<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="classWListView" kindref="compound">WListView</ref>(GetDlgItem(hDlg,<sp/><ref refid="resource_8h_1a3016a842952b8b8947a50213352646db" kindref="member">IDC_PATHLIST_EXCL</ref>),<sp/>rules.<ref refid="structImpUtil_1_1Rules_1a25d3a31ac97a0a96bc4d70253f3cb027" kindref="member">isWildcard</ref>,<sp/>rules.<ref refid="structImpUtil_1_1Rules_1af17e1ad7be0aae9dd0823fa5279f581e" kindref="member">excl</ref>));</highlight></codeline>
<codeline lineno="1032"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classAutotoggle" kindref="compound">Autotoggle</ref><sp/>guard(prevent_enchange);</highlight></codeline>
<codeline lineno="1033"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="common_8cpp_1adc4b6cbb3c15d79ea757b361472a5430" kindref="member">update_path_edit_control</ref>(hDlg,<sp/><ref refid="resource_8h_1abb5cc701f25306ac5f24f59d96471e8c" kindref="member">IDC_DAGORPATH</ref>,<sp/>util.<ref refid="classImpUtil_1a674477879ac16175c457b88d0edafef7" kindref="member">dirPath</ref>);</highlight></codeline>
<codeline lineno="1034"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>util.<ref refid="classImpUtil_1a9e360dcd2d3d40b3f112e39e0ed55d32" kindref="member">tooltipExtender</ref>.SetToolTip(GetDlgItem(hDlg,<sp/><ref refid="resource_8h_1acc40e2eba4466e3c70d7442324d55bc3" kindref="member">IDC_PATHLIST_ADD_INCL</ref>),<sp/>TSTR(_T(</highlight><highlight class="stringliteral">&quot;Adds<sp/>importer<sp/>filter&quot;</highlight><highlight class="normal">)));</highlight></codeline>
<codeline lineno="1035"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>util.<ref refid="classImpUtil_1a9e360dcd2d3d40b3f112e39e0ed55d32" kindref="member">tooltipExtender</ref>.SetToolTip(GetDlgItem(hDlg,<sp/><ref refid="resource_8h_1ae5c742cfbe4b11c18671b317e6048df3" kindref="member">IDC_PATHLIST_ADD_EXCL</ref>),<sp/>TSTR(_T(</highlight><highlight class="stringliteral">&quot;Adds<sp/>importer<sp/>filter&quot;</highlight><highlight class="normal">)));</highlight></codeline>
<codeline lineno="1036"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>util.<ref refid="classImpUtil_1a9e360dcd2d3d40b3f112e39e0ed55d32" kindref="member">tooltipExtender</ref>.SetToolTip(GetDlgItem(hDlg,<sp/><ref refid="resource_8h_1a8acd68ad06b1dfd592effdd4eebf5b5e" kindref="member">IDC_PATHLIST_DEL_INCL</ref>),<sp/>TSTR(_T(</highlight><highlight class="stringliteral">&quot;Removes<sp/>importer<sp/>filter&quot;</highlight><highlight class="normal">)));</highlight></codeline>
<codeline lineno="1037"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>util.<ref refid="classImpUtil_1a9e360dcd2d3d40b3f112e39e0ed55d32" kindref="member">tooltipExtender</ref>.SetToolTip(GetDlgItem(hDlg,<sp/><ref refid="resource_8h_1a8d4f931e43ac55112fef2e9968ebbf73" kindref="member">IDC_PATHLIST_DEL_EXCL</ref>),<sp/>TSTR(_T(</highlight><highlight class="stringliteral">&quot;Removes<sp/>importer<sp/>filter&quot;</highlight><highlight class="normal">)));</highlight></codeline>
<codeline lineno="1038"><highlight class="normal"></highlight></codeline>
<codeline lineno="1039"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>util.<ref refid="classImpUtil_1a9e360dcd2d3d40b3f112e39e0ed55d32" kindref="member">tooltipExtender</ref>.SetToolTip(GetDlgItem(hDlg,<sp/><ref refid="resource_8h_1ace258312b64f21abd3232a425704afd8" kindref="member">IDC_PATHLIST_INCL</ref>),<sp/>TSTR(_T(</highlight><highlight class="stringliteral">&quot;To<sp/>edit<sp/>a<sp/>rule,<sp/>click<sp/>once<sp/>and<sp/>wait&quot;</highlight><highlight class="normal">)));</highlight></codeline>
<codeline lineno="1040"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>util.<ref refid="classImpUtil_1a9e360dcd2d3d40b3f112e39e0ed55d32" kindref="member">tooltipExtender</ref>.SetToolTip(GetDlgItem(hDlg,<sp/><ref refid="resource_8h_1a3016a842952b8b8947a50213352646db" kindref="member">IDC_PATHLIST_EXCL</ref>),<sp/>TSTR(_T(</highlight><highlight class="stringliteral">&quot;To<sp/>edit<sp/>a<sp/>rule,<sp/>click<sp/>once<sp/>and<sp/>wait&quot;</highlight><highlight class="normal">)));</highlight></codeline>
<codeline lineno="1041"><highlight class="normal"></highlight></codeline>
<codeline lineno="1042"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>util.<ref refid="classImpUtil_1a9e360dcd2d3d40b3f112e39e0ed55d32" kindref="member">tooltipExtender</ref>.SetToolTip(GetDlgItem(hDlg,<sp/><ref refid="resource_8h_1abb5cc701f25306ac5f24f59d96471e8c" kindref="member">IDC_DAGORPATH</ref>),<sp/>TSTR(_T(</highlight><highlight class="stringliteral">&quot;Where<sp/>search<sp/>for<sp/>.dag<sp/>files?&quot;</highlight><highlight class="normal">)));</highlight></codeline>
<codeline lineno="1043"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>util.<ref refid="classImpUtil_1a9e360dcd2d3d40b3f112e39e0ed55d32" kindref="member">tooltipExtender</ref>.SetToolTip(GetDlgItem(hDlg,<sp/><ref refid="resource_8h_1a5c9b41442acf5f01b8296c64cb5ed95f" kindref="member">IDC_SET_DAGORPATH</ref>),<sp/>TSTR(_T(</highlight><highlight class="stringliteral">&quot;Open<sp/>a<sp/>directory<sp/>browser&quot;</highlight><highlight class="normal">)));</highlight></codeline>
<codeline lineno="1044"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1045"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>FALSE;<sp/></highlight><highlight class="comment">//<sp/>don&apos;t<sp/>set<sp/>keyboard<sp/>focus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1046"><highlight class="normal"></highlight></codeline>
<codeline lineno="1047"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>WM_DESTROY:</highlight></codeline>
<codeline lineno="1048"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>(<ref refid="classWListView" kindref="compound">WListView</ref><sp/>*)GetProp(hDlg,<sp/>PROP_INCL);</highlight></codeline>
<codeline lineno="1049"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>(<ref refid="classWListView" kindref="compound">WListView</ref><sp/>*)GetProp(hDlg,<sp/>PROP_EXCL);</highlight></codeline>
<codeline lineno="1050"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1051"><highlight class="normal"></highlight></codeline>
<codeline lineno="1052"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>WM_COMMAND:</highlight></codeline>
<codeline lineno="1053"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(LOWORD(wParam))</highlight></codeline>
<codeline lineno="1054"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1055"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="resource_8h_1acc40e2eba4466e3c70d7442324d55bc3" kindref="member">IDC_PATHLIST_ADD_INCL</ref>:<sp/>((<ref refid="classWListView" kindref="compound">WListView</ref><sp/>*)GetProp(hDlg,<sp/>PROP_INCL))-&gt;AddRule();<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1056"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="resource_8h_1ae5c742cfbe4b11c18671b317e6048df3" kindref="member">IDC_PATHLIST_ADD_EXCL</ref>:<sp/>((<ref refid="classWListView" kindref="compound">WListView</ref><sp/>*)GetProp(hDlg,<sp/>PROP_EXCL))-&gt;AddRule();<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1057"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="resource_8h_1a8acd68ad06b1dfd592effdd4eebf5b5e" kindref="member">IDC_PATHLIST_DEL_INCL</ref>:<sp/>((<ref refid="classWListView" kindref="compound">WListView</ref><sp/>*)GetProp(hDlg,<sp/>PROP_INCL))-&gt;DelRule();<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1058"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="resource_8h_1a8d4f931e43ac55112fef2e9968ebbf73" kindref="member">IDC_PATHLIST_DEL_EXCL</ref>:<sp/>((<ref refid="classWListView" kindref="compound">WListView</ref><sp/>*)GetProp(hDlg,<sp/>PROP_EXCL))-&gt;DelRule();<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1059"><highlight class="normal"></highlight></codeline>
<codeline lineno="1060"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="resource_8h_1a5c9b41442acf5f01b8296c64cb5ed95f" kindref="member">IDC_SET_DAGORPATH</ref>:</highlight></codeline>
<codeline lineno="1061"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1062"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_tcscpy(path,<sp/>util.<ref refid="classImpUtil_1a674477879ac16175c457b88d0edafef7" kindref="member">dirPath</ref>.data());</highlight></codeline>
<codeline lineno="1063"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>util.<ref refid="classImpUtil_1abd454717661b78a9507fe23361ed9906" kindref="member">ip</ref>-&gt;ChooseDirectory(hDlg,<sp/><ref refid="common_8cpp_1aeb87de5dfb5d632579574b4bc8709019" kindref="member">GetString</ref>(<ref refid="resource_8h_1a2a9440cde92d53a50678d9fbed4d8fc8" kindref="member">IDS_CHOOSE_DAGOR_PATH</ref>),<sp/>path);</highlight></codeline>
<codeline lineno="1064"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(path[0])</highlight></codeline>
<codeline lineno="1065"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1066"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>util.<ref refid="classImpUtil_1a674477879ac16175c457b88d0edafef7" kindref="member">dirPath</ref><sp/>=<sp/>path;</highlight></codeline>
<codeline lineno="1067"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classAutotoggle" kindref="compound">Autotoggle</ref><sp/>eguard(prevent_enchange);</highlight></codeline>
<codeline lineno="1068"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="common_8cpp_1adc4b6cbb3c15d79ea757b361472a5430" kindref="member">update_path_edit_control</ref>(hDlg,<sp/><ref refid="resource_8h_1abb5cc701f25306ac5f24f59d96471e8c" kindref="member">IDC_DAGORPATH</ref>,<sp/>util.<ref refid="classImpUtil_1a674477879ac16175c457b88d0edafef7" kindref="member">dirPath</ref>);</highlight></codeline>
<codeline lineno="1069"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1070"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1071"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1072"><highlight class="normal"></highlight></codeline>
<codeline lineno="1073"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="resource_8h_1abb5cc701f25306ac5f24f59d96471e8c" kindref="member">IDC_DAGORPATH</ref>:</highlight></codeline>
<codeline lineno="1074"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(HIWORD(wParam))</highlight></codeline>
<codeline lineno="1075"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1076"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>EN_SETFOCUS:<sp/>DisableAccelerators();<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1077"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>EN_KILLFOCUS:<sp/>EnableAccelerators();<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1078"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>EN_CHANGE:</highlight></codeline>
<codeline lineno="1079"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!prevent_enchange)</highlight></codeline>
<codeline lineno="1080"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1081"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GetDlgItemText(hDlg,<sp/><ref refid="resource_8h_1abb5cc701f25306ac5f24f59d96471e8c" kindref="member">IDC_DAGORPATH</ref>,<sp/>path,<sp/>MAX_PATH);</highlight></codeline>
<codeline lineno="1082"><highlight class="normal"></highlight></codeline>
<codeline lineno="1083"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TSTR<sp/>new_path<sp/>=<sp/><ref refid="common_8cpp_1a7987669935f82bfd122e32c8f3ae2d58" kindref="member">drop_quotation_marks</ref>(path);</highlight></codeline>
<codeline lineno="1084"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(path<sp/>!=<sp/>new_path)</highlight></codeline>
<codeline lineno="1085"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1086"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classAutotoggle" kindref="compound">Autotoggle</ref><sp/>eguard(prevent_enchange);</highlight></codeline>
<codeline lineno="1087"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="common_8cpp_1adc4b6cbb3c15d79ea757b361472a5430" kindref="member">update_path_edit_control</ref>(hDlg,<sp/><ref refid="resource_8h_1abb5cc701f25306ac5f24f59d96471e8c" kindref="member">IDC_DAGORPATH</ref>,<sp/>new_path);</highlight></codeline>
<codeline lineno="1088"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1089"><highlight class="normal"></highlight></codeline>
<codeline lineno="1090"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DWORD<sp/>attr<sp/>=<sp/>GetFileAttributes(new_path.data());</highlight></codeline>
<codeline lineno="1091"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!(attr<sp/>&amp;<sp/>FILE_ATTRIBUTE_DIRECTORY))</highlight></codeline>
<codeline lineno="1092"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1093"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TSTR<sp/>dir,<sp/>filename,<sp/>ext;</highlight></codeline>
<codeline lineno="1094"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SplitFilename(new_path.data(),<sp/>&amp;dir,<sp/>&amp;filename,<sp/>&amp;ext);</highlight></codeline>
<codeline lineno="1095"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>filename<sp/>+=<sp/>ext;</highlight></codeline>
<codeline lineno="1096"><highlight class="normal"></highlight></codeline>
<codeline lineno="1097"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classAutotoggle" kindref="compound">Autotoggle</ref><sp/>eguard(prevent_enchange);</highlight></codeline>
<codeline lineno="1098"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="common_8cpp_1adc4b6cbb3c15d79ea757b361472a5430" kindref="member">update_path_edit_control</ref>(hDlg,<sp/><ref refid="resource_8h_1abb5cc701f25306ac5f24f59d96471e8c" kindref="member">IDC_DAGORPATH</ref>,<sp/>new_path);</highlight></codeline>
<codeline lineno="1099"><highlight class="normal"></highlight></codeline>
<codeline lineno="1100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>util.<ref refid="classImpUtil_1a674477879ac16175c457b88d0edafef7" kindref="member">dirPath</ref><sp/>=<sp/>dir;</highlight></codeline>
<codeline lineno="1101"><highlight class="normal"></highlight></codeline>
<codeline lineno="1102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>util.<ref refid="classImpUtil_1a46b719be93e53180788285db6edd9f23" kindref="member">wildcard</ref>.<ref refid="structImpUtil_1_1Rules_1ae255e8014e6a77028ce11373944a64e7" kindref="member">clear</ref>();</highlight></codeline>
<codeline lineno="1103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>util.<ref refid="classImpUtil_1a3be70cdfe85ab05d0b1729674674f5ec" kindref="member">regex</ref>.<ref refid="structImpUtil_1_1Rules_1ae255e8014e6a77028ce11373944a64e7" kindref="member">clear</ref>();</highlight></codeline>
<codeline lineno="1104"><highlight class="normal"></highlight></codeline>
<codeline lineno="1105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>util.<ref refid="classImpUtil_1a46b719be93e53180788285db6edd9f23" kindref="member">wildcard</ref>.<ref refid="structImpUtil_1_1Rules_1a714be1d9ee0f72ffd6272fb066836009" kindref="member">incl</ref>.push_back(filename.data());</highlight></codeline>
<codeline lineno="1106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>util.<ref refid="classImpUtil_1a3be70cdfe85ab05d0b1729674674f5ec" kindref="member">regex</ref>.<ref refid="structImpUtil_1_1Rules_1a714be1d9ee0f72ffd6272fb066836009" kindref="member">incl</ref>.push_back((TSTR(_T(</highlight><highlight class="stringliteral">&quot;^&quot;</highlight><highlight class="normal">))<sp/>+<sp/>filename<sp/>+<sp/>TSTR(_T(</highlight><highlight class="stringliteral">&quot;$&quot;</highlight><highlight class="normal">))).data());</highlight></codeline>
<codeline lineno="1107"><highlight class="normal"></highlight></codeline>
<codeline lineno="1108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((<ref refid="classWListView" kindref="compound">WListView</ref><sp/>*)GetProp(hDlg,<sp/>PROP_INCL))-&gt;UpdateView();</highlight></codeline>
<codeline lineno="1109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((<ref refid="classWListView" kindref="compound">WListView</ref><sp/>*)GetProp(hDlg,<sp/>PROP_EXCL))-&gt;UpdateView();</highlight></codeline>
<codeline lineno="1110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>util.<ref refid="classImpUtil_1a674477879ac16175c457b88d0edafef7" kindref="member">dirPath</ref><sp/>=<sp/>new_path;</highlight></codeline>
<codeline lineno="1113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1117"><highlight class="normal"></highlight></codeline>
<codeline lineno="1118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="resource_8h_1aa0dbd03604c4c0290dceed41e68c848b" kindref="member">IDC_OPENDIR</ref>:<sp/>util.<ref refid="classImpUtil_1acbaed671d5e372cbd174ab4ece37234d" kindref="member">openImportDirectory</ref>();<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1119"><highlight class="normal"></highlight></codeline>
<codeline lineno="1120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1123"><highlight class="normal"></highlight></codeline>
<codeline lineno="1124"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>WM_NOTIFY:</highlight></codeline>
<codeline lineno="1125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(LOWORD(wParam)<sp/>==<sp/><ref refid="resource_8h_1ace258312b64f21abd3232a425704afd8" kindref="member">IDC_PATHLIST_INCL</ref>)</highlight></codeline>
<codeline lineno="1126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>((<ref refid="classWListView" kindref="compound">WListView</ref><sp/>*)GetProp(hDlg,<sp/>PROP_INCL))-&gt;EditRule(lParam);</highlight></codeline>
<codeline lineno="1127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(LOWORD(wParam)<sp/>==<sp/><ref refid="resource_8h_1a3016a842952b8b8947a50213352646db" kindref="member">IDC_PATHLIST_EXCL</ref>)</highlight></codeline>
<codeline lineno="1128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>((<ref refid="classWListView" kindref="compound">WListView</ref><sp/>*)GetProp(hDlg,<sp/>PROP_EXCL))-&gt;EditRule(lParam);</highlight></codeline>
<codeline lineno="1129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1130"><highlight class="normal"></highlight></codeline>
<codeline lineno="1131"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>FALSE;</highlight></codeline>
<codeline lineno="1132"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1133"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>TRUE;</highlight></codeline>
<codeline lineno="1134"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1135"><highlight class="normal"></highlight></codeline>
<codeline lineno="1136"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>INT_PTR<sp/>CALLBACK<sp/>imp_help_dlg_proc(HWND<sp/>hDlg,<sp/>UINT<sp/>message,<sp/>WPARAM<sp/>wParam,<sp/>LPARAM<sp/>lParam)</highlight></codeline>
<codeline lineno="1137"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1138"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(message)</highlight></codeline>
<codeline lineno="1139"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1140"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>WM_INITDIALOG:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>FALSE;</highlight></codeline>
<codeline lineno="1141"><highlight class="normal"></highlight></codeline>
<codeline lineno="1142"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>WM_COMMAND:</highlight></codeline>
<codeline lineno="1143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(LOWORD(wParam))</highlight></codeline>
<codeline lineno="1144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="resource_8h_1ac87f12c41e8687b432d22a07d18bef92" kindref="member">IDC_OPEN_DOC</ref>:<sp/>util.<ref refid="classImpUtil_1a96b7bdc4d3e30f24b0ee8c9544d7e886" kindref="member">openDocumentation</ref>();<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1148"><highlight class="normal"></highlight></codeline>
<codeline lineno="1149"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>FALSE;</highlight></codeline>
<codeline lineno="1150"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1151"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>TRUE;</highlight></codeline>
<codeline lineno="1152"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1153"><highlight class="normal"></highlight></codeline>
<codeline lineno="1154"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>INT_PTR<sp/>CALLBACK<sp/>imp_param_dlg_proc(HWND<sp/>hDlg,<sp/>UINT<sp/>message,<sp/>WPARAM<sp/>wParam,<sp/>LPARAM<sp/>lParam)</highlight></codeline>
<codeline lineno="1155"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1156"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(message)</highlight></codeline>
<codeline lineno="1157"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1158"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>WM_INITDIALOG:</highlight></codeline>
<codeline lineno="1159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>CheckDlgButton(hDlg,<sp/><ref refid="resource_8h_1ad907d3b990dc93c78d60047e8d7edd77" kindref="member">IDC_SEARCH_IN_SUBFOLDERS</ref>,<sp/><ref refid="classDagImp_1aed5e30f8490310f5b2b512ea7f98587e" kindref="member">DagImp::searchInSubfolders</ref>);</highlight></codeline>
<codeline lineno="1160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>CheckDlgButton(hDlg,<sp/><ref refid="resource_8h_1aa6ab808ecee7a9c1230440bc1f659085" kindref="member">IDC_REIMPORT_EXISTING</ref>,<sp/><ref refid="classDagImp_1a6a73e019f74e964f8a0121334ffb9903" kindref="member">DagImp::reimportExisting</ref>);</highlight></codeline>
<codeline lineno="1161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>util.<ref refid="classImpUtil_1a9e360dcd2d3d40b3f112e39e0ed55d32" kindref="member">tooltipExtender</ref>.SetToolTip(GetDlgItem(hDlg,<sp/><ref refid="resource_8h_1ad907d3b990dc93c78d60047e8d7edd77" kindref="member">IDC_SEARCH_IN_SUBFOLDERS</ref>),<sp/>TSTR(_T(</highlight><highlight class="stringliteral">&quot;Search<sp/>for<sp/>.dag<sp/>in<sp/>subfolders<sp/>as<sp/>well&quot;</highlight><highlight class="normal">)));</highlight></codeline>
<codeline lineno="1162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>util.<ref refid="classImpUtil_1a9e360dcd2d3d40b3f112e39e0ed55d32" kindref="member">tooltipExtender</ref>.SetToolTip(GetDlgItem(hDlg,<sp/><ref refid="resource_8h_1aa6ab808ecee7a9c1230440bc1f659085" kindref="member">IDC_REIMPORT_EXISTING</ref>),</highlight></codeline>
<codeline lineno="1163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TSTR(_T(</highlight><highlight class="stringliteral">&quot;Replace<sp/>dags<sp/>that<sp/>already<sp/>exist<sp/>in<sp/>scene<sp/>by<sp/>imported<sp/>versions&quot;</highlight><highlight class="normal">)));</highlight></codeline>
<codeline lineno="1164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>FALSE;</highlight></codeline>
<codeline lineno="1165"><highlight class="normal"></highlight></codeline>
<codeline lineno="1166"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>WM_COMMAND:</highlight></codeline>
<codeline lineno="1167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(LOWORD(wParam))</highlight></codeline>
<codeline lineno="1168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="resource_8h_1ad907d3b990dc93c78d60047e8d7edd77" kindref="member">IDC_SEARCH_IN_SUBFOLDERS</ref>:<sp/><ref refid="classDagImp_1aed5e30f8490310f5b2b512ea7f98587e" kindref="member">DagImp::searchInSubfolders</ref><sp/>=<sp/>IsDlgButtonChecked(hDlg,<sp/><ref refid="resource_8h_1ad907d3b990dc93c78d60047e8d7edd77" kindref="member">IDC_SEARCH_IN_SUBFOLDERS</ref>);<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1170"><highlight class="normal"></highlight></codeline>
<codeline lineno="1171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="resource_8h_1aa6ab808ecee7a9c1230440bc1f659085" kindref="member">IDC_REIMPORT_EXISTING</ref>:<sp/><ref refid="classDagImp_1a6a73e019f74e964f8a0121334ffb9903" kindref="member">DagImp::reimportExisting</ref><sp/>=<sp/>IsDlgButtonChecked(hDlg,<sp/><ref refid="resource_8h_1aa6ab808ecee7a9c1230440bc1f659085" kindref="member">IDC_REIMPORT_EXISTING</ref>);<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1174"><highlight class="normal"></highlight></codeline>
<codeline lineno="1175"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>FALSE;</highlight></codeline>
<codeline lineno="1176"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1177"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>TRUE;</highlight></codeline>
<codeline lineno="1178"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1179"><highlight class="normal"></highlight></codeline>
<codeline lineno="1180"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>INT_PTR<sp/>CALLBACK<sp/>imp_dlg_proc(HWND<sp/>hDlg,<sp/>UINT<sp/>message,<sp/>WPARAM<sp/>wParam,<sp/>LPARAM<sp/>lParam)</highlight></codeline>
<codeline lineno="1181"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1182"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(message)</highlight></codeline>
<codeline lineno="1183"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1184"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>WM_INITDIALOG:</highlight></codeline>
<codeline lineno="1185"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>util.<ref refid="classImpUtil_1a2399dee70c6460f25cf0953a1a0de2eb" kindref="member">hTab</ref><sp/>=<sp/>GetDlgItem(hDlg,<sp/><ref refid="resource_8h_1a2faf8a2d96d45e28ae2f5fe452d97f5e" kindref="member">IDC_TAB1</ref>);</highlight></codeline>
<codeline lineno="1187"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>assert(util.<ref refid="classImpUtil_1a2399dee70c6460f25cf0953a1a0de2eb" kindref="member">hTab</ref>);</highlight></codeline>
<codeline lineno="1188"><highlight class="normal"></highlight></codeline>
<codeline lineno="1189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>TCITEM<sp/>tie<sp/>=<sp/>{0};</highlight></codeline>
<codeline lineno="1190"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>tie.mask<sp/>=<sp/>TCIF_TEXT;</highlight></codeline>
<codeline lineno="1191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>tie.pszText<sp/>=<sp/>(LPWSTR)<sp/>_T(</highlight><highlight class="stringliteral">&quot;Legacy&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>TabCtrl_InsertItem(util.<ref refid="classImpUtil_1a2399dee70c6460f25cf0953a1a0de2eb" kindref="member">hTab</ref>,<sp/>0,<sp/>&amp;tie);</highlight></codeline>
<codeline lineno="1193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>tie.pszText<sp/>=<sp/>(LPWSTR)<sp/>_T(</highlight><highlight class="stringliteral">&quot;Standard&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1194"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>TabCtrl_InsertItem(util.<ref refid="classImpUtil_1a2399dee70c6460f25cf0953a1a0de2eb" kindref="member">hTab</ref>,<sp/>1,<sp/>&amp;tie);</highlight></codeline>
<codeline lineno="1195"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>tie.pszText<sp/>=<sp/>(LPWSTR)<sp/>_T(</highlight><highlight class="stringliteral">&quot;Wildcard&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>TabCtrl_InsertItem(util.<ref refid="classImpUtil_1a2399dee70c6460f25cf0953a1a0de2eb" kindref="member">hTab</ref>,<sp/>2,<sp/>&amp;tie);</highlight></codeline>
<codeline lineno="1197"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>tie.pszText<sp/>=<sp/>(LPWSTR)<sp/>_T(</highlight><highlight class="stringliteral">&quot;Regex&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>TabCtrl_InsertItem(util.<ref refid="classImpUtil_1a2399dee70c6460f25cf0953a1a0de2eb" kindref="member">hTab</ref>,<sp/>3,<sp/>&amp;tie);</highlight></codeline>
<codeline lineno="1199"><highlight class="normal"></highlight></codeline>
<codeline lineno="1200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>TabCtrl_SetCurSel(util.<ref refid="classImpUtil_1a2399dee70c6460f25cf0953a1a0de2eb" kindref="member">hTab</ref>,<sp/><ref refid="classDagImp_1ae89838cf454485eaab1a6f5b752f4c15" kindref="member">DagImp::useLegacyImport</ref><sp/>?<sp/>0<sp/>:<sp/>1);</highlight></codeline>
<codeline lineno="1201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>util.<ref refid="classImpUtil_1a5eb3600bf909ff732723cd66d0d8b561" kindref="member">onTabChanged</ref>(hDlg);</highlight></codeline>
<codeline lineno="1202"><highlight class="normal"></highlight></codeline>
<codeline lineno="1203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>util.<ref refid="classImpUtil_1a9e360dcd2d3d40b3f112e39e0ed55d32" kindref="member">tooltipExtender</ref>.SetToolTip(GetDlgItem(hDlg,<sp/><ref refid="resource_8h_1ae1bcf44d1d2876c8ee72a4bac31466cc" kindref="member">IDC_IMPORT</ref>),<sp/>TSTR(_T(</highlight><highlight class="stringliteral">&quot;Import<sp/>DAG<sp/>file(s)&quot;</highlight><highlight class="normal">)));</highlight></codeline>
<codeline lineno="1204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>util.<ref refid="classImpUtil_1a9e360dcd2d3d40b3f112e39e0ed55d32" kindref="member">tooltipExtender</ref>.SetToolTip(GetDlgItem(hDlg,<sp/><ref refid="resource_8h_1aa0dbd03604c4c0290dceed41e68c848b" kindref="member">IDC_OPENDIR</ref>),<sp/>TSTR(_T(</highlight><highlight class="stringliteral">&quot;Open<sp/>a<sp/>path<sp/>in<sp/>a<sp/>file<sp/>browser&quot;</highlight><highlight class="normal">)));</highlight></codeline>
<codeline lineno="1205"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>FALSE;<sp/></highlight><highlight class="comment">//<sp/>don&apos;t<sp/>set<sp/>keyboard<sp/>focus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1207"><highlight class="normal"></highlight></codeline>
<codeline lineno="1208"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>WM_NOTIFY:</highlight></codeline>
<codeline lineno="1209"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>LPNMHDR<sp/>tc<sp/>=<sp/>(LPNMHDR)lParam;</highlight></codeline>
<codeline lineno="1211"><highlight class="normal"></highlight></codeline>
<codeline lineno="1212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(tc-&gt;code<sp/>==<sp/>TCN_SELCHANGE<sp/>&amp;&amp;<sp/>tc-&gt;hwndFrom<sp/>==<sp/>util.<ref refid="classImpUtil_1a2399dee70c6460f25cf0953a1a0de2eb" kindref="member">hTab</ref>)</highlight></codeline>
<codeline lineno="1213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>util.<ref refid="classImpUtil_1a5eb3600bf909ff732723cd66d0d8b561" kindref="member">onTabChanged</ref>(hDlg);</highlight></codeline>
<codeline lineno="1214"><highlight class="normal"></highlight></codeline>
<codeline lineno="1215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(tc-&gt;code<sp/>==<sp/>TTN_GETDISPINFO)</highlight></codeline>
<codeline lineno="1216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1217"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LPNMTTDISPINFO<sp/>tdi<sp/>=<sp/>(LPNMTTDISPINFO)lParam;</highlight></codeline>
<codeline lineno="1218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>wcscpy_s(tdi-&gt;szText,<sp/>ARRAYSIZE(tdi-&gt;szText),<sp/>util.<ref refid="classImpUtil_1ac250df592f1b30563f180dc31cf155b7" kindref="member">tabHint</ref>(tdi-&gt;hdr.idFrom));</highlight></codeline>
<codeline lineno="1219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1220"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1221"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1222"><highlight class="normal"></highlight></codeline>
<codeline lineno="1223"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="layout_8h_1aed00501af96b4cd497da0588c11beecc" kindref="member">LAYOUT_MESSAGE</ref>:<sp/>util.<ref refid="classImpUtil_1a2ffb6fd1ef20d9d0386983a83f3df3ab" kindref="member">updateTab</ref>();<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1224"><highlight class="normal"></highlight></codeline>
<codeline lineno="1225"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>WM_COMMAND:</highlight></codeline>
<codeline lineno="1226"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(LOWORD(wParam))</highlight></codeline>
<codeline lineno="1227"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1228"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="resource_8h_1ae1bcf44d1d2876c8ee72a4bac31466cc" kindref="member">IDC_IMPORT</ref>:<sp/>util.<ref refid="classImpUtil_1a998d5c514b5d8a2f0cddc8c015261035" kindref="member">doImport</ref>();<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1229"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1230"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1231"><highlight class="normal"></highlight></codeline>
<codeline lineno="1232"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>FALSE;</highlight></codeline>
<codeline lineno="1233"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1234"><highlight class="normal"></highlight></codeline>
<codeline lineno="1235"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>TRUE;</highlight></codeline>
<codeline lineno="1236"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1237"><highlight class="normal"></highlight></codeline>
<codeline lineno="1238"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classImpUtil_1a6e7787bbc39d7632222552ccf0323399" kindref="member">ImpUtil::BeginEditParams</ref>(Interface<sp/>*ip,<sp/>IUtil<sp/>*iu)</highlight></codeline>
<codeline lineno="1239"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1240"><highlight class="normal"><sp/><sp/>this-&gt;iu<sp/>=<sp/><ref refid="classImpUtil_1a6fa3af8024f3fa308c487db77fee6ede" kindref="member">iu</ref>;</highlight></codeline>
<codeline lineno="1241"><highlight class="normal"><sp/><sp/>this-&gt;ip<sp/>=<sp/><ref refid="classImpUtil_1abd454717661b78a9507fe23361ed9906" kindref="member">ip</ref>;</highlight></codeline>
<codeline lineno="1242"><highlight class="normal"></highlight></codeline>
<codeline lineno="1243"><highlight class="normal"><sp/><sp/>util.<ref refid="classImpUtil_1a9e360dcd2d3d40b3f112e39e0ed55d32" kindref="member">tooltipExtender</ref>.RemoveToolTips();</highlight></codeline>
<codeline lineno="1244"><highlight class="normal"></highlight></codeline>
<codeline lineno="1245"><highlight class="normal"><sp/><sp/>INITCOMMONCONTROLSEX<sp/>icex;</highlight></codeline>
<codeline lineno="1246"><highlight class="normal"><sp/><sp/>icex.dwSize<sp/>=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(INITCOMMONCONTROLSEX);</highlight></codeline>
<codeline lineno="1247"><highlight class="normal"><sp/><sp/>icex.dwICC<sp/>=<sp/>ICC_TAB_CLASSES<sp/>|<sp/>ICC_LISTVIEW_CLASSES;</highlight></codeline>
<codeline lineno="1248"><highlight class="normal"><sp/><sp/>InitCommonControlsEx(&amp;icex);</highlight></codeline>
<codeline lineno="1249"><highlight class="normal"></highlight></codeline>
<codeline lineno="1250"><highlight class="normal"><sp/><sp/><ref refid="classImpUtil_1a127fc868d986c3f635b8c1c652624e22" kindref="member">hImpHelp</ref><sp/>=<sp/><ref refid="common_8cpp_1ab84324e6a3ef91427b0e8a5b101a4b98" kindref="member">add_rollup_page</ref>(<ref refid="classImpUtil_1abd454717661b78a9507fe23361ed9906" kindref="member">ip</ref>,<sp/><ref refid="resource_8h_1a812b1db4cf7b23ae92df59704b90d397" kindref="member">IDD_IMPUTIL_HELP</ref>,<sp/>imp_help_dlg_proc,<sp/><ref refid="common_8cpp_1aeb87de5dfb5d632579574b4bc8709019" kindref="member">GetString</ref>(<ref refid="resource_8h_1ada755a1584c82f2f1bace1bbdd869882" kindref="member">IDS_IMPUTIL_HELP_ROLL</ref>),<sp/>0,<sp/>APPENDROLL_CLOSED);</highlight></codeline>
<codeline lineno="1251"><highlight class="normal"><sp/><sp/><ref refid="classImpUtil_1acab5fd278f79b1b72c8dcd82af71e061" kindref="member">hImpParam</ref><sp/>=<sp/><ref refid="common_8cpp_1ab84324e6a3ef91427b0e8a5b101a4b98" kindref="member">add_rollup_page</ref>(<ref refid="classImpUtil_1abd454717661b78a9507fe23361ed9906" kindref="member">ip</ref>,<sp/><ref refid="resource_8h_1a84c7d5000875b1df33420b9b7fd633a0" kindref="member">IDD_IMPUTIL_PARAM</ref>,<sp/>imp_param_dlg_proc,<sp/><ref refid="common_8cpp_1aeb87de5dfb5d632579574b4bc8709019" kindref="member">GetString</ref>(<ref refid="resource_8h_1a4956d2e72e8536a429255bd1976c6fd4" kindref="member">IDS_IMPUTIL_PARAM_ROLL</ref>));</highlight></codeline>
<codeline lineno="1252"><highlight class="normal"><sp/><sp/><ref refid="classImpUtil_1afdee8ac4d3b2b7882bdb93cb2fda0b35" kindref="member">hImpPanel</ref><sp/>=<sp/><ref refid="common_8cpp_1ab84324e6a3ef91427b0e8a5b101a4b98" kindref="member">add_rollup_page</ref>(<ref refid="classImpUtil_1abd454717661b78a9507fe23361ed9906" kindref="member">ip</ref>,<sp/><ref refid="resource_8h_1aa903bc03e60bca297a10400735bf4cd7" kindref="member">IDD_IMPUTIL</ref>,<sp/>imp_dlg_proc,<sp/><ref refid="common_8cpp_1aeb87de5dfb5d632579574b4bc8709019" kindref="member">GetString</ref>(<ref refid="resource_8h_1a7a100af48a083180eaa87f7cf59d2c5b" kindref="member">IDS_IMPUTIL_ROLL</ref>));</highlight></codeline>
<codeline lineno="1253"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1254"><highlight class="normal"></highlight></codeline>
<codeline lineno="1255"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classImpUtil_1a202028631f572f0cdb36921b290e885a" kindref="member">ImpUtil::EndEditParams</ref>(Interface<sp/>*ip,<sp/>IUtil<sp/>*iu)</highlight></codeline>
<codeline lineno="1256"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1257"><highlight class="normal"><sp/><sp/>this-&gt;iu<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="1258"><highlight class="normal"><sp/><sp/>this-&gt;ip<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="1259"><highlight class="normal"><sp/><sp/><ref refid="common_8cpp_1ac9901f1c91ba6fca4d76e222820f8b52" kindref="member">delete_rollup_page</ref>(<ref refid="classImpUtil_1abd454717661b78a9507fe23361ed9906" kindref="member">ip</ref>,<sp/>&amp;<ref refid="classImpUtil_1a127fc868d986c3f635b8c1c652624e22" kindref="member">hImpHelp</ref>);</highlight></codeline>
<codeline lineno="1260"><highlight class="normal"><sp/><sp/><ref refid="common_8cpp_1ac9901f1c91ba6fca4d76e222820f8b52" kindref="member">delete_rollup_page</ref>(<ref refid="classImpUtil_1abd454717661b78a9507fe23361ed9906" kindref="member">ip</ref>,<sp/>&amp;<ref refid="classImpUtil_1acab5fd278f79b1b72c8dcd82af71e061" kindref="member">hImpParam</ref>);</highlight></codeline>
<codeline lineno="1261"><highlight class="normal"><sp/><sp/><ref refid="common_8cpp_1ac9901f1c91ba6fca4d76e222820f8b52" kindref="member">delete_rollup_page</ref>(<ref refid="classImpUtil_1abd454717661b78a9507fe23361ed9906" kindref="member">ip</ref>,<sp/>&amp;<ref refid="classImpUtil_1afdee8ac4d3b2b7882bdb93cb2fda0b35" kindref="member">hImpPanel</ref>);</highlight></codeline>
<codeline lineno="1262"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1263"><highlight class="normal"></highlight></codeline>
<codeline lineno="1264" refid="classImpUtilDesc" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classImpUtilDesc" kindref="compound">ImpUtilDesc</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>ClassDesc</highlight></codeline>
<codeline lineno="1265"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1266"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1267"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="classImpUtilDesc_1a3a66a492da3ff9c4e4515655aa77c1ef" kindref="member">IsPublic</ref>()</highlight><highlight class="keyword"><sp/>override<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;<sp/>}</highlight></codeline>
<codeline lineno="1268"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="classImpUtilDesc_1a33eb9fbe6448100f51259e03ebdc0511" kindref="member">Create</ref>(BOOL<sp/>loading<sp/>=<sp/>FALSE)</highlight><highlight class="keyword"><sp/>override<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>&amp;util;<sp/>}</highlight></codeline>
<codeline lineno="1269"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TCHAR<sp/>*<ref refid="classImpUtilDesc_1ad4dc3a61ac88ba15736a5e2a6af66f96" kindref="member">ClassName</ref>()</highlight><highlight class="keyword"><sp/>override<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="common_8cpp_1aeb87de5dfb5d632579574b4bc8709019" kindref="member">GetString</ref>(<ref refid="resource_8h_1ac480b71924162f4946da7075827a579b" kindref="member">IDS_IMPUTIL_NAME</ref>);<sp/>}</highlight></codeline>
<codeline lineno="1270"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(MAX_RELEASE_R24)<sp/>&amp;&amp;<sp/>MAX_RELEASE<sp/>&gt;=<sp/>MAX_RELEASE_R24</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1271"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="max__cpt_8h_1ac2ec3340fbe0c6ea0663fd3923d13fe5" kindref="member">MCHAR</ref><sp/>*<ref refid="classImpUtilDesc_1a02ccc2695ca00997ee5164591d57a53c" kindref="member">NonLocalizedClassName</ref>()</highlight><highlight class="keyword"><sp/>override<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classImpUtilDesc_1ad4dc3a61ac88ba15736a5e2a6af66f96" kindref="member">ClassName</ref>();<sp/>}</highlight></codeline>
<codeline lineno="1272"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1273"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="max__cpt_8h_1ac2ec3340fbe0c6ea0663fd3923d13fe5" kindref="member">MCHAR</ref><sp/>*<ref refid="classImpUtilDesc_1a02ccc2695ca00997ee5164591d57a53c" kindref="member">NonLocalizedClassName</ref>()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classImpUtilDesc_1ad4dc3a61ac88ba15736a5e2a6af66f96" kindref="member">ClassName</ref>();<sp/>}</highlight></codeline>
<codeline lineno="1274"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1275"><highlight class="normal"><sp/><sp/>SClass_ID<sp/><ref refid="classImpUtilDesc_1a16f7a15268e46a0b5115b91c2f399c58" kindref="member">SuperClassID</ref>()</highlight><highlight class="keyword"><sp/>override<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>UTILITY_CLASS_ID;<sp/>}</highlight></codeline>
<codeline lineno="1276"><highlight class="normal"><sp/><sp/>Class_ID<sp/><ref refid="classImpUtilDesc_1a2455c3b3767d328d6a941e007d7256ed" kindref="member">ClassID</ref>()</highlight><highlight class="keyword"><sp/>override<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="dagor_8h_1a521d38f8684ee5929182f5ac8cafa145" kindref="member">ImpUtil_CID</ref>;<sp/>}</highlight></codeline>
<codeline lineno="1277"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TCHAR<sp/>*<ref refid="classImpUtilDesc_1a79d5248ddfe0711c5fc3a0dd01165ac3" kindref="member">Category</ref>()</highlight><highlight class="keyword"><sp/>override<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="common_8cpp_1aeb87de5dfb5d632579574b4bc8709019" kindref="member">GetString</ref>(<ref refid="resource_8h_1a197942343099f043d210a555ea7e026f" kindref="member">IDS_UTIL_CAT</ref>);<sp/>}</highlight></codeline>
<codeline lineno="1278"><highlight class="normal"><sp/><sp/>BOOL<sp/><ref refid="classImpUtilDesc_1afc3f38ac8009d482bf067a20cf9491b0" kindref="member">NeedsToSave</ref>()</highlight><highlight class="keyword"><sp/>override<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>FALSE;<sp/>}</highlight></codeline>
<codeline lineno="1279"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1280"><highlight class="normal"></highlight></codeline>
<codeline lineno="1281"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="classImpUtilDesc" kindref="compound">ImpUtilDesc</ref><sp/>utilDesc;</highlight></codeline>
<codeline lineno="1282"><highlight class="normal">ClassDesc<sp/>*<ref refid="dagimp_8cpp_1a087ee67f0c94cc487312ccd5a4f327dc" kindref="member">GetImpUtilCD</ref>()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>&amp;utilDesc;<sp/>}</highlight></codeline>
<codeline lineno="1283"><highlight class="normal"></highlight></codeline>
<codeline lineno="1284"><highlight class="normal"></highlight><highlight class="comment">//===============================================================================//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1285"><highlight class="normal"></highlight></codeline>
<codeline lineno="1286" refid="structImpMat" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structImpMat" kindref="compound">ImpMat</ref></highlight></codeline>
<codeline lineno="1287"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1288"><highlight class="normal"><sp/><sp/><ref refid="structDagMater" kindref="compound">DagMater</ref><sp/><ref refid="structImpMat_1abf1da1581d73da471dbfd398aeebfba3" kindref="member">m</ref>;</highlight></codeline>
<codeline lineno="1289"><highlight class="normal"><sp/><sp/>TCHAR<sp/>*<ref refid="structImpMat_1a0dcd841ae7f3cd66745a13cc1e0f993d" kindref="member">name</ref>;</highlight></codeline>
<codeline lineno="1290"><highlight class="normal"><sp/><sp/>TCHAR<sp/>*<ref refid="structImpMat_1af396b8a8ee19cfa0571565f5601fc31a" kindref="member">clsname</ref>;</highlight></codeline>
<codeline lineno="1291"><highlight class="normal"><sp/><sp/>TCHAR<sp/>*<ref refid="structImpMat_1a3d2834f68f0a8e37bd712287f1d6181e" kindref="member">script</ref>;</highlight></codeline>
<codeline lineno="1292"><highlight class="normal"><sp/><sp/>Mtl<sp/>*<ref refid="structImpMat_1a9a9b8d52f4db80e54bc011c97e0a5eb9" kindref="member">mtl</ref>;</highlight></codeline>
<codeline lineno="1293"><highlight class="normal"><sp/><sp/><ref refid="structImpMat_1a8c33df7bb12bdec422fdaf6a2d4c69b5" kindref="member">ImpMat</ref>()</highlight></codeline>
<codeline lineno="1294"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1295"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structImpMat_1a0dcd841ae7f3cd66745a13cc1e0f993d" kindref="member">name</ref><sp/>=<sp/><ref refid="structImpMat_1af396b8a8ee19cfa0571565f5601fc31a" kindref="member">clsname</ref><sp/>=<sp/><ref refid="structImpMat_1a3d2834f68f0a8e37bd712287f1d6181e" kindref="member">script</ref><sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="1296"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structImpMat_1a9a9b8d52f4db80e54bc011c97e0a5eb9" kindref="member">mtl</ref><sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="1297"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1298"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1299"><highlight class="normal"></highlight></codeline>
<codeline lineno="1300" refid="structImpnode" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structImpnode" kindref="compound">Impnode</ref></highlight></codeline>
<codeline lineno="1301"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1302"><highlight class="normal"><sp/><sp/>ImpNode<sp/>*<ref refid="structImpnode_1a929a21a114751b909e905ad31ac1658b" kindref="member">in</ref>;</highlight></codeline>
<codeline lineno="1303"><highlight class="normal"><sp/><sp/>INode<sp/>*<ref refid="structImpnode_1ade71e8e1a662bcda3458ce2621c543a5" kindref="member">n</ref>;</highlight></codeline>
<codeline lineno="1304"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>ushort<sp/>pid;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1305"><highlight class="normal"><sp/><sp/>Mtl<sp/>*<ref refid="structImpnode_1afe617d735830b1ba0987d73de407e1c6" kindref="member">mtl</ref>;</highlight></codeline>
<codeline lineno="1306"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1307"><highlight class="normal"></highlight></codeline>
<codeline lineno="1308"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>Tab&lt;TCHAR<sp/>*&gt;<sp/>tex;</highlight></codeline>
<codeline lineno="1309"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>Tab&lt;ImpMat&gt;<sp/>mat;</highlight></codeline>
<codeline lineno="1310"><highlight class="normal"></highlight><highlight class="comment">//<sp/>static<sp/>Tab&lt;Impnode&gt;<sp/>node;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1311"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>Tab&lt;TCHAR<sp/>*&gt;<sp/>keylabel;</highlight></codeline>
<codeline lineno="1312"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>Tab&lt;DefNoteTrack<sp/>*&gt;<sp/>ntrack;</highlight></codeline>
<codeline lineno="1313"><highlight class="normal"></highlight><highlight class="comment">//<sp/>static<sp/>Tab&lt;DagNoteKey*&gt;<sp/>ntrack;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1314"><highlight class="normal"></highlight><highlight class="comment">//<sp/>static<sp/>Tab&lt;int&gt;<sp/>ntrack_knum;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1315"><highlight class="normal"></highlight></codeline>
<codeline lineno="1316"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>TSTR<sp/>scene_name<sp/>=<sp/>_T(</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1317"><highlight class="normal"></highlight></codeline>
<codeline lineno="1318"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>cleanup(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>err<sp/>=<sp/>0)</highlight></codeline>
<codeline lineno="1319"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1320"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="1321"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>tex.Count();<sp/>++i)</highlight></codeline>
<codeline lineno="1322"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(tex[i])</highlight></codeline>
<codeline lineno="1323"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>free(tex[i]);</highlight></codeline>
<codeline lineno="1324"><highlight class="normal"><sp/><sp/>tex.ZeroCount();</highlight></codeline>
<codeline lineno="1325"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>mat.Count();<sp/>++i)</highlight></codeline>
<codeline lineno="1326"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1327"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mat[i].name)</highlight></codeline>
<codeline lineno="1328"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>free(mat[i].name);</highlight></codeline>
<codeline lineno="1329"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mat[i].clsname)</highlight></codeline>
<codeline lineno="1330"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>free(mat[i].clsname);</highlight></codeline>
<codeline lineno="1331"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mat[i].script)</highlight></codeline>
<codeline lineno="1332"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>free(mat[i].script);</highlight></codeline>
<codeline lineno="1333"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1334"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(err)</highlight></codeline>
<codeline lineno="1335"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1336"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>mat.Count();<sp/>++i)</highlight></codeline>
<codeline lineno="1337"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mat[i].mtl)</highlight></codeline>
<codeline lineno="1338"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mat[i].mtl-&gt;DeleteThis();</highlight></codeline>
<codeline lineno="1339"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>for(i=0;i&lt;node.Count();++i)<sp/>if(node[i].mtl)<sp/>{</highlight></codeline>
<codeline lineno="1340"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>for(int<sp/>j=0;j&lt;mat.Count();++j)<sp/>if(mat[j].mtl==node[i].mtl)<sp/>break;</highlight></codeline>
<codeline lineno="1341"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if(j&gt;=mat.Count())<sp/>node[i].mtl-&gt;DeleteThis();</highlight></codeline>
<codeline lineno="1342"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1343"><highlight class="comment"><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1344"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1345"><highlight class="normal"><sp/><sp/>mat.ZeroCount();</highlight></codeline>
<codeline lineno="1346"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>node.ZeroCount();</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1347"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>keylabel.Count();<sp/>++i)</highlight></codeline>
<codeline lineno="1348"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(keylabel[i])</highlight></codeline>
<codeline lineno="1349"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>free(keylabel[i]);</highlight></codeline>
<codeline lineno="1350"><highlight class="normal"><sp/><sp/>keylabel.ZeroCount();</highlight></codeline>
<codeline lineno="1351"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>for(i=0;i&lt;ntrack.Count();++i)<sp/>if(ntrack[i])<sp/>free(ntrack[i]);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1352"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>ntrack.Count();<sp/>++i)</highlight></codeline>
<codeline lineno="1353"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ntrack[i])</highlight></codeline>
<codeline lineno="1354"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ntrack[i]-&gt;DeleteThis();</highlight></codeline>
<codeline lineno="1355"><highlight class="normal"><sp/><sp/>ntrack.ZeroCount();</highlight></codeline>
<codeline lineno="1356"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>ntrack_knum.ZeroCount();</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1357"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1358"><highlight class="normal"></highlight></codeline>
<codeline lineno="1359"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>make_mtl(<ref refid="structImpMat" kindref="compound">ImpMat</ref><sp/>&amp;m,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ind,<sp/>Class_ID<sp/>cid)</highlight></codeline>
<codeline lineno="1360"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1361"><highlight class="normal"><sp/><sp/>m.<ref refid="structImpMat_1a9a9b8d52f4db80e54bc011c97e0a5eb9" kindref="member">mtl</ref><sp/>=<sp/>(Mtl<sp/>*)CreateInstance(MATERIAL_CLASS_ID,<sp/>cid);</highlight></codeline>
<codeline lineno="1362"><highlight class="normal"><sp/><sp/>assert(m.<ref refid="structImpMat_1a9a9b8d52f4db80e54bc011c97e0a5eb9" kindref="member">mtl</ref>);</highlight></codeline>
<codeline lineno="1363"><highlight class="normal"><sp/><sp/><ref refid="classIDagorMat" kindref="compound">IDagorMat</ref><sp/>*d<sp/>=<sp/>(<ref refid="classIDagorMat" kindref="compound">IDagorMat</ref><sp/>*)m.<ref refid="structImpMat_1a9a9b8d52f4db80e54bc011c97e0a5eb9" kindref="member">mtl</ref>-&gt;GetInterface(<ref refid="mater_8h_1a36dcaa0c637134b05278e83da132935e" kindref="member">I_DAGORMAT</ref>);</highlight></codeline>
<codeline lineno="1364"><highlight class="normal"><sp/><sp/>assert(d);</highlight></codeline>
<codeline lineno="1365"><highlight class="normal"><sp/><sp/>d-&gt;<ref refid="classIDagorMat_1a3d3d99ddfd74b9097aee8182d703aab5" kindref="member">set_amb</ref>(m.<ref refid="structImpMat_1abf1da1581d73da471dbfd398aeebfba3" kindref="member">m</ref>.<ref refid="structDagMater_1a05b84552c4d9c66cc4261aef9c5a2527" kindref="member">amb</ref>);</highlight></codeline>
<codeline lineno="1366"><highlight class="normal"><sp/><sp/>d-&gt;<ref refid="classIDagorMat_1acd05e9a7c199e6ca8e12f8479ae733c4" kindref="member">set_diff</ref>(m.<ref refid="structImpMat_1abf1da1581d73da471dbfd398aeebfba3" kindref="member">m</ref>.<ref refid="structDagMater_1ade0995b87a7c30f2e6f58551a631cd8d" kindref="member">diff</ref>);</highlight></codeline>
<codeline lineno="1367"><highlight class="normal"><sp/><sp/>d-&gt;<ref refid="classIDagorMat_1aa80fad171c33a42412edb879d64b5528" kindref="member">set_emis</ref>(m.<ref refid="structImpMat_1abf1da1581d73da471dbfd398aeebfba3" kindref="member">m</ref>.<ref refid="structDagMater_1a7053dfde42a85aea927cd9a63b6a8f6b" kindref="member">emis</ref>);</highlight></codeline>
<codeline lineno="1368"><highlight class="normal"><sp/><sp/>d-&gt;<ref refid="classIDagorMat_1a12f0adb00b6c0862ab4d004f196c54bd" kindref="member">set_spec</ref>((m.<ref refid="structImpMat_1abf1da1581d73da471dbfd398aeebfba3" kindref="member">m</ref>.<ref refid="structDagMater_1aba09a83825d6d2e79bc5107f04735c96" kindref="member">power</ref><sp/>==<sp/>0.0f)<sp/>?<sp/>Color(0,<sp/>0,<sp/>0)<sp/>:<sp/>Color(m.m.spec));</highlight></codeline>
<codeline lineno="1369"><highlight class="normal"><sp/><sp/>d-&gt;<ref refid="classIDagorMat_1ac2fc4570c8981f75760921925db1b6e1" kindref="member">set_power</ref>(m.<ref refid="structImpMat_1abf1da1581d73da471dbfd398aeebfba3" kindref="member">m</ref>.<ref refid="structDagMater_1aba09a83825d6d2e79bc5107f04735c96" kindref="member">power</ref>);</highlight></codeline>
<codeline lineno="1370"><highlight class="normal"><sp/><sp/>d-&gt;<ref refid="classIDagorMat_1a5ecda33097873e6feb6e22326c1fd482" kindref="member">set_classname</ref>(m.<ref refid="structImpMat_1af396b8a8ee19cfa0571565f5601fc31a" kindref="member">clsname</ref>);</highlight></codeline>
<codeline lineno="1371"><highlight class="normal"><sp/><sp/>d-&gt;<ref refid="classIDagorMat_1ab727afb93e454029978bcec8bbb6f893" kindref="member">set_script</ref>(m.<ref refid="structImpMat_1a3d2834f68f0a8e37bd712287f1d6181e" kindref="member">script</ref>);</highlight></codeline>
<codeline lineno="1372"><highlight class="normal"></highlight></codeline>
<codeline lineno="1373"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>noname<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1374"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!m.<ref refid="structImpMat_1a0dcd841ae7f3cd66745a13cc1e0f993d" kindref="member">name</ref>)</highlight></codeline>
<codeline lineno="1375"><highlight class="normal"><sp/><sp/><sp/><sp/>noname<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="1376"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m.<ref refid="structImpMat_1a0dcd841ae7f3cd66745a13cc1e0f993d" kindref="member">name</ref>[0]<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="1377"><highlight class="normal"><sp/><sp/><sp/><sp/>noname<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="1378"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!noname)</highlight></codeline>
<codeline lineno="1379"><highlight class="normal"><sp/><sp/><sp/><sp/>m.<ref refid="structImpMat_1a9a9b8d52f4db80e54bc011c97e0a5eb9" kindref="member">mtl</ref>-&gt;SetName(m.<ref refid="structImpMat_1a0dcd841ae7f3cd66745a13cc1e0f993d" kindref="member">name</ref>);</highlight></codeline>
<codeline lineno="1380"><highlight class="normal"></highlight></codeline>
<codeline lineno="1381"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>real2sided<sp/>=<sp/>m.<ref refid="structImpMat_1a3d2834f68f0a8e37bd712287f1d6181e" kindref="member">script</ref><sp/>?<sp/>_tcsstr(m.<ref refid="structImpMat_1a3d2834f68f0a8e37bd712287f1d6181e" kindref="member">script</ref>,<sp/>_T(</highlight><highlight class="stringliteral">&quot;real_two_sided=yes&quot;</highlight><highlight class="normal">))<sp/>:<sp/>false;</highlight></codeline>
<codeline lineno="1382"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(real2sided)</highlight></codeline>
<codeline lineno="1383"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1384"><highlight class="normal"><sp/><sp/><sp/><sp/>d-&gt;<ref refid="classIDagorMat_1ab9a123a1bfa48a9c034865411fddf1e2" kindref="member">set_2sided</ref>(<ref refid="classIDagorMat_1aa9e1f9b3ca95a6715f15fe27fbfa732aadaa5aa0f34789eda3a5dff2920e7c8d0" kindref="member">IDagorMat::Sides::RealDoubleSided</ref>);</highlight></codeline>
<codeline lineno="1385"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m.<ref refid="structImpMat_1abf1da1581d73da471dbfd398aeebfba3" kindref="member">m</ref>.<ref refid="structDagMater_1af2c43c9d53a6cf2436ce87d1386ffc14" kindref="member">flags</ref><sp/>&amp;<sp/><ref refid="dagfmt_8h_1a57c22b5e490e806168b189dda7ea961d" kindref="member">DAG_MF_2SIDED</ref>)</highlight></codeline>
<codeline lineno="1386"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1387"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classDagorLogWindow_1a42c9339a383b9d8c8581d81437b3937b" kindref="member">DagorLogWindow::addToLog</ref>(<ref refid="classDagorLogWindow_1a459098ccdd150144790891abc9e6229aa32ae57a69fc892e4e85954eeaeceb376" kindref="member">DagorLogWindow::LogLevel::Warning</ref>,</highlight></codeline>
<codeline lineno="1388"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_T(</highlight><highlight class="stringliteral">&quot;The<sp/>material<sp/>&apos;%s&apos;<sp/>is<sp/>\&quot;real<sp/>2-sided\&quot;.<sp/>The<sp/>\&quot;2-sided\&quot;<sp/>flag<sp/>turned<sp/>off.\r\n&quot;</highlight><highlight class="normal">),<sp/>m.<ref refid="structImpMat_1a9a9b8d52f4db80e54bc011c97e0a5eb9" kindref="member">mtl</ref>-&gt;GetName());</highlight></codeline>
<codeline lineno="1389"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classDagorLogWindow_1a65e078c63db9c8fed5094e7a0f24e496" kindref="member">DagorLogWindow::show</ref>();</highlight></codeline>
<codeline lineno="1390"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1391"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1392"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m.<ref refid="structImpMat_1abf1da1581d73da471dbfd398aeebfba3" kindref="member">m</ref>.<ref refid="structDagMater_1af2c43c9d53a6cf2436ce87d1386ffc14" kindref="member">flags</ref><sp/>&amp;<sp/><ref refid="dagfmt_8h_1a57c22b5e490e806168b189dda7ea961d" kindref="member">DAG_MF_2SIDED</ref>)</highlight></codeline>
<codeline lineno="1393"><highlight class="normal"><sp/><sp/><sp/><sp/>d-&gt;<ref refid="classIDagorMat_1ab9a123a1bfa48a9c034865411fddf1e2" kindref="member">set_2sided</ref>(<ref refid="classIDagorMat_1aa9e1f9b3ca95a6715f15fe27fbfa732aa54c65daef485e12e23c450d276053134" kindref="member">IDagorMat::Sides::DoubleSided</ref>);</highlight></codeline>
<codeline lineno="1394"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1395"><highlight class="normal"><sp/><sp/><sp/><sp/>d-&gt;<ref refid="classIDagorMat_1ab9a123a1bfa48a9c034865411fddf1e2" kindref="member">set_2sided</ref>(<ref refid="classIDagorMat_1aa9e1f9b3ca95a6715f15fe27fbfa732aa81797e9c6fc44586202026bb6aaefe8c" kindref="member">IDagorMat::Sides::OneSided</ref>);</highlight></codeline>
<codeline lineno="1396"><highlight class="normal"></highlight></codeline>
<codeline lineno="1397"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/><ref refid="dagfmt_8h_1a282dfcbdaafa034b352413466c4f781e" kindref="member">DAGTEXNUM</ref>;<sp/>++i)</highlight></codeline>
<codeline lineno="1398"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1399"><highlight class="normal"><sp/><sp/><sp/><sp/>TCHAR<sp/>*s<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="1400"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m.<ref refid="structImpMat_1abf1da1581d73da471dbfd398aeebfba3" kindref="member">m</ref>.<ref refid="structDagMater_1a8a278ea7d627dc6b5f710060e5ce3f52" kindref="member">texid</ref>[i]<sp/>&lt;<sp/>tex.Count()<sp/>&amp;&amp;<sp/>(i<sp/>&lt;<sp/>8<sp/>||<sp/>(m.<ref refid="structImpMat_1abf1da1581d73da471dbfd398aeebfba3" kindref="member">m</ref>.<ref refid="structDagMater_1af2c43c9d53a6cf2436ce87d1386ffc14" kindref="member">flags</ref><sp/>&amp;<sp/><ref refid="dagfmt_8h_1a3068a5b72fff6b6bf5073c5579cbe165" kindref="member">DAG_MF_16TEX</ref>)))</highlight></codeline>
<codeline lineno="1401"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>s<sp/>=<sp/>tex[m.<ref refid="structImpMat_1abf1da1581d73da471dbfd398aeebfba3" kindref="member">m</ref>.<ref refid="structDagMater_1a8a278ea7d627dc6b5f710060e5ce3f52" kindref="member">texid</ref>[i]];</highlight></codeline>
<codeline lineno="1402"><highlight class="normal"><sp/><sp/><sp/><sp/>d-&gt;<ref refid="classIDagorMat_1a7295ecd78b9f54d0991dc3b689edb989" kindref="member">set_texname</ref>(i,<sp/>s);</highlight></codeline>
<codeline lineno="1403"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i<sp/>==<sp/>0<sp/>&amp;&amp;<sp/>noname)</highlight></codeline>
<codeline lineno="1404"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1405"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(s)</highlight></codeline>
<codeline lineno="1406"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1407"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TSTR<sp/>nm;</highlight></codeline>
<codeline lineno="1408"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SplitPathFile(TSTR(s),<sp/>NULL,<sp/>&amp;nm);</highlight></codeline>
<codeline lineno="1409"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m.<ref refid="structImpMat_1a9a9b8d52f4db80e54bc011c97e0a5eb9" kindref="member">mtl</ref>-&gt;SetName(nm);</highlight></codeline>
<codeline lineno="1410"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1411"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1412"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1413"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TSTR<sp/>nm;</highlight></codeline>
<codeline lineno="1414"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nm.printf(_T(</highlight><highlight class="stringliteral">&quot;%s<sp/>#%02d&quot;</highlight><highlight class="normal">),<sp/>scene_name,<sp/>ind);</highlight></codeline>
<codeline lineno="1415"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m.<ref refid="structImpMat_1a9a9b8d52f4db80e54bc011c97e0a5eb9" kindref="member">mtl</ref>-&gt;SetName(nm);</highlight></codeline>
<codeline lineno="1416"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1417"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1418"><highlight class="normal"><sp/><sp/><sp/><sp/>d-&gt;<ref refid="classIDagorMat_1a4b4604f7c5f2687a2b949f205d221ef8" kindref="member">set_param</ref>(i,<sp/>0);</highlight></codeline>
<codeline lineno="1419"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1420"><highlight class="normal"><sp/><sp/>m.<ref refid="structImpMat_1a9a9b8d52f4db80e54bc011c97e0a5eb9" kindref="member">mtl</ref>-&gt;ReleaseInterface(<ref refid="mater_8h_1a36dcaa0c637134b05278e83da132935e" kindref="member">I_DAGORMAT</ref>,<sp/>d);</highlight></codeline>
<codeline lineno="1421"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1422"><highlight class="normal"></highlight></codeline>
<codeline lineno="1423"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>adj_wtm(Matrix3<sp/>&amp;tm)</highlight></codeline>
<codeline lineno="1424"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1425"><highlight class="normal"><sp/><sp/>MRow<sp/>*m<sp/>=<sp/>tm.GetAddr();</highlight></codeline>
<codeline lineno="1426"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>4;<sp/>++i)</highlight></codeline>
<codeline lineno="1427"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1428"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>a<sp/>=<sp/>m[i][1];</highlight></codeline>
<codeline lineno="1429"><highlight class="normal"><sp/><sp/><sp/><sp/>m[i][1]<sp/>=<sp/>m[i][2];</highlight></codeline>
<codeline lineno="1430"><highlight class="normal"><sp/><sp/><sp/><sp/>m[i][2]<sp/>=<sp/>a;</highlight></codeline>
<codeline lineno="1431"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1432"><highlight class="normal"><sp/><sp/>tm.ClearIdentFlag(ROT_IDENT<sp/>|<sp/>SCL_IDENT);</highlight></codeline>
<codeline lineno="1433"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1434"><highlight class="normal"></highlight></codeline>
<codeline lineno="1435"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>adj_pos(Point3<sp/>&amp;<ref refid="polyBumpUtil_8cpp_1aaa1ebe818ec1c763a776cc580551f3e6" kindref="member">p</ref>)</highlight></codeline>
<codeline lineno="1436"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1437"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>a<sp/>=<sp/><ref refid="polyBumpUtil_8cpp_1aaa1ebe818ec1c763a776cc580551f3e6" kindref="member">p</ref>.y;</highlight></codeline>
<codeline lineno="1438"><highlight class="normal"><sp/><sp/><ref refid="polyBumpUtil_8cpp_1aaa1ebe818ec1c763a776cc580551f3e6" kindref="member">p</ref>.y<sp/>=<sp/><ref refid="polyBumpUtil_8cpp_1aaa1ebe818ec1c763a776cc580551f3e6" kindref="member">p</ref>.z;</highlight></codeline>
<codeline lineno="1439"><highlight class="normal"><sp/><sp/><ref refid="polyBumpUtil_8cpp_1aaa1ebe818ec1c763a776cc580551f3e6" kindref="member">p</ref>.z<sp/>=<sp/>a;</highlight></codeline>
<codeline lineno="1440"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1441"><highlight class="normal"></highlight></codeline>
<codeline lineno="1442"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>adj_rot(Quat<sp/>&amp;q)</highlight></codeline>
<codeline lineno="1443"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1444"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>a<sp/>=<sp/>q.y;</highlight></codeline>
<codeline lineno="1445"><highlight class="normal"><sp/><sp/>q.y<sp/>=<sp/>-q.z;</highlight></codeline>
<codeline lineno="1446"><highlight class="normal"><sp/><sp/>q.z<sp/>=<sp/>-a;</highlight></codeline>
<codeline lineno="1447"><highlight class="normal"><sp/><sp/>q.x<sp/>=<sp/>-q.x;</highlight></codeline>
<codeline lineno="1448"><highlight class="normal"><sp/><sp/>q<sp/>=<sp/>Quat(-0.7071067811865476,<sp/>0.,<sp/>0.,<sp/>0.7071067811865476)<sp/>*<sp/>q;</highlight></codeline>
<codeline lineno="1449"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1450"><highlight class="normal"></highlight></codeline>
<codeline lineno="1451"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>adj_scl(Point3<sp/>&amp;<ref refid="polyBumpUtil_8cpp_1aaa1ebe818ec1c763a776cc580551f3e6" kindref="member">p</ref>)<sp/>{<sp/><ref refid="polyBumpUtil_8cpp_1aaa1ebe818ec1c763a776cc580551f3e6" kindref="member">p</ref>.z<sp/>=<sp/>-<ref refid="polyBumpUtil_8cpp_1aaa1ebe818ec1c763a776cc580551f3e6" kindref="member">p</ref>.z;<sp/>}</highlight></codeline>
<codeline lineno="1452"><highlight class="normal"></highlight></codeline>
<codeline lineno="1453"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>rd(p,<sp/>l)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1454"><highlight class="preprocessor"><sp/><sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1455"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>if<sp/>(fread(p,<sp/>l,<sp/>1,<sp/>h)<sp/>!=<sp/>1)<sp/>\</highlight></codeline>
<codeline lineno="1456"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>goto<sp/>read_err;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1457"><highlight class="preprocessor"><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1458"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>bblk<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1459"><highlight class="preprocessor"><sp/><sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1460"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>if<sp/>(!begin_blk())<sp/>\</highlight></codeline>
<codeline lineno="1461"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>goto<sp/>read_err;<sp/><sp/>\</highlight></codeline>
<codeline lineno="1462"><highlight class="preprocessor"><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1463"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>eblk<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1464"><highlight class="preprocessor"><sp/><sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1465"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>if<sp/>(!end_blk())<sp/><sp/>\</highlight></codeline>
<codeline lineno="1466"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>goto<sp/>read_err;<sp/>\</highlight></codeline>
<codeline lineno="1467"><highlight class="preprocessor"><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1468"><highlight class="normal"></highlight></codeline>
<codeline lineno="1469"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>flip_normals(Mesh<sp/>&amp;m)</highlight></codeline>
<codeline lineno="1470"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1471"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>m.numFaces;<sp/>++i)</highlight></codeline>
<codeline lineno="1472"><highlight class="normal"><sp/><sp/><sp/><sp/>m.FlipNormal(i);</highlight></codeline>
<codeline lineno="1473"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1474"><highlight class="normal"></highlight></codeline>
<codeline lineno="1475"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>load_node(INode<sp/>*pnode,<sp/>FILE<sp/>*<ref refid="polyBumpUtil_8cpp_1a48d03c7323d95df49ef19db24dcb5c71" kindref="member">h</ref>,<sp/>ImpInterface<sp/>*ii,<sp/>Interface<sp/>*ip,<sp/>Tab&lt;SkinData<sp/>*&gt;<sp/>&amp;skin_data,<sp/>Tab&lt;NodeId&gt;<sp/>&amp;node_id)</highlight></codeline>
<codeline lineno="1476"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1477"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>master_scale<sp/>=<sp/><ref refid="common_8cpp_1ab3996dd0d94c2f2ea13b532cd01a3acf" kindref="member">get_master_scale</ref>();</highlight></codeline>
<codeline lineno="1478"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>need_rescale<sp/>=<sp/>fabs(master_scale<sp/>-<sp/>1.f)<sp/>&gt;<sp/>1e-4f;</highlight></codeline>
<codeline lineno="1479"><highlight class="normal"></highlight></codeline>
<codeline lineno="1480"><highlight class="normal"><sp/><sp/>ImpNode<sp/>*in<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="1481"><highlight class="normal"><sp/><sp/>INode<sp/>*n<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="1482"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pnode)</highlight></codeline>
<codeline lineno="1483"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1484"><highlight class="normal"><sp/><sp/><sp/><sp/>in<sp/>=<sp/>ii-&gt;CreateNode();</highlight></codeline>
<codeline lineno="1485"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(in);</highlight></codeline>
<codeline lineno="1486"><highlight class="normal"><sp/><sp/><sp/><sp/>ii-&gt;AddNodeToScene(in);</highlight></codeline>
<codeline lineno="1487"><highlight class="normal"><sp/><sp/><sp/><sp/>n<sp/>=<sp/>in-&gt;GetINode();</highlight></codeline>
<codeline lineno="1488"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(n);</highlight></codeline>
<codeline lineno="1489"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>pnode-&gt;AttachChild(n,0);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1490"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1491"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1492"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1493"><highlight class="normal"><sp/><sp/><sp/><sp/>n<sp/>=<sp/>ip-&gt;GetRootNode();</highlight></codeline>
<codeline lineno="1494"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(n);</highlight></codeline>
<codeline lineno="1495"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1496"><highlight class="normal"><sp/><sp/><ref refid="dagimp_8cpp_1ab95f123a6c9bcfee6a343170ef8c5f69" kindref="member">ushort</ref><sp/>nid<sp/>=<sp/>~0;</highlight></codeline>
<codeline lineno="1497"><highlight class="normal"><sp/><sp/>Mtl<sp/>*mtl<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="1498"><highlight class="normal"><sp/><sp/>Object<sp/>*obj<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="1499"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nflg<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1500"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(blk_rest()<sp/>&gt;<sp/>0)</highlight></codeline>
<codeline lineno="1501"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1502"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="dagimp_8cpp_1a258f4e1cc409c86d8964e61a1ff3407e" kindref="member">bblk</ref>;</highlight></codeline>
<codeline lineno="1503"><highlight class="normal"></highlight></codeline>
<codeline lineno="1504"><highlight class="normal"><sp/><sp/><sp/><sp/>DebugPrint(_T(</highlight><highlight class="stringliteral">&quot;load_node<sp/>%d\n&quot;</highlight><highlight class="normal">),<sp/>blk_type());</highlight></codeline>
<codeline lineno="1505"><highlight class="normal"></highlight></codeline>
<codeline lineno="1506"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(blk_type()<sp/>==<sp/><ref refid="dagfmt_8h_1adf764cbdea00d65edcd07bb9953ad2b7a77d078c73b62a3a142315c2d21c3aecb" kindref="member">DAG_NODE_DATA</ref>)</highlight></codeline>
<codeline lineno="1507"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1508"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structDagNodeData" kindref="compound">DagNodeData</ref><sp/>d;</highlight></codeline>
<codeline lineno="1509"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="dagimp_8cpp_1a687ce463dce05873a78f8b29a3a808be" kindref="member">rd</ref>(&amp;d,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(d));</highlight></codeline>
<codeline lineno="1510"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>nid<sp/>=<sp/>d.<ref refid="structDagNodeData_1a7f59307c5bb4e2c54998f58d83fd8101" kindref="member">id</ref>;</highlight></codeline>
<codeline lineno="1511"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>n-&gt;SetRenderable(d.<ref refid="structDagNodeData_1a1bd2388447c485c5c1a42a0ef7d72588" kindref="member">flg</ref><sp/>&amp;<sp/><ref refid="dagfmt_8h_1afc0232e42686b05f96aede9f3a37ac8b" kindref="member">DAG_NF_RENDERABLE</ref><sp/>?<sp/>1<sp/>:<sp/>0);</highlight></codeline>
<codeline lineno="1512"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>n-&gt;SetCastShadows(d.<ref refid="structDagNodeData_1a1bd2388447c485c5c1a42a0ef7d72588" kindref="member">flg</ref><sp/>&amp;<sp/><ref refid="dagfmt_8h_1a71c98ba575f1023b2ccabe8ac3cd3e64" kindref="member">DAG_NF_CASTSHADOW</ref><sp/>?<sp/>1<sp/>:<sp/>0);</highlight></codeline>
<codeline lineno="1513"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>n-&gt;SetRcvShadows(d.<ref refid="structDagNodeData_1a1bd2388447c485c5c1a42a0ef7d72588" kindref="member">flg</ref><sp/>&amp;<sp/><ref refid="dagfmt_8h_1a7f5db6a0e6d573d7b1c2924e8cb77072" kindref="member">DAG_NF_RCVSHADOW</ref><sp/>?<sp/>1<sp/>:<sp/>0);</highlight></codeline>
<codeline lineno="1514"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structNodeId" kindref="compound">NodeId</ref><sp/>id(nid,<sp/>n);</highlight></codeline>
<codeline lineno="1515"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>node_id.Append(1,<sp/>&amp;</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1516"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>nflg<sp/>=<sp/>d.<ref refid="structDagNodeData_1a1bd2388447c485c5c1a42a0ef7d72588" kindref="member">flg</ref>;</highlight></codeline>
<codeline lineno="1517"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>l<sp/>=<sp/>blk_rest();</highlight></codeline>
<codeline lineno="1518"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(l<sp/>&gt;<sp/>0<sp/>&amp;&amp;<sp/>in)</highlight></codeline>
<codeline lineno="1519"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1520"><highlight class="normal"></highlight></codeline>
<codeline lineno="1521"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TCHAR<sp/>*nm<sp/>=<sp/><ref refid="dagimp_8cpp_1a1d3be838d048c85d30335b00e10215d1" kindref="member">ReadCharString</ref>(l,<sp/><ref refid="polyBumpUtil_8cpp_1a48d03c7323d95df49ef19db24dcb5c71" kindref="member">h</ref>);</highlight></codeline>
<codeline lineno="1522"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>in-&gt;SetName(nm,<sp/><ref refid="classDagImp_1ae89838cf454485eaab1a6f5b752f4c15" kindref="member">DagImp::useLegacyImport</ref>);</highlight></codeline>
<codeline lineno="1523"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DebugPrint(_T(</highlight><highlight class="stringliteral">&quot;node<sp/>&lt;%s&gt;\n&quot;</highlight><highlight class="normal">),<sp/>nm);</highlight></codeline>
<codeline lineno="1524"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>free(nm);</highlight></codeline>
<codeline lineno="1525"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1526"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1527"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(blk_type()<sp/>==<sp/><ref refid="dagfmt_8h_1adf764cbdea00d65edcd07bb9953ad2b7a51bac9ae8de9425a1c871296794f27c5" kindref="member">DAG_NODE_TM</ref><sp/>&amp;&amp;<sp/>in)</highlight></codeline>
<codeline lineno="1528"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1529"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Matrix3<sp/>tm;</highlight></codeline>
<codeline lineno="1530"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="dagimp_8cpp_1a687ce463dce05873a78f8b29a3a808be" kindref="member">rd</ref>(tm.GetAddr(),<sp/>4<sp/>*<sp/>3<sp/>*<sp/>4);</highlight></codeline>
<codeline lineno="1531"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>tm.SetNotIdent();</highlight></codeline>
<codeline lineno="1532"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(need_rescale)</highlight></codeline>
<codeline lineno="1533"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tm.SetTrans(tm.GetTrans()<sp/>*<sp/>master_scale);</highlight></codeline>
<codeline lineno="1534"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pnode-&gt;IsRootNode())</highlight></codeline>
<codeline lineno="1535"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>adj_wtm(tm);</highlight></codeline>
<codeline lineno="1536"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>in-&gt;SetTransform(0,<sp/>tm);</highlight></codeline>
<codeline lineno="1537"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>n-&gt;SetNodeTM(0,tm);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1538"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1539"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(blk_type()<sp/>==<sp/><ref refid="dagfmt_8h_1adf764cbdea00d65edcd07bb9953ad2b7a41213fca2a1de143db6165e6b2e5cc9e" kindref="member">DAG_NODE_ANIM</ref><sp/>&amp;&amp;<sp/>in)</highlight></codeline>
<codeline lineno="1540"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1541"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>adj<sp/>=<sp/>pnode-&gt;IsRootNode();</highlight></codeline>
<codeline lineno="1542"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="dagimp_8cpp_1ab95f123a6c9bcfee6a343170ef8c5f69" kindref="member">ushort</ref><sp/>ntrkid;</highlight></codeline>
<codeline lineno="1543"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="dagimp_8cpp_1a687ce463dce05873a78f8b29a3a808be" kindref="member">rd</ref>(&amp;ntrkid,<sp/>2);</highlight></codeline>
<codeline lineno="1544"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>note<sp/>track</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1545"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ntrkid<sp/>&lt;<sp/>ntrack.Count())</highlight></codeline>
<codeline lineno="1546"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1547"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DefNoteTrack<sp/>*nt<sp/>=<sp/>ntrack[ntrkid];</highlight></codeline>
<codeline lineno="1548"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(nt)</highlight></codeline>
<codeline lineno="1549"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1550"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DefNoteTrack<sp/>*nnt<sp/>=<sp/>(DefNoteTrack<sp/>*)NewDefaultNoteTrack();</highlight></codeline>
<codeline lineno="1551"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(nnt);</highlight></codeline>
<codeline lineno="1552"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nnt-&gt;keys<sp/>=<sp/>nt-&gt;keys;</highlight></codeline>
<codeline lineno="1553"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>n-&gt;AddNoteTrack(nnt);</highlight></codeline>
<codeline lineno="1554"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1555"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1556"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1557"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>if(ntrkid&lt;ntrack.Count())<sp/>{</highlight></codeline>
<codeline lineno="1558"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>knum=ntrack_knum[ntrkid];</highlight></codeline>
<codeline lineno="1559"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DagNoteKey<sp/>*nk=ntrack[ntrkid];</highlight></codeline>
<codeline lineno="1560"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DefNoteTrack<sp/>*nt=(DefNoteTrack*)NewDefaultNoteTrack();</highlight></codeline>
<codeline lineno="1561"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if(nt)<sp/>{</highlight></codeline>
<codeline lineno="1562"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>for(int<sp/>i=0;i&lt;knum;++i)<sp/>{</highlight></codeline>
<codeline lineno="1563"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>char<sp/>*nm=&quot;&quot;;</highlight></codeline>
<codeline lineno="1564"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if(nk[i].id&lt;keylabel.Count())<sp/>nm=keylabel[nk[i].id];</highlight></codeline>
<codeline lineno="1565"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NoteKey<sp/>*k=new<sp/>NoteKey(nk[i].t,nm);</highlight></codeline>
<codeline lineno="1566"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nt-&gt;keys.Append(1,&amp;k);</highlight></codeline>
<codeline lineno="1567"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1568"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>n-&gt;AddNoteTrack(nt);</highlight></codeline>
<codeline lineno="1569"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1570"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1571"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1572"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>create<sp/>PRS<sp/>controller</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1573"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Control<sp/>*prs<sp/>=<sp/>CreatePRSControl();</highlight></codeline>
<codeline lineno="1574"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>assert(prs);</highlight></codeline>
<codeline lineno="1575"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>n-&gt;SetTMController(prs);</highlight></codeline>
<codeline lineno="1576"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Control<sp/>*pc<sp/>=<sp/>CreateInterpPosition();</highlight></codeline>
<codeline lineno="1577"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>assert(pc);</highlight></codeline>
<codeline lineno="1578"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="max__cpt_8h_1a8d2f585b61931548923953c378682bae" kindref="member">verify</ref>(prs-&gt;SetPositionController(pc));</highlight></codeline>
<codeline lineno="1579"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Control<sp/>*rc<sp/>=<sp/>CreateInterpRotation();</highlight></codeline>
<codeline lineno="1580"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>assert(rc);</highlight></codeline>
<codeline lineno="1581"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="max__cpt_8h_1a8d2f585b61931548923953c378682bae" kindref="member">verify</ref>(prs-&gt;SetRotationController(rc));</highlight></codeline>
<codeline lineno="1582"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Control<sp/>*sc<sp/>=<sp/>CreateInterpScale();</highlight></codeline>
<codeline lineno="1583"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>assert(sc);</highlight></codeline>
<codeline lineno="1584"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="max__cpt_8h_1a8d2f585b61931548923953c378682bae" kindref="member">verify</ref>(prs-&gt;SetScaleController(sc));</highlight></codeline>
<codeline lineno="1585"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>pos<sp/>track</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1586"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>IKeyControl<sp/>*ik<sp/>=<sp/>GetKeyControlInterface(pc);</highlight></codeline>
<codeline lineno="1587"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>assert(ik);</highlight></codeline>
<codeline lineno="1588"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="dagimp_8cpp_1ab95f123a6c9bcfee6a343170ef8c5f69" kindref="member">ushort</ref><sp/>numk;</highlight></codeline>
<codeline lineno="1589"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="dagimp_8cpp_1a687ce463dce05873a78f8b29a3a808be" kindref="member">rd</ref>(&amp;numk,<sp/>2);</highlight></codeline>
<codeline lineno="1590"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(numk<sp/>==<sp/>1)</highlight></codeline>
<codeline lineno="1591"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1592"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>IBezPoint3Key<sp/>k;</highlight></codeline>
<codeline lineno="1593"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="dagimp_8cpp_1a687ce463dce05873a78f8b29a3a808be" kindref="member">rd</ref>(&amp;k.val,<sp/>12);</highlight></codeline>
<codeline lineno="1594"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(adj)</highlight></codeline>
<codeline lineno="1595"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>adj_pos(k.val);</highlight></codeline>
<codeline lineno="1596"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>k.intan<sp/>=<sp/>Point3(0,<sp/>0,<sp/>0);</highlight></codeline>
<codeline lineno="1597"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>k.outtan<sp/>=<sp/>Point3(0,<sp/>0,<sp/>0);</highlight></codeline>
<codeline lineno="1598"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ik-&gt;SetNumKeys(1);</highlight></codeline>
<codeline lineno="1599"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ik-&gt;SetKey(0,<sp/>&amp;k);</highlight></codeline>
<codeline lineno="1600"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1601"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1602"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1603"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ik-&gt;SetNumKeys(numk);</highlight></codeline>
<codeline lineno="1604"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>IBezPoint3Key<sp/>k;</highlight></codeline>
<codeline lineno="1605"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>k.flags<sp/>=<sp/>BEZKEY_XBROKEN<sp/>|<sp/>BEZKEY_YBROKEN<sp/>|<sp/>BEZKEY_ZBROKEN;</highlight></codeline>
<codeline lineno="1606"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structDagPosKey" kindref="compound">DagPosKey</ref><sp/>*dk<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="structDagPosKey" kindref="compound">DagPosKey</ref>[numk];</highlight></codeline>
<codeline lineno="1607"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(dk);</highlight></codeline>
<codeline lineno="1608"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="dagimp_8cpp_1a687ce463dce05873a78f8b29a3a808be" kindref="member">rd</ref>(dk,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(*dk)<sp/>*<sp/>numk);</highlight></codeline>
<codeline lineno="1609"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>numk;<sp/>++i)</highlight></codeline>
<codeline lineno="1610"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1611"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>k.time<sp/>=<sp/>dk[i].<ref refid="structDagPosKey_1a9e253baa3d10dc693dcf43664aedf2e7" kindref="member">t</ref>;</highlight></codeline>
<codeline lineno="1612"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>k.val<sp/>=<sp/>dk[i].<ref refid="structDagPosKey_1ac2af4871b6af345f146444dc8adc04d3" kindref="member">p</ref>;</highlight></codeline>
<codeline lineno="1613"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>dt;</highlight></codeline>
<codeline lineno="1614"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i<sp/>&gt;<sp/>0)</highlight></codeline>
<codeline lineno="1615"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dt<sp/>=<sp/>(dk[i].<ref refid="structDagPosKey_1a9e253baa3d10dc693dcf43664aedf2e7" kindref="member">t</ref><sp/>-<sp/>dk[i<sp/>-<sp/>1].<ref refid="structDagPosKey_1a9e253baa3d10dc693dcf43664aedf2e7" kindref="member">t</ref>)<sp/>/<sp/>3.f;</highlight></codeline>
<codeline lineno="1616"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1617"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dt<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="1618"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>k.intan<sp/>=<sp/>dk[i].<ref refid="structDagPosKey_1abbe789defa2d895419c259a58099629a" kindref="member">i</ref><sp/>/<sp/>dt;</highlight></codeline>
<codeline lineno="1619"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i<sp/>+<sp/>1<sp/>&lt;<sp/>numk)</highlight></codeline>
<codeline lineno="1620"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dt<sp/>=<sp/>(dk[i<sp/>+<sp/>1].<ref refid="structDagPosKey_1a9e253baa3d10dc693dcf43664aedf2e7" kindref="member">t</ref><sp/>-<sp/>dk[i].<ref refid="structDagPosKey_1a9e253baa3d10dc693dcf43664aedf2e7" kindref="member">t</ref>)<sp/>/<sp/>3.f;</highlight></codeline>
<codeline lineno="1621"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1622"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dt<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="1623"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>k.outtan<sp/>=<sp/>dk[i].<ref refid="structDagPosKey_1a7af49d7332a09e5f74a8da06b7f6efe0" kindref="member">o</ref><sp/>/<sp/>dt;</highlight></codeline>
<codeline lineno="1624"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(adj)</highlight></codeline>
<codeline lineno="1625"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>adj_pos(k.val);</highlight></codeline>
<codeline lineno="1626"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(adj)</highlight></codeline>
<codeline lineno="1627"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>adj_pos(k.intan);</highlight></codeline>
<codeline lineno="1628"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(adj)</highlight></codeline>
<codeline lineno="1629"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>adj_pos(k.outtan);</highlight></codeline>
<codeline lineno="1630"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ik-&gt;SetKey(i,<sp/>&amp;k);</highlight></codeline>
<codeline lineno="1631"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1632"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">[]<sp/>dk;</highlight></codeline>
<codeline lineno="1633"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ik-&gt;SortKeys();</highlight></codeline>
<codeline lineno="1634"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1635"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>rot<sp/>track</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1636"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>SuspendAnimate();</highlight></codeline>
<codeline lineno="1637"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>AnimateOn();</highlight></codeline>
<codeline lineno="1638"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ik<sp/>=<sp/>GetKeyControlInterface(rc);</highlight></codeline>
<codeline lineno="1639"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>assert(ik);</highlight></codeline>
<codeline lineno="1640"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="dagimp_8cpp_1a687ce463dce05873a78f8b29a3a808be" kindref="member">rd</ref>(&amp;numk,<sp/>2);</highlight></codeline>
<codeline lineno="1641"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(numk<sp/>==<sp/>1)</highlight></codeline>
<codeline lineno="1642"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1643"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Quat<sp/>q;</highlight></codeline>
<codeline lineno="1644"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="dagimp_8cpp_1a687ce463dce05873a78f8b29a3a808be" kindref="member">rd</ref>(&amp;q,<sp/>16);</highlight></codeline>
<codeline lineno="1645"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>q<sp/>=<sp/>Conjugate(q);</highlight></codeline>
<codeline lineno="1646"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(adj)</highlight></codeline>
<codeline lineno="1647"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>adj_rot(q);</highlight></codeline>
<codeline lineno="1648"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rc-&gt;SetValue(0,<sp/>&amp;q);</highlight></codeline>
<codeline lineno="1649"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1650"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1651"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1652"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structDagRotKey" kindref="compound">DagRotKey</ref><sp/>*dk<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="structDagRotKey" kindref="compound">DagRotKey</ref>[numk];</highlight></codeline>
<codeline lineno="1653"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(dk);</highlight></codeline>
<codeline lineno="1654"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="dagimp_8cpp_1a687ce463dce05873a78f8b29a3a808be" kindref="member">rd</ref>(dk,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(*dk)<sp/>*<sp/>numk);</highlight></codeline>
<codeline lineno="1655"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>numk;<sp/>++i)</highlight></codeline>
<codeline lineno="1656"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1657"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dk[i].<ref refid="structDagRotKey_1aa8b06ee2591c10dfcd0907d3f50310a8" kindref="member">p</ref><sp/>=<sp/>Conjugate(dk[i].<ref refid="polyBumpUtil_8cpp_1aaa1ebe818ec1c763a776cc580551f3e6" kindref="member">p</ref>);</highlight></codeline>
<codeline lineno="1658"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(adj)</highlight></codeline>
<codeline lineno="1659"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>adj_rot(dk[i].<ref refid="polyBumpUtil_8cpp_1aaa1ebe818ec1c763a776cc580551f3e6" kindref="member">p</ref>);</highlight></codeline>
<codeline lineno="1660"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rc-&gt;SetValue(dk[i].t,<sp/>&amp;dk[i].<ref refid="polyBumpUtil_8cpp_1aaa1ebe818ec1c763a776cc580551f3e6" kindref="member">p</ref>);</highlight></codeline>
<codeline lineno="1661"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1662"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">[]<sp/>dk;</highlight></codeline>
<codeline lineno="1663"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1664"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ResumeAnimate();</highlight></codeline>
<codeline lineno="1665"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>scl<sp/>track</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1666"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ik<sp/>=<sp/>GetKeyControlInterface(sc);</highlight></codeline>
<codeline lineno="1667"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>assert(ik);</highlight></codeline>
<codeline lineno="1668"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="dagimp_8cpp_1a687ce463dce05873a78f8b29a3a808be" kindref="member">rd</ref>(&amp;numk,<sp/>2);</highlight></codeline>
<codeline lineno="1669"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(numk<sp/>==<sp/>1)</highlight></codeline>
<codeline lineno="1670"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1671"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>IBezScaleKey<sp/>k;</highlight></codeline>
<codeline lineno="1672"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Point3<sp/><ref refid="polyBumpUtil_8cpp_1aaa1ebe818ec1c763a776cc580551f3e6" kindref="member">p</ref>;</highlight></codeline>
<codeline lineno="1673"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="dagimp_8cpp_1a687ce463dce05873a78f8b29a3a808be" kindref="member">rd</ref>(&amp;<ref refid="polyBumpUtil_8cpp_1aaa1ebe818ec1c763a776cc580551f3e6" kindref="member">p</ref>,<sp/>12);</highlight></codeline>
<codeline lineno="1674"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(adj)</highlight></codeline>
<codeline lineno="1675"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>adj_scl(<ref refid="polyBumpUtil_8cpp_1aaa1ebe818ec1c763a776cc580551f3e6" kindref="member">p</ref>);</highlight></codeline>
<codeline lineno="1676"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>k.val<sp/>=<sp/><ref refid="polyBumpUtil_8cpp_1aaa1ebe818ec1c763a776cc580551f3e6" kindref="member">p</ref>;</highlight></codeline>
<codeline lineno="1677"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>k.intan<sp/>=<sp/>Point3(0,<sp/>0,<sp/>0);</highlight></codeline>
<codeline lineno="1678"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>k.outtan<sp/>=<sp/>Point3(0,<sp/>0,<sp/>0);</highlight></codeline>
<codeline lineno="1679"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ik-&gt;SetNumKeys(1);</highlight></codeline>
<codeline lineno="1680"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ik-&gt;SetKey(0,<sp/>&amp;k);</highlight></codeline>
<codeline lineno="1681"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1682"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1683"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1684"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ik-&gt;SetNumKeys(numk);</highlight></codeline>
<codeline lineno="1685"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>IBezScaleKey<sp/>k;</highlight></codeline>
<codeline lineno="1686"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>k.flags<sp/>=<sp/>BEZKEY_XBROKEN<sp/>|<sp/>BEZKEY_YBROKEN<sp/>|<sp/>BEZKEY_ZBROKEN;</highlight></codeline>
<codeline lineno="1687"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structDagPosKey" kindref="compound">DagPosKey</ref><sp/>*dk<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="structDagPosKey" kindref="compound">DagPosKey</ref>[numk];</highlight></codeline>
<codeline lineno="1688"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(dk);</highlight></codeline>
<codeline lineno="1689"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="dagimp_8cpp_1a687ce463dce05873a78f8b29a3a808be" kindref="member">rd</ref>(dk,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(*dk)<sp/>*<sp/>numk);</highlight></codeline>
<codeline lineno="1690"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>numk;<sp/>++i)</highlight></codeline>
<codeline lineno="1691"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1692"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>k.time<sp/>=<sp/>dk[i].<ref refid="structDagPosKey_1a9e253baa3d10dc693dcf43664aedf2e7" kindref="member">t</ref>;</highlight></codeline>
<codeline lineno="1693"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>k.val<sp/>=<sp/>dk[i].<ref refid="structDagPosKey_1ac2af4871b6af345f146444dc8adc04d3" kindref="member">p</ref>;</highlight></codeline>
<codeline lineno="1694"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>dt;</highlight></codeline>
<codeline lineno="1695"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i<sp/>&gt;<sp/>0)</highlight></codeline>
<codeline lineno="1696"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dt<sp/>=<sp/>(dk[i].<ref refid="structDagPosKey_1a9e253baa3d10dc693dcf43664aedf2e7" kindref="member">t</ref><sp/>-<sp/>dk[i<sp/>-<sp/>1].<ref refid="structDagPosKey_1a9e253baa3d10dc693dcf43664aedf2e7" kindref="member">t</ref>)<sp/>/<sp/>3.f;</highlight></codeline>
<codeline lineno="1697"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1698"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dt<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="1699"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>k.intan<sp/>=<sp/>dk[i].<ref refid="structDagPosKey_1abbe789defa2d895419c259a58099629a" kindref="member">i</ref><sp/>/<sp/>dt;</highlight></codeline>
<codeline lineno="1700"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i<sp/>+<sp/>1<sp/>&lt;<sp/>numk)</highlight></codeline>
<codeline lineno="1701"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dt<sp/>=<sp/>(dk[i<sp/>+<sp/>1].<ref refid="structDagPosKey_1a9e253baa3d10dc693dcf43664aedf2e7" kindref="member">t</ref><sp/>-<sp/>dk[i].<ref refid="structDagPosKey_1a9e253baa3d10dc693dcf43664aedf2e7" kindref="member">t</ref>)<sp/>/<sp/>3.f;</highlight></codeline>
<codeline lineno="1702"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1703"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dt<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="1704"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>k.outtan<sp/>=<sp/>dk[i].<ref refid="structDagPosKey_1a7af49d7332a09e5f74a8da06b7f6efe0" kindref="member">o</ref><sp/>/<sp/>dt;</highlight></codeline>
<codeline lineno="1705"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(adj)</highlight></codeline>
<codeline lineno="1706"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>adj_scl(k.val.s);</highlight></codeline>
<codeline lineno="1707"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(adj)</highlight></codeline>
<codeline lineno="1708"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>adj_scl(k.intan);</highlight></codeline>
<codeline lineno="1709"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(adj)</highlight></codeline>
<codeline lineno="1710"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>adj_scl(k.outtan);</highlight></codeline>
<codeline lineno="1711"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ik-&gt;SetKey(i,<sp/>&amp;k);</highlight></codeline>
<codeline lineno="1712"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1713"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">[]<sp/>dk;</highlight></codeline>
<codeline lineno="1714"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ik-&gt;SortKeys();</highlight></codeline>
<codeline lineno="1715"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1716"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1717"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(blk_type()<sp/>==<sp/><ref refid="dagfmt_8h_1adf764cbdea00d65edcd07bb9953ad2b7a2ff2a721145b148de54684ff31b6ef80" kindref="member">DAG_NODE_SCRIPT</ref><sp/>&amp;&amp;<sp/>in)</highlight></codeline>
<codeline lineno="1718"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1719"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>DebugPrint(_T(</highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/>node<sp/>script...\n&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1720"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>l<sp/>=<sp/>blk_rest();</highlight></codeline>
<codeline lineno="1721"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(l<sp/>&gt;<sp/>0)</highlight></codeline>
<codeline lineno="1722"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1723"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TCHAR<sp/>*s<sp/>=<sp/><ref refid="dagimp_8cpp_1a1d3be838d048c85d30335b00e10215d1" kindref="member">ReadCharString</ref>(l,<sp/><ref refid="polyBumpUtil_8cpp_1a48d03c7323d95df49ef19db24dcb5c71" kindref="member">h</ref>);</highlight></codeline>
<codeline lineno="1724"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>n-&gt;SetUserPropBuffer(s);</highlight></codeline>
<codeline lineno="1725"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>free(s);</highlight></codeline>
<codeline lineno="1726"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1727"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>DebugPrint(_T(</highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/>node<sp/>script<sp/>ok\n&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1728"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1729"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(blk_type()<sp/>==<sp/><ref refid="dagfmt_8h_1adf764cbdea00d65edcd07bb9953ad2b7abaa5d4b96ab7235f3ba08c9bcaea180c" kindref="member">DAG_NODE_MATER</ref><sp/>&amp;&amp;<sp/>in)</highlight></codeline>
<codeline lineno="1730"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1731"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>DebugPrint(_T(</highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/>node<sp/>material...\n&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1732"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>num<sp/>=<sp/>blk_len()<sp/>/<sp/>2;</highlight></codeline>
<codeline lineno="1733"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(num<sp/>&gt;<sp/>1)</highlight></codeline>
<codeline lineno="1734"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1735"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MultiMtl<sp/>*mm<sp/>=<sp/>NewDefaultMultiMtl();</highlight></codeline>
<codeline lineno="1736"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(mm);</highlight></codeline>
<codeline lineno="1737"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mm-&gt;SetNumSubMtls(num);</highlight></codeline>
<codeline lineno="1738"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>num;<sp/>++i)</highlight></codeline>
<codeline lineno="1739"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1740"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="dagimp_8cpp_1ab95f123a6c9bcfee6a343170ef8c5f69" kindref="member">ushort</ref><sp/>id;</highlight></codeline>
<codeline lineno="1741"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="dagimp_8cpp_1a687ce463dce05873a78f8b29a3a808be" kindref="member">rd</ref>(&amp;</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">,<sp/>2);</highlight></codeline>
<codeline lineno="1742"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">id</highlight><highlight class="normal"><sp/>&lt;<sp/>mat.Count())</highlight></codeline>
<codeline lineno="1743"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1744"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!mat[</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">].mtl)</highlight></codeline>
<codeline lineno="1745"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>make_mtl(mat[</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">],<sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">,<sp/><ref refid="dagor_8h_1a9ead658a52f6878a9360e47eea9322e2" kindref="member">DagorMat_CID</ref>);</highlight></codeline>
<codeline lineno="1746"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mat[</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">].mtl)</highlight></codeline>
<codeline lineno="1747"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mm-&gt;SetSubMtl(i,<sp/>mat[</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">].mtl);</highlight></codeline>
<codeline lineno="1748"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1749"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1750"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mm-&gt;SetName(n-&gt;GetName());</highlight></codeline>
<codeline lineno="1751"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mtl<sp/>=<sp/>mm;</highlight></codeline>
<codeline lineno="1752"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1753"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(num<sp/>==<sp/>1)</highlight></codeline>
<codeline lineno="1754"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1755"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="dagimp_8cpp_1ab95f123a6c9bcfee6a343170ef8c5f69" kindref="member">ushort</ref><sp/>id;</highlight></codeline>
<codeline lineno="1756"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="dagimp_8cpp_1a687ce463dce05873a78f8b29a3a808be" kindref="member">rd</ref>(&amp;</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">,<sp/>2);</highlight></codeline>
<codeline lineno="1757"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">id</highlight><highlight class="normal"><sp/>&lt;<sp/>mat.Count())</highlight></codeline>
<codeline lineno="1758"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1759"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!mat[</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">].mtl)</highlight></codeline>
<codeline lineno="1760"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>make_mtl(mat[</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">],<sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">,<sp/><ref refid="dagor_8h_1aaa6ea09f471b5e57f5b69b9996227c66" kindref="member">DagorMat2_CID</ref>);</highlight></codeline>
<codeline lineno="1761"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mat[</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">].mtl)</highlight></codeline>
<codeline lineno="1762"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mtl<sp/>=<sp/>mat[id].mtl;</highlight></codeline>
<codeline lineno="1763"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1764"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1765"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>DebugPrint(_T(</highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/>node<sp/>materials<sp/>ok\n&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1766"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1767"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(blk_type()<sp/>==<sp/><ref refid="dagfmt_8h_1adf764cbdea00d65edcd07bb9953ad2b7a9f987c74de054b5678c587ecb4c68611" kindref="member">DAG_NODE_OBJ</ref><sp/>&amp;&amp;<sp/>in)</highlight></codeline>
<codeline lineno="1768"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1769"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>DebugPrint(_T(</highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/>obj<sp/>mesh...\n&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1770"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(blk_rest()<sp/>&gt;<sp/>0)</highlight></codeline>
<codeline lineno="1771"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1772"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="dagimp_8cpp_1a258f4e1cc409c86d8964e61a1ff3407e" kindref="member">bblk</ref>;</highlight></codeline>
<codeline lineno="1773"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(blk_type()<sp/>==<sp/><ref refid="dagfmt_8h_1a99fb83031ce9923c84392b4e92f956b5ab38107edf27f3c0710b681b59ceccf1c" kindref="member">DAG_OBJ_BIGMESH</ref>)</highlight></codeline>
<codeline lineno="1774"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1775"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TriObject<sp/>*tri<sp/>=<sp/>CreateNewTriObject();</highlight></codeline>
<codeline lineno="1776"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(tri);</highlight></codeline>
<codeline lineno="1777"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Mesh<sp/>&amp;m<sp/>=<sp/>tri-&gt;mesh;</highlight></codeline>
<codeline lineno="1778"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="dagimp_8cpp_1a91ad9478d81a7aaf2593e8d9c3d06a14" kindref="member">uint</ref><sp/>nv<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1779"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="dagimp_8cpp_1a687ce463dce05873a78f8b29a3a808be" kindref="member">rd</ref>(&amp;nv,<sp/>4);</highlight></codeline>
<codeline lineno="1780"><highlight class="normal"></highlight></codeline>
<codeline lineno="1781"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="max__cpt_8h_1a8d2f585b61931548923953c378682bae" kindref="member">verify</ref>(m.setNumVerts(nv));</highlight></codeline>
<codeline lineno="1782"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="dagimp_8cpp_1a687ce463dce05873a78f8b29a3a808be" kindref="member">rd</ref>(m.verts,<sp/>nv<sp/>*<sp/>12);</highlight></codeline>
<codeline lineno="1783"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(need_rescale)</highlight></codeline>
<codeline lineno="1784"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>nv;<sp/>++i)</highlight></codeline>
<codeline lineno="1785"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m.verts[i]<sp/>*=<sp/>master_scale;</highlight></codeline>
<codeline lineno="1786"><highlight class="normal"></highlight></codeline>
<codeline lineno="1787"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="dagimp_8cpp_1a91ad9478d81a7aaf2593e8d9c3d06a14" kindref="member">uint</ref><sp/>nf<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1788"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="dagimp_8cpp_1a687ce463dce05873a78f8b29a3a808be" kindref="member">rd</ref>(&amp;nf,<sp/>4);</highlight></codeline>
<codeline lineno="1789"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="max__cpt_8h_1a8d2f585b61931548923953c378682bae" kindref="member">verify</ref>(m.setNumFaces(nf));</highlight></codeline>
<codeline lineno="1790"><highlight class="normal"></highlight></codeline>
<codeline lineno="1791"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DebugPrint(_T(</highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/>big<sp/>faces:<sp/>%d\n&quot;</highlight><highlight class="normal">),<sp/>nf);</highlight></codeline>
<codeline lineno="1792"><highlight class="normal"></highlight></codeline>
<codeline lineno="1793"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="1794"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>nf;<sp/>++i)</highlight></codeline>
<codeline lineno="1795"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1796"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structDagBigFace" kindref="compound">DagBigFace</ref><sp/>f;</highlight></codeline>
<codeline lineno="1797"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="dagimp_8cpp_1a687ce463dce05873a78f8b29a3a808be" kindref="member">rd</ref>(&amp;f,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(f));</highlight></codeline>
<codeline lineno="1798"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m.faces[i].v[0]<sp/>=<sp/>f.<ref refid="structDagBigFace_1a1b430c0a040da2c1716c738531b7830c" kindref="member">v</ref>[0];</highlight></codeline>
<codeline lineno="1799"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m.faces[i].v[2]<sp/>=<sp/>f.<ref refid="structDagBigFace_1a1b430c0a040da2c1716c738531b7830c" kindref="member">v</ref>[1];</highlight></codeline>
<codeline lineno="1800"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m.faces[i].v[1]<sp/>=<sp/>f.<ref refid="structDagBigFace_1a1b430c0a040da2c1716c738531b7830c" kindref="member">v</ref>[2];</highlight></codeline>
<codeline lineno="1801"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m.faces[i].setMatID(f.<ref refid="structDagBigFace_1aa34160c34739683aee40a6ff58e46412" kindref="member">mat</ref>);</highlight></codeline>
<codeline lineno="1802"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m.faces[i].smGroup<sp/>=<sp/>f.<ref refid="structDagBigFace_1ac8ec83b84f3c125e32aa8cfdb0cc914a" kindref="member">smgr</ref>;</highlight></codeline>
<codeline lineno="1803"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m.faces[i].flags<sp/>|=<sp/>EDGE_ALL;</highlight></codeline>
<codeline lineno="1804"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1805"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="dagimp_8cpp_1a65f85814a8290f9797005d3b28e7e5fc" kindref="member">uchar</ref><sp/>numch;</highlight></codeline>
<codeline lineno="1806"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="dagimp_8cpp_1a687ce463dce05873a78f8b29a3a808be" kindref="member">rd</ref>(&amp;numch,<sp/>1);</highlight></codeline>
<codeline lineno="1807"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>MAX_RELEASE<sp/>&gt;=<sp/>3000</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1808"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ch<sp/>=<sp/>0;<sp/>ch<sp/>&lt;<sp/>numch;<sp/>++ch)</highlight></codeline>
<codeline lineno="1809"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1810"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="dagimp_8cpp_1a91ad9478d81a7aaf2593e8d9c3d06a14" kindref="member">uint</ref><sp/>ntv<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1811"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="dagimp_8cpp_1a687ce463dce05873a78f8b29a3a808be" kindref="member">rd</ref>(&amp;ntv,<sp/>4);</highlight></codeline>
<codeline lineno="1812"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="dagimp_8cpp_1a65f85814a8290f9797005d3b28e7e5fc" kindref="member">uchar</ref><sp/>tcsz,<sp/>chid;</highlight></codeline>
<codeline lineno="1813"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="dagimp_8cpp_1a687ce463dce05873a78f8b29a3a808be" kindref="member">rd</ref>(&amp;tcsz,<sp/>1);</highlight></codeline>
<codeline lineno="1814"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="dagimp_8cpp_1a687ce463dce05873a78f8b29a3a808be" kindref="member">rd</ref>(&amp;chid,<sp/>1);</highlight></codeline>
<codeline lineno="1815"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m.setMapSupport(chid);</highlight></codeline>
<codeline lineno="1816"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m.setNumMapVerts(chid,<sp/>ntv);</highlight></codeline>
<codeline lineno="1817"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Point3<sp/>*tv<sp/>=<sp/>m.mapVerts(chid);</highlight></codeline>
<codeline lineno="1818"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;<sp/>ntv;<sp/>--ntv,<sp/>++tv)</highlight></codeline>
<codeline lineno="1819"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1820"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>tcsz<sp/>&amp;&amp;<sp/>i<sp/>&lt;<sp/>3;<sp/>++i)</highlight></codeline>
<codeline lineno="1821"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="dagimp_8cpp_1a687ce463dce05873a78f8b29a3a808be" kindref="member">rd</ref>(&amp;tv[0][i],<sp/>4);</highlight></codeline>
<codeline lineno="1822"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;<sp/>i<sp/>&lt;<sp/>3;<sp/>++i)</highlight></codeline>
<codeline lineno="1823"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tv[0][i]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1824"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1825"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TVFace<sp/>*tf<sp/>=<sp/>m.mapFaces(chid);</highlight></codeline>
<codeline lineno="1826"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>nf;<sp/>++i)</highlight></codeline>
<codeline lineno="1827"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1828"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structDagBigTFace" kindref="compound">DagBigTFace</ref><sp/>f;</highlight></codeline>
<codeline lineno="1829"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="dagimp_8cpp_1a687ce463dce05873a78f8b29a3a808be" kindref="member">rd</ref>(&amp;f,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(f));</highlight></codeline>
<codeline lineno="1830"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tf[i].t[0]<sp/>=<sp/>f.<ref refid="structDagBigTFace_1a848201911e05420a960aa0e5aa509593" kindref="member">t</ref>[0];</highlight></codeline>
<codeline lineno="1831"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tf[i].t[2]<sp/>=<sp/>f.<ref refid="structDagBigTFace_1a848201911e05420a960aa0e5aa509593" kindref="member">t</ref>[1];</highlight></codeline>
<codeline lineno="1832"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tf[i].t[1]<sp/>=<sp/>f.<ref refid="structDagBigTFace_1a848201911e05420a960aa0e5aa509593" kindref="member">t</ref>[2];</highlight></codeline>
<codeline lineno="1833"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1834"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1835"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1836"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(numch<sp/>&gt;=<sp/>1)</highlight></codeline>
<codeline lineno="1837"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1838"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="dagimp_8cpp_1a91ad9478d81a7aaf2593e8d9c3d06a14" kindref="member">uint</ref><sp/>ntv<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1839"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="dagimp_8cpp_1a687ce463dce05873a78f8b29a3a808be" kindref="member">rd</ref>(&amp;ntv,<sp/>4);</highlight></codeline>
<codeline lineno="1840"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="dagimp_8cpp_1a65f85814a8290f9797005d3b28e7e5fc" kindref="member">uchar</ref><sp/>tcsz,<sp/>chid;</highlight></codeline>
<codeline lineno="1841"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="dagimp_8cpp_1a687ce463dce05873a78f8b29a3a808be" kindref="member">rd</ref>(&amp;tcsz,<sp/>1);</highlight></codeline>
<codeline lineno="1842"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="dagimp_8cpp_1a687ce463dce05873a78f8b29a3a808be" kindref="member">rd</ref>(&amp;chid,<sp/>1);</highlight></codeline>
<codeline lineno="1843"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="max__cpt_8h_1a8d2f585b61931548923953c378682bae" kindref="member">verify</ref>(m.setNumTVFaces(nf));</highlight></codeline>
<codeline lineno="1844"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="max__cpt_8h_1a8d2f585b61931548923953c378682bae" kindref="member">verify</ref>(m.setNumTVerts(ntv));</highlight></codeline>
<codeline lineno="1845"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Point3<sp/>*tv<sp/>=<sp/>m.tVerts;</highlight></codeline>
<codeline lineno="1846"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;<sp/>ntv;<sp/>--ntv,<sp/>++tv)</highlight></codeline>
<codeline lineno="1847"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1848"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>tcsz<sp/>&amp;&amp;<sp/>i<sp/>&lt;<sp/>3;<sp/>++i)</highlight></codeline>
<codeline lineno="1849"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="dagimp_8cpp_1a687ce463dce05873a78f8b29a3a808be" kindref="member">rd</ref>((</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*)*tv<sp/>+<sp/>i,<sp/>4);</highlight></codeline>
<codeline lineno="1850"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;<sp/>i<sp/>&lt;<sp/>3;<sp/>++i)</highlight></codeline>
<codeline lineno="1851"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*)*tv)[i]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1852"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1853"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TVFace<sp/>*tf<sp/>=<sp/>m.tvFace;</highlight></codeline>
<codeline lineno="1854"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>nf;<sp/>++i)</highlight></codeline>
<codeline lineno="1855"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1856"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structDagBigTFace" kindref="compound">DagBigTFace</ref><sp/>f;</highlight></codeline>
<codeline lineno="1857"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="dagimp_8cpp_1a687ce463dce05873a78f8b29a3a808be" kindref="member">rd</ref>(&amp;f,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(f));</highlight></codeline>
<codeline lineno="1858"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tf[i].t[0]<sp/>=<sp/>f.<ref refid="structDagBigTFace_1a848201911e05420a960aa0e5aa509593" kindref="member">t</ref>[0];</highlight></codeline>
<codeline lineno="1859"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tf[i].t[2]<sp/>=<sp/>f.<ref refid="structDagBigTFace_1a848201911e05420a960aa0e5aa509593" kindref="member">t</ref>[1];</highlight></codeline>
<codeline lineno="1860"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tf[i].t[1]<sp/>=<sp/>f.<ref refid="structDagBigTFace_1a848201911e05420a960aa0e5aa509593" kindref="member">t</ref>[2];</highlight></codeline>
<codeline lineno="1861"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1862"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1863"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(numch<sp/>&gt;=<sp/>2)</highlight></codeline>
<codeline lineno="1864"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1865"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="dagimp_8cpp_1a91ad9478d81a7aaf2593e8d9c3d06a14" kindref="member">uint</ref><sp/>ntv<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1866"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="dagimp_8cpp_1a687ce463dce05873a78f8b29a3a808be" kindref="member">rd</ref>(&amp;ntv,<sp/>4);</highlight></codeline>
<codeline lineno="1867"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="dagimp_8cpp_1a65f85814a8290f9797005d3b28e7e5fc" kindref="member">uchar</ref><sp/>tcsz,<sp/>chid;</highlight></codeline>
<codeline lineno="1868"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="dagimp_8cpp_1a687ce463dce05873a78f8b29a3a808be" kindref="member">rd</ref>(&amp;tcsz,<sp/>1);</highlight></codeline>
<codeline lineno="1869"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="dagimp_8cpp_1a687ce463dce05873a78f8b29a3a808be" kindref="member">rd</ref>(&amp;chid,<sp/>1);</highlight></codeline>
<codeline lineno="1870"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="max__cpt_8h_1a8d2f585b61931548923953c378682bae" kindref="member">verify</ref>(m.setNumVCFaces(nf));</highlight></codeline>
<codeline lineno="1871"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="max__cpt_8h_1a8d2f585b61931548923953c378682bae" kindref="member">verify</ref>(m.setNumVertCol(ntv));</highlight></codeline>
<codeline lineno="1872"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Point3<sp/>*tv<sp/>=<sp/>m.vertCol;</highlight></codeline>
<codeline lineno="1873"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;<sp/>ntv;<sp/>--ntv,<sp/>++tv)</highlight></codeline>
<codeline lineno="1874"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1875"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>tcsz<sp/>&amp;&amp;<sp/>i<sp/>&lt;<sp/>3;<sp/>++i)</highlight></codeline>
<codeline lineno="1876"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="dagimp_8cpp_1a687ce463dce05873a78f8b29a3a808be" kindref="member">rd</ref>((</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*)*tv<sp/>+<sp/>i,<sp/>4);</highlight></codeline>
<codeline lineno="1877"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;<sp/>i<sp/>&lt;<sp/>3;<sp/>++i)</highlight></codeline>
<codeline lineno="1878"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*)*tv)[i]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1879"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1880"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TVFace<sp/>*tf<sp/>=<sp/>m.vcFace;</highlight></codeline>
<codeline lineno="1881"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>nf;<sp/>++i)</highlight></codeline>
<codeline lineno="1882"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1883"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structDagBigTFace" kindref="compound">DagBigTFace</ref><sp/>f;</highlight></codeline>
<codeline lineno="1884"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="dagimp_8cpp_1a687ce463dce05873a78f8b29a3a808be" kindref="member">rd</ref>(&amp;f,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(f));</highlight></codeline>
<codeline lineno="1885"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tf[i].t[0]<sp/>=<sp/>f.<ref refid="structDagBigTFace_1a848201911e05420a960aa0e5aa509593" kindref="member">t</ref>[0];</highlight></codeline>
<codeline lineno="1886"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tf[i].t[2]<sp/>=<sp/>f.<ref refid="structDagBigTFace_1a848201911e05420a960aa0e5aa509593" kindref="member">t</ref>[1];</highlight></codeline>
<codeline lineno="1887"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tf[i].t[1]<sp/>=<sp/>f.<ref refid="structDagBigTFace_1a848201911e05420a960aa0e5aa509593" kindref="member">t</ref>[2];</highlight></codeline>
<codeline lineno="1888"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1889"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1890"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1891"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(n-&gt;GetNodeTM(0).Parity())</highlight></codeline>
<codeline lineno="1892"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>flip_normals(m);</highlight></codeline>
<codeline lineno="1893"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>obj<sp/>=<sp/>tri;</highlight></codeline>
<codeline lineno="1894"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1895"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(blk_type()<sp/>==<sp/><ref refid="dagfmt_8h_1a99fb83031ce9923c84392b4e92f956b5a0467aa48acc4c3ac8feffb0c8adeb7e2" kindref="member">DAG_OBJ_MESH</ref>)</highlight></codeline>
<codeline lineno="1896"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1897"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TriObject<sp/>*tri<sp/>=<sp/>CreateNewTriObject();</highlight></codeline>
<codeline lineno="1898"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(tri);</highlight></codeline>
<codeline lineno="1899"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Mesh<sp/>&amp;m<sp/>=<sp/>tri-&gt;mesh;</highlight></codeline>
<codeline lineno="1900"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="dagimp_8cpp_1a91ad9478d81a7aaf2593e8d9c3d06a14" kindref="member">uint</ref><sp/>nv<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1901"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="dagimp_8cpp_1a687ce463dce05873a78f8b29a3a808be" kindref="member">rd</ref>(&amp;nv,<sp/>2);</highlight></codeline>
<codeline lineno="1902"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="max__cpt_8h_1a8d2f585b61931548923953c378682bae" kindref="member">verify</ref>(m.setNumVerts(nv));</highlight></codeline>
<codeline lineno="1903"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(nv)</highlight></codeline>
<codeline lineno="1904"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1905"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="dagimp_8cpp_1a687ce463dce05873a78f8b29a3a808be" kindref="member">rd</ref>(m.verts,<sp/>nv<sp/>*<sp/>12);</highlight></codeline>
<codeline lineno="1906"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(need_rescale)</highlight></codeline>
<codeline lineno="1907"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>nv;<sp/>++i)</highlight></codeline>
<codeline lineno="1908"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m.verts[i]<sp/>*=<sp/>master_scale;</highlight></codeline>
<codeline lineno="1909"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1910"><highlight class="normal"></highlight></codeline>
<codeline lineno="1911"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="dagimp_8cpp_1a91ad9478d81a7aaf2593e8d9c3d06a14" kindref="member">uint</ref><sp/>nf<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1912"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="dagimp_8cpp_1a687ce463dce05873a78f8b29a3a808be" kindref="member">rd</ref>(&amp;nf,<sp/>2);</highlight></codeline>
<codeline lineno="1913"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="max__cpt_8h_1a8d2f585b61931548923953c378682bae" kindref="member">verify</ref>(m.setNumFaces(nf));</highlight></codeline>
<codeline lineno="1914"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DebugPrint(_T(</highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/>faces:<sp/>%d\n&quot;</highlight><highlight class="normal">),<sp/>nf);</highlight></codeline>
<codeline lineno="1915"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="1916"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>nf;<sp/>++i)</highlight></codeline>
<codeline lineno="1917"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1918"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structDagFace" kindref="compound">DagFace</ref><sp/>f;</highlight></codeline>
<codeline lineno="1919"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="dagimp_8cpp_1a687ce463dce05873a78f8b29a3a808be" kindref="member">rd</ref>(&amp;f,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(f));</highlight></codeline>
<codeline lineno="1920"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m.faces[i].v[0]<sp/>=<sp/>f.<ref refid="structDagFace_1a158277f233be6293b93ad00988caa05e" kindref="member">v</ref>[0];</highlight></codeline>
<codeline lineno="1921"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m.faces[i].v[2]<sp/>=<sp/>f.<ref refid="structDagFace_1a158277f233be6293b93ad00988caa05e" kindref="member">v</ref>[1];</highlight></codeline>
<codeline lineno="1922"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m.faces[i].v[1]<sp/>=<sp/>f.<ref refid="structDagFace_1a158277f233be6293b93ad00988caa05e" kindref="member">v</ref>[2];</highlight></codeline>
<codeline lineno="1923"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m.faces[i].setMatID(f.<ref refid="structDagFace_1a947397672bbdd18edf2fe06dab23c4e2" kindref="member">mat</ref>);</highlight></codeline>
<codeline lineno="1924"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m.faces[i].smGroup<sp/>=<sp/>f.<ref refid="structDagFace_1a8b3883555a74190689dcb01a134906b3" kindref="member">smgr</ref>;</highlight></codeline>
<codeline lineno="1925"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m.faces[i].flags<sp/>|=<sp/>EDGE_ALL;</highlight></codeline>
<codeline lineno="1926"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1927"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="dagimp_8cpp_1a65f85814a8290f9797005d3b28e7e5fc" kindref="member">uchar</ref><sp/>numch;</highlight></codeline>
<codeline lineno="1928"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="dagimp_8cpp_1a687ce463dce05873a78f8b29a3a808be" kindref="member">rd</ref>(&amp;numch,<sp/>1);</highlight></codeline>
<codeline lineno="1929"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>MAX_RELEASE<sp/>&gt;=<sp/>3000</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1930"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ch<sp/>=<sp/>0;<sp/>ch<sp/>&lt;<sp/>numch;<sp/>++ch)</highlight></codeline>
<codeline lineno="1931"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1932"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="dagimp_8cpp_1a91ad9478d81a7aaf2593e8d9c3d06a14" kindref="member">uint</ref><sp/>ntv<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1933"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="dagimp_8cpp_1a687ce463dce05873a78f8b29a3a808be" kindref="member">rd</ref>(&amp;ntv,<sp/>2);</highlight></codeline>
<codeline lineno="1934"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="dagimp_8cpp_1a65f85814a8290f9797005d3b28e7e5fc" kindref="member">uchar</ref><sp/>tcsz,<sp/>chid;</highlight></codeline>
<codeline lineno="1935"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="dagimp_8cpp_1a687ce463dce05873a78f8b29a3a808be" kindref="member">rd</ref>(&amp;tcsz,<sp/>1);</highlight></codeline>
<codeline lineno="1936"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="dagimp_8cpp_1a687ce463dce05873a78f8b29a3a808be" kindref="member">rd</ref>(&amp;chid,<sp/>1);</highlight></codeline>
<codeline lineno="1937"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m.setMapSupport(chid);</highlight></codeline>
<codeline lineno="1938"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m.setNumMapVerts(chid,<sp/>ntv);</highlight></codeline>
<codeline lineno="1939"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Point3<sp/>*tv<sp/>=<sp/>m.mapVerts(chid);</highlight></codeline>
<codeline lineno="1940"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;<sp/>ntv;<sp/>--ntv,<sp/>++tv)</highlight></codeline>
<codeline lineno="1941"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1942"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>tcsz<sp/>&amp;&amp;<sp/>i<sp/>&lt;<sp/>3;<sp/>++i)</highlight></codeline>
<codeline lineno="1943"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="dagimp_8cpp_1a687ce463dce05873a78f8b29a3a808be" kindref="member">rd</ref>(&amp;tv[0][i],<sp/>4);</highlight></codeline>
<codeline lineno="1944"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;<sp/>i<sp/>&lt;<sp/>3;<sp/>++i)</highlight></codeline>
<codeline lineno="1945"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tv[0][i]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1946"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1947"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TVFace<sp/>*tf<sp/>=<sp/>m.mapFaces(chid);</highlight></codeline>
<codeline lineno="1948"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>nf;<sp/>++i)</highlight></codeline>
<codeline lineno="1949"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1950"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structDagTFace" kindref="compound">DagTFace</ref><sp/>f;</highlight></codeline>
<codeline lineno="1951"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="dagimp_8cpp_1a687ce463dce05873a78f8b29a3a808be" kindref="member">rd</ref>(&amp;f,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(f));</highlight></codeline>
<codeline lineno="1952"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tf[i].t[0]<sp/>=<sp/>f.<ref refid="structDagTFace_1a4bb9b2a320e704ed850d0481a4d5b4b5" kindref="member">t</ref>[0];</highlight></codeline>
<codeline lineno="1953"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tf[i].t[2]<sp/>=<sp/>f.<ref refid="structDagTFace_1a4bb9b2a320e704ed850d0481a4d5b4b5" kindref="member">t</ref>[1];</highlight></codeline>
<codeline lineno="1954"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tf[i].t[1]<sp/>=<sp/>f.<ref refid="structDagTFace_1a4bb9b2a320e704ed850d0481a4d5b4b5" kindref="member">t</ref>[2];</highlight></codeline>
<codeline lineno="1955"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1956"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1957"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1958"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(numch<sp/>&gt;=<sp/>1)</highlight></codeline>
<codeline lineno="1959"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1960"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="dagimp_8cpp_1a91ad9478d81a7aaf2593e8d9c3d06a14" kindref="member">uint</ref><sp/>ntv<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1961"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="dagimp_8cpp_1a687ce463dce05873a78f8b29a3a808be" kindref="member">rd</ref>(&amp;ntv,<sp/>2);</highlight></codeline>
<codeline lineno="1962"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="dagimp_8cpp_1a65f85814a8290f9797005d3b28e7e5fc" kindref="member">uchar</ref><sp/>tcsz,<sp/>chid;</highlight></codeline>
<codeline lineno="1963"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="dagimp_8cpp_1a687ce463dce05873a78f8b29a3a808be" kindref="member">rd</ref>(&amp;tcsz,<sp/>1);</highlight></codeline>
<codeline lineno="1964"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="dagimp_8cpp_1a687ce463dce05873a78f8b29a3a808be" kindref="member">rd</ref>(&amp;chid,<sp/>1);</highlight></codeline>
<codeline lineno="1965"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="max__cpt_8h_1a8d2f585b61931548923953c378682bae" kindref="member">verify</ref>(m.setNumTVFaces(nf));</highlight></codeline>
<codeline lineno="1966"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="max__cpt_8h_1a8d2f585b61931548923953c378682bae" kindref="member">verify</ref>(m.setNumTVerts(ntv));</highlight></codeline>
<codeline lineno="1967"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Point3<sp/>*tv<sp/>=<sp/>m.tVerts;</highlight></codeline>
<codeline lineno="1968"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;<sp/>ntv;<sp/>--ntv,<sp/>++tv)</highlight></codeline>
<codeline lineno="1969"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1970"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>tcsz<sp/>&amp;&amp;<sp/>i<sp/>&lt;<sp/>3;<sp/>++i)</highlight></codeline>
<codeline lineno="1971"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="dagimp_8cpp_1a687ce463dce05873a78f8b29a3a808be" kindref="member">rd</ref>((</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*)*tv<sp/>+<sp/>i,<sp/>4);</highlight></codeline>
<codeline lineno="1972"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;<sp/>i<sp/>&lt;<sp/>3;<sp/>++i)</highlight></codeline>
<codeline lineno="1973"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*)*tv)[i]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1974"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1975"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TVFace<sp/>*tf<sp/>=<sp/>m.tvFace;</highlight></codeline>
<codeline lineno="1976"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>nf;<sp/>++i)</highlight></codeline>
<codeline lineno="1977"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1978"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structDagTFace" kindref="compound">DagTFace</ref><sp/>f;</highlight></codeline>
<codeline lineno="1979"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="dagimp_8cpp_1a687ce463dce05873a78f8b29a3a808be" kindref="member">rd</ref>(&amp;f,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(f));</highlight></codeline>
<codeline lineno="1980"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tf[i].t[0]<sp/>=<sp/>f.<ref refid="structDagTFace_1a4bb9b2a320e704ed850d0481a4d5b4b5" kindref="member">t</ref>[0];</highlight></codeline>
<codeline lineno="1981"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tf[i].t[2]<sp/>=<sp/>f.<ref refid="structDagTFace_1a4bb9b2a320e704ed850d0481a4d5b4b5" kindref="member">t</ref>[1];</highlight></codeline>
<codeline lineno="1982"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tf[i].t[1]<sp/>=<sp/>f.<ref refid="structDagTFace_1a4bb9b2a320e704ed850d0481a4d5b4b5" kindref="member">t</ref>[2];</highlight></codeline>
<codeline lineno="1983"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1984"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1985"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(numch<sp/>&gt;=<sp/>2)</highlight></codeline>
<codeline lineno="1986"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1987"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="dagimp_8cpp_1a91ad9478d81a7aaf2593e8d9c3d06a14" kindref="member">uint</ref><sp/>ntv<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1988"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="dagimp_8cpp_1a687ce463dce05873a78f8b29a3a808be" kindref="member">rd</ref>(&amp;ntv,<sp/>2);</highlight></codeline>
<codeline lineno="1989"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="dagimp_8cpp_1a65f85814a8290f9797005d3b28e7e5fc" kindref="member">uchar</ref><sp/>tcsz,<sp/>chid;</highlight></codeline>
<codeline lineno="1990"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="dagimp_8cpp_1a687ce463dce05873a78f8b29a3a808be" kindref="member">rd</ref>(&amp;tcsz,<sp/>1);</highlight></codeline>
<codeline lineno="1991"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="dagimp_8cpp_1a687ce463dce05873a78f8b29a3a808be" kindref="member">rd</ref>(&amp;chid,<sp/>1);</highlight></codeline>
<codeline lineno="1992"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="max__cpt_8h_1a8d2f585b61931548923953c378682bae" kindref="member">verify</ref>(m.setNumVCFaces(nf));</highlight></codeline>
<codeline lineno="1993"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="max__cpt_8h_1a8d2f585b61931548923953c378682bae" kindref="member">verify</ref>(m.setNumVertCol(ntv));</highlight></codeline>
<codeline lineno="1994"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Point3<sp/>*tv<sp/>=<sp/>m.vertCol;</highlight></codeline>
<codeline lineno="1995"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;<sp/>ntv;<sp/>--ntv,<sp/>++tv)</highlight></codeline>
<codeline lineno="1996"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1997"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>tcsz<sp/>&amp;&amp;<sp/>i<sp/>&lt;<sp/>3;<sp/>++i)</highlight></codeline>
<codeline lineno="1998"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="dagimp_8cpp_1a687ce463dce05873a78f8b29a3a808be" kindref="member">rd</ref>((</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*)*tv<sp/>+<sp/>i,<sp/>4);</highlight></codeline>
<codeline lineno="1999"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;<sp/>i<sp/>&lt;<sp/>3;<sp/>++i)</highlight></codeline>
<codeline lineno="2000"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*)*tv)[i]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2001"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2002"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TVFace<sp/>*tf<sp/>=<sp/>m.vcFace;</highlight></codeline>
<codeline lineno="2003"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>nf;<sp/>++i)</highlight></codeline>
<codeline lineno="2004"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2005"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structDagTFace" kindref="compound">DagTFace</ref><sp/>f;</highlight></codeline>
<codeline lineno="2006"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="dagimp_8cpp_1a687ce463dce05873a78f8b29a3a808be" kindref="member">rd</ref>(&amp;f,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(f));</highlight></codeline>
<codeline lineno="2007"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tf[i].t[0]<sp/>=<sp/>f.<ref refid="structDagTFace_1a4bb9b2a320e704ed850d0481a4d5b4b5" kindref="member">t</ref>[0];</highlight></codeline>
<codeline lineno="2008"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tf[i].t[2]<sp/>=<sp/>f.<ref refid="structDagTFace_1a4bb9b2a320e704ed850d0481a4d5b4b5" kindref="member">t</ref>[1];</highlight></codeline>
<codeline lineno="2009"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tf[i].t[1]<sp/>=<sp/>f.<ref refid="structDagTFace_1a4bb9b2a320e704ed850d0481a4d5b4b5" kindref="member">t</ref>[2];</highlight></codeline>
<codeline lineno="2010"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2011"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2012"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2013"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(n-&gt;GetNodeTM(0).Parity())</highlight></codeline>
<codeline lineno="2014"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>flip_normals(m);</highlight></codeline>
<codeline lineno="2015"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>obj<sp/>=<sp/>tri;</highlight></codeline>
<codeline lineno="2016"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>MAX_RELEASE<sp/>&gt;=<sp/>12000</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2017"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2018"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(blk_type()<sp/>==<sp/><ref refid="dagfmt_8h_1a99fb83031ce9923c84392b4e92f956b5a5198d2fa1d87f4c4d09859333acd32f9" kindref="member">DAG_OBJ_BONES</ref>)</highlight></codeline>
<codeline lineno="2019"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2020"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structSkinData" kindref="compound">SkinData</ref><sp/>*sd<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="structSkinData" kindref="compound">SkinData</ref>;</highlight></codeline>
<codeline lineno="2021"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sd-&gt;<ref refid="structSkinData_1a301c71b860d61b66cc134d8fa32c0d40" kindref="member">skinNode</ref><sp/>=<sp/>n;</highlight></codeline>
<codeline lineno="2022"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="dagimp_8cpp_1a687ce463dce05873a78f8b29a3a808be" kindref="member">rd</ref>(&amp;sd-&gt;<ref refid="structSkinData_1a4167e987be1ffc0d7e646de9e751b7d8" kindref="member">numb</ref>,<sp/>2);</highlight></codeline>
<codeline lineno="2023"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sd-&gt;<ref refid="structSkinData_1a39f8918842ee3cab77ef895ba17be64a" kindref="member">bones</ref>.SetCount(sd-&gt;<ref refid="structSkinData_1a4167e987be1ffc0d7e646de9e751b7d8" kindref="member">numb</ref>);</highlight></codeline>
<codeline lineno="2024"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="dagimp_8cpp_1a687ce463dce05873a78f8b29a3a808be" kindref="member">rd</ref>(&amp;sd-&gt;<ref refid="structSkinData_1a39f8918842ee3cab77ef895ba17be64a" kindref="member">bones</ref>[0],<sp/>sd-&gt;<ref refid="structSkinData_1a39f8918842ee3cab77ef895ba17be64a" kindref="member">bones</ref>.Count()<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="structDagBone" kindref="compound">DagBone</ref>));</highlight></codeline>
<codeline lineno="2025"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="dagimp_8cpp_1a687ce463dce05873a78f8b29a3a808be" kindref="member">rd</ref>(&amp;sd-&gt;<ref refid="structSkinData_1afda32c4bcf06a06aa0c4256dd4dc4264" kindref="member">numvert</ref>,<sp/>4);</highlight></codeline>
<codeline lineno="2026"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sd-&gt;<ref refid="structSkinData_1a9900c187aea406202c9f86311d195897" kindref="member">wt</ref>.SetCount(sd-&gt;<ref refid="structSkinData_1afda32c4bcf06a06aa0c4256dd4dc4264" kindref="member">numvert</ref><sp/>*<sp/>sd-&gt;<ref refid="structSkinData_1a4167e987be1ffc0d7e646de9e751b7d8" kindref="member">numb</ref>);</highlight></codeline>
<codeline lineno="2027"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="dagimp_8cpp_1a687ce463dce05873a78f8b29a3a808be" kindref="member">rd</ref>(&amp;sd-&gt;<ref refid="structSkinData_1a9900c187aea406202c9f86311d195897" kindref="member">wt</ref>[0],<sp/>sd-&gt;<ref refid="structSkinData_1a9900c187aea406202c9f86311d195897" kindref="member">wt</ref>.Count()<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="2028"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>skin_data.Append(1,<sp/>&amp;sd);</highlight></codeline>
<codeline lineno="2029"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2030"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2031"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(blk_type()<sp/>==<sp/><ref refid="dagfmt_8h_1a99fb83031ce9923c84392b4e92f956b5adfe3047dff3d10a4998683891573438b" kindref="member">DAG_OBJ_SPLINES</ref>)</highlight></codeline>
<codeline lineno="2032"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2033"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SplineShape<sp/>*shape<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>SplineShape;</highlight></codeline>
<codeline lineno="2034"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(shape);</highlight></codeline>
<codeline lineno="2035"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BezierShape<sp/>&amp;shp<sp/>=<sp/>shape-&gt;shape;</highlight></codeline>
<codeline lineno="2036"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>numspl;</highlight></codeline>
<codeline lineno="2037"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="dagimp_8cpp_1a687ce463dce05873a78f8b29a3a808be" kindref="member">rd</ref>(&amp;numspl,<sp/>4);</highlight></codeline>
<codeline lineno="2038"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;<sp/>numspl<sp/>&gt;<sp/>0;<sp/>--numspl)</highlight></codeline>
<codeline lineno="2039"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2040"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Spline3D<sp/>&amp;s<sp/>=<sp/>*shp.NewSpline();</highlight></codeline>
<codeline lineno="2041"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(&amp;s);</highlight></codeline>
<codeline lineno="2042"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>flg;</highlight></codeline>
<codeline lineno="2043"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="dagimp_8cpp_1a687ce463dce05873a78f8b29a3a808be" kindref="member">rd</ref>(&amp;flg,<sp/>1);</highlight></codeline>
<codeline lineno="2044"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>numk;</highlight></codeline>
<codeline lineno="2045"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="dagimp_8cpp_1a687ce463dce05873a78f8b29a3a808be" kindref="member">rd</ref>(&amp;numk,<sp/>4);</highlight></codeline>
<codeline lineno="2046"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;<sp/>numk<sp/>&gt;<sp/>0;<sp/>--numk)</highlight></codeline>
<codeline lineno="2047"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2048"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>ktype;</highlight></codeline>
<codeline lineno="2049"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="dagimp_8cpp_1a687ce463dce05873a78f8b29a3a808be" kindref="member">rd</ref>(&amp;ktype,<sp/>1);</highlight></codeline>
<codeline lineno="2050"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Point3<sp/>i,<sp/><ref refid="polyBumpUtil_8cpp_1aaa1ebe818ec1c763a776cc580551f3e6" kindref="member">p</ref>,<sp/>o;</highlight></codeline>
<codeline lineno="2051"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="dagimp_8cpp_1a687ce463dce05873a78f8b29a3a808be" kindref="member">rd</ref>(&amp;i,<sp/>12);</highlight></codeline>
<codeline lineno="2052"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="dagimp_8cpp_1a687ce463dce05873a78f8b29a3a808be" kindref="member">rd</ref>(&amp;<ref refid="polyBumpUtil_8cpp_1aaa1ebe818ec1c763a776cc580551f3e6" kindref="member">p</ref>,<sp/>12);</highlight></codeline>
<codeline lineno="2053"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="dagimp_8cpp_1a687ce463dce05873a78f8b29a3a808be" kindref="member">rd</ref>(&amp;o,<sp/>12);</highlight></codeline>
<codeline lineno="2054"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(need_rescale)</highlight></codeline>
<codeline lineno="2055"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2056"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i<sp/>*=<sp/>master_scale;</highlight></codeline>
<codeline lineno="2057"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="polyBumpUtil_8cpp_1aaa1ebe818ec1c763a776cc580551f3e6" kindref="member">p</ref><sp/>*=<sp/>master_scale;</highlight></codeline>
<codeline lineno="2058"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>o<sp/>*=<sp/>master_scale;</highlight></codeline>
<codeline lineno="2059"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2060"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SplineKnot<sp/>k(KTYPE_BEZIER_CORNER,<sp/>LTYPE_CURVE,<sp/><ref refid="polyBumpUtil_8cpp_1aaa1ebe818ec1c763a776cc580551f3e6" kindref="member">p</ref>,<sp/>i,<sp/>o);</highlight></codeline>
<codeline lineno="2061"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s.AddKnot(k);</highlight></codeline>
<codeline lineno="2062"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2063"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s.SetClosed(flg<sp/>&amp;<sp/><ref refid="dagfmt_8h_1a3229e39caf35e803a1a09140e501b82d" kindref="member">DAG_SPLINE_CLOSED</ref><sp/>?<sp/>1<sp/>:<sp/>0);</highlight></codeline>
<codeline lineno="2064"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s.InvalidateGeomCache();</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2065"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s.ComputeBezPoints();</highlight></codeline>
<codeline lineno="2066"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2067"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>shp.UpdateSels();</highlight></codeline>
<codeline lineno="2068"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>shp.InvalidateGeomCache();</highlight></codeline>
<codeline lineno="2069"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>shp.InvalidateCapCache();</highlight></codeline>
<codeline lineno="2070"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>obj<sp/>=<sp/>shape;</highlight></codeline>
<codeline lineno="2071"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2072"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(blk_type()<sp/>==<sp/><ref refid="dagfmt_8h_1a99fb83031ce9923c84392b4e92f956b5a6717336d0c0ec615dc685bfe09b7ca65" kindref="member">DAG_OBJ_LIGHT</ref>)</highlight></codeline>
<codeline lineno="2073"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2074"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structDagLight" kindref="compound">DagLight</ref><sp/>dl;</highlight></codeline>
<codeline lineno="2075"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structDagLight2" kindref="compound">DagLight2</ref><sp/>dl2;</highlight></codeline>
<codeline lineno="2076"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="dagimp_8cpp_1a687ce463dce05873a78f8b29a3a808be" kindref="member">rd</ref>(&amp;dl,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(dl));</highlight></codeline>
<codeline lineno="2077"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Color<sp/>c(dl.<ref refid="structDagLight_1a9ddde5a9057f0479a6660f80732d0abd" kindref="member">r</ref>,<sp/>dl.<ref refid="structDagLight_1a51d9e2499cc8f4c052bc0052e0819b8d" kindref="member">g</ref>,<sp/>dl.<ref refid="structDagLight_1a38e0dfeeba77ea75a334d7f822a08cfa" kindref="member">b</ref>);</highlight></codeline>
<codeline lineno="2078"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(blk_rest()<sp/>==<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="structDagLight2" kindref="compound">DagLight2</ref>))</highlight></codeline>
<codeline lineno="2079"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2080"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="dagimp_8cpp_1a687ce463dce05873a78f8b29a3a808be" kindref="member">rd</ref>(&amp;dl2,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(dl2));</highlight></codeline>
<codeline lineno="2081"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2082"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2083"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2084"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dl2.<ref refid="structDagLight2_1ae76d3e5172b8a893ea57ee834c9902be" kindref="member">mult</ref><sp/>=<sp/>MaxVal(c);</highlight></codeline>
<codeline lineno="2085"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dl2.<ref refid="structDagLight2_1acd0be638e1b29de98d213926c4f6d30e" kindref="member">type</ref><sp/>=<sp/><ref refid="dagfmt_8h_1abc6126af1d45847bc59afa0aa3216b04a5c974b13691d07553f5b3f41a36fcb6b" kindref="member">DAG_LIGHT_OMNI</ref>;</highlight></codeline>
<codeline lineno="2086"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dl2.<ref refid="structDagLight2_1a4b90d1ec2617399b7f82f3604a144d3d" kindref="member">hotspot</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2087"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dl2.<ref refid="structDagLight2_1a05dc43d7fc32ebec34843c3231d22567" kindref="member">falloff</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2088"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2089"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TimeValue<sp/>time<sp/>=<sp/>ip-&gt;GetTime();</highlight></codeline>
<codeline lineno="2090"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GenLight<sp/>&amp;lt<sp/>=<sp/>*(GenLight<sp/>*)ip-&gt;CreateInstance(LIGHT_CLASS_ID,</highlight></codeline>
<codeline lineno="2091"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Class_ID((dl2.<ref refid="structDagLight2_1acd0be638e1b29de98d213926c4f6d30e" kindref="member">type</ref><sp/>==<sp/><ref refid="dagfmt_8h_1abc6126af1d45847bc59afa0aa3216b04a56298c71d402bc2a3909033d4af67e98" kindref="member">DAG_LIGHT_SPOT</ref><sp/>?<sp/>FSPOT_LIGHT_CLASS_ID</highlight></codeline>
<codeline lineno="2092"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>(dl2.type<sp/>==<sp/><ref refid="dagfmt_8h_1abc6126af1d45847bc59afa0aa3216b04a2002148ad383116768dfd195bafb3673" kindref="member">DAG_LIGHT_DIR</ref><sp/>?<sp/>DIR_LIGHT_CLASS_ID<sp/>:<sp/>OMNI_LIGHT_CLASS_ID)),</highlight></codeline>
<codeline lineno="2093"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0));</highlight></codeline>
<codeline lineno="2094"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(&amp;lt);</highlight></codeline>
<codeline lineno="2095"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>mc<sp/>=<sp/>dl2.<ref refid="structDagLight2_1ae76d3e5172b8a893ea57ee834c9902be" kindref="member">mult</ref>;</highlight></codeline>
<codeline lineno="2096"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lt.SetIntensity(time,<sp/>mc);</highlight></codeline>
<codeline lineno="2097"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mc<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="2098"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mc<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="2099"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lt.SetRGBColor(time,<sp/>Point3((</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*)(c<sp/>/<sp/>mc)));</highlight></codeline>
<codeline lineno="2100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(dl2.<ref refid="structDagLight2_1acd0be638e1b29de98d213926c4f6d30e" kindref="member">type</ref><sp/>!=<sp/><ref refid="dagfmt_8h_1abc6126af1d45847bc59afa0aa3216b04a5c974b13691d07553f5b3f41a36fcb6b" kindref="member">DAG_LIGHT_OMNI</ref>)</highlight></codeline>
<codeline lineno="2101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lt.SetHotspot(time,<sp/>dl2.<ref refid="structDagLight2_1a4b90d1ec2617399b7f82f3604a144d3d" kindref="member">hotspot</ref>);</highlight></codeline>
<codeline lineno="2103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lt.SetFallsize(time,<sp/>dl2.<ref refid="structDagLight2_1a05dc43d7fc32ebec34843c3231d22567" kindref="member">falloff</ref>);</highlight></codeline>
<codeline lineno="2104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lt.SetAtten(time,<sp/>ATTEN_START,<sp/>dl.<ref refid="structDagLight_1a25eebd5c643d1850f7ff00adac52d40d" kindref="member">range</ref>);</highlight></codeline>
<codeline lineno="2106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lt.SetAtten(time,<sp/>ATTEN_END,<sp/>dl.<ref refid="structDagLight_1a25eebd5c643d1850f7ff00adac52d40d" kindref="member">range</ref>);</highlight></codeline>
<codeline lineno="2107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lt.SetUseAtten(TRUE);</highlight></codeline>
<codeline lineno="2108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>lt.SetAttenDisplay(TRUE);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lt.SetDecayType(dl.<ref refid="structDagLight_1a7680f03a14534f23d1c291ac74b6f11d" kindref="member">decay</ref>);</highlight></codeline>
<codeline lineno="2110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lt.SetDecayRadius(time,<sp/>dl.<ref refid="structDagLight_1a60681e33fb6279b0141c4405f1140758" kindref="member">drad</ref>);</highlight></codeline>
<codeline lineno="2111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lt.SetShadow(nflg<sp/>&amp;<sp/><ref refid="dagfmt_8h_1a71c98ba575f1023b2ccabe8ac3cd3e64" kindref="member">DAG_NF_CASTSHADOW</ref><sp/>?<sp/>1<sp/>:<sp/>0);</highlight></codeline>
<codeline lineno="2112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lt.SetUseLight(TRUE);</highlight></codeline>
<codeline lineno="2113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lt.Enable(TRUE);</highlight></codeline>
<codeline lineno="2114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>obj<sp/>=<sp/>&amp;lt;</highlight></codeline>
<codeline lineno="2115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(blk_type()<sp/>==<sp/><ref refid="dagfmt_8h_1a99fb83031ce9923c84392b4e92f956b5a30dab6dc725e918846b10d8a753767a3" kindref="member">DAG_OBJ_FACEFLG</ref><sp/>&amp;&amp;<sp/>obj<sp/>&amp;&amp;<sp/>obj-&gt;IsSubClassOf(Class_ID(TRIOBJ_CLASS_ID,<sp/>0)))</highlight></codeline>
<codeline lineno="2117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TriObject<sp/>*tri<sp/>=<sp/>(TriObject<sp/>*)obj;</highlight></codeline>
<codeline lineno="2119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Mesh<sp/>&amp;m<sp/>=<sp/>tri-&gt;mesh;</highlight></codeline>
<codeline lineno="2120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(n-&gt;GetNodeTM(0).Parity())</highlight></codeline>
<codeline lineno="2121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>flip_normals(m);</highlight></codeline>
<codeline lineno="2122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m.numFaces<sp/>==<sp/>blk_rest())</highlight></codeline>
<codeline lineno="2123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>m.numFaces;<sp/>++i)</highlight></codeline>
<codeline lineno="2125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Face<sp/>&amp;f<sp/>=<sp/>m.faces[i];</highlight></codeline>
<codeline lineno="2127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>ef;</highlight></codeline>
<codeline lineno="2128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="dagimp_8cpp_1a687ce463dce05873a78f8b29a3a808be" kindref="member">rd</ref>(&amp;ef,<sp/>1);</highlight></codeline>
<codeline lineno="2129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>f.flags<sp/>&amp;=<sp/>~(EDGE_ALL<sp/>|<sp/>FACE_HIDDEN);</highlight></codeline>
<codeline lineno="2130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ef<sp/>&amp;<sp/><ref refid="dagfmt_8h_1a6d61dc0291a695986f789bc95c462a8d" kindref="member">DAG_FACEFLG_EDGE2</ref>)</highlight></codeline>
<codeline lineno="2131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>f.flags<sp/>|=<sp/>EDGE_A;</highlight></codeline>
<codeline lineno="2132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ef<sp/>&amp;<sp/><ref refid="dagfmt_8h_1af064665dfa5dee73725d376e7d3f7c9c" kindref="member">DAG_FACEFLG_EDGE1</ref>)</highlight></codeline>
<codeline lineno="2133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>f.flags<sp/>|=<sp/>EDGE_B;</highlight></codeline>
<codeline lineno="2134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ef<sp/>&amp;<sp/><ref refid="dagfmt_8h_1aac860b5c517c20a86ab30d1e6ac098cc" kindref="member">DAG_FACEFLG_EDGE0</ref>)</highlight></codeline>
<codeline lineno="2135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>f.flags<sp/>|=<sp/>EDGE_C;</highlight></codeline>
<codeline lineno="2136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ef<sp/>&amp;<sp/><ref refid="dagfmt_8h_1a60ef8f5a97371351817f3ab3034b8b91" kindref="member">DAG_FACEFLG_HIDDEN</ref>)</highlight></codeline>
<codeline lineno="2137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>f.flags<sp/>|=<sp/>FACE_HIDDEN;</highlight></codeline>
<codeline lineno="2138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(n-&gt;GetNodeTM(0).Parity())</highlight></codeline>
<codeline lineno="2141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>flip_normals(m);</highlight></codeline>
<codeline lineno="2142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(blk_type()<sp/>==<sp/><ref refid="dagfmt_8h_1a99fb83031ce9923c84392b4e92f956b5ae1a0209b9391ec3aacd908d17b87a306" kindref="member">DAG_OBJ_NORMALS</ref><sp/>&amp;&amp;<sp/>obj<sp/>&amp;&amp;<sp/>obj-&gt;IsSubClassOf(Class_ID(TRIOBJ_CLASS_ID,<sp/>0)))</highlight></codeline>
<codeline lineno="2144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Mesh<sp/>&amp;m<sp/>=<sp/>((TriObject<sp/>*)obj)-&gt;mesh;</highlight></codeline>
<codeline lineno="2146"><highlight class="normal"></highlight></codeline>
<codeline lineno="2147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!m.GetSpecifiedNormals())</highlight></codeline>
<codeline lineno="2148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m.SpecifyNormals();</highlight></codeline>
<codeline lineno="2150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MeshNormalSpec<sp/>*normalSpec<sp/>=<sp/>m.GetSpecifiedNormals();</highlight></codeline>
<codeline lineno="2152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(normalSpec)</highlight></codeline>
<codeline lineno="2153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>numNormals;</highlight></codeline>
<codeline lineno="2155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="dagimp_8cpp_1a687ce463dce05873a78f8b29a3a808be" kindref="member">rd</ref>(&amp;numNormals,<sp/>4);</highlight></codeline>
<codeline lineno="2156"><highlight class="normal"></highlight></codeline>
<codeline lineno="2157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>rest<sp/>=<sp/>blk_rest();</highlight></codeline>
<codeline lineno="2158"><highlight class="normal"></highlight></codeline>
<codeline lineno="2159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(numNormals<sp/>&gt;<sp/>0<sp/>&amp;&amp;<sp/>rest<sp/>==<sp/>numNormals<sp/>*<sp/>12<sp/>+<sp/>m.numFaces<sp/>*<sp/>12)</highlight></codeline>
<codeline lineno="2160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>normalSpec-&gt;SetParent(&amp;m);</highlight></codeline>
<codeline lineno="2162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>normalSpec-&gt;CheckNormals();</highlight></codeline>
<codeline lineno="2163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>normalSpec-&gt;SetNumNormals(numNormals);</highlight></codeline>
<codeline lineno="2164"><highlight class="normal"></highlight></codeline>
<codeline lineno="2165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>normalSpec-&gt;SetAllExplicit(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2166"><highlight class="normal"></highlight></codeline>
<codeline lineno="2167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="dagimp_8cpp_1a687ce463dce05873a78f8b29a3a808be" kindref="member">rd</ref>(normalSpec-&gt;GetNormalArray(),<sp/>numNormals<sp/>*<sp/>12);</highlight></codeline>
<codeline lineno="2168"><highlight class="normal"></highlight></codeline>
<codeline lineno="2169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*indices<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">[m.numFaces<sp/>*<sp/>3];</highlight></codeline>
<codeline lineno="2170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="dagimp_8cpp_1a687ce463dce05873a78f8b29a3a808be" kindref="member">rd</ref>(indices,<sp/>m.numFaces<sp/>*<sp/>3<sp/>*<sp/>4);</highlight></codeline>
<codeline lineno="2171"><highlight class="normal"></highlight></codeline>
<codeline lineno="2172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>m.numFaces;<sp/>i++)</highlight></codeline>
<codeline lineno="2173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>normalSpec-&gt;SetNormalIndex(i,<sp/>0,<sp/>indices[i<sp/>*<sp/>3]);</highlight></codeline>
<codeline lineno="2175"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>normalSpec-&gt;SetNormalIndex(i,<sp/>1,<sp/>indices[i<sp/>*<sp/>3<sp/>+<sp/>2]);</highlight></codeline>
<codeline lineno="2176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>normalSpec-&gt;SetNormalIndex(i,<sp/>2,<sp/>indices[i<sp/>*<sp/>3<sp/>+<sp/>1]);</highlight></codeline>
<codeline lineno="2177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2178"><highlight class="normal"></highlight></codeline>
<codeline lineno="2179"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">[]<sp/>indices;</highlight></codeline>
<codeline lineno="2180"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2182"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2183"><highlight class="normal"></highlight></codeline>
<codeline lineno="2184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="dagimp_8cpp_1af72073a672fb009b5005670cb78a4598" kindref="member">eblk</ref>;</highlight></codeline>
<codeline lineno="2185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>DebugPrint(_T(</highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/>obj<sp/>mesh<sp/>ok\n&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="2187"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2188"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(blk_type()<sp/>==<sp/><ref refid="dagfmt_8h_1adf764cbdea00d65edcd07bb9953ad2b7afad952e8f66ed1ca41d882b58b6e3dda" kindref="member">DAG_NODE_CHILDREN</ref>)</highlight></codeline>
<codeline lineno="2189"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2190"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(blk_rest()<sp/>&gt;<sp/>0)</highlight></codeline>
<codeline lineno="2191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="dagimp_8cpp_1a258f4e1cc409c86d8964e61a1ff3407e" kindref="member">bblk</ref>;</highlight></codeline>
<codeline lineno="2193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(blk_type()<sp/>==<sp/><ref refid="dagfmt_8h_1a06fc87d81c62e9abb8790b6e5713c55bae86c37d60258015f247e4e8b50d5bda8" kindref="member">DAG_NODE</ref>)</highlight></codeline>
<codeline lineno="2194"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2195"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!load_node(n,<sp/><ref refid="polyBumpUtil_8cpp_1a48d03c7323d95df49ef19db24dcb5c71" kindref="member">h</ref>,<sp/>ii,<sp/>ip,<sp/>skin_data,<sp/>node_id))</highlight></codeline>
<codeline lineno="2196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>read_err;</highlight></codeline>
<codeline lineno="2197"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(blk_type()<sp/>==<sp/><ref refid="dagfmt_8h_1a06fc87d81c62e9abb8790b6e5713c55baa54953b8e05322be30b25cac182c882d" kindref="member">DAG_MATER</ref>)</highlight></codeline>
<codeline lineno="2199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>read_err;</highlight></codeline>
<codeline lineno="2200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="dagimp_8cpp_1af72073a672fb009b5005670cb78a4598" kindref="member">eblk</ref>;</highlight></codeline>
<codeline lineno="2201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2202"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2203"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="dagimp_8cpp_1af72073a672fb009b5005670cb78a4598" kindref="member">eblk</ref>;</highlight></codeline>
<codeline lineno="2204"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2205"><highlight class="normal"></highlight></codeline>
<codeline lineno="2206"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(in)</highlight></codeline>
<codeline lineno="2207"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="2208"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!obj)</highlight></codeline>
<codeline lineno="2209"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>obj=(Object*)ii-&gt;Create(HELPER_CLASS_ID,Class_ID(DUMMY_CLASS_ID,0));</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>obj<sp/>=<sp/>(Object<sp/>*)ii-&gt;Create(GEOMOBJECT_CLASS_ID,<sp/><ref refid="dagor_8h_1a3c99c6cc99ba27ff7f869c2901da2733" kindref="member">Dummy_CID</ref>);</highlight></codeline>
<codeline lineno="2212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>assert(obj);</highlight></codeline>
<codeline lineno="2213"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2214"><highlight class="normal"><sp/><sp/><sp/><sp/>in-&gt;Reference(obj);</highlight></codeline>
<codeline lineno="2215"><highlight class="normal"><sp/><sp/><sp/><sp/>pnode-&gt;AttachChild(n,<sp/>0);</highlight></codeline>
<codeline lineno="2216"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2217"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mtl)</highlight></codeline>
<codeline lineno="2218"><highlight class="normal"><sp/><sp/><sp/><sp/>n-&gt;SetMtl(mtl);</highlight></codeline>
<codeline lineno="2219"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="2220"><highlight class="normal">read_err:</highlight></codeline>
<codeline lineno="2221"><highlight class="normal"><sp/><sp/>DebugPrint(_T(</highlight><highlight class="stringliteral">&quot;read<sp/>error<sp/>in<sp/>load_node()<sp/>at<sp/>%X<sp/>of<sp/>%s\n&quot;</highlight><highlight class="normal">),<sp/>ftell(<ref refid="polyBumpUtil_8cpp_1a48d03c7323d95df49ef19db24dcb5c71" kindref="member">h</ref>),<sp/>scene_name.data());</highlight></codeline>
<codeline lineno="2222"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="2223"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2224"><highlight class="normal"></highlight></codeline>
<codeline lineno="2225"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(MAX_RELEASE_R13)<sp/>&amp;&amp;<sp/>MAX_RELEASE<sp/>&gt;=<sp/>MAX_RELEASE_R13</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2226"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>trail_stricmp(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TCHAR<sp/>*str,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TCHAR<sp/>*str2)</highlight></codeline>
<codeline lineno="2227"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2228"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>l<sp/>=<sp/>_tcslen(str),<sp/>l2<sp/>=<sp/>_tcslen(str2);</highlight></codeline>
<codeline lineno="2229"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(l<sp/>&gt;=<sp/>l2)<sp/>?<sp/>_tcsncicmp(str<sp/>+<sp/>l<sp/>-<sp/>l2,<sp/>str2,<sp/>l2)<sp/>==<sp/>0<sp/>:<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2230"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2231"><highlight class="normal"></highlight></codeline>
<codeline lineno="2232"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>find_co_files(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TCHAR<sp/>*fname,<sp/>Tab&lt;TCHAR<sp/>*&gt;<sp/>&amp;fnames)</highlight></codeline>
<codeline lineno="2233"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2234"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!trail_stricmp(fname,<sp/>_T(</highlight><highlight class="stringliteral">&quot;.lod00.dag&quot;</highlight><highlight class="normal">)))</highlight></codeline>
<codeline lineno="2235"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2236"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>base_len<sp/>=<sp/>int(_tcslen(fname)<sp/>-<sp/>_tcslen(_T(</highlight><highlight class="stringliteral">&quot;.lod00.dag&quot;</highlight><highlight class="normal">)));</highlight></codeline>
<codeline lineno="2237"><highlight class="normal"></highlight></codeline>
<codeline lineno="2238"><highlight class="normal"><sp/><sp/>TCHAR<sp/>*<ref refid="polyBumpUtil_8cpp_1aaa1ebe818ec1c763a776cc580551f3e6" kindref="member">p</ref>[2];</highlight></codeline>
<codeline lineno="2239"><highlight class="normal"><sp/><sp/><ref refid="polyBumpUtil_8cpp_1aaa1ebe818ec1c763a776cc580551f3e6" kindref="member">p</ref>[0]<sp/>=<sp/>_tcsdup(fname);</highlight></codeline>
<codeline lineno="2240"><highlight class="normal"><sp/><sp/><ref refid="polyBumpUtil_8cpp_1aaa1ebe818ec1c763a776cc580551f3e6" kindref="member">p</ref>[1]<sp/>=<sp/>_tcsdup(_T(</highlight><highlight class="stringliteral">&quot;LOD00&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="2241"><highlight class="normal"><sp/><sp/>fnames.Append(2,<sp/><ref refid="polyBumpUtil_8cpp_1aaa1ebe818ec1c763a776cc580551f3e6" kindref="member">p</ref>);</highlight></codeline>
<codeline lineno="2242"><highlight class="normal"></highlight></codeline>
<codeline lineno="2243"><highlight class="normal"><sp/><sp/>TCHAR<sp/>str_buf[512];</highlight></codeline>
<codeline lineno="2244"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="2245"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>1;<sp/>i<sp/>&lt;<sp/>16;<sp/>i++)</highlight></codeline>
<codeline lineno="2246"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="2247"><highlight class="normal"><sp/><sp/><sp/><sp/>_stprintf(str_buf,<sp/>_T(</highlight><highlight class="stringliteral">&quot;%.*s.lod%02d.dag&quot;</highlight><highlight class="normal">),<sp/>base_len,<sp/>fname,<sp/>i);</highlight></codeline>
<codeline lineno="2248"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(::_taccess(str_buf,<sp/>4)<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="2249"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2250"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="polyBumpUtil_8cpp_1aaa1ebe818ec1c763a776cc580551f3e6" kindref="member">p</ref>[0]<sp/>=<sp/>_tcsdup(str_buf);</highlight></codeline>
<codeline lineno="2251"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>_stprintf(str_buf,<sp/>_T(</highlight><highlight class="stringliteral">&quot;LOD%02d&quot;</highlight><highlight class="normal">),<sp/>i);</highlight></codeline>
<codeline lineno="2252"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="polyBumpUtil_8cpp_1aaa1ebe818ec1c763a776cc580551f3e6" kindref="member">p</ref>[1]<sp/>=<sp/>_tcsdup(str_buf);</highlight></codeline>
<codeline lineno="2253"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>fnames.Append(2,<sp/><ref refid="polyBumpUtil_8cpp_1aaa1ebe818ec1c763a776cc580551f3e6" kindref="member">p</ref>);</highlight></codeline>
<codeline lineno="2254"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2255"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2256"><highlight class="normal"></highlight></codeline>
<codeline lineno="2257"><highlight class="normal"><sp/><sp/>_stprintf(str_buf,<sp/>_T(</highlight><highlight class="stringliteral">&quot;%.*s_destr.lod00.dag&quot;</highlight><highlight class="normal">),<sp/>base_len,<sp/>fname);</highlight></codeline>
<codeline lineno="2258"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(::_taccess(str_buf,<sp/>4)<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="2259"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="2260"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="polyBumpUtil_8cpp_1aaa1ebe818ec1c763a776cc580551f3e6" kindref="member">p</ref>[0]<sp/>=<sp/>_tcsdup(str_buf);</highlight></codeline>
<codeline lineno="2261"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="polyBumpUtil_8cpp_1aaa1ebe818ec1c763a776cc580551f3e6" kindref="member">p</ref>[1]<sp/>=<sp/>_tcsdup(_T(</highlight><highlight class="stringliteral">&quot;DESTR&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="2262"><highlight class="normal"><sp/><sp/><sp/><sp/>fnames.Append(2,<sp/><ref refid="polyBumpUtil_8cpp_1aaa1ebe818ec1c763a776cc580551f3e6" kindref="member">p</ref>);</highlight></codeline>
<codeline lineno="2263"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2264"><highlight class="normal"></highlight></codeline>
<codeline lineno="2265"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>(base_len<sp/>&gt;<sp/>2<sp/>&amp;&amp;<sp/>_tcsncmp(&amp;fname[base_len-2],<sp/>_T(&quot;_a&quot;),<sp/>2)==0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2266"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>base_len<sp/>-=<sp/>2;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2267"><highlight class="normal"></highlight></codeline>
<codeline lineno="2268"><highlight class="normal"><sp/><sp/>_stprintf(str_buf,<sp/>_T(</highlight><highlight class="stringliteral">&quot;%.*s_dm.dag&quot;</highlight><highlight class="normal">),<sp/>base_len,<sp/>fname);</highlight></codeline>
<codeline lineno="2269"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(::_taccess(str_buf,<sp/>4)<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="2270"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="2271"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="polyBumpUtil_8cpp_1aaa1ebe818ec1c763a776cc580551f3e6" kindref="member">p</ref>[0]<sp/>=<sp/>_tcsdup(str_buf);</highlight></codeline>
<codeline lineno="2272"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="polyBumpUtil_8cpp_1aaa1ebe818ec1c763a776cc580551f3e6" kindref="member">p</ref>[1]<sp/>=<sp/>_tcsdup(_T(</highlight><highlight class="stringliteral">&quot;DM&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="2273"><highlight class="normal"><sp/><sp/><sp/><sp/>fnames.Append(2,<sp/><ref refid="polyBumpUtil_8cpp_1aaa1ebe818ec1c763a776cc580551f3e6" kindref="member">p</ref>);</highlight></codeline>
<codeline lineno="2274"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2275"><highlight class="normal"></highlight></codeline>
<codeline lineno="2276"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>16;<sp/>i++)</highlight></codeline>
<codeline lineno="2277"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="2278"><highlight class="normal"><sp/><sp/><sp/><sp/>_stprintf(str_buf,<sp/>_T(</highlight><highlight class="stringliteral">&quot;%.*s_dmg.lod%02d.dag&quot;</highlight><highlight class="normal">),<sp/>base_len,<sp/>fname,<sp/>i);</highlight></codeline>
<codeline lineno="2279"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(::_taccess(str_buf,<sp/>4)<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="2280"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2281"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="polyBumpUtil_8cpp_1aaa1ebe818ec1c763a776cc580551f3e6" kindref="member">p</ref>[0]<sp/>=<sp/>_tcsdup(str_buf);</highlight></codeline>
<codeline lineno="2282"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>_stprintf(str_buf,<sp/>_T(</highlight><highlight class="stringliteral">&quot;DMG_LOD%02d&quot;</highlight><highlight class="normal">),<sp/>i);</highlight></codeline>
<codeline lineno="2283"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="polyBumpUtil_8cpp_1aaa1ebe818ec1c763a776cc580551f3e6" kindref="member">p</ref>[1]<sp/>=<sp/>_tcsdup(str_buf);</highlight></codeline>
<codeline lineno="2284"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>fnames.Append(2,<sp/><ref refid="polyBumpUtil_8cpp_1aaa1ebe818ec1c763a776cc580551f3e6" kindref="member">p</ref>);</highlight></codeline>
<codeline lineno="2285"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2286"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2287"><highlight class="normal"></highlight></codeline>
<codeline lineno="2288"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>16;<sp/>i++)</highlight></codeline>
<codeline lineno="2289"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="2290"><highlight class="normal"><sp/><sp/><sp/><sp/>_stprintf(str_buf,<sp/>_T(</highlight><highlight class="stringliteral">&quot;%.*s_dmg2.lod%02d.dag&quot;</highlight><highlight class="normal">),<sp/>base_len,<sp/>fname,<sp/>i);</highlight></codeline>
<codeline lineno="2291"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(::_taccess(str_buf,<sp/>4)<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="2292"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2293"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="polyBumpUtil_8cpp_1aaa1ebe818ec1c763a776cc580551f3e6" kindref="member">p</ref>[0]<sp/>=<sp/>_tcsdup(str_buf);</highlight></codeline>
<codeline lineno="2294"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>_stprintf(str_buf,<sp/>_T(</highlight><highlight class="stringliteral">&quot;DMG2_LOD%02d&quot;</highlight><highlight class="normal">),<sp/>i);</highlight></codeline>
<codeline lineno="2295"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="polyBumpUtil_8cpp_1aaa1ebe818ec1c763a776cc580551f3e6" kindref="member">p</ref>[1]<sp/>=<sp/>_tcsdup(str_buf);</highlight></codeline>
<codeline lineno="2296"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>fnames.Append(2,<sp/><ref refid="polyBumpUtil_8cpp_1aaa1ebe818ec1c763a776cc580551f3e6" kindref="member">p</ref>);</highlight></codeline>
<codeline lineno="2297"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2298"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2299"><highlight class="normal"></highlight></codeline>
<codeline lineno="2300"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>16;<sp/>i++)</highlight></codeline>
<codeline lineno="2301"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="2302"><highlight class="normal"><sp/><sp/><sp/><sp/>_stprintf(str_buf,<sp/>_T(</highlight><highlight class="stringliteral">&quot;%.*s_expl.lod%02d.dag&quot;</highlight><highlight class="normal">),<sp/>base_len,<sp/>fname,<sp/>i);</highlight></codeline>
<codeline lineno="2303"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(::_taccess(str_buf,<sp/>4)<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="2304"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2305"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="polyBumpUtil_8cpp_1aaa1ebe818ec1c763a776cc580551f3e6" kindref="member">p</ref>[0]<sp/>=<sp/>_tcsdup(str_buf);</highlight></codeline>
<codeline lineno="2306"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>_stprintf(str_buf,<sp/>_T(</highlight><highlight class="stringliteral">&quot;EXPL_LOD%02d&quot;</highlight><highlight class="normal">),<sp/>i);</highlight></codeline>
<codeline lineno="2307"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="polyBumpUtil_8cpp_1aaa1ebe818ec1c763a776cc580551f3e6" kindref="member">p</ref>[1]<sp/>=<sp/>_tcsdup(str_buf);</highlight></codeline>
<codeline lineno="2308"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>fnames.Append(2,<sp/><ref refid="polyBumpUtil_8cpp_1aaa1ebe818ec1c763a776cc580551f3e6" kindref="member">p</ref>);</highlight></codeline>
<codeline lineno="2309"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2310"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2311"><highlight class="normal"></highlight></codeline>
<codeline lineno="2312"><highlight class="normal"><sp/><sp/>_stprintf(str_buf,<sp/>_T(</highlight><highlight class="stringliteral">&quot;%.*s_xray.dag&quot;</highlight><highlight class="normal">),<sp/>base_len,<sp/>fname);</highlight></codeline>
<codeline lineno="2313"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(::_taccess(str_buf,<sp/>4)<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="2314"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="2315"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="polyBumpUtil_8cpp_1aaa1ebe818ec1c763a776cc580551f3e6" kindref="member">p</ref>[0]<sp/>=<sp/>_tcsdup(str_buf);</highlight></codeline>
<codeline lineno="2316"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="polyBumpUtil_8cpp_1aaa1ebe818ec1c763a776cc580551f3e6" kindref="member">p</ref>[1]<sp/>=<sp/>_tcsdup(_T(</highlight><highlight class="stringliteral">&quot;XRAY&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="2317"><highlight class="normal"><sp/><sp/><sp/><sp/>fnames.Append(2,<sp/><ref refid="polyBumpUtil_8cpp_1aaa1ebe818ec1c763a776cc580551f3e6" kindref="member">p</ref>);</highlight></codeline>
<codeline lineno="2318"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2319"><highlight class="normal"></highlight></codeline>
<codeline lineno="2320"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fnames.Count()<sp/>&gt;<sp/>1)</highlight></codeline>
<codeline lineno="2321"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2322"><highlight class="normal"></highlight></codeline>
<codeline lineno="2323"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>fnames.Count();<sp/>i++)</highlight></codeline>
<codeline lineno="2324"><highlight class="normal"><sp/><sp/><sp/><sp/>free(fnames[i]);</highlight></codeline>
<codeline lineno="2325"><highlight class="normal"><sp/><sp/>fnames.ZeroCount();</highlight></codeline>
<codeline lineno="2326"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2327"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2328"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2329"><highlight class="normal"></highlight></codeline>
<codeline lineno="2330"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classDagImp_1a1d12c2444eae41164409f661f59a25b8" kindref="member">DagImp::separateLayers</ref><sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2331"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classDagImp_1ae89838cf454485eaab1a6f5b752f4c15" kindref="member">DagImp::useLegacyImport</ref><sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2332"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classDagImp_1aed5e30f8490310f5b2b512ea7f98587e" kindref="member">DagImp::searchInSubfolders</ref><sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2333"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classDagImp_1a6a73e019f74e964f8a0121334ffb9903" kindref="member">DagImp::reimportExisting</ref><sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2334"><highlight class="normal"></highlight></codeline>
<codeline lineno="2335"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classDagImp_1ab1597f608c0098f1df0acf54f9ca1b17" kindref="member">DagImp::nonInteractive</ref><sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2336"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classDagImp_1af4fa04ae6927daef2847cf022afd47fd" kindref="member">DagImp::calledFromBatchImport</ref><sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2337"><highlight class="normal"></highlight></codeline>
<codeline lineno="2338"><highlight class="normal"><ref refid="structDagImp_1_1Categories" kindref="compound">DagImp::Categories</ref><sp/><ref refid="classDagImp_1a7b2fc6f616381d3743a667637b550f4b" kindref="member">DagImp::checked</ref><sp/>=<sp/>{</highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">};</highlight></codeline>
<codeline lineno="2339"><highlight class="normal"><ref refid="structDagImp_1_1Categories" kindref="compound">DagImp::Categories</ref><sp/><ref refid="classDagImp_1ab8197c0af5ecad271da496a2f5ac2095" kindref="member">DagImp::detected</ref><sp/>=<sp/>{</highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">};</highlight></codeline>
<codeline lineno="2340"><highlight class="normal">ToolTipExtender<sp/><ref refid="classDagImp_1aab7bf3e54d9079f0425c2bd67c265746" kindref="member">DagImp::tooltipExtender</ref>;</highlight></codeline>
<codeline lineno="2341"><highlight class="normal"></highlight></codeline>
<codeline lineno="2342"><highlight class="normal">std::vector&lt;TSTR&gt;<sp/><ref refid="classDagImp_1a3555246bf49a7cf63848c468cbf75d26" kindref="member">DagImp::batchImportFiles</ref>;</highlight></codeline>
<codeline lineno="2343"><highlight class="normal">std::unordered_set&lt;ImportedFile,<sp/>ImportedFileHash&gt;<sp/><ref refid="classDagImp_1ab8685f3fdc76d40008c8c07f7db3689e" kindref="member">DagImp::importedFiles</ref>;</highlight></codeline>
<codeline lineno="2344"><highlight class="normal"></highlight></codeline>
<codeline lineno="2345"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>BOOL<sp/>CALLBACK<sp/>ImportOptDlgProc(HWND<sp/>hwndDlg,<sp/>UINT<sp/>message,<sp/>WPARAM<sp/>wParam,<sp/>LPARAM<sp/>lParam)</highlight></codeline>
<codeline lineno="2346"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2347"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(message)</highlight></codeline>
<codeline lineno="2348"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="2349"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>WM_INITDIALOG:</highlight></codeline>
<codeline lineno="2350"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2351"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>CheckDlgButton(hwndDlg,<sp/><ref refid="resource_8h_1aa5895875b53415d8423ca476783c9f4d" kindref="member">IDC_USE_LEGACY_IMPORT</ref>,<sp/><ref refid="classDagImp_1ae89838cf454485eaab1a6f5b752f4c15" kindref="member">DagImp::useLegacyImport</ref>);</highlight></codeline>
<codeline lineno="2352"><highlight class="normal"></highlight></codeline>
<codeline lineno="2353"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>CheckDlgButton(hwndDlg,<sp/><ref refid="resource_8h_1add3e571034800bbfd52e5a8c9dc5f703" kindref="member">IDC_IMPORT_LOD</ref>,<sp/><ref refid="classDagImp_1a7b2fc6f616381d3743a667637b550f4b" kindref="member">DagImp::checked</ref>.lod);</highlight></codeline>
<codeline lineno="2354"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>EnableWindow(GetDlgItem(hwndDlg,<sp/><ref refid="resource_8h_1add3e571034800bbfd52e5a8c9dc5f703" kindref="member">IDC_IMPORT_LOD</ref>),<sp/>!<ref refid="classDagImp_1ae89838cf454485eaab1a6f5b752f4c15" kindref="member">DagImp::useLegacyImport</ref><sp/>&amp;&amp;<sp/><ref refid="classDagImp_1ab8197c0af5ecad271da496a2f5ac2095" kindref="member">DagImp::detected</ref>.lod);</highlight></codeline>
<codeline lineno="2355"><highlight class="normal"></highlight></codeline>
<codeline lineno="2356"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>CheckDlgButton(hwndDlg,<sp/><ref refid="resource_8h_1a9d8c27492b3468efc9f9d9c3ba210f5e" kindref="member">IDC_IMPORT_DP</ref>,<sp/><ref refid="classDagImp_1a7b2fc6f616381d3743a667637b550f4b" kindref="member">DagImp::checked</ref>.dp);</highlight></codeline>
<codeline lineno="2357"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>EnableWindow(GetDlgItem(hwndDlg,<sp/><ref refid="resource_8h_1a9d8c27492b3468efc9f9d9c3ba210f5e" kindref="member">IDC_IMPORT_DP</ref>),<sp/>!<ref refid="classDagImp_1ae89838cf454485eaab1a6f5b752f4c15" kindref="member">DagImp::useLegacyImport</ref><sp/>&amp;&amp;<sp/><ref refid="classDagImp_1ab8197c0af5ecad271da496a2f5ac2095" kindref="member">DagImp::detected</ref>.dp);</highlight></codeline>
<codeline lineno="2358"><highlight class="normal"></highlight></codeline>
<codeline lineno="2359"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>CheckDlgButton(hwndDlg,<sp/><ref refid="resource_8h_1a6322bcd9958d0205b8504798e7682c56" kindref="member">IDC_IMPORT_DMG</ref>,<sp/><ref refid="classDagImp_1a7b2fc6f616381d3743a667637b550f4b" kindref="member">DagImp::checked</ref>.dmg);</highlight></codeline>
<codeline lineno="2360"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>EnableWindow(GetDlgItem(hwndDlg,<sp/><ref refid="resource_8h_1a6322bcd9958d0205b8504798e7682c56" kindref="member">IDC_IMPORT_DMG</ref>),<sp/>!<ref refid="classDagImp_1ae89838cf454485eaab1a6f5b752f4c15" kindref="member">DagImp::useLegacyImport</ref><sp/>&amp;&amp;<sp/><ref refid="classDagImp_1ab8197c0af5ecad271da496a2f5ac2095" kindref="member">DagImp::detected</ref>.dmg);</highlight></codeline>
<codeline lineno="2361"><highlight class="normal"></highlight></codeline>
<codeline lineno="2362"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>CheckDlgButton(hwndDlg,<sp/><ref refid="resource_8h_1abad6b5a5c1619c41a66cd69f1f67ef02" kindref="member">IDC_IMPORT_DESTR</ref>,<sp/><ref refid="classDagImp_1a7b2fc6f616381d3743a667637b550f4b" kindref="member">DagImp::checked</ref>.destr);</highlight></codeline>
<codeline lineno="2363"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>EnableWindow(GetDlgItem(hwndDlg,<sp/><ref refid="resource_8h_1abad6b5a5c1619c41a66cd69f1f67ef02" kindref="member">IDC_IMPORT_DESTR</ref>),<sp/>!<ref refid="classDagImp_1ae89838cf454485eaab1a6f5b752f4c15" kindref="member">DagImp::useLegacyImport</ref><sp/>&amp;&amp;<sp/><ref refid="classDagImp_1ab8197c0af5ecad271da496a2f5ac2095" kindref="member">DagImp::detected</ref>.destr);</highlight></codeline>
<codeline lineno="2364"><highlight class="normal"></highlight></codeline>
<codeline lineno="2365"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>CheckDlgButton(hwndDlg,<sp/>(<ref refid="classDagImp_1a6a73e019f74e964f8a0121334ffb9903" kindref="member">DagImp::reimportExisting</ref><sp/>?<sp/><ref refid="resource_8h_1a3c186b8cc23d9243cbfc1628022cfb06" kindref="member">IDC_REPLACE_EXISTING_LAYER</ref><sp/>:<sp/><ref refid="resource_8h_1a49180c0940a8073669c4611dd1af6bbe" kindref="member">IDC_RENAME_NEW_LAYER</ref>),<sp/>true);</highlight></codeline>
<codeline lineno="2366"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>EnableWindow(GetDlgItem(hwndDlg,<sp/><ref refid="resource_8h_1a49180c0940a8073669c4611dd1af6bbe" kindref="member">IDC_RENAME_NEW_LAYER</ref>),<sp/>!<ref refid="classDagImp_1ae89838cf454485eaab1a6f5b752f4c15" kindref="member">DagImp::useLegacyImport</ref>);</highlight></codeline>
<codeline lineno="2367"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>EnableWindow(GetDlgItem(hwndDlg,<sp/><ref refid="resource_8h_1a3c186b8cc23d9243cbfc1628022cfb06" kindref="member">IDC_REPLACE_EXISTING_LAYER</ref>),<sp/>!<ref refid="classDagImp_1ae89838cf454485eaab1a6f5b752f4c15" kindref="member">DagImp::useLegacyImport</ref>);</highlight></codeline>
<codeline lineno="2368"><highlight class="normal"></highlight></codeline>
<codeline lineno="2369"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classDagImp_1aab7bf3e54d9079f0425c2bd67c265746" kindref="member">DagImp::tooltipExtender</ref>.RemoveToolTips();</highlight></codeline>
<codeline lineno="2370"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classDagImp_1aab7bf3e54d9079f0425c2bd67c265746" kindref="member">DagImp::tooltipExtender</ref>.SetToolTip(GetDlgItem(hwndDlg,<sp/><ref refid="resource_8h_1aa5895875b53415d8423ca476783c9f4d" kindref="member">IDC_USE_LEGACY_IMPORT</ref>),<sp/>TSTR(_T(</highlight><highlight class="stringliteral">&quot;The<sp/>previous<sp/>import<sp/>method.&quot;</highlight><highlight class="normal">)));</highlight></codeline>
<codeline lineno="2371"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classDagImp_1aab7bf3e54d9079f0425c2bd67c265746" kindref="member">DagImp::tooltipExtender</ref>.SetToolTip(GetDlgItem(hwndDlg,<sp/><ref refid="resource_8h_1add3e571034800bbfd52e5a8c9dc5f703" kindref="member">IDC_IMPORT_LOD</ref>),<sp/>TSTR(_T(</highlight><highlight class="stringliteral">&quot;Import<sp/>\&quot;*.lodNN.dag\&quot;<sp/>files.&quot;</highlight><highlight class="normal">)));</highlight></codeline>
<codeline lineno="2372"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classDagImp_1aab7bf3e54d9079f0425c2bd67c265746" kindref="member">DagImp::tooltipExtender</ref>.SetToolTip(GetDlgItem(hwndDlg,<sp/><ref refid="resource_8h_1a9d8c27492b3468efc9f9d9c3ba210f5e" kindref="member">IDC_IMPORT_DP</ref>),<sp/>TSTR(_T(</highlight><highlight class="stringliteral">&quot;Import<sp/>\&quot;*_dp_NN.lodNN.dag\&quot;<sp/>files.&quot;</highlight><highlight class="normal">)));</highlight></codeline>
<codeline lineno="2373"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classDagImp_1aab7bf3e54d9079f0425c2bd67c265746" kindref="member">DagImp::tooltipExtender</ref>.SetToolTip(GetDlgItem(hwndDlg,<sp/><ref refid="resource_8h_1a6322bcd9958d0205b8504798e7682c56" kindref="member">IDC_IMPORT_DMG</ref>),</highlight></codeline>
<codeline lineno="2374"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TSTR(_T(</highlight><highlight class="stringliteral">&quot;Import<sp/>\&quot;*_dmg.lodNN.dag\&quot;<sp/>and<sp/>\&quot;*_dp_NN_dmg.lodNN.dag\&quot;<sp/>files.&quot;</highlight><highlight class="normal">)));</highlight></codeline>
<codeline lineno="2375"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classDagImp_1aab7bf3e54d9079f0425c2bd67c265746" kindref="member">DagImp::tooltipExtender</ref>.SetToolTip(GetDlgItem(hwndDlg,<sp/><ref refid="resource_8h_1abad6b5a5c1619c41a66cd69f1f67ef02" kindref="member">IDC_IMPORT_DESTR</ref>),</highlight></codeline>
<codeline lineno="2376"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TSTR(_T(</highlight><highlight class="stringliteral">&quot;Import<sp/>\&quot;*_destr.lod00.dag\&quot;<sp/>and<sp/>\&quot;*_dp_NN_destr.lod00.dag\&quot;<sp/>files.&quot;</highlight><highlight class="normal">)));</highlight></codeline>
<codeline lineno="2377"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classDagImp_1aab7bf3e54d9079f0425c2bd67c265746" kindref="member">DagImp::tooltipExtender</ref>.SetToolTip(GetDlgItem(hwndDlg,<sp/><ref refid="resource_8h_1a49180c0940a8073669c4611dd1af6bbe" kindref="member">IDC_RENAME_NEW_LAYER</ref>),</highlight></codeline>
<codeline lineno="2378"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TSTR(_T(</highlight><highlight class="stringliteral">&quot;Generate<sp/>an<sp/>unique<sp/>name<sp/>\&quot;asset_NNN.lods\&quot;<sp/>for<sp/>the<sp/>new<sp/>layer.&quot;</highlight><highlight class="normal">)));</highlight></codeline>
<codeline lineno="2379"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classDagImp_1aab7bf3e54d9079f0425c2bd67c265746" kindref="member">DagImp::tooltipExtender</ref>.SetToolTip(GetDlgItem(hwndDlg,<sp/><ref refid="resource_8h_1a3c186b8cc23d9243cbfc1628022cfb06" kindref="member">IDC_REPLACE_EXISTING_LAYER</ref>),</highlight></codeline>
<codeline lineno="2380"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TSTR(_T(</highlight><highlight class="stringliteral">&quot;Destroy<sp/>nodes<sp/>on<sp/>existing<sp/>layer<sp/>and<sp/>place<sp/>imported<sp/>nodes<sp/>on<sp/>it.&quot;</highlight><highlight class="normal">)));</highlight></codeline>
<codeline lineno="2381"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>SendMessage(<ref refid="classDagImp_1aab7bf3e54d9079f0425c2bd67c265746" kindref="member">DagImp::tooltipExtender</ref>.GetToolTipHWND(),<sp/>TTM_SETDELAYTIME,<sp/>TTDT_AUTOMATIC,<sp/>0);</highlight></codeline>
<codeline lineno="2382"><highlight class="normal"></highlight></codeline>
<codeline lineno="2383"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>HWND<sp/>focused<sp/>=<sp/>GetDlgItem(hwndDlg,<sp/>lParam);</highlight></codeline>
<codeline lineno="2384"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(focused)</highlight></codeline>
<codeline lineno="2385"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SetFocus(focused);</highlight></codeline>
<codeline lineno="2386"><highlight class="normal"></highlight></codeline>
<codeline lineno="2387"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="dagimp_8cpp_1a8036daeeff4e66e0424a344a3ed8da70" kindref="member">update_export_mode</ref>(<ref refid="classDagImp_1ae89838cf454485eaab1a6f5b752f4c15" kindref="member">DagImp::useLegacyImport</ref>);</highlight></codeline>
<codeline lineno="2388"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2389"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>FALSE;</highlight></codeline>
<codeline lineno="2390"><highlight class="normal"></highlight></codeline>
<codeline lineno="2391"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>WM_COMMAND:</highlight></codeline>
<codeline lineno="2392"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(LOWORD(wParam))</highlight></codeline>
<codeline lineno="2393"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2394"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="resource_8h_1aa5895875b53415d8423ca476783c9f4d" kindref="member">IDC_USE_LEGACY_IMPORT</ref>:</highlight></codeline>
<codeline lineno="2395"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classDagImp_1ae89838cf454485eaab1a6f5b752f4c15" kindref="member">DagImp::useLegacyImport</ref><sp/>=<sp/>IsDlgButtonChecked(hwndDlg,<sp/><ref refid="resource_8h_1aa5895875b53415d8423ca476783c9f4d" kindref="member">IDC_USE_LEGACY_IMPORT</ref>);</highlight></codeline>
<codeline lineno="2396"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EnableWindow(GetDlgItem(hwndDlg,<sp/><ref refid="resource_8h_1add3e571034800bbfd52e5a8c9dc5f703" kindref="member">IDC_IMPORT_LOD</ref>),<sp/>!<ref refid="classDagImp_1ae89838cf454485eaab1a6f5b752f4c15" kindref="member">DagImp::useLegacyImport</ref><sp/>&amp;&amp;<sp/><ref refid="classDagImp_1ab8197c0af5ecad271da496a2f5ac2095" kindref="member">DagImp::detected</ref>.lod);</highlight></codeline>
<codeline lineno="2397"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EnableWindow(GetDlgItem(hwndDlg,<sp/><ref refid="resource_8h_1a9d8c27492b3468efc9f9d9c3ba210f5e" kindref="member">IDC_IMPORT_DP</ref>),<sp/>!<ref refid="classDagImp_1ae89838cf454485eaab1a6f5b752f4c15" kindref="member">DagImp::useLegacyImport</ref><sp/>&amp;&amp;<sp/><ref refid="classDagImp_1ab8197c0af5ecad271da496a2f5ac2095" kindref="member">DagImp::detected</ref>.dp);</highlight></codeline>
<codeline lineno="2398"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EnableWindow(GetDlgItem(hwndDlg,<sp/><ref refid="resource_8h_1a6322bcd9958d0205b8504798e7682c56" kindref="member">IDC_IMPORT_DMG</ref>),<sp/>!<ref refid="classDagImp_1ae89838cf454485eaab1a6f5b752f4c15" kindref="member">DagImp::useLegacyImport</ref><sp/>&amp;&amp;<sp/><ref refid="classDagImp_1ab8197c0af5ecad271da496a2f5ac2095" kindref="member">DagImp::detected</ref>.dmg);</highlight></codeline>
<codeline lineno="2399"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EnableWindow(GetDlgItem(hwndDlg,<sp/><ref refid="resource_8h_1abad6b5a5c1619c41a66cd69f1f67ef02" kindref="member">IDC_IMPORT_DESTR</ref>),<sp/>!<ref refid="classDagImp_1ae89838cf454485eaab1a6f5b752f4c15" kindref="member">DagImp::useLegacyImport</ref><sp/>&amp;&amp;<sp/><ref refid="classDagImp_1ab8197c0af5ecad271da496a2f5ac2095" kindref="member">DagImp::detected</ref>.destr);</highlight></codeline>
<codeline lineno="2400"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EnableWindow(GetDlgItem(hwndDlg,<sp/><ref refid="resource_8h_1a49180c0940a8073669c4611dd1af6bbe" kindref="member">IDC_RENAME_NEW_LAYER</ref>),<sp/>!<ref refid="classDagImp_1ae89838cf454485eaab1a6f5b752f4c15" kindref="member">DagImp::useLegacyImport</ref>);</highlight></codeline>
<codeline lineno="2401"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EnableWindow(GetDlgItem(hwndDlg,<sp/><ref refid="resource_8h_1a3c186b8cc23d9243cbfc1628022cfb06" kindref="member">IDC_REPLACE_EXISTING_LAYER</ref>),<sp/>!<ref refid="classDagImp_1ae89838cf454485eaab1a6f5b752f4c15" kindref="member">DagImp::useLegacyImport</ref>);</highlight></codeline>
<codeline lineno="2402"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="dagimp_8cpp_1a8036daeeff4e66e0424a344a3ed8da70" kindref="member">update_export_mode</ref>(<ref refid="classDagImp_1ae89838cf454485eaab1a6f5b752f4c15" kindref="member">DagImp::useLegacyImport</ref>);</highlight></codeline>
<codeline lineno="2403"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2404"><highlight class="normal"></highlight></codeline>
<codeline lineno="2405"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>IDOK:</highlight></codeline>
<codeline lineno="2406"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classDagImp_1a7b2fc6f616381d3743a667637b550f4b" kindref="member">DagImp::checked</ref>.<ref refid="structDagImp_1_1Categories_1a509875fe77af0158bb4bcb366a3f09b4" kindref="member">lod</ref><sp/>=<sp/>IsDlgButtonChecked(hwndDlg,<sp/><ref refid="resource_8h_1add3e571034800bbfd52e5a8c9dc5f703" kindref="member">IDC_IMPORT_LOD</ref>);</highlight></codeline>
<codeline lineno="2407"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classDagImp_1a7b2fc6f616381d3743a667637b550f4b" kindref="member">DagImp::checked</ref>.<ref refid="structDagImp_1_1Categories_1a183c0c95383a5e5c5bd3b325fd30d4e3" kindref="member">dp</ref><sp/>=<sp/>IsDlgButtonChecked(hwndDlg,<sp/><ref refid="resource_8h_1a9d8c27492b3468efc9f9d9c3ba210f5e" kindref="member">IDC_IMPORT_DP</ref>);</highlight></codeline>
<codeline lineno="2408"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classDagImp_1a7b2fc6f616381d3743a667637b550f4b" kindref="member">DagImp::checked</ref>.<ref refid="structDagImp_1_1Categories_1a1e681220bbe07d46e3e84808d4ebc102" kindref="member">dmg</ref><sp/>=<sp/>IsDlgButtonChecked(hwndDlg,<sp/><ref refid="resource_8h_1a6322bcd9958d0205b8504798e7682c56" kindref="member">IDC_IMPORT_DMG</ref>);</highlight></codeline>
<codeline lineno="2409"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classDagImp_1a7b2fc6f616381d3743a667637b550f4b" kindref="member">DagImp::checked</ref>.<ref refid="structDagImp_1_1Categories_1ab947250827de77b24220484843131753" kindref="member">destr</ref><sp/>=<sp/>IsDlgButtonChecked(hwndDlg,<sp/><ref refid="resource_8h_1abad6b5a5c1619c41a66cd69f1f67ef02" kindref="member">IDC_IMPORT_DESTR</ref>);</highlight></codeline>
<codeline lineno="2410"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classDagImp_1a6a73e019f74e964f8a0121334ffb9903" kindref="member">DagImp::reimportExisting</ref><sp/>=<sp/>IsDlgButtonChecked(hwndDlg,<sp/><ref refid="resource_8h_1a3c186b8cc23d9243cbfc1628022cfb06" kindref="member">IDC_REPLACE_EXISTING_LAYER</ref>);</highlight></codeline>
<codeline lineno="2411"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EndDialog(hwndDlg,<sp/>wParam);</highlight></codeline>
<codeline lineno="2412"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>TRUE;</highlight></codeline>
<codeline lineno="2413"><highlight class="normal"></highlight></codeline>
<codeline lineno="2414"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>IDCANCEL:<sp/>EndDialog(hwndDlg,<sp/>wParam);<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>TRUE;</highlight></codeline>
<codeline lineno="2415"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2416"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2417"><highlight class="normal"></highlight></codeline>
<codeline lineno="2418"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>WM_SYSCOMMAND:</highlight></codeline>
<codeline lineno="2419"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((wParam<sp/>&amp;<sp/>0xFFF0)<sp/>==<sp/>SC_CLOSE)</highlight></codeline>
<codeline lineno="2420"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2421"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EndDialog(hwndDlg,<sp/>FALSE);</highlight></codeline>
<codeline lineno="2422"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>TRUE;</highlight></codeline>
<codeline lineno="2423"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2424"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2425"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2426"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>FALSE;</highlight></codeline>
<codeline lineno="2427"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2428"><highlight class="normal"></highlight></codeline>
<codeline lineno="2429"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>TSTR<sp/>filenameToRegex(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TSTR<sp/>&amp;filename,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>dp,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>lods,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>destr,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>dmg,<sp/>TSTR<sp/>&amp;base_name,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>&amp;exact_match)</highlight></codeline>
<codeline lineno="2430"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2431"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dag_length<sp/>=<sp/>4;<sp/></highlight><highlight class="comment">//<sp/>&quot;.dag&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2432"><highlight class="normal"></highlight></codeline>
<codeline lineno="2433"><highlight class="normal"><sp/><sp/>base_name<sp/>=<sp/>_T(</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2434"><highlight class="normal"><sp/><sp/>exact_match<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2435"><highlight class="normal"></highlight></codeline>
<codeline lineno="2436"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>std::wregex<sp/>reg(_T(</highlight><highlight class="stringliteral">&quot;\\.lod\\d\\d\\.dag$&quot;</highlight><highlight class="normal">),<sp/>std::regex_constants::icase);</highlight></codeline>
<codeline lineno="2437"><highlight class="normal"><sp/><sp/>std::wsmatch<sp/>lod_info;</highlight></codeline>
<codeline lineno="2438"><highlight class="normal"><sp/><sp/>std::wstring<sp/>fn<sp/>=<sp/>filename.data();</highlight></codeline>
<codeline lineno="2439"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!std::regex_search(fn,<sp/>lod_info,<sp/>reg))</highlight></codeline>
<codeline lineno="2440"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="2441"><highlight class="normal"><sp/><sp/><sp/><sp/>TSTR<sp/>re;</highlight></codeline>
<codeline lineno="2442"><highlight class="normal"><sp/><sp/><sp/><sp/>re.printf(_T(</highlight><highlight class="stringliteral">&quot;^%s$&quot;</highlight><highlight class="normal">),<sp/>filename);</highlight></codeline>
<codeline lineno="2443"><highlight class="normal"><sp/><sp/><sp/><sp/>exact_match<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2444"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>re;</highlight></codeline>
<codeline lineno="2445"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2446"><highlight class="normal"></highlight></codeline>
<codeline lineno="2447"><highlight class="normal"><sp/><sp/>base_name<sp/>=<sp/>lod_info.prefix().str().data();</highlight></codeline>
<codeline lineno="2448"><highlight class="normal"><sp/><sp/>TSTR<sp/>base_lod<sp/>=<sp/>lod_info[0].str().data();</highlight></codeline>
<codeline lineno="2449"><highlight class="normal"><sp/><sp/>base_lod<sp/>=<sp/>base_lod.Substr(0,<sp/>base_lod.Length()<sp/>-<sp/>dag_length);</highlight></codeline>
<codeline lineno="2450"><highlight class="normal"></highlight></codeline>
<codeline lineno="2451"><highlight class="normal"><sp/><sp/>TSTR<sp/>dp_re<sp/>=<sp/>dp<sp/>?<sp/>_T(</highlight><highlight class="stringliteral">&quot;(_dp_\\d\\d|)&quot;</highlight><highlight class="normal">)<sp/>:<sp/>_T(</highlight><highlight class="stringliteral">&quot;()&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2452"><highlight class="normal"><sp/><sp/>TSTR<sp/>dmg_re<sp/>=<sp/>dmg<sp/>?<sp/>_T(</highlight><highlight class="stringliteral">&quot;(_dmg|)&quot;</highlight><highlight class="normal">)<sp/>:<sp/>_T(</highlight><highlight class="stringliteral">&quot;()&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2453"><highlight class="normal"><sp/><sp/>TSTR<sp/>lods_re<sp/>=<sp/>lods<sp/>?<sp/>_T(</highlight><highlight class="stringliteral">&quot;\\.lod\\d\\d&quot;</highlight><highlight class="normal">)<sp/>:<sp/>base_lod.data();</highlight></codeline>
<codeline lineno="2454"><highlight class="normal"></highlight></codeline>
<codeline lineno="2455"><highlight class="normal"><sp/><sp/>TSTR<sp/>variants_re;</highlight></codeline>
<codeline lineno="2456"><highlight class="normal"><sp/><sp/>variants_re.printf(_T(</highlight><highlight class="stringliteral">&quot;^%s%s%s%s\\.dag$&quot;</highlight><highlight class="normal">),<sp/>base_name,<sp/>dp_re,<sp/>dmg_re,<sp/>lods_re);</highlight></codeline>
<codeline lineno="2457"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!destr)</highlight></codeline>
<codeline lineno="2458"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>variants_re;</highlight></codeline>
<codeline lineno="2459"><highlight class="normal"></highlight></codeline>
<codeline lineno="2460"><highlight class="normal"><sp/><sp/>TSTR<sp/>destr_re;</highlight></codeline>
<codeline lineno="2461"><highlight class="normal"><sp/><sp/>destr_re.printf(_T(</highlight><highlight class="stringliteral">&quot;^%s%s%s_destr\\.lod00\\.dag$&quot;</highlight><highlight class="normal">),<sp/>base_name,<sp/>dp_re,<sp/>dmg_re);</highlight></codeline>
<codeline lineno="2462"><highlight class="normal"></highlight></codeline>
<codeline lineno="2463"><highlight class="normal"><sp/><sp/>TSTR<sp/>combined_re;</highlight></codeline>
<codeline lineno="2464"><highlight class="normal"><sp/><sp/>combined_re.printf(_T(</highlight><highlight class="stringliteral">&quot;(%s|%s)&quot;</highlight><highlight class="normal">),<sp/>variants_re,<sp/>destr_re);</highlight></codeline>
<codeline lineno="2465"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>combined_re;</highlight></codeline>
<codeline lineno="2466"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2467"><highlight class="normal"></highlight></codeline>
<codeline lineno="2468"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>deleteNode(INode<sp/>*node)</highlight></codeline>
<codeline lineno="2469"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2470"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(node-&gt;NumChildren()<sp/>&gt;<sp/>0)</highlight></codeline>
<codeline lineno="2471"><highlight class="normal"><sp/><sp/><sp/><sp/>deleteNode(node-&gt;GetChildNode(0));</highlight></codeline>
<codeline lineno="2472"><highlight class="normal"></highlight></codeline>
<codeline lineno="2473"><highlight class="normal"><sp/><sp/>GetCOREInterface()-&gt;DeleteNode(node,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2474"><highlight class="normal">};</highlight></codeline>
<codeline lineno="2475"><highlight class="normal"></highlight></codeline>
<codeline lineno="2476"><highlight class="normal"></highlight><highlight class="comment">//<sp/>asset.lodXX<sp/>--&gt;<sp/>asset_001.lodXX</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2477"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>TSTR<sp/>makeMangledLayerName(TSTR<sp/>name)<sp/></highlight><highlight class="comment">//<sp/>by<sp/>val</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2478"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2479"><highlight class="normal"><sp/><sp/>ILayerManager<sp/>*manager<sp/>=<sp/>GetCOREInterface13()-&gt;GetLayerManager();</highlight></codeline>
<codeline lineno="2480"><highlight class="normal"></highlight></codeline>
<codeline lineno="2481"><highlight class="normal"><sp/><sp/>ILayer<sp/>*existingLayer<sp/>=<sp/>manager-&gt;GetLayer(name);</highlight></codeline>
<codeline lineno="2482"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!existingLayer)</highlight></codeline>
<codeline lineno="2483"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>name;</highlight></codeline>
<codeline lineno="2484"><highlight class="normal"></highlight></codeline>
<codeline lineno="2485"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>found<sp/>=<sp/>name.first(_T(</highlight><highlight class="charliteral">&apos;.&apos;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="2486"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(found<sp/>==<sp/>-1)</highlight></codeline>
<codeline lineno="2487"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="2488"><highlight class="normal"><sp/><sp/><sp/><sp/>TSTR<sp/>basename<sp/>=<sp/>name;</highlight></codeline>
<codeline lineno="2489"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>num<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="2490"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2491"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2492"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>name.printf(_T(</highlight><highlight class="stringliteral">&quot;%s_%03d&quot;</highlight><highlight class="normal">),<sp/>basename,<sp/>num++);</highlight></codeline>
<codeline lineno="2493"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(manager-&gt;GetLayer(name));</highlight></codeline>
<codeline lineno="2494"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>name;</highlight></codeline>
<codeline lineno="2495"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2496"><highlight class="normal"></highlight></codeline>
<codeline lineno="2497"><highlight class="normal"><sp/><sp/>TSTR<sp/>basename<sp/>=<sp/>name.Substr(0,<sp/>found);</highlight></codeline>
<codeline lineno="2498"><highlight class="normal"><sp/><sp/>TSTR<sp/>suffix<sp/>=<sp/>name.Substr(found,<sp/>name.length()<sp/>-<sp/>found);</highlight></codeline>
<codeline lineno="2499"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>num<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="2500"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2501"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="2502"><highlight class="normal"><sp/><sp/><sp/><sp/>name.printf(_T(</highlight><highlight class="stringliteral">&quot;%s_%03d%s&quot;</highlight><highlight class="normal">),<sp/>basename,<sp/>num++,<sp/>suffix);</highlight></codeline>
<codeline lineno="2503"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(manager-&gt;GetLayer(name));</highlight></codeline>
<codeline lineno="2504"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>name;</highlight></codeline>
<codeline lineno="2505"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2506"><highlight class="normal"></highlight></codeline>
<codeline lineno="2507" refid="structResolvedLayer" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structResolvedLayer" kindref="compound">ResolvedLayer</ref></highlight></codeline>
<codeline lineno="2508"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2509"><highlight class="normal"><sp/><sp/>ILayer<sp/>*<ref refid="structResolvedLayer_1afba1c104ce9fe1188941f1a1bbe3eca9" kindref="member">layer</ref>;</highlight></codeline>
<codeline lineno="2510"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TSTR<sp/><ref refid="structResolvedLayer_1a8f9b461b2beca88642a04443f742211a" kindref="member">name</ref>;</highlight></codeline>
<codeline lineno="2511"><highlight class="normal"></highlight></codeline>
<codeline lineno="2512"><highlight class="normal"><sp/><sp/><ref refid="structResolvedLayer" kindref="compound">ResolvedLayer</ref>(ILayer<sp/>*l,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TSTR<sp/>&amp;n)<sp/>:<sp/><ref refid="structResolvedLayer_1afba1c104ce9fe1188941f1a1bbe3eca9" kindref="member">layer</ref>(l),<sp/><ref refid="structResolvedLayer_1a8f9b461b2beca88642a04443f742211a" kindref="member">name</ref>(n)<sp/>{}</highlight></codeline>
<codeline lineno="2513"><highlight class="normal">};</highlight></codeline>
<codeline lineno="2514"><highlight class="normal"></highlight></codeline>
<codeline lineno="2515"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structResolvedLayer" kindref="compound">ResolvedLayer</ref><sp/>resolveLayerNameCollision(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TSTR<sp/>&amp;layerName)</highlight></codeline>
<codeline lineno="2516"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2517"><highlight class="normal"><sp/><sp/>ILayerManager<sp/>*manager<sp/>=<sp/>GetCOREInterface13()-&gt;GetLayerManager();</highlight></codeline>
<codeline lineno="2518"><highlight class="normal"><sp/><sp/>assert(manager);</highlight></codeline>
<codeline lineno="2519"><highlight class="normal"></highlight></codeline>
<codeline lineno="2520"><highlight class="normal"><sp/><sp/>ILayer<sp/>*layer<sp/>=<sp/>manager-&gt;GetLayer(layerName);</highlight></codeline>
<codeline lineno="2521"><highlight class="normal"></highlight></codeline>
<codeline lineno="2522"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>no<sp/>collision,<sp/>just<sp/>create<sp/>a<sp/>new<sp/>layer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2523"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!layer)</highlight></codeline>
<codeline lineno="2524"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="2525"><highlight class="normal"><sp/><sp/><sp/><sp/>layer<sp/>=<sp/>manager-&gt;CreateLayer(</highlight><highlight class="keyword">const_cast&lt;</highlight><highlight class="normal">MSTR<sp/>&amp;</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(layerName));<sp/></highlight><highlight class="comment">//<sp/>MAX2016<sp/>has<sp/>non-const<sp/>here</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2526"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(layer)</highlight></codeline>
<codeline lineno="2527"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2528"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>manager-&gt;AddLayer(layer);</highlight></codeline>
<codeline lineno="2529"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>manager-&gt;SetCurrentLayer(layer-&gt;GetName());</highlight></codeline>
<codeline lineno="2530"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2531"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structResolvedLayer" kindref="compound">ResolvedLayer</ref>(layer,<sp/>layerName);</highlight></codeline>
<codeline lineno="2532"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2533"><highlight class="normal"></highlight></codeline>
<codeline lineno="2534"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>collision:<sp/>replace<sp/>existing<sp/>layer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2535"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classDagImp_1a6a73e019f74e964f8a0121334ffb9903" kindref="member">DagImp::reimportExisting</ref>)</highlight></codeline>
<codeline lineno="2536"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="2537"><highlight class="normal"><sp/><sp/><sp/><sp/>manager-&gt;SetCurrentLayer(layer-&gt;GetName());</highlight></codeline>
<codeline lineno="2538"><highlight class="normal"></highlight></codeline>
<codeline lineno="2539"><highlight class="normal"><sp/><sp/><sp/><sp/>ILayerProperties<sp/>*layerProp<sp/>=<sp/>(ILayerProperties<sp/>*)layer-&gt;GetInterface(LAYERPROPERTIES_INTERFACE);</highlight></codeline>
<codeline lineno="2540"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(layerProp);</highlight></codeline>
<codeline lineno="2541"><highlight class="normal"><sp/><sp/><sp/><sp/>Tab&lt;INode<sp/>*&gt;<sp/>nodes;</highlight></codeline>
<codeline lineno="2542"><highlight class="normal"><sp/><sp/><sp/><sp/>layerProp-&gt;Nodes(nodes);</highlight></codeline>
<codeline lineno="2543"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>nodes.Count();<sp/>++i)</highlight></codeline>
<codeline lineno="2544"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>deleteNode(nodes[i]);</highlight></codeline>
<codeline lineno="2545"><highlight class="normal"></highlight></codeline>
<codeline lineno="2546"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structResolvedLayer" kindref="compound">ResolvedLayer</ref>(layer,<sp/>layerName);</highlight></codeline>
<codeline lineno="2547"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2548"><highlight class="normal"></highlight></codeline>
<codeline lineno="2549"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>collision:<sp/>create<sp/>a<sp/>new<sp/>layer<sp/>with<sp/>mangled<sp/>name</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2550"><highlight class="normal"><sp/><sp/>TSTR<sp/>mangledLayerName<sp/>=<sp/>makeMangledLayerName(layerName);</highlight></codeline>
<codeline lineno="2551"><highlight class="normal"><sp/><sp/>layer<sp/>=<sp/>manager-&gt;CreateLayer(mangledLayerName);</highlight></codeline>
<codeline lineno="2552"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(layer)</highlight></codeline>
<codeline lineno="2553"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="2554"><highlight class="normal"><sp/><sp/><sp/><sp/>manager-&gt;AddLayer(layer);</highlight></codeline>
<codeline lineno="2555"><highlight class="normal"><sp/><sp/><sp/><sp/>manager-&gt;SetCurrentLayer(layer-&gt;GetName());</highlight></codeline>
<codeline lineno="2556"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2557"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structResolvedLayer" kindref="compound">ResolvedLayer</ref>(layer,<sp/>mangledLayerName);</highlight></codeline>
<codeline lineno="2558"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2559"><highlight class="normal"></highlight></codeline>
<codeline lineno="2560"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>DagImp::makeHierLayer(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;TSTR&gt;<sp/>&amp;fnames,<sp/>ImpInterface<sp/>*ii,<sp/>Interface<sp/>*ip,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>nomsg)</highlight></codeline>
<codeline lineno="2561"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2562"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dag_length<sp/>=<sp/>4;<sp/></highlight><highlight class="comment">//<sp/>&quot;.dag&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2563"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ext_length<sp/>=<sp/>6;<sp/></highlight><highlight class="comment">//<sp/>&quot;.lodNN&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2564"><highlight class="normal"></highlight></codeline>
<codeline lineno="2565"><highlight class="normal"><sp/><sp/>ILayerManager<sp/>*manager<sp/>=<sp/>GetCOREInterface13()-&gt;GetLayerManager();</highlight></codeline>
<codeline lineno="2566"><highlight class="normal"></highlight></codeline>
<codeline lineno="2567"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TSTR<sp/>&amp;fn<sp/>:<sp/>fnames)</highlight></codeline>
<codeline lineno="2568"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="2569"><highlight class="normal"><sp/><sp/><sp/><sp/>TSTR<sp/>basename<sp/>=<sp/><ref refid="common_8cpp_1ace8247bb8d3b7d8c28336a7ddfb0e2da" kindref="member">extract_basename</ref>(fn);</highlight></codeline>
<codeline lineno="2570"><highlight class="normal"><sp/><sp/><sp/><sp/>TSTR<sp/>layerName<sp/>=<sp/>basename.Substr(0,<sp/>basename.length()<sp/>-<sp/>dag_length);</highlight></codeline>
<codeline lineno="2571"><highlight class="normal"></highlight></codeline>
<codeline lineno="2572"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structResolvedLayer" kindref="compound">ResolvedLayer</ref><sp/>resolved<sp/>=<sp/>resolveLayerNameCollision(layerName);</highlight></codeline>
<codeline lineno="2573"><highlight class="normal"><sp/><sp/><sp/><sp/>ILayer<sp/>*subLayer<sp/>=<sp/>resolved.<ref refid="structResolvedLayer_1afba1c104ce9fe1188941f1a1bbe3eca9" kindref="member">layer</ref>;</highlight></codeline>
<codeline lineno="2574"><highlight class="normal"><sp/><sp/><sp/><sp/>layerName<sp/>=<sp/>resolved.<ref refid="structResolvedLayer_1a8f9b461b2beca88642a04443f742211a" kindref="member">name</ref>;</highlight></codeline>
<codeline lineno="2575"><highlight class="normal"></highlight></codeline>
<codeline lineno="2576"><highlight class="normal"><sp/><sp/><sp/><sp/>TSTR<sp/>root_layerName<sp/>=<sp/>layerName.Substr(0,<sp/>layerName.length()<sp/>-<sp/>ext_length)<sp/>+<sp/>_T(</highlight><highlight class="stringliteral">&quot;.lods&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2577"><highlight class="normal"><sp/><sp/><sp/><sp/>ILayer<sp/>*rootLayer<sp/>=<sp/>manager-&gt;GetLayer(root_layerName);</highlight></codeline>
<codeline lineno="2578"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>rootLayerJustCreated<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2579"><highlight class="normal"></highlight></codeline>
<codeline lineno="2580"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!rootLayer)</highlight></codeline>
<codeline lineno="2581"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2582"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structResolvedLayer" kindref="compound">ResolvedLayer</ref><sp/>root_resolved<sp/>=<sp/>resolveLayerNameCollision(root_layerName);</highlight></codeline>
<codeline lineno="2583"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>rootLayer<sp/>=<sp/>root_resolved.<ref refid="structResolvedLayer_1afba1c104ce9fe1188941f1a1bbe3eca9" kindref="member">layer</ref>;</highlight></codeline>
<codeline lineno="2584"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>root_layerName<sp/>=<sp/>root_resolved.<ref refid="structResolvedLayer_1a8f9b461b2beca88642a04443f742211a" kindref="member">name</ref>;</highlight></codeline>
<codeline lineno="2585"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>rootLayerJustCreated<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2586"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2587"><highlight class="normal"></highlight></codeline>
<codeline lineno="2588"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(rootLayer<sp/>&amp;&amp;<sp/>subLayer)</highlight></codeline>
<codeline lineno="2589"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>subLayer-&gt;SetParentLayer(rootLayer);</highlight></codeline>
<codeline lineno="2590"><highlight class="normal"></highlight></codeline>
<codeline lineno="2591"><highlight class="normal"><sp/><sp/><sp/><sp/>manager-&gt;SetCurrentLayer(layerName);</highlight></codeline>
<codeline lineno="2592"><highlight class="normal"></highlight></codeline>
<codeline lineno="2593"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="classDagImp_1a1d928bae92dbdbb33e0881d947a9913b" kindref="member">doImportOne</ref>(fn,<sp/>ii,<sp/>ip,<sp/>nomsg))</highlight></codeline>
<codeline lineno="2594"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2595"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>manager-&gt;DeleteLayer(layerName);</highlight></codeline>
<codeline lineno="2596"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(rootLayerJustCreated)</highlight></codeline>
<codeline lineno="2597"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>manager-&gt;DeleteLayer(root_layerName);</highlight></codeline>
<codeline lineno="2598"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>DebugPrint(_T(</highlight><highlight class="stringliteral">&quot;import<sp/>error<sp/>&apos;%s&apos;\n&quot;</highlight><highlight class="normal">),<sp/>fn);</highlight></codeline>
<codeline lineno="2599"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2600"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2601"><highlight class="normal"><sp/><sp/>manager-&gt;SetCurrentLayer();</highlight></codeline>
<codeline lineno="2602"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2603"><highlight class="normal"></highlight></codeline>
<codeline lineno="2604"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>DagImp::makeHierLayer(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TSTR<sp/>&amp;fname,<sp/>ImpInterface<sp/>*ii,<sp/>Interface<sp/>*ip,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>nomsg)</highlight></codeline>
<codeline lineno="2605"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2606"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dag_length<sp/>=<sp/>4;<sp/></highlight><highlight class="comment">//<sp/>&quot;.dag&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2607"><highlight class="normal"></highlight></codeline>
<codeline lineno="2608"><highlight class="normal"><sp/><sp/>ILayerManager<sp/>*manager<sp/>=<sp/>GetCOREInterface13()-&gt;GetLayerManager();</highlight></codeline>
<codeline lineno="2609"><highlight class="normal"></highlight></codeline>
<codeline lineno="2610"><highlight class="normal"><sp/><sp/>TSTR<sp/>basename<sp/>=<sp/><ref refid="common_8cpp_1ace8247bb8d3b7d8c28336a7ddfb0e2da" kindref="member">extract_basename</ref>(fname);</highlight></codeline>
<codeline lineno="2611"><highlight class="normal"><sp/><sp/>TSTR<sp/>layerName<sp/>=<sp/>basename.Substr(0,<sp/>basename.length()<sp/>-<sp/>dag_length);</highlight></codeline>
<codeline lineno="2612"><highlight class="normal"></highlight></codeline>
<codeline lineno="2613"><highlight class="normal"><sp/><sp/><ref refid="structResolvedLayer" kindref="compound">ResolvedLayer</ref><sp/>resolved<sp/>=<sp/>resolveLayerNameCollision(layerName);</highlight></codeline>
<codeline lineno="2614"><highlight class="normal"><sp/><sp/>ILayer<sp/>*rootLayer<sp/>=<sp/>resolved.<ref refid="structResolvedLayer_1afba1c104ce9fe1188941f1a1bbe3eca9" kindref="member">layer</ref>;</highlight></codeline>
<codeline lineno="2615"><highlight class="normal"><sp/><sp/>layerName<sp/>=<sp/>resolved.<ref refid="structResolvedLayer_1a8f9b461b2beca88642a04443f742211a" kindref="member">name</ref>;</highlight></codeline>
<codeline lineno="2616"><highlight class="normal"></highlight></codeline>
<codeline lineno="2617"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="classDagImp_1a1d928bae92dbdbb33e0881d947a9913b" kindref="member">doImportOne</ref>(fname,<sp/>ii,<sp/>ip,<sp/>nomsg))</highlight></codeline>
<codeline lineno="2618"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="2619"><highlight class="normal"><sp/><sp/><sp/><sp/>manager-&gt;DeleteLayer(layerName);</highlight></codeline>
<codeline lineno="2620"><highlight class="normal"><sp/><sp/><sp/><sp/>DebugPrint(_T(</highlight><highlight class="stringliteral">&quot;import<sp/>error<sp/>&apos;%s&apos;\n&quot;</highlight><highlight class="normal">),<sp/>fname);</highlight></codeline>
<codeline lineno="2621"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2622"><highlight class="normal"></highlight></codeline>
<codeline lineno="2623"><highlight class="normal"><sp/><sp/>manager-&gt;SetCurrentLayer();</highlight></codeline>
<codeline lineno="2624"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2625"><highlight class="normal"></highlight></codeline>
<codeline lineno="2626"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>DagImp::doHierImport(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TSTR<sp/>&amp;fname,<sp/>ImpInterface<sp/>*ii,<sp/>Interface<sp/>*ip,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>nomsg)</highlight></codeline>
<codeline lineno="2627"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2628"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>show<sp/>UI<sp/>even<sp/>on<sp/>drag&amp;drop</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2629"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="classDagImp_1ab1597f608c0098f1df0acf54f9ca1b17" kindref="member">nonInteractive</ref>)</highlight></codeline>
<codeline lineno="2630"><highlight class="normal"><sp/><sp/><sp/><sp/>nomsg<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2631"><highlight class="normal"></highlight></codeline>
<codeline lineno="2632"><highlight class="normal"><sp/><sp/>TSTR<sp/>dir,<sp/>filename,<sp/>ext;</highlight></codeline>
<codeline lineno="2633"><highlight class="normal"><sp/><sp/>SplitFilename(fname,<sp/>&amp;dir,<sp/>&amp;filename,<sp/>&amp;ext);</highlight></codeline>
<codeline lineno="2634"><highlight class="normal"><sp/><sp/>filename.Append(ext);</highlight></codeline>
<codeline lineno="2635"><highlight class="normal"></highlight></codeline>
<codeline lineno="2636"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>investigate<sp/>all<sp/>files<sp/>to<sp/>hilite<sp/>UI<sp/>options</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2637"><highlight class="normal"><sp/><sp/>TSTR<sp/>basename;</highlight></codeline>
<codeline lineno="2638"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>exact_match;</highlight></codeline>
<codeline lineno="2639"><highlight class="normal"><sp/><sp/>TSTR<sp/>rex<sp/>=<sp/>filenameToRegex(filename,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/>basename,<sp/>exact_match);</highlight></codeline>
<codeline lineno="2640"><highlight class="normal"><sp/><sp/>std::vector&lt;TSTR&gt;<sp/>files<sp/>=<sp/>files_include_re(<ref refid="common_8cpp_1a83c0e73436ecc6fe3df3f4b066604a80" kindref="member">glob</ref>(dir,<sp/><ref refid="classDagImp_1aed5e30f8490310f5b2b512ea7f98587e" kindref="member">searchInSubfolders</ref>),<sp/>rex);</highlight></codeline>
<codeline lineno="2641"><highlight class="normal"></highlight></codeline>
<codeline lineno="2642"><highlight class="normal"><sp/><sp/>TSTR<sp/>lod_re;</highlight></codeline>
<codeline lineno="2643"><highlight class="normal"><sp/><sp/>lod_re.printf(_T(</highlight><highlight class="stringliteral">&quot;^%s\\.lod\\d\\d\\.dag$&quot;</highlight><highlight class="normal">),<sp/>basename);</highlight></codeline>
<codeline lineno="2644"><highlight class="normal"><sp/><sp/><ref refid="classDagImp_1ab8197c0af5ecad271da496a2f5ac2095" kindref="member">detected</ref>.<ref refid="structDagImp_1_1Categories_1a509875fe77af0158bb4bcb366a3f09b4" kindref="member">lod</ref><sp/>=<sp/>probe_match_re(files,<sp/>lod_re);</highlight></codeline>
<codeline lineno="2645"><highlight class="normal"></highlight></codeline>
<codeline lineno="2646"><highlight class="normal"><sp/><sp/>TSTR<sp/>dmg_re;</highlight></codeline>
<codeline lineno="2647"><highlight class="normal"><sp/><sp/>dmg_re.printf(_T(</highlight><highlight class="stringliteral">&quot;^%s_dmg\\.lod\\d\\d\\.dag$&quot;</highlight><highlight class="normal">),<sp/>basename);</highlight></codeline>
<codeline lineno="2648"><highlight class="normal"><sp/><sp/><ref refid="classDagImp_1ab8197c0af5ecad271da496a2f5ac2095" kindref="member">detected</ref>.<ref refid="structDagImp_1_1Categories_1a1e681220bbe07d46e3e84808d4ebc102" kindref="member">dmg</ref><sp/>=<sp/>probe_match_re(files,<sp/>dmg_re);</highlight></codeline>
<codeline lineno="2649"><highlight class="normal"></highlight></codeline>
<codeline lineno="2650"><highlight class="normal"><sp/><sp/>TSTR<sp/>destr_re;</highlight></codeline>
<codeline lineno="2651"><highlight class="normal"><sp/><sp/>destr_re.printf(_T(</highlight><highlight class="stringliteral">&quot;^%s_destr\\.lod00\\.dag$&quot;</highlight><highlight class="normal">),<sp/>basename);</highlight></codeline>
<codeline lineno="2652"><highlight class="normal"><sp/><sp/><ref refid="classDagImp_1ab8197c0af5ecad271da496a2f5ac2095" kindref="member">detected</ref>.<ref refid="structDagImp_1_1Categories_1ab947250827de77b24220484843131753" kindref="member">destr</ref><sp/>=<sp/>probe_match_re(files,<sp/>destr_re);</highlight></codeline>
<codeline lineno="2653"><highlight class="normal"></highlight></codeline>
<codeline lineno="2654"><highlight class="normal"><sp/><sp/>TSTR<sp/>dp_re;</highlight></codeline>
<codeline lineno="2655"><highlight class="normal"><sp/><sp/>dp_re.printf(_T(</highlight><highlight class="stringliteral">&quot;^%s_dp_\\d\\d\\.lod\\d\\d\\.dag$&quot;</highlight><highlight class="normal">),<sp/>basename);</highlight></codeline>
<codeline lineno="2656"><highlight class="normal"><sp/><sp/><ref refid="classDagImp_1ab8197c0af5ecad271da496a2f5ac2095" kindref="member">detected</ref>.<ref refid="structDagImp_1_1Categories_1a183c0c95383a5e5c5bd3b325fd30d4e3" kindref="member">dp</ref><sp/>=<sp/>probe_match_re(files,<sp/>dp_re);</highlight></codeline>
<codeline lineno="2657"><highlight class="normal"></highlight></codeline>
<codeline lineno="2658"><highlight class="normal"><sp/><sp/>TSTR<sp/>dp_dmg_re;</highlight></codeline>
<codeline lineno="2659"><highlight class="normal"><sp/><sp/>dp_dmg_re.printf(_T(</highlight><highlight class="stringliteral">&quot;^%s_dp_\\d\\d_dmg\\.lod\\d\\d\\.dag$&quot;</highlight><highlight class="normal">),<sp/>basename);</highlight></codeline>
<codeline lineno="2660"><highlight class="normal"><sp/><sp/><ref refid="classDagImp_1ab8197c0af5ecad271da496a2f5ac2095" kindref="member">detected</ref>.<ref refid="structDagImp_1_1Categories_1a1e681220bbe07d46e3e84808d4ebc102" kindref="member">dmg</ref><sp/>|=<sp/>probe_match_re(files,<sp/>dp_dmg_re);</highlight></codeline>
<codeline lineno="2661"><highlight class="normal"></highlight></codeline>
<codeline lineno="2662"><highlight class="normal"><sp/><sp/>TSTR<sp/>dp_destr_re;</highlight></codeline>
<codeline lineno="2663"><highlight class="normal"><sp/><sp/>dp_destr_re.printf(_T(</highlight><highlight class="stringliteral">&quot;^%s_dp_\\d\\d_destr\\.lod\\d\\d\\.dag$&quot;</highlight><highlight class="normal">),<sp/>basename);</highlight></codeline>
<codeline lineno="2664"><highlight class="normal"><sp/><sp/><ref refid="classDagImp_1ab8197c0af5ecad271da496a2f5ac2095" kindref="member">detected</ref>.<ref refid="structDagImp_1_1Categories_1ab947250827de77b24220484843131753" kindref="member">destr</ref><sp/>|=<sp/>probe_match_re(files,<sp/>dp_destr_re);</highlight></codeline>
<codeline lineno="2665"><highlight class="normal"></highlight></codeline>
<codeline lineno="2666"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!nomsg)</highlight></codeline>
<codeline lineno="2667"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="2668"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classDagImp_1ae89838cf454485eaab1a6f5b752f4c15" kindref="member">DagImp::useLegacyImport</ref><sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2669"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(IDOK<sp/>!=<sp/>DialogBoxParam(<ref refid="dagor_8h_1a74029128723095e7bf00a71d46af8b24" kindref="member">hInstance</ref>,<sp/>MAKEINTRESOURCE(<ref refid="resource_8h_1a3f8e47d1db97967efc968387e92c2b71" kindref="member">IDD_IMPORT</ref>),<sp/>NULL,<sp/>(DLGPROC)ImportOptDlgProc,<sp/>(LPARAM)IDOK))</highlight></codeline>
<codeline lineno="2670"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="2671"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2672"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classDagImp_1ae89838cf454485eaab1a6f5b752f4c15" kindref="member">DagImp::useLegacyImport</ref>)</highlight></codeline>
<codeline lineno="2673"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="2674"><highlight class="normal"></highlight></codeline>
<codeline lineno="2675"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>get<sp/>proper<sp/>list<sp/>of<sp/>files<sp/>based<sp/>on<sp/>actual<sp/>user&apos;s<sp/>choice</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2676"><highlight class="normal"><sp/><sp/>rex<sp/>=<sp/>filenameToRegex(filename,<sp/><ref refid="classDagImp_1a7b2fc6f616381d3743a667637b550f4b" kindref="member">checked</ref>.<ref refid="structDagImp_1_1Categories_1a183c0c95383a5e5c5bd3b325fd30d4e3" kindref="member">dp</ref>,<sp/><ref refid="classDagImp_1a7b2fc6f616381d3743a667637b550f4b" kindref="member">checked</ref>.<ref refid="structDagImp_1_1Categories_1a509875fe77af0158bb4bcb366a3f09b4" kindref="member">lod</ref>,<sp/><ref refid="classDagImp_1a7b2fc6f616381d3743a667637b550f4b" kindref="member">checked</ref>.<ref refid="structDagImp_1_1Categories_1ab947250827de77b24220484843131753" kindref="member">destr</ref>,<sp/><ref refid="classDagImp_1a7b2fc6f616381d3743a667637b550f4b" kindref="member">checked</ref>.<ref refid="structDagImp_1_1Categories_1a1e681220bbe07d46e3e84808d4ebc102" kindref="member">dmg</ref>,<sp/>basename,<sp/>exact_match);</highlight></codeline>
<codeline lineno="2677"><highlight class="normal"><sp/><sp/>files<sp/>=<sp/>files_include_re(<ref refid="common_8cpp_1a83c0e73436ecc6fe3df3f4b066604a80" kindref="member">glob</ref>(dir,<sp/><ref refid="classDagImp_1aed5e30f8490310f5b2b512ea7f98587e" kindref="member">searchInSubfolders</ref>),<sp/>rex);</highlight></codeline>
<codeline lineno="2678"><highlight class="normal"></highlight></codeline>
<codeline lineno="2679"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(exact_match)</highlight></codeline>
<codeline lineno="2680"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="2681"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(files.size())</highlight></codeline>
<codeline lineno="2682"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2683"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>makeHierLayer(files[0],<sp/>ii,<sp/>ip,<sp/>nomsg);</highlight></codeline>
<codeline lineno="2684"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="2685"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2686"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="2687"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2688"><highlight class="normal"></highlight></codeline>
<codeline lineno="2689"><highlight class="normal"><sp/><sp/>std::vector&lt;TSTR&gt;<sp/>layer_files;</highlight></codeline>
<codeline lineno="2690"><highlight class="normal"><sp/><sp/>layer_files.reserve(32);</highlight></codeline>
<codeline lineno="2691"><highlight class="normal"></highlight></codeline>
<codeline lineno="2692"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classDagImp_1a7b2fc6f616381d3743a667637b550f4b" kindref="member">checked</ref>.<ref refid="structDagImp_1_1Categories_1a509875fe77af0158bb4bcb366a3f09b4" kindref="member">lod</ref>)</highlight></codeline>
<codeline lineno="2693"><highlight class="normal"><sp/><sp/><sp/><sp/>layer_files<sp/>=<sp/>files_include_re(files,<sp/>lod_re);</highlight></codeline>
<codeline lineno="2694"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2695"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="2696"><highlight class="normal"><sp/><sp/><sp/><sp/>layer_files.clear();</highlight></codeline>
<codeline lineno="2697"><highlight class="normal"><sp/><sp/><sp/><sp/>layer_files.push_back(dir<sp/>+<sp/>TSTR(_T(</highlight><highlight class="stringliteral">&quot;\\&quot;</highlight><highlight class="normal">))<sp/>+<sp/>filename);</highlight></codeline>
<codeline lineno="2698"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2699"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!layer_files.empty())</highlight></codeline>
<codeline lineno="2700"><highlight class="normal"><sp/><sp/><sp/><sp/>makeHierLayer(layer_files,<sp/>ii,<sp/>ip,<sp/>nomsg);</highlight></codeline>
<codeline lineno="2701"><highlight class="normal"></highlight></codeline>
<codeline lineno="2702"><highlight class="normal"><sp/><sp/>layer_files<sp/>=<sp/>files_include_re(files,<sp/>dmg_re);</highlight></codeline>
<codeline lineno="2703"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!layer_files.empty())</highlight></codeline>
<codeline lineno="2704"><highlight class="normal"><sp/><sp/><sp/><sp/>makeHierLayer(layer_files,<sp/>ii,<sp/>ip,<sp/>nomsg);</highlight></codeline>
<codeline lineno="2705"><highlight class="normal"></highlight></codeline>
<codeline lineno="2706"><highlight class="normal"><sp/><sp/>layer_files<sp/>=<sp/>files_include_re(files,<sp/>destr_re);</highlight></codeline>
<codeline lineno="2707"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!layer_files.empty())</highlight></codeline>
<codeline lineno="2708"><highlight class="normal"><sp/><sp/><sp/><sp/>makeHierLayer(layer_files,<sp/>ii,<sp/>ip,<sp/>nomsg);</highlight></codeline>
<codeline lineno="2709"><highlight class="normal"></highlight></codeline>
<codeline lineno="2710"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>100;<sp/>++i)</highlight></codeline>
<codeline lineno="2711"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="2712"><highlight class="normal"><sp/><sp/><sp/><sp/>TSTR<sp/>re;</highlight></codeline>
<codeline lineno="2713"><highlight class="normal"></highlight></codeline>
<codeline lineno="2714"><highlight class="normal"><sp/><sp/><sp/><sp/>re.printf(_T(</highlight><highlight class="stringliteral">&quot;^%s_dp_%02d.lod\\d\\d\\.dag$&quot;</highlight><highlight class="normal">),<sp/>basename,<sp/>i);</highlight></codeline>
<codeline lineno="2715"><highlight class="normal"><sp/><sp/><sp/><sp/>layer_files<sp/>=<sp/>files_include_re(files,<sp/>re);</highlight></codeline>
<codeline lineno="2716"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!layer_files.empty())</highlight></codeline>
<codeline lineno="2717"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>makeHierLayer(layer_files,<sp/>ii,<sp/>ip,<sp/>nomsg);</highlight></codeline>
<codeline lineno="2718"><highlight class="normal"></highlight></codeline>
<codeline lineno="2719"><highlight class="normal"><sp/><sp/><sp/><sp/>re.printf(_T(</highlight><highlight class="stringliteral">&quot;^%s_dp_%02d_dmg.lod\\d\\d\\.dag$&quot;</highlight><highlight class="normal">),<sp/>basename,<sp/>i);</highlight></codeline>
<codeline lineno="2720"><highlight class="normal"><sp/><sp/><sp/><sp/>layer_files<sp/>=<sp/>files_include_re(files,<sp/>re);</highlight></codeline>
<codeline lineno="2721"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!layer_files.empty())</highlight></codeline>
<codeline lineno="2722"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>makeHierLayer(layer_files,<sp/>ii,<sp/>ip,<sp/>nomsg);</highlight></codeline>
<codeline lineno="2723"><highlight class="normal"></highlight></codeline>
<codeline lineno="2724"><highlight class="normal"><sp/><sp/><sp/><sp/>re.printf(_T(</highlight><highlight class="stringliteral">&quot;^%s_dp_%02d_destr.lod\\d\\d\\.dag$&quot;</highlight><highlight class="normal">),<sp/>basename,<sp/>i);</highlight></codeline>
<codeline lineno="2725"><highlight class="normal"><sp/><sp/><sp/><sp/>layer_files<sp/>=<sp/>files_include_re(files,<sp/>re);</highlight></codeline>
<codeline lineno="2726"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!layer_files.empty())</highlight></codeline>
<codeline lineno="2727"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>makeHierLayer(layer_files,<sp/>ii,<sp/>ip,<sp/>nomsg);</highlight></codeline>
<codeline lineno="2728"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2729"><highlight class="normal"></highlight></codeline>
<codeline lineno="2730"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="2731"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2732"><highlight class="normal"></highlight></codeline>
<codeline lineno="2733"><highlight class="normal"></highlight></codeline>
<codeline lineno="2734"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>DagImp::doLegacyImport(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TCHAR<sp/>*fname,<sp/>ImpInterface<sp/>*ii,<sp/>Interface<sp/>*ip,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>nomsg)</highlight></codeline>
<codeline lineno="2735"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2736"><highlight class="normal"><sp/><sp/>Tab&lt;TCHAR<sp/>*&gt;<sp/>fnames;</highlight></codeline>
<codeline lineno="2737"><highlight class="normal"></highlight></codeline>
<codeline lineno="2738"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!find_co_files(fname,<sp/>fnames))</highlight></codeline>
<codeline lineno="2739"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classDagImp_1a1d928bae92dbdbb33e0881d947a9913b" kindref="member">doImportOne</ref>(fname,<sp/>ii,<sp/>ip,<sp/>nomsg);</highlight></codeline>
<codeline lineno="2740"><highlight class="normal"></highlight></codeline>
<codeline lineno="2741"><highlight class="normal"><sp/><sp/>TCHAR<sp/>buf[1024];</highlight></codeline>
<codeline lineno="2742"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>fn_len<sp/>=<sp/>(int)_tcslen(fname);</highlight></codeline>
<codeline lineno="2743"><highlight class="normal"><sp/><sp/>_stprintf(buf,<sp/>_T(</highlight><highlight class="stringliteral">&quot;We<sp/>detected<sp/>that<sp/>%s%s\nhas<sp/>%d<sp/>linked<sp/>DAGs.\nLoad<sp/>them<sp/>at<sp/>once<sp/>into<sp/>separate<sp/>layers?&quot;</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="2744"><highlight class="normal"><sp/><sp/><sp/><sp/>fn_len<sp/>&gt;<sp/>64<sp/>?<sp/>_T(</highlight><highlight class="stringliteral">&quot;...&quot;</highlight><highlight class="normal">)<sp/>:<sp/>_T(</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">),<sp/>fn_len<sp/>&gt;<sp/>64<sp/>?<sp/>fname<sp/>+<sp/>fn_len<sp/>-<sp/>64<sp/>:<sp/>fname,<sp/>fnames.Count()<sp/>/<sp/>2<sp/>-<sp/>1);</highlight></codeline>
<codeline lineno="2745"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((nomsg<sp/>&amp;&amp;<sp/>!<ref refid="classDagImp_1a1d12c2444eae41164409f661f59a25b8" kindref="member">DagImp::separateLayers</ref>)<sp/>||</highlight></codeline>
<codeline lineno="2746"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>(!nomsg<sp/>&amp;&amp;<sp/>MessageBox(GetFocus(),<sp/>buf,<sp/>_T(</highlight><highlight class="stringliteral">&quot;Import<sp/>layered<sp/>DAGs&quot;</highlight><highlight class="normal">),<sp/>MB_YESNO<sp/>|<sp/>MB_ICONQUESTION)<sp/>!=<sp/>IDYES))</highlight></codeline>
<codeline lineno="2747"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="2748"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>fnames.Count();<sp/>i++)</highlight></codeline>
<codeline lineno="2749"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>free(fnames[i]);</highlight></codeline>
<codeline lineno="2750"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classDagImp_1a1d928bae92dbdbb33e0881d947a9913b" kindref="member">doImportOne</ref>(fname,<sp/>ii,<sp/>ip,<sp/>nomsg);</highlight></codeline>
<codeline lineno="2751"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2752"><highlight class="normal"></highlight></codeline>
<codeline lineno="2753"><highlight class="normal"><sp/><sp/>ILayerManager<sp/>*manager<sp/>=<sp/>GetCOREInterface13()-&gt;GetLayerManager();</highlight></codeline>
<codeline lineno="2754"><highlight class="normal"><sp/><sp/>manager-&gt;Reset();</highlight></codeline>
<codeline lineno="2755"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>fnames.Count();<sp/>i<sp/>+=<sp/>2)</highlight></codeline>
<codeline lineno="2756"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="2757"><highlight class="normal"><sp/><sp/><sp/><sp/>TSTR<sp/>layer_nm(fnames[i<sp/>+<sp/>1]);</highlight></codeline>
<codeline lineno="2758"><highlight class="normal"><sp/><sp/><sp/><sp/>manager-&gt;AddLayer(manager-&gt;CreateLayer(layer_nm));</highlight></codeline>
<codeline lineno="2759"><highlight class="normal"><sp/><sp/><sp/><sp/>manager-&gt;SetCurrentLayer(layer_nm);</highlight></codeline>
<codeline lineno="2760"><highlight class="normal"><sp/><sp/><sp/><sp/>free(fnames[i<sp/>+<sp/>1]);</highlight></codeline>
<codeline lineno="2761"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="classDagImp_1a1d928bae92dbdbb33e0881d947a9913b" kindref="member">doImportOne</ref>(fnames[i],<sp/>ii,<sp/>ip,<sp/>nomsg))</highlight></codeline>
<codeline lineno="2762"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2763"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>free(fnames[i]);</highlight></codeline>
<codeline lineno="2764"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="2765"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2766"><highlight class="normal"><sp/><sp/><sp/><sp/>free(fnames[i]);</highlight></codeline>
<codeline lineno="2767"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2768"><highlight class="normal"><sp/><sp/>manager-&gt;SetCurrentLayer();</highlight></codeline>
<codeline lineno="2769"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="2770"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2771"><highlight class="normal"></highlight></codeline>
<codeline lineno="2772"><highlight class="normal"></highlight></codeline>
<codeline lineno="2773"><highlight class="normal"></highlight><highlight class="comment">//<sp/>signle<sp/>fname<sp/>is<sp/>ignored,<sp/>source<sp/>files<sp/>are<sp/>passed<sp/>via<sp/>DagImp::batchImportFiles</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2774"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>DagImp::doBatchImport(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TSTR<sp/>&amp;<sp/></highlight><highlight class="comment">/*<sp/>ignored<sp/>*/</highlight><highlight class="normal">,<sp/>ImpInterface<sp/>*ii,<sp/>Interface<sp/>*ip,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>nomsg)</highlight></codeline>
<codeline lineno="2775"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2776"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>std::wregex<sp/>re(_T(</highlight><highlight class="stringliteral">&quot;^.*\\.lod\\d\\d\\.dag$&quot;</highlight><highlight class="normal">),<sp/>std::regex_constants::icase);</highlight></codeline>
<codeline lineno="2777"><highlight class="normal"></highlight></codeline>
<codeline lineno="2778"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>res<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="2779"><highlight class="normal"><sp/><sp/>Categories<sp/>bkChecked<sp/>=<sp/><ref refid="classDagImp_1a7b2fc6f616381d3743a667637b550f4b" kindref="member">checked</ref>;</highlight></codeline>
<codeline lineno="2780"><highlight class="normal"><sp/><sp/><ref refid="classDagImp_1a7b2fc6f616381d3743a667637b550f4b" kindref="member">checked</ref>.<ref refid="structDagImp_1_1Categories_1a9a59aa661923e314dc2309ebce6c28b9" kindref="member">enableAll</ref>();</highlight></codeline>
<codeline lineno="2781"><highlight class="normal"></highlight></codeline>
<codeline lineno="2782"><highlight class="normal"><sp/><sp/><ref refid="classAutotoggle" kindref="compound">Autotoggle</ref><sp/>guard(<ref refid="classDagImp_1ab1597f608c0098f1df0acf54f9ca1b17" kindref="member">nonInteractive</ref>);</highlight></codeline>
<codeline lineno="2783"><highlight class="normal"></highlight></codeline>
<codeline lineno="2784"><highlight class="normal"><sp/><sp/>std::vector&lt;TSTR&gt;<sp/>tmp_files;</highlight></codeline>
<codeline lineno="2785"><highlight class="normal"><sp/><sp/>tmp_files.reserve(1);</highlight></codeline>
<codeline lineno="2786"><highlight class="normal"></highlight></codeline>
<codeline lineno="2787"><highlight class="normal"><sp/><sp/><ref refid="classDagImp_1ab8685f3fdc76d40008c8c07f7db3689e" kindref="member">importedFiles</ref>.clear();</highlight></codeline>
<codeline lineno="2788"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TSTR<sp/>&amp;fname<sp/>:<sp/><ref refid="classDagImp_1a3555246bf49a7cf63848c468cbf75d26" kindref="member">batchImportFiles</ref>)</highlight></codeline>
<codeline lineno="2789"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="2790"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classDagImp_1a6a73e019f74e964f8a0121334ffb9903" kindref="member">reimportExisting</ref><sp/>&amp;&amp;<sp/>isNamesake(fname))</highlight></codeline>
<codeline lineno="2791"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2792"><highlight class="normal"></highlight></codeline>
<codeline lineno="2793"><highlight class="normal"><sp/><sp/><sp/><sp/>std::wstring<sp/>fn<sp/>=<sp/>fname.data();</highlight></codeline>
<codeline lineno="2794"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(std::regex_match(fn,<sp/>re))</highlight></codeline>
<codeline lineno="2795"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2796"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>tmp_files.clear();</highlight></codeline>
<codeline lineno="2797"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>tmp_files.push_back(fname);</highlight></codeline>
<codeline lineno="2798"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>makeHierLayer(tmp_files,<sp/>ii,<sp/>ip,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2799"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2800"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2801"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>makeHierLayer(fname,<sp/>ii,<sp/>ip,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2802"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2803"><highlight class="normal"></highlight></codeline>
<codeline lineno="2804"><highlight class="normal"><sp/><sp/><ref refid="classDagImp_1a7b2fc6f616381d3743a667637b550f4b" kindref="member">checked</ref><sp/>=<sp/>bkChecked;</highlight></codeline>
<codeline lineno="2805"><highlight class="normal"><sp/><sp/><ref refid="classDagImp_1ab8685f3fdc76d40008c8c07f7db3689e" kindref="member">importedFiles</ref>.clear();</highlight></codeline>
<codeline lineno="2806"><highlight class="normal"><sp/><sp/><ref refid="classDagImp_1a3555246bf49a7cf63848c468cbf75d26" kindref="member">batchImportFiles</ref>.clear();</highlight></codeline>
<codeline lineno="2807"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>res;</highlight></codeline>
<codeline lineno="2808"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2809"><highlight class="normal"></highlight></codeline>
<codeline lineno="2810"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>DagImp::doMaxscriptImport(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TSTR<sp/>&amp;fname,<sp/>ImpInterface<sp/>*ii,<sp/>Interface<sp/>*ip,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>nomsg)</highlight></codeline>
<codeline lineno="2811"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2812"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>doHierImport(fname,<sp/>ii,<sp/>ip,<sp/>nomsg);</highlight></codeline>
<codeline lineno="2813"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2814"><highlight class="normal"></highlight></codeline>
<codeline lineno="2815"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2816"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Main<sp/>entry<sp/>point<sp/>for<sp/>GetCOREInterface()-&gt;ImportFromFile()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2817"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2818"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="classDagImp_1af2ba2d0d275e03c8753f75812f3d5b17" kindref="member">DagImp::DoImport</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TCHAR<sp/>*fname,<sp/>ImpInterface<sp/>*ii,<sp/>Interface<sp/>*ip,<sp/>BOOL<sp/>nomsg)</highlight></codeline>
<codeline lineno="2819"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2820"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(MAX_RELEASE_R13)<sp/>&amp;&amp;<sp/>MAX_RELEASE<sp/>&gt;=<sp/>MAX_RELEASE_R13</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2821"><highlight class="normal"></highlight></codeline>
<codeline lineno="2822"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classDagImp_1ae89838cf454485eaab1a6f5b752f4c15" kindref="member">useLegacyImport</ref>)</highlight></codeline>
<codeline lineno="2823"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>doLegacyImport(fname,<sp/>ii,<sp/>ip,<sp/>nomsg);</highlight></codeline>
<codeline lineno="2824"><highlight class="normal"></highlight></codeline>
<codeline lineno="2825"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classDagImp_1ab1597f608c0098f1df0acf54f9ca1b17" kindref="member">nonInteractive</ref>)</highlight></codeline>
<codeline lineno="2826"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>doMaxscriptImport(fname,<sp/>ii,<sp/>ip,<sp/>nomsg);</highlight></codeline>
<codeline lineno="2827"><highlight class="normal"></highlight></codeline>
<codeline lineno="2828"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classDagImp_1af4fa04ae6927daef2847cf022afd47fd" kindref="member">calledFromBatchImport</ref>)</highlight></codeline>
<codeline lineno="2829"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>doBatchImport(_T(</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">),<sp/>ii,<sp/>ip,<sp/>nomsg);</highlight></codeline>
<codeline lineno="2830"><highlight class="normal"></highlight></codeline>
<codeline lineno="2831"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>else<sp/>called<sp/>from<sp/>File-&gt;Import<sp/>or<sp/>drag&amp;drop:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2832"><highlight class="normal"></highlight></codeline>
<codeline lineno="2833"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>examine<sp/>files<sp/>and<sp/>display<sp/>the<sp/>options<sp/>window</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2834"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>res<sp/>=<sp/>doHierImport(fname,<sp/>ii,<sp/>ip,<sp/>nomsg);</highlight></codeline>
<codeline lineno="2835"><highlight class="normal"></highlight></codeline>
<codeline lineno="2836"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>update<sp/>batch<sp/>UI</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2837"><highlight class="normal"><sp/><sp/>util.<ref refid="classImpUtil_1a717627038cc29886843554f578b0b3f6" kindref="member">filePath</ref><sp/>=<sp/>fname;</highlight></codeline>
<codeline lineno="2838"><highlight class="normal"><sp/><sp/>TabCtrl_SetCurSel(util.<ref refid="classImpUtil_1a2399dee70c6460f25cf0953a1a0de2eb" kindref="member">hTab</ref>,<sp/><ref refid="classDagImp_1ae89838cf454485eaab1a6f5b752f4c15" kindref="member">useLegacyImport</ref><sp/>?<sp/>0<sp/>:<sp/>1);</highlight></codeline>
<codeline lineno="2839"><highlight class="normal"><sp/><sp/>util.<ref refid="classImpUtil_1a5eb3600bf909ff732723cd66d0d8b561" kindref="member">onTabChanged</ref>(util.<ref refid="classImpUtil_1afdee8ac4d3b2b7882bdb93cb2fda0b35" kindref="member">hImpPanel</ref>);</highlight></codeline>
<codeline lineno="2840"><highlight class="normal"></highlight></codeline>
<codeline lineno="2841"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>user<sp/>selected<sp/>the<sp/>Legacy<sp/>option</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2842"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classDagImp_1ae89838cf454485eaab1a6f5b752f4c15" kindref="member">useLegacyImport</ref>)</highlight></codeline>
<codeline lineno="2843"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>doLegacyImport(fname,<sp/>ii,<sp/>ip,<sp/>nomsg);</highlight></codeline>
<codeline lineno="2844"><highlight class="normal"></highlight></codeline>
<codeline lineno="2845"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>res;</highlight></codeline>
<codeline lineno="2846"><highlight class="normal"></highlight></codeline>
<codeline lineno="2847"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2848"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classDagImp_1a1d928bae92dbdbb33e0881d947a9913b" kindref="member">doImportOne</ref>(fname,<sp/>ii,<sp/>ip,<sp/>nomsg);</highlight></codeline>
<codeline lineno="2849"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2850"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2851"><highlight class="normal"></highlight></codeline>
<codeline lineno="2852"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>DagImp::isNamesake(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TSTR<sp/>&amp;fname)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="2853"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="2854"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TSTR<sp/>basename<sp/>=<sp/><ref refid="common_8cpp_1ace8247bb8d3b7d8c28336a7ddfb0e2da" kindref="member">extract_basename</ref>(fname);</highlight></codeline>
<codeline lineno="2855"><highlight class="normal"></highlight></codeline>
<codeline lineno="2856"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>it<sp/>=<sp/>std::find_if(<ref refid="classDagImp_1ab8685f3fdc76d40008c8c07f7db3689e" kindref="member">importedFiles</ref>.begin(),<sp/><ref refid="classDagImp_1ab8685f3fdc76d40008c8c07f7db3689e" kindref="member">importedFiles</ref>.end(),</highlight></codeline>
<codeline lineno="2857"><highlight class="normal"><sp/><sp/><sp/><sp/>[&amp;basename](</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structImportedFile" kindref="compound">ImportedFile</ref><sp/>&amp;imp)<sp/>{<sp/>return<sp/>imp.equalBasename(basename);<sp/>});</highlight></codeline>
<codeline lineno="2858"><highlight class="normal"></highlight></codeline>
<codeline lineno="2859"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(it<sp/>!=<sp/><ref refid="classDagImp_1ab8685f3fdc76d40008c8c07f7db3689e" kindref="member">importedFiles</ref>.end())</highlight></codeline>
<codeline lineno="2860"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="2861"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fname.data()<sp/>!=<sp/>it-&gt;fullpath)</highlight></codeline>
<codeline lineno="2862"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2863"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classDagorLogWindow_1a42c9339a383b9d8c8581d81437b3937b" kindref="member">DagorLogWindow::addToLog</ref>(<ref refid="classDagorLogWindow_1a459098ccdd150144790891abc9e6229aa32ae57a69fc892e4e85954eeaeceb376" kindref="member">DagorLogWindow::LogLevel::Warning</ref>,<sp/>_T(</highlight><highlight class="stringliteral">&quot;ignore<sp/>duplicated<sp/>\&quot;%s\&quot;<sp/>(already<sp/>have<sp/>\&quot;%s\&quot;)\r\n&quot;</highlight><highlight class="normal">),<sp/>fname,</highlight></codeline>
<codeline lineno="2864"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>it-&gt;fullpath.data());</highlight></codeline>
<codeline lineno="2865"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classDagorLogWindow_1a65e078c63db9c8fed5094e7a0f24e496" kindref="member">DagorLogWindow::show</ref>();</highlight></codeline>
<codeline lineno="2866"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2867"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2868"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2869"><highlight class="normal"></highlight></codeline>
<codeline lineno="2870"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2871"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2872"><highlight class="normal"></highlight></codeline>
<codeline lineno="2873"><highlight class="normal"></highlight></codeline>
<codeline lineno="2874"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>rd(p,<sp/>l)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="2875"><highlight class="preprocessor"><sp/><sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="2876"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>if<sp/>(fread(p,<sp/>l,<sp/>1,<sp/>h)<sp/>!=<sp/>1)<sp/>\</highlight></codeline>
<codeline lineno="2877"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>goto<sp/>read_err;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="2878"><highlight class="preprocessor"><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2879"><highlight class="normal"></highlight></codeline>
<codeline lineno="2880"><highlight class="normal"></highlight></codeline>
<codeline lineno="2881"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="classDagImp_1a1d928bae92dbdbb33e0881d947a9913b" kindref="member">DagImp::doImportOne</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TCHAR<sp/>*fname,<sp/>ImpInterface<sp/>*ii,<sp/>Interface<sp/>*ip,<sp/>BOOL<sp/>nomsg)</highlight></codeline>
<codeline lineno="2882"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2883"><highlight class="normal"><sp/><sp/>DebugPrint(_T(</highlight><highlight class="stringliteral">&quot;import...\n&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="2884"><highlight class="normal"></highlight></codeline>
<codeline lineno="2885"><highlight class="normal"><sp/><sp/>cleanup();</highlight></codeline>
<codeline lineno="2886"><highlight class="normal"><sp/><sp/>Tab&lt;SkinData<sp/>*&gt;<sp/>skin_data;</highlight></codeline>
<codeline lineno="2887"><highlight class="normal"><sp/><sp/>Tab&lt;NodeId&gt;<sp/>node_id;</highlight></codeline>
<codeline lineno="2888"><highlight class="normal"><sp/><sp/>SplitFilename(TSTR(fname),<sp/>NULL,<sp/>&amp;scene_name,<sp/>NULL);</highlight></codeline>
<codeline lineno="2889"><highlight class="normal"><sp/><sp/>FILE<sp/>*<ref refid="polyBumpUtil_8cpp_1a48d03c7323d95df49ef19db24dcb5c71" kindref="member">h</ref><sp/>=<sp/>_tfopen(fname,<sp/>_T(</highlight><highlight class="stringliteral">&quot;rb&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="2890"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="polyBumpUtil_8cpp_1a48d03c7323d95df49ef19db24dcb5c71" kindref="member">h</ref>)</highlight></codeline>
<codeline lineno="2891"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="2892"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!nomsg)</highlight></codeline>
<codeline lineno="2893"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ip-&gt;DisplayTempPrompt(<ref refid="common_8cpp_1aeb87de5dfb5d632579574b4bc8709019" kindref="member">GetString</ref>(<ref refid="resource_8h_1a7d4d8d622c81f17850126eaad7e179d9" kindref="member">IDS_FILE_OPEN_ERR</ref>),<sp/><ref refid="dagimp_8cpp_1a398da37e411bb2d829f85232480defea" kindref="member">ERRMSG_DELAY</ref>);</highlight></codeline>
<codeline lineno="2894"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="2895"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2896"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="2897"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>id;</highlight></codeline>
<codeline lineno="2898"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="dagimp_8cpp_1a687ce463dce05873a78f8b29a3a808be" kindref="member">rd</ref>(&amp;</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">,<sp/>4);</highlight></codeline>
<codeline lineno="2899"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">id</highlight><highlight class="normal"><sp/>!=<sp/><ref refid="dagfmt_8h_1a7f2c9efc6b71060e5602c8fe4464688f" kindref="member">DAG_ID</ref>)</highlight></codeline>
<codeline lineno="2900"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2901"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="polyBumpUtil_8cpp_1aed5a458133572985ccc7fc10a3159f6b" kindref="member">fclose</ref>(<ref refid="polyBumpUtil_8cpp_1a48d03c7323d95df49ef19db24dcb5c71" kindref="member">h</ref>);</highlight></codeline>
<codeline lineno="2902"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!nomsg)</highlight></codeline>
<codeline lineno="2903"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ip-&gt;DisplayTempPrompt(<ref refid="common_8cpp_1aeb87de5dfb5d632579574b4bc8709019" kindref="member">GetString</ref>(<ref refid="resource_8h_1ae06a1ca16be6edb21fd1e4a6dbbd5f30" kindref="member">IDS_INVALID_DAGFILE</ref>),<sp/><ref refid="dagimp_8cpp_1a398da37e411bb2d829f85232480defea" kindref="member">ERRMSG_DELAY</ref>);</highlight></codeline>
<codeline lineno="2904"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="2905"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2906"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2907"><highlight class="normal"></highlight></codeline>
<codeline lineno="2908"><highlight class="normal"><sp/><sp/>init_blk(<ref refid="polyBumpUtil_8cpp_1a48d03c7323d95df49ef19db24dcb5c71" kindref="member">h</ref>);</highlight></codeline>
<codeline lineno="2909"><highlight class="normal"><sp/><sp/><ref refid="dagimp_8cpp_1a258f4e1cc409c86d8964e61a1ff3407e" kindref="member">bblk</ref>;</highlight></codeline>
<codeline lineno="2910"><highlight class="normal"><sp/><sp/>DebugPrint(_T(</highlight><highlight class="stringliteral">&quot;imp_a\n&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="2911"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(blk_type()<sp/>!=<sp/><ref refid="dagfmt_8h_1a7f2c9efc6b71060e5602c8fe4464688f" kindref="member">DAG_ID</ref>)</highlight></codeline>
<codeline lineno="2912"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="2913"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="polyBumpUtil_8cpp_1aed5a458133572985ccc7fc10a3159f6b" kindref="member">fclose</ref>(<ref refid="polyBumpUtil_8cpp_1a48d03c7323d95df49ef19db24dcb5c71" kindref="member">h</ref>);</highlight></codeline>
<codeline lineno="2914"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!nomsg)</highlight></codeline>
<codeline lineno="2915"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ip-&gt;DisplayTempPrompt(<ref refid="common_8cpp_1aeb87de5dfb5d632579574b4bc8709019" kindref="member">GetString</ref>(<ref refid="resource_8h_1ae06a1ca16be6edb21fd1e4a6dbbd5f30" kindref="member">IDS_INVALID_DAGFILE</ref>),<sp/><ref refid="dagimp_8cpp_1a398da37e411bb2d829f85232480defea" kindref="member">ERRMSG_DELAY</ref>);</highlight></codeline>
<codeline lineno="2916"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="2917"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2918"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;<sp/>blk_rest()<sp/>&gt;<sp/>0;)</highlight></codeline>
<codeline lineno="2919"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="2920"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="dagimp_8cpp_1a258f4e1cc409c86d8964e61a1ff3407e" kindref="member">bblk</ref>;</highlight></codeline>
<codeline lineno="2921"><highlight class="normal"><sp/><sp/><sp/><sp/>DebugPrint(_T(</highlight><highlight class="stringliteral">&quot;imp<sp/>%d\n&quot;</highlight><highlight class="normal">),<sp/>blk_type());</highlight></codeline>
<codeline lineno="2922"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(blk_type()<sp/>==<sp/><ref refid="dagfmt_8h_1a06fc87d81c62e9abb8790b6e5713c55ba9063faa2c19c09b129a91162540f8dc2" kindref="member">DAG_END</ref>)</highlight></codeline>
<codeline lineno="2923"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2924"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="dagimp_8cpp_1af72073a672fb009b5005670cb78a4598" kindref="member">eblk</ref>;</highlight></codeline>
<codeline lineno="2925"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2926"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2927"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(blk_type()<sp/>==<sp/><ref refid="dagfmt_8h_1a06fc87d81c62e9abb8790b6e5713c55baf53833c694202e189b5e0e83b79d5d2c" kindref="member">DAG_TEXTURES</ref>)</highlight></codeline>
<codeline lineno="2928"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2929"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2930"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="dagimp_8cpp_1a687ce463dce05873a78f8b29a3a808be" kindref="member">rd</ref>(&amp;n,<sp/>2);</highlight></codeline>
<codeline lineno="2931"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>tex.SetCount(n);</highlight></codeline>
<codeline lineno="2932"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>n;<sp/>++i)</highlight></codeline>
<codeline lineno="2933"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2934"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>l<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2935"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="dagimp_8cpp_1a687ce463dce05873a78f8b29a3a808be" kindref="member">rd</ref>(&amp;l,<sp/>1);</highlight></codeline>
<codeline lineno="2936"><highlight class="normal"></highlight></codeline>
<codeline lineno="2937"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tex[i]<sp/>=<sp/><ref refid="dagimp_8cpp_1a1d3be838d048c85d30335b00e10215d1" kindref="member">ReadCharString</ref>(l,<sp/><ref refid="polyBumpUtil_8cpp_1a48d03c7323d95df49ef19db24dcb5c71" kindref="member">h</ref>);</highlight></codeline>
<codeline lineno="2938"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!tex[i])</highlight></codeline>
<codeline lineno="2939"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>read_err;</highlight></codeline>
<codeline lineno="2940"><highlight class="normal"></highlight></codeline>
<codeline lineno="2941"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*tex[i]<sp/>=<sp/>(TCHAR<sp/>*)<sp/>malloc(l<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="2942"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(tex[i]);</highlight></codeline>
<codeline lineno="2943"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(l)</highlight></codeline>
<codeline lineno="2944"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2945"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rd(tex[i],<sp/>l);</highlight></codeline>
<codeline lineno="2946"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2947"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tex[i][l]<sp/>=<sp/>0;*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2948"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2949"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2950"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(blk_type()<sp/>==<sp/><ref refid="dagfmt_8h_1a06fc87d81c62e9abb8790b6e5713c55baa54953b8e05322be30b25cac182c882d" kindref="member">DAG_MATER</ref>)</highlight></codeline>
<codeline lineno="2951"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2952"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structImpMat" kindref="compound">ImpMat</ref><sp/>m;</highlight></codeline>
<codeline lineno="2953"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>l<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2954"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="dagimp_8cpp_1a687ce463dce05873a78f8b29a3a808be" kindref="member">rd</ref>(&amp;l,<sp/>1);</highlight></codeline>
<codeline lineno="2955"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(l<sp/>&gt;<sp/>0)</highlight></codeline>
<codeline lineno="2956"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2957"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>m.name<sp/>=<sp/>(TCHAR<sp/>*)<sp/>malloc(l<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="2958"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(m.name);</highlight></codeline>
<codeline lineno="2959"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rd(m.name,<sp/>l);</highlight></codeline>
<codeline lineno="2960"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m.name[l]<sp/>=<sp/>0;*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2961"><highlight class="normal"></highlight></codeline>
<codeline lineno="2962"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m.<ref refid="structImpMat_1a0dcd841ae7f3cd66745a13cc1e0f993d" kindref="member">name</ref><sp/>=<sp/><ref refid="dagimp_8cpp_1a1d3be838d048c85d30335b00e10215d1" kindref="member">ReadCharString</ref>(l,<sp/><ref refid="polyBumpUtil_8cpp_1a48d03c7323d95df49ef19db24dcb5c71" kindref="member">h</ref>);</highlight></codeline>
<codeline lineno="2963"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!m.<ref refid="structImpMat_1a0dcd841ae7f3cd66745a13cc1e0f993d" kindref="member">name</ref>)</highlight></codeline>
<codeline lineno="2964"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>read_err;</highlight></codeline>
<codeline lineno="2965"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2966"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="dagimp_8cpp_1a687ce463dce05873a78f8b29a3a808be" kindref="member">rd</ref>(&amp;m.<ref refid="structImpMat_1abf1da1581d73da471dbfd398aeebfba3" kindref="member">m</ref>,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(m.<ref refid="structImpMat_1abf1da1581d73da471dbfd398aeebfba3" kindref="member">m</ref>));</highlight></codeline>
<codeline lineno="2967"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>l<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2968"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="dagimp_8cpp_1a687ce463dce05873a78f8b29a3a808be" kindref="member">rd</ref>(&amp;l,<sp/>1);</highlight></codeline>
<codeline lineno="2969"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(l<sp/>&gt;<sp/>0)</highlight></codeline>
<codeline lineno="2970"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2971"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>m.clsname<sp/>=<sp/>(TCHAR<sp/>*)<sp/>malloc(l<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="2972"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(m.clsname);</highlight></codeline>
<codeline lineno="2973"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rd(m.clsname,<sp/>l);</highlight></codeline>
<codeline lineno="2974"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m.clsname[l]<sp/>=<sp/>0;*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2975"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m.<ref refid="structImpMat_1af396b8a8ee19cfa0571565f5601fc31a" kindref="member">clsname</ref><sp/>=<sp/><ref refid="dagimp_8cpp_1a1d3be838d048c85d30335b00e10215d1" kindref="member">ReadCharString</ref>(l,<sp/><ref refid="polyBumpUtil_8cpp_1a48d03c7323d95df49ef19db24dcb5c71" kindref="member">h</ref>);</highlight></codeline>
<codeline lineno="2976"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!m.<ref refid="structImpMat_1af396b8a8ee19cfa0571565f5601fc31a" kindref="member">clsname</ref>)</highlight></codeline>
<codeline lineno="2977"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>read_err;</highlight></codeline>
<codeline lineno="2978"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2979"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>l<sp/>=<sp/>blk_rest();</highlight></codeline>
<codeline lineno="2980"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(l<sp/>&gt;<sp/>0)</highlight></codeline>
<codeline lineno="2981"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2982"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>m.script<sp/>=<sp/>(TCHAR<sp/>*)<sp/>malloc(l<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="2983"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(m.script);</highlight></codeline>
<codeline lineno="2984"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rd(m.script,<sp/>l);</highlight></codeline>
<codeline lineno="2985"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m.script[l]<sp/>=<sp/>0;*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2986"><highlight class="normal"></highlight></codeline>
<codeline lineno="2987"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m.<ref refid="structImpMat_1a3d2834f68f0a8e37bd712287f1d6181e" kindref="member">script</ref><sp/>=<sp/><ref refid="dagimp_8cpp_1a1d3be838d048c85d30335b00e10215d1" kindref="member">ReadCharString</ref>(l,<sp/><ref refid="polyBumpUtil_8cpp_1a48d03c7323d95df49ef19db24dcb5c71" kindref="member">h</ref>);</highlight></codeline>
<codeline lineno="2988"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!m.<ref refid="structImpMat_1a3d2834f68f0a8e37bd712287f1d6181e" kindref="member">script</ref>)</highlight></codeline>
<codeline lineno="2989"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>read_err;</highlight></codeline>
<codeline lineno="2990"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2991"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>m.<ref refid="structImpMat_1a9a9b8d52f4db80e54bc011c97e0a5eb9" kindref="member">mtl</ref><sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="2992"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>mat.Append(1,<sp/>&amp;m);</highlight></codeline>
<codeline lineno="2993"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2994"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(blk_type()<sp/>==<sp/><ref refid="dagfmt_8h_1a06fc87d81c62e9abb8790b6e5713c55ba3f8a21c38be942b9a6f296ccc8bcff1e" kindref="member">DAG_KEYLABELS</ref>)</highlight></codeline>
<codeline lineno="2995"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2996"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2997"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="dagimp_8cpp_1a687ce463dce05873a78f8b29a3a808be" kindref="member">rd</ref>(&amp;n,<sp/>2);</highlight></codeline>
<codeline lineno="2998"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>keylabel.SetCount(n);</highlight></codeline>
<codeline lineno="2999"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="3000"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>n;<sp/>++i)</highlight></codeline>
<codeline lineno="3001"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>keylabel[i]<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="3002"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>n;<sp/>++i)</highlight></codeline>
<codeline lineno="3003"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3004"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>l<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="3005"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="dagimp_8cpp_1a687ce463dce05873a78f8b29a3a808be" kindref="member">rd</ref>(&amp;l,<sp/>1);</highlight></codeline>
<codeline lineno="3006"><highlight class="normal"></highlight></codeline>
<codeline lineno="3007"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*char<sp/>*s<sp/>=<sp/>(char<sp/>*)<sp/>malloc(l<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="3008"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(s);</highlight></codeline>
<codeline lineno="3009"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rd(s,<sp/>l);<sp/>s[l]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="3010"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>keylabel[i]<sp/>=<sp/>s;*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3011"><highlight class="normal"></highlight></codeline>
<codeline lineno="3012"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>keylabel[i]<sp/>=<sp/><ref refid="dagimp_8cpp_1a1d3be838d048c85d30335b00e10215d1" kindref="member">ReadCharString</ref>(l,<sp/><ref refid="polyBumpUtil_8cpp_1a48d03c7323d95df49ef19db24dcb5c71" kindref="member">h</ref>);</highlight></codeline>
<codeline lineno="3013"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!keylabel[i])</highlight></codeline>
<codeline lineno="3014"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>read_err;</highlight></codeline>
<codeline lineno="3015"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3016"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3017"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(blk_type()<sp/>==<sp/><ref refid="dagfmt_8h_1a06fc87d81c62e9abb8790b6e5713c55ba7ca2a5c2df3babea3f8f371e262b6478" kindref="member">DAG_NOTETRACK</ref>)</highlight></codeline>
<codeline lineno="3018"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3019"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n<sp/>=<sp/>blk_rest()<sp/>/<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="structDagNoteKey" kindref="compound">DagNoteKey</ref>);</highlight></codeline>
<codeline lineno="3020"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(n<sp/>&gt;<sp/>0)</highlight></codeline>
<codeline lineno="3021"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3022"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structDagNoteKey" kindref="compound">DagNoteKey</ref><sp/>*nk<sp/>=<sp/>(<ref refid="structDagNoteKey" kindref="compound">DagNoteKey</ref><sp/>*)malloc(n<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="structDagNoteKey" kindref="compound">DagNoteKey</ref>));</highlight></codeline>
<codeline lineno="3023"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(nk);</highlight></codeline>
<codeline lineno="3024"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="dagimp_8cpp_1a687ce463dce05873a78f8b29a3a808be" kindref="member">rd</ref>(nk,<sp/>n<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(*nk));</highlight></codeline>
<codeline lineno="3025"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="3026"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ntrack.Append(1,&amp;nk);</highlight></codeline>
<codeline lineno="3027"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ntrack_knum.Append(1,&amp;n);</highlight></codeline>
<codeline lineno="3028"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3029"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DefNoteTrack<sp/>*nt<sp/>=<sp/>(DefNoteTrack<sp/>*)NewDefaultNoteTrack();</highlight></codeline>
<codeline lineno="3030"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(nt)</highlight></codeline>
<codeline lineno="3031"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3032"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>n;<sp/>++i)</highlight></codeline>
<codeline lineno="3033"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3034"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TCHAR<sp/>*nm<sp/>=<sp/>_T(</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3035"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(nk[i].</highlight><highlight class="keywordtype">id</highlight><highlight class="normal"><sp/>&lt;<sp/>keylabel.Count())</highlight></codeline>
<codeline lineno="3036"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nm<sp/>=<sp/>keylabel[nk[i].<ref refid="structDagNoteKey_1a220b02b685ce75afd3f17fc37afd17e5" kindref="member">id</ref>];</highlight></codeline>
<codeline lineno="3037"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NoteKey<sp/>*k<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>NoteKey(nk[i].t,<sp/>nm);</highlight></codeline>
<codeline lineno="3038"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nt-&gt;keys.Append(1,<sp/>&amp;k);</highlight></codeline>
<codeline lineno="3039"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3040"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3041"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ntrack.Append(1,<sp/>&amp;nt);</highlight></codeline>
<codeline lineno="3042"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>free(nk);</highlight></codeline>
<codeline lineno="3043"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3044"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3045"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3046"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DefNoteTrack<sp/>*nt<sp/>=<sp/>(DefNoteTrack<sp/>*)NewDefaultNoteTrack();</highlight></codeline>
<codeline lineno="3047"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ntrack.Append(1,<sp/>&amp;nt);</highlight></codeline>
<codeline lineno="3048"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3049"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3050"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(blk_type()<sp/>==<sp/><ref refid="dagfmt_8h_1a06fc87d81c62e9abb8790b6e5713c55bae86c37d60258015f247e4e8b50d5bda8" kindref="member">DAG_NODE</ref>)</highlight></codeline>
<codeline lineno="3051"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3052"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!load_node(NULL,<sp/><ref refid="polyBumpUtil_8cpp_1a48d03c7323d95df49ef19db24dcb5c71" kindref="member">h</ref>,<sp/>ii,<sp/>ip,<sp/>skin_data,<sp/>node_id))</highlight></codeline>
<codeline lineno="3053"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>read_err;</highlight></codeline>
<codeline lineno="3054"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3055"><highlight class="normal"><sp/><sp/><sp/><sp/>DebugPrint(_T(</highlight><highlight class="stringliteral">&quot;imp_b\n&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="3056"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="dagimp_8cpp_1af72073a672fb009b5005670cb78a4598" kindref="member">eblk</ref>;</highlight></codeline>
<codeline lineno="3057"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3058"><highlight class="normal"><sp/><sp/><ref refid="dagimp_8cpp_1af72073a672fb009b5005670cb78a4598" kindref="member">eblk</ref>;</highlight></codeline>
<codeline lineno="3059"><highlight class="normal"></highlight><highlight class="preprocessor">#undef<sp/>rd</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3060"><highlight class="normal"></highlight><highlight class="preprocessor">#undef<sp/>bblk</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3061"><highlight class="normal"></highlight><highlight class="preprocessor">#undef<sp/>eblk</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3062"><highlight class="normal"><sp/><sp/><ref refid="polyBumpUtil_8cpp_1aed5a458133572985ccc7fc10a3159f6b" kindref="member">fclose</ref>(<ref refid="polyBumpUtil_8cpp_1a48d03c7323d95df49ef19db24dcb5c71" kindref="member">h</ref>);</highlight></codeline>
<codeline lineno="3063"><highlight class="normal"></highlight></codeline>
<codeline lineno="3064"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>MAX_RELEASE<sp/>&gt;=<sp/>12000</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3065"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>skin_data.Count();<sp/>i++)</highlight></codeline>
<codeline lineno="3066"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="3067"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structSkinData" kindref="compound">SkinData</ref><sp/>&amp;sd<sp/>=<sp/>*skin_data[i];</highlight></codeline>
<codeline lineno="3068"><highlight class="normal"><sp/><sp/><sp/><sp/>Modifier<sp/>*skinMod<sp/>=<sp/>(Modifier<sp/>*)CreateInstance(OSM_CLASS_ID,<sp/>SKIN_CLASSID);</highlight></codeline>
<codeline lineno="3069"><highlight class="normal"><sp/><sp/><sp/><sp/>GetCOREInterface12()-&gt;AddModifier(*sd.<ref refid="structSkinData_1a301c71b860d61b66cc134d8fa32c0d40" kindref="member">skinNode</ref>,<sp/>*skinMod);</highlight></codeline>
<codeline lineno="3070"><highlight class="normal"></highlight></codeline>
<codeline lineno="3071"><highlight class="normal"><sp/><sp/><sp/><sp/>ISkin<sp/>*iskin<sp/>=<sp/>(ISkin<sp/>*)skinMod-&gt;GetInterface(I_SKIN);</highlight></codeline>
<codeline lineno="3072"><highlight class="normal"><sp/><sp/><sp/><sp/>ISkinImportData<sp/>*iskinImport<sp/>=<sp/>(ISkinImportData<sp/>*)skinMod-&gt;GetInterface(I_SKINIMPORTDATA);</highlight></codeline>
<codeline lineno="3073"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(iskin);</highlight></codeline>
<codeline lineno="3074"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(iskinImport);</highlight></codeline>
<codeline lineno="3075"><highlight class="normal"></highlight></codeline>
<codeline lineno="3076"><highlight class="normal"><sp/><sp/><sp/><sp/>Tab&lt;INode<sp/>*&gt;<sp/>bn;</highlight></codeline>
<codeline lineno="3077"><highlight class="normal"><sp/><sp/><sp/><sp/>Tab&lt;float&gt;<sp/>wt;</highlight></codeline>
<codeline lineno="3078"><highlight class="normal"><sp/><sp/><sp/><sp/>bn.SetCount(sd.<ref refid="structSkinData_1a4167e987be1ffc0d7e646de9e751b7d8" kindref="member">numb</ref>);</highlight></codeline>
<codeline lineno="3079"><highlight class="normal"><sp/><sp/><sp/><sp/>wt.SetCount(sd.<ref refid="structSkinData_1a4167e987be1ffc0d7e646de9e751b7d8" kindref="member">numb</ref>);</highlight></codeline>
<codeline lineno="3080"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>bn.Count();<sp/>j++)</highlight></codeline>
<codeline lineno="3081"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3082"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>bn[j]<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="3083"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>k<sp/>=<sp/>0;<sp/>k<sp/>&lt;<sp/>node_id.Count();<sp/>k++)</highlight></codeline>
<codeline lineno="3084"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sd.<ref refid="structSkinData_1a39f8918842ee3cab77ef895ba17be64a" kindref="member">bones</ref>[j].id<sp/>==<sp/>node_id[k].id)</highlight></codeline>
<codeline lineno="3085"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3086"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bn[j]<sp/>=<sp/>node_id[k].node;</highlight></codeline>
<codeline lineno="3087"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3088"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3089"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>assert(bn[j]);</highlight></codeline>
<codeline lineno="3090"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>iskinImport-&gt;AddBoneEx(bn[j],<sp/>j<sp/>+<sp/>1<sp/>==<sp/>sd.<ref refid="structSkinData_1a4167e987be1ffc0d7e646de9e751b7d8" kindref="member">numb</ref>);</highlight></codeline>
<codeline lineno="3091"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3092"><highlight class="normal"></highlight></codeline>
<codeline lineno="3093"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>sd.<ref refid="structSkinData_1afda32c4bcf06a06aa0c4256dd4dc4264" kindref="member">numvert</ref>;<sp/>j++)</highlight></codeline>
<codeline lineno="3094"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3095"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>memcpy(&amp;wt[0],<sp/>&amp;sd.<ref refid="structSkinData_1a9900c187aea406202c9f86311d195897" kindref="member">wt</ref>[j<sp/>*<sp/>wt.Count()],<sp/>wt.Count()<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="3096"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>iskinImport-&gt;AddWeights(sd.<ref refid="structSkinData_1a301c71b860d61b66cc134d8fa32c0d40" kindref="member">skinNode</ref>,<sp/>j,<sp/>bn,<sp/>wt);</highlight></codeline>
<codeline lineno="3097"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3098"><highlight class="normal"></highlight></codeline>
<codeline lineno="3099"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>skin_data[i];</highlight></codeline>
<codeline lineno="3100"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3101"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3102"><highlight class="normal"></highlight></codeline>
<codeline lineno="3103"><highlight class="normal"><sp/><sp/>DebugPrint(_T(</highlight><highlight class="stringliteral">&quot;clean<sp/>up\n&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="3104"><highlight class="normal"><sp/><sp/>cleanup();</highlight></codeline>
<codeline lineno="3105"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>collapse_materials(ip);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3106"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>DebugPrint(_T(&quot;collapsed\n&quot;));</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3107"><highlight class="normal"><sp/><sp/><ref refid="dagimp_8cpp_1ad0d9f9930215478f9f60bb94f0d82ace" kindref="member">convertnew</ref>(ip,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3108"><highlight class="normal"></highlight></codeline>
<codeline lineno="3109"><highlight class="normal"><sp/><sp/>DebugPrint(_T(</highlight><highlight class="stringliteral">&quot;import<sp/>ok\n&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="3110"><highlight class="normal"></highlight></codeline>
<codeline lineno="3111"><highlight class="normal"><sp/><sp/><ref refid="classDagImp_1ab8685f3fdc76d40008c8c07f7db3689e" kindref="member">DagImp::importedFiles</ref>.insert(<ref refid="structImportedFile" kindref="compound">ImportedFile</ref>(fname));</highlight></codeline>
<codeline lineno="3112"><highlight class="normal"></highlight></codeline>
<codeline lineno="3113"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="3114"><highlight class="normal">read_err:</highlight></codeline>
<codeline lineno="3115"><highlight class="normal"><sp/><sp/>DebugPrint(_T(</highlight><highlight class="stringliteral">&quot;read<sp/>error<sp/>at<sp/>%X<sp/>of<sp/>%s\n&quot;</highlight><highlight class="normal">),<sp/>ftell(<ref refid="polyBumpUtil_8cpp_1a48d03c7323d95df49ef19db24dcb5c71" kindref="member">h</ref>),<sp/>scene_name.data());</highlight></codeline>
<codeline lineno="3116"><highlight class="normal"><sp/><sp/><ref refid="polyBumpUtil_8cpp_1aed5a458133572985ccc7fc10a3159f6b" kindref="member">fclose</ref>(<ref refid="polyBumpUtil_8cpp_1a48d03c7323d95df49ef19db24dcb5c71" kindref="member">h</ref>);</highlight></codeline>
<codeline lineno="3117"><highlight class="normal"><sp/><sp/>cleanup(1);</highlight></codeline>
<codeline lineno="3118"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!nomsg)</highlight></codeline>
<codeline lineno="3119"><highlight class="normal"><sp/><sp/><sp/><sp/>ip-&gt;DisplayTempPrompt(<ref refid="common_8cpp_1aeb87de5dfb5d632579574b4bc8709019" kindref="member">GetString</ref>(<ref refid="resource_8h_1a59ba3855e124a90f3ca7735d6ebde379" kindref="member">IDS_FILE_READ_ERR</ref>),<sp/><ref refid="dagimp_8cpp_1a398da37e411bb2d829f85232480defea" kindref="member">ERRMSG_DELAY</ref>);</highlight></codeline>
<codeline lineno="3120"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="3121"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3122"><highlight class="normal"></highlight></codeline>
<codeline lineno="3123"><highlight class="normal"></highlight><highlight class="comment">//==========================================================================//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3124"><highlight class="normal"></highlight></codeline>
<codeline lineno="3125"><highlight class="normal"></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/><ref refid="dagimp_8cpp_1aedf2203f712fbe26b8b78029f109b331" kindref="member">ImpOps</ref></highlight></codeline>
<codeline lineno="3126"><highlight class="normal">{</highlight></codeline>
<codeline lineno="3127"><highlight class="normal"><sp/><sp/><ref refid="dagimp_8cpp_1aedf2203f712fbe26b8b78029f109b331ad82a474a31c22cdf2df99a7172b4ed30" kindref="member">fun_import</ref></highlight></codeline>
<codeline lineno="3128"><highlight class="normal">};</highlight></codeline>
<codeline lineno="3129"><highlight class="normal"></highlight></codeline>
<codeline lineno="3130" refid="classIDagorImportUtil" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classIDagorImportUtil" kindref="compound">IDagorImportUtil</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>FPStaticInterface</highlight></codeline>
<codeline lineno="3131"><highlight class="normal">{</highlight></codeline>
<codeline lineno="3132"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="3133"><highlight class="normal"><sp/><sp/>DECLARE_DESCRIPTOR(<ref refid="classIDagorImportUtil" kindref="compound">IDagorImportUtil</ref>)</highlight></codeline>
<codeline lineno="3134"><highlight class="normal"><sp/><sp/>BEGIN_FUNCTION_MAP<sp/><ref refid="classIDagorImportUtil_1af0769700277192aeef1a9dff265e6b09" kindref="member">FN_9</ref>(<ref refid="dagimp_8cpp_1aedf2203f712fbe26b8b78029f109b331ad82a474a31c22cdf2df99a7172b4ed30" kindref="member">fun_import</ref>,<sp/>TYPE_BOOL,<sp/>import_dag,<sp/>TYPE_STRING,<sp/>TYPE_BOOL,<sp/>TYPE_BOOL,<sp/>TYPE_BOOL,<sp/>TYPE_BOOL,<sp/>TYPE_BOOL,</highlight></codeline>
<codeline lineno="3135"><highlight class="normal"><sp/><sp/><sp/><sp/>TYPE_BOOL,<sp/>TYPE_BOOL,<sp/>TYPE_BOOL)<sp/>END_FUNCTION_MAP</highlight></codeline>
<codeline lineno="3136"><highlight class="normal"></highlight></codeline>
<codeline lineno="3137"><highlight class="normal"><sp/><sp/><sp/><sp/>BOOL<sp/>import_dag(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TCHAR<sp/>*fn,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classIDagorImportUtil_1a3d71062da66ad372ba6ad35b7d8b5964" kindref="member">separateLayers</ref>,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classIDagorImportUtil_1aad66939c76e6fc74eb05a723b18a6e81" kindref="member">suppressPrompts</ref>,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classIDagorImportUtil_1a566409bc421efa357d78b5c26e0ef376" kindref="member">renameLayerCollision</ref>,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classIDagorImportUtil_1a40aa2893dc4d7388d6e890bfc2d1279f" kindref="member">useLegacyImport</ref>,</highlight></codeline>
<codeline lineno="3138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classIDagorImportUtil_1a48f86e5af8faf14071c3b5dc10596752" kindref="member">importLod</ref>,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classIDagorImportUtil_1aa4e598060bbbc04df6c11c5d0dad1247" kindref="member">importDestr</ref>,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classIDagorImportUtil_1ad887990e56e5c6d24194104af5018013" kindref="member">importDp</ref>,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classIDagorImportUtil_1aa22edeadf70aba5b01b8fe6a6d6cd63d" kindref="member">importDmg</ref>)</highlight></codeline>
<codeline lineno="3139"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="3140"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structDagImp_1_1Categories" kindref="compound">DagImp::Categories</ref><sp/>bkChecked<sp/>=<sp/><ref refid="classDagImp_1a7b2fc6f616381d3743a667637b550f4b" kindref="member">DagImp::checked</ref>;</highlight></codeline>
<codeline lineno="3141"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classIDagorImportUtil_1ae3bf9ec962b1c37c587407529c423a67" kindref="member">bkLegacy</ref><sp/>=<sp/><ref refid="classDagImp_1ae89838cf454485eaab1a6f5b752f4c15" kindref="member">DagImp::useLegacyImport</ref>;</highlight></codeline>
<codeline lineno="3142"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classIDagorImportUtil_1a774a10230221fff3739ae21526b5a219" kindref="member">bkReimportExisting</ref><sp/>=<sp/><ref refid="classDagImp_1a6a73e019f74e964f8a0121334ffb9903" kindref="member">DagImp::reimportExisting</ref>;</highlight></codeline>
<codeline lineno="3143"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classIDagorImportUtil_1a00071ed211fe8e34a3eb0149ed2f55fd" kindref="member">bkSeparate</ref><sp/>=<sp/><ref refid="classDagImp_1a1d12c2444eae41164409f661f59a25b8" kindref="member">DagImp::separateLayers</ref>;</highlight></codeline>
<codeline lineno="3144"><highlight class="normal"></highlight></codeline>
<codeline lineno="3145"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classDagImp_1a1d12c2444eae41164409f661f59a25b8" kindref="member">DagImp::separateLayers</ref><sp/>=<sp/><ref refid="classIDagorImportUtil_1a3d71062da66ad372ba6ad35b7d8b5964" kindref="member">separateLayers</ref>;</highlight></codeline>
<codeline lineno="3146"><highlight class="normal"></highlight></codeline>
<codeline lineno="3147"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classDagImp_1ae89838cf454485eaab1a6f5b752f4c15" kindref="member">DagImp::useLegacyImport</ref><sp/>=<sp/><ref refid="classIDagorImportUtil_1a40aa2893dc4d7388d6e890bfc2d1279f" kindref="member">useLegacyImport</ref>;</highlight></codeline>
<codeline lineno="3148"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classDagImp_1a6a73e019f74e964f8a0121334ffb9903" kindref="member">DagImp::reimportExisting</ref><sp/>=<sp/>!<ref refid="classIDagorImportUtil_1a566409bc421efa357d78b5c26e0ef376" kindref="member">renameLayerCollision</ref>;</highlight></codeline>
<codeline lineno="3149"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classDagImp_1a7b2fc6f616381d3743a667637b550f4b" kindref="member">DagImp::checked</ref>.<ref refid="structDagImp_1_1Categories_1a509875fe77af0158bb4bcb366a3f09b4" kindref="member">lod</ref><sp/>=<sp/><ref refid="classIDagorImportUtil_1a48f86e5af8faf14071c3b5dc10596752" kindref="member">importLod</ref>;</highlight></codeline>
<codeline lineno="3150"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classDagImp_1a7b2fc6f616381d3743a667637b550f4b" kindref="member">DagImp::checked</ref>.<ref refid="structDagImp_1_1Categories_1ab947250827de77b24220484843131753" kindref="member">destr</ref><sp/>=<sp/><ref refid="classIDagorImportUtil_1aa4e598060bbbc04df6c11c5d0dad1247" kindref="member">importDestr</ref>;</highlight></codeline>
<codeline lineno="3151"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classDagImp_1a7b2fc6f616381d3743a667637b550f4b" kindref="member">DagImp::checked</ref>.<ref refid="structDagImp_1_1Categories_1a183c0c95383a5e5c5bd3b325fd30d4e3" kindref="member">dp</ref><sp/>=<sp/><ref refid="classIDagorImportUtil_1ad887990e56e5c6d24194104af5018013" kindref="member">importDp</ref>;</highlight></codeline>
<codeline lineno="3152"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classDagImp_1a7b2fc6f616381d3743a667637b550f4b" kindref="member">DagImp::checked</ref>.<ref refid="structDagImp_1_1Categories_1a1e681220bbe07d46e3e84808d4ebc102" kindref="member">dmg</ref><sp/>=<sp/><ref refid="classIDagorImportUtil_1aa22edeadf70aba5b01b8fe6a6d6cd63d" kindref="member">importDmg</ref>;</highlight></codeline>
<codeline lineno="3153"><highlight class="normal"></highlight></codeline>
<codeline lineno="3154"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classAutotoggle" kindref="compound">Autotoggle</ref><sp/><ref refid="classIDagorImportUtil_1a05c543e81bdecf26dded46448a657bf0" kindref="member">guard</ref>(<ref refid="classDagImp_1ab1597f608c0098f1df0acf54f9ca1b17" kindref="member">DagImp::nonInteractive</ref>);</highlight></codeline>
<codeline lineno="3155"><highlight class="normal"><sp/><sp/><sp/><sp/>BOOL<sp/><ref refid="classIDagorImportUtil_1a8496c84bdbe4c501f0d14ebeae7d6559" kindref="member">result</ref><sp/>=<sp/>GetCOREInterface()-&gt;ImportFromFile(fn,<sp/><ref refid="classIDagorImportUtil_1aad66939c76e6fc74eb05a723b18a6e81" kindref="member">suppressPrompts</ref>);</highlight></codeline>
<codeline lineno="3156"><highlight class="normal"></highlight></codeline>
<codeline lineno="3157"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classDagImp_1a6a73e019f74e964f8a0121334ffb9903" kindref="member">DagImp::reimportExisting</ref><sp/>=<sp/><ref refid="classIDagorImportUtil_1a774a10230221fff3739ae21526b5a219" kindref="member">bkReimportExisting</ref>;</highlight></codeline>
<codeline lineno="3158"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classDagImp_1ae89838cf454485eaab1a6f5b752f4c15" kindref="member">DagImp::useLegacyImport</ref><sp/>=<sp/><ref refid="classIDagorImportUtil_1ae3bf9ec962b1c37c587407529c423a67" kindref="member">bkLegacy</ref>;</highlight></codeline>
<codeline lineno="3159"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classDagImp_1a7b2fc6f616381d3743a667637b550f4b" kindref="member">DagImp::checked</ref><sp/>=<sp/>bkChecked;</highlight></codeline>
<codeline lineno="3160"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classDagImp_1a1d12c2444eae41164409f661f59a25b8" kindref="member">DagImp::separateLayers</ref><sp/>=<sp/><ref refid="classIDagorImportUtil_1a00071ed211fe8e34a3eb0149ed2f55fd" kindref="member">bkSeparate</ref>;</highlight></codeline>
<codeline lineno="3161"><highlight class="normal"></highlight></codeline>
<codeline lineno="3162"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classIDagorImportUtil_1a8496c84bdbe4c501f0d14ebeae7d6559" kindref="member">result</ref>;</highlight></codeline>
<codeline lineno="3163"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3164"><highlight class="normal">};</highlight></codeline>
<codeline lineno="3165"><highlight class="normal"></highlight></codeline>
<codeline lineno="3166"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="classIDagorImportUtil" kindref="compound">IDagorImportUtil</ref><sp/>dagorimputiliface(Interface_ID(0x20906172,<sp/>0x435c11e0),<sp/>_T(</highlight><highlight class="stringliteral">&quot;dagorImport&quot;</highlight><highlight class="normal">),<sp/><ref refid="resource_8h_1a92e5a0b7c8428daef424c1068b0019fc" kindref="member">IDS_DAGOR_IMPORT_IFACE</ref>,<sp/>NULL,</highlight></codeline>
<codeline lineno="3167"><highlight class="normal"><sp/><sp/>FP_CORE,<sp/><ref refid="dagimp_8cpp_1aedf2203f712fbe26b8b78029f109b331ad82a474a31c22cdf2df99a7172b4ed30" kindref="member">fun_import</ref>,<sp/>_T(</highlight><highlight class="stringliteral">&quot;import&quot;</highlight><highlight class="normal">),<sp/>-1,<sp/>TYPE_BOOL,<sp/>0,<sp/>9,<sp/>_T(</highlight><highlight class="stringliteral">&quot;filename&quot;</highlight><highlight class="normal">),<sp/>-1,<sp/>TYPE_STRING,</highlight></codeline>
<codeline lineno="3168"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>f_keyArgDefault<sp/>marks<sp/>an<sp/>optional<sp/>keyArg<sp/>param.<sp/>The<sp/>value</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3169"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>after<sp/>that<sp/>is<sp/>its<sp/>default<sp/>value.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3170"><highlight class="normal"><sp/><sp/>_T(</highlight><highlight class="stringliteral">&quot;separateLayers&quot;</highlight><highlight class="normal">),<sp/>-1,<sp/>TYPE_BOOL,<sp/>f_keyArgDefault,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/>_T(</highlight><highlight class="stringliteral">&quot;suppressPrompts&quot;</highlight><highlight class="normal">),<sp/>-1,<sp/>TYPE_BOOL,<sp/>f_keyArgDefault,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="3171"><highlight class="normal"><sp/><sp/>_T(</highlight><highlight class="stringliteral">&quot;renameLayerCollision&quot;</highlight><highlight class="normal">),<sp/>-1,<sp/>TYPE_BOOL,<sp/>f_keyArgDefault,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/>_T(</highlight><highlight class="stringliteral">&quot;useLegacyImport&quot;</highlight><highlight class="normal">),<sp/>-1,<sp/>TYPE_BOOL,<sp/>f_keyArgDefault,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="3172"><highlight class="normal"><sp/><sp/>_T(</highlight><highlight class="stringliteral">&quot;importLod&quot;</highlight><highlight class="normal">),<sp/>-1,<sp/>TYPE_BOOL,<sp/>f_keyArgDefault,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/>_T(</highlight><highlight class="stringliteral">&quot;importDestr&quot;</highlight><highlight class="normal">),<sp/>-1,<sp/>TYPE_BOOL,<sp/>f_keyArgDefault,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/>_T(</highlight><highlight class="stringliteral">&quot;importDp&quot;</highlight><highlight class="normal">),<sp/>-1,</highlight></codeline>
<codeline lineno="3173"><highlight class="normal"><sp/><sp/>TYPE_BOOL,<sp/>f_keyArgDefault,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/>_T(</highlight><highlight class="stringliteral">&quot;importDmg&quot;</highlight><highlight class="normal">),<sp/>-1,<sp/>TYPE_BOOL,<sp/>f_keyArgDefault,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="3174"><highlight class="normal">#</highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>defined(MAX_RELEASE_R15)<sp/>&amp;&amp;<sp/>MAX_RELEASE<sp/>&gt;=<sp/>MAX_RELEASE_R15</highlight></codeline>
<codeline lineno="3175"><highlight class="normal"><sp/><sp/>p_end</highlight></codeline>
<codeline lineno="3176"><highlight class="normal">#</highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3177"><highlight class="normal"><sp/><sp/>end</highlight></codeline>
<codeline lineno="3178"><highlight class="normal">#endif</highlight></codeline>
<codeline lineno="3179"><highlight class="normal">);</highlight></codeline>
    </programlisting>
    <location file="dagimp.cpp"/>
  </compounddef>
</doxygen>
