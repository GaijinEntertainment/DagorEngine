<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.7" xml:lang="en-US">
  <compounddef id="expanim2_8cpp" kind="file" language="C++">
    <compoundname>expanim2.cpp</compoundname>
    <includes local="no">max.h</includes>
    <includes refid="expanim_8h" local="yes">expanim.h</includes>
    <includes refid="expanim2_8h" local="yes">expanim2.h</includes>
    <includes refid="dagor_8h" local="yes">dagor.h</includes>
    <includes refid="resource_8h" local="yes">resource.h</includes>
    <incdepgraph>
      <node id="6">
        <label>dagor.h</label>
        <link refid="dagor_8h"/>
      </node>
      <node id="5">
        <label>debug.h</label>
        <link refid="debug_8h"/>
      </node>
      <node id="3">
        <label>expanim.h</label>
        <link refid="expanim_8h"/>
      </node>
      <node id="1">
        <label>expanim2.cpp</label>
        <link refid="expanim2_8cpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>expanim2.h</label>
        <link refid="expanim2_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="7">
        <label>resource.h</label>
        <link refid="resource_8h"/>
      </node>
      <node id="2">
        <label>max.h</label>
      </node>
    </incdepgraph>
      <sectiondef kind="var">
      <memberdef kind="variable" id="expanim2_8cpp_1afa2a135a5d79a1b9b16782f89a26c394" prot="public" static="yes" mutable="no">
        <type>Interval</type>
        <definition>Interval lim</definition>
        <argsstring></argsstring>
        <name>lim</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="expanim2.cpp" line="10" column="17" bodyfile="expanim2.cpp" bodystart="10" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="expanim2_8cpp_1a3752516b7997c1a03d6d0651d0d3f47f" prot="public" static="yes" mutable="no">
        <type>float</type>
        <definition>float ort_thr</definition>
        <argsstring></argsstring>
        <name>ort_thr</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="expanim2.cpp" line="11" column="14" bodyfile="expanim2.cpp" bodystart="11" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="expanim2_8cpp_1a91c71f6a0e98e165f693ac7d75dc42f1" prot="public" static="yes" mutable="no">
        <type>char</type>
        <definition>char _usekeys</definition>
        <argsstring></argsstring>
        <name>_usekeys</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="expanim2.cpp" line="12" column="13" bodyfile="expanim2.cpp" bodystart="12" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="expanim2_8cpp_1a562fea8010dc458493c75cb8f59dfc01" prot="public" static="yes" mutable="no">
        <type>Tab&lt; TimeValue &gt;</type>
        <definition>Tab&lt;TimeValue&gt; ktime</definition>
        <argsstring></argsstring>
        <name>ktime</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="expanim2.cpp" line="14" column="12" bodyfile="expanim2.cpp" bodystart="14" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="expanim2_8cpp_1a57afa6e1038225537ef9ecb65808d8ec" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>Quat</type>
        <definition>static Quat qadd</definition>
        <argsstring>(Quat a, Quat b)</argsstring>
        <name>qadd</name>
        <param>
          <type>Quat</type>
          <declname>a</declname>
        </param>
        <param>
          <type>Quat</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="expanim2.cpp" line="16" column="20" bodyfile="expanim2.cpp" bodystart="16" bodyend="21"/>
      </memberdef>
      <memberdef kind="function" id="expanim2_8cpp_1a08a220becd6823469691d6bffd291148" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double length</definition>
        <argsstring>(Quat &amp;q)</argsstring>
        <name>length</name>
        <param>
          <type>Quat &amp;</type>
          <declname>q</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="expanim2.cpp" line="22" column="8" bodyfile="expanim2.cpp" bodystart="22" bodyend="22"/>
      </memberdef>
      <memberdef kind="function" id="expanim2_8cpp_1a8bc5f96b77c535fed781fecf26885fc1" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>Quat</type>
        <definition>static Quat SLERP</definition>
        <argsstring>(Quat a, Quat b, float t)</argsstring>
        <name>SLERP</name>
        <param>
          <type>Quat</type>
          <declname>a</declname>
        </param>
        <param>
          <type>Quat</type>
          <declname>b</declname>
        </param>
        <param>
          <type>float</type>
          <declname>t</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="expanim2.cpp" line="24" column="20" bodyfile="expanim2.cpp" bodystart="24" bodyend="47"/>
      </memberdef>
      <memberdef kind="function" id="expanim2_8cpp_1a2ae5ab2353adb105767c116b2cd3f36b" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int cmp_time</definition>
        <argsstring>(const void *a, const void *b)</argsstring>
        <name>cmp_time</name>
        <param>
          <type>const void *</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="expanim2.cpp" line="49" column="12" bodyfile="expanim2.cpp" bodystart="49" bodyend="49"/>
      </memberdef>
      <memberdef kind="function" id="expanim2_8cpp_1a9967c23f264145d299aea398596d74c1" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void sort_ktime</definition>
        <argsstring>()</argsstring>
        <name>sort_ktime</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="expanim2.cpp" line="51" column="20" bodyfile="expanim2.cpp" bodystart="51" bodyend="51"/>
      </memberdef>
      <memberdef kind="function" id="expanim2_8cpp_1ab811677f9e09bec69f6e7fedfdc4c51f" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void add_ktime</definition>
        <argsstring>(TimeValue t, bool check=true)</argsstring>
        <name>add_ktime</name>
        <param>
          <type>TimeValue</type>
          <declname>t</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>check</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="expanim2.cpp" line="53" column="20" bodyfile="expanim2.cpp" bodystart="53" bodyend="60"/>
      </memberdef>
      <memberdef kind="function" id="expanim2_8cpp_1a9472be0174fbddf8253a8e1d8828289d" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void calc_cp</definition>
        <argsstring>(PosKey &amp;k0, PosKey &amp;k1, Point3 p13, Point3 p23)</argsstring>
        <name>calc_cp</name>
        <param>
          <type><ref refid="structPosKey" kindref="compound">PosKey</ref> &amp;</type>
          <declname>k0</declname>
        </param>
        <param>
          <type><ref refid="structPosKey" kindref="compound">PosKey</ref> &amp;</type>
          <declname>k1</declname>
        </param>
        <param>
          <type>Point3</type>
          <declname>p13</declname>
        </param>
        <param>
          <type>Point3</type>
          <declname>p23</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="expanim2.cpp" line="62" column="20" bodyfile="expanim2.cpp" bodystart="62" bodyend="66"/>
      </memberdef>
      <memberdef kind="function" id="expanim2_8cpp_1a1fd97171a1606a9c25ec0b898a75ee4f" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void calc_cpi</definition>
        <argsstring>(PosKey &amp;k0, PosKey &amp;k1, Point3 p23)</argsstring>
        <name>calc_cpi</name>
        <param>
          <type><ref refid="structPosKey" kindref="compound">PosKey</ref> &amp;</type>
          <declname>k0</declname>
        </param>
        <param>
          <type><ref refid="structPosKey" kindref="compound">PosKey</ref> &amp;</type>
          <declname>k1</declname>
        </param>
        <param>
          <type>Point3</type>
          <declname>p23</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="expanim2.cpp" line="68" column="20" bodyfile="expanim2.cpp" bodystart="68" bodyend="71"/>
      </memberdef>
      <memberdef kind="function" id="expanim2_8cpp_1afd37747c13891bca5d49f7df2076722f" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void calc_cpo</definition>
        <argsstring>(PosKey &amp;k0, PosKey &amp;k1, Point3 p13)</argsstring>
        <name>calc_cpo</name>
        <param>
          <type><ref refid="structPosKey" kindref="compound">PosKey</ref> &amp;</type>
          <declname>k0</declname>
        </param>
        <param>
          <type><ref refid="structPosKey" kindref="compound">PosKey</ref> &amp;</type>
          <declname>k1</declname>
        </param>
        <param>
          <type>Point3</type>
          <declname>p13</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="expanim2.cpp" line="73" column="20" bodyfile="expanim2.cpp" bodystart="73" bodyend="76"/>
      </memberdef>
      <memberdef kind="function" id="expanim2_8cpp_1a5e4ed28141d077fc74719cea7f40e97a" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void calc_cp</definition>
        <argsstring>(RotKey &amp;k0, RotKey &amp;k1, Quat p13, Quat p23)</argsstring>
        <name>calc_cp</name>
        <param>
          <type><ref refid="structRotKey" kindref="compound">RotKey</ref> &amp;</type>
          <declname>k0</declname>
        </param>
        <param>
          <type><ref refid="structRotKey" kindref="compound">RotKey</ref> &amp;</type>
          <declname>k1</declname>
        </param>
        <param>
          <type>Quat</type>
          <declname>p13</declname>
        </param>
        <param>
          <type>Quat</type>
          <declname>p23</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="expanim2.cpp" line="78" column="20" bodyfile="expanim2.cpp" bodystart="78" bodyend="86"/>
      </memberdef>
      <memberdef kind="function" id="expanim2_8cpp_1aacc9aea059e54debf28969ce4a669775" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void calc_cpi</definition>
        <argsstring>(RotKey &amp;k0, RotKey &amp;k1, Quat p23)</argsstring>
        <name>calc_cpi</name>
        <param>
          <type><ref refid="structRotKey" kindref="compound">RotKey</ref> &amp;</type>
          <declname>k0</declname>
        </param>
        <param>
          <type><ref refid="structRotKey" kindref="compound">RotKey</ref> &amp;</type>
          <declname>k1</declname>
        </param>
        <param>
          <type>Quat</type>
          <declname>p23</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="expanim2.cpp" line="88" column="20" bodyfile="expanim2.cpp" bodystart="88" bodyend="92"/>
      </memberdef>
      <memberdef kind="function" id="expanim2_8cpp_1a2312c5b42fc6404bff3fbd971da03ae1" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void calc_cpo</definition>
        <argsstring>(RotKey &amp;k0, RotKey &amp;k1, Quat p13)</argsstring>
        <name>calc_cpo</name>
        <param>
          <type><ref refid="structRotKey" kindref="compound">RotKey</ref> &amp;</type>
          <declname>k0</declname>
        </param>
        <param>
          <type><ref refid="structRotKey" kindref="compound">RotKey</ref> &amp;</type>
          <declname>k1</declname>
        </param>
        <param>
          <type>Quat</type>
          <declname>p13</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="expanim2.cpp" line="94" column="20" bodyfile="expanim2.cpp" bodystart="94" bodyend="98"/>
      </memberdef>
      <memberdef kind="function" id="expanim2_8cpp_1a5cf62865552580a6e51d5aa1a69e1f63" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>static int is_orthog</definition>
        <argsstring>(Point3 ax, Point3 ay, Point3 az)</argsstring>
        <name>is_orthog</name>
        <param>
          <type>Point3</type>
          <declname>ax</declname>
        </param>
        <param>
          <type>Point3</type>
          <declname>ay</declname>
        </param>
        <param>
          <type>Point3</type>
          <declname>az</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="expanim2.cpp" line="100" column="19" bodyfile="expanim2.cpp" bodystart="100" bodyend="109"/>
      </memberdef>
      <memberdef kind="function" id="expanim2_8cpp_1a401bc36546369ee5bdaeeea99d94d3ce" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void interp_tm</definition>
        <argsstring>(TimeValue t, Point3 &amp;p, Quat &amp;q, Point3 &amp;s, ExpTMAnimCB &amp;cb)</argsstring>
        <name>interp_tm</name>
        <param>
          <type>TimeValue</type>
          <declname>t</declname>
        </param>
        <param>
          <type>Point3 &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>Quat &amp;</type>
          <declname>q</declname>
        </param>
        <param>
          <type>Point3 &amp;</type>
          <declname>s</declname>
        </param>
        <param>
          <type><ref refid="classExpTMAnimCB" kindref="compound">ExpTMAnimCB</ref> &amp;</type>
          <declname>cb</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="expanim2.cpp" line="111" column="13" bodyfile="expanim2.cpp" bodystart="111" bodyend="140"/>
      </memberdef>
      <memberdef kind="function" id="expanim2_8cpp_1a749ded6cb3adf95664248478552a9978" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>Matrix3</type>
        <definition>static Matrix3 make_tm</definition>
        <argsstring>(Point3 p, Quat r, Point3 s)</argsstring>
        <name>make_tm</name>
        <param>
          <type>Point3</type>
          <declname>p</declname>
        </param>
        <param>
          <type>Quat</type>
          <declname>r</declname>
        </param>
        <param>
          <type>Point3</type>
          <declname>s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="expanim2.cpp" line="142" column="23" bodyfile="expanim2.cpp" bodystart="142" bodyend="151"/>
      </memberdef>
      <memberdef kind="function" id="expanim2_8cpp_1a54b93c8442d246adbe5bc734605f9c14" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>BOOL</type>
        <definition>static BOOL pos_equal</definition>
        <argsstring>(Point3 a, Point3 b, float t)</argsstring>
        <name>pos_equal</name>
        <param>
          <type>Point3</type>
          <declname>a</declname>
        </param>
        <param>
          <type>Point3</type>
          <declname>b</declname>
        </param>
        <param>
          <type>float</type>
          <declname>t</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="expanim2.cpp" line="153" column="20" bodyfile="expanim2.cpp" bodystart="153" bodyend="159"/>
      </memberdef>
      <memberdef kind="function" id="expanim2_8cpp_1a9f48eb61ec05baf28dda4c86600d3941" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>BOOL</type>
        <definition>static BOOL rot_equal</definition>
        <argsstring>(Quat a, Quat b, float t)</argsstring>
        <name>rot_equal</name>
        <param>
          <type>Quat</type>
          <declname>a</declname>
        </param>
        <param>
          <type>Quat</type>
          <declname>b</declname>
        </param>
        <param>
          <type>float</type>
          <declname>t</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="expanim2.cpp" line="161" column="20" bodyfile="expanim2.cpp" bodystart="161" bodyend="161"/>
      </memberdef>
      <memberdef kind="function" id="expanim2_8cpp_1abe573993c63076b20b621d22acc7faf0" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>BOOL</type>
        <definition>static BOOL scl_equal</definition>
        <argsstring>(Point3 a, Point3 b, float t)</argsstring>
        <name>scl_equal</name>
        <param>
          <type>Point3</type>
          <declname>a</declname>
        </param>
        <param>
          <type>Point3</type>
          <declname>b</declname>
        </param>
        <param>
          <type>float</type>
          <declname>t</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="expanim2.cpp" line="163" column="20" bodyfile="expanim2.cpp" bodystart="163" bodyend="167"/>
      </memberdef>
      <memberdef kind="function" id="expanim2_8cpp_1a478602feace2dde8c30afe472e37fb9b" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>Point3</type>
        <definition>static Point3 interp_seg</definition>
        <argsstring>(PosKey a, PosKey b, TimeValue time)</argsstring>
        <name>interp_seg</name>
        <param>
          <type><ref refid="structPosKey" kindref="compound">PosKey</ref></type>
          <declname>a</declname>
        </param>
        <param>
          <type><ref refid="structPosKey" kindref="compound">PosKey</ref></type>
          <declname>b</declname>
        </param>
        <param>
          <type>TimeValue</type>
          <declname>time</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="expanim2.cpp" line="169" column="22" bodyfile="expanim2.cpp" bodystart="169" bodyend="174"/>
      </memberdef>
      <memberdef kind="function" id="expanim2_8cpp_1a3db5785e7d721e3a5067c0be4a9ffcb9" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>Quat</type>
        <definition>static Quat interp_seg</definition>
        <argsstring>(RotKey a, RotKey b, TimeValue time)</argsstring>
        <name>interp_seg</name>
        <param>
          <type><ref refid="structRotKey" kindref="compound">RotKey</ref></type>
          <declname>a</declname>
        </param>
        <param>
          <type><ref refid="structRotKey" kindref="compound">RotKey</ref></type>
          <declname>b</declname>
        </param>
        <param>
          <type>TimeValue</type>
          <declname>time</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="expanim2.cpp" line="176" column="20" bodyfile="expanim2.cpp" bodystart="176" bodyend="183"/>
      </memberdef>
      <memberdef kind="function" id="expanim2_8cpp_1a0f4dd4c01c79a1c90631729d167bd502" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void make_seg_smooth</definition>
        <argsstring>(PosKey a, PosKey &amp;b, PosKey &amp;c, PosKey d)</argsstring>
        <name>make_seg_smooth</name>
        <param>
          <type><ref refid="structPosKey" kindref="compound">PosKey</ref></type>
          <declname>a</declname>
        </param>
        <param>
          <type><ref refid="structPosKey" kindref="compound">PosKey</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <param>
          <type><ref refid="structPosKey" kindref="compound">PosKey</ref> &amp;</type>
          <declname>c</declname>
        </param>
        <param>
          <type><ref refid="structPosKey" kindref="compound">PosKey</ref></type>
          <declname>d</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="expanim2.cpp" line="185" column="20" bodyfile="expanim2.cpp" bodystart="185" bodyend="195"/>
      </memberdef>
      <memberdef kind="function" id="expanim2_8cpp_1a2b234b795b6e90bfd0bc6617a7d8d3b2" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>float</type>
        <definition>static float quatang</definition>
        <argsstring>(Quat a, Quat b)</argsstring>
        <name>quatang</name>
        <param>
          <type>Quat</type>
          <declname>a</declname>
        </param>
        <param>
          <type>Quat</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="expanim2.cpp" line="197" column="21" bodyfile="expanim2.cpp" bodystart="197" bodyend="203"/>
      </memberdef>
      <memberdef kind="function" id="expanim2_8cpp_1a3fe8d796e89186f9eddeff470da1cffd" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void make_seg_smooth</definition>
        <argsstring>(RotKey a, RotKey &amp;b, RotKey &amp;c, RotKey d)</argsstring>
        <name>make_seg_smooth</name>
        <param>
          <type><ref refid="structRotKey" kindref="compound">RotKey</ref></type>
          <declname>a</declname>
        </param>
        <param>
          <type><ref refid="structRotKey" kindref="compound">RotKey</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <param>
          <type><ref refid="structRotKey" kindref="compound">RotKey</ref> &amp;</type>
          <declname>c</declname>
        </param>
        <param>
          <type><ref refid="structRotKey" kindref="compound">RotKey</ref></type>
          <declname>d</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="expanim2.cpp" line="205" column="20" bodyfile="expanim2.cpp" bodystart="205" bodyend="223"/>
      </memberdef>
      <memberdef kind="function" id="expanim2_8cpp_1a85b4ef97de80b3fcd181c4136ee943a6" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>DWORD WINAPI</type>
        <definition>static DWORD WINAPI dummyfn</definition>
        <argsstring>(LPVOID a)</argsstring>
        <name>dummyfn</name>
        <param>
          <type>LPVOID</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="expanim2.cpp" line="225" column="21" bodyfile="expanim2.cpp" bodystart="225" bodyend="225"/>
      </memberdef>
      <memberdef kind="function" id="expanim2_8cpp_1aa8d675fd55f1f881189322bcaf712b2a" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void debug_pos_diff</definition>
        <argsstring>(const char *nodename, const Tab&lt; PosKey &gt; &amp;pos, const Tab&lt; Point3 &gt; &amp;temp_pos, float thres)</argsstring>
        <name>debug_pos_diff</name>
        <param>
          <type>const char *</type>
          <declname>nodename</declname>
        </param>
        <param>
          <type>const Tab&lt; <ref refid="structPosKey" kindref="compound">PosKey</ref> &gt; &amp;</type>
          <declname>pos</declname>
        </param>
        <param>
          <type>const Tab&lt; Point3 &gt; &amp;</type>
          <declname>temp_pos</declname>
        </param>
        <param>
          <type>float</type>
          <declname>thres</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="expanim2.cpp" line="946" column="13" bodyfile="expanim2.cpp" bodystart="946" bodyend="974" declfile="expanim2.cpp" declline="226" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="expanim2_8cpp_1a3b39b65e47dafa43ee2b2788a546a3df" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void debug_rot_diff</definition>
        <argsstring>(const char *nodename, const Tab&lt; RotKey &gt; &amp;pos, const Tab&lt; Quat &gt; &amp;temp_pos, float thres)</argsstring>
        <name>debug_rot_diff</name>
        <param>
          <type>const char *</type>
          <declname>nodename</declname>
        </param>
        <param>
          <type>const Tab&lt; <ref refid="structRotKey" kindref="compound">RotKey</ref> &gt; &amp;</type>
          <declname>pos</declname>
        </param>
        <param>
          <type>const Tab&lt; Quat &gt; &amp;</type>
          <declname>temp_pos</declname>
        </param>
        <param>
          <type>float</type>
          <declname>thres</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="expanim2.cpp" line="918" column="13" bodyfile="expanim2.cpp" bodystart="918" bodyend="945" declfile="expanim2.cpp" declline="227" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="expanim2_8cpp_1ae0071b7c244655047c238cef032a453e" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void optimize_pos_key</definition>
        <argsstring>(Tab&lt; PosKey &gt; &amp;pos, int ktime_count, bool reduce_keys, Interval limit, float pos_thr, const char *label)</argsstring>
        <name>optimize_pos_key</name>
        <param>
          <type>Tab&lt; <ref refid="structPosKey" kindref="compound">PosKey</ref> &gt; &amp;</type>
          <declname>pos</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ktime_count</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>reduce_keys</declname>
        </param>
        <param>
          <type>Interval</type>
          <declname>limit</declname>
        </param>
        <param>
          <type>float</type>
          <declname>pos_thr</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>label</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="expanim2.cpp" line="229" column="13" bodyfile="expanim2.cpp" bodystart="229" bodyend="326"/>
      </memberdef>
      <memberdef kind="function" id="expanim2_8cpp_1ac90071999aca7d0365ed0dc427a97588" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void optimize_rot_key</definition>
        <argsstring>(Tab&lt; RotKey &gt; &amp;rot, int ktime_count, bool reduce_keys, Interval limit, float rot_thr, const char *label)</argsstring>
        <name>optimize_rot_key</name>
        <param>
          <type>Tab&lt; <ref refid="structRotKey" kindref="compound">RotKey</ref> &gt; &amp;</type>
          <declname>rot</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ktime_count</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>reduce_keys</declname>
        </param>
        <param>
          <type>Interval</type>
          <declname>limit</declname>
        </param>
        <param>
          <type>float</type>
          <declname>rot_thr</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>label</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="expanim2.cpp" line="328" column="13" bodyfile="expanim2.cpp" bodystart="328" bodyend="427"/>
      </memberdef>
      <memberdef kind="function" id="expanim2_8cpp_1ae1257538fde79484270e1100e424a270" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool get_tm_anim_2</definition>
        <argsstring>(Tab&lt; AnimChanPoint3 * &gt; &amp;npos, Tab&lt; AnimChanQuat * &gt; &amp;nrot, Tab&lt; AnimChanPoint3 * &gt; &amp;nscl, const Interval &amp;limit, const Tab&lt; INode * &gt; &amp;node, const Tab&lt; ExpTMAnimCB * &gt; &amp;ncb, float pos_thr, float rot_thr, float scl_thr, float ort_eps, int expflags)</argsstring>
        <name>get_tm_anim_2</name>
        <param>
          <type>Tab&lt; <ref refid="structAnimChanPoint3" kindref="compound">AnimChanPoint3</ref> * &gt; &amp;</type>
          <declname>npos</declname>
        </param>
        <param>
          <type>Tab&lt; <ref refid="structAnimChanQuat" kindref="compound">AnimChanQuat</ref> * &gt; &amp;</type>
          <declname>nrot</declname>
        </param>
        <param>
          <type>Tab&lt; <ref refid="structAnimChanPoint3" kindref="compound">AnimChanPoint3</ref> * &gt; &amp;</type>
          <declname>nscl</declname>
        </param>
        <param>
          <type>const Interval &amp;</type>
          <declname>limit</declname>
        </param>
        <param>
          <type>const Tab&lt; INode * &gt; &amp;</type>
          <declname>node</declname>
        </param>
        <param>
          <type>const Tab&lt; <ref refid="classExpTMAnimCB" kindref="compound">ExpTMAnimCB</ref> * &gt; &amp;</type>
          <declname>ncb</declname>
        </param>
        <param>
          <type>float</type>
          <declname>pos_thr</declname>
        </param>
        <param>
          <type>float</type>
          <declname>rot_thr</declname>
        </param>
        <param>
          <type>float</type>
          <declname>scl_thr</declname>
        </param>
        <param>
          <type>float</type>
          <declname>ort_eps</declname>
        </param>
        <param>
          <type>int</type>
          <declname>expflags</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="expanim2.cpp" line="429" column="6" bodyfile="expanim2.cpp" bodystart="429" bodyend="600"/>
      </memberdef>
      <memberdef kind="function" id="expanim2_8cpp_1a33ec6357564a85171cd85c6125f66666" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Point3</type>
        <definition>Point3 getAngularVelocity</definition>
        <argsstring>(const Quat &amp;q0, const Quat &amp;q1, float dt)</argsstring>
        <name>getAngularVelocity</name>
        <param>
          <type>const Quat &amp;</type>
          <declname>q0</declname>
        </param>
        <param>
          <type>const Quat &amp;</type>
          <declname>q1</declname>
        </param>
        <param>
          <type>float</type>
          <declname>dt</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="expanim2.cpp" line="602" column="8" bodyfile="expanim2.cpp" bodystart="602" bodyend="623"/>
      </memberdef>
      <memberdef kind="function" id="expanim2_8cpp_1acc100143ff47c9ca807a72a2077fc96a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool get_node_vel</definition>
        <argsstring>(Tab&lt; AnimKeyPoint3 &gt; &amp;lin_vel, Tab&lt; AnimKeyPoint3 &gt; &amp;ang_vel, Tab&lt; int &gt; &amp;lin_vel_t, Tab&lt; int &gt; &amp;ang_vel_t, const Interval &amp;limit, ExpTMAnimCB &amp;cb, float pos_thr, float rot_thr, int expflags)</argsstring>
        <name>get_node_vel</name>
        <param>
          <type>Tab&lt; <ref refid="structAnimKeyPoint3" kindref="compound">AnimKeyPoint3</ref> &gt; &amp;</type>
          <declname>lin_vel</declname>
        </param>
        <param>
          <type>Tab&lt; <ref refid="structAnimKeyPoint3" kindref="compound">AnimKeyPoint3</ref> &gt; &amp;</type>
          <declname>ang_vel</declname>
        </param>
        <param>
          <type>Tab&lt; int &gt; &amp;</type>
          <declname>lin_vel_t</declname>
        </param>
        <param>
          <type>Tab&lt; int &gt; &amp;</type>
          <declname>ang_vel_t</declname>
        </param>
        <param>
          <type>const Interval &amp;</type>
          <declname>limit</declname>
        </param>
        <param>
          <type><ref refid="classExpTMAnimCB" kindref="compound">ExpTMAnimCB</ref> &amp;</type>
          <declname>cb</declname>
        </param>
        <param>
          <type>float</type>
          <declname>pos_thr</declname>
        </param>
        <param>
          <type>float</type>
          <declname>rot_thr</declname>
        </param>
        <param>
          <type>int</type>
          <declname>expflags</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="expanim2.cpp" line="625" column="6" bodyfile="expanim2.cpp" bodystart="625" bodyend="916"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/>Copyright<sp/>(C)<sp/>Gaijin<sp/>Games<sp/>KFT.<sp/><sp/>All<sp/>rights<sp/>reserved.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;max.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="expanim_8h" kindref="compound">expanim.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="expanim2_8h" kindref="compound">expanim2.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="dagor_8h" kindref="compound">dagor.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="resource_8h" kindref="compound">resource.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="comment">//<sp/>#include<sp/>&quot;debug.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>Interval<sp/>lim;</highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>ort_thr;</highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>_usekeys;</highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>Tab&lt;TimeValue&gt;<sp/>ktime;</highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>Quat<sp/>qadd(Quat<sp/>a,<sp/>Quat<sp/>b)</highlight></codeline>
<codeline lineno="17"><highlight class="normal">{</highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/>Quat<sp/>q(a.x<sp/>+<sp/>b.x,<sp/>a.y<sp/>+<sp/>b.y,<sp/>a.z<sp/>+<sp/>b.z,<sp/>a.w<sp/>+<sp/>b.w);</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/>q.Normalize();</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>q;</highlight></codeline>
<codeline lineno="21"><highlight class="normal">}</highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="expanim2_8cpp_1a08a220becd6823469691d6bffd291148" kindref="member">length</ref>(Quat<sp/>&amp;q)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>sqrt(q.x<sp/>*<sp/>q.x<sp/>+<sp/>q.y<sp/>*<sp/>q.y<sp/>+<sp/>q.z<sp/>*<sp/>q.z<sp/>+<sp/>q.w<sp/>*<sp/>q.w);<sp/>}</highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>Quat<sp/>SLERP(Quat<sp/>a,<sp/>Quat<sp/>b,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>t)</highlight></codeline>
<codeline lineno="25"><highlight class="normal">{</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>f<sp/>=<sp/>a.x<sp/>*<sp/>b.x<sp/>+<sp/>a.y<sp/>*<sp/>b.y<sp/>+<sp/>a.z<sp/>*<sp/>b.z<sp/>+<sp/>a.w<sp/>*<sp/>b.w;</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(f<sp/>&gt;=<sp/>0.9999)</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>qadd(a<sp/>*<sp/>(1<sp/>-<sp/>t),<sp/>b<sp/>*<sp/>t);</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(f<sp/>&lt;=<sp/>-0.9999)</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>qadd(a<sp/>*<sp/>(t<sp/>-<sp/>1),<sp/>b<sp/>*<sp/>t);</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>w<sp/>=<sp/>acosf(f);</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(f<sp/>&gt;=<sp/>0)</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>sinw<sp/>=<sp/>sinf(w);</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>qadd(a<sp/>*<sp/>(sinf(w<sp/>*<sp/>(1<sp/>-<sp/>t))<sp/>/<sp/>sinw),<sp/>b<sp/>*<sp/>(sinf(w<sp/>*<sp/>t)<sp/>/<sp/>sinw));</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/>w<sp/>=<sp/>PI<sp/>-<sp/>w;</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>sinw<sp/>=<sp/>sinf(w);</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>qadd(a<sp/>*<sp/>(-sinf(w<sp/>*<sp/>(1<sp/>-<sp/>t))<sp/>/<sp/>sinw),<sp/>b<sp/>*<sp/>(sinf(w<sp/>*<sp/>t)<sp/>/<sp/>sinw));</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="47"><highlight class="normal">}</highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cmp_time(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*a,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*b)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*(TimeValue<sp/>*)a<sp/>-<sp/>*(TimeValue<sp/>*)b;<sp/>}</highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>sort_ktime()<sp/>{<sp/>ktime.Sort(cmp_time);<sp/>}</highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>add_ktime(TimeValue<sp/>t,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>check<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="54"><highlight class="normal">{</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(check)</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>ktime.Count();<sp/>++i)</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ktime[i]<sp/>==<sp/>t)</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/>ktime.Append(1,<sp/>&amp;t);</highlight></codeline>
<codeline lineno="60"><highlight class="normal">}</highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>calc_cp(<ref refid="structPosKey" kindref="compound">PosKey</ref><sp/>&amp;k0,<sp/><ref refid="structPosKey" kindref="compound">PosKey</ref><sp/>&amp;k1,<sp/>Point3<sp/>p13,<sp/>Point3<sp/>p23)</highlight></codeline>
<codeline lineno="63"><highlight class="normal">{</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/>k0.<ref refid="structPosKey_1ae2b4416bf124557b30989079008484ee" kindref="member">o</ref><sp/>=<sp/>k0.<ref refid="structPosKey_1a3503f0dc950198c6ec9e937e205da997" kindref="member">p</ref><sp/>*<sp/>(-5.0f<sp/>/<sp/>6.0f)<sp/>+<sp/>k1.<ref refid="structPosKey_1a3503f0dc950198c6ec9e937e205da997" kindref="member">p</ref><sp/>*<sp/>(1.0f<sp/>/<sp/>3.0f)<sp/>+<sp/>p13<sp/>*<sp/>3<sp/>-<sp/>p23<sp/>*<sp/>1.5f;</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/>k1.<ref refid="structPosKey_1a3c4a9d46d6c7a652140bbabecd081f50" kindref="member">i</ref><sp/>=<sp/>k1.<ref refid="structPosKey_1a3503f0dc950198c6ec9e937e205da997" kindref="member">p</ref><sp/>*<sp/>(-5.0f<sp/>/<sp/>6.0f)<sp/>+<sp/>k0.<ref refid="structPosKey_1a3503f0dc950198c6ec9e937e205da997" kindref="member">p</ref><sp/>*<sp/>(1.0f<sp/>/<sp/>3.0f)<sp/>+<sp/>p23<sp/>*<sp/>3<sp/>-<sp/>p13<sp/>*<sp/>1.5f;</highlight></codeline>
<codeline lineno="66"><highlight class="normal">}</highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>calc_cpi(<ref refid="structPosKey" kindref="compound">PosKey</ref><sp/>&amp;k0,<sp/><ref refid="structPosKey" kindref="compound">PosKey</ref><sp/>&amp;k1,<sp/>Point3<sp/>p23)</highlight></codeline>
<codeline lineno="69"><highlight class="normal">{</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/>k1.<ref refid="structPosKey_1a3c4a9d46d6c7a652140bbabecd081f50" kindref="member">i</ref><sp/>=<sp/>k1.<ref refid="structPosKey_1a3503f0dc950198c6ec9e937e205da997" kindref="member">p</ref><sp/>*<sp/>(-2.0f<sp/>/<sp/>3.0f)<sp/>-<sp/>k0.<ref refid="structPosKey_1a3503f0dc950198c6ec9e937e205da997" kindref="member">p</ref><sp/>*<sp/>(1.0f<sp/>/<sp/>12.0f)<sp/>-<sp/>k0.<ref refid="structPosKey_1ae2b4416bf124557b30989079008484ee" kindref="member">o</ref><sp/>*<sp/>0.5f<sp/>+<sp/>p23<sp/>*<sp/>(9.0f<sp/>/<sp/>4.0f);</highlight></codeline>
<codeline lineno="71"><highlight class="normal">}</highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>calc_cpo(<ref refid="structPosKey" kindref="compound">PosKey</ref><sp/>&amp;k0,<sp/><ref refid="structPosKey" kindref="compound">PosKey</ref><sp/>&amp;k1,<sp/>Point3<sp/>p13)</highlight></codeline>
<codeline lineno="74"><highlight class="normal">{</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/>k0.<ref refid="structPosKey_1ae2b4416bf124557b30989079008484ee" kindref="member">o</ref><sp/>=<sp/>k0.<ref refid="structPosKey_1a3503f0dc950198c6ec9e937e205da997" kindref="member">p</ref><sp/>*<sp/>(-2.0f<sp/>/<sp/>3.0f)<sp/>-<sp/>k1.<ref refid="structPosKey_1a3503f0dc950198c6ec9e937e205da997" kindref="member">p</ref><sp/>*<sp/>(1.0f<sp/>/<sp/>12.0f)<sp/>-<sp/>k1.<ref refid="structPosKey_1a3c4a9d46d6c7a652140bbabecd081f50" kindref="member">i</ref><sp/>*<sp/>0.5f<sp/>+<sp/>p13<sp/>*<sp/>(9.0f<sp/>/<sp/>4.0f);</highlight></codeline>
<codeline lineno="76"><highlight class="normal">}</highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>calc_cp(<ref refid="structRotKey" kindref="compound">RotKey</ref><sp/>&amp;k0,<sp/><ref refid="structRotKey" kindref="compound">RotKey</ref><sp/>&amp;k1,<sp/>Quat<sp/>p13,<sp/>Quat<sp/>p23)</highlight></codeline>
<codeline lineno="79"><highlight class="normal">{</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/>Quat<sp/>q0<sp/>=<sp/>SLERP(SLERP(k0.<ref refid="structRotKey_1aabcae9a33d299bc06864e4b0370f1b89" kindref="member">p</ref>,<sp/>k1.<ref refid="structRotKey_1aabcae9a33d299bc06864e4b0370f1b89" kindref="member">p</ref>,<sp/>1.0f<sp/>/<sp/>3.0f),<sp/>p13,<sp/>9.0f<sp/>/<sp/>4.0f);</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/>Quat<sp/>q1<sp/>=<sp/>SLERP(SLERP(k1.<ref refid="structRotKey_1aabcae9a33d299bc06864e4b0370f1b89" kindref="member">p</ref>,<sp/>k0.<ref refid="structRotKey_1aabcae9a33d299bc06864e4b0370f1b89" kindref="member">p</ref>,<sp/>1.0f<sp/>/<sp/>3.0f),<sp/>p23,<sp/>9.0f<sp/>/<sp/>4.0f);</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/>k0.<ref refid="structRotKey_1a2d9e76ec0a9a2031cbc604bda81e22be" kindref="member">o</ref><sp/>=<sp/>SLERP(q0,<sp/>q1,<sp/>-1);</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/>k1.<ref refid="structRotKey_1ad9e68829872fbc8469876aa666ae1525" kindref="member">i</ref><sp/>=<sp/>SLERP(q1,<sp/>q0,<sp/>-1);</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>k0.o=SLERP(SLERP(q0,q1,-1),k1.p,1.0f/3.0f);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>k1.i=SLERP(SLERP(q1,q0,-1),k0.p,1.0f/3.0f);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal">}</highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>calc_cpi(<ref refid="structRotKey" kindref="compound">RotKey</ref><sp/>&amp;k0,<sp/><ref refid="structRotKey" kindref="compound">RotKey</ref><sp/>&amp;k1,<sp/>Quat<sp/>p23)</highlight></codeline>
<codeline lineno="89"><highlight class="normal">{</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/>Quat<sp/>q1<sp/>=<sp/>SLERP(SLERP(k1.<ref refid="structRotKey_1aabcae9a33d299bc06864e4b0370f1b89" kindref="member">p</ref>,<sp/>k0.<ref refid="structRotKey_1aabcae9a33d299bc06864e4b0370f1b89" kindref="member">p</ref>,<sp/>1.0f<sp/>/<sp/>3.0f),<sp/>p23,<sp/>9.0f<sp/>/<sp/>4.0f);</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/>k1.<ref refid="structRotKey_1ad9e68829872fbc8469876aa666ae1525" kindref="member">i</ref><sp/>=<sp/>SLERP(k0.<ref refid="structRotKey_1a2d9e76ec0a9a2031cbc604bda81e22be" kindref="member">o</ref>,<sp/>q1,<sp/>1.5f);</highlight></codeline>
<codeline lineno="92"><highlight class="normal">}</highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>calc_cpo(<ref refid="structRotKey" kindref="compound">RotKey</ref><sp/>&amp;k0,<sp/><ref refid="structRotKey" kindref="compound">RotKey</ref><sp/>&amp;k1,<sp/>Quat<sp/>p13)</highlight></codeline>
<codeline lineno="95"><highlight class="normal">{</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/>Quat<sp/>q0<sp/>=<sp/>SLERP(SLERP(k0.<ref refid="structRotKey_1aabcae9a33d299bc06864e4b0370f1b89" kindref="member">p</ref>,<sp/>k1.<ref refid="structRotKey_1aabcae9a33d299bc06864e4b0370f1b89" kindref="member">p</ref>,<sp/>1.0f<sp/>/<sp/>3.0f),<sp/>p13,<sp/>9.0f<sp/>/<sp/>4.0f);</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/>k0.<ref refid="structRotKey_1a2d9e76ec0a9a2031cbc604bda81e22be" kindref="member">o</ref><sp/>=<sp/>SLERP(k1.<ref refid="structRotKey_1ad9e68829872fbc8469876aa666ae1525" kindref="member">i</ref>,<sp/>q0,<sp/>1.5f);</highlight></codeline>
<codeline lineno="98"><highlight class="normal">}</highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>is_orthog(Point3<sp/>ax,<sp/>Point3<sp/>ay,<sp/>Point3<sp/>az)</highlight></codeline>
<codeline lineno="101"><highlight class="normal">{</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fabsf(DotProd(ax,<sp/>ay))<sp/>&gt;<sp/>ort_thr)</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fabsf(DotProd(ax,<sp/>az))<sp/>&gt;<sp/>ort_thr)</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fabsf(DotProd(ay,<sp/>az))<sp/>&gt;<sp/>ort_thr)</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="109"><highlight class="normal">}</highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>interp_tm(TimeValue<sp/>t,<sp/>Point3<sp/>&amp;<ref refid="polyBumpUtil_8cpp_1aaa1ebe818ec1c763a776cc580551f3e6" kindref="member">p</ref>,<sp/>Quat<sp/>&amp;q,<sp/>Point3<sp/>&amp;s,<sp/><ref refid="classExpTMAnimCB" kindref="compound">ExpTMAnimCB</ref><sp/>&amp;cb)</highlight></codeline>
<codeline lineno="112"><highlight class="normal">{</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/>Matrix3<sp/>m;</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/>cb.<ref refid="classExpTMAnimCB_1ae0c42715a97d401a20c33d79513632f8" kindref="member">interp_tm</ref>(t,<sp/>m);</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="116"><highlight class="comment"><sp/><sp/><sp/><sp/>debug<sp/>(<sp/>&quot;%s:<sp/>%d:<sp/>(%.3f,%.3f,%.3f)<sp/>(%.3f,%.3f,%.3f)<sp/>(%.3f,%.3f,%.3f)<sp/>(%.3f,%.3f,%.3f)&quot;,<sp/>cb.get_name(),<sp/>t,</highlight></codeline>
<codeline lineno="117"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m.GetRow(0).x,<sp/>m.GetRow(0).y,<sp/>m.GetRow(0).z,<sp/>m.GetRow(1).x,<sp/>m.GetRow(1).y,<sp/>m.GetRow(1).z,</highlight></codeline>
<codeline lineno="118"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m.GetRow(2).x,<sp/>m.GetRow(2).y,<sp/>m.GetRow(2).z,<sp/>m.GetRow(3).x,<sp/>m.GetRow(3).y,<sp/>m.GetRow(3).z<sp/>);</highlight></codeline>
<codeline lineno="119"><highlight class="comment"><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/>Point3<sp/>ax<sp/>=<sp/>m.GetRow(0),<sp/>ay<sp/>=<sp/>m.GetRow(1),<sp/>az<sp/>=<sp/>m.GetRow(2);</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><ref refid="polyBumpUtil_8cpp_1aaa1ebe818ec1c763a776cc580551f3e6" kindref="member">p</ref><sp/>=<sp/>m.GetRow(3);</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>lx<sp/>=<sp/>Length(ax),<sp/>ly<sp/>=<sp/>Length(ay),<sp/>lz<sp/>=<sp/>Length(az);</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m.Parity())</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/>lz<sp/>=<sp/>-lz;</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/>s<sp/>=<sp/>Point3(lx,<sp/>ly,<sp/>lz);</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(lx<sp/>!=<sp/>0)</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/>m.SetRow(0,<sp/>ax<sp/>/=<sp/>lx);</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ly<sp/>!=<sp/>0)</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/>m.SetRow(1,<sp/>ay<sp/>/=<sp/>ly);</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(lz<sp/>!=<sp/>0)</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/>m.SetRow(2,<sp/>az<sp/>/=<sp/>lz);</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>m.SetRow(3,Point3(0,0,0));</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!is_orthog(ax,<sp/>ay,<sp/>az))</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/>cb.<ref refid="classExpTMAnimCB_1af5f3138f4c485c75b29c1b0026c70b0b" kindref="member">non_orthog_tm</ref>(t);</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/>m.Orthogonalize();</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>m.SetIdentFlags(POS_IDENT|SCL_IDENT);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/>q<sp/>=<sp/>Quat(m);</highlight></codeline>
<codeline lineno="140"><highlight class="normal">}</highlight></codeline>
<codeline lineno="141"><highlight class="normal"></highlight></codeline>
<codeline lineno="142"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>Matrix3<sp/>make_tm(Point3<sp/><ref refid="polyBumpUtil_8cpp_1aaa1ebe818ec1c763a776cc580551f3e6" kindref="member">p</ref>,<sp/>Quat<sp/>r,<sp/>Point3<sp/>s)</highlight></codeline>
<codeline lineno="143"><highlight class="normal">{</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/>Matrix3<sp/>m(1);</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/>m.Scale(s);</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/>Matrix3<sp/>qm;</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/>r.MakeMatrix(qm);</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/>m<sp/>=<sp/>m<sp/>*<sp/>qm;</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/>m.Translate(<ref refid="polyBumpUtil_8cpp_1aaa1ebe818ec1c763a776cc580551f3e6" kindref="member">p</ref>);</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m;</highlight></codeline>
<codeline lineno="151"><highlight class="normal">}</highlight></codeline>
<codeline lineno="152"><highlight class="normal"></highlight></codeline>
<codeline lineno="153"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>BOOL<sp/>pos_equal(Point3<sp/>a,<sp/>Point3<sp/>b,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>t)</highlight></codeline>
<codeline lineno="154"><highlight class="normal">{</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>d<sp/>=<sp/>LengthSquared(a<sp/>-<sp/>b);</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(d<sp/>&lt;=<sp/>t<sp/>*<sp/>t)</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="159"><highlight class="normal">}</highlight></codeline>
<codeline lineno="160"><highlight class="normal"></highlight></codeline>
<codeline lineno="161"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>BOOL<sp/>rot_equal(Quat<sp/>a,<sp/>Quat<sp/>b,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>t)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>fabsf(a.x<sp/>*<sp/>b.x<sp/>+<sp/>a.y<sp/>*<sp/>b.y<sp/>+<sp/>a.z<sp/>*<sp/>b.z<sp/>+<sp/>a.w<sp/>*<sp/>b.w)<sp/>&gt;=<sp/>t;<sp/>}</highlight></codeline>
<codeline lineno="162"><highlight class="normal"></highlight></codeline>
<codeline lineno="163"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>BOOL<sp/>scl_equal(Point3<sp/>a,<sp/>Point3<sp/>b,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>t)</highlight></codeline>
<codeline lineno="164"><highlight class="normal">{</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>fabsf(a.x<sp/>-<sp/>b.x)<sp/>*<sp/>2<sp/>&lt;=<sp/>t<sp/>*<sp/>(fabsf(a.x)<sp/>+<sp/>fabsf(b.x))<sp/>&amp;&amp;<sp/>fabsf(a.y<sp/>-<sp/>b.y)<sp/>*<sp/>2<sp/>&lt;=<sp/>t<sp/>*<sp/>(fabsf(a.y)<sp/>+<sp/>fabsf(b.y))<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fabsf(a.z<sp/>-<sp/>b.z)<sp/>*<sp/>2<sp/>&lt;=<sp/>t<sp/>*<sp/>(fabsf(a.z)<sp/>+<sp/>fabsf(b.z));</highlight></codeline>
<codeline lineno="167"><highlight class="normal">}</highlight></codeline>
<codeline lineno="168"><highlight class="normal"></highlight></codeline>
<codeline lineno="169"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>Point3<sp/>interp_seg(<ref refid="structPosKey" kindref="compound">PosKey</ref><sp/>a,<sp/><ref refid="structPosKey" kindref="compound">PosKey</ref><sp/>b,<sp/>TimeValue<sp/>time)</highlight></codeline>
<codeline lineno="170"><highlight class="normal">{</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>t<sp/>=<sp/>float(time<sp/>-<sp/>a.<ref refid="structPosKey_1aaf9b66ae39fd7ee284594a277ee9eec9" kindref="member">t</ref>)<sp/>/<sp/>float(b.<ref refid="structPosKey_1aaf9b66ae39fd7ee284594a277ee9eec9" kindref="member">t</ref><sp/>-<sp/>a.<ref refid="structPosKey_1aaf9b66ae39fd7ee284594a277ee9eec9" kindref="member">t</ref>);</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>s<sp/>=<sp/>1<sp/>-<sp/>t;</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>a.<ref refid="structPosKey_1a3503f0dc950198c6ec9e937e205da997" kindref="member">p</ref><sp/>*<sp/>(s<sp/>*<sp/>s<sp/>*<sp/>s)<sp/>+<sp/>a.<ref refid="structPosKey_1ae2b4416bf124557b30989079008484ee" kindref="member">o</ref><sp/>*<sp/>(3<sp/>*<sp/>s<sp/>*<sp/>s<sp/>*<sp/>t)<sp/>+<sp/>b.<ref refid="structPosKey_1a3c4a9d46d6c7a652140bbabecd081f50" kindref="member">i</ref><sp/>*<sp/>(3<sp/>*<sp/>s<sp/>*<sp/>t<sp/>*<sp/>t)<sp/>+<sp/>b.<ref refid="structPosKey_1a3503f0dc950198c6ec9e937e205da997" kindref="member">p</ref><sp/>*<sp/>(t<sp/>*<sp/>t<sp/>*<sp/>t);</highlight></codeline>
<codeline lineno="174"><highlight class="normal">}</highlight></codeline>
<codeline lineno="175"><highlight class="normal"></highlight></codeline>
<codeline lineno="176"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>Quat<sp/>interp_seg(<ref refid="structRotKey" kindref="compound">RotKey</ref><sp/>a,<sp/><ref refid="structRotKey" kindref="compound">RotKey</ref><sp/>b,<sp/>TimeValue<sp/>time)</highlight></codeline>
<codeline lineno="177"><highlight class="normal">{</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>t<sp/>=<sp/>float(time<sp/>-<sp/>a.<ref refid="structRotKey_1a01935b0e6de647c19e43a66e2b544175" kindref="member">t</ref>)<sp/>/<sp/>float(b.<ref refid="structRotKey_1a01935b0e6de647c19e43a66e2b544175" kindref="member">t</ref><sp/>-<sp/>a.<ref refid="structRotKey_1a01935b0e6de647c19e43a66e2b544175" kindref="member">t</ref>);</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>SLERP(SLERP(a.<ref refid="structRotKey_1aabcae9a33d299bc06864e4b0370f1b89" kindref="member">p</ref>,<sp/>b.<ref refid="structRotKey_1aabcae9a33d299bc06864e4b0370f1b89" kindref="member">p</ref>,<sp/>t),<sp/>SLERP(a.<ref refid="structRotKey_1a2d9e76ec0a9a2031cbc604bda81e22be" kindref="member">o</ref>,<sp/>b.<ref refid="structRotKey_1ad9e68829872fbc8469876aa666ae1525" kindref="member">i</ref>,<sp/>t),<sp/>2<sp/>*<sp/>(1<sp/>-<sp/>t)<sp/>*<sp/>t);</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/><sp/><sp/>Quat<sp/>q1=SLERP(a.o,b.i,t);</highlight></codeline>
<codeline lineno="181"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>SLERP(SLERP(SLERP(a.p,a.o,t),q1,t),SLERP(q1,SLERP(b.i,b.p,t),t),t);</highlight></codeline>
<codeline lineno="182"><highlight class="comment"><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="183"><highlight class="normal">}</highlight></codeline>
<codeline lineno="184"><highlight class="normal"></highlight></codeline>
<codeline lineno="185"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>make_seg_smooth(<ref refid="structPosKey" kindref="compound">PosKey</ref><sp/>a,<sp/><ref refid="structPosKey" kindref="compound">PosKey</ref><sp/>&amp;b,<sp/><ref refid="structPosKey" kindref="compound">PosKey</ref><sp/>&amp;c,<sp/><ref refid="structPosKey" kindref="compound">PosKey</ref><sp/>d)</highlight></codeline>
<codeline lineno="186"><highlight class="normal">{</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>l<sp/>=<sp/>Length(c.<ref refid="structPosKey_1a3503f0dc950198c6ec9e937e205da997" kindref="member">p</ref><sp/>-<sp/>b.<ref refid="structPosKey_1a3503f0dc950198c6ec9e937e205da997" kindref="member">p</ref>);</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/>Point3<sp/>t<sp/>=<sp/>c.<ref refid="structPosKey_1a3503f0dc950198c6ec9e937e205da997" kindref="member">p</ref><sp/>-<sp/>a.<ref refid="structPosKey_1a3503f0dc950198c6ec9e937e205da997" kindref="member">p</ref>;</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>tl<sp/>=<sp/>Length(t);</highlight></codeline>
<codeline lineno="190"><highlight class="normal"></highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/>b.<ref refid="structPosKey_1ae2b4416bf124557b30989079008484ee" kindref="member">o</ref><sp/>=<sp/>b.<ref refid="structPosKey_1a3503f0dc950198c6ec9e937e205da997" kindref="member">p</ref><sp/>+<sp/>t<sp/>*<sp/>(l<sp/>/<sp/>(tl<sp/>*<sp/>3));</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/>t<sp/>=<sp/>d.p<sp/>-<sp/>b.<ref refid="structRotKey_1aabcae9a33d299bc06864e4b0370f1b89" kindref="member">p</ref>;</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/>tl<sp/>=<sp/>Length(t);</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/>c.i<sp/>=<sp/>c.p<sp/>-<sp/>t<sp/>*<sp/>(l<sp/>/<sp/>(tl<sp/>*<sp/>3));</highlight></codeline>
<codeline lineno="195"><highlight class="normal">}</highlight></codeline>
<codeline lineno="196"><highlight class="normal"></highlight></codeline>
<codeline lineno="197"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>quatang(Quat<sp/>a,<sp/>Quat<sp/>b)</highlight></codeline>
<codeline lineno="198"><highlight class="normal">{</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>f<sp/>=<sp/>fabsf(a.x<sp/>*<sp/>b.x<sp/>+<sp/>a.y<sp/>*<sp/>b.y<sp/>+<sp/>a.z<sp/>*<sp/>b.z<sp/>+<sp/>a.w<sp/>*<sp/>b.w);</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(f<sp/>&gt;=<sp/>1)</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>acosf(f);</highlight></codeline>
<codeline lineno="203"><highlight class="normal">}</highlight></codeline>
<codeline lineno="204"><highlight class="normal"></highlight></codeline>
<codeline lineno="205"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>make_seg_smooth(<ref refid="structRotKey" kindref="compound">RotKey</ref><sp/>a,<sp/><ref refid="structRotKey" kindref="compound">RotKey</ref><sp/>&amp;b,<sp/><ref refid="structRotKey" kindref="compound">RotKey</ref><sp/>&amp;c,<sp/><ref refid="structRotKey" kindref="compound">RotKey</ref><sp/>d)</highlight></codeline>
<codeline lineno="206"><highlight class="normal">{</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>l<sp/>=<sp/>quatang(b.<ref refid="structRotKey_1aabcae9a33d299bc06864e4b0370f1b89" kindref="member">p</ref>,<sp/>c.<ref refid="structRotKey_1aabcae9a33d299bc06864e4b0370f1b89" kindref="member">p</ref>);</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/>Quat<sp/>cp<sp/>=<sp/>SLERP(SLERP(b.<ref refid="structRotKey_1aabcae9a33d299bc06864e4b0370f1b89" kindref="member">p</ref>,<sp/>a.<ref refid="structRotKey_1aabcae9a33d299bc06864e4b0370f1b89" kindref="member">p</ref>,<sp/>-1.0f<sp/>/<sp/>3.0f),<sp/>SLERP(b.<ref refid="structRotKey_1aabcae9a33d299bc06864e4b0370f1b89" kindref="member">p</ref>,<sp/>c.<ref refid="structRotKey_1aabcae9a33d299bc06864e4b0370f1b89" kindref="member">p</ref>,<sp/>1.0f<sp/>/<sp/>3.0f),<sp/>0.5f);</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>tl<sp/>=<sp/>quatang(b.<ref refid="structRotKey_1aabcae9a33d299bc06864e4b0370f1b89" kindref="member">p</ref>,<sp/>cp);</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(tl<sp/>!=<sp/>0)</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/>cp<sp/>=<sp/>SLERP(b.<ref refid="structRotKey_1aabcae9a33d299bc06864e4b0370f1b89" kindref="member">p</ref>,<sp/>cp,<sp/>l<sp/>/<sp/>(tl<sp/>*<sp/>3));</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/>cp<sp/>=<sp/>b.<ref refid="structRotKey_1aabcae9a33d299bc06864e4b0370f1b89" kindref="member">p</ref>;</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/>b.<ref refid="structRotKey_1a2d9e76ec0a9a2031cbc604bda81e22be" kindref="member">o</ref><sp/>=<sp/>SLERP(cp,<sp/>c.<ref refid="structRotKey_1aabcae9a33d299bc06864e4b0370f1b89" kindref="member">p</ref>,<sp/>-0.5f);</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/>cp<sp/>=<sp/>SLERP(SLERP(c.<ref refid="structRotKey_1aabcae9a33d299bc06864e4b0370f1b89" kindref="member">p</ref>,<sp/>b.<ref refid="structRotKey_1aabcae9a33d299bc06864e4b0370f1b89" kindref="member">p</ref>,<sp/>-1.0f<sp/>/<sp/>3.0f),<sp/>SLERP(c.<ref refid="structRotKey_1aabcae9a33d299bc06864e4b0370f1b89" kindref="member">p</ref>,<sp/>d.<ref refid="structRotKey_1aabcae9a33d299bc06864e4b0370f1b89" kindref="member">p</ref>,<sp/>1.0f<sp/>/<sp/>3.0f),<sp/>0.5f);</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/>cp<sp/>=<sp/>SLERP(c.<ref refid="structRotKey_1aabcae9a33d299bc06864e4b0370f1b89" kindref="member">p</ref>,<sp/>cp,<sp/>-1);</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/>tl<sp/>=<sp/>quatang(c.<ref refid="structRotKey_1aabcae9a33d299bc06864e4b0370f1b89" kindref="member">p</ref>,<sp/>cp);</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(tl<sp/>!=<sp/>0)</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/>cp<sp/>=<sp/>SLERP(c.<ref refid="structRotKey_1aabcae9a33d299bc06864e4b0370f1b89" kindref="member">p</ref>,<sp/>cp,<sp/>l<sp/>/<sp/>(tl<sp/>*<sp/>3));</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/>cp<sp/>=<sp/>c.<ref refid="structRotKey_1aabcae9a33d299bc06864e4b0370f1b89" kindref="member">p</ref>;</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/>c.<ref refid="structRotKey_1ad9e68829872fbc8469876aa666ae1525" kindref="member">i</ref><sp/>=<sp/>SLERP(cp,<sp/>b.<ref refid="structRotKey_1aabcae9a33d299bc06864e4b0370f1b89" kindref="member">p</ref>,<sp/>-0.5f);</highlight></codeline>
<codeline lineno="223"><highlight class="normal">}</highlight></codeline>
<codeline lineno="224"><highlight class="normal"></highlight></codeline>
<codeline lineno="225"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>DWORD<sp/>WINAPI<sp/>dummyfn(LPVOID<sp/>a)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;<sp/>}</highlight></codeline>
<codeline lineno="226"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>debug_pos_diff(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*nodename,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Tab&lt;PosKey&gt;<sp/>&amp;pos,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Tab&lt;Point3&gt;<sp/>&amp;temp_pos,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>thres);</highlight></codeline>
<codeline lineno="227"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>debug_rot_diff(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*nodename,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Tab&lt;RotKey&gt;<sp/>&amp;pos,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Tab&lt;Quat&gt;<sp/>&amp;temp_pos,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>thres);</highlight></codeline>
<codeline lineno="228"><highlight class="normal"></highlight></codeline>
<codeline lineno="229"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>optimize_pos_key(Tab&lt;PosKey&gt;<sp/>&amp;pos,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ktime_count,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>reduce_keys,<sp/>Interval<sp/>limit,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>pos_thr,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*label)</highlight></codeline>
<codeline lineno="230"><highlight class="normal">{</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/>Tab&lt;Point3&gt;<sp/>temp_pos;</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>total_pos<sp/>=<sp/>1,<sp/>removed_pos1<sp/>=<sp/>0,<sp/>removed_pos2<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,<sp/>j,<sp/>ok;</highlight></codeline>
<codeline lineno="234"><highlight class="normal"></highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/>temp_pos.SetCount(ktime_count);</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>ktime_count;<sp/>i++)</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/>temp_pos[i]<sp/>=<sp/>pos[i<sp/>*<sp/>3].<ref refid="polyBumpUtil_8cpp_1aaa1ebe818ec1c763a776cc580551f3e6" kindref="member">p</ref>;</highlight></codeline>
<codeline lineno="238"><highlight class="normal"></highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>pos.Count()<sp/>-<sp/>1;<sp/>i<sp/>&gt;=<sp/>0;<sp/>i--)</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pos[i].f)</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>pos.Delete(i,<sp/>1);</highlight></codeline>
<codeline lineno="242"><highlight class="normal"></highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(reduce_keys)</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structPosKey" kindref="compound">PosKey</ref><sp/>nk[2];</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/>Point3<sp/>p13,<sp/>p23;</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>temp_t;</highlight></codeline>
<codeline lineno="248"><highlight class="normal"></highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ok<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="252"><highlight class="normal"></highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>pos.Count()<sp/>-<sp/>2;<sp/>i<sp/>&gt;=<sp/>1;<sp/>i--)</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>calc<sp/>virtually<sp/>new<sp/>segment</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nk[0].<ref refid="structPosKey_1a3503f0dc950198c6ec9e937e205da997" kindref="member">p</ref><sp/>=<sp/>pos[i<sp/>-<sp/>1].p;</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nk[0].<ref refid="structPosKey_1aaf9b66ae39fd7ee284594a277ee9eec9" kindref="member">t</ref><sp/>=<sp/>pos[i<sp/>-<sp/>1].t;</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nk[1].<ref refid="structPosKey_1a3503f0dc950198c6ec9e937e205da997" kindref="member">p</ref><sp/>=<sp/>pos[i<sp/>+<sp/>1].p;</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nk[1].<ref refid="structPosKey_1aaf9b66ae39fd7ee284594a277ee9eec9" kindref="member">t</ref><sp/>=<sp/>pos[i<sp/>+<sp/>1].t;</highlight></codeline>
<codeline lineno="260"><highlight class="normal"></highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>temp_t<sp/>=<sp/>(pos[i<sp/>-<sp/>1].t<sp/>*<sp/>2<sp/>+<sp/>pos[i<sp/>+<sp/>1].t<sp/>*<sp/>1)<sp/>/<sp/>3;</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(temp_t<sp/>&lt;=<sp/>pos[i].t)</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p13<sp/>=<sp/>interp_seg(pos[i<sp/>-<sp/>1],<sp/>pos[i],<sp/>temp_t);</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p13<sp/>=<sp/>interp_seg(pos[i],<sp/>pos[i<sp/>+<sp/>1],<sp/>temp_t);</highlight></codeline>
<codeline lineno="266"><highlight class="normal"></highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>temp_t<sp/>=<sp/>(pos[i<sp/>-<sp/>1].t<sp/>*<sp/>1<sp/>+<sp/>pos[i<sp/>+<sp/>1].t<sp/>*<sp/>2)<sp/>/<sp/>3;</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(temp_t<sp/>&lt;=<sp/>pos[i].t)</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p23<sp/>=<sp/>interp_seg(pos[i<sp/>-<sp/>1],<sp/>pos[i],<sp/>temp_t);</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p23<sp/>=<sp/>interp_seg(pos[i],<sp/>pos[i<sp/>+<sp/>1],<sp/>temp_t);</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>calc_cp(nk[0],<sp/>nk[1],<sp/>p13,<sp/>p23);</highlight></codeline>
<codeline lineno="273"><highlight class="normal"></highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>check<sp/>i-th<sp/>point<sp/>with<sp/>vnew<sp/>virtual<sp/>segment</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Point3<sp/><ref refid="polyBumpUtil_8cpp_1aaa1ebe818ec1c763a776cc580551f3e6" kindref="member">p</ref><sp/>=<sp/>interp_seg(nk[0],<sp/>nk[1],<sp/>pos[i].t);</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>total_pos++;</highlight></codeline>
<codeline lineno="277"><highlight class="normal"></highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pos_equal(<ref refid="polyBumpUtil_8cpp_1aaa1ebe818ec1c763a776cc580551f3e6" kindref="member">p</ref>,<sp/>pos[i].<ref refid="polyBumpUtil_8cpp_1aaa1ebe818ec1c763a776cc580551f3e6" kindref="member">p</ref>,<sp/>pos_thr))</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>removed_pos1++;</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>really_remove<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="282"><highlight class="normal"></highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(j<sp/>=<sp/>pos[i<sp/>-<sp/>1].t;<sp/>j<sp/>&lt;=<sp/>pos[i<sp/>+<sp/>1].t;<sp/>j<sp/>+=<sp/>GetTicksPerFrame())</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ki<sp/>=<sp/>(j<sp/>-<sp/>limit.Start())<sp/>/<sp/>GetTicksPerFrame();</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!pos_equal(temp_pos[ki],<sp/>interp_seg(nk[0],<sp/>nk[1],<sp/>j),<sp/>pos_thr))</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>really_remove<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="292"><highlight class="normal"></highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(really_remove)</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>replace<sp/>segment<sp/>with<sp/>new<sp/>(previously<sp/>computed)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pos[i<sp/>-<sp/>1].o<sp/>=<sp/>nk[0].<ref refid="structPosKey_1ae2b4416bf124557b30989079008484ee" kindref="member">o</ref>;</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pos[i<sp/>+<sp/>1].i<sp/>=<sp/>nk[1].<ref refid="structPosKey_1a3c4a9d46d6c7a652140bbabecd081f50" kindref="member">i</ref>;</highlight></codeline>
<codeline lineno="298"><highlight class="normal"></highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>remove<sp/>unused<sp/>i-th<sp/>point</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>removed_pos2++;</highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pos.Delete(i,<sp/>1);</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ok<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(ok);</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="308"><highlight class="normal"></highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pos.Count()<sp/>==<sp/>2)</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/>TimeValue<sp/>dt<sp/>=<sp/>pos[1].t<sp/>-<sp/>pos[0].t;</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>1;<sp/>i<sp/>&lt;=<sp/>5;<sp/>++i)</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Point3<sp/><ref refid="polyBumpUtil_8cpp_1aaa1ebe818ec1c763a776cc580551f3e6" kindref="member">p</ref><sp/>=<sp/>interp_seg(pos[0],<sp/>pos[1],<sp/>dt<sp/>*<sp/>i<sp/>/<sp/>5<sp/>+<sp/>pos[0].t);</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!pos_equal(<ref refid="polyBumpUtil_8cpp_1aaa1ebe818ec1c763a776cc580551f3e6" kindref="member">p</ref>,<sp/>pos[0].<ref refid="polyBumpUtil_8cpp_1aaa1ebe818ec1c763a776cc580551f3e6" kindref="member">p</ref>,<sp/>pos_thr))</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i<sp/>&gt;<sp/>5)</highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>pos.Delete(1,<sp/>1);</highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="322"><highlight class="normal"></highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>debug<sp/>(<sp/>&quot;----<sp/>after<sp/>full<sp/>%s<sp/>optimize<sp/>----&quot;,<sp/>label<sp/>);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>debug<sp/>(<sp/>&quot;%s:<sp/>total=%d<sp/>removed1=%d<sp/>removed2=%d&quot;,<sp/>label,<sp/>total_pos,<sp/>removed_pos1,<sp/>removed_pos2<sp/>);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>debug_pos_diff<sp/>(<sp/>node[k]-&gt;GetName(),<sp/>pos,<sp/>temp_pos,<sp/>pos_thr<sp/>);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="326"><highlight class="normal">}</highlight></codeline>
<codeline lineno="327"><highlight class="normal"></highlight></codeline>
<codeline lineno="328"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>optimize_rot_key(Tab&lt;RotKey&gt;<sp/>&amp;rot,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ktime_count,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>reduce_keys,<sp/>Interval<sp/>limit,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>rot_thr,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*label)</highlight></codeline>
<codeline lineno="329"><highlight class="normal">{</highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/>Tab&lt;Quat&gt;<sp/>temp_rot;</highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>total_rot<sp/>=<sp/>1,<sp/>removed_rot1<sp/>=<sp/>0,<sp/>removed_rot2<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,<sp/>j,<sp/>ok;</highlight></codeline>
<codeline lineno="333"><highlight class="normal"></highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/>temp_rot.SetCount(ktime_count);</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>ktime_count;<sp/>i++)</highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/><sp/>temp_rot[i]<sp/>=<sp/>rot[i<sp/>*<sp/>3].<ref refid="polyBumpUtil_8cpp_1aaa1ebe818ec1c763a776cc580551f3e6" kindref="member">p</ref>;</highlight></codeline>
<codeline lineno="337"><highlight class="normal"></highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>rot.Count()<sp/>-<sp/>1;<sp/>i<sp/>&gt;=<sp/>0;<sp/>i--)</highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(rot[i].f)</highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>rot.Delete(i,<sp/>1);</highlight></codeline>
<codeline lineno="341"><highlight class="normal"></highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(reduce_keys)</highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structRotKey" kindref="compound">RotKey</ref><sp/>nk[2];</highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/><sp/>Quat<sp/>p13,<sp/>p23;</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>temp_t;</highlight></codeline>
<codeline lineno="347"><highlight class="normal"></highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ok<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="351"><highlight class="normal"></highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>rot.Count()<sp/>-<sp/>2;<sp/>i<sp/>&gt;=<sp/>1;<sp/>i--)</highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>calc<sp/>virtually<sp/>new<sp/>segment</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nk[0].<ref refid="structRotKey_1aabcae9a33d299bc06864e4b0370f1b89" kindref="member">p</ref><sp/>=<sp/>rot[i<sp/>-<sp/>1].p;</highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nk[0].<ref refid="structRotKey_1a01935b0e6de647c19e43a66e2b544175" kindref="member">t</ref><sp/>=<sp/>rot[i<sp/>-<sp/>1].t;</highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nk[1].<ref refid="structRotKey_1aabcae9a33d299bc06864e4b0370f1b89" kindref="member">p</ref><sp/>=<sp/>rot[i<sp/>+<sp/>1].p;</highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nk[1].<ref refid="structRotKey_1a01935b0e6de647c19e43a66e2b544175" kindref="member">t</ref><sp/>=<sp/>rot[i<sp/>+<sp/>1].t;</highlight></codeline>
<codeline lineno="359"><highlight class="normal"></highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>temp_t<sp/>=<sp/>(rot[i<sp/>-<sp/>1].t<sp/>*<sp/>2<sp/>+<sp/>rot[i<sp/>+<sp/>1].t<sp/>*<sp/>1)<sp/>/<sp/>3;</highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(temp_t<sp/>&lt;=<sp/>rot[i].t)</highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p13<sp/>=<sp/>interp_seg(rot[i<sp/>-<sp/>1],<sp/>rot[i],<sp/>temp_t);</highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p13<sp/>=<sp/>interp_seg(rot[i],<sp/>rot[i<sp/>+<sp/>1],<sp/>temp_t);</highlight></codeline>
<codeline lineno="365"><highlight class="normal"></highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>temp_t<sp/>=<sp/>(rot[i<sp/>-<sp/>1].t<sp/>*<sp/>1<sp/>+<sp/>rot[i<sp/>+<sp/>1].t<sp/>*<sp/>2)<sp/>/<sp/>3;</highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(temp_t<sp/>&lt;=<sp/>rot[i].t)</highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p23<sp/>=<sp/>interp_seg(rot[i<sp/>-<sp/>1],<sp/>rot[i],<sp/>temp_t);</highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p23<sp/>=<sp/>interp_seg(rot[i],<sp/>rot[i<sp/>+<sp/>1],<sp/>temp_t);</highlight></codeline>
<codeline lineno="371"><highlight class="normal"></highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>calc_cp(nk[0],<sp/>nk[1],<sp/>p13,<sp/>p23);</highlight></codeline>
<codeline lineno="373"><highlight class="normal"></highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>check<sp/>i-th<sp/>point<sp/>with<sp/>vnew<sp/>virtual<sp/>segment</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Quat<sp/><ref refid="polyBumpUtil_8cpp_1aaa1ebe818ec1c763a776cc580551f3e6" kindref="member">p</ref><sp/>=<sp/>interp_seg(nk[0],<sp/>nk[1],<sp/>rot[i].t);</highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>total_rot++;</highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(rot_equal(<ref refid="polyBumpUtil_8cpp_1aaa1ebe818ec1c763a776cc580551f3e6" kindref="member">p</ref>,<sp/>rot[i].<ref refid="polyBumpUtil_8cpp_1aaa1ebe818ec1c763a776cc580551f3e6" kindref="member">p</ref>,<sp/>rot_thr))</highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>removed_rot1++;</highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>really_remove<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="381"><highlight class="normal"></highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(j<sp/>=<sp/>rot[i<sp/>-<sp/>1].t;<sp/>j<sp/>&lt;=<sp/>rot[i<sp/>+<sp/>1].t;<sp/>j<sp/>+=<sp/>GetTicksPerFrame())</highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ki<sp/>=<sp/>(j<sp/>-<sp/>limit.Start())<sp/>/<sp/>GetTicksPerFrame();</highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="polyBumpUtil_8cpp_1aaa1ebe818ec1c763a776cc580551f3e6" kindref="member">p</ref><sp/>=<sp/>interp_seg(nk[0],<sp/>nk[1],<sp/>j);</highlight></codeline>
<codeline lineno="386"><highlight class="normal"></highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!rot_equal(temp_rot[ki],<sp/><ref refid="polyBumpUtil_8cpp_1aaa1ebe818ec1c763a776cc580551f3e6" kindref="member">p</ref>,<sp/>rot_thr))</highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>really_remove<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="393"><highlight class="normal"></highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(really_remove)</highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>replace<sp/>segment<sp/>with<sp/>new<sp/>(previously<sp/>computed)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rot[i<sp/>-<sp/>1].o<sp/>=<sp/>nk[0].<ref refid="structRotKey_1a2d9e76ec0a9a2031cbc604bda81e22be" kindref="member">o</ref>;</highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rot[i<sp/>+<sp/>1].i<sp/>=<sp/>nk[1].<ref refid="structRotKey_1ad9e68829872fbc8469876aa666ae1525" kindref="member">i</ref>;</highlight></codeline>
<codeline lineno="399"><highlight class="normal"></highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>remove<sp/>unused<sp/>i-th<sp/>point</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>removed_rot2++;</highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rot.Delete(i,<sp/>1);</highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ok<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(ok);</highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="409"><highlight class="normal"></highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(rot.Count()<sp/>==<sp/>2)</highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/><sp/><sp/>TimeValue<sp/>dt<sp/>=<sp/>rot[1].t<sp/>-<sp/>rot[0].t;</highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>1;<sp/>i<sp/>&lt;=<sp/>5;<sp/>++i)</highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Quat<sp/><ref refid="polyBumpUtil_8cpp_1aaa1ebe818ec1c763a776cc580551f3e6" kindref="member">p</ref><sp/>=<sp/>interp_seg(rot[0],<sp/>rot[1],<sp/>dt<sp/>*<sp/>i<sp/>/<sp/>5<sp/>+<sp/>rot[0].t);</highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!rot_equal(<ref refid="polyBumpUtil_8cpp_1aaa1ebe818ec1c763a776cc580551f3e6" kindref="member">p</ref>,<sp/>rot[0].<ref refid="polyBumpUtil_8cpp_1aaa1ebe818ec1c763a776cc580551f3e6" kindref="member">p</ref>,<sp/>rot_thr))</highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i<sp/>&gt;<sp/>5)</highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>rot.Delete(1,<sp/>1);</highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="423"><highlight class="normal"></highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>debug<sp/>(<sp/>&quot;----<sp/>after<sp/>full<sp/>%s<sp/>optimize<sp/>----&quot;,<sp/>label<sp/>);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>debug<sp/>(<sp/>&quot;%s:<sp/>total=%d<sp/>removed1=%d<sp/>removed2=%d&quot;,<sp/>label,<sp/>total_rot,<sp/>removed_rot1,<sp/>removed_rot2<sp/>);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>debug_rot_diff<sp/>(<sp/>node[k]-&gt;GetName(),<sp/>rot,<sp/>temp_rot,<sp/>rot_thr<sp/>);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="427"><highlight class="normal">}</highlight></codeline>
<codeline lineno="428"><highlight class="normal"></highlight></codeline>
<codeline lineno="429"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="expanim2_8cpp_1ae1257538fde79484270e1100e424a270" kindref="member">get_tm_anim_2</ref>(Tab&lt;AnimChanPoint3<sp/>*&gt;<sp/>&amp;npos,<sp/>Tab&lt;AnimChanQuat<sp/>*&gt;<sp/>&amp;nrot,<sp/>Tab&lt;AnimChanPoint3<sp/>*&gt;<sp/>&amp;nscl,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Interval<sp/>&amp;limit,</highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Tab&lt;INode<sp/>*&gt;<sp/>&amp;node,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Tab&lt;ExpTMAnimCB<sp/>*&gt;<sp/>&amp;ncb,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>pos_thr,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>rot_thr,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>scl_thr,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>ort_eps,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>expflags)</highlight></codeline>
<codeline lineno="431"><highlight class="normal">{</highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,<sp/>k;</highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>t0,<sp/>t1;</highlight></codeline>
<codeline lineno="434"><highlight class="normal"></highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="436"><highlight class="comment"><sp/><sp/>int<sp/>total_pos<sp/>=<sp/>0,<sp/>removed_pos1<sp/>=<sp/>0,<sp/>removed_pos2<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="437"><highlight class="comment"><sp/><sp/>int<sp/>total_rot<sp/>=<sp/>0,<sp/>removed_rot1<sp/>=<sp/>0,<sp/>removed_rot2<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="438"><highlight class="comment"><sp/><sp/>int<sp/>total_scl<sp/>=<sp/>0,<sp/>removed_scl1<sp/>=<sp/>0,<sp/>removed_scl2<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="439"><highlight class="comment"><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="440"><highlight class="normal"></highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/>ort_thr<sp/>=<sp/>ort_eps;</highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/>lim<sp/>=<sp/>limit;</highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/>ktime.ZeroCount();</highlight></codeline>
<codeline lineno="444"><highlight class="normal"></highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(lim.Start()<sp/>==<sp/>TIME_NegInfinity)</highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/><sp/><sp/>lim.SetInstant(0);</highlight></codeline>
<codeline lineno="447"><highlight class="normal"></highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(lim.Start()<sp/>==<sp/>lim.End())</highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/><sp/><sp/>add_ktime(lim.Start());</highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>lim.Start();<sp/>i<sp/>&lt;<sp/>lim.End();<sp/>i<sp/>+=<sp/>GetTicksPerFrame())</highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>add_ktime(i,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/><sp/><sp/>add_ktime(lim.End());</highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/>sort_ktime();</highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/><ref refid="debug_8cpp_1ad66a73f3673f2879326899cf57fd8d2e" kindref="member">debug</ref>(</highlight><highlight class="stringliteral">&quot;ktime.Count()=%d&quot;</highlight><highlight class="normal">,<sp/>ktime.Count());</highlight></codeline>
<codeline lineno="458"><highlight class="normal"></highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(k<sp/>=<sp/>0;<sp/>k<sp/>&lt;<sp/>node.Count();<sp/>k++)</highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/><sp/><sp/>Tab&lt;PosKey&gt;<sp/>&amp;pos<sp/>=<sp/>npos[k]-&gt;key;</highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/><sp/><sp/>Tab&lt;PosKey&gt;<sp/>&amp;scl<sp/>=<sp/>nscl[k]-&gt;key;</highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/><sp/><sp/>Tab&lt;RotKey&gt;<sp/>&amp;rot<sp/>=<sp/>nrot[k]-&gt;key;</highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classExpTMAnimCB" kindref="compound">ExpTMAnimCB</ref><sp/>&amp;cb<sp/>=<sp/>*ncb[k];</highlight></codeline>
<codeline lineno="465"><highlight class="normal"></highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ktime.Count()<sp/>&gt;<sp/>1)</highlight></codeline>
<codeline lineno="467"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>pos.SetCount(ktime.Count()<sp/>*<sp/>3);</highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>scl.SetCount(ktime.Count()<sp/>*<sp/>3);</highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>rot.SetCount(ktime.Count()<sp/>*<sp/>3);</highlight></codeline>
<codeline lineno="471"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="472"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>pos.SetCount(ktime.Count());</highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>scl.SetCount(ktime.Count());</highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>rot.SetCount(ktime.Count());</highlight></codeline>
<codeline lineno="477"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="478"><highlight class="normal"></highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/><sp/><sp/><sp/>pos[0].t<sp/>=<sp/>rot[0].t<sp/>=<sp/>scl[0].t<sp/>=<sp/>ktime[0];</highlight></codeline>
<codeline lineno="480"><highlight class="normal"><sp/><sp/><sp/><sp/>pos[0].f<sp/>=<sp/>rot[0].f<sp/>=<sp/>scl[0].f<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/><sp/><sp/>interp_tm(ktime[0],<sp/>pos[0].<ref refid="polyBumpUtil_8cpp_1aaa1ebe818ec1c763a776cc580551f3e6" kindref="member">p</ref>,<sp/>rot[0].<ref refid="polyBumpUtil_8cpp_1aaa1ebe818ec1c763a776cc580551f3e6" kindref="member">p</ref>,<sp/>scl[0].<ref refid="polyBumpUtil_8cpp_1aaa1ebe818ec1c763a776cc580551f3e6" kindref="member">p</ref>,<sp/>cb);</highlight></codeline>
<codeline lineno="482"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="483"><highlight class="normal"></highlight></codeline>
<codeline lineno="484"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ktime.Count()<sp/>==<sp/>1)</highlight></codeline>
<codeline lineno="485"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="486"><highlight class="normal"></highlight></codeline>
<codeline lineno="487"><highlight class="normal"><sp/><sp/>assert(ktime.Count()<sp/>&gt;<sp/>1);</highlight></codeline>
<codeline lineno="488"><highlight class="normal"></highlight></codeline>
<codeline lineno="489"><highlight class="normal"><sp/><sp/>Interface<sp/>*ip<sp/>=<sp/>GetCOREInterface();</highlight></codeline>
<codeline lineno="490"><highlight class="normal"></highlight></codeline>
<codeline lineno="491"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>sample<sp/>keys</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/><sp/><ref refid="debug_8cpp_1ad66a73f3673f2879326899cf57fd8d2e" kindref="member">debug</ref>(</highlight><highlight class="stringliteral">&quot;start<sp/>sampling&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="493"><highlight class="normal"><sp/><sp/>ip-&gt;ProgressStart(_T(</highlight><highlight class="stringliteral">&quot;Exporting<sp/>Anim<sp/>v2...&quot;</highlight><highlight class="normal">),<sp/>FALSE,<sp/>dummyfn,<sp/>NULL);</highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/>t0<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="495"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>1;<sp/>i<sp/>&lt;<sp/>ktime.Count()<sp/>*<sp/>3;<sp/>++i)</highlight></codeline>
<codeline lineno="496"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="497"><highlight class="normal"><sp/><sp/><sp/><sp/>t1<sp/>=<sp/>timeGetTime();</highlight></codeline>
<codeline lineno="498"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(t1<sp/>-<sp/>t0<sp/>&gt;<sp/>200)</highlight></codeline>
<codeline lineno="499"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="500"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ip-&gt;ProgressUpdate(i<sp/>*<sp/>100<sp/>/<sp/>(ktime.Count()<sp/>*<sp/>3),<sp/>FALSE,<sp/>_T(</highlight><highlight class="stringliteral">&quot;Sampling&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="501"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>t0<sp/>=<sp/>t1;</highlight></codeline>
<codeline lineno="502"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="503"><highlight class="normal"><sp/><sp/><sp/><sp/>TimeValue<sp/>t<sp/>=<sp/>ktime[i<sp/>/<sp/>3]<sp/>+<sp/>(i<sp/>%<sp/>3)<sp/>*<sp/>GetTicksPerFrame()<sp/>/<sp/>3;</highlight></codeline>
<codeline lineno="504"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>temp_f<sp/>=<sp/>(i<sp/>%<sp/>3)<sp/>==<sp/>0<sp/>?<sp/>0<sp/>:<sp/>1;</highlight></codeline>
<codeline lineno="505"><highlight class="normal"></highlight></codeline>
<codeline lineno="506"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(k<sp/>=<sp/>0;<sp/>k<sp/>&lt;<sp/>node.Count();<sp/>k++)</highlight></codeline>
<codeline lineno="507"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="508"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Tab&lt;PosKey&gt;<sp/>&amp;pos<sp/>=<sp/>npos[k]-&gt;key;</highlight></codeline>
<codeline lineno="509"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Tab&lt;PosKey&gt;<sp/>&amp;scl<sp/>=<sp/>nscl[k]-&gt;key;</highlight></codeline>
<codeline lineno="510"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Tab&lt;RotKey&gt;<sp/>&amp;rot<sp/>=<sp/>nrot[k]-&gt;key;</highlight></codeline>
<codeline lineno="511"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classExpTMAnimCB" kindref="compound">ExpTMAnimCB</ref><sp/>&amp;cb<sp/>=<sp/>*ncb[k];</highlight></codeline>
<codeline lineno="512"><highlight class="normal"></highlight></codeline>
<codeline lineno="513"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>pos[i].t<sp/>=<sp/>rot[i].t<sp/>=<sp/>scl[i].t<sp/>=<sp/>t;</highlight></codeline>
<codeline lineno="514"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>pos[i].f<sp/>=<sp/>rot[i].f<sp/>=<sp/>scl[i].f<sp/>=<sp/>temp_f;</highlight></codeline>
<codeline lineno="515"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>interp_tm(t,<sp/>pos[i].<ref refid="polyBumpUtil_8cpp_1aaa1ebe818ec1c763a776cc580551f3e6" kindref="member">p</ref>,<sp/>rot[i].<ref refid="polyBumpUtil_8cpp_1aaa1ebe818ec1c763a776cc580551f3e6" kindref="member">p</ref>,<sp/>scl[i].<ref refid="polyBumpUtil_8cpp_1aaa1ebe818ec1c763a776cc580551f3e6" kindref="member">p</ref>,<sp/>cb);</highlight></codeline>
<codeline lineno="516"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="517"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="518"><highlight class="normal"></highlight></codeline>
<codeline lineno="519"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>create<sp/>interpolation<sp/>data</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="520"><highlight class="normal"><sp/><sp/><ref refid="debug_8cpp_1ad66a73f3673f2879326899cf57fd8d2e" kindref="member">debug</ref>(</highlight><highlight class="stringliteral">&quot;start<sp/>interpolating&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="521"><highlight class="normal"><sp/><sp/>ip-&gt;ProgressUpdate(0,<sp/>FALSE,<sp/>_T(</highlight><highlight class="stringliteral">&quot;Interpolating&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="522"><highlight class="normal"><sp/><sp/>t0<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="523"><highlight class="normal"></highlight></codeline>
<codeline lineno="524"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(k<sp/>=<sp/>0;<sp/>k<sp/>&lt;<sp/>node.Count();<sp/>k++)</highlight></codeline>
<codeline lineno="525"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="526"><highlight class="normal"><sp/><sp/><sp/><sp/>Tab&lt;PosKey&gt;<sp/>&amp;pos<sp/>=<sp/>npos[k]-&gt;key;</highlight></codeline>
<codeline lineno="527"><highlight class="normal"><sp/><sp/><sp/><sp/>Tab&lt;PosKey&gt;<sp/>&amp;scl<sp/>=<sp/>nscl[k]-&gt;key;</highlight></codeline>
<codeline lineno="528"><highlight class="normal"><sp/><sp/><sp/><sp/>Tab&lt;RotKey&gt;<sp/>&amp;rot<sp/>=<sp/>nrot[k]-&gt;key;</highlight></codeline>
<codeline lineno="529"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classExpTMAnimCB" kindref="compound">ExpTMAnimCB</ref><sp/>&amp;cb<sp/>=<sp/>*ncb[k];</highlight></codeline>
<codeline lineno="530"><highlight class="normal"></highlight></codeline>
<codeline lineno="531"><highlight class="normal"><sp/><sp/><sp/><sp/>t1<sp/>=<sp/>timeGetTime();</highlight></codeline>
<codeline lineno="532"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(t1<sp/>-<sp/>t0<sp/>&gt;<sp/>200)</highlight></codeline>
<codeline lineno="533"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="534"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ip-&gt;ProgressUpdate(k<sp/>*<sp/>100<sp/>/<sp/>node.Count(),<sp/>FALSE,<sp/>_T(</highlight><highlight class="stringliteral">&quot;Interpolating&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="535"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>t0<sp/>=<sp/>t1;</highlight></codeline>
<codeline lineno="536"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="537"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>ktime.Count()<sp/>-<sp/>1;<sp/>++i)</highlight></codeline>
<codeline lineno="538"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="539"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>calc_cp(pos[i<sp/>*<sp/>3],<sp/>pos[i<sp/>*<sp/>3<sp/>+<sp/>3],<sp/>pos[i<sp/>*<sp/>3<sp/>+<sp/>1].<ref refid="polyBumpUtil_8cpp_1aaa1ebe818ec1c763a776cc580551f3e6" kindref="member">p</ref>,<sp/>pos[i<sp/>*<sp/>3<sp/>+<sp/>2].<ref refid="polyBumpUtil_8cpp_1aaa1ebe818ec1c763a776cc580551f3e6" kindref="member">p</ref>);</highlight></codeline>
<codeline lineno="540"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>calc_cp(rot[i<sp/>*<sp/>3],<sp/>rot[i<sp/>*<sp/>3<sp/>+<sp/>3],<sp/>rot[i<sp/>*<sp/>3<sp/>+<sp/>1].<ref refid="polyBumpUtil_8cpp_1aaa1ebe818ec1c763a776cc580551f3e6" kindref="member">p</ref>,<sp/>rot[i<sp/>*<sp/>3<sp/>+<sp/>2].<ref refid="polyBumpUtil_8cpp_1aaa1ebe818ec1c763a776cc580551f3e6" kindref="member">p</ref>);</highlight></codeline>
<codeline lineno="541"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>calc_cp(scl[i<sp/>*<sp/>3],<sp/>scl[i<sp/>*<sp/>3<sp/>+<sp/>3],<sp/>scl[i<sp/>*<sp/>3<sp/>+<sp/>1].<ref refid="polyBumpUtil_8cpp_1aaa1ebe818ec1c763a776cc580551f3e6" kindref="member">p</ref>,<sp/>scl[i<sp/>*<sp/>3<sp/>+<sp/>2].<ref refid="polyBumpUtil_8cpp_1aaa1ebe818ec1c763a776cc580551f3e6" kindref="member">p</ref>);</highlight></codeline>
<codeline lineno="542"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="543"><highlight class="normal"></highlight></codeline>
<codeline lineno="544"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(expflags<sp/>&amp;<sp/><ref refid="dagor_8h_1adc29c2ff13d900c2f185ee95427fb06ca586010b725db9fe896a4b4b427909710" kindref="member">EXP_LOOPED_ANIM</ref>)</highlight></codeline>
<codeline lineno="545"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="546"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>i<sp/>=<sp/>ktime.Count()<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="547"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>calc_cp(pos[i<sp/>*<sp/>3],<sp/>pos[0],<sp/>pos[i<sp/>*<sp/>3<sp/>+<sp/>1].<ref refid="polyBumpUtil_8cpp_1aaa1ebe818ec1c763a776cc580551f3e6" kindref="member">p</ref>,<sp/>pos[i<sp/>*<sp/>3<sp/>+<sp/>2].<ref refid="polyBumpUtil_8cpp_1aaa1ebe818ec1c763a776cc580551f3e6" kindref="member">p</ref>);</highlight></codeline>
<codeline lineno="548"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="549"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="550"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="551"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>pos[0].i<sp/>=<sp/>pos[0].p<sp/>*<sp/>2<sp/>-<sp/>pos[0].o;</highlight></codeline>
<codeline lineno="552"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>rot[0].i<sp/>=<sp/>SLERP(rot[0].<ref refid="polyBumpUtil_8cpp_1aaa1ebe818ec1c763a776cc580551f3e6" kindref="member">p</ref>,<sp/>rot[0].o,<sp/>-1);</highlight></codeline>
<codeline lineno="553"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>scl[0].i<sp/>=<sp/>scl[0].p<sp/>*<sp/>2<sp/>-<sp/>scl[0].o;</highlight></codeline>
<codeline lineno="554"><highlight class="normal"></highlight></codeline>
<codeline lineno="555"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>i<sp/>=<sp/>ktime.Count()<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="556"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>pos[i].o<sp/>=<sp/>pos[i].p<sp/>*<sp/>2<sp/>-<sp/>pos[i].i;</highlight></codeline>
<codeline lineno="557"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>rot[i].o<sp/>=<sp/>SLERP(rot[i].<ref refid="polyBumpUtil_8cpp_1aaa1ebe818ec1c763a776cc580551f3e6" kindref="member">p</ref>,<sp/>rot[i].i,<sp/>-1);</highlight></codeline>
<codeline lineno="558"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>scl[i].o<sp/>=<sp/>scl[i].p<sp/>*<sp/>2<sp/>-<sp/>scl[i].i;</highlight></codeline>
<codeline lineno="559"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="560"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="561"><highlight class="normal"></highlight></codeline>
<codeline lineno="562"><highlight class="normal"><sp/><sp/><ref refid="debug_8cpp_1ad66a73f3673f2879326899cf57fd8d2e" kindref="member">debug</ref>(</highlight><highlight class="stringliteral">&quot;removing<sp/>unused<sp/>keys:<sp/>pos_thr=%.7f<sp/><sp/>rot_thr=%.7f&quot;</highlight><highlight class="normal">,<sp/>pos_thr,<sp/>rot_thr);</highlight></codeline>
<codeline lineno="563"><highlight class="normal"><sp/><sp/>ip-&gt;ProgressUpdate(0,<sp/>FALSE,<sp/>_T(</highlight><highlight class="stringliteral">&quot;Removing<sp/>keys&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="564"><highlight class="normal"><sp/><sp/>t0<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="565"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(k<sp/>=<sp/>0;<sp/>k<sp/>&lt;<sp/>node.Count();<sp/>k++)</highlight></codeline>
<codeline lineno="566"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="567"><highlight class="normal"><sp/><sp/><sp/><sp/>Tab&lt;PosKey&gt;<sp/>&amp;pos<sp/>=<sp/>npos[k]-&gt;key;</highlight></codeline>
<codeline lineno="568"><highlight class="normal"><sp/><sp/><sp/><sp/>Tab&lt;PosKey&gt;<sp/>&amp;scl<sp/>=<sp/>nscl[k]-&gt;key;</highlight></codeline>
<codeline lineno="569"><highlight class="normal"><sp/><sp/><sp/><sp/>Tab&lt;RotKey&gt;<sp/>&amp;rot<sp/>=<sp/>nrot[k]-&gt;key;</highlight></codeline>
<codeline lineno="570"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classExpTMAnimCB" kindref="compound">ExpTMAnimCB</ref><sp/>&amp;cb<sp/>=<sp/>*ncb[k];</highlight></codeline>
<codeline lineno="571"><highlight class="normal"></highlight></codeline>
<codeline lineno="572"><highlight class="normal"><sp/><sp/><sp/><sp/>t1<sp/>=<sp/>timeGetTime();</highlight></codeline>
<codeline lineno="573"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(t1<sp/>-<sp/>t0<sp/>&gt;<sp/>200)</highlight></codeline>
<codeline lineno="574"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="575"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ip-&gt;ProgressUpdate(k<sp/>*<sp/>100<sp/>/<sp/>node.Count(),<sp/>FALSE,<sp/>_T(</highlight><highlight class="stringliteral">&quot;Removing<sp/>keys&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="576"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>t0<sp/>=<sp/>t1;</highlight></codeline>
<codeline lineno="577"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="578"><highlight class="normal"></highlight></codeline>
<codeline lineno="579"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>removing<sp/>unused<sp/>keys:<sp/>pos</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="580"><highlight class="normal"><sp/><sp/><sp/><sp/>optimize_pos_key(pos,<sp/>ktime.Count(),<sp/>!(expflags<sp/>&amp;<sp/><ref refid="dagor_8h_1adc29c2ff13d900c2f185ee95427fb06cabbf7c66e7c660f84d0a9f4a16791f755" kindref="member">EXP_DONT_REDUCE_POS</ref>),<sp/>lim,<sp/>pos_thr,<sp/></highlight><highlight class="stringliteral">&quot;pos&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="581"><highlight class="normal"><sp/><sp/><sp/><sp/>optimize_pos_key(scl,<sp/>ktime.Count(),<sp/>!(expflags<sp/>&amp;<sp/><ref refid="dagor_8h_1adc29c2ff13d900c2f185ee95427fb06ca414ab861700663ad48785af6f890032e" kindref="member">EXP_DONT_REDUCE_SCL</ref>),<sp/>lim,<sp/>scl_thr,<sp/></highlight><highlight class="stringliteral">&quot;scl&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="582"><highlight class="normal"><sp/><sp/><sp/><sp/>optimize_rot_key(rot,<sp/>ktime.Count(),<sp/>!(expflags<sp/>&amp;<sp/><ref refid="dagor_8h_1adc29c2ff13d900c2f185ee95427fb06cafb2e1e878c65f7ea4518fbd009d9e734" kindref="member">EXP_DONT_REDUCE_ROT</ref>),<sp/>lim,<sp/>rot_thr,<sp/></highlight><highlight class="stringliteral">&quot;rot&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="583"><highlight class="normal"></highlight></codeline>
<codeline lineno="584"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>report<sp/>results</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="585"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="586"><highlight class="comment"><sp/><sp/><sp/><sp/>debug<sp/>(&quot;node<sp/>%d:<sp/>%s&quot;,<sp/>k,<sp/>cb.get_name<sp/>());</highlight></codeline>
<codeline lineno="587"><highlight class="comment"><sp/><sp/><sp/><sp/>debug<sp/>(&quot;pos.Count()=%d&quot;,<sp/>pos.Count<sp/>());</highlight></codeline>
<codeline lineno="588"><highlight class="comment"><sp/><sp/><sp/><sp/>debug<sp/>(&quot;scl.Count()=%d&quot;,<sp/>scl.Count<sp/>());</highlight></codeline>
<codeline lineno="589"><highlight class="comment"><sp/><sp/><sp/><sp/>debug<sp/>(&quot;rot.Count()=%d&quot;,<sp/>rot.Count<sp/>());</highlight></codeline>
<codeline lineno="590"><highlight class="comment"><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="591"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="592"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="593"><highlight class="comment"><sp/><sp/>debug<sp/>(<sp/>&quot;total_pos=%d<sp/>removed_pos1=%d<sp/>removed_pos2=%d&quot;,<sp/>total_pos,<sp/>removed_pos1,<sp/>removed_pos2<sp/>);</highlight></codeline>
<codeline lineno="594"><highlight class="comment"><sp/><sp/>debug<sp/>(<sp/>&quot;total_rot=%d<sp/>removed_rot1=%d<sp/>removed_rot2=%d&quot;,<sp/>total_rot,<sp/>removed_rot1,<sp/>removed_rot2<sp/>);</highlight></codeline>
<codeline lineno="595"><highlight class="comment"><sp/><sp/>debug<sp/>(<sp/>&quot;total_scl=%d<sp/>removed_scl1=%d<sp/>removed_scl2=%d&quot;,<sp/>total_scl,<sp/>removed_scl1,<sp/>removed_scl2<sp/>);</highlight></codeline>
<codeline lineno="596"><highlight class="comment"><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="597"><highlight class="normal"><sp/><sp/>ip-&gt;ProgressEnd();</highlight></codeline>
<codeline lineno="598"><highlight class="normal"></highlight></codeline>
<codeline lineno="599"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="600"><highlight class="normal">}</highlight></codeline>
<codeline lineno="601"><highlight class="normal"></highlight></codeline>
<codeline lineno="602"><highlight class="normal">Point3<sp/><ref refid="expanim2_8cpp_1a33ec6357564a85171cd85c6125f66666" kindref="member">getAngularVelocity</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Quat<sp/>&amp;q0,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Quat<sp/>&amp;q1,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>dt)</highlight></codeline>
<codeline lineno="603"><highlight class="normal">{</highlight></codeline>
<codeline lineno="604"><highlight class="normal"><sp/><sp/>Quat<sp/>dq<sp/>=<sp/>q1<sp/>*<sp/>Conjugate(q0);</highlight></codeline>
<codeline lineno="605"><highlight class="normal"><sp/><sp/>dq.Normalize();</highlight></codeline>
<codeline lineno="606"><highlight class="normal"></highlight></codeline>
<codeline lineno="607"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>_1_w2<sp/>=<sp/>1<sp/>-<sp/>dq.w<sp/>*<sp/>dq.w;</highlight></codeline>
<codeline lineno="608"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(dq.w<sp/>&lt;<sp/>0)</highlight></codeline>
<codeline lineno="609"><highlight class="normal"><sp/><sp/><sp/><sp/>dq<sp/>=<sp/>-dq;</highlight></codeline>
<codeline lineno="610"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*debug<sp/>(<sp/>&quot;q0=%.5f,%.5f,%.5f,%.5f\nq1=%.5f,%.5f,%.5f,%.5f\ndq=%.5f,%.5f,%.5f,%.5f\n1-w*w=%.9f&quot;,</highlight></codeline>
<codeline lineno="611"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>q0.x,<sp/>q0.y,<sp/>q0.z,<sp/>q0.w,</highlight></codeline>
<codeline lineno="612"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>q1.x,<sp/>q1.y,<sp/>q1.z,<sp/>q1.w,</highlight></codeline>
<codeline lineno="613"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dq.x,<sp/>dq.y,<sp/>dq.z,<sp/>dq.w,</highlight></codeline>
<codeline lineno="614"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_1_w2<sp/>);*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="615"><highlight class="normal"></highlight></codeline>
<codeline lineno="616"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(_1_w2<sp/>&lt;<sp/>1e-7)</highlight></codeline>
<codeline lineno="617"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Point3(0,<sp/>0,<sp/>0);</highlight></codeline>
<codeline lineno="618"><highlight class="normal"></highlight></codeline>
<codeline lineno="619"><highlight class="normal"><sp/><sp/>Point3<sp/>wvel<sp/>=<sp/>Point3(dq.x,<sp/>dq.y,<sp/>dq.z);</highlight></codeline>
<codeline lineno="620"><highlight class="normal"><sp/><sp/>wvel<sp/>*=<sp/>(2<sp/>*<sp/>acos(dq.w)<sp/>/<sp/>sqrt(_1_w2))<sp/>/<sp/>dt;</highlight></codeline>
<codeline lineno="621"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>debug<sp/>(<sp/>&quot;wvel=%.5f,<sp/>%.5f,<sp/>%.5f<sp/><sp/>dt=%.3f&quot;,<sp/>wvel.x,<sp/>wvel.y,<sp/>wvel.z,<sp/>dt<sp/>);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="622"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>wvel;</highlight></codeline>
<codeline lineno="623"><highlight class="normal">}</highlight></codeline>
<codeline lineno="624"><highlight class="normal"></highlight></codeline>
<codeline lineno="625"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="expanim2_8cpp_1acc100143ff47c9ca807a72a2077fc96a" kindref="member">get_node_vel</ref>(Tab&lt;AnimKeyPoint3&gt;<sp/>&amp;lin_vel,<sp/>Tab&lt;AnimKeyPoint3&gt;<sp/>&amp;ang_vel,<sp/>Tab&lt;int&gt;<sp/>&amp;lin_vel_t,<sp/>Tab&lt;int&gt;<sp/>&amp;ang_vel_t,</highlight></codeline>
<codeline lineno="626"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Interval<sp/>&amp;limit,<sp/><ref refid="classExpTMAnimCB" kindref="compound">ExpTMAnimCB</ref><sp/>&amp;cb,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>pos_thr,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>rot_thr,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>expflags)</highlight></codeline>
<codeline lineno="627"><highlight class="normal">{</highlight></codeline>
<codeline lineno="628"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="629"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>t0,<sp/>t1;</highlight></codeline>
<codeline lineno="630"><highlight class="normal"></highlight></codeline>
<codeline lineno="631"><highlight class="normal"><sp/><sp/>lim<sp/>=<sp/>limit;</highlight></codeline>
<codeline lineno="632"><highlight class="normal"><sp/><sp/>ktime.ZeroCount();</highlight></codeline>
<codeline lineno="633"><highlight class="normal"></highlight></codeline>
<codeline lineno="634"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(lim.Start()<sp/>==<sp/>TIME_NegInfinity)</highlight></codeline>
<codeline lineno="635"><highlight class="normal"><sp/><sp/><sp/><sp/>lim.SetInstant(0);</highlight></codeline>
<codeline lineno="636"><highlight class="normal"></highlight></codeline>
<codeline lineno="637"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(lim.Start()<sp/>==<sp/>lim.End())</highlight></codeline>
<codeline lineno="638"><highlight class="normal"><sp/><sp/><sp/><sp/>add_ktime(lim.Start());</highlight></codeline>
<codeline lineno="639"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="640"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="641"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>lim.Start();<sp/>i<sp/>&lt;<sp/>lim.End();<sp/>i<sp/>+=<sp/>GetTicksPerFrame())</highlight></codeline>
<codeline lineno="642"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>add_ktime(i,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="643"><highlight class="normal"><sp/><sp/><sp/><sp/>add_ktime(lim.End());</highlight></codeline>
<codeline lineno="644"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="645"><highlight class="normal"><sp/><sp/>sort_ktime();</highlight></codeline>
<codeline lineno="646"><highlight class="normal"><sp/><sp/><ref refid="debug_8cpp_1ad66a73f3673f2879326899cf57fd8d2e" kindref="member">debug</ref>(</highlight><highlight class="stringliteral">&quot;nodevel:<sp/>ktime.Count()=%d&quot;</highlight><highlight class="normal">,<sp/>ktime.Count());</highlight></codeline>
<codeline lineno="647"><highlight class="normal"></highlight></codeline>
<codeline lineno="648"><highlight class="normal"><sp/><sp/>Tab&lt;PosKey&gt;<sp/>pos;</highlight></codeline>
<codeline lineno="649"><highlight class="normal"><sp/><sp/>Tab&lt;RotKey&gt;<sp/>rot;</highlight></codeline>
<codeline lineno="650"><highlight class="normal"><sp/><sp/>Point3<sp/>scl;</highlight></codeline>
<codeline lineno="651"><highlight class="normal"></highlight></codeline>
<codeline lineno="652"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>create<sp/>temporary<sp/>structures</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="653"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ktime.Count()<sp/>&gt;<sp/>1)</highlight></codeline>
<codeline lineno="654"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="655"><highlight class="normal"><sp/><sp/><sp/><sp/>pos.SetCount(ktime.Count()<sp/>*<sp/>3);</highlight></codeline>
<codeline lineno="656"><highlight class="normal"><sp/><sp/><sp/><sp/>rot.SetCount(ktime.Count()<sp/>*<sp/>3);</highlight></codeline>
<codeline lineno="657"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="658"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="659"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="660"><highlight class="normal"><sp/><sp/><sp/><sp/>pos.SetCount(ktime.Count());</highlight></codeline>
<codeline lineno="661"><highlight class="normal"><sp/><sp/><sp/><sp/>rot.SetCount(ktime.Count());</highlight></codeline>
<codeline lineno="662"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="663"><highlight class="normal"></highlight></codeline>
<codeline lineno="664"><highlight class="normal"><sp/><sp/>pos[0].t<sp/>=<sp/>rot[0].t<sp/>=<sp/>ktime[0];</highlight></codeline>
<codeline lineno="665"><highlight class="normal"><sp/><sp/>pos[0].f<sp/>=<sp/>rot[0].f<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="666"><highlight class="normal"><sp/><sp/>interp_tm(ktime[0],<sp/>pos[0].<ref refid="polyBumpUtil_8cpp_1aaa1ebe818ec1c763a776cc580551f3e6" kindref="member">p</ref>,<sp/>rot[0].<ref refid="polyBumpUtil_8cpp_1aaa1ebe818ec1c763a776cc580551f3e6" kindref="member">p</ref>,<sp/>scl,<sp/>cb);</highlight></codeline>
<codeline lineno="667"><highlight class="normal"></highlight></codeline>
<codeline lineno="668"><highlight class="normal"><sp/><sp/>assert(ktime.Count()<sp/>&gt;=<sp/>1);</highlight></codeline>
<codeline lineno="669"><highlight class="normal"></highlight></codeline>
<codeline lineno="670"><highlight class="normal"><sp/><sp/>Interface<sp/>*ip<sp/>=<sp/>GetCOREInterface();</highlight></codeline>
<codeline lineno="671"><highlight class="normal"><sp/><sp/>ip-&gt;ProgressStart(_T(</highlight><highlight class="stringliteral">&quot;Exporting<sp/>Anim<sp/>v2...&quot;</highlight><highlight class="normal">),<sp/>FALSE,<sp/>dummyfn,<sp/>NULL);</highlight></codeline>
<codeline lineno="672"><highlight class="normal"></highlight></codeline>
<codeline lineno="673"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ktime.Count()<sp/>&gt;<sp/>1)</highlight></codeline>
<codeline lineno="674"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="675"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>sample<sp/>keys</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="676"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="debug_8cpp_1ad66a73f3673f2879326899cf57fd8d2e" kindref="member">debug</ref>(</highlight><highlight class="stringliteral">&quot;start<sp/>sampling<sp/>origin<sp/>pos/rot&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="677"><highlight class="normal"></highlight></codeline>
<codeline lineno="678"><highlight class="normal"><sp/><sp/><sp/><sp/>t0<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="679"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>1;<sp/>i<sp/>&lt;<sp/>ktime.Count()<sp/>*<sp/>3;<sp/>++i)</highlight></codeline>
<codeline lineno="680"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="681"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>t1<sp/>=<sp/>timeGetTime();</highlight></codeline>
<codeline lineno="682"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(t1<sp/>-<sp/>t0<sp/>&gt;<sp/>200)</highlight></codeline>
<codeline lineno="683"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="684"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ip-&gt;ProgressUpdate(i<sp/>*<sp/>100<sp/>/<sp/>(ktime.Count()<sp/>*<sp/>3),<sp/>FALSE,<sp/>_T(</highlight><highlight class="stringliteral">&quot;Sampling<sp/>node<sp/>pos/rot&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="685"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>t0<sp/>=<sp/>t1;</highlight></codeline>
<codeline lineno="686"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="687"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>TimeValue<sp/>t<sp/>=<sp/>ktime[i<sp/>/<sp/>3]<sp/>+<sp/>(i<sp/>%<sp/>3)<sp/>*<sp/>GetTicksPerFrame()<sp/>/<sp/>3;</highlight></codeline>
<codeline lineno="688"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>temp_f<sp/>=<sp/>(i<sp/>%<sp/>3)<sp/>==<sp/>0<sp/>?<sp/>0<sp/>:<sp/>1;</highlight></codeline>
<codeline lineno="689"><highlight class="normal"></highlight></codeline>
<codeline lineno="690"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>pos[i].t<sp/>=<sp/>rot[i].t<sp/>=<sp/>t;</highlight></codeline>
<codeline lineno="691"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>pos[i].f<sp/>=<sp/>rot[i].f<sp/>=<sp/>temp_f;</highlight></codeline>
<codeline lineno="692"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>interp_tm(t,<sp/>pos[i].<ref refid="polyBumpUtil_8cpp_1aaa1ebe818ec1c763a776cc580551f3e6" kindref="member">p</ref>,<sp/>rot[i].<ref refid="polyBumpUtil_8cpp_1aaa1ebe818ec1c763a776cc580551f3e6" kindref="member">p</ref>,<sp/>scl,<sp/>cb);</highlight></codeline>
<codeline lineno="693"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="694"><highlight class="normal"></highlight></codeline>
<codeline lineno="695"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>transform<sp/>origin<sp/>movement<sp/>to<sp/>origin-relative<sp/>coord<sp/>system</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="696"><highlight class="normal"><sp/><sp/><sp/><sp/>Point3<sp/>or_pos<sp/>=<sp/>Point3(0,<sp/>0,<sp/>0),<sp/>d_pos;</highlight></codeline>
<codeline lineno="697"><highlight class="normal"><sp/><sp/><sp/><sp/>Point3<sp/>l_pos<sp/>=<sp/>pos[0].p;</highlight></codeline>
<codeline lineno="698"><highlight class="normal"><sp/><sp/><sp/><sp/>Matrix3<sp/>or_rot;</highlight></codeline>
<codeline lineno="699"><highlight class="normal"></highlight></codeline>
<codeline lineno="700"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>ktime.Count()<sp/>*<sp/>3<sp/>-<sp/>1;<sp/>++i)</highlight></codeline>
<codeline lineno="701"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="702"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>d_pos<sp/>=<sp/>pos[i<sp/>+<sp/>1].p<sp/>-<sp/>l_pos;</highlight></codeline>
<codeline lineno="703"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>or_rot<sp/>=<sp/>make_tm(Point3(0,<sp/>0,<sp/>0),<sp/>rot[i].<ref refid="polyBumpUtil_8cpp_1aaa1ebe818ec1c763a776cc580551f3e6" kindref="member">p</ref>,<sp/>Point3(1,<sp/>1,<sp/>1));</highlight></codeline>
<codeline lineno="704"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>pos[i].p<sp/>=<sp/>or_pos;</highlight></codeline>
<codeline lineno="705"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>or_pos<sp/>+=<sp/>Inverse(or_rot)<sp/>*<sp/>d_pos;</highlight></codeline>
<codeline lineno="706"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//==debug<sp/>(<sp/>&quot;p=(%.3f,%.3f,%.3f)<sp/>-&gt;<sp/>(%.3f,%.3f,%.3f)&quot;,<sp/>l_pos.x,<sp/>l_pos.y,<sp/>l_pos.z,<sp/>pos[i].p.x,<sp/>pos[i].p.y,<sp/>pos[i].p.z<sp/>);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="707"><highlight class="normal"></highlight></codeline>
<codeline lineno="708"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>l_pos<sp/>=<sp/>pos[i<sp/>+<sp/>1].p;</highlight></codeline>
<codeline lineno="709"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="710"><highlight class="normal"></highlight></codeline>
<codeline lineno="711"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>create<sp/>interpolation<sp/>data</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="712"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="debug_8cpp_1ad66a73f3673f2879326899cf57fd8d2e" kindref="member">debug</ref>(</highlight><highlight class="stringliteral">&quot;start<sp/>interpolating&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="713"><highlight class="normal"><sp/><sp/><sp/><sp/>ip-&gt;ProgressUpdate(0,<sp/>FALSE,<sp/>_T(</highlight><highlight class="stringliteral">&quot;Processing<sp/>node<sp/>rot/pos&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="714"><highlight class="normal"></highlight></codeline>
<codeline lineno="715"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>ktime.Count()<sp/>-<sp/>1;<sp/>++i)</highlight></codeline>
<codeline lineno="716"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="717"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>calc_cp(pos[i<sp/>*<sp/>3],<sp/>pos[i<sp/>*<sp/>3<sp/>+<sp/>3],<sp/>pos[i<sp/>*<sp/>3<sp/>+<sp/>1].<ref refid="polyBumpUtil_8cpp_1aaa1ebe818ec1c763a776cc580551f3e6" kindref="member">p</ref>,<sp/>pos[i<sp/>*<sp/>3<sp/>+<sp/>2].<ref refid="polyBumpUtil_8cpp_1aaa1ebe818ec1c763a776cc580551f3e6" kindref="member">p</ref>);</highlight></codeline>
<codeline lineno="718"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>calc_cp(rot[i<sp/>*<sp/>3],<sp/>rot[i<sp/>*<sp/>3<sp/>+<sp/>3],<sp/>rot[i<sp/>*<sp/>3<sp/>+<sp/>1].<ref refid="polyBumpUtil_8cpp_1aaa1ebe818ec1c763a776cc580551f3e6" kindref="member">p</ref>,<sp/>rot[i<sp/>*<sp/>3<sp/>+<sp/>2].<ref refid="polyBumpUtil_8cpp_1aaa1ebe818ec1c763a776cc580551f3e6" kindref="member">p</ref>);</highlight></codeline>
<codeline lineno="719"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="720"><highlight class="normal"></highlight></codeline>
<codeline lineno="721"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(expflags<sp/>&amp;<sp/><ref refid="dagor_8h_1adc29c2ff13d900c2f185ee95427fb06ca586010b725db9fe896a4b4b427909710" kindref="member">EXP_LOOPED_ANIM</ref>)</highlight></codeline>
<codeline lineno="722"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="723"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>i<sp/>=<sp/>ktime.Count()<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="724"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>calc_cp(pos[i<sp/>*<sp/>3],<sp/>pos[0],<sp/>pos[i<sp/>*<sp/>3<sp/>+<sp/>1].<ref refid="polyBumpUtil_8cpp_1aaa1ebe818ec1c763a776cc580551f3e6" kindref="member">p</ref>,<sp/>pos[i<sp/>*<sp/>3<sp/>+<sp/>2].<ref refid="polyBumpUtil_8cpp_1aaa1ebe818ec1c763a776cc580551f3e6" kindref="member">p</ref>);</highlight></codeline>
<codeline lineno="725"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="726"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="727"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="728"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>pos[0].i<sp/>=<sp/>pos[0].p<sp/>*<sp/>2<sp/>-<sp/>pos[0].o;</highlight></codeline>
<codeline lineno="729"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>rot[0].i<sp/>=<sp/>SLERP(rot[0].<ref refid="polyBumpUtil_8cpp_1aaa1ebe818ec1c763a776cc580551f3e6" kindref="member">p</ref>,<sp/>rot[0].o,<sp/>-1);</highlight></codeline>
<codeline lineno="730"><highlight class="normal"></highlight></codeline>
<codeline lineno="731"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>i<sp/>=<sp/>ktime.Count()<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="732"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>pos[i].o<sp/>=<sp/>pos[i].p<sp/>*<sp/>2<sp/>-<sp/>pos[i].i;</highlight></codeline>
<codeline lineno="733"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>rot[i].o<sp/>=<sp/>SLERP(rot[i].<ref refid="polyBumpUtil_8cpp_1aaa1ebe818ec1c763a776cc580551f3e6" kindref="member">p</ref>,<sp/>rot[i].i,<sp/>-1);</highlight></codeline>
<codeline lineno="734"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="735"><highlight class="normal"></highlight></codeline>
<codeline lineno="736"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="debug_8cpp_1ad66a73f3673f2879326899cf57fd8d2e" kindref="member">debug</ref>(</highlight><highlight class="stringliteral">&quot;removing<sp/>unused<sp/>keys:<sp/>pos_thr=%.7f<sp/>rot_eps=%.7f&quot;</highlight><highlight class="normal">,<sp/>pos_thr,<sp/>rot_thr);</highlight></codeline>
<codeline lineno="737"><highlight class="normal"><sp/><sp/><sp/><sp/>ip-&gt;ProgressUpdate(30,<sp/>FALSE,<sp/>_T(</highlight><highlight class="stringliteral">&quot;Processing<sp/>node<sp/>rot/pos&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="738"><highlight class="normal"></highlight></codeline>
<codeline lineno="739"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>removing<sp/>unused<sp/>keys:<sp/>pos</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="740"><highlight class="normal"><sp/><sp/><sp/><sp/>optimize_pos_key(pos,<sp/>ktime.Count(),<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/>lim,<sp/>pos_thr,<sp/></highlight><highlight class="stringliteral">&quot;origin<sp/>pos&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="741"><highlight class="normal"><sp/><sp/><sp/><sp/>optimize_rot_key(rot,<sp/>ktime.Count(),<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/>lim,<sp/>rot_thr,<sp/></highlight><highlight class="stringliteral">&quot;origin<sp/>rot&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="742"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="743"><highlight class="normal"><sp/><sp/><ref refid="debug_8cpp_1ad66a73f3673f2879326899cf57fd8d2e" kindref="member">debug</ref>(</highlight><highlight class="stringliteral">&quot;calculating<sp/>velocities&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="744"><highlight class="normal"><sp/><sp/>ip-&gt;ProgressUpdate(70,<sp/>FALSE,<sp/>_T(</highlight><highlight class="stringliteral">&quot;Processing<sp/>node<sp/>rot/pos&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="745"><highlight class="normal"></highlight></codeline>
<codeline lineno="746"><highlight class="normal"><sp/><sp/><ref refid="debug_8cpp_1ad66a73f3673f2879326899cf57fd8d2e" kindref="member">debug</ref>(</highlight><highlight class="stringliteral">&quot;pos.Count()=%d<sp/>rot.Count()=%d&quot;</highlight><highlight class="normal">,<sp/>pos.Count(),<sp/>rot.Count());</highlight></codeline>
<codeline lineno="747"><highlight class="normal"></highlight></codeline>
<codeline lineno="748"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>calculate<sp/>linear<sp/>velocity</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="749"><highlight class="normal"><sp/><sp/>lin_vel.SetCount(pos.Count());</highlight></codeline>
<codeline lineno="750"><highlight class="normal"><sp/><sp/>lin_vel_t.SetCount(pos.Count());</highlight></codeline>
<codeline lineno="751"><highlight class="normal"></highlight></codeline>
<codeline lineno="752"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>float<sp/>sum<sp/>=<sp/>0;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="753"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>pos.Count()<sp/>-<sp/>1;<sp/>i<sp/>&gt;=<sp/>0;<sp/>i--)</highlight></codeline>
<codeline lineno="754"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="755"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structAnimKeyPoint3" kindref="compound">AnimKeyPoint3</ref><sp/>k;</highlight></codeline>
<codeline lineno="756"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dt;</highlight></codeline>
<codeline lineno="757"><highlight class="normal"></highlight></codeline>
<codeline lineno="758"><highlight class="normal"><sp/><sp/><sp/><sp/>lin_vel_t[i]<sp/>=<sp/>pos[i].t;</highlight></codeline>
<codeline lineno="759"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>debug<sp/>(<sp/>&quot;%5d:<sp/>t=%5d<sp/><sp/>pos[i].p=%.3f,%.3f,%.3f&quot;,<sp/>i,<sp/>pos[i].t,<sp/>pos[i].p.x,<sp/>pos[i].p.y,<sp/>pos[i].p.z<sp/>);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="760"><highlight class="normal"></highlight></codeline>
<codeline lineno="761"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i<sp/>+<sp/>1<sp/>&gt;=<sp/>pos.Count())</highlight></codeline>
<codeline lineno="762"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="763"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!(expflags<sp/>&amp;<sp/><ref refid="dagor_8h_1adc29c2ff13d900c2f185ee95427fb06ca586010b725db9fe896a4b4b427909710" kindref="member">EXP_LOOPED_ANIM</ref>))</highlight></codeline>
<codeline lineno="764"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="765"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memset(&amp;lin_vel[i],<sp/>0,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="structAnimKeyPoint3" kindref="compound">AnimKeyPoint3</ref>));</highlight></codeline>
<codeline lineno="766"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="767"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="768"><highlight class="normal"></highlight></codeline>
<codeline lineno="769"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>k.<ref refid="structAnimKeyPoint3_1a1f2bc40f014af74a3031b7d8e68ed2e0" kindref="member">p</ref><sp/>=<sp/>pos[i].p;</highlight></codeline>
<codeline lineno="770"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>k.<ref refid="structAnimKeyPoint3_1a6c2fc8d585bf30bdffd3e4bca1565a88" kindref="member">k1</ref><sp/>=<sp/>(pos[i].o<sp/>-<sp/>pos[i].p)<sp/>*<sp/>3;</highlight></codeline>
<codeline lineno="771"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>k.<ref refid="structAnimKeyPoint3_1ac127ab60ea8537d769c7c28b93b028b6" kindref="member">k2</ref><sp/>=<sp/>(pos[i].p<sp/>+<sp/>pos[0].i<sp/>-<sp/>pos[i].o<sp/>*<sp/>2)<sp/>*<sp/>3;</highlight></codeline>
<codeline lineno="772"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>k.<ref refid="structAnimKeyPoint3_1a1cfcf2df0d85a3d1402c3450adcf47ae" kindref="member">k3</ref><sp/>=<sp/>(pos[i].o<sp/>-<sp/>pos[0].i)<sp/>*<sp/>3<sp/>+<sp/>pos[0].<ref refid="polyBumpUtil_8cpp_1aaa1ebe818ec1c763a776cc580551f3e6" kindref="member">p</ref><sp/>-<sp/>pos[i].<ref refid="polyBumpUtil_8cpp_1aaa1ebe818ec1c763a776cc580551f3e6" kindref="member">p</ref>;</highlight></codeline>
<codeline lineno="773"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>dt<sp/>=<sp/>pos[0].t<sp/>-<sp/>pos[i].t<sp/>+<sp/>(lim.End()<sp/>-<sp/>lim.Start()<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="774"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(dt<sp/>&lt;<sp/>1)</highlight></codeline>
<codeline lineno="775"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dt<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="776"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="777"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="778"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="779"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>k.<ref refid="structAnimKeyPoint3_1a1f2bc40f014af74a3031b7d8e68ed2e0" kindref="member">p</ref><sp/>=<sp/>pos[i].p;</highlight></codeline>
<codeline lineno="780"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>k.<ref refid="structAnimKeyPoint3_1a6c2fc8d585bf30bdffd3e4bca1565a88" kindref="member">k1</ref><sp/>=<sp/>(pos[i].o<sp/>-<sp/>pos[i].p)<sp/>*<sp/>3;</highlight></codeline>
<codeline lineno="781"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>k.<ref refid="structAnimKeyPoint3_1ac127ab60ea8537d769c7c28b93b028b6" kindref="member">k2</ref><sp/>=<sp/>(pos[i].p<sp/>+<sp/>pos[i<sp/>+<sp/>1].i<sp/>-<sp/>pos[i].o<sp/>*<sp/>2)<sp/>*<sp/>3;</highlight></codeline>
<codeline lineno="782"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>k.<ref refid="structAnimKeyPoint3_1a1cfcf2df0d85a3d1402c3450adcf47ae" kindref="member">k3</ref><sp/>=<sp/>(pos[i].o<sp/>-<sp/>pos[i<sp/>+<sp/>1].i)<sp/>*<sp/>3<sp/>+<sp/>pos[i<sp/>+<sp/>1].<ref refid="polyBumpUtil_8cpp_1aaa1ebe818ec1c763a776cc580551f3e6" kindref="member">p</ref><sp/>-<sp/>pos[i].<ref refid="polyBumpUtil_8cpp_1aaa1ebe818ec1c763a776cc580551f3e6" kindref="member">p</ref>;</highlight></codeline>
<codeline lineno="783"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>dt<sp/>=<sp/>pos[i<sp/>+<sp/>1].t<sp/>-<sp/>pos[i].t;</highlight></codeline>
<codeline lineno="784"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="785"><highlight class="normal"></highlight></codeline>
<codeline lineno="786"><highlight class="normal"><sp/><sp/><sp/><sp/>lin_vel[i].p<sp/>=<sp/>k.<ref refid="structAnimKeyPoint3_1a6c2fc8d585bf30bdffd3e4bca1565a88" kindref="member">k1</ref><sp/>/<sp/>dt;</highlight></codeline>
<codeline lineno="787"><highlight class="normal"><sp/><sp/><sp/><sp/>lin_vel[i].k1<sp/>=<sp/>2<sp/>*<sp/>k.<ref refid="structAnimKeyPoint3_1ac127ab60ea8537d769c7c28b93b028b6" kindref="member">k2</ref><sp/>/<sp/>dt;<sp/></highlight><highlight class="comment">//<sp/>dt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="788"><highlight class="normal"><sp/><sp/><sp/><sp/>lin_vel[i].k2<sp/>=<sp/>3<sp/>*<sp/>k.<ref refid="structAnimKeyPoint3_1a1cfcf2df0d85a3d1402c3450adcf47ae" kindref="member">k3</ref><sp/>/<sp/>dt;<sp/></highlight><highlight class="comment">//<sp/>dt/dt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="789"><highlight class="normal"><sp/><sp/><sp/><sp/>lin_vel[i].k3<sp/>=<sp/>Point3(0,<sp/>0,<sp/>0);</highlight></codeline>
<codeline lineno="790"><highlight class="normal"></highlight></codeline>
<codeline lineno="791"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//==debug<sp/>(<sp/>&quot;%3d:<sp/>t=%5d<sp/><sp/>lin_vel[i].p=%.7f,%.7f,%.7f<sp/><sp/>dt=%d&quot;,<sp/>i,<sp/>lin_vel_t[i],<sp/>lin_vel[i].p.x,<sp/>lin_vel[i].p.y,<sp/>lin_vel[i].p.z,<sp/>dt</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="792"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="793"><highlight class="normal"></highlight></codeline>
<codeline lineno="794"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="795"><highlight class="comment"><sp/><sp/><sp/><sp/>debug<sp/>(<sp/>&quot;%3d:<sp/>t=%5d<sp/><sp/>lin_vel[i].p=%.7f,%.7f,%.7f<sp/><sp/>p=(%.5f,%.5f,%.5f)<sp/>k1=(%.5f,%.5f,%.5f)<sp/>k2=(%.5f,%.5f,%.5f)<sp/>k3=(%.5f,%.5f,%.5f),</highlight></codeline>
<codeline lineno="796"><highlight class="comment"><sp/><sp/><sp/><sp/>dt=%d&quot;,<sp/>i,<sp/>lin_vel_t[i],<sp/>lin_vel[i].p.x,<sp/>lin_vel[i].p.y,<sp/>lin_vel[i].p.z,<sp/>k.p.x,<sp/>k.p.y,<sp/>k.p.z,<sp/>k.k1.x,<sp/>k.k1.y,<sp/>k.k1.z,<sp/>k.k2.x,</highlight></codeline>
<codeline lineno="797"><highlight class="comment"><sp/><sp/><sp/><sp/>k.k2.y,<sp/>k.k2.z,<sp/>k.k3.x,<sp/>k.k3.y,<sp/>k.k3.z,<sp/>dt<sp/>);</highlight></codeline>
<codeline lineno="798"><highlight class="comment"></highlight></codeline>
<codeline lineno="799"><highlight class="comment"><sp/><sp/><sp/><sp/>float<sp/>step_x<sp/>=<sp/>0.02;</highlight></codeline>
<codeline lineno="800"><highlight class="comment"><sp/><sp/><sp/><sp/>for<sp/>(<sp/>float<sp/>px<sp/>=<sp/>1.0;<sp/>px<sp/>&gt;=<sp/>0.0;<sp/>px<sp/>-=<sp/>step_x<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="801"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>float<sp/>vel_z<sp/>=<sp/>(lin_vel[i].k2.z*px+lin_vel[i].k1.z)*px+lin_vel[i].p.z;</highlight></codeline>
<codeline lineno="802"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>sum<sp/>+=<sp/>(vel_z<sp/>*<sp/>dt)<sp/>*<sp/>step_x;</highlight></codeline>
<codeline lineno="803"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>debug<sp/>(<sp/>&quot;p.z=%.8f<sp/><sp/>vel=%.8f<sp/><sp/>sum=%.8f&quot;,<sp/>((k.k3.z*px+k.k2.z)*px+k.k1.z)*px+k.p.z,<sp/>vel_z,<sp/>sum<sp/>);</highlight></codeline>
<codeline lineno="804"><highlight class="comment"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="805"><highlight class="comment"><sp/><sp/><sp/><sp/>debug<sp/>(<sp/>&quot;approx.<sp/>len:<sp/>%.7f&quot;,<sp/>sum<sp/>);</highlight></codeline>
<codeline lineno="806"><highlight class="comment"><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="807"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="808"><highlight class="normal"></highlight></codeline>
<codeline lineno="809"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>calculate<sp/>angular<sp/>velocity</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="810"><highlight class="normal"><sp/><sp/>ang_vel.SetCount(rot.Count());</highlight></codeline>
<codeline lineno="811"><highlight class="normal"><sp/><sp/>ang_vel_t.SetCount(rot.Count());</highlight></codeline>
<codeline lineno="812"><highlight class="normal"></highlight></codeline>
<codeline lineno="813"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>rot.Count()<sp/>-<sp/>1;<sp/>i<sp/>&gt;=<sp/>0;<sp/>i--)</highlight></codeline>
<codeline lineno="814"><highlight class="normal"><sp/><sp/><sp/><sp/>rot[i].<ref refid="polyBumpUtil_8cpp_1aaa1ebe818ec1c763a776cc580551f3e6" kindref="member">p</ref>.Normalize();</highlight></codeline>
<codeline lineno="815"><highlight class="normal"></highlight></codeline>
<codeline lineno="816"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>rot.Count()<sp/>-<sp/>1;<sp/>i<sp/>&gt;=<sp/>0;<sp/>i--)</highlight></codeline>
<codeline lineno="817"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="818"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structAnimKeyPoint3" kindref="compound">AnimKeyPoint3</ref><sp/>k;</highlight></codeline>
<codeline lineno="819"><highlight class="normal"><sp/><sp/><sp/><sp/>Quat<sp/>drot;</highlight></codeline>
<codeline lineno="820"><highlight class="normal"></highlight></codeline>
<codeline lineno="821"><highlight class="normal"><sp/><sp/><sp/><sp/>ang_vel_t[i]<sp/>=<sp/>rot[i].t;</highlight></codeline>
<codeline lineno="822"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>debug<sp/>(<sp/>&quot;segment<sp/>i=%d,<sp/>rot.count=%d&quot;,<sp/>i,<sp/>rot.Count());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="823"><highlight class="normal"></highlight></codeline>
<codeline lineno="824"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i<sp/>+<sp/>1<sp/>&gt;=<sp/>rot.Count())</highlight></codeline>
<codeline lineno="825"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="826"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>memset(&amp;ang_vel[i],<sp/>0,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="structAnimKeyPoint3" kindref="compound">AnimKeyPoint3</ref>));</highlight></codeline>
<codeline lineno="827"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="debug_8cpp_1ad66a73f3673f2879326899cf57fd8d2e" kindref="member">debug</ref>(</highlight><highlight class="stringliteral">&quot;fr<sp/>%4d:<sp/>vel<sp/>=<sp/>0&quot;</highlight><highlight class="normal">,<sp/>rot[i].t<sp/>/<sp/>160);</highlight></codeline>
<codeline lineno="828"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="829"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="830"><highlight class="normal"></highlight></codeline>
<codeline lineno="831"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structPosKey" kindref="compound">PosKey</ref><sp/>nk[2];</highlight></codeline>
<codeline lineno="832"><highlight class="normal"><sp/><sp/><sp/><sp/>Point3<sp/>p13,<sp/>p23;</highlight></codeline>
<codeline lineno="833"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>temp_t;</highlight></codeline>
<codeline lineno="834"><highlight class="normal"></highlight></codeline>
<codeline lineno="835"><highlight class="normal"><sp/><sp/><sp/><sp/>nk[0].<ref refid="structPosKey_1aaf9b66ae39fd7ee284594a277ee9eec9" kindref="member">t</ref><sp/>=<sp/>rot[i].t;</highlight></codeline>
<codeline lineno="836"><highlight class="normal"><sp/><sp/><sp/><sp/>nk[1].<ref refid="structPosKey_1aaf9b66ae39fd7ee284594a277ee9eec9" kindref="member">t</ref><sp/>=<sp/>rot[i<sp/>+<sp/>1].t;</highlight></codeline>
<codeline lineno="837"><highlight class="normal"></highlight></codeline>
<codeline lineno="838"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>deriv_dt<sp/>=<sp/>48;</highlight></codeline>
<codeline lineno="839"><highlight class="normal"></highlight></codeline>
<codeline lineno="840"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i<sp/>&gt;<sp/>0)</highlight></codeline>
<codeline lineno="841"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="842"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>nk[0].<ref refid="structPosKey_1a3503f0dc950198c6ec9e937e205da997" kindref="member">p</ref><sp/>=<sp/><ref refid="expanim2_8cpp_1a33ec6357564a85171cd85c6125f66666" kindref="member">getAngularVelocity</ref>(interp_seg(rot[i<sp/>-<sp/>1],<sp/>rot[i],<sp/>rot[i].t<sp/>-<sp/>deriv_dt<sp/>/<sp/>2),</highlight></codeline>
<codeline lineno="843"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>interp_seg(rot[i],<sp/>rot[i<sp/>+<sp/>1],<sp/>rot[i].t<sp/>+<sp/>deriv_dt<sp/>/<sp/>2),<sp/>deriv_dt);</highlight></codeline>
<codeline lineno="844"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*debug<sp/>(<sp/>&quot;nk0:<sp/>(%d:%d,<sp/>%d:%d,<sp/>%d),<sp/>(%d:%d,<sp/>%d:%d,<sp/>%d),<sp/>%d&quot;,</highlight></codeline>
<codeline lineno="845"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i-1,<sp/>rot[i-1].t,<sp/>i,<sp/>rot[i].t,<sp/>rot[i].t-deriv_dt/2,</highlight></codeline>
<codeline lineno="846"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i,<sp/>rot[i].t,<sp/>i+1,<sp/>rot[i+1].t,<sp/>rot[i].t+deriv_dt/2,<sp/>deriv_dt<sp/>);*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="847"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="848"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="849"><highlight class="normal"><sp/><sp/><sp/><sp/>{<sp/></highlight><highlight class="comment">//<sp/>extrapolate<sp/>then</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="850"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>nk[0].<ref refid="structPosKey_1a3503f0dc950198c6ec9e937e205da997" kindref="member">p</ref><sp/>=<sp/><ref refid="expanim2_8cpp_1a33ec6357564a85171cd85c6125f66666" kindref="member">getAngularVelocity</ref>(interp_seg(rot[i],<sp/>rot[i<sp/>+<sp/>1],<sp/>rot[i].t<sp/>-<sp/>deriv_dt<sp/>/<sp/>2),</highlight></codeline>
<codeline lineno="851"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>interp_seg(rot[i],<sp/>rot[i<sp/>+<sp/>1],<sp/>rot[i].t<sp/>+<sp/>deriv_dt<sp/>/<sp/>2),<sp/>deriv_dt);</highlight></codeline>
<codeline lineno="852"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*debug<sp/>(<sp/>&quot;nk0:<sp/>(%d:%d,<sp/>%d:%d,<sp/>%d),<sp/>(%d:%d,<sp/>%d:%d,<sp/>%d),<sp/>%d&quot;,</highlight></codeline>
<codeline lineno="853"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i,<sp/>rot[i].t,<sp/>i+1,<sp/>rot[i+1].t,<sp/>rot[i].t-deriv_dt/2,</highlight></codeline>
<codeline lineno="854"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i,<sp/>rot[i].t,<sp/>i+1,<sp/>rot[i+1].t,<sp/>rot[i].t+deriv_dt/2,<sp/>deriv_dt<sp/>);*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="855"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="856"><highlight class="normal"></highlight></codeline>
<codeline lineno="857"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i<sp/>+<sp/>2<sp/>&lt;<sp/>rot.Count())</highlight></codeline>
<codeline lineno="858"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="859"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>nk[1].<ref refid="structPosKey_1a3503f0dc950198c6ec9e937e205da997" kindref="member">p</ref><sp/>=<sp/><ref refid="expanim2_8cpp_1a33ec6357564a85171cd85c6125f66666" kindref="member">getAngularVelocity</ref>(interp_seg(rot[i],<sp/>rot[i<sp/>+<sp/>1],<sp/>rot[i<sp/>+<sp/>1].t<sp/>-<sp/>deriv_dt<sp/>/<sp/>2),</highlight></codeline>
<codeline lineno="860"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>interp_seg(rot[i<sp/>+<sp/>1],<sp/>rot[i<sp/>+<sp/>2],<sp/>rot[i<sp/>+<sp/>1].t<sp/>+<sp/>deriv_dt<sp/>/<sp/>2),<sp/>deriv_dt);</highlight></codeline>
<codeline lineno="861"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*debug<sp/>(<sp/>&quot;nk1:<sp/>(%d:%d,<sp/>%d:%d,<sp/>%d),<sp/>(%d:%d,<sp/>%d:%d,<sp/>%d),<sp/>%d&quot;,</highlight></codeline>
<codeline lineno="862"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i,<sp/>rot[i].t,<sp/>i+1,<sp/>rot[i+1].t,<sp/>rot[i+1].t-deriv_dt/2,</highlight></codeline>
<codeline lineno="863"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i+1,<sp/>rot[i+1].t,<sp/>i+2,<sp/>rot[i+2].t,<sp/>rot[i+1].t+deriv_dt/2,<sp/>deriv_dt<sp/>);*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="864"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="865"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="866"><highlight class="normal"><sp/><sp/><sp/><sp/>{<sp/></highlight><highlight class="comment">//<sp/>extrapolate<sp/>then</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="867"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>nk[1].<ref refid="structPosKey_1a3503f0dc950198c6ec9e937e205da997" kindref="member">p</ref><sp/>=<sp/><ref refid="expanim2_8cpp_1a33ec6357564a85171cd85c6125f66666" kindref="member">getAngularVelocity</ref>(interp_seg(rot[i],<sp/>rot[i<sp/>+<sp/>1],<sp/>rot[i<sp/>+<sp/>1].t<sp/>-<sp/>deriv_dt<sp/>/<sp/>2),</highlight></codeline>
<codeline lineno="868"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>interp_seg(rot[i],<sp/>rot[i<sp/>+<sp/>1],<sp/>rot[i<sp/>+<sp/>1].t<sp/>+<sp/>deriv_dt<sp/>/<sp/>2),<sp/>deriv_dt);</highlight></codeline>
<codeline lineno="869"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*debug<sp/>(<sp/>&quot;nk1:<sp/>(%d:%d,<sp/>%d:%d,<sp/>%d),<sp/>(%d:%d,<sp/>%d:%d,<sp/>%d),<sp/>%d&quot;,</highlight></codeline>
<codeline lineno="870"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i,<sp/>rot[i].t,<sp/>i+1,<sp/>rot[i+1].t,<sp/>rot[i+1].t-deriv_dt/2,</highlight></codeline>
<codeline lineno="871"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i,<sp/>rot[i].t,<sp/>i+1,<sp/>rot[i+1].t,<sp/>rot[i+1].t+deriv_dt/2,<sp/>deriv_dt<sp/>);*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="872"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="873"><highlight class="normal"></highlight></codeline>
<codeline lineno="874"><highlight class="normal"><sp/><sp/><sp/><sp/>temp_t<sp/>=<sp/>(rot[i].t<sp/>*<sp/>2<sp/>+<sp/>rot[i<sp/>+<sp/>1].t<sp/>*<sp/>1)<sp/>/<sp/>3;</highlight></codeline>
<codeline lineno="875"><highlight class="normal"><sp/><sp/><sp/><sp/>p13<sp/>=<sp/><ref refid="expanim2_8cpp_1a33ec6357564a85171cd85c6125f66666" kindref="member">getAngularVelocity</ref>(interp_seg(rot[i],<sp/>rot[i<sp/>+<sp/>1],<sp/>temp_t<sp/>-<sp/>deriv_dt<sp/>/<sp/>2),</highlight></codeline>
<codeline lineno="876"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>interp_seg(rot[i],<sp/>rot[i<sp/>+<sp/>1],<sp/>temp_t<sp/>+<sp/>deriv_dt<sp/>/<sp/>2),<sp/>deriv_dt);</highlight></codeline>
<codeline lineno="877"><highlight class="normal"><sp/><sp/><sp/><sp/>temp_t<sp/>=<sp/>(rot[i].t<sp/>*<sp/>1<sp/>+<sp/>rot[i<sp/>+<sp/>1].t<sp/>*<sp/>2)<sp/>/<sp/>3;</highlight></codeline>
<codeline lineno="878"><highlight class="normal"><sp/><sp/><sp/><sp/>p23<sp/>=<sp/><ref refid="expanim2_8cpp_1a33ec6357564a85171cd85c6125f66666" kindref="member">getAngularVelocity</ref>(interp_seg(rot[i],<sp/>rot[i<sp/>+<sp/>1],<sp/>temp_t<sp/>-<sp/>deriv_dt<sp/>/<sp/>2),</highlight></codeline>
<codeline lineno="879"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>interp_seg(rot[i],<sp/>rot[i<sp/>+<sp/>1],<sp/>temp_t<sp/>+<sp/>deriv_dt<sp/>/<sp/>2),<sp/>deriv_dt);</highlight></codeline>
<codeline lineno="880"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="debug_8cpp_1ad66a73f3673f2879326899cf57fd8d2e" kindref="member">debug</ref>(</highlight><highlight class="stringliteral">&quot;fr<sp/>%4d:<sp/>dt=%5d<sp/><sp/>t=%5d<sp/><sp/>w.y=%.8f;<sp/>t=%5d<sp/><sp/>w.y=%.8f;<sp/>t=%5d<sp/><sp/>w.y=%.8f;<sp/>t=%5d<sp/><sp/>w.y=%.8f&quot;</highlight><highlight class="normal">,<sp/>nk[0].t<sp/>/<sp/>160,<sp/>nk[1].t<sp/>-<sp/>nk[0].t,</highlight></codeline>
<codeline lineno="881"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>nk[0].t,<sp/>nk[0].<ref refid="polyBumpUtil_8cpp_1aaa1ebe818ec1c763a776cc580551f3e6" kindref="member">p</ref>.y,<sp/>(rot[i].t<sp/>*<sp/>2<sp/>+<sp/>rot[i<sp/>+<sp/>1].t<sp/>*<sp/>1)<sp/>/<sp/>3,<sp/>p13.y,<sp/>(rot[i].t<sp/>*<sp/>1<sp/>+<sp/>rot[i<sp/>+<sp/>1].t<sp/>*<sp/>2)<sp/>/<sp/>3,<sp/>p23.y,<sp/>nk[1].t,</highlight></codeline>
<codeline lineno="882"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>nk[1].p.y);</highlight></codeline>
<codeline lineno="883"><highlight class="normal"><sp/><sp/><sp/><sp/>calc_cp(nk[0],<sp/>nk[1],<sp/>p13,<sp/>p23);</highlight></codeline>
<codeline lineno="884"><highlight class="normal"></highlight></codeline>
<codeline lineno="885"><highlight class="normal"><sp/><sp/><sp/><sp/>ang_vel[i].p<sp/>=<sp/>nk[0].<ref refid="structPosKey_1a3503f0dc950198c6ec9e937e205da997" kindref="member">p</ref>;</highlight></codeline>
<codeline lineno="886"><highlight class="normal"><sp/><sp/><sp/><sp/>ang_vel[i].k1<sp/>=<sp/>(nk[0].<ref refid="structPosKey_1ae2b4416bf124557b30989079008484ee" kindref="member">o</ref><sp/>-<sp/>nk[0].<ref refid="structPosKey_1a3503f0dc950198c6ec9e937e205da997" kindref="member">p</ref>)<sp/>*<sp/>3;</highlight></codeline>
<codeline lineno="887"><highlight class="normal"><sp/><sp/><sp/><sp/>ang_vel[i].k2<sp/>=<sp/>(nk[0].<ref refid="structPosKey_1a3503f0dc950198c6ec9e937e205da997" kindref="member">p</ref><sp/>+<sp/>nk[1].<ref refid="structPosKey_1a3c4a9d46d6c7a652140bbabecd081f50" kindref="member">i</ref><sp/>-<sp/>nk[0].<ref refid="structPosKey_1ae2b4416bf124557b30989079008484ee" kindref="member">o</ref><sp/>*<sp/>2)<sp/>*<sp/>3;</highlight></codeline>
<codeline lineno="888"><highlight class="normal"><sp/><sp/><sp/><sp/>ang_vel[i].k3<sp/>=<sp/>(nk[0].<ref refid="structPosKey_1ae2b4416bf124557b30989079008484ee" kindref="member">o</ref><sp/>-<sp/>nk[1].<ref refid="structPosKey_1a3c4a9d46d6c7a652140bbabecd081f50" kindref="member">i</ref>)<sp/>*<sp/>3<sp/>+<sp/>nk[1].<ref refid="polyBumpUtil_8cpp_1aaa1ebe818ec1c763a776cc580551f3e6" kindref="member">p</ref><sp/>-<sp/>nk[0].<ref refid="polyBumpUtil_8cpp_1aaa1ebe818ec1c763a776cc580551f3e6" kindref="member">p</ref>;</highlight></codeline>
<codeline lineno="889"><highlight class="normal"></highlight></codeline>
<codeline lineno="890"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="891"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>debug<sp/>(<sp/>&quot;%3d:<sp/>time=%5d<sp/><sp/>ang_vel[i].p=%.7f,%.7f,%.7f<sp/>ang_vel[i].k1=%.7f,%.7f,%.7f<sp/>ang_vel[i].k2=%.7f,%.7f,%.7f</highlight></codeline>
<codeline lineno="892"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ang_vel[i].k3=%.7f,%.7f,%.7f&quot;,<sp/>i,<sp/>ang_vel_t[i],<sp/>ang_vel[i].p.x,<sp/>ang_vel[i].p.y,<sp/>ang_vel[i].p.z,<sp/>ang_vel[i].k1.x,</highlight></codeline>
<codeline lineno="893"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ang_vel[i].k1.y,<sp/>ang_vel[i].k1.z,<sp/>ang_vel[i].k2.x,<sp/>ang_vel[i].k2.y,<sp/>ang_vel[i].k2.z,<sp/>ang_vel[i].k3.x,<sp/>ang_vel[i].k3.y,</highlight></codeline>
<codeline lineno="894"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ang_vel[i].k3.z<sp/>);</highlight></codeline>
<codeline lineno="895"><highlight class="comment"><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="896"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="897"><highlight class="normal"></highlight></codeline>
<codeline lineno="898"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="899"><highlight class="comment"><sp/><sp/><sp/><sp/>float<sp/>sumrot<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="900"><highlight class="comment"><sp/><sp/><sp/><sp/>for<sp/>(<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>rot.Count()-1;<sp/>i<sp/>++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="901"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>int<sp/>dt<sp/>=<sp/>ang_vel_t[i+1]-ang_vel_t[i];</highlight></codeline>
<codeline lineno="902"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>float<sp/>step_x<sp/>=<sp/>48.0<sp/>/<sp/>dt;</highlight></codeline>
<codeline lineno="903"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>(<sp/>float<sp/>px<sp/>=<sp/>0.0;<sp/>px<sp/>&lt;<sp/>1.0;<sp/>px<sp/>+=<sp/>step_x<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="904"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>float<sp/>vel_y<sp/>=<sp/>((ang_vel[i].k3.y*px+ang_vel[i].k2.y)*px+ang_vel[i].k1.y)*px+ang_vel[i].p.y;</highlight></codeline>
<codeline lineno="905"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vel_y<sp/>*=<sp/>dt;</highlight></codeline>
<codeline lineno="906"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sumrot<sp/>+=<sp/>vel_y<sp/>*<sp/>step_x;</highlight></codeline>
<codeline lineno="907"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>debug<sp/>(<sp/>&quot;fr<sp/>%d:<sp/>vel=%.8f<sp/><sp/>sum=%.8f&quot;,<sp/>int(ang_vel_t[i]+dt*px)/160,<sp/>vel_y,<sp/>sumrot*180/PI<sp/>);</highlight></codeline>
<codeline lineno="908"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="909"><highlight class="comment"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="910"><highlight class="comment"><sp/><sp/><sp/><sp/>debug<sp/>(<sp/>&quot;approx.<sp/>rot:<sp/>%.7f&quot;,<sp/>sumrot<sp/>);</highlight></codeline>
<codeline lineno="911"><highlight class="comment"><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="912"><highlight class="normal"></highlight></codeline>
<codeline lineno="913"><highlight class="normal"><sp/><sp/>ip-&gt;ProgressEnd();</highlight></codeline>
<codeline lineno="914"><highlight class="normal"></highlight></codeline>
<codeline lineno="915"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="916"><highlight class="normal">}</highlight></codeline>
<codeline lineno="917"><highlight class="normal"></highlight></codeline>
<codeline lineno="918"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>debug_rot_diff(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*nodename,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Tab&lt;RotKey&gt;<sp/>&amp;pos,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Tab&lt;Quat&gt;<sp/>&amp;temp_pos,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>thres)</highlight></codeline>
<codeline lineno="919"><highlight class="normal">{</highlight></codeline>
<codeline lineno="920"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,<sp/>j;</highlight></codeline>
<codeline lineno="921"><highlight class="normal"></highlight></codeline>
<codeline lineno="922"><highlight class="normal"><sp/><sp/><ref refid="debug_8cpp_1ad66a73f3673f2879326899cf57fd8d2e" kindref="member">debug</ref>(</highlight><highlight class="stringliteral">&quot;node<sp/>&lt;%s&gt;<sp/>rot<sp/>points<sp/>(thres=%.5f):&quot;</highlight><highlight class="normal">,<sp/>nodename,<sp/>thres);</highlight></codeline>
<codeline lineno="923"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>ktime.Count()<sp/>-<sp/>1;<sp/>++i)</highlight></codeline>
<codeline lineno="924"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="925"><highlight class="normal"><sp/><sp/><sp/><sp/>Quat<sp/><ref refid="polyBumpUtil_8cpp_1aaa1ebe818ec1c763a776cc580551f3e6" kindref="member">p</ref><sp/>=<sp/>Quat(-10000.0f,<sp/>-10000.0f,<sp/>-10000.0f,<sp/>-10000.0f),<sp/>dp;</highlight></codeline>
<codeline lineno="926"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ktime[i]<sp/>&lt;=<sp/>pos[0].t)</highlight></codeline>
<codeline lineno="927"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="polyBumpUtil_8cpp_1aaa1ebe818ec1c763a776cc580551f3e6" kindref="member">p</ref><sp/>=<sp/>pos[0].p;</highlight></codeline>
<codeline lineno="928"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ktime[i]<sp/>&gt;=<sp/>pos[pos.Count()<sp/>-<sp/>1].t)</highlight></codeline>
<codeline lineno="929"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="polyBumpUtil_8cpp_1aaa1ebe818ec1c763a776cc580551f3e6" kindref="member">p</ref><sp/>=<sp/>pos[pos.Count()<sp/>-<sp/>1].p;</highlight></codeline>
<codeline lineno="930"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="931"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>pos.Count()<sp/>-<sp/>1;<sp/>j++)</highlight></codeline>
<codeline lineno="932"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pos[j].t<sp/>&lt;=<sp/>ktime[i]<sp/>&amp;&amp;<sp/>ktime[i]<sp/>&lt;<sp/>pos[j<sp/>+<sp/>1].t)</highlight></codeline>
<codeline lineno="933"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="934"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="polyBumpUtil_8cpp_1aaa1ebe818ec1c763a776cc580551f3e6" kindref="member">p</ref><sp/>=<sp/>interp_seg(pos[j],<sp/>pos[j<sp/>+<sp/>1],<sp/>ktime[i]);</highlight></codeline>
<codeline lineno="935"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="936"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="937"><highlight class="normal"></highlight></codeline>
<codeline lineno="938"><highlight class="normal"><sp/><sp/><sp/><sp/>dp<sp/>=<sp/><ref refid="polyBumpUtil_8cpp_1aaa1ebe818ec1c763a776cc580551f3e6" kindref="member">p</ref><sp/>-<sp/>temp_pos[i];</highlight></codeline>
<codeline lineno="939"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!rot_equal(<ref refid="polyBumpUtil_8cpp_1aaa1ebe818ec1c763a776cc580551f3e6" kindref="member">p</ref>,<sp/>temp_pos[i],<sp/>thres))</highlight></codeline>
<codeline lineno="940"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="debug_8cpp_1ad66a73f3673f2879326899cf57fd8d2e" kindref="member">debug</ref>(</highlight><highlight class="stringliteral">&quot;!!!<sp/>%5d:<sp/>dp=(%8.5f,<sp/>%8.5f,<sp/>%8.5f,<sp/>%8.5f)<sp/>p=(%9.5f,<sp/>%9.5f,<sp/>%9.5f,<sp/>%9.5f)&quot;</highlight><highlight class="normal">,<sp/>ktime[i],<sp/>dp.x,<sp/>dp.y,<sp/>dp.z,<sp/>dp.w,<sp/><ref refid="polyBumpUtil_8cpp_1aaa1ebe818ec1c763a776cc580551f3e6" kindref="member">p</ref>.x,<sp/><ref refid="polyBumpUtil_8cpp_1aaa1ebe818ec1c763a776cc580551f3e6" kindref="member">p</ref>.y,<sp/><ref refid="polyBumpUtil_8cpp_1aaa1ebe818ec1c763a776cc580551f3e6" kindref="member">p</ref>.z,</highlight></codeline>
<codeline lineno="941"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="polyBumpUtil_8cpp_1aaa1ebe818ec1c763a776cc580551f3e6" kindref="member">p</ref>.w);</highlight></codeline>
<codeline lineno="942"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="943"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>debug<sp/>(<sp/>&quot;<sp/><sp/><sp/><sp/>%5d:<sp/><sp/>p=(%9.5f,<sp/>%9.5f,<sp/>%9.5f,<sp/>%9.5f)&quot;,<sp/>ktime[i],<sp/>p.x,<sp/>p.y,<sp/>p.z,<sp/>p.w<sp/>);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="944"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="945"><highlight class="normal">}</highlight></codeline>
<codeline lineno="946"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>debug_pos_diff(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*nodename,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Tab&lt;PosKey&gt;<sp/>&amp;pos,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Tab&lt;Point3&gt;<sp/>&amp;temp_pos,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>thres)</highlight></codeline>
<codeline lineno="947"><highlight class="normal">{</highlight></codeline>
<codeline lineno="948"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="949"><highlight class="normal"></highlight></codeline>
<codeline lineno="950"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,<sp/>j;</highlight></codeline>
<codeline lineno="951"><highlight class="normal"></highlight></codeline>
<codeline lineno="952"><highlight class="normal"><sp/><sp/><ref refid="debug_8cpp_1ad66a73f3673f2879326899cf57fd8d2e" kindref="member">debug</ref>(</highlight><highlight class="stringliteral">&quot;node<sp/>&lt;%s&gt;<sp/>pos<sp/>points<sp/>(thres=%.5f):&quot;</highlight><highlight class="normal">,<sp/>nodename,<sp/>thres);</highlight></codeline>
<codeline lineno="953"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>ktime.Count()<sp/>-<sp/>1;<sp/>++i)</highlight></codeline>
<codeline lineno="954"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="955"><highlight class="normal"><sp/><sp/><sp/><sp/>Point3<sp/><ref refid="polyBumpUtil_8cpp_1aaa1ebe818ec1c763a776cc580551f3e6" kindref="member">p</ref><sp/>=<sp/>Point3(-10000,<sp/>-10000,<sp/>-10000),<sp/>dp;</highlight></codeline>
<codeline lineno="956"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ktime[i]<sp/>&lt;=<sp/>pos[0].t)</highlight></codeline>
<codeline lineno="957"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="polyBumpUtil_8cpp_1aaa1ebe818ec1c763a776cc580551f3e6" kindref="member">p</ref><sp/>=<sp/>pos[0].p;</highlight></codeline>
<codeline lineno="958"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ktime[i]<sp/>&gt;=<sp/>pos[pos.Count()<sp/>-<sp/>1].t)</highlight></codeline>
<codeline lineno="959"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="polyBumpUtil_8cpp_1aaa1ebe818ec1c763a776cc580551f3e6" kindref="member">p</ref><sp/>=<sp/>pos[pos.Count()<sp/>-<sp/>1].p;</highlight></codeline>
<codeline lineno="960"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="961"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>pos.Count()<sp/>-<sp/>1;<sp/>j++)</highlight></codeline>
<codeline lineno="962"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pos[j].t<sp/>&lt;=<sp/>ktime[i]<sp/>&amp;&amp;<sp/>ktime[i]<sp/>&lt;<sp/>pos[j<sp/>+<sp/>1].t)</highlight></codeline>
<codeline lineno="963"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="964"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="polyBumpUtil_8cpp_1aaa1ebe818ec1c763a776cc580551f3e6" kindref="member">p</ref><sp/>=<sp/>interp_seg(pos[j],<sp/>pos[j<sp/>+<sp/>1],<sp/>ktime[i]);</highlight></codeline>
<codeline lineno="965"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="966"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="967"><highlight class="normal"></highlight></codeline>
<codeline lineno="968"><highlight class="normal"><sp/><sp/><sp/><sp/>dp<sp/>=<sp/><ref refid="polyBumpUtil_8cpp_1aaa1ebe818ec1c763a776cc580551f3e6" kindref="member">p</ref><sp/>-<sp/>temp_pos[i];</highlight></codeline>
<codeline lineno="969"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(dp.x<sp/>*<sp/>dp.x<sp/>+<sp/>dp.y<sp/>*<sp/>dp.y<sp/>+<sp/>dp.z<sp/>*<sp/>dp.z<sp/>&gt;<sp/>thres<sp/>*<sp/>thres)</highlight></codeline>
<codeline lineno="970"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="debug_8cpp_1ad66a73f3673f2879326899cf57fd8d2e" kindref="member">debug</ref>(</highlight><highlight class="stringliteral">&quot;!!!<sp/>%5d:<sp/>dp=(%8.5f,<sp/>%8.5f,<sp/>%8.5f)<sp/>p=(%9.5f,<sp/>%9.5f,<sp/>%9.5f)&quot;</highlight><highlight class="normal">,<sp/>ktime[i],<sp/>dp.x,<sp/>dp.y,<sp/>dp.z,<sp/><ref refid="polyBumpUtil_8cpp_1aaa1ebe818ec1c763a776cc580551f3e6" kindref="member">p</ref>.x,<sp/><ref refid="polyBumpUtil_8cpp_1aaa1ebe818ec1c763a776cc580551f3e6" kindref="member">p</ref>.y,<sp/><ref refid="polyBumpUtil_8cpp_1aaa1ebe818ec1c763a776cc580551f3e6" kindref="member">p</ref>.z);</highlight></codeline>
<codeline lineno="971"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="972"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="debug_8cpp_1ad66a73f3673f2879326899cf57fd8d2e" kindref="member">debug</ref>(</highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/>%5d:<sp/><sp/>p=(%9.5f,<sp/>%9.5f,<sp/>%9.5f)&quot;</highlight><highlight class="normal">,<sp/>ktime[i],<sp/><ref refid="polyBumpUtil_8cpp_1aaa1ebe818ec1c763a776cc580551f3e6" kindref="member">p</ref>.x,<sp/><ref refid="polyBumpUtil_8cpp_1aaa1ebe818ec1c763a776cc580551f3e6" kindref="member">p</ref>.y,<sp/><ref refid="polyBumpUtil_8cpp_1aaa1ebe818ec1c763a776cc580551f3e6" kindref="member">p</ref>.z);</highlight></codeline>
<codeline lineno="973"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="974"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="expanim2.cpp"/>
  </compounddef>
</doxygen>
