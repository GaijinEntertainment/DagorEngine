<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.7" xml:lang="en-US">
  <compounddef id="dag__DynamicShadersBuffer_8h" kind="file" language="C++">
    <compoundname>dag_DynamicShadersBuffer.h</compoundname>
    <includes refid="dag__shaders_8h" local="no">shaders/dag_shaders.h</includes>
    <includes local="no">generic/dag_smallTab.h</includes>
    <includes local="no">util/dag_stdint.h</includes>
    <incdepgraph>
      <node id="1">
        <label>dag_DynamicShadersBuffer.h</label>
        <link refid="dag__DynamicShadersBuffer_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
      </node>
      <node id="12">
        <label>shaders/dag_bindumpReloadListener.h</label>
        <link refid="dag__bindumpReloadListener_8h_source"/>
      </node>
      <node id="4">
        <label>shaders/dag_shaderCommon.h</label>
        <link refid="dag__shaderCommon_8h_source"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="9">
        <label>shaders/dag_shaderVar.h</label>
        <link refid="dag__shaderVar_8h_source"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>shaders/dag_shaderVarType.h</label>
        <link refid="dag__shaderVarType_8h_source"/>
      </node>
      <node id="11">
        <label>shaders/dag_shaderVariableInfo.h</label>
        <link refid="dag__shaderVariableInfo_8h_source"/>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>shaders/dag_shaders.h</label>
        <link refid="dag__shaders_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
      </node>
      <node id="20">
        <label>shaders/dag_stcode.h</label>
        <link refid="dag__stcode_8h_source"/>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>3d/dag_texMgr.h</label>
      </node>
      <node id="3">
        <label>EASTL/fixed_function.h</label>
      </node>
      <node id="24">
        <label>EASTL/optional.h</label>
      </node>
      <node id="22">
        <label>EASTL/string.h</label>
      </node>
      <node id="23">
        <label>EASTL/string_view.h</label>
      </node>
      <node id="6">
        <label>drv/3d/dag_consts.h</label>
      </node>
      <node id="21">
        <label>drv/3d/dag_d3dResource.h</label>
      </node>
      <node id="10">
        <label>drv/3d/dag_samplerHandle.h</label>
      </node>
      <node id="26">
        <label>generic/dag_DObject.h</label>
      </node>
      <node id="25">
        <label>generic/dag_fixedMoveOnlyFunction.h</label>
      </node>
      <node id="29">
        <label>generic/dag_smallTab.h</label>
      </node>
      <node id="7">
        <label>generic/dag_span.h</label>
      </node>
      <node id="17">
        <label>math/dag_Point2.h</label>
      </node>
      <node id="14">
        <label>math/dag_check_nan.h</label>
      </node>
      <node id="18">
        <label>math/dag_dxmath_forward.h</label>
      </node>
      <node id="16">
        <label>math/integer/dag_IPoint4.h</label>
      </node>
      <node id="27">
        <label>memory/dag_mem.h</label>
      </node>
      <node id="13">
        <label>stdint.h</label>
      </node>
      <node id="28">
        <label>util/dag_globDef.h</label>
      </node>
      <node id="30">
        <label>util/dag_stdint.h</label>
      </node>
      <node id="19">
        <label>util/dag_string.h</label>
      </node>
      <node id="15">
        <label>vecmath/dag_vecMathDecl.h</label>
      </node>
    </incdepgraph>
    <innerclass refid="classDynamicShadersBuffer" prot="public">DynamicShadersBuffer</innerclass>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Dagor<sp/>Engine<sp/>6.5</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Copyright<sp/>(C)<sp/>Gaijin<sp/>Games<sp/>KFT.<sp/><sp/>All<sp/>rights<sp/>reserved.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>once</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;shaders/dag_shaders.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;generic/dag_smallTab.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;util/dag_stdint.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight></codeline>
<codeline lineno="11" refid="classDynamicShadersBuffer" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classDynamicShadersBuffer" kindref="compound">DynamicShadersBuffer</ref></highlight></codeline>
<codeline lineno="12"><highlight class="normal">{</highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/><ref refid="classDynamicShadersBuffer" kindref="compound">DynamicShadersBuffer</ref>();</highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Calls<sp/>init().</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/><ref refid="classDynamicShadersBuffer" kindref="compound">DynamicShadersBuffer</ref>(<ref refid="structCompiledShaderChannelId" kindref="compound">CompiledShaderChannelId</ref><sp/>*channels,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>channel_count,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>max_verts,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>max_faces);</highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>dynamic<sp/>vertex<sp/>and<sp/>index<sp/>buffers,<sp/>get<sp/>VDECL<sp/>and<sp/>stride.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>init(<ref refid="structCompiledShaderChannelId" kindref="compound">CompiledShaderChannelId</ref><sp/>*channels,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>channel_count,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>max_verts,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>max_faces);</highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Calls<sp/>close().</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><ref refid="classDynamicShadersBuffer" kindref="compound">~DynamicShadersBuffer</ref>();</highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Destroy<sp/>buffers,<sp/>etc.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>close();</highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="classShaderElement" kindref="compound">ShaderElement</ref><sp/>*getCurrentShader()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>currentShader;<sp/>}</highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Flushes<sp/>buffer<sp/>before<sp/>setting<sp/>different<sp/>shader.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>setCurrentShader(<ref refid="classShaderElement" kindref="compound">ShaderElement</ref><sp/>*shader);</highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Adds<sp/>specified<sp/>number<sp/>of<sp/>vertices<sp/>and<sp/>faces,<sp/>zero<sp/>index<sp/>value<sp/>refers<sp/>to</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>first<sp/>added<sp/>vertex.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Flushes<sp/>buffer<sp/>if<sp/>necessary.<sp/>Number<sp/>of<sp/>added<sp/>vertices<sp/>and<sp/>faces</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>should<sp/>not<sp/>exceed<sp/>maximum.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>addFaces(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*vertex_data,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>num_verts,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*indices,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>num_faces);</highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>fillRawFaces(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>**vertex_data,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>num_verts,<sp/>uint32_t<sp/>**indices,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>num_faces,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>&amp;used_verts);</highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Render<sp/>current<sp/>buffer<sp/>contents<sp/>using<sp/>current<sp/>shader<sp/>(if<sp/>set)<sp/>and<sp/>discard</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>them,<sp/>so<sp/>that<sp/>next<sp/>addFaces()<sp/>will<sp/>start<sp/>from<sp/>the<sp/>beginning.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>flush(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>reset<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>getUsedVertices()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>usedVerts;<sp/>}</highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>getUsedFaces()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>usedFaces;<sp/>}</highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>maxVerts,<sp/>maxFaces;</highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">VertexBuffer;</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">IndexBuffer;</highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/>VertexBuffer<sp/>*vBuf;</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/>IndexBuffer<sp/>*iBuf;</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>startVerts,<sp/>startFaces;</highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/>Ptr&lt;ShaderElement&gt;<sp/>currentShader;</highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>usedVerts,<sp/>usedFaces;</highlight></codeline>
<codeline lineno="68"><highlight class="normal">};</highlight></codeline>
    </programlisting>
    <location file="dag_DynamicShadersBuffer.h"/>
  </compounddef>
</doxygen>
