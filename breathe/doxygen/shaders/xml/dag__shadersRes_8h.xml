<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.7" xml:lang="en-US">
  <compounddef id="dag__shadersRes_8h" kind="file" language="C++">
    <compoundname>dag_shadersRes.h</compoundname>
    <includes refid="dag__shaders_8h" local="no">shaders/dag_shaders.h</includes>
    <includes refid="dag__shaderMesh_8h" local="no">shaders/dag_shaderMesh.h</includes>
    <includes refid="dag__shSkinMesh_8h" local="no">shaders/dag_shSkinMesh.h</includes>
    <includes local="no">generic/dag_tab.h</includes>
    <includes local="no">util/dag_string.h</includes>
    <includes local="no">generic/dag_ptrTab.h</includes>
    <includedby refid="dag__dynSceneRes_8h" local="no">dag_dynSceneRes.h</includedby>
    <includedby refid="dag__rendInstRes_8h" local="no">dag_rendInstRes.h</includedby>
    <incdepgraph>
      <node id="12">
        <label>shaders/dag_bindumpReloadListener.h</label>
        <link refid="dag__bindumpReloadListener_8h_source"/>
      </node>
      <node id="36">
        <label>shaders/dag_shSkinMesh.h</label>
        <link refid="dag__shSkinMesh_8h_source"/>
        <childnode refid="37" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="38" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>shaders/dag_shaderCommon.h</label>
        <link refid="dag__shaderCommon_8h_source"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="29">
        <label>shaders/dag_shaderMesh.h</label>
        <link refid="dag__shaderMesh_8h_source"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
      </node>
      <node id="9">
        <label>shaders/dag_shaderVar.h</label>
        <link refid="dag__shaderVar_8h_source"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>shaders/dag_shaderVarType.h</label>
        <link refid="dag__shaderVarType_8h_source"/>
      </node>
      <node id="11">
        <label>shaders/dag_shaderVariableInfo.h</label>
        <link refid="dag__shaderVariableInfo_8h_source"/>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>shaders/dag_shaders.h</label>
        <link refid="dag__shaders_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>dag_shadersRes.h</label>
        <link refid="dag__shadersRes_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="39" relation="include">
        </childnode>
      </node>
      <node id="20">
        <label>shaders/dag_stcode.h</label>
        <link refid="dag__stcode_8h_source"/>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>3d/dag_texMgr.h</label>
      </node>
      <node id="3">
        <label>EASTL/fixed_function.h</label>
      </node>
      <node id="24">
        <label>EASTL/optional.h</label>
      </node>
      <node id="22">
        <label>EASTL/string.h</label>
      </node>
      <node id="23">
        <label>EASTL/string_view.h</label>
      </node>
      <node id="32">
        <label>drv/3d/dag_buffers.h</label>
      </node>
      <node id="6">
        <label>drv/3d/dag_consts.h</label>
      </node>
      <node id="21">
        <label>drv/3d/dag_d3dResource.h</label>
      </node>
      <node id="30">
        <label>drv/3d/dag_draw.h</label>
      </node>
      <node id="31">
        <label>drv/3d/dag_driver.h</label>
      </node>
      <node id="10">
        <label>drv/3d/dag_samplerHandle.h</label>
      </node>
      <node id="26">
        <label>generic/dag_DObject.h</label>
      </node>
      <node id="25">
        <label>generic/dag_fixedMoveOnlyFunction.h</label>
      </node>
      <node id="33">
        <label>generic/dag_patchTab.h</label>
      </node>
      <node id="39">
        <label>generic/dag_ptrTab.h</label>
      </node>
      <node id="34">
        <label>generic/dag_smallTab.h</label>
      </node>
      <node id="7">
        <label>generic/dag_span.h</label>
      </node>
      <node id="37">
        <label>generic/dag_tab.h</label>
      </node>
      <node id="17">
        <label>math/dag_Point2.h</label>
      </node>
      <node id="38">
        <label>math/dag_TMatrix.h</label>
      </node>
      <node id="14">
        <label>math/dag_check_nan.h</label>
      </node>
      <node id="18">
        <label>math/dag_dxmath_forward.h</label>
      </node>
      <node id="16">
        <label>math/integer/dag_IPoint4.h</label>
      </node>
      <node id="27">
        <label>memory/dag_mem.h</label>
      </node>
      <node id="13">
        <label>stdint.h</label>
      </node>
      <node id="28">
        <label>util/dag_globDef.h</label>
      </node>
      <node id="35">
        <label>util/dag_stdint.h</label>
      </node>
      <node id="19">
        <label>util/dag_string.h</label>
      </node>
      <node id="15">
        <label>vecmath/dag_vecMathDecl.h</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="2">
        <label>dag_dynSceneRes.h</label>
        <link refid="dag__dynSceneRes_8h_source"/>
      </node>
      <node id="3">
        <label>dag_rendInstRes.h</label>
        <link refid="dag__rendInstRes_8h_source"/>
      </node>
      <node id="1">
        <label>dag_shadersRes.h</label>
        <link refid="dag__shadersRes_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="dag__shadersRes_8h_1a30947a2dd1ca3a667fcbc74024bf3f98" prot="public" static="no" strong="no">
        <type></type>
        <name>ShaderMeshResourceFlags</name>
        <enumvalue id="dag__shadersRes_8h_1a30947a2dd1ca3a667fcbc74024bf3f98afd96a785fa6f674e8eea0663edffd553" prot="public">
          <name>SRLOAD_SYMTEX</name>
          <initializer>= 0x02</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="dag__shadersRes_8h_1a30947a2dd1ca3a667fcbc74024bf3f98ac2acdf212b9e8d95ea24f846a5d63261" prot="public">
          <name>SRLOAD_TO_SYSMEM</name>
          <initializer>= 0x04</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="dag__shadersRes_8h_1a30947a2dd1ca3a667fcbc74024bf3f98aeb228803a05f17b30ec4dd0946b62b0c" prot="public">
          <name>SRLOAD_NO_TEX_REF</name>
          <initializer>= 0x08</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="dag__shadersRes_8h_1a30947a2dd1ca3a667fcbc74024bf3f98a87459c6cefb166415d2f6f7c68771c4b" prot="public">
          <name>SRLOAD_SRC_ONLY</name>
          <initializer>= 0x10</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="dag__shadersRes_8h_1a30947a2dd1ca3a667fcbc74024bf3f98a7eae178b1c41a6c09055164bc954031f" prot="public">
          <name>SRLOAD_BIND_SHADER_RES</name>
          <initializer>= 0x20</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dag_shadersRes.h" line="17" column="1" bodyfile="dag_shadersRes.h" bodystart="18" bodyend="36"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="var">
      <memberdef kind="variable" id="dag__shadersRes_8h_1a3762049c9e3572f105981c4648c2d8a7" prot="protected" static="no" mutable="no">
        <type>int</type>
        <definition>int resSize</definition>
        <argsstring></argsstring>
        <name>resSize</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dag_shadersRes.h" line="63" column="7" bodyfile="dag_shadersRes.h" bodystart="63" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="dag__shadersRes_8h_1a441fda20b7e8e9d8500c49f392aeebea" prot="protected" static="no" mutable="no">
        <type>Ptr&lt; <ref refid="classShaderMatVdata" kindref="compound">ShaderMatVdata</ref> &gt;</type>
        <definition>Ptr&lt;ShaderMatVdata&gt; smvdRef</definition>
        <argsstring></argsstring>
        <name>smvdRef</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dag_shadersRes.h" line="65" column="7" bodyfile="dag_shadersRes.h" bodystart="65" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="dag__shadersRes_8h_1aa9a03389f8a6e660dc6f1bfefbfc803e" prot="protected" static="no" mutable="no">
        <type><ref refid="classShaderMesh" kindref="compound">ShaderMesh</ref></type>
        <definition>ShaderSkinnedMesh mesh</definition>
        <argsstring></argsstring>
        <name>mesh</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dag_shadersRes.h" line="67" column="14" bodyfile="dag_shadersRes.h" bodystart="67" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="dag__shadersRes_8h_1ae40c0addb1c6716343a64f81818f71d1" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>decl_dclass_and_id(ShaderMeshResource, DObject, 0xD89B17A4) public ShaderMeshResource *</type>
        <definition>virtual decl_dclass_and_id(ShaderMeshResource, DObject, 0xD89B17A4) public ShaderMeshResource * clone</definition>
        <argsstring>() const</argsstring>
        <name>clone</name>
        <briefdescription>
<para>clones resource </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dag_shadersRes.h" line="45" column="30" declfile="dag_shadersRes.h" declline="45" declcolumn="30"/>
      </memberdef>
      <memberdef kind="function" id="dag__shadersRes_8h_1a9bb1f6a8c933316063c53c9b753557b8" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void gatherUsedTex</definition>
        <argsstring>(TextureIdSet &amp;tex_id_list) const</argsstring>
        <name>gatherUsedTex</name>
        <param>
          <type>TextureIdSet &amp;</type>
          <declname>tex_id_list</declname>
        </param>
        <briefdescription>
<para>gathers all textures referenced by materials </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dag_shadersRes.h" line="48" column="8" declfile="dag_shadersRes.h" declline="48" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="dag__shadersRes_8h_1a662e5fe1f822213025f04895d60c96de" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void gatherUsedMat</definition>
        <argsstring>(Tab&lt; ShaderMaterial * &gt; &amp;mat_list) const</argsstring>
        <name>gatherUsedMat</name>
        <param>
          <type>Tab&lt; <ref refid="classShaderMaterial" kindref="compound">ShaderMaterial</ref> * &gt; &amp;</type>
          <declname>mat_list</declname>
        </param>
        <briefdescription>
<para>gathers all materials referenced in elements </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dag_shadersRes.h" line="50" column="8" declfile="dag_shadersRes.h" declline="50" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="dag__shadersRes_8h_1a2ca9c44ce010ad3bd0dbfb6452350475" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool replaceTexture</definition>
        <argsstring>(TEXTUREID tex_id_old, TEXTUREID tex_id_new)</argsstring>
        <name>replaceTexture</name>
        <param>
          <type>TEXTUREID</type>
          <declname>tex_id_old</declname>
        </param>
        <param>
          <type>TEXTUREID</type>
          <declname>tex_id_new</declname>
        </param>
        <briefdescription>
<para>replaces texture id in materials used by mesh </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dag_shadersRes.h" line="53" column="8" declfile="dag_shadersRes.h" declline="53" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="dag__shadersRes_8h_1a9e37b93a359f9c267df9df4c867012e7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classShaderMesh" kindref="compound">ShaderMesh</ref> *</type>
        <definition>ShaderMesh * getMesh</definition>
        <argsstring>()</argsstring>
        <name>getMesh</name>
        <briefdescription>
<para>return mesh </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dag_shadersRes.h" line="56" column="21" bodyfile="dag_shadersRes.h" bodystart="56" bodyend="56"/>
      </memberdef>
      <memberdef kind="function" id="dag__shadersRes_8h_1a591164ae8a0aa3ba556554aa644419eb" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>static int dumpStartOfs</definition>
        <argsstring>()</argsstring>
        <name>dumpStartOfs</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dag_shadersRes.h" line="59" column="21" bodyfile="dag_shadersRes.h" bodystart="59" bodyend="59"/>
      </memberdef>
      <memberdef kind="function" id="dag__shadersRes_8h_1a718ff2c40226132f5e7736eaa6d10b82" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>void * dumpStartPtr</definition>
        <argsstring>()</argsstring>
        <name>dumpStartPtr</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dag_shadersRes.h" line="60" column="8" bodyfile="dag_shadersRes.h" bodystart="60" bodyend="60"/>
      </memberdef>
      <memberdef kind="function" id="dag__shadersRes_8h_1a2a2895152656f9e04cb3adab367fb0d7" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>PATCHABLE_64BIT_PAD32</definition>
        <argsstring>(_resv)</argsstring>
        <name>PATCHABLE_64BIT_PAD32</name>
        <param>
          <type>_resv</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dag_shadersRes.h" line="64" column="3" declfile="dag_shadersRes.h" declline="64" declcolumn="3"/>
      </memberdef>
      <memberdef kind="function" id="dag__shadersRes_8h_1a776aeba56e92589a70dd2750b2844799" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ShaderMeshResource</definition>
        <argsstring>()</argsstring>
        <name>ShaderMeshResource</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dag_shadersRes.h" line="70" column="3" bodyfile="dag_shadersRes.h" bodystart="70" bodyend="70"/>
      </memberdef>
      <memberdef kind="function" id="dag__shadersRes_8h_1a78ad5e2e15a42957bd73b11dc2f2a2df" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ShaderMeshResource</definition>
        <argsstring>(const ShaderMeshResource &amp;from)</argsstring>
        <name>ShaderMeshResource</name>
        <param>
          <type>const ShaderMeshResource &amp;</type>
          <declname>from</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dag_shadersRes.h" line="71" column="3" declfile="dag_shadersRes.h" declline="71" declcolumn="3"/>
      </memberdef>
      <memberdef kind="function" id="dag__shadersRes_8h_1a52a162db21a2ea005577f304d91f9acd" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void patchData</definition>
        <argsstring>(int res_sz, ShaderMatVdata &amp;smvd)</argsstring>
        <name>patchData</name>
        <param>
          <type>int</type>
          <declname>res_sz</declname>
        </param>
        <param>
          <type><ref refid="classShaderMatVdata" kindref="compound">ShaderMatVdata</ref> &amp;</type>
          <declname>smvd</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dag_shadersRes.h" line="74" column="8" declfile="dag_shadersRes.h" declline="74" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="dag__shadersRes_8h_1ad8c59d3509ba55387fa5389afda47beb" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>end_dclass_decl</definition>
        <argsstring>()</argsstring>
        <name>end_dclass_decl</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dag_shadersRes.h" line="75" column="1" declfile="dag_shadersRes.h" declline="75" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="dag__shadersRes_8h_1acabe7379085229fafd72371399c9bf13" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ShaderSkinnedMeshResource</definition>
        <argsstring>()</argsstring>
        <name>ShaderSkinnedMeshResource</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dag_shadersRes.h" line="109" column="3" bodyfile="dag_shadersRes.h" bodystart="109" bodyend="109"/>
      </memberdef>
      <memberdef kind="function" id="dag__shadersRes_8h_1a97faf548daa0049fecc9ac95ce7d264f" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ShaderSkinnedMeshResource</definition>
        <argsstring>(const ShaderSkinnedMeshResource &amp;from)</argsstring>
        <name>ShaderSkinnedMeshResource</name>
        <param>
          <type>const ShaderSkinnedMeshResource &amp;</type>
          <declname>from</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dag_shadersRes.h" line="110" column="3" declfile="dag_shadersRes.h" declline="110" declcolumn="3"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Dagor<sp/>Engine<sp/>6.5</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Copyright<sp/>(C)<sp/>Gaijin<sp/>Games<sp/>KFT.<sp/><sp/>All<sp/>rights<sp/>reserved.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>once</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;shaders/dag_shaders.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;shaders/dag_shaderMesh.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;shaders/dag_shSkinMesh.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;generic/dag_tab.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;util/dag_string.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;generic/dag_ptrTab.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="comment">//************************************************************************</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="comment">//*<sp/>load<sp/>flags<sp/>for<sp/>shader<sp/>resources</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="comment">//************************************************************************</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>ShaderMeshResourceFlags</highlight></codeline>
<codeline lineno="18"><highlight class="normal">{</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>don&apos;t<sp/>build<sp/>shader<sp/>mesh<sp/>data,<sp/>when<sp/>loading</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>SRLOAD_NOBUILD<sp/>=<sp/>0x01,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>get<sp/>textures<sp/>from<sp/>symbolic<sp/>factory,<sp/>they<sp/>are<sp/>just<sp/>named<sp/>ids<sp/>to<sp/>be<sp/>replaced<sp/>later</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/>SRLOAD_SYMTEX<sp/>=<sp/>0x02,</highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>read<sp/>VB/IB<sp/>data<sp/>into<sp/>sysmem<sp/>(accessible<sp/>via<sp/>GlobalVertexData::getVBMem()<sp/>and<sp/>GlobalVertexData::getIBMem())</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/>SRLOAD_TO_SYSMEM<sp/>=<sp/>0x04,</highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>load<sp/>materials<sp/>without<sp/>acquiring<sp/>tex<sp/>reference</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/>SRLOAD_NO_TEX_REF<sp/>=<sp/>0x08,</highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>load<sp/>only<sp/>vdata<sp/>src<sp/>(packed<sp/>block)<sp/>and<sp/>don&apos;t<sp/>load<sp/>it<sp/>ot<sp/>vertex/index<sp/>buffers</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/>SRLOAD_SRC_ONLY<sp/>=<sp/>0x10,</highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>vertex<sp/>and<sp/>index<sp/>buffers<sp/>can<sp/>be<sp/>bound<sp/>as<sp/>shader<sp/>resources</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/>SRLOAD_BIND_SHADER_RES<sp/>=<sp/>0x20,</highlight></codeline>
<codeline lineno="36"><highlight class="normal">};</highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal">decl_dclass_and_id(ShaderMeshResource,<sp/>DObject,<sp/>0xD89B17A4)</highlight></codeline>
<codeline lineno="40"><highlight class="normal">public:</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/>static<sp/>ShaderMeshResource<sp/>*loadResource(IGenLoad<sp/>&amp;<sp/>crd,<sp/><ref refid="classShaderMatVdata" kindref="compound">ShaderMatVdata</ref><sp/>&amp;<sp/>smvd,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>res_sz<sp/>=<sp/>-1);</highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/>virtual<sp/>ShaderMeshResource<sp/>*clone()<sp/>const;</highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>gatherUsedTex(TextureIdSet<sp/>&amp;<sp/>tex_id_list)<sp/>const;</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>gatherUsedMat(Tab&lt;<ref refid="classShaderMaterial" kindref="compound">ShaderMaterial</ref><sp/>*&gt;<sp/>&amp;<sp/>mat_list)<sp/>const;</highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>replaceTexture(TEXTUREID<sp/>tex_id_old,<sp/>TEXTUREID<sp/>tex_id_new);</highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/>inline<sp/><ref refid="classShaderMesh" kindref="compound">ShaderMesh</ref><sp/>*getMesh()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>&amp;mesh;<sp/>}</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classShaderMesh" kindref="compound">ShaderMesh</ref><sp/>*getMesh()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>&amp;mesh;<sp/>}</highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dumpStartOfs()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>offsetof(ShaderMeshResource,<sp/>mesh);<sp/>}</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*dumpStartPtr()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>&amp;mesh;<sp/>}</highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight><highlight class="keyword">protected</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>resSize;</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/>PATCHABLE_64BIT_PAD32(_resv);</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/>Ptr&lt;ShaderMatVdata&gt;<sp/>smvdRef;</highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><ref refid="classShaderMesh" kindref="compound">ShaderMesh</ref><sp/>mesh;</highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>ctor/dtor</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/>ShaderMeshResource()<sp/>{}<sp/></highlight><highlight class="comment">//-V730</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/>ShaderMeshResource(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>ShaderMeshResource<sp/>&amp;from);</highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>patches<sp/>data<sp/>after<sp/>resource<sp/>dump<sp/>loading</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>patchData(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>res_sz,<sp/><ref refid="classShaderMatVdata" kindref="compound">ShaderMatVdata</ref><sp/>&amp;smvd);</highlight></codeline>
<codeline lineno="75"><highlight class="normal">end_dclass_decl();</highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal">decl_dclass_and_id(ShaderSkinnedMeshResource,<sp/>DObject,<sp/>0x37db46e3)</highlight></codeline>
<codeline lineno="79"><highlight class="normal">public:</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/>static<sp/>ShaderSkinnedMeshResource<sp/>*loadResource(IGenLoad<sp/>&amp;<sp/>crd,<sp/><ref refid="classShaderMatVdata" kindref="compound">ShaderMatVdata</ref><sp/>&amp;<sp/>smvd,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>res_sz<sp/>=<sp/>-1);</highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/>virtual<sp/>ShaderSkinnedMeshResource<sp/>*clone()<sp/>const;</highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>gatherUsedTex(TextureIdSet<sp/>&amp;<sp/>tex_id_list)<sp/>const;</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>gatherUsedMat(Tab&lt;<ref refid="classShaderMaterial" kindref="compound">ShaderMaterial</ref><sp/>*&gt;<sp/>&amp;<sp/>mat_list)<sp/>const;</highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>replaceTexture(TEXTUREID<sp/>tex_id_old,<sp/>TEXTUREID<sp/>tex_id_new);</highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/>inline<sp/><ref refid="classShaderSkinnedMesh" kindref="compound">ShaderSkinnedMesh</ref><sp/>*getMesh()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>&amp;mesh;<sp/>}</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classShaderSkinnedMesh" kindref="compound">ShaderSkinnedMesh</ref><sp/>*getMesh()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>&amp;mesh;<sp/>}</highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dumpStartOfs()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>offsetof(ShaderSkinnedMeshResource,<sp/>mesh);<sp/>}</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*dumpStartPtr()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>&amp;mesh;<sp/>}</highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight><highlight class="keyword">protected</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>resSize;</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/>PATCHABLE_64BIT_PAD32(_resv);</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/>Ptr&lt;ShaderMatVdata&gt;<sp/>smvdRef;</highlight></codeline>
<codeline lineno="105"><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><ref refid="classShaderSkinnedMesh" kindref="compound">ShaderSkinnedMesh</ref><sp/>mesh;</highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>ctor/dtor</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/>ShaderSkinnedMeshResource()<sp/>{}<sp/></highlight><highlight class="comment">//-V730</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/>ShaderSkinnedMeshResource(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>ShaderSkinnedMeshResource<sp/>&amp;from);</highlight></codeline>
<codeline lineno="111"><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>patches<sp/>data<sp/>after<sp/>resource<sp/>dump<sp/>loading</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>patchData(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>res_sz,<sp/><ref refid="classShaderMatVdata" kindref="compound">ShaderMatVdata</ref><sp/>&amp;smvd);</highlight></codeline>
<codeline lineno="114"><highlight class="normal"></highlight></codeline>
<codeline lineno="115"><highlight class="normal">end_dclass_decl();</highlight></codeline>
    </programlisting>
    <location file="dag_shadersRes.h"/>
  </compounddef>
</doxygen>
