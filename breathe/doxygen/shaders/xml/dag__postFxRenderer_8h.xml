<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.7" xml:lang="en-US">
  <compounddef id="dag__postFxRenderer_8h" kind="file" language="C++">
    <compoundname>dag_postFxRenderer.h</compoundname>
    <includes local="no">generic/dag_DObject.h</includes>
    <includes local="no">drv/3d/dag_consts.h</includes>
    <incdepgraph>
      <node id="1">
        <label>dag_postFxRenderer.h</label>
        <link refid="dag__postFxRenderer_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>drv/3d/dag_consts.h</label>
      </node>
      <node id="2">
        <label>generic/dag_DObject.h</label>
      </node>
    </incdepgraph>
    <innerclass refid="classPostFxRenderer" prot="public">PostFxRenderer</innerclass>
      <sectiondef kind="func">
      <memberdef kind="function" id="dag__postFxRenderer_8h_1a9da993188ddc5367567eccee736e9a94" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classPostFxRenderer" kindref="compound">PostFxRenderer</ref> *</type>
        <definition>PostFxRenderer * create_postfx_renderer</definition>
        <argsstring>(const char *shader_name)</argsstring>
        <name>create_postfx_renderer</name>
        <param>
          <type>const char *</type>
          <declname>shader_name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dag_postFxRenderer.h" line="44" column="23" bodyfile="dag_postFxRenderer.h" bodystart="44" bodyend="50"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Dagor<sp/>Engine<sp/>6.5</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Copyright<sp/>(C)<sp/>Gaijin<sp/>Games<sp/>KFT.<sp/><sp/>All<sp/>rights<sp/>reserved.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>once</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;generic/dag_DObject.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;drv/3d/dag_consts.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classShaderMaterial" kindref="compound">ShaderMaterial</ref>;</highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classShaderElement" kindref="compound">ShaderElement</ref>;</highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Class<sp/>that<sp/>renders<sp/>full-screen<sp/>quad<sp/>for<sp/>post-effect<sp/>shaders.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14" refid="classPostFxRenderer" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classPostFxRenderer" kindref="compound">PostFxRenderer</ref></highlight></codeline>
<codeline lineno="15"><highlight class="normal">{</highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/><ref refid="classPostFxRenderer" kindref="compound">PostFxRenderer</ref>();</highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><ref refid="classPostFxRenderer" kindref="compound">~PostFxRenderer</ref>();</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><ref refid="classPostFxRenderer" kindref="compound">PostFxRenderer</ref>(<ref refid="classPostFxRenderer" kindref="compound">PostFxRenderer</ref><sp/>&amp;&amp;other);</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><ref refid="classPostFxRenderer" kindref="compound">PostFxRenderer</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classPostFxRenderer" kindref="compound">PostFxRenderer</ref><sp/>&amp;other);</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><ref refid="classPostFxRenderer" kindref="compound">PostFxRenderer</ref><sp/>&amp;operator=(<ref refid="classPostFxRenderer" kindref="compound">PostFxRenderer</ref><sp/>&amp;&amp;other);</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><ref refid="classPostFxRenderer" kindref="compound">PostFxRenderer</ref><sp/>&amp;operator=(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classPostFxRenderer" kindref="compound">PostFxRenderer</ref><sp/>&amp;other);</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="classPostFxRenderer" kindref="compound">PostFxRenderer</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*shader_name);</highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>clear();</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>init(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*shader_name,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>is_optional<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Use<sp/>to<sp/>set<sp/>shader<sp/>params.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><ref refid="classShaderMaterial" kindref="compound">ShaderMaterial</ref><sp/>*getMat()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>shmat;<sp/>}</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><ref refid="classShaderElement" kindref="compound">ShaderElement</ref><sp/>*getElem()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>shElem;<sp/>}</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classShaderMaterial" kindref="compound">ShaderMaterial</ref><sp/>*getMat()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>shmat;<sp/>}</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classShaderElement" kindref="compound">ShaderElement</ref><sp/>*getElem()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>shElem;<sp/>}</highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>render()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/>drawInternal(1);<sp/>}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>draw<sp/>optimal</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>renderTiled(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>num_tiles)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/>drawInternal(num_tiles);<sp/>};<sp/></highlight><highlight class="comment">//<sp/>With<sp/>Flush<sp/>between<sp/>tiles.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="keyword">protected</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/>Ptr&lt;ShaderMaterial&gt;<sp/>shmat;</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/>Ptr&lt;ShaderElement&gt;<sp/>shElem;</highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>drawInternal(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>num_tiles)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="41"><highlight class="normal">};</highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="classPostFxRenderer" kindref="compound">PostFxRenderer</ref><sp/>*create_postfx_renderer(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*shader_name)</highlight></codeline>
<codeline lineno="45"><highlight class="normal">{</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><ref refid="classPostFxRenderer" kindref="compound">PostFxRenderer</ref><sp/>*r<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="classPostFxRenderer" kindref="compound">PostFxRenderer</ref>(shader_name);</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!r-&gt;getMat())</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/>del_it(r);</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>r;</highlight></codeline>
<codeline lineno="50"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="dag_postFxRenderer.h"/>
  </compounddef>
</doxygen>
