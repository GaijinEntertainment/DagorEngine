<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.7" xml:lang="en-US">
  <compounddef id="dag__dynSceneRes_8h" kind="file" language="C++">
    <compoundname>dag_dynSceneRes.h</compoundname>
    <includes refid="dag__shadersRes_8h" local="no">shaders/dag_shadersRes.h</includes>
    <includes refid="dag__IRenderWrapperControl_8h" local="no">shaders/dag_IRenderWrapperControl.h</includes>
    <includes local="no">generic/dag_smallTab.h</includes>
    <includes local="no">math/dag_TMatrix.h</includes>
    <includes local="no">math/dag_bounds3.h</includes>
    <includes local="no">math/dag_vecMathCompatibility.h</includes>
    <includes local="no">util/dag_roNameMap.h</includes>
    <includes local="no">startup/dag_globalSettings.h</includes>
    <includes local="no">EASTL/unique_ptr.h</includes>
    <includes local="no">EASTL/optional.h</includes>
    <includes local="no">EASTL/fixed_function.h</includes>
    <includes local="no">EASTL/array.h</includes>
    <includes refid="dag__bindposeBufferManager_8h" local="no">shaders/dag_bindposeBufferManager.h</includes>
    <incdepgraph>
      <node id="41">
        <label>shaders/dag_IRenderWrapperControl.h</label>
        <link refid="dag__IRenderWrapperControl_8h_source"/>
        <childnode refid="42" relation="include">
        </childnode>
      </node>
      <node id="49">
        <label>shaders/dag_bindposeBufferManager.h</label>
        <link refid="dag__bindposeBufferManager_8h_source"/>
        <childnode refid="50" relation="include">
        </childnode>
        <childnode refid="54" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
      </node>
      <node id="13">
        <label>shaders/dag_bindumpReloadListener.h</label>
        <link refid="dag__bindumpReloadListener_8h_source"/>
      </node>
      <node id="1">
        <label>dag_dynSceneRes.h</label>
        <link refid="dag__dynSceneRes_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="41" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="39" relation="include">
        </childnode>
        <childnode refid="43" relation="include">
        </childnode>
        <childnode refid="44" relation="include">
        </childnode>
        <childnode refid="45" relation="include">
        </childnode>
        <childnode refid="46" relation="include">
        </childnode>
        <childnode refid="47" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="48" relation="include">
        </childnode>
        <childnode refid="49" relation="include">
        </childnode>
      </node>
      <node id="50">
        <label>shaders/dag_linearMatrixBufferAllocator.h</label>
        <link refid="dag__linearMatrixBufferAllocator_8h_source"/>
        <childnode refid="51" relation="include">
        </childnode>
        <childnode refid="39" relation="include">
        </childnode>
        <childnode refid="38" relation="include">
        </childnode>
      </node>
      <node id="51">
        <label>shaders/dag_linearSbufferAllocator.h</label>
        <link refid="dag__linearSbufferAllocator_8h_source"/>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="52" relation="include">
        </childnode>
        <childnode refid="53" relation="include">
        </childnode>
      </node>
      <node id="37">
        <label>shaders/dag_shSkinMesh.h</label>
        <link refid="dag__shSkinMesh_8h_source"/>
        <childnode refid="38" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="39" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>shaders/dag_shaderCommon.h</label>
        <link refid="dag__shaderCommon_8h_source"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="30">
        <label>shaders/dag_shaderMesh.h</label>
        <link refid="dag__shaderMesh_8h_source"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
      </node>
      <node id="10">
        <label>shaders/dag_shaderVar.h</label>
        <link refid="dag__shaderVar_8h_source"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
      </node>
      <node id="9">
        <label>shaders/dag_shaderVarType.h</label>
        <link refid="dag__shaderVarType_8h_source"/>
      </node>
      <node id="12">
        <label>shaders/dag_shaderVariableInfo.h</label>
        <link refid="dag__shaderVariableInfo_8h_source"/>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>shaders/dag_shaders.h</label>
        <link refid="dag__shaders_8h_source"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>shaders/dag_shadersRes.h</label>
        <link refid="dag__shadersRes_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
        <childnode refid="38" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
      </node>
      <node id="21">
        <label>shaders/dag_stcode.h</label>
        <link refid="dag__stcode_8h_source"/>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
      </node>
      <node id="52">
        <label>3d/dag_resPtr.h</label>
      </node>
      <node id="6">
        <label>3d/dag_texMgr.h</label>
      </node>
      <node id="48">
        <label>EASTL/array.h</label>
      </node>
      <node id="4">
        <label>EASTL/fixed_function.h</label>
      </node>
      <node id="25">
        <label>EASTL/optional.h</label>
      </node>
      <node id="23">
        <label>EASTL/string.h</label>
      </node>
      <node id="24">
        <label>EASTL/string_view.h</label>
      </node>
      <node id="47">
        <label>EASTL/unique_ptr.h</label>
      </node>
      <node id="33">
        <label>drv/3d/dag_buffers.h</label>
      </node>
      <node id="7">
        <label>drv/3d/dag_consts.h</label>
      </node>
      <node id="22">
        <label>drv/3d/dag_d3dResource.h</label>
      </node>
      <node id="31">
        <label>drv/3d/dag_draw.h</label>
      </node>
      <node id="32">
        <label>drv/3d/dag_driver.h</label>
      </node>
      <node id="53">
        <label>drv/3d/dag_info.h</label>
      </node>
      <node id="11">
        <label>drv/3d/dag_samplerHandle.h</label>
      </node>
      <node id="27">
        <label>generic/dag_DObject.h</label>
      </node>
      <node id="26">
        <label>generic/dag_fixedMoveOnlyFunction.h</label>
      </node>
      <node id="34">
        <label>generic/dag_patchTab.h</label>
      </node>
      <node id="40">
        <label>generic/dag_ptrTab.h</label>
      </node>
      <node id="35">
        <label>generic/dag_smallTab.h</label>
      </node>
      <node id="8">
        <label>generic/dag_span.h</label>
      </node>
      <node id="38">
        <label>generic/dag_tab.h</label>
      </node>
      <node id="18">
        <label>math/dag_Point2.h</label>
      </node>
      <node id="39">
        <label>math/dag_TMatrix.h</label>
      </node>
      <node id="43">
        <label>math/dag_bounds3.h</label>
      </node>
      <node id="15">
        <label>math/dag_check_nan.h</label>
      </node>
      <node id="19">
        <label>math/dag_dxmath_forward.h</label>
      </node>
      <node id="42">
        <label>math/dag_mathBase.h</label>
      </node>
      <node id="44">
        <label>math/dag_vecMathCompatibility.h</label>
      </node>
      <node id="17">
        <label>math/integer/dag_IPoint4.h</label>
      </node>
      <node id="54">
        <label>memory/dag_linearHeapAllocator.h</label>
      </node>
      <node id="28">
        <label>memory/dag_mem.h</label>
      </node>
      <node id="46">
        <label>startup/dag_globalSettings.h</label>
      </node>
      <node id="14">
        <label>stdint.h</label>
      </node>
      <node id="29">
        <label>util/dag_globDef.h</label>
      </node>
      <node id="45">
        <label>util/dag_roNameMap.h</label>
      </node>
      <node id="36">
        <label>util/dag_stdint.h</label>
      </node>
      <node id="20">
        <label>util/dag_string.h</label>
      </node>
      <node id="16">
        <label>vecmath/dag_vecMathDecl.h</label>
      </node>
    </incdepgraph>
    <innerclass refid="structRigidObject" prot="protected">RigidObject</innerclass>
    <innerclass refid="structLod" prot="public">Lod</innerclass>
    <innerclass refid="classDynamicRenderableSceneInstance" prot="protected">DynamicRenderableSceneInstance</innerclass>
    <innernamespace refid="namespaceshglobvars">shglobvars</innernamespace>
      <sectiondef kind="define">
      <memberdef kind="define" id="dag__dynSceneRes_8h_1abe5df814c61136b2583b2c48e4556b6c" prot="public" static="no">
        <name>DynamicRenderableSceneLodsResourceClassName</name>
        <initializer>&quot;dynobj&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dag_dynSceneRes.h" line="782" column="9" bodyfile="dag_dynSceneRes.h" bodystart="782" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="dag__dynSceneRes_8h_1a3c1595f43d89dc8684b6afcd52613c66" prot="protected" static="no" strong="no">
        <type>uint32_t</type>
        <name>FieldsMasks</name>
        <enumvalue id="dag__dynSceneRes_8h_1a3c1595f43d89dc8684b6afcd52613c66a52bad29d335454133e3b356e5580c80d" prot="protected">
          <name>RES_SIZE_SHIFT</name>
          <initializer>= 0x0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="dag__dynSceneRes_8h_1a3c1595f43d89dc8684b6afcd52613c66a3b85bbdb46aecff522222c1a69252977" prot="protected">
          <name>RES_SIZE_SIZE</name>
          <initializer>= 24</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="dag__dynSceneRes_8h_1a3c1595f43d89dc8684b6afcd52613c66a2a959e09907dfe65df6958fc45083bb5" prot="protected">
          <name>RES_SIZE_MASK</name>
          <initializer>= (1 &lt;&lt; RES_SIZE_SIZE) - 1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="dag__dynSceneRes_8h_1a3c1595f43d89dc8684b6afcd52613c66a0bb8da0581c187053ff0ac800451981e" prot="protected">
          <name>BOUND_PACK_USED_SHIFT</name>
          <initializer>= RES_SIZE_SHIFT + RES_SIZE_SIZE</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="dag__dynSceneRes_8h_1a3c1595f43d89dc8684b6afcd52613c66a2e670731351fa3dad9163fa319bc543d" prot="protected">
          <name>BOUND_PACK_USED_SIZE</name>
          <initializer>= 0x1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="dag__dynSceneRes_8h_1a3c1595f43d89dc8684b6afcd52613c66aad02b3ede7272a2656bbe9a6fd3a3934" prot="protected">
          <name>BOUND_PACK_USED_MASK</name>
          <initializer>= (1 &lt;&lt; BOUND_PACK_USED_SIZE) - 1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="dag__dynSceneRes_8h_1a3c1595f43d89dc8684b6afcd52613c66ae26b324525a95a03f584a91b738a959b" prot="protected">
          <name>QL_BEST_LOD_SHIFT</name>
          <initializer>= BOUND_PACK_USED_SHIFT + BOUND_PACK_USED_SIZE</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="dag__dynSceneRes_8h_1a3c1595f43d89dc8684b6afcd52613c66a186000b821f8ac0a000d0788eab6be93" prot="protected">
          <name>QL_BEST_LOD_SIZE</name>
          <initializer>= 0x3</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="dag__dynSceneRes_8h_1a3c1595f43d89dc8684b6afcd52613c66aa9cbcf5ad5a998012f792200adb1688b" prot="protected">
          <name>QL_BEST_LOD_MASK</name>
          <initializer>= (1 &lt;&lt; QL_BEST_LOD_SIZE) - 1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="dag__dynSceneRes_8h_1a3c1595f43d89dc8684b6afcd52613c66ad2699d04e01ce715149c0bc435627c3e" prot="protected">
          <name>RES_LD_FLG_SHIFT</name>
          <initializer>= QL_BEST_LOD_SIZE + QL_BEST_LOD_SHIFT</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="dag__dynSceneRes_8h_1a3c1595f43d89dc8684b6afcd52613c66ab353332104d7946634f59c0c7505d7eb" prot="protected">
          <name>RES_LD_FLG_SIZE</name>
          <initializer>= 0x1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="dag__dynSceneRes_8h_1a3c1595f43d89dc8684b6afcd52613c66a8c6864984f059bf3524807a934363fb0" prot="protected">
          <name>RES_LD_FLG_MASK</name>
          <initializer>= (1 &lt;&lt; RES_LD_FLG_SIZE) - 1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="dag__dynSceneRes_8h_1a3c1595f43d89dc8684b6afcd52613c66a27518aaab05ccad1017d6dcbabb58cc5" prot="protected">
          <name>RESERVED_SHIFT</name>
          <initializer>= RES_LD_FLG_SIZE + RES_LD_FLG_SHIFT</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="dag__dynSceneRes_8h_1a3c1595f43d89dc8684b6afcd52613c66a59e8c49907be101dc1f925e0f44d431e" prot="protected">
          <name>RESERVED_SIZE</name>
          <initializer>= 0x3</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="dag__dynSceneRes_8h_1a3c1595f43d89dc8684b6afcd52613c66a4e953a380058ffa85c2722c0a70b094a" prot="protected">
          <name>RESERVED_MASK</name>
          <initializer>= (1 &lt;&lt; RESERVED_SIZE) - 1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dag_dynSceneRes.h" line="393" column="3" bodyfile="dag_dynSceneRes.h" bodystart="394" bodyend="410"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="dag__dynSceneRes_8h_1a9c3cc1337f689c7155d8de5052131f07" prot="public" static="no">
        <type>void(*</type>
        <definition>typedef void(* on_dynsceneres_beforedrawmeshes_cb) (DynamicRenderableSceneInstance &amp;inst, int node_id)</definition>
        <argsstring>)(DynamicRenderableSceneInstance &amp;inst, int node_id)</argsstring>
        <name>on_dynsceneres_beforedrawmeshes_cb</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dag_dynSceneRes.h" line="34" column="9" bodyfile="dag_dynSceneRes.h" bodystart="34" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="var">
      <memberdef kind="variable" id="dag__dynSceneRes_8h_1aa13818a499dcea28803c65bffcde2217" prot="public" static="no" mutable="no">
        <type>RoNameMapEx</type>
        <definition>RoNameMapEx node</definition>
        <argsstring></argsstring>
        <name>node</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dag_dynSceneRes.h" line="45" column="15" bodyfile="dag_dynSceneRes.h" bodystart="39" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="dag__dynSceneRes_8h_1ad2080a3327c34b97bc0c38abed689bb6" prot="protected" static="no" mutable="no">
        <type>Ptr&lt; DynSceneResNameMapResource &gt;</type>
        <definition>Ptr&lt; DynSceneResNameMapResource &gt; names</definition>
        <argsstring></argsstring>
        <name>names</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dag_dynSceneRes.h" line="177" column="7" bodyfile="dag_dynSceneRes.h" bodystart="177" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="dag__dynSceneRes_8h_1a3762049c9e3572f105981c4648c2d8a7" prot="protected" static="no" mutable="no">
        <type>int</type>
        <definition>int resSize</definition>
        <argsstring></argsstring>
        <name>resSize</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dag_dynSceneRes.h" line="178" column="7" bodyfile="dag_dynSceneRes.h" bodystart="178" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="dag__dynSceneRes_8h_1a588dc897a1db91b7be04bb7ef8a40a8a" prot="protected" static="no" mutable="no">
        <type>int</type>
        <definition>int _resv0</definition>
        <argsstring></argsstring>
        <name>_resv0</name>
        <initializer>= 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dag_dynSceneRes.h" line="178" column="15" bodyfile="dag_dynSceneRes.h" bodystart="178" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="dag__dynSceneRes_8h_1aed5f4d4c4dadd0161ade8a5d82112ec0" prot="protected" static="no" mutable="no">
        <type>Tab&lt; int &gt;</type>
        <definition>Tab&lt;int&gt; skinNodes</definition>
        <argsstring></argsstring>
        <name>skinNodes</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dag_dynSceneRes.h" line="182" column="7" bodyfile="dag_dynSceneRes.h" bodystart="182" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="dag__dynSceneRes_8h_1aff16887e7326700e12b50416f522b7d9" prot="protected" static="no" mutable="no">
        <type>PtrTab&lt; <ref refid="classBindPoseElem" kindref="compound">BindPoseElem</ref> &gt;</type>
        <definition>PtrTab&lt;BindPoseElem&gt; bindPoseElemPtrArr</definition>
        <argsstring></argsstring>
        <name>bindPoseElemPtrArr</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dag_dynSceneRes.h" line="183" column="10" bodyfile="dag_dynSceneRes.h" bodystart="183" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="dag__dynSceneRes_8h_1a5f3fa4496b870672a7fe434a0cefa991" prot="protected" static="no" mutable="no">
        <type>PatchableTab&lt; <ref refid="structRigidObject" kindref="compound">RigidObject</ref> &gt;</type>
        <definition>PatchableTab&lt;RigidObject&gt; rigids</definition>
        <argsstring></argsstring>
        <name>rigids</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dag_dynSceneRes.h" line="185" column="16" bodyfile="dag_dynSceneRes.h" bodystart="185" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="dag__dynSceneRes_8h_1a50430a7903d5f8986369a4adad1def60" prot="protected" static="no" mutable="no">
        <type>PatchableTab&lt; PatchablePtr&lt; ShaderSkinnedMeshResource &gt; &gt;</type>
        <definition>PatchableTab&lt;PatchablePtr&lt;ShaderSkinnedMeshResource&gt; &gt; skins</definition>
        <argsstring></argsstring>
        <name>skins</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dag_dynSceneRes.h" line="186" column="16" bodyfile="dag_dynSceneRes.h" bodystart="186" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="dag__dynSceneRes_8h_1aa004e85d793d476d90860a9b94cfb2f9" prot="private" static="no" mutable="yes">
        <type>uint32_t</type>
        <definition>uint32_t bvhId</definition>
        <argsstring></argsstring>
        <name>bvhId</name>
        <initializer>= 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dag_dynSceneRes.h" line="291" column="20" bodyfile="dag_dynSceneRes.h" bodystart="291" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="dag__dynSceneRes_8h_1ad2626263596811facb1ca3e7d71bcfe6" prot="public" static="yes" mutable="no">
        <type>void(*</type>
        <definition>void(* on_higher_lod_required) (DynamicRenderableSceneLodsResource *res, unsigned req_lod, unsigned cur_lod)</definition>
        <argsstring>)(DynamicRenderableSceneLodsResource *res, unsigned req_lod, unsigned cur_lod)</argsstring>
        <name>on_higher_lod_required</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dag_dynSceneRes.h" line="331" column="10" bodyfile="dag_dynSceneRes.h" bodystart="331" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="dag__dynSceneRes_8h_1a37e677bda8a7f1ba82e62a33ce5cc8c6" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>constexpr short int</type>
        <definition>constexpr short int qlReqLodInitialValue</definition>
        <argsstring></argsstring>
        <name>qlReqLodInitialValue</name>
        <initializer>= 16</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dag_dynSceneRes.h" line="333" column="30" bodyfile="dag_dynSceneRes.h" bodystart="333" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="dag__dynSceneRes_8h_1afc176a9c3db9ea471d986972aeb548a5" prot="protected" static="no" mutable="no">
        <type>Ptr&lt; <ref refid="classShaderMatVdata" kindref="compound">ShaderMatVdata</ref> &gt;</type>
        <definition>Ptr&lt;ShaderMatVdata&gt; smvdR</definition>
        <argsstring></argsstring>
        <name>smvdR</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dag_dynSceneRes.h" line="392" column="7" bodyfile="dag_dynSceneRes.h" bodystart="392" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="dag__dynSceneRes_8h_1a604063f77b9ba9ab433e0929c2395ce1" prot="protected" static="no" mutable="no">
        <type>Ptr&lt; <ref refid="classShaderMatVdata" kindref="compound">ShaderMatVdata</ref> &gt;</type>
        <definition>Ptr&lt;ShaderMatVdata&gt; smvdS</definition>
        <argsstring></argsstring>
        <name>smvdS</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dag_dynSceneRes.h" line="392" column="13" bodyfile="dag_dynSceneRes.h" bodystart="392" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="dag__dynSceneRes_8h_1af8a275bd70da65886608a1de4338c82e" prot="protected" static="no" mutable="no">
        <type>uint32_t</type>
        <definition>uint32_t packedFields</definition>
        <argsstring></argsstring>
        <name>packedFields</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dag_dynSceneRes.h" line="413" column="12" bodyfile="dag_dynSceneRes.h" bodystart="413" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="dag__dynSceneRes_8h_1a1fa8370847d0fd33da2873f79dc288d7" prot="protected" static="no" mutable="no">
        <type>int</type>
        <definition>int instanceRefCount</definition>
        <argsstring></argsstring>
        <name>instanceRefCount</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dag_dynSceneRes.h" line="414" column="7" bodyfile="dag_dynSceneRes.h" bodystart="414" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="dag__dynSceneRes_8h_1a544d979b2c2cb4a12974aee2c45302e4" prot="protected" static="no" mutable="no">
        <type>volatile unsigned short</type>
        <definition>volatile unsigned short qlReqLod</definition>
        <argsstring></argsstring>
        <name>qlReqLod</name>
        <initializer>= qlReqLodInitialValue</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dag_dynSceneRes.h" line="415" column="27" bodyfile="dag_dynSceneRes.h" bodystart="415" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="dag__dynSceneRes_8h_1af74d6baf904c2fecbb49b7720519b281" prot="protected" static="no" mutable="no">
        <type>volatile unsigned short</type>
        <definition>volatile unsigned short qlReqLodPrev</definition>
        <argsstring></argsstring>
        <name>qlReqLodPrev</name>
        <initializer>= qlReqLodInitialValue</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dag_dynSceneRes.h" line="415" column="37" bodyfile="dag_dynSceneRes.h" bodystart="415" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="dag__dynSceneRes_8h_1a85e79cfb3cef9cb827f37c646c85171c" prot="protected" static="no" mutable="no">
        <type>volatile unsigned short</type>
        <definition>volatile unsigned short qlReloadCnt</definition>
        <argsstring></argsstring>
        <name>qlReloadCnt</name>
        <initializer>= 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dag_dynSceneRes.h" line="416" column="27" bodyfile="dag_dynSceneRes.h" bodystart="416" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="dag__dynSceneRes_8h_1a4be066f31d8ddd3a733efa18b1c41318" prot="protected" static="no" mutable="no">
        <type>volatile unsigned short</type>
        <definition>volatile unsigned short qlDiscardCnt</definition>
        <argsstring></argsstring>
        <name>qlDiscardCnt</name>
        <initializer>= 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dag_dynSceneRes.h" line="416" column="40" bodyfile="dag_dynSceneRes.h" bodystart="416" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="dag__dynSceneRes_8h_1a9e09da9aa4e8def34ae58e60972410c8" prot="protected" static="no" mutable="no">
        <type>int</type>
        <definition>int qlReqLFU</definition>
        <argsstring></argsstring>
        <name>qlReqLFU</name>
        <initializer>= 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dag_dynSceneRes.h" line="417" column="7" bodyfile="dag_dynSceneRes.h" bodystart="417" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="dag__dynSceneRes_8h_1a191fbd3d621b9e646865256f6e9b8aa4" prot="protected" static="no" mutable="yes">
        <type>DynamicRenderableSceneLodsResource *</type>
        <definition>DynamicRenderableSceneLodsResource* nextClonedRes</definition>
        <argsstring></argsstring>
        <name>nextClonedRes</name>
        <initializer>= nullptr</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dag_dynSceneRes.h" line="418" column="46" bodyfile="dag_dynSceneRes.h" bodystart="418" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="dag__dynSceneRes_8h_1aa8aa692c4b8d91a5c68998599d9e2924" prot="protected" static="no" mutable="yes">
        <type>Ptr&lt; DynamicRenderableSceneLodsResource &gt;</type>
        <definition>Ptr&lt;DynamicRenderableSceneLodsResource&gt; originalRes</definition>
        <argsstring></argsstring>
        <name>originalRes</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dag_dynSceneRes.h" line="419" column="15" bodyfile="dag_dynSceneRes.h" bodystart="419" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="dag__dynSceneRes_8h_1aebb557ecfc95f3b01682bd533c2a86c6" prot="public" static="no" mutable="no">
        <type>PatchableTab&lt; <ref refid="structLod" kindref="compound">Lod</ref> &gt;</type>
        <definition>PatchableTab&lt;Lod&gt; lods</definition>
        <argsstring></argsstring>
        <name>lods</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dag_dynSceneRes.h" line="424" column="16" bodyfile="dag_dynSceneRes.h" bodystart="424" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="dag__dynSceneRes_8h_1aa32e6ee619428614678385783d5a52a8" prot="public" static="no" mutable="no">
        <type>BBox3</type>
        <definition>BBox3 bbox</definition>
        <argsstring></argsstring>
        <name>bbox</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dag_dynSceneRes.h" line="425" column="9" bodyfile="dag_dynSceneRes.h" bodystart="425" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="dag__dynSceneRes_8h_1a398c2b5d82e8abcb271179658bac6bba" prot="public" static="no" mutable="no">
        <type>float</type>
        <definition>float bpC254[4]</definition>
        <argsstring>[4]</argsstring>
        <name>bpC254</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dag_dynSceneRes.h" line="426" column="9" bodyfile="dag_dynSceneRes.h" bodystart="426" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="dag__dynSceneRes_8h_1a2a65456c1184e143cc59dc2975582fcb" prot="public" static="no" mutable="no">
        <type>float</type>
        <definition>float bpC255[4]</definition>
        <argsstring>[4]</argsstring>
        <name>bpC255</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dag_dynSceneRes.h" line="426" column="16" bodyfile="dag_dynSceneRes.h" bodystart="426" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="dag__dynSceneRes_8h_1a20f0fe535c692a30ad0e52791de9e9c7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>on_dynsceneres_beforedrawmeshes_cb</type>
        <definition>on_dynsceneres_beforedrawmeshes_cb set_dynsceneres_beforedrawmeshes_cb</definition>
        <argsstring>(on_dynsceneres_beforedrawmeshes_cb cb)</argsstring>
        <name>set_dynsceneres_beforedrawmeshes_cb</name>
        <param>
          <type>on_dynsceneres_beforedrawmeshes_cb</type>
          <declname>cb</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dag_dynSceneRes.h" line="35" column="36" declfile="dag_dynSceneRes.h" declline="35" declcolumn="36"/>
      </memberdef>
      <memberdef kind="function" id="dag__dynSceneRes_8h_1ac15c69ea9abf787e4db0dd6790c2c7b1" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>DynSceneResNameMapResource</definition>
        <argsstring>()</argsstring>
        <name>DynSceneResNameMapResource</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dag_dynSceneRes.h" line="49" column="3" bodyfile="dag_dynSceneRes.h" bodystart="49" bodyend="49"/>
      </memberdef>
      <memberdef kind="function" id="dag__dynSceneRes_8h_1a61794125b1e72ebb77ce42f4c088a165" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>DynSceneResNameMapResource</definition>
        <argsstring>(const DynSceneResNameMapResource &amp;from)</argsstring>
        <name>DynSceneResNameMapResource</name>
        <param>
          <type>const DynSceneResNameMapResource &amp;</type>
          <declname>from</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dag_dynSceneRes.h" line="50" column="3" declfile="dag_dynSceneRes.h" declline="50" declcolumn="3"/>
      </memberdef>
      <memberdef kind="function" id="dag__dynSceneRes_8h_1a591164ae8a0aa3ba556554aa644419eb" prot="protected" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>static int dumpStartOfs</definition>
        <argsstring>()</argsstring>
        <name>dumpStartOfs</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dag_dynSceneRes.h" line="52" column="21" bodyfile="dag_dynSceneRes.h" bodystart="52" bodyend="52"/>
      </memberdef>
      <memberdef kind="function" id="dag__dynSceneRes_8h_1a718ff2c40226132f5e7736eaa6d10b82" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>void * dumpStartPtr</definition>
        <argsstring>()</argsstring>
        <name>dumpStartPtr</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dag_dynSceneRes.h" line="53" column="8" bodyfile="dag_dynSceneRes.h" bodystart="53" bodyend="53"/>
      </memberdef>
      <memberdef kind="function" id="dag__dynSceneRes_8h_1a6b2f1d9db8f39c23dc881baad92c4d0b" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void patchData</definition>
        <argsstring>()</argsstring>
        <name>patchData</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dag_dynSceneRes.h" line="56" column="8" declfile="dag_dynSceneRes.h" declline="56" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="dag__dynSceneRes_8h_1ad8c59d3509ba55387fa5389afda47beb" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>end_dclass_decl</definition>
        <argsstring>()</argsstring>
        <name>end_dclass_decl</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dag_dynSceneRes.h" line="57" column="1" declfile="dag_dynSceneRes.h" declline="57" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="dag__dynSceneRes_8h_1a21ed538433c4cfaebffbe340699adf5c" prot="protected" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>decl_dclass_and_id(DynamicRenderableSceneResource, DObject, 0x7AE6FD70) public DynamicRenderableSceneResource *</type>
        <definition>static decl_dclass_and_id(DynamicRenderableSceneResource, DObject, 0x7AE6FD70) public DynamicRenderableSceneResource * loadResourceInternal</definition>
        <argsstring>(IGenLoad &amp;crd, DynSceneResNameMapResource *nm, int srl_flags, ShaderMatVdata &amp;smvd, int res_sz=-1)</argsstring>
        <name>loadResourceInternal</name>
        <param>
          <type>IGenLoad &amp;</type>
          <declname>crd</declname>
        </param>
        <param>
          <type>DynSceneResNameMapResource *</type>
          <declname>nm</declname>
        </param>
        <param>
          <type>int</type>
          <declname>srl_flags</declname>
        </param>
        <param>
          <type><ref refid="classShaderMatVdata" kindref="compound">ShaderMatVdata</ref> &amp;</type>
          <declname>smvd</declname>
        </param>
        <param>
          <type>int</type>
          <declname>res_sz</declname>
          <defval>-1</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dag_dynSceneRes.h" line="68" column="41" declfile="dag_dynSceneRes.h" declline="68" declcolumn="41"/>
      </memberdef>
      <memberdef kind="function" id="dag__dynSceneRes_8h_1ae54d13e8b672688ecc4bb5dcb30c96b8" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void loadSkins</definition>
        <argsstring>(IGenLoad &amp;crd, int flags, ShaderMatVdata &amp;skin_smvd)</argsstring>
        <name>loadSkins</name>
        <param>
          <type>IGenLoad &amp;</type>
          <declname>crd</declname>
        </param>
        <param>
          <type>int</type>
          <declname>flags</declname>
        </param>
        <param>
          <type><ref refid="classShaderMatVdata" kindref="compound">ShaderMatVdata</ref> &amp;</type>
          <declname>skin_smvd</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dag_dynSceneRes.h" line="70" column="8" declfile="dag_dynSceneRes.h" declline="70" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="dag__dynSceneRes_8h_1a1eef625782a2194179e19b198d9386d8" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void render</definition>
        <argsstring>(DynamicRenderableSceneInstance &amp;, real opacity)</argsstring>
        <name>render</name>
        <param>
          <type><ref refid="classDynamicRenderableSceneInstance" kindref="compound">DynamicRenderableSceneInstance</ref> &amp;</type>
        </param>
        <param>
          <type>real</type>
          <declname>opacity</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dag_dynSceneRes.h" line="72" column="8" declfile="dag_dynSceneRes.h" declline="72" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="dag__dynSceneRes_8h_1a42178fb17c2e56c5721bb288d1b20b6b" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void renderTrans</definition>
        <argsstring>(DynamicRenderableSceneInstance &amp;, real opacity)</argsstring>
        <name>renderTrans</name>
        <param>
          <type><ref refid="classDynamicRenderableSceneInstance" kindref="compound">DynamicRenderableSceneInstance</ref> &amp;</type>
        </param>
        <param>
          <type>real</type>
          <declname>opacity</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dag_dynSceneRes.h" line="73" column="8" declfile="dag_dynSceneRes.h" declline="73" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="dag__dynSceneRes_8h_1a5eb2093dc040008acdabff060f0528e2" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void renderDistortion</definition>
        <argsstring>(DynamicRenderableSceneInstance &amp;)</argsstring>
        <name>renderDistortion</name>
        <param>
          <type><ref refid="classDynamicRenderableSceneInstance" kindref="compound">DynamicRenderableSceneInstance</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dag_dynSceneRes.h" line="74" column="8" declfile="dag_dynSceneRes.h" declline="74" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="dag__dynSceneRes_8h_1a9bb1f6a8c933316063c53c9b753557b8" prot="protected" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void gatherUsedTex</definition>
        <argsstring>(TextureIdSet &amp;tex_id_list) const</argsstring>
        <name>gatherUsedTex</name>
        <param>
          <type>TextureIdSet &amp;</type>
          <declname>tex_id_list</declname>
        </param>
        <briefdescription>
<para>gathers all textures referenced by materials </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dag_dynSceneRes.h" line="76" column="8" declfile="dag_dynSceneRes.h" declline="76" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="dag__dynSceneRes_8h_1a662e5fe1f822213025f04895d60c96de" prot="protected" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void gatherUsedMat</definition>
        <argsstring>(Tab&lt; ShaderMaterial * &gt; &amp;mat_list) const</argsstring>
        <name>gatherUsedMat</name>
        <param>
          <type>Tab&lt; <ref refid="classShaderMaterial" kindref="compound">ShaderMaterial</ref> * &gt; &amp;</type>
          <declname>mat_list</declname>
        </param>
        <briefdescription>
<para>gathers all materials referenced in elements </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dag_dynSceneRes.h" line="77" column="8" declfile="dag_dynSceneRes.h" declline="77" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="dag__dynSceneRes_8h_1a2ca9c44ce010ad3bd0dbfb6452350475" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool replaceTexture</definition>
        <argsstring>(TEXTUREID tex_id_old, TEXTUREID tex_id_new)</argsstring>
        <name>replaceTexture</name>
        <param>
          <type>TEXTUREID</type>
          <declname>tex_id_old</declname>
        </param>
        <param>
          <type>TEXTUREID</type>
          <declname>tex_id_new</declname>
        </param>
        <briefdescription>
<para>replaces texture id in materials used by mesh </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dag_dynSceneRes.h" line="79" column="8" declfile="dag_dynSceneRes.h" declline="79" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="dag__dynSceneRes_8h_1a47a095158f5a230a213eb65f20031687" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void duplicateMaterial</definition>
        <argsstring>(TEXTUREID tex_id, Tab&lt; ShaderMaterial * &gt; &amp;old_mat, Tab&lt; ShaderMaterial * &gt; &amp;new_mat)</argsstring>
        <name>duplicateMaterial</name>
        <param>
          <type>TEXTUREID</type>
          <declname>tex_id</declname>
        </param>
        <param>
          <type>Tab&lt; <ref refid="classShaderMaterial" kindref="compound">ShaderMaterial</ref> * &gt; &amp;</type>
          <declname>old_mat</declname>
        </param>
        <param>
          <type>Tab&lt; <ref refid="classShaderMaterial" kindref="compound">ShaderMaterial</ref> * &gt; &amp;</type>
          <declname>new_mat</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dag_dynSceneRes.h" line="273" column="8" bodyfile="dag_dynSceneRes.h" bodystart="273" bodyend="277" declfile="dag_dynSceneRes.h" declline="81" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="dag__dynSceneRes_8h_1acc2785c1f3120286a4a9348760c160fd" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void duplicateMat</definition>
        <argsstring>(ShaderMaterial *prev_m, Tab&lt; ShaderMaterial * &gt; &amp;old_mat, Tab&lt; ShaderMaterial * &gt; &amp;new_mat)</argsstring>
        <name>duplicateMat</name>
        <param>
          <type><ref refid="classShaderMaterial" kindref="compound">ShaderMaterial</ref> *</type>
          <declname>prev_m</declname>
        </param>
        <param>
          <type>Tab&lt; <ref refid="classShaderMaterial" kindref="compound">ShaderMaterial</ref> * &gt; &amp;</type>
          <declname>old_mat</declname>
        </param>
        <param>
          <type>Tab&lt; <ref refid="classShaderMaterial" kindref="compound">ShaderMaterial</ref> * &gt; &amp;</type>
          <declname>new_mat</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dag_dynSceneRes.h" line="278" column="8" bodyfile="dag_dynSceneRes.h" bodystart="278" bodyend="282" declfile="dag_dynSceneRes.h" declline="82" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="dag__dynSceneRes_8h_1a895913034d3d7ae0251660e3e188ba2a" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cloneMeshes</definition>
        <argsstring>()</argsstring>
        <name>cloneMeshes</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dag_dynSceneRes.h" line="84" column="8" declfile="dag_dynSceneRes.h" declline="84" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="dag__dynSceneRes_8h_1af29d43f001e20dbfa3f65d682cab46d9" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void updateShaderElems</definition>
        <argsstring>()</argsstring>
        <name>updateShaderElems</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dag_dynSceneRes.h" line="85" column="8" bodyfile="dag_rendInstRes.h" bodystart="191" bodyend="196" declfile="dag_dynSceneRes.h" declline="85" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="dag__dynSceneRes_8h_1a41c7b82bd3ab9d603f2cf788bb15c3ad" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void updateBindposes</definition>
        <argsstring>()</argsstring>
        <name>updateBindposes</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dag_dynSceneRes.h" line="87" column="8" declfile="dag_dynSceneRes.h" declline="87" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="dag__dynSceneRes_8h_1a6c3c230e4de34a12e3bae6a6fcae5457" prot="protected" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int getBindposeBufferIndex</definition>
        <argsstring>(int bone_idx) const</argsstring>
        <name>getBindposeBufferIndex</name>
        <param>
          <type>int</type>
          <declname>bone_idx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dag_dynSceneRes.h" line="88" column="7" declfile="dag_dynSceneRes.h" declline="88" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="dag__dynSceneRes_8h_1acd8f60c946fa6a7269a9136bc1b5a7ca" prot="protected" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const DynSceneResNameMapResource &amp;</type>
        <definition>const DynSceneResNameMapResource &amp; getNames</definition>
        <argsstring>() const</argsstring>
        <name>getNames</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dag_dynSceneRes.h" line="90" column="36" bodyfile="dag_dynSceneRes.h" bodystart="90" bodyend="90"/>
      </memberdef>
      <memberdef kind="function" id="dag__dynSceneRes_8h_1aa57398e3cad941513b971b4165ca7c75" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void getMeshes</definition>
        <argsstring>(Tab&lt; ShaderMeshResource * &gt; &amp;meshes, Tab&lt; int &gt; &amp;nodeIds, Tab&lt; BSphere3 &gt; *bsph)</argsstring>
        <name>getMeshes</name>
        <param>
          <type>Tab&lt; ShaderMeshResource * &gt; &amp;</type>
          <declname>meshes</declname>
        </param>
        <param>
          <type>Tab&lt; int &gt; &amp;</type>
          <declname>nodeIds</declname>
        </param>
        <param>
          <type>Tab&lt; BSphere3 &gt; *</type>
          <declname>bsph</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dag_dynSceneRes.h" line="92" column="8" declfile="dag_dynSceneRes.h" declline="92" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="dag__dynSceneRes_8h_1ad49c152b5c7b7f76a8e0814daa16b3ed" prot="protected" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename RigidsCB</type>
          </param>
          <param>
            <type>typename SkinsCB</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void getMeshes</definition>
        <argsstring>(RigidsCB &amp;&amp;rigids_cb, SkinsCB &amp;&amp;skins_cb) const</argsstring>
        <name>getMeshes</name>
        <param>
          <type>RigidsCB &amp;&amp;</type>
          <declname>rigids_cb</declname>
        </param>
        <param>
          <type>SkinsCB &amp;&amp;</type>
          <declname>skins_cb</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dag_dynSceneRes.h" line="95" column="8" bodyfile="dag_dynSceneRes.h" bodystart="95" bodyend="105"/>
      </memberdef>
      <memberdef kind="function" id="dag__dynSceneRes_8h_1a27404db284eab8316469b93c7922f193" prot="protected" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>dag::ConstSpan&lt; PatchablePtr&lt; ShaderSkinnedMeshResource &gt; &gt;</type>
        <definition>dag::ConstSpan&lt; PatchablePtr&lt; ShaderSkinnedMeshResource &gt; &gt; getSkinMeshes</definition>
        <argsstring>() const</argsstring>
        <name>getSkinMeshes</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dag_dynSceneRes.h" line="107" column="18" bodyfile="dag_dynSceneRes.h" bodystart="107" bodyend="107"/>
      </memberdef>
      <memberdef kind="function" id="dag__dynSceneRes_8h_1ab1028e11ab14e44878de36e7133e5db3" prot="protected" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>dag::ConstSpan&lt; PatchablePtr&lt; ShaderSkinnedMeshResource &gt; &gt;</type>
        <definition>dag::ConstSpan&lt; PatchablePtr&lt; ShaderSkinnedMeshResource &gt; &gt; getSkins</definition>
        <argsstring>() const</argsstring>
        <name>getSkins</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dag_dynSceneRes.h" line="108" column="18" bodyfile="dag_dynSceneRes.h" bodystart="108" bodyend="108"/>
      </memberdef>
      <memberdef kind="function" id="dag__dynSceneRes_8h_1ac392001eee5098121a8d773e92e3cdc3" prot="protected" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>dag::ConstSpan&lt; int &gt;</type>
        <definition>dag::ConstSpan&lt; int &gt; getSkinNodes</definition>
        <argsstring>() const</argsstring>
        <name>getSkinNodes</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dag_dynSceneRes.h" line="109" column="18" bodyfile="dag_dynSceneRes.h" bodystart="109" bodyend="109"/>
      </memberdef>
      <memberdef kind="function" id="dag__dynSceneRes_8h_1a89d457270e64493deead41759c59754a" prot="protected" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int getSkinsCount</definition>
        <argsstring>() const</argsstring>
        <name>getSkinsCount</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dag_dynSceneRes.h" line="110" column="7" bodyfile="dag_dynSceneRes.h" bodystart="110" bodyend="110"/>
      </memberdef>
      <memberdef kind="function" id="dag__dynSceneRes_8h_1a90b170bb72ca3ad5193f92d24b5c91a2" prot="protected" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void findRigidNodesWithMaterials</definition>
        <argsstring>(dag::ConstSpan&lt; const char * &gt; material_names, const eastl::fixed_function&lt; 2 *sizeof(void *), void(int)&gt; &amp;cb) const</argsstring>
        <name>findRigidNodesWithMaterials</name>
        <param>
          <type>dag::ConstSpan&lt; const char * &gt;</type>
          <declname>material_names</declname>
        </param>
        <param>
          <type>const eastl::fixed_function&lt; 2 *sizeof(void *), void(int)&gt; &amp;</type>
          <declname>cb</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dag_dynSceneRes.h" line="112" column="8" declfile="dag_dynSceneRes.h" declline="112" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="dag__dynSceneRes_8h_1a99e4417a2f55a6dcbdcc58a289759655" prot="protected" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void findSkinNodesWithMaterials</definition>
        <argsstring>(dag::ConstSpan&lt; const char * &gt; material_names, const eastl::fixed_function&lt; 2 *sizeof(void *), void(int)&gt; &amp;cb) const</argsstring>
        <name>findSkinNodesWithMaterials</name>
        <param>
          <type>dag::ConstSpan&lt; const char * &gt;</type>
          <declname>material_names</declname>
        </param>
        <param>
          <type>const eastl::fixed_function&lt; 2 *sizeof(void *), void(int)&gt; &amp;</type>
          <declname>cb</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dag_dynSceneRes.h" line="114" column="8" declfile="dag_dynSceneRes.h" declline="114" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="dag__dynSceneRes_8h_1a4dd59ec1118d407c7b25abac3790292a" prot="protected" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void findRigidNodesWithMaterials</definition>
        <argsstring>(dag::ConstSpan&lt; const char * &gt; material_names, const T &amp;cb) const</argsstring>
        <name>findRigidNodesWithMaterials</name>
        <param>
          <type>dag::ConstSpan&lt; const char * &gt;</type>
          <declname>material_names</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>cb</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dag_dynSceneRes.h" line="118" column="8" bodyfile="dag_dynSceneRes.h" bodystart="118" bodyend="132"/>
      </memberdef>
      <memberdef kind="function" id="dag__dynSceneRes_8h_1a990102e5cd28b5ea3a9f6352e11ff185" prot="protected" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>dag::ConstSpan&lt; <ref refid="structRigidObject" kindref="compound">RigidObject</ref> &gt;</type>
        <definition>dag::ConstSpan&lt; RigidObject &gt; getRigidsConst</definition>
        <argsstring>() const</argsstring>
        <name>getRigidsConst</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dag_dynSceneRes.h" line="135" column="18" bodyfile="dag_dynSceneRes.h" bodystart="135" bodyend="135"/>
      </memberdef>
      <memberdef kind="function" id="dag__dynSceneRes_8h_1aad4a3aba7726339f86198151a1df1c94" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>dag::Span&lt; <ref refid="structRigidObject" kindref="compound">RigidObject</ref> &gt;</type>
        <definition>dag::Span&lt; RigidObject &gt; getRigids</definition>
        <argsstring>()</argsstring>
        <name>getRigids</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dag_dynSceneRes.h" line="136" column="13" bodyfile="dag_dynSceneRes.h" bodystart="136" bodyend="136"/>
      </memberdef>
      <memberdef kind="function" id="dag__dynSceneRes_8h_1a142b6fbc1f8f4bc1639e8c04cfd31ccb" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool hasRigidMesh</definition>
        <argsstring>(int node_id)</argsstring>
        <name>hasRigidMesh</name>
        <param>
          <type>int</type>
          <declname>node_id</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dag_dynSceneRes.h" line="138" column="8" declfile="dag_dynSceneRes.h" declline="138" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="dag__dynSceneRes_8h_1a4d1f8f3e4eeeae692d0c84c673970e01" prot="protected" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>DynamicRenderableSceneResource *</type>
        <definition>RenderableInstanceLodsResource * clone</definition>
        <argsstring>() const</argsstring>
        <name>clone</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dag_dynSceneRes.h" line="140" column="34" declfile="dag_dynSceneRes.h" declline="140" declcolumn="34"/>
      </memberdef>
      <memberdef kind="function" id="dag__dynSceneRes_8h_1acca9ff7970d0562578ebaefcf13fe396" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool traceRayRigids</definition>
        <argsstring>(DynamicRenderableSceneInstance &amp;scene, const Point3 &amp;from, const Point3 &amp;dir, float &amp;currentT, Point3 &amp;normal, bool *trans=NULL, Point2 *uv=NULL)</argsstring>
        <name>traceRayRigids</name>
        <param>
          <type><ref refid="classDynamicRenderableSceneInstance" kindref="compound">DynamicRenderableSceneInstance</ref> &amp;</type>
          <declname>scene</declname>
        </param>
        <param>
          <type>const Point3 &amp;</type>
          <declname>from</declname>
        </param>
        <param>
          <type>const Point3 &amp;</type>
          <declname>dir</declname>
        </param>
        <param>
          <type>float &amp;</type>
          <declname>currentT</declname>
        </param>
        <param>
          <type>Point3 &amp;</type>
          <declname>normal</declname>
        </param>
        <param>
          <type>bool *</type>
          <declname>trans</declname>
          <defval>NULL</defval>
        </param>
        <param>
          <type>Point2 *</type>
          <declname>uv</declname>
          <defval>NULL</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dag_dynSceneRes.h" line="142" column="8" declfile="dag_dynSceneRes.h" declline="142" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="dag__dynSceneRes_8h_1a7cb6ef3034486289271d2463e30b074d" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void acquireTexRefs</definition>
        <argsstring>()</argsstring>
        <name>acquireTexRefs</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dag_dynSceneRes.h" line="259" column="8" bodyfile="dag_dynSceneRes.h" bodystart="259" bodyend="263" declfile="dag_dynSceneRes.h" declline="145" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="dag__dynSceneRes_8h_1a9b6957e173fde22b089c2504502fd545" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void releaseTexRefs</definition>
        <argsstring>()</argsstring>
        <name>releaseTexRefs</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dag_dynSceneRes.h" line="264" column="8" bodyfile="dag_dynSceneRes.h" bodystart="264" bodyend="268" declfile="dag_dynSceneRes.h" declline="146" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="dag__dynSceneRes_8h_1a5df4b73a8fd61ec95d0c8c562cd01295" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>BSphere3</type>
        <definition>BSphere3 getBoundingSphere</definition>
        <argsstring>(const TMatrix *__restrict ptr)</argsstring>
        <name>getBoundingSphere</name>
        <param>
          <type>const TMatrix *__restrict</type>
          <declname>ptr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dag_dynSceneRes.h" line="148" column="19" bodyfile="dag_dynSceneRes.h" bodystart="148" bodyend="159"/>
      </memberdef>
      <memberdef kind="function" id="dag__dynSceneRes_8h_1ac3fb79a28ba7e58aac99abe856f30631" prot="protected" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool matchBetterBoneIdxAndItmForPoint</definition>
        <argsstring>(const Point3 &amp;pos, int &amp;bone_idx, TMatrix &amp;bone_itm, DynamicRenderableSceneInstance &amp;) const</argsstring>
        <name>matchBetterBoneIdxAndItmForPoint</name>
        <param>
          <type>const Point3 &amp;</type>
          <declname>pos</declname>
        </param>
        <param>
          <type>int &amp;</type>
          <declname>bone_idx</declname>
        </param>
        <param>
          <type>TMatrix &amp;</type>
          <declname>bone_itm</declname>
        </param>
        <param>
          <type><ref refid="classDynamicRenderableSceneInstance" kindref="compound">DynamicRenderableSceneInstance</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dag_dynSceneRes.h" line="163" column="8" declfile="dag_dynSceneRes.h" declline="163" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="dag__dynSceneRes_8h_1a1a1afaccf702aaf70982f07a1f27150c" prot="protected" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int getBoneForNode</definition>
        <argsstring>(int node_idx) const</argsstring>
        <name>getBoneForNode</name>
        <param>
          <type>int</type>
          <declname>node_idx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dag_dynSceneRes.h" line="164" column="7" declfile="dag_dynSceneRes.h" declline="164" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="dag__dynSceneRes_8h_1a5e7c0bb921efa2d07f3fdd9536e0d457" prot="protected" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int getNodeForBone</definition>
        <argsstring>(uint32_t bone_idx) const</argsstring>
        <name>getNodeForBone</name>
        <param>
          <type>uint32_t</type>
          <declname>bone_idx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dag_dynSceneRes.h" line="165" column="7" declfile="dag_dynSceneRes.h" declline="165" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="dag__dynSceneRes_8h_1a5cd7734bb4c4698b654a1ee856e0d6d6" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>PATCHABLE_32BIT_PAD32</definition>
        <argsstring>(_resv)</argsstring>
        <name>PATCHABLE_32BIT_PAD32</name>
        <param>
          <type>_resv</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dag_dynSceneRes.h" line="180" column="3" declfile="dag_dynSceneRes.h" declline="180" declcolumn="3"/>
      </memberdef>
      <memberdef kind="function" id="dag__dynSceneRes_8h_1a5006dad47fa0539e24f4d6b6e3baa1b6" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>DynamicRenderableSceneResource</definition>
        <argsstring>()</argsstring>
        <name>DynamicRenderableSceneResource</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dag_dynSceneRes.h" line="189" column="3" bodyfile="dag_dynSceneRes.h" bodystart="189" bodyend="189"/>
      </memberdef>
      <memberdef kind="function" id="dag__dynSceneRes_8h_1a0d63656d4618927457b4afbf736f5796" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>DynamicRenderableSceneResource</definition>
        <argsstring>(const DynamicRenderableSceneResource &amp;)</argsstring>
        <name>DynamicRenderableSceneResource</name>
        <param>
          <type>const DynamicRenderableSceneResource &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dag_dynSceneRes.h" line="190" column="3" declfile="dag_dynSceneRes.h" declline="190" declcolumn="3"/>
      </memberdef>
      <memberdef kind="function" id="dag__dynSceneRes_8h_1a042ee87c0819d15e4dcc4b032129c83c" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>~DynamicRenderableSceneResource</definition>
        <argsstring>()</argsstring>
        <name>~DynamicRenderableSceneResource</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dag_dynSceneRes.h" line="191" column="3" bodyfile="dag_dynSceneRes.h" bodystart="191" bodyend="191"/>
      </memberdef>
      <memberdef kind="function" id="dag__dynSceneRes_8h_1a93ec91cf5930274edc193d1ba4ecd17b" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void patchAndLoadData</definition>
        <argsstring>(IGenLoad &amp;crd, int flags, int res_sz, ShaderMatVdata &amp;smvd)</argsstring>
        <name>patchAndLoadData</name>
        <param>
          <type>IGenLoad &amp;</type>
          <declname>crd</declname>
        </param>
        <param>
          <type>int</type>
          <declname>flags</declname>
        </param>
        <param>
          <type>int</type>
          <declname>res_sz</declname>
        </param>
        <param>
          <type><ref refid="classShaderMatVdata" kindref="compound">ShaderMatVdata</ref> &amp;</type>
          <declname>smvd</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dag_dynSceneRes.h" line="194" column="8" declfile="dag_dynSceneRes.h" declline="194" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="dag__dynSceneRes_8h_1abd4e5c937c4b98dd42745acb33815cdf" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void clearData</definition>
        <argsstring>()</argsstring>
        <name>clearData</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dag_dynSceneRes.h" line="197" column="8" declfile="dag_dynSceneRes.h" declline="197" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="dag__dynSceneRes_8h_1aa0421e83aafd4f529995b07a993c3bea" prot="protected" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structRigidObject" kindref="compound">RigidObject</ref> *</type>
        <definition>RigidObject * getRigidObject</definition>
        <argsstring>(int node_id) const</argsstring>
        <name>getRigidObject</name>
        <param>
          <type>int</type>
          <declname>node_id</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dag_dynSceneRes.h" line="199" column="15" declfile="dag_dynSceneRes.h" declline="199" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="dag__dynSceneRes_8h_1af4407932fd9b0022ef555b3c4d785b4d" prot="protected" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>decl_dclass_and_id(DynamicRenderableSceneLodsResource, DObject, 0xC03E9CC2) public DynamicRenderableSceneLodsResource *</type>
        <definition>static decl_dclass_and_id(DynamicRenderableSceneLodsResource, DObject, 0xC03E9CC2) public DynamicRenderableSceneLodsResource * makeStubRes</definition>
        <argsstring>()</argsstring>
        <name>makeStubRes</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dag_dynSceneRes.h" line="211" column="45" declfile="dag_dynSceneRes.h" declline="211" declcolumn="45"/>
      </memberdef>
      <memberdef kind="function" id="dag__dynSceneRes_8h_1a4eb37157109f0cf7aab7b76fc3b2af5c" prot="protected" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void gatherLodUsedMat</definition>
        <argsstring>(Tab&lt; ShaderMaterial * &gt; &amp;mat_list, int lod=0) const</argsstring>
        <name>gatherLodUsedMat</name>
        <param>
          <type>Tab&lt; <ref refid="classShaderMaterial" kindref="compound">ShaderMaterial</ref> * &gt; &amp;</type>
          <declname>mat_list</declname>
        </param>
        <param>
          <type>int</type>
          <declname>lod</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dag_dynSceneRes.h" line="215" column="8" declfile="dag_dynSceneRes.h" declline="215" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="dag__dynSceneRes_8h_1a2c361f7a96258f1ff183f302c4b9dbe0" prot="protected" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>float</type>
        <definition>float getTexScale</definition>
        <argsstring>(int lod) const</argsstring>
        <name>getTexScale</name>
        <param>
          <type>int</type>
          <declname>lod</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dag_dynSceneRes.h" line="219" column="16" bodyfile="dag_dynSceneRes.h" bodystart="219" bodyend="219"/>
      </memberdef>
      <memberdef kind="function" id="dag__dynSceneRes_8h_1ad4956204ad47794daa853a4f8ec5b01b" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>DynamicRenderableSceneResource *</type>
        <definition>DynamicRenderableSceneResource * getLod</definition>
        <argsstring>(real range)</argsstring>
        <name>getLod</name>
        <param>
          <type>real</type>
          <declname>range</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dag_dynSceneRes.h" line="221" column="34" declfile="dag_dynSceneRes.h" declline="221" declcolumn="34"/>
      </memberdef>
      <memberdef kind="function" id="dag__dynSceneRes_8h_1af4a955b3f89849713c28716c361a42c1" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>int getLodNo</definition>
        <argsstring>(real range)</argsstring>
        <name>getLodNo</name>
        <param>
          <type>real</type>
          <declname>range</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dag_dynSceneRes.h" line="222" column="14" bodyfile="dag_dynSceneRes.h" bodystart="222" bodyend="232"/>
      </memberdef>
      <memberdef kind="function" id="dag__dynSceneRes_8h_1a8b9fc1b0d124e860a99bd5c88959872c" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>int getLodNoForDistSq</definition>
        <argsstring>(real dist_sq)</argsstring>
        <name>getLodNoForDistSq</name>
        <param>
          <type>real</type>
          <declname>dist_sq</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dag_dynSceneRes.h" line="233" column="14" bodyfile="dag_dynSceneRes.h" bodystart="233" bodyend="243"/>
      </memberdef>
      <memberdef kind="function" id="dag__dynSceneRes_8h_1a458aa34fa0ad28309dd203a404d9aeff" prot="protected" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>float</type>
        <definition>float getMaxDist</definition>
        <argsstring>() const</argsstring>
        <name>getMaxDist</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dag_dynSceneRes.h" line="244" column="16" bodyfile="dag_dynSceneRes.h" bodystart="244" bodyend="244"/>
      </memberdef>
      <memberdef kind="function" id="dag__dynSceneRes_8h_1ad441ea224544de616aa87aff85f60209" prot="protected" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void closeBindposeBuffer</definition>
        <argsstring>()</argsstring>
        <name>closeBindposeBuffer</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dag_dynSceneRes.h" line="251" column="15" declfile="dag_dynSceneRes.h" declline="251" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="dag__dynSceneRes_8h_1a53e64cc5479cdd9f6bb17203da00d762" prot="protected" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>BBox3</type>
        <definition>BBox3 getLocalBoundingBox</definition>
        <argsstring>() const</argsstring>
        <name>getLocalBoundingBox</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dag_dynSceneRes.h" line="253" column="16" bodyfile="dag_dynSceneRes.h" bodystart="253" bodyend="253"/>
      </memberdef>
      <memberdef kind="function" id="dag__dynSceneRes_8h_1a9a7b9194d3595d4a5cb420f2e3dd0ff8" prot="protected" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool isBoundPackUsed</definition>
        <argsstring>() const</argsstring>
        <name>isBoundPackUsed</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dag_dynSceneRes.h" line="255" column="8" bodyfile="dag_dynSceneRes.h" bodystart="255" bodyend="258"/>
      </memberdef>
      <memberdef kind="function" id="dag__dynSceneRes_8h_1a70c513f05e307490478488592b1f6013" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void addInstanceRef</definition>
        <argsstring>()</argsstring>
        <name>addInstanceRef</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dag_dynSceneRes.h" line="270" column="8" declfile="dag_dynSceneRes.h" declline="270" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="dag__dynSceneRes_8h_1a49a7f8f9f3ad7f125a63247ecd6d87fb" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void delInstanceRef</definition>
        <argsstring>()</argsstring>
        <name>delInstanceRef</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dag_dynSceneRes.h" line="271" column="8" declfile="dag_dynSceneRes.h" declline="271" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="dag__dynSceneRes_8h_1a6e8bfc728af947a1a7cd8cc774447e77" prot="protected" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void finalizeDuplicateMaterial</definition>
        <argsstring>(dag::Span&lt; ShaderMaterial * &gt; new_mat)</argsstring>
        <name>finalizeDuplicateMaterial</name>
        <param>
          <type>dag::Span&lt; <ref refid="classShaderMaterial" kindref="compound">ShaderMaterial</ref> * &gt;</type>
          <declname>new_mat</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dag_dynSceneRes.h" line="283" column="15" declfile="dag_dynSceneRes.h" declline="283" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="dag__dynSceneRes_8h_1afbdd8f9846442ca3f6524b3b49c91555" prot="protected" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>static const char * getStaticClassName</definition>
        <argsstring>()</argsstring>
        <name>getStaticClassName</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dag_dynSceneRes.h" line="285" column="21" bodyfile="dag_dynSceneRes.h" bodystart="285" bodyend="285"/>
      </memberdef>
      <memberdef kind="function" id="dag__dynSceneRes_8h_1a487f2b5044e8451ca4aa8ceecc4d2be0" prot="protected" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t getBvhId</definition>
        <argsstring>() const</argsstring>
        <name>getBvhId</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dag_dynSceneRes.h" line="287" column="12" bodyfile="dag_dynSceneRes.h" bodystart="287" bodyend="287"/>
      </memberdef>
      <memberdef kind="function" id="dag__dynSceneRes_8h_1a52bbce5704f170b9e2f2ce933c9a4fd9" prot="protected" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void setBvhId</definition>
        <argsstring>(uint32_t id) const</argsstring>
        <name>setBvhId</name>
        <param>
          <type>uint32_t</type>
          <declname>id</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dag_dynSceneRes.h" line="288" column="8" bodyfile="dag_dynSceneRes.h" bodystart="288" bodyend="288"/>
      </memberdef>
      <memberdef kind="function" id="dag__dynSceneRes_8h_1a7653f305429bdd07b7fa6a8985feac9a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>dag::ConstSpan&lt; Ptr&lt; <ref refid="classShaderMatVdata" kindref="compound">ShaderMatVdata</ref> &gt; &gt;</type>
        <definition>dag::ConstSpan&lt; Ptr&lt; ShaderMatVdata &gt; &gt; getSmvd</definition>
        <argsstring>() const</argsstring>
        <name>getSmvd</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dag_dynSceneRes.h" line="305" column="18" bodyfile="dag_dynSceneRes.h" bodystart="305" bodyend="305"/>
      </memberdef>
      <memberdef kind="function" id="dag__dynSceneRes_8h_1ab731206716b6ebabd04f61a33bafdedb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void setResLoadingFlag</definition>
        <argsstring>(bool is_loading)</argsstring>
        <name>setResLoadingFlag</name>
        <param>
          <type>bool</type>
          <declname>is_loading</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dag_dynSceneRes.h" line="306" column="8" bodyfile="dag_dynSceneRes.h" bodystart="306" bodyend="312"/>
      </memberdef>
      <memberdef kind="function" id="dag__dynSceneRes_8h_1ac36ab71ac455672f42480dc998d4ecb0" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool getResLoadingFlag</definition>
        <argsstring>() const</argsstring>
        <name>getResLoadingFlag</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dag_dynSceneRes.h" line="313" column="8" bodyfile="dag_dynSceneRes.h" bodystart="313" bodyend="313"/>
      </memberdef>
      <memberdef kind="function" id="dag__dynSceneRes_8h_1a0c28a60ee23bdfc046523ef8b35005c0" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool areLodsSplit</definition>
        <argsstring>() const</argsstring>
        <name>areLodsSplit</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dag_dynSceneRes.h" line="314" column="8" bodyfile="dag_dynSceneRes.h" bodystart="314" bodyend="314"/>
      </memberdef>
      <memberdef kind="function" id="dag__dynSceneRes_8h_1a605f85bde9ee889da5432708238cc1b2" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>dag::ConstSpan&lt; <ref refid="structLod" kindref="compound">Lod</ref> &gt;</type>
        <definition>dag::Span&lt; Lod &gt; getUsedLods</definition>
        <argsstring>() const</argsstring>
        <name>getUsedLods</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dag_dynSceneRes.h" line="315" column="18" bodyfile="dag_dynSceneRes.h" bodystart="315" bodyend="319"/>
      </memberdef>
      <memberdef kind="function" id="dag__dynSceneRes_8h_1a75232ad209a027768b0c2617dbee9fe5" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const DynamicRenderableSceneLodsResource *</type>
        <definition>const RenderableInstanceLodsResource * getFirstOriginal</definition>
        <argsstring>() const</argsstring>
        <name>getFirstOriginal</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dag_dynSceneRes.h" line="325" column="44" bodyfile="dag_dynSceneRes.h" bodystart="325" bodyend="325"/>
      </memberdef>
      <memberdef kind="function" id="dag__dynSceneRes_8h_1af29d69bba815218ef5e750ca2ef8cabf" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const DynamicRenderableSceneLodsResource *</type>
        <definition>const RenderableInstanceLodsResource * getNextClone</definition>
        <argsstring>() const</argsstring>
        <name>getNextClone</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dag_dynSceneRes.h" line="326" column="44" bodyfile="dag_dynSceneRes.h" bodystart="326" bodyend="326"/>
      </memberdef>
      <memberdef kind="function" id="dag__dynSceneRes_8h_1a0ba274acbd1b433a18b6309b40bbcbac" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void lockClonesList</definition>
        <argsstring>()</argsstring>
        <name>lockClonesList</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dag_dynSceneRes.h" line="329" column="15" declfile="dag_dynSceneRes.h" declline="329" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="dag__dynSceneRes_8h_1a74aa64f9d17986a535e2fd999eebc281" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void unlockClonesList</definition>
        <argsstring>()</argsstring>
        <name>unlockClonesList</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dag_dynSceneRes.h" line="330" column="15" declfile="dag_dynSceneRes.h" declline="330" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="dag__dynSceneRes_8h_1a5bee9129915a4fafb2f1433506395321" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned</type>
        <definition>unsigned getQlReqLod</definition>
        <argsstring>() const</argsstring>
        <name>getQlReqLod</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dag_dynSceneRes.h" line="334" column="12" bodyfile="dag_dynSceneRes.h" bodystart="334" bodyend="334"/>
      </memberdef>
      <memberdef kind="function" id="dag__dynSceneRes_8h_1a4c6234607e5246ec4ad3c5dc31f137cc" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned</type>
        <definition>unsigned getQlReqLodEff</definition>
        <argsstring>() const</argsstring>
        <name>getQlReqLodEff</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dag_dynSceneRes.h" line="335" column="12" bodyfile="dag_dynSceneRes.h" bodystart="335" bodyend="340"/>
      </memberdef>
      <memberdef kind="function" id="dag__dynSceneRes_8h_1a5554d43eeca3a1de50ccf6639e8fe432" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int getQlReqLFU</definition>
        <argsstring>() const</argsstring>
        <name>getQlReqLFU</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dag_dynSceneRes.h" line="341" column="7" bodyfile="dag_dynSceneRes.h" bodystart="341" bodyend="341"/>
      </memberdef>
      <memberdef kind="function" id="dag__dynSceneRes_8h_1a8b3caab0ccb93eaf47da24165986043c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void updateReqLod</definition>
        <argsstring>(unsigned lod)</argsstring>
        <name>updateReqLod</name>
        <param>
          <type>unsigned</type>
          <declname>lod</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dag_dynSceneRes.h" line="342" column="8" bodyfile="dag_dynSceneRes.h" bodystart="342" bodyend="371"/>
      </memberdef>
      <memberdef kind="function" id="dag__dynSceneRes_8h_1a09311dd91cd6355d6050713fca18de31" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int getQlBestLod</definition>
        <argsstring>() const</argsstring>
        <name>getQlBestLod</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dag_dynSceneRes.h" line="372" column="7" bodyfile="dag_dynSceneRes.h" bodystart="372" bodyend="372"/>
      </memberdef>
      <memberdef kind="function" id="dag__dynSceneRes_8h_1a573c63d8065763d62b2e42353bceaebf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void applyQlBestLod</definition>
        <argsstring>(int lod0)</argsstring>
        <name>applyQlBestLod</name>
        <param>
          <type>int</type>
          <declname>lod0</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dag_dynSceneRes.h" line="373" column="8" bodyfile="dag_dynSceneRes.h" bodystart="373" bodyend="379"/>
      </memberdef>
      <memberdef kind="function" id="dag__dynSceneRes_8h_1a62444a9ee585d25d995e7319e2cb03ff" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int getInstanceRefCount</definition>
        <argsstring>() const</argsstring>
        <name>getInstanceRefCount</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dag_dynSceneRes.h" line="380" column="7" bodyfile="dag_dynSceneRes.h" bodystart="380" bodyend="380"/>
      </memberdef>
      <memberdef kind="function" id="dag__dynSceneRes_8h_1a2026779f0b4b28911acadb04f5a54795" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned</type>
        <definition>unsigned incQlReloadCnt</definition>
        <argsstring>()</argsstring>
        <name>incQlReloadCnt</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dag_dynSceneRes.h" line="382" column="12" bodyfile="dag_dynSceneRes.h" bodystart="382" bodyend="382"/>
      </memberdef>
      <memberdef kind="function" id="dag__dynSceneRes_8h_1a41c3f00c669d0b14d07016b8b0264ec8" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned</type>
        <definition>unsigned getQlReloadCnt</definition>
        <argsstring>() const</argsstring>
        <name>getQlReloadCnt</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dag_dynSceneRes.h" line="383" column="12" bodyfile="dag_dynSceneRes.h" bodystart="383" bodyend="383"/>
      </memberdef>
      <memberdef kind="function" id="dag__dynSceneRes_8h_1a913ac072a502c948a4bde60fb5dacdf7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned</type>
        <definition>unsigned incQlDiscardCnt</definition>
        <argsstring>()</argsstring>
        <name>incQlDiscardCnt</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dag_dynSceneRes.h" line="384" column="12" bodyfile="dag_dynSceneRes.h" bodystart="384" bodyend="384"/>
      </memberdef>
      <memberdef kind="function" id="dag__dynSceneRes_8h_1a8c9e894ddc72776d095565a0ab8a440d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned</type>
        <definition>unsigned getQlDiscardCnt</definition>
        <argsstring>() const</argsstring>
        <name>getQlDiscardCnt</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dag_dynSceneRes.h" line="385" column="12" bodyfile="dag_dynSceneRes.h" bodystart="385" bodyend="385"/>
      </memberdef>
      <memberdef kind="function" id="dag__dynSceneRes_8h_1ad0ce88733acc9172ba3318c8cd99cbf9" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void setQlReqLod</definition>
        <argsstring>(uint16_t new_lod)</argsstring>
        <name>setQlReqLod</name>
        <param>
          <type>uint16_t</type>
          <declname>new_lod</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dag_dynSceneRes.h" line="388" column="8" bodyfile="dag_dynSceneRes.h" bodystart="388" bodyend="388"/>
      </memberdef>
      <memberdef kind="function" id="dag__dynSceneRes_8h_1afccc9f1f2e72f67a1a0e2c40d1bc2cb2" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void setQlReqLFU</definition>
        <argsstring>(int frame_no)</argsstring>
        <name>setQlReqLFU</name>
        <param>
          <type>int</type>
          <declname>frame_no</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dag_dynSceneRes.h" line="389" column="8" bodyfile="dag_dynSceneRes.h" bodystart="389" bodyend="389"/>
      </memberdef>
      <memberdef kind="function" id="dag__dynSceneRes_8h_1a9c73fe54dbd63f4e6599c025a03b6410" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>PATCHABLE_32BIT_PAD32</definition>
        <argsstring>(_resv[3])</argsstring>
        <name>PATCHABLE_32BIT_PAD32</name>
        <param>
          <type>_resv</type>
          <array>[3]</array>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dag_dynSceneRes.h" line="420" column="3" declfile="dag_dynSceneRes.h" declline="420" declcolumn="3"/>
      </memberdef>
      <memberdef kind="function" id="dag__dynSceneRes_8h_1ad7cfd3516920a5f19a2476a9dd442e31" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>PATCHABLE_64BIT_PAD32</definition>
        <argsstring>(_resv[2])</argsstring>
        <name>PATCHABLE_64BIT_PAD32</name>
        <param>
          <type>_resv</type>
          <array>[2]</array>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dag_dynSceneRes.h" line="421" column="3" declfile="dag_dynSceneRes.h" declline="421" declcolumn="3"/>
      </memberdef>
      <memberdef kind="function" id="dag__dynSceneRes_8h_1a6e5f982341006692887c2d22c352b823" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>DynamicRenderableSceneLodsResource</definition>
        <argsstring>()</argsstring>
        <name>DynamicRenderableSceneLodsResource</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dag_dynSceneRes.h" line="429" column="3" bodyfile="dag_dynSceneRes.h" bodystart="429" bodyend="433"/>
      </memberdef>
      <memberdef kind="function" id="dag__dynSceneRes_8h_1a447c3d4cd6effdfa42c8f4d8c70605a0" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>DynamicRenderableSceneLodsResource</definition>
        <argsstring>(const DynamicRenderableSceneLodsResource &amp;)</argsstring>
        <name>DynamicRenderableSceneLodsResource</name>
        <param>
          <type>const DynamicRenderableSceneLodsResource &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dag_dynSceneRes.h" line="434" column="3" declfile="dag_dynSceneRes.h" declline="434" declcolumn="3"/>
      </memberdef>
      <memberdef kind="function" id="dag__dynSceneRes_8h_1ae38aa532d7a2aff6590339136be8f534" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>~DynamicRenderableSceneLodsResource</definition>
        <argsstring>()</argsstring>
        <name>~DynamicRenderableSceneLodsResource</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dag_dynSceneRes.h" line="435" column="3" bodyfile="dag_dynSceneRes.h" bodystart="435" bodyend="439"/>
      </memberdef>
      <memberdef kind="function" id="dag__dynSceneRes_8h_1aecf3bcfa6443ec2768646a75817bb18c" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void addToCloneList</definition>
        <argsstring>(const DynamicRenderableSceneLodsResource &amp;from)</argsstring>
        <name>addToCloneList</name>
        <param>
          <type>const DynamicRenderableSceneLodsResource &amp;</type>
          <declname>from</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dag_dynSceneRes.h" line="440" column="8" declfile="dag_dynSceneRes.h" declline="440" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="dag__dynSceneRes_8h_1ad7e709c1d55ac77779d35bc58f516c51" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int patchAndLoadData</definition>
        <argsstring>(IGenLoad &amp;crd, int flags, int res_sz)</argsstring>
        <name>patchAndLoadData</name>
        <param>
          <type>IGenLoad &amp;</type>
          <declname>crd</declname>
        </param>
        <param>
          <type>int</type>
          <declname>flags</declname>
        </param>
        <param>
          <type>int</type>
          <declname>res_sz</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dag_dynSceneRes.h" line="443" column="7" declfile="dag_dynSceneRes.h" declline="443" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="dag__dynSceneRes_8h_1a7a043917230feb7d3de7699fb36be5e9" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void loadSkins</definition>
        <argsstring>(IGenLoad &amp;crd, int flags, const DataBlock *desc=nullptr)</argsstring>
        <name>loadSkins</name>
        <param>
          <type>IGenLoad &amp;</type>
          <declname>crd</declname>
        </param>
        <param>
          <type>int</type>
          <declname>flags</declname>
        </param>
        <param>
          <type>const DataBlock *</type>
          <declname>desc</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dag_dynSceneRes.h" line="445" column="8" declfile="dag_dynSceneRes.h" declline="445" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="dag__dynSceneRes_8h_1a625ce929218f054bf94f0ab4adec2fd5" prot="protected" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t getResSize</definition>
        <argsstring>() const</argsstring>
        <name>getResSize</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dag_dynSceneRes.h" line="450" column="12" bodyfile="dag_dynSceneRes.h" bodystart="450" bodyend="450"/>
      </memberdef>
      <memberdef kind="function" id="dag__dynSceneRes_8h_1ab30991eff2598ebb8eeae8c3d570112a" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void setResSizeNonTS</definition>
        <argsstring>(uint32_t res_size)</argsstring>
        <name>setResSizeNonTS</name>
        <param>
          <type>uint32_t</type>
          <declname>res_size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dag_dynSceneRes.h" line="452" column="8" bodyfile="dag_dynSceneRes.h" bodystart="452" bodyend="455"/>
      </memberdef>
      <memberdef kind="function" id="dag__dynSceneRes_8h_1a6fce411b505c158bc7979b545b65f9ed" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void setBoundPackUsed</definition>
        <argsstring>(bool used)</argsstring>
        <name>setBoundPackUsed</name>
        <param>
          <type>bool</type>
          <declname>used</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dag_dynSceneRes.h" line="457" column="8" bodyfile="dag_dynSceneRes.h" bodystart="457" bodyend="463"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Dagor<sp/>Engine<sp/>6.5</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Copyright<sp/>(C)<sp/>Gaijin<sp/>Games<sp/>KFT.<sp/><sp/>All<sp/>rights<sp/>reserved.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>once</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;shaders/dag_shadersRes.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;shaders/dag_IRenderWrapperControl.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;generic/dag_smallTab.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;math/dag_TMatrix.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;math/dag_bounds3.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;math/dag_vecMathCompatibility.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;util/dag_roNameMap.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;startup/dag_globalSettings.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;EASTL/unique_ptr.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;EASTL/optional.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;EASTL/fixed_function.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;EASTL/array.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;shaders/dag_bindposeBufferManager.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">Sbuffer;</highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">DataBlock;</highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">shglobvars</highlight></codeline>
<codeline lineno="26"><highlight class="normal">{</highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dynamic_pos_unpack_reg;<sp/></highlight><highlight class="comment">//<sp/>readonly</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal">};</highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classDynamicRenderableSceneInstance" kindref="compound">DynamicRenderableSceneInstance</ref>;</highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>void<sp/>(*on_dynsceneres_beforedrawmeshes_cb)(<ref refid="classDynamicRenderableSceneInstance" kindref="compound">DynamicRenderableSceneInstance</ref><sp/>&amp;inst,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>node_id);</highlight></codeline>
<codeline lineno="35"><highlight class="normal">on_dynsceneres_beforedrawmeshes_cb<sp/>set_dynsceneres_beforedrawmeshes_cb(on_dynsceneres_beforedrawmeshes_cb<sp/>cb);</highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Name<sp/>maps<sp/>for<sp/>dynamic<sp/>renderable<sp/>scene</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal">decl_dclass_and_id(DynSceneResNameMapResource,<sp/>DObject,<sp/>0x5DEEEC3F)</highlight></codeline>
<codeline lineno="40"><highlight class="normal">public:</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/>static<sp/>DynSceneResNameMapResource<sp/>*loadResource(IGenLoad<sp/>&amp;<sp/>crd,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>res_sz<sp/>=<sp/>-1);</highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal">public:</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/>RoNameMapEx<sp/>node;</highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal">protected:</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>ctor/dtor</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/>DynSceneResNameMapResource()<sp/>{}</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/>DynSceneResNameMapResource(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>DynSceneResNameMapResource<sp/>&amp;from);</highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dumpStartOfs()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>offsetof(DynSceneResNameMapResource,<sp/>node);<sp/>}</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*dumpStartPtr()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>&amp;node;<sp/>}</highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>patches<sp/>data<sp/>after<sp/>resource<sp/>dump<sp/>loading</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>patchData();</highlight></codeline>
<codeline lineno="57"><highlight class="normal">end_dclass_decl();</highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Dynamic<sp/>renderable<sp/>scene<sp/>contains<sp/>dynamic<sp/>rigid<sp/>and<sp/>skinned<sp/>objects.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Object<sp/>positions<sp/>are<sp/>controlled<sp/>by<sp/>key<sp/>nodes.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal">decl_dclass_and_id(DynamicRenderableSceneResource,<sp/>DObject,<sp/>0x7AE6FD70)</highlight></codeline>
<codeline lineno="63"><highlight class="normal">public:</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/>DAG_DECLARE_NEW(midmem)</highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/>static<sp/>DynamicRenderableSceneResource<sp/>*loadResource(IGenLoad<sp/>&amp;<sp/>crd,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>srl_flags);</highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/>static<sp/>DynamicRenderableSceneResource<sp/>*loadResourceInternal(IGenLoad<sp/>&amp;<sp/>crd,<sp/>DynSceneResNameMapResource<sp/>*<sp/>nm,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>srl_flags,</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classShaderMatVdata" kindref="compound">ShaderMatVdata</ref><sp/>&amp;smvd,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>res_sz<sp/>=<sp/>-1);</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>loadSkins(IGenLoad<sp/>&amp;<sp/>crd,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>flags,<sp/><ref refid="classShaderMatVdata" kindref="compound">ShaderMatVdata</ref><sp/>&amp;skin_smvd);</highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>render(<ref refid="classDynamicRenderableSceneInstance" kindref="compound">DynamicRenderableSceneInstance</ref><sp/>&amp;,<sp/>real<sp/>opacity);</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>renderTrans(<ref refid="classDynamicRenderableSceneInstance" kindref="compound">DynamicRenderableSceneInstance</ref><sp/>&amp;,<sp/>real<sp/>opacity);</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>renderDistortion(<ref refid="classDynamicRenderableSceneInstance" kindref="compound">DynamicRenderableSceneInstance</ref><sp/>&amp;);</highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>gatherUsedTex(TextureIdSet<sp/>&amp;<sp/>tex_id_list)<sp/>const;</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>gatherUsedMat(Tab&lt;<ref refid="classShaderMaterial" kindref="compound">ShaderMaterial</ref><sp/>*&gt;<sp/>&amp;<sp/>mat_list)<sp/>const;</highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>replaceTexture(TEXTUREID<sp/>tex_id_old,<sp/>TEXTUREID<sp/>tex_id_new);</highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>duplicateMaterial(TEXTUREID<sp/>tex_id,<sp/>Tab&lt;<ref refid="classShaderMaterial" kindref="compound">ShaderMaterial</ref><sp/>*&gt;<sp/>&amp;<sp/>old_mat,<sp/>Tab&lt;<ref refid="classShaderMaterial" kindref="compound">ShaderMaterial</ref><sp/>*&gt;<sp/>&amp;<sp/>new_mat);</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>duplicateMat(<ref refid="classShaderMaterial" kindref="compound">ShaderMaterial</ref><sp/>*<sp/>prev_m,<sp/>Tab&lt;<ref refid="classShaderMaterial" kindref="compound">ShaderMaterial</ref><sp/>*&gt;<sp/>&amp;<sp/>old_mat,<sp/>Tab&lt;<ref refid="classShaderMaterial" kindref="compound">ShaderMaterial</ref><sp/>*&gt;<sp/>&amp;<sp/>new_mat);</highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>cloneMeshes();</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>updateShaderElems();</highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>updateBindposes();</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>getBindposeBufferIndex(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>bone_idx)<sp/>const;</highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/>const<sp/>DynSceneResNameMapResource<sp/>&amp;getNames()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*names;<sp/>}</highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>getMeshes(Tab&lt;ShaderMeshResource<sp/>*&gt;<sp/>&amp;<sp/>meshes,<sp/>Tab&lt;int&gt;<sp/>&amp;<sp/>nodeIds,<sp/>Tab&lt;BSphere3&gt;<sp/>*<sp/>bsph);</highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Rig</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">sCB,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>SkinsCB&gt;</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>getMeshes(RigidsCB<sp/>&amp;&amp;<sp/>rigids_cb,<sp/>SkinsCB<sp/>&amp;&amp;<sp/>skins_cb)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="96"><highlight class="keyword"><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>rigidNo<sp/>=<sp/>0;<sp/>rigidNo<sp/>&lt;<sp/>rigids.size();<sp/>rigidNo++)</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structRigidObject" kindref="compound">RigidObject</ref><sp/>&amp;rigid<sp/>=<sp/>rigids[rigidNo];</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>rigids_cb(rigid.mesh-&gt;getMesh(),<sp/>rigid.nodeId,<sp/>rigid.sph_r,<sp/>rigidNo);</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>skinNo<sp/>=<sp/>0;<sp/>skinNo<sp/>&lt;<sp/>skins.size();<sp/>skinNo++)</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>skins_cb(skins[skinNo]-&gt;getMesh(),<sp/>skinNodes[skinNo],<sp/>skinNo);</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="106"><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/>dag::ConstSpan&lt;PatchablePtr&lt;ShaderSkinnedMeshResource&gt;&gt;<sp/>getSkinMeshes()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>skins;<sp/>}</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/>dag::ConstSpan&lt;PatchablePtr&lt;ShaderSkinnedMeshResource&gt;&gt;<sp/>getSkins()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>skins;<sp/>}</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/>dag::ConstSpan&lt;int&gt;<sp/>getSkinNodes()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>skinNodes;<sp/>}</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>getSkinsCount()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>skins.size();<sp/>}</highlight></codeline>
<codeline lineno="111"><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>findRigidNodesWithMaterials(dag::ConstSpan&lt;const<sp/>char<sp/>*&gt;<sp/>material_names,</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>eastl::fixed_function&lt;2<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*),<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)&gt;<sp/>&amp;cb)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>findSkinNodesWithMaterials(dag::ConstSpan&lt;const<sp/>char<sp/>*&gt;<sp/>material_names,</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>eastl::fixed_function&lt;2<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*),<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)&gt;<sp/>&amp;cb)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="116"><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>findRigidNodesWithMaterials(dag::ConstSpan&lt;const<sp/>char<sp/>*&gt;<sp/>material_names,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T<sp/>&amp;cb)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="119"><highlight class="keyword"><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>checkRigid<sp/>=<sp/>[&amp;](</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structRigidObject" kindref="compound">RigidObject</ref><sp/>&amp;ro)<sp/>{</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;elem<sp/>:<sp/>ro.mesh-&gt;getMesh()-&gt;getAllElems())</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>(auto<sp/>name<sp/>:<sp/>material_names)</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(strcmp(elem.mat-&gt;getShaderClassName(),<sp/>name)<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cb(ro.nodeId);</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="129"><highlight class="normal"></highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;ro<sp/>:<sp/>rigids)</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>checkRigid(ro);</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="133"><highlight class="normal"></highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structRigidObject" kindref="compound">RigidObject</ref>;</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/>dag::ConstSpan&lt;RigidObject&gt;<sp/>getRigidsConst()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>rigids;<sp/>}</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/>dag::Span&lt;RigidObject&gt;<sp/>getRigids()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>make_span(rigids);<sp/>}</highlight></codeline>
<codeline lineno="137"><highlight class="normal"></highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>hasRigidMesh(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>node_id);</highlight></codeline>
<codeline lineno="139"><highlight class="normal"></highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/>DynamicRenderableSceneResource<sp/>*clone()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="141"><highlight class="normal"></highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>traceRayRigids(<ref refid="classDynamicRenderableSceneInstance" kindref="compound">DynamicRenderableSceneInstance</ref><sp/>&amp;<sp/>scene,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Point3<sp/>&amp;from,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Point3<sp/>&amp;dir,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>&amp;currentT,<sp/>Point3<sp/>&amp;normal,</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>*trans<sp/>=<sp/>NULL,<sp/>Point2<sp/>*uv<sp/>=<sp/>NULL);</highlight></codeline>
<codeline lineno="144"><highlight class="normal"></highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>acquireTexRefs();</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>releaseTexRefs();</highlight></codeline>
<codeline lineno="147"><highlight class="normal"></highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>BSphere3<sp/>getBoundingSphere(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TMatrix<sp/>*__restrict<sp/>ptr)</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/>BSphere3<sp/>ret;</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>rigids.size();<sp/>i++)</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TMatrix<sp/>&amp;tm<sp/>=<sp/>ptr[rigids[i].nodeId];</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>scale<sp/>=<sp/>sqrt(max(tm.getcol(0).lengthSq(),<sp/>max(tm.getcol(1).lengthSq(),<sp/>tm.getcol(2).lengthSq())));</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>BSphere3<sp/>sph(rigids[i].sph_c<sp/>*<sp/>tm,<sp/>rigids[i].sph_r<sp/>*<sp/>scale);</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ret<sp/>+=<sp/>sph;</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ret;</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="160"><highlight class="normal"></highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dumpStartOfs()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>offsetof(DynamicRenderableSceneResource,<sp/>rigids);<sp/>}</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*dumpStartPtr()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>&amp;rigids;<sp/>}</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>matchBetterBoneIdxAndItmForPoint(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Point3<sp/>&amp;pos,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>&amp;bone_idx,<sp/>TMatrix<sp/>&amp;bone_itm,<sp/><ref refid="classDynamicRenderableSceneInstance" kindref="compound">DynamicRenderableSceneInstance</ref><sp/>&amp;)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>getBoneForNode(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>node_idx)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>getNodeForBone(uint32_t<sp/>bone_idx)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="166"><highlight class="normal"></highlight></codeline>
<codeline lineno="167" refid="structRigidObject" refkind="compound"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structRigidObject" kindref="compound">RigidObject</ref></highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/>PatchablePtr&lt;ShaderMeshResource&gt;<sp/>mesh;</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/>Point3<sp/>sph_c;<sp/></highlight><highlight class="comment">//&lt;<sp/>in<sp/>local<sp/>coords:<sp/>bounding<sp/>sphere<sp/>center</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/>real<sp/>sph_r;<sp/><sp/><sp/></highlight><highlight class="comment">//&lt;<sp/>in<sp/>local<sp/>coords:<sp/>bounding<sp/>sphere<sp/>radius<sp/>(can<sp/>be<sp/>scaled,<sp/>but<sp/>only<sp/>x<sp/>scale<sp/>is<sp/>used)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/>int32_t<sp/>nodeId;</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>__resv;</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="175"><highlight class="normal"></highlight></codeline>
<codeline lineno="176"><highlight class="normal"></highlight><highlight class="keyword">protected</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/>Ptr&lt;DynSceneResNameMapResource&gt;<sp/>names;</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>resSize,<sp/>_resv0<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="179"><highlight class="normal"></highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/>PATCHABLE_32BIT_PAD32(_resv);</highlight></codeline>
<codeline lineno="181"><highlight class="normal"></highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/>Tab&lt;int&gt;<sp/>skinNodes;</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/>PtrTab&lt;BindPoseElem&gt;<sp/>bindPoseElemPtrArr;</highlight></codeline>
<codeline lineno="184"><highlight class="normal"></highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/>PatchableTab&lt;RigidObject&gt;<sp/>rigids;</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/>PatchableTab&lt;PatchablePtr&lt;ShaderSkinnedMeshResource&gt;&gt;<sp/>skins;</highlight></codeline>
<codeline lineno="187"><highlight class="normal"></highlight></codeline>
<codeline lineno="188"><highlight class="normal"></highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/>DynamicRenderableSceneResource()<sp/>{}<sp/></highlight><highlight class="comment">//-V730</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/>DynamicRenderableSceneResource(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>DynamicRenderableSceneResource<sp/>&amp;);</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/>~DynamicRenderableSceneResource()<sp/>{<sp/>clearData();<sp/>}</highlight></codeline>
<codeline lineno="192"><highlight class="normal"></highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>patches<sp/>data<sp/>after<sp/>resource<sp/>dump<sp/>loading</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>patchAndLoadData(IGenLoad<sp/>&amp;<sp/>crd,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>flags,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>res_sz,<sp/><ref refid="classShaderMatVdata" kindref="compound">ShaderMatVdata</ref><sp/>&amp;smvd);</highlight></codeline>
<codeline lineno="195"><highlight class="normal"></highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>explicit<sp/>destructor</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>clearData();</highlight></codeline>
<codeline lineno="198"><highlight class="normal"></highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><ref refid="structRigidObject" kindref="compound">RigidObject</ref><sp/>*getRigidObject(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>node_id)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="200"><highlight class="normal"></highlight></codeline>
<codeline lineno="201"><highlight class="normal">end_dclass_decl();</highlight></codeline>
<codeline lineno="202"><highlight class="normal"></highlight></codeline>
<codeline lineno="203"><highlight class="normal"></highlight></codeline>
<codeline lineno="204"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Container<sp/>for<sp/>LODs,<sp/>each<sp/>LOD<sp/>is<sp/>DynamicRenderableSceneResource.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="205"><highlight class="normal">decl_dclass_and_id(DynamicRenderableSceneLodsResource,<sp/>DObject,<sp/>0xC03E9CC2)</highlight></codeline>
<codeline lineno="206"><highlight class="normal">public:</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/>DAG_DECLARE_NEW(midmem)</highlight></codeline>
<codeline lineno="208"><highlight class="normal"></highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/>static<sp/>DynamicRenderableSceneLodsResource<sp/>*loadResource(IGenLoad<sp/>&amp;<sp/>crd,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>srl_flags,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>res_sz<sp/>=<sp/>-1,</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/>const<sp/>DataBlock<sp/>*desc<sp/>=<sp/></highlight><highlight class="keywordtype">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/>static<sp/>DynamicRenderableSceneLodsResource<sp/>*makeStubRes();</highlight></codeline>
<codeline lineno="212"><highlight class="normal"></highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>gatherUsedTex(TextureIdSet<sp/>&amp;<sp/>tex_id_list)<sp/>const;</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>gatherUsedMat(Tab&lt;<ref refid="classShaderMaterial" kindref="compound">ShaderMaterial</ref><sp/>*&gt;<sp/>&amp;<sp/>mat_list)<sp/>const;</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>gatherLodUsedMat(Tab&lt;<ref refid="classShaderMaterial" kindref="compound">ShaderMaterial</ref><sp/>*&gt;<sp/>&amp;<sp/>mat_list,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>lod<sp/>=<sp/>0)<sp/>const;</highlight></codeline>
<codeline lineno="216"><highlight class="normal"></highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>replaceTexture(TEXTUREID<sp/>tex_id_old,<sp/>TEXTUREID<sp/>tex_id_new);</highlight></codeline>
<codeline lineno="218"><highlight class="normal"></highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/>inline<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>getTexScale(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>lod)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>lods[lod].texScale;<sp/>}</highlight></codeline>
<codeline lineno="220"><highlight class="normal"></highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/>DynamicRenderableSceneResource<sp/>*getLod(real<sp/>range);</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>getLodNo(real<sp/>range)</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>lods.size();<sp/>++i)</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(range<sp/>&lt;=<sp/>lods[i].range)</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>updateReqLod(i);</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>qlBestLod<sp/>=<sp/>getQlBestLod();</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>i<sp/>&gt;<sp/>qlBestLod<sp/>?<sp/>i<sp/>:<sp/>qlBestLod;</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>getLodNoForDistSq(real<sp/>dist_sq)</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>lods.size();<sp/>++i)</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(dist_sq<sp/>&lt;=<sp/>sqr(lods[i].range))</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>updateReqLod(i);</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>qlBestLod<sp/>=<sp/>getQlBestLod();</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>i<sp/>&gt;<sp/>qlBestLod<sp/>?<sp/>i<sp/>:<sp/>qlBestLod;</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>getMaxDist()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>lods.size()<sp/>?<sp/>lods.back().range<sp/>:<sp/>0;<sp/>}</highlight></codeline>
<codeline lineno="245"><highlight class="normal"></highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>DynSceneResNameMapResource<sp/>&amp;getNames()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*names;<sp/>}</highlight></codeline>
<codeline lineno="247"><highlight class="normal"></highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/>DynamicRenderableSceneLodsResource<sp/>*clone()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>updateShaderElems();</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>updateBindposes();</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>closeBindposeBuffer();</highlight></codeline>
<codeline lineno="252"><highlight class="normal"></highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>BBox3<sp/>getLocalBoundingBox()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>bbox;<sp/>}</highlight></codeline>
<codeline lineno="254"><highlight class="normal"></highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isBoundPackUsed()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="256"><highlight class="keyword"><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(interlocked_relaxed_load(packedFields)<sp/>&amp;<sp/>(BOUND_PACK_USED_MASK<sp/>&lt;&lt;<sp/>BOUND_PACK_USED_SHIFT))<sp/>!=<sp/>0;</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>acquireTexRefs()</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>lods.size();<sp/>i++)</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>lods[i].scene-&gt;acquireTexRefs();</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>releaseTexRefs()</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>lods.size();<sp/>i++)</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>lods[i].scene-&gt;releaseTexRefs();</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="269"><highlight class="normal"></highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>addInstanceRef();</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>delInstanceRef();</highlight></codeline>
<codeline lineno="272"><highlight class="normal"></highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>duplicateMaterial(TEXTUREID<sp/>tex_id,<sp/>Tab&lt;ShaderMaterial<sp/>*&gt;<sp/>&amp;<sp/>old_mat,<sp/>Tab&lt;ShaderMaterial<sp/>*&gt;<sp/>&amp;<sp/>new_mat)</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>lods.size();<sp/>i++)</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>lods[i].scene-&gt;duplicateMaterial(tex_id,<sp/>old_mat,<sp/>new_mat);</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>duplicateMat(<ref refid="classShaderMaterial" kindref="compound">ShaderMaterial</ref><sp/>*<sp/>prev_m,<sp/>Tab&lt;ShaderMaterial<sp/>*&gt;<sp/>&amp;<sp/>old_mat,<sp/>Tab&lt;ShaderMaterial<sp/>*&gt;<sp/>&amp;<sp/>new_mat)</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>lods.size();<sp/>i++)</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>lods[i].scene-&gt;duplicateMat(prev_m,<sp/>old_mat,<sp/>new_mat);</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>finalizeDuplicateMaterial(dag::Span&lt;ShaderMaterial<sp/>*&gt;<sp/>new_mat);</highlight></codeline>
<codeline lineno="284"><highlight class="normal"></highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*getStaticClassName()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;dynModel&quot;</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="286"><highlight class="normal"></highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/>uint32_t<sp/>getBvhId()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>bvhId;<sp/>}</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>setBvhId(uint32_t<sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/>bvhId<sp/>=<sp/>id;<sp/>}</highlight></codeline>
<codeline lineno="289"><highlight class="normal"></highlight></codeline>
<codeline lineno="290"><highlight class="normal"></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">mutable</highlight><highlight class="normal"><sp/>uint32_t<sp/>bvhId<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="292"><highlight class="normal"></highlight></codeline>
<codeline lineno="293"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="294" refid="structLod" refkind="compound"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structLod" kindref="compound">Lod</ref></highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/>PatchablePtr&lt;DynamicRenderableSceneResource&gt;<sp/>scene;</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/>real<sp/>range;</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>texScale;</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>getAllElems(Tab&lt;dag::ConstSpan&lt;ShaderMesh::RElem&gt;&gt;<sp/>&amp;out_elems)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="301"><highlight class="normal"></highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dumpStartOfs()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>offsetof(DynamicRenderableSceneLodsResource,<sp/>lods);<sp/>}</highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*dumpStartPtr()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>&amp;lods;<sp/>}</highlight></codeline>
<codeline lineno="304"><highlight class="normal"></highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/>dag::ConstSpan&lt;Ptr&lt;ShaderMatVdata&gt;&gt;<sp/>getSmvd()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>make_span_const(&amp;smvdR,<sp/>2);<sp/>}</highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>setResLoadingFlag(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>is_loading)</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(is_loading)</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>interlocked_or(packedFields,<sp/>RES_LD_FLG_MASK<sp/>&lt;&lt;<sp/>RES_LD_FLG_SHIFT);</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>interlocked_and(packedFields,<sp/>~(RES_LD_FLG_MASK<sp/>&lt;&lt;<sp/>RES_LD_FLG_SHIFT));</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>getResLoadingFlag()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(interlocked_relaxed_load(packedFields)<sp/>&amp;<sp/>(RES_LD_FLG_MASK<sp/>&lt;&lt;<sp/>RES_LD_FLG_SHIFT))<sp/>!=<sp/>0;<sp/>}</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>areLodsSplit()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(smvdR<sp/>&amp;&amp;<sp/>smvdR-&gt;areLodsSplit())<sp/>||<sp/>(smvdS<sp/>&amp;&amp;<sp/>smvdS-&gt;areLodsSplit());<sp/>}</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/>dag::ConstSpan&lt;Lod&gt;<sp/>getUsedLods()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="316"><highlight class="keyword"><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>qlBestLod<sp/>=<sp/>getQlBestLod();</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>make_span_const(lods.data()<sp/>+<sp/>qlBestLod,<sp/>lods.size()<sp/>-<sp/>qlBestLod);</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/>dag::Span&lt;Lod&gt;<sp/>getUsedLods()</highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>qlBestLod<sp/>=<sp/>getQlBestLod();</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>make_span(lods.data()<sp/>+<sp/>qlBestLod,<sp/>lods.size()<sp/>-<sp/>qlBestLod);</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>DynamicRenderableSceneLodsResource<sp/>*getFirstOriginal()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>originalRes<sp/>?<sp/>originalRes.get()<sp/>:<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>DynamicRenderableSceneLodsResource<sp/>*getNextClone()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>nextClonedRes;<sp/>}</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/>DynamicRenderableSceneLodsResource<sp/>*getFirstOriginal()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>originalRes<sp/>?<sp/>originalRes.get()<sp/>:<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/>DynamicRenderableSceneLodsResource<sp/>*getNextClone()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>nextClonedRes;<sp/>}</highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>lockClonesList();</highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>unlockClonesList();</highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>void<sp/>(*on_higher_lod_required)(DynamicRenderableSceneLodsResource<sp/>*res,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>req_lod,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>cur_lod);</highlight></codeline>
<codeline lineno="332"><highlight class="normal"></highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>qlReqLodInitialValue<sp/>=<sp/>16;</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>getQlReqLod()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>interlocked_relaxed_load(qlReqLod);<sp/>}</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>getQlReqLodEff()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="336"><highlight class="keyword"><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint16_t<sp/>reqLod<sp/>=<sp/>getQlReqLod();</highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint16_t<sp/>reqLodPrev<sp/>=<sp/>interlocked_relaxed_load(qlReqLodPrev);</highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>reqLod<sp/>&lt;<sp/>reqLodPrev<sp/>?<sp/>reqLod<sp/>:<sp/>reqLodPrev;</highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>getQlReqLFU()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>interlocked_relaxed_load(qlReqLFU);<sp/>}</highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>updateReqLod(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>lod)</highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>reqLFU<sp/>=<sp/>getQlReqLFU();</highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint16_t<sp/>reqLod<sp/>=<sp/>getQlReqLod();</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(reqLFU<sp/>==<sp/>::dagor_frame_no()<sp/>&amp;&amp;<sp/>lod<sp/>&lt;<sp/>reqLod)</highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>setQlReqLod(lod);</highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!originalRes<sp/>&amp;&amp;<sp/>on_higher_lod_required)</highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>qlBestLod<sp/>=<sp/>getQlBestLod();</highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(lod<sp/>&lt;<sp/>qlBestLod)</highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>on_higher_lod_required(</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>lod,<sp/>qlBestLod);</highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(reqLFU<sp/>!=<sp/>::dagor_frame_no())</highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>uint16_t<sp/>newPrevLod<sp/>=<sp/>reqLFU<sp/>+<sp/>10<sp/>&gt;<sp/>::dagor_frame_no()<sp/>?<sp/>reqLod<sp/>:<sp/>lod;</highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>interlocked_release_store(qlReqLodPrev,<sp/>newPrevLod);</highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>setQlReqLod(lod);</highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>setQlReqLFU(dagor_frame_no());</highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!originalRes<sp/>&amp;&amp;<sp/>on_higher_lod_required)</highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>qlBestLod<sp/>=<sp/>getQlBestLod();</highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(lod<sp/>&lt;<sp/>qlBestLod<sp/>||<sp/>lod<sp/>&lt;<sp/>newPrevLod)</highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>on_higher_lod_required(</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>lod,<sp/>qlBestLod);</highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(originalRes)</highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>originalRes-&gt;updateReqLod(lod);</highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>getQlBestLod()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(interlocked_relaxed_load(packedFields)<sp/>&gt;&gt;<sp/>QL_BEST_LOD_SHIFT)<sp/>&amp;<sp/>QL_BEST_LOD_MASK;<sp/>}</highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>applyQlBestLod(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>lod0)</highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint32_t<sp/>m<sp/>=<sp/>~(QL_BEST_LOD_MASK<sp/>&lt;&lt;<sp/>QL_BEST_LOD_SHIFT),<sp/>v<sp/>=<sp/>(lod0<sp/>&amp;<sp/>QL_BEST_LOD_MASK)<sp/>&lt;&lt;<sp/>QL_BEST_LOD_SHIFT;</highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>storedValue<sp/>=<sp/>interlocked_relaxed_load(packedFields);</highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(interlocked_compare_exchange(packedFields,<sp/>(storedValue<sp/>&amp;<sp/>m)<sp/>|<sp/>v,<sp/>storedValue)<sp/>!=<sp/>storedValue)</highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>storedValue<sp/>=<sp/>interlocked_acquire_load(packedFields);</highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>getInstanceRefCount()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>interlocked_acquire_load(instanceRefCount);<sp/>}</highlight></codeline>
<codeline lineno="381"><highlight class="normal"></highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>incQlReloadCnt()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>interlocked_increment(qlReloadCnt);<sp/>}</highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>getQlReloadCnt()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>interlocked_acquire_load(qlReloadCnt);<sp/>}</highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>incQlDiscardCnt()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>interlocked_increment(qlDiscardCnt);<sp/>}</highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>getQlDiscardCnt()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>interlocked_acquire_load(qlDiscardCnt);<sp/>}</highlight></codeline>
<codeline lineno="386"><highlight class="normal"></highlight></codeline>
<codeline lineno="387"><highlight class="normal"></highlight><highlight class="keyword">protected</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>setQlReqLod(uint16_t<sp/>new_lod)<sp/>{<sp/>interlocked_release_store(qlReqLod,<sp/>new_lod);<sp/>}</highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>setQlReqLFU(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>frame_no)<sp/>{<sp/>interlocked_release_store(qlReqLFU,<sp/>frame_no);<sp/>}</highlight></codeline>
<codeline lineno="390"><highlight class="normal"></highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/>Ptr&lt;DynSceneResNameMapResource&gt;<sp/>names;</highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/>Ptr&lt;ShaderMatVdata&gt;<sp/>smvdR,<sp/>smvdS;</highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>FieldsMasks<sp/>:<sp/>uint32_t</highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/><sp/><sp/>RES_SIZE_SHIFT<sp/>=<sp/>0x0,</highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/><sp/><sp/>RES_SIZE_SIZE<sp/>=<sp/>24,</highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/><sp/><sp/>RES_SIZE_MASK<sp/>=<sp/>(1<sp/>&lt;&lt;<sp/>RES_SIZE_SIZE)<sp/>-<sp/>1,</highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/><sp/><sp/>BOUND_PACK_USED_SHIFT<sp/>=<sp/>RES_SIZE_SHIFT<sp/>+<sp/>RES_SIZE_SIZE,</highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/><sp/><sp/>BOUND_PACK_USED_SIZE<sp/>=<sp/>0x1,</highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/><sp/><sp/>BOUND_PACK_USED_MASK<sp/>=<sp/>(1<sp/>&lt;&lt;<sp/>BOUND_PACK_USED_SIZE)<sp/>-<sp/>1,</highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/><sp/><sp/>QL_BEST_LOD_SHIFT<sp/>=<sp/>BOUND_PACK_USED_SHIFT<sp/>+<sp/>BOUND_PACK_USED_SIZE,</highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/><sp/><sp/>QL_BEST_LOD_SIZE<sp/>=<sp/>0x3,</highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/><sp/><sp/>QL_BEST_LOD_MASK<sp/>=<sp/>(1<sp/>&lt;&lt;<sp/>QL_BEST_LOD_SIZE)<sp/>-<sp/>1,</highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/><sp/><sp/>RES_LD_FLG_SHIFT<sp/>=<sp/>QL_BEST_LOD_SIZE<sp/>+<sp/>QL_BEST_LOD_SHIFT,</highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/><sp/><sp/>RES_LD_FLG_SIZE<sp/>=<sp/>0x1,</highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/><sp/><sp/>RES_LD_FLG_MASK<sp/>=<sp/>(1<sp/>&lt;&lt;<sp/>RES_LD_FLG_SIZE)<sp/>-<sp/>1,</highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/><sp/><sp/>RESERVED_SHIFT<sp/>=<sp/>RES_LD_FLG_SIZE<sp/>+<sp/>RES_LD_FLG_SHIFT,</highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/><sp/><sp/>RESERVED_SIZE<sp/>=<sp/>0x3,</highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/><sp/><sp/>RESERVED_MASK<sp/>=<sp/>(1<sp/>&lt;&lt;<sp/>RESERVED_SIZE)<sp/>-<sp/>1</highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static_assert</highlight><highlight class="normal">(RESERVED_SHIFT<sp/>+<sp/>RESERVED_SIZE<sp/>==<sp/>32,</highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Since<sp/>we<sp/>use<sp/>one<sp/>dword<sp/>for<sp/>the<sp/>bitfield,<sp/>we<sp/>shouldn&apos;t<sp/>have<sp/>unhandled<sp/>bits<sp/>there.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/>uint32_t<sp/>packedFields;</highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>instanceRefCount;</highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/>qlReqLod<sp/>=<sp/>qlReqLodInitialValue,<sp/>qlReqLodPrev<sp/>=<sp/>qlReqLodInitialValue;</highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/>qlReloadCnt<sp/>=<sp/>0,<sp/>qlDiscardCnt<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>qlReqLFU<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">mutable</highlight><highlight class="normal"><sp/>DynamicRenderableSceneLodsResource<sp/>*nextClonedRes<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">mutable</highlight><highlight class="normal"><sp/>Ptr&lt;DynamicRenderableSceneLodsResource&gt;<sp/>originalRes;</highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/>PATCHABLE_32BIT_PAD32(_resv[3]);</highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/>PATCHABLE_64BIT_PAD32(_resv[2]);</highlight></codeline>
<codeline lineno="422"><highlight class="normal"></highlight></codeline>
<codeline lineno="423"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/>PatchableTab&lt;Lod&gt;<sp/>lods;</highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/>BBox3<sp/>bbox;</highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>bpC254[4],<sp/>bpC255[4];<sp/></highlight><highlight class="comment">//&lt;<sp/>available<sp/>only<sp/>when<sp/>boundPackUsed==1<sp/>(overlaps<sp/>with<sp/>other<sp/>data<sp/>in<sp/>older<sp/>bindump<sp/>format)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="427"><highlight class="normal"></highlight></codeline>
<codeline lineno="428"><highlight class="normal"></highlight><highlight class="keyword">protected</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/>DynamicRenderableSceneLodsResource()<sp/></highlight><highlight class="comment">//-V730</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/><sp/><sp/>packedFields<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/><sp/><sp/>instanceRefCount<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/>DynamicRenderableSceneLodsResource(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>DynamicRenderableSceneLodsResource<sp/>&amp;);</highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/>~DynamicRenderableSceneLodsResource()</highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/><sp/><sp/>G_ASSERT(getInstanceRefCount()<sp/>==<sp/>0);</highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/><sp/><sp/>clearData();</highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>addToCloneList(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>DynamicRenderableSceneLodsResource<sp/>&amp;from);</highlight></codeline>
<codeline lineno="441"><highlight class="normal"></highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>patches<sp/>data<sp/>after<sp/>resource<sp/>dump<sp/>loading</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>patchAndLoadData(IGenLoad<sp/>&amp;<sp/>crd,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>flags,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>res_sz);</highlight></codeline>
<codeline lineno="444"><highlight class="normal"></highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>loadSkins(IGenLoad<sp/>&amp;<sp/>crd,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>flags,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>DataBlock<sp/>*desc<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="446"><highlight class="normal"></highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>explicit<sp/>destructor</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>clearData();</highlight></codeline>
<codeline lineno="449"><highlight class="normal"></highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/>uint32_t<sp/>getResSize()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(interlocked_relaxed_load(packedFields)<sp/>&gt;&gt;<sp/>RES_SIZE_SHIFT)<sp/>&amp;<sp/>RES_SIZE_MASK;<sp/>}</highlight></codeline>
<codeline lineno="451"><highlight class="normal"></highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>setResSizeNonTS(uint32_t<sp/>res_size)</highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/><sp/><sp/>packedFields<sp/>=<sp/>(packedFields<sp/>&amp;<sp/>(~(RES_SIZE_MASK<sp/>&lt;&lt;<sp/>RES_SIZE_SHIFT)))<sp/>|<sp/>res_size<sp/>&lt;&lt;<sp/>RES_SIZE_SHIFT;</highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="456"><highlight class="normal"></highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>setBoundPackUsed(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>used)</highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(used)</highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>interlocked_or(packedFields,<sp/>BOUND_PACK_USED_MASK<sp/>&lt;&lt;<sp/>BOUND_PACK_USED_SHIFT);</highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>interlocked_and(packedFields,<sp/>~(BOUND_PACK_USED_MASK<sp/>&lt;&lt;<sp/>BOUND_PACK_USED_SHIFT));</highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="464"><highlight class="normal"></highlight></codeline>
<codeline lineno="465"><highlight class="normal">end_dclass_decl();</highlight></codeline>
<codeline lineno="466"><highlight class="normal"></highlight></codeline>
<codeline lineno="467"><highlight class="normal"></highlight></codeline>
<codeline lineno="468"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Instance<sp/>of<sp/>dynamic<sp/>renderable<sp/>scene<sp/>that<sp/>contains<sp/>key<sp/>node<sp/>transforms</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="469"><highlight class="normal"></highlight><highlight class="comment">//<sp/>for<sp/>this<sp/>instance.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="470"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Switches<sp/>LODs<sp/>by<sp/>distance<sp/>from<sp/>the<sp/>viewer<sp/>in<sp/>beforeRender().</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="471" refid="classDynamicRenderableSceneInstance" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classDynamicRenderableSceneInstance" kindref="compound">DynamicRenderableSceneInstance</ref></highlight></codeline>
<codeline lineno="472"><highlight class="normal">{</highlight></codeline>
<codeline lineno="473"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/>DAG_DECLARE_NEW(midmem)</highlight></codeline>
<codeline lineno="475"><highlight class="normal"></highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">NodeCollapserBits<sp/>=<sp/>eastl::array&lt;uint32_t,<sp/>4<sp/>*<sp/>2&gt;;</highlight></codeline>
<codeline lineno="477"><highlight class="normal"></highlight></codeline>
<codeline lineno="478"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>lodDistanceScale;</highlight></codeline>
<codeline lineno="479"><highlight class="normal"></highlight></codeline>
<codeline lineno="480"><highlight class="normal"><sp/><sp/><ref refid="classDynamicRenderableSceneInstance" kindref="compound">DynamicRenderableSceneInstance</ref>(DynamicRenderableSceneLodsResource<sp/>*res,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>activate_instance<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="481"><highlight class="normal"></highlight></codeline>
<codeline lineno="482"><highlight class="normal"><sp/><sp/><ref refid="classDynamicRenderableSceneInstance" kindref="compound">~DynamicRenderableSceneInstance</ref>();</highlight></codeline>
<codeline lineno="483"><highlight class="normal"></highlight></codeline>
<codeline lineno="484"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>activateInstance(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>a<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="485"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>deactivateInstance()<sp/>{<sp/>activateInstance(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);<sp/>}</highlight></codeline>
<codeline lineno="486"><highlight class="normal"></highlight></codeline>
<codeline lineno="487"><highlight class="normal"><sp/><sp/>DynamicRenderableSceneResource<sp/>*getCurSceneResource()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>sceneResource;<sp/>}</highlight></codeline>
<codeline lineno="488"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>DynamicRenderableSceneResource<sp/>*getCurSceneResource()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>sceneResource;<sp/>}</highlight></codeline>
<codeline lineno="489"><highlight class="normal"></highlight></codeline>
<codeline lineno="490"><highlight class="normal"><sp/><sp/>DynamicRenderableSceneLodsResource<sp/>*getLodsResource()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>lods;<sp/>}</highlight></codeline>
<codeline lineno="491"><highlight class="normal"><sp/><sp/>DynamicRenderableSceneLodsResource<sp/>*cloneLodsResource()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>lods<sp/>?<sp/>lods-&gt;clone()<sp/>:<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>changeLodsResource(DynamicRenderableSceneLodsResource<sp/>*new_lods);</highlight></codeline>
<codeline lineno="493"><highlight class="normal"></highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>DynamicRenderableSceneLodsResource<sp/>*getConstLodsResource()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>lods;<sp/>}</highlight></codeline>
<codeline lineno="495"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>DynamicRenderableSceneLodsResource<sp/>*getLodsResource()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>lods;<sp/>}</highlight></codeline>
<codeline lineno="496"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>getLodsCount()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>lods-&gt;lods.size();<sp/>}</highlight></codeline>
<codeline lineno="497"><highlight class="normal"></highlight></codeline>
<codeline lineno="498"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>getNodeId(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*name)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="499"><highlight class="normal"></highlight></codeline>
<codeline lineno="500"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>uint32_t<sp/>getNodeCount()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>count;<sp/>}</highlight></codeline>
<codeline lineno="501"><highlight class="normal"></highlight></codeline>
<codeline lineno="502"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>setNodeOpacity(uint32_t<sp/>n_id,<sp/>real<sp/>value)</highlight></codeline>
<codeline lineno="503"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="504"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(n_id<sp/>&lt;<sp/>getNodeCount())</highlight></codeline>
<codeline lineno="505"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>opacity()[n_id]<sp/>=<sp/>value;</highlight></codeline>
<codeline lineno="506"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="507"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>showNode(uint32_t<sp/>n_id,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>show)</highlight></codeline>
<codeline lineno="508"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="509"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(n_id<sp/>&lt;<sp/>getNodeCount())</highlight></codeline>
<codeline lineno="510"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>hidden()[n_id]<sp/>=<sp/>!show;</highlight></codeline>
<codeline lineno="511"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="512"><highlight class="normal"></highlight></codeline>
<codeline lineno="513"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>showSkinnedNodesConnectedToBone(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>bone_id,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>need_show);</highlight></codeline>
<codeline lineno="514"><highlight class="normal"></highlight></codeline>
<codeline lineno="515"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>clearNodeCollapser()<sp/>{<sp/>nodeCollapserBits.fill(0);<sp/>}</highlight></codeline>
<codeline lineno="516"><highlight class="normal"></highlight></codeline>
<codeline lineno="517"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>markNodeCollapserNode(uint32_t<sp/>node_index)</highlight></codeline>
<codeline lineno="518"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="519"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>boneId<sp/>=<sp/>getBoneForNode(node_index);</highlight></codeline>
<codeline lineno="520"><highlight class="normal"><sp/><sp/><sp/><sp/>G_ASSERT_RETURN(boneId<sp/>&lt;<sp/>256,<sp/>);</highlight></codeline>
<codeline lineno="521"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(boneId<sp/>&gt;=<sp/>0)</highlight></codeline>
<codeline lineno="522"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>nodeCollapserBits[boneId<sp/>/<sp/>32]<sp/>|=<sp/>1<sp/>&lt;&lt;<sp/>(boneId<sp/>%<sp/>32);</highlight></codeline>
<codeline lineno="523"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="524"><highlight class="normal"></highlight></codeline>
<codeline lineno="525"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>NodeCollapserBits<sp/>&amp;getNodeCollapserBits()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>nodeCollapserBits;<sp/>}</highlight></codeline>
<codeline lineno="526"><highlight class="normal"></highlight></codeline>
<codeline lineno="527"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>setNodeWtm(uint32_t<sp/>n_id,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TMatrix<sp/>&amp;wtm)</highlight></codeline>
<codeline lineno="528"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="529"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(n_id<sp/>&lt;<sp/>getNodeCount())</highlight></codeline>
<codeline lineno="530"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="531"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>nodeWtm()[n_id]<sp/>=<sp/>wtm;</highlight></codeline>
<codeline lineno="532"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>wtmToOriginVec()[n_id]<sp/>=<sp/>wtm.getcol(3)<sp/>-<sp/>origin;</highlight></codeline>
<codeline lineno="533"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="534"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="535"><highlight class="normal"></highlight></codeline>
<codeline lineno="536"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>getDistSq()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>distSq;<sp/>}</highlight></codeline>
<codeline lineno="537"><highlight class="normal"></highlight></codeline>
<codeline lineno="538"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>savePrevNodeWtm()</highlight></codeline>
<codeline lineno="539"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="540"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>tmp<sp/>=<sp/>curWtm;</highlight></codeline>
<codeline lineno="541"><highlight class="normal"><sp/><sp/><sp/><sp/>curWtm<sp/>=<sp/>prevWtm;</highlight></codeline>
<codeline lineno="542"><highlight class="normal"><sp/><sp/><sp/><sp/>prevWtm<sp/>=<sp/>tmp;</highlight></codeline>
<codeline lineno="543"><highlight class="normal"></highlight></codeline>
<codeline lineno="544"><highlight class="normal"><sp/><sp/><sp/><sp/>tmp<sp/>=<sp/>curOrig;</highlight></codeline>
<codeline lineno="545"><highlight class="normal"><sp/><sp/><sp/><sp/>curOrig<sp/>=<sp/>prevOrig;</highlight></codeline>
<codeline lineno="546"><highlight class="normal"><sp/><sp/><sp/><sp/>prevOrig<sp/>=<sp/>tmp;</highlight></codeline>
<codeline lineno="547"><highlight class="normal"></highlight></codeline>
<codeline lineno="548"><highlight class="normal"><sp/><sp/><sp/><sp/>originPrev<sp/>=<sp/>origin;</highlight></codeline>
<codeline lineno="549"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="550"><highlight class="normal"></highlight></codeline>
<codeline lineno="551"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TMatrix<sp/>&amp;getPrevNodeWtm(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n_id)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>nodePrevWtm()[n_id];<sp/>}</highlight></codeline>
<codeline lineno="552"><highlight class="normal"></highlight></codeline>
<codeline lineno="553"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>setPrevNodeWtm(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n_id,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TMatrix<sp/>&amp;wtm)</highlight></codeline>
<codeline lineno="554"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="555"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(n_id<sp/>&lt;<sp/>getNodeCount())</highlight></codeline>
<codeline lineno="556"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="557"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>TMatrix<sp/>&amp;m<sp/>=<sp/>nodePrevWtm_ptr()[n_id];<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//-V758</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="558"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Point3<sp/>&amp;toOrigin<sp/>=<sp/>wtmToOriginVecPrev_ptr()[n_id];<sp/></highlight><highlight class="comment">//-V758</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="559"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>m<sp/>=<sp/>wtm;</highlight></codeline>
<codeline lineno="560"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>toOrigin<sp/>=<sp/>m.getcol(3)<sp/>-<sp/>originPrev;</highlight></codeline>
<codeline lineno="561"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="562"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="563"><highlight class="normal"></highlight></codeline>
<codeline lineno="564"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>setNodeWtm(uint32_t<sp/>n_id,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>mat44f<sp/>&amp;wtm)</highlight></codeline>
<codeline lineno="565"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="566"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(n_id<sp/>&lt;<sp/>getNodeCount())</highlight></codeline>
<codeline lineno="567"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="568"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>TMatrix<sp/>&amp;m<sp/>=<sp/>nodeWtm()[n_id];<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//-V758</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="569"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Point3<sp/>&amp;toOrigin<sp/>=<sp/>wtmToOriginVec()[n_id];<sp/></highlight><highlight class="comment">//-V758</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="570"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>v_mat_43ca_from_mat44(m.m[0],<sp/>wtm);</highlight></codeline>
<codeline lineno="571"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>toOrigin<sp/>=<sp/>m.getcol(3)<sp/>-<sp/>origin;</highlight></codeline>
<codeline lineno="572"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="573"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="574"><highlight class="normal"></highlight></codeline>
<codeline lineno="575"><highlight class="normal"></highlight></codeline>
<codeline lineno="576"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Relative<sp/>to<sp/>origin.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="577"><highlight class="normal"></highlight></codeline>
<codeline lineno="578"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>setOrigin(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Point3<sp/>&amp;in_origin)<sp/>{<sp/>origin<sp/>=<sp/>in_origin;<sp/>}</highlight></codeline>
<codeline lineno="579"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Point3<sp/>&amp;getOrigin()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>origin;<sp/>}</highlight></codeline>
<codeline lineno="580"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>setOriginPrev(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Point3<sp/>&amp;in_origin_prev)<sp/>{<sp/>originPrev<sp/>=<sp/>in_origin_prev;<sp/>}</highlight></codeline>
<codeline lineno="581"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Point3<sp/>&amp;getOriginPrev()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>originPrev;<sp/>}</highlight></codeline>
<codeline lineno="582"><highlight class="normal"></highlight></codeline>
<codeline lineno="583"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>setNodeWtmRelToOrigin(uint32_t<sp/>n_id,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TMatrix<sp/>&amp;wtm_rel_to_origin)</highlight></codeline>
<codeline lineno="584"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="585"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(n_id<sp/>&lt;<sp/>getNodeCount())</highlight></codeline>
<codeline lineno="586"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="587"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>nodeWtm()[n_id]<sp/>=<sp/>wtm_rel_to_origin;</highlight></codeline>
<codeline lineno="588"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>wtmToOriginVec()[n_id]<sp/>=<sp/>wtm_rel_to_origin.getcol(3);</highlight></codeline>
<codeline lineno="589"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>nodeWtm()[n_id].setcol(3,<sp/>wtm_rel_to_origin.getcol(3)<sp/>+<sp/>origin);</highlight></codeline>
<codeline lineno="590"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="591"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="592"><highlight class="normal"></highlight></codeline>
<codeline lineno="593"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>setNodeWtmRelToOrigin(uint32_t<sp/>n_id,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>mat44f<sp/>&amp;wtm_rel_to_origin)</highlight></codeline>
<codeline lineno="594"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="595"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(n_id<sp/>&lt;<sp/>getNodeCount())</highlight></codeline>
<codeline lineno="596"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="597"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>TMatrix<sp/>&amp;m<sp/>=<sp/>nodeWtm()[n_id];<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//-V758</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="598"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Point3<sp/>&amp;toOrigin<sp/>=<sp/>wtmToOriginVec()[n_id];<sp/></highlight><highlight class="comment">//-V758</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="599"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>v_mat_43ca_from_mat44(m.m[0],<sp/>wtm_rel_to_origin);</highlight></codeline>
<codeline lineno="600"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>toOrigin<sp/>=<sp/>m.getcol(3);</highlight></codeline>
<codeline lineno="601"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>m.setcol(3,<sp/>m.getcol(3)<sp/>+<sp/>origin);</highlight></codeline>
<codeline lineno="602"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="603"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="604"><highlight class="normal"></highlight></codeline>
<codeline lineno="605"><highlight class="normal"><sp/><sp/>TMatrix<sp/>getNodeWtmRelToOrigin(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n_id)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="606"><highlight class="keyword"><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="607"><highlight class="normal"><sp/><sp/><sp/><sp/>TMatrix<sp/>wtmRelToOrigin<sp/>=<sp/>nodeWtm()[n_id];</highlight></codeline>
<codeline lineno="608"><highlight class="normal"><sp/><sp/><sp/><sp/>wtmRelToOrigin.setcol(3,<sp/>wtmToOriginVec()[n_id]);</highlight></codeline>
<codeline lineno="609"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>wtmRelToOrigin;</highlight></codeline>
<codeline lineno="610"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="611"><highlight class="normal"></highlight></codeline>
<codeline lineno="612"><highlight class="normal"></highlight></codeline>
<codeline lineno="613"><highlight class="normal"><sp/><sp/>TMatrix<sp/>getNodePrevWtmRelToOrigin(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n_id)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="614"><highlight class="keyword"><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="615"><highlight class="normal"><sp/><sp/><sp/><sp/>TMatrix<sp/>wtmRelToOrigin<sp/>=<sp/>nodePrevWtm()[n_id];</highlight></codeline>
<codeline lineno="616"><highlight class="normal"><sp/><sp/><sp/><sp/>wtmRelToOrigin.setcol(3,<sp/>wtmToOriginVecPrev()[n_id]);</highlight></codeline>
<codeline lineno="617"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>wtmRelToOrigin;</highlight></codeline>
<codeline lineno="618"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="619"><highlight class="normal"></highlight></codeline>
<codeline lineno="620"><highlight class="normal"></highlight></codeline>
<codeline lineno="621"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>setBoundingBox(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>BBox3<sp/>&amp;in_bbox)</highlight></codeline>
<codeline lineno="622"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="623"><highlight class="normal"><sp/><sp/><sp/><sp/>bbox<sp/>=<sp/>in_bbox;</highlight></codeline>
<codeline lineno="624"><highlight class="normal"><sp/><sp/><sp/><sp/>autoCalcBBox<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="625"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="626"><highlight class="normal"></highlight></codeline>
<codeline lineno="627"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Choose<sp/>LOD<sp/>by<sp/>squared<sp/>distance<sp/>from<sp/>camera<sp/>pos,<sp/>returns<sp/>index<sp/>of<sp/>choosed<sp/>LOD</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="628"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>chooseLodByDistSq(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>dist_sq,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>dist_mul<sp/>=<sp/>1.0f);</highlight></codeline>
<codeline lineno="629"><highlight class="normal"></highlight></codeline>
<codeline lineno="630"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Choose<sp/>LOD<sp/>by<sp/>distance<sp/>from<sp/>camera<sp/>pos,<sp/>returns<sp/>index<sp/>of<sp/>choosed<sp/>LOD</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="631"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>chooseLod(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Point3<sp/>&amp;camera_pos,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>dist_mul<sp/>=<sp/>1.0f);</highlight></codeline>
<codeline lineno="632"><highlight class="normal"></highlight></codeline>
<codeline lineno="633"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>setLod(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>lod);</highlight></codeline>
<codeline lineno="634"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>setCurrentLod(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>lod);</highlight></codeline>
<codeline lineno="635"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>setBestLodLimit(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>lod);</highlight></codeline>
<codeline lineno="636"><highlight class="normal"></highlight></codeline>
<codeline lineno="637"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>sets<sp/>disableAutoChooseLod,<sp/>which<sp/>prevents<sp/>curLodNo<sp/>changes<sp/>via<sp/>chooseLod()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="638"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>setDisableAutoChooseLod(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>dis)<sp/>{<sp/>disableAutoChooseLod<sp/>=<sp/>dis;<sp/>}</highlight></codeline>
<codeline lineno="639"><highlight class="normal"></highlight></codeline>
<codeline lineno="640"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>getCurrentLodNo()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>curLodNo;<sp/>}</highlight></codeline>
<codeline lineno="641"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>validateLod(uint32_t<sp/>lod)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="642"><highlight class="normal"></highlight></codeline>
<codeline lineno="643"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Switches<sp/>LODs</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="644"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>beforeRender(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Point3<sp/>&amp;view_pos);</highlight></codeline>
<codeline lineno="645"><highlight class="normal"></highlight></codeline>
<codeline lineno="646"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>render(real<sp/>opacity<sp/>=<sp/>1.f);</highlight></codeline>
<codeline lineno="647"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>renderTrans(real<sp/>opacity<sp/>=<sp/>1.f);</highlight></codeline>
<codeline lineno="648"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>renderDistortion();</highlight></codeline>
<codeline lineno="649"><highlight class="normal"></highlight></codeline>
<codeline lineno="650"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TMatrix<sp/>&amp;getNodeWtm(uint32_t<sp/>n_id)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>nodeWtm()[n_id];<sp/>}</highlight></codeline>
<codeline lineno="651"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>real<sp/>getNodeOpacity(uint32_t<sp/>n_id)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>opacity()[n_id];<sp/>}</highlight></codeline>
<codeline lineno="652"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>getNodeHidden(uint32_t<sp/>n_id)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(hidden()[n_id]);<sp/>}</highlight></codeline>
<codeline lineno="653"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isNodeHidden(uint32_t<sp/>n_id)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="654"><highlight class="keyword"><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="655"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(hidden()[n_id])</highlight></codeline>
<codeline lineno="656"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="657"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>*c<sp/>=<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>*)nodeWtm()[n_id].m[0];</highlight></codeline>
<codeline lineno="658"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>cOred<sp/>=<sp/>(c[0]<sp/>|<sp/>c[1]<sp/>|<sp/>c[2]);</highlight></codeline>
<codeline lineno="659"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>cOred<sp/>==<sp/>0<sp/>||<sp/>cOred<sp/>==<sp/>0x80000000;</highlight></codeline>
<codeline lineno="660"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="661"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>BBox3<sp/>getLocalBoundingBox()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>lods-&gt;getLocalBoundingBox();<sp/>}</highlight></codeline>
<codeline lineno="662"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>BBox3<sp/>getBoundingBox()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="663"><highlight class="keyword"><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="664"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(autoCalcBBox)</highlight></codeline>
<codeline lineno="665"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="666"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>todo:<sp/>replace<sp/>with<sp/>vectorized<sp/>v_bbox3_init</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="667"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>BBox3<sp/>ret,<sp/>lbb<sp/>=<sp/>lods-&gt;getLocalBoundingBox();</highlight></codeline>
<codeline lineno="668"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>TMatrix<sp/>tm<sp/>=<sp/>nodeWtm()[0];</highlight></codeline>
<codeline lineno="669"><highlight class="normal"></highlight></codeline>
<codeline lineno="670"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ret<sp/>+=<sp/>Point3(lbb.lim[0].x,<sp/>lbb.lim[0].y,<sp/>lbb.lim[0].z)<sp/>*<sp/>tm;</highlight></codeline>
<codeline lineno="671"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ret<sp/>+=<sp/>Point3(lbb.lim[0].x,<sp/>lbb.lim[0].y,<sp/>lbb.lim[1].z)<sp/>*<sp/>tm;</highlight></codeline>
<codeline lineno="672"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ret<sp/>+=<sp/>Point3(lbb.lim[0].x,<sp/>lbb.lim[1].y,<sp/>lbb.lim[0].z)<sp/>*<sp/>tm;</highlight></codeline>
<codeline lineno="673"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ret<sp/>+=<sp/>Point3(lbb.lim[1].x,<sp/>lbb.lim[1].y,<sp/>lbb.lim[1].z)<sp/>*<sp/>tm;</highlight></codeline>
<codeline lineno="674"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ret<sp/>+=<sp/>Point3(lbb.lim[1].x,<sp/>lbb.lim[0].y,<sp/>lbb.lim[0].z)<sp/>*<sp/>tm;</highlight></codeline>
<codeline lineno="675"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ret<sp/>+=<sp/>Point3(lbb.lim[1].x,<sp/>lbb.lim[1].y,<sp/>lbb.lim[1].z)<sp/>*<sp/>tm;</highlight></codeline>
<codeline lineno="676"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ret<sp/>+=<sp/>Point3(lbb.lim[1].x,<sp/>lbb.lim[1].y,<sp/>lbb.lim[0].z)<sp/>*<sp/>tm;</highlight></codeline>
<codeline lineno="677"><highlight class="normal"></highlight></codeline>
<codeline lineno="678"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ret;</highlight></codeline>
<codeline lineno="679"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="680"><highlight class="normal"></highlight></codeline>
<codeline lineno="681"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>bbox;</highlight></codeline>
<codeline lineno="682"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="683"><highlight class="normal"><sp/><sp/>BSphere3<sp/>getBoundingSphere()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="684"><highlight class="normal"></highlight></codeline>
<codeline lineno="685"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>autoCalcBoundingBox(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>calc)<sp/>{<sp/>autoCalcBBox<sp/>=<sp/>calc;<sp/>}</highlight></codeline>
<codeline lineno="686"><highlight class="normal"></highlight></codeline>
<codeline lineno="687"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>matchBetterBoneIdxAndItmForPoint(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Point3<sp/>&amp;pos,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>&amp;bone_idx,<sp/>TMatrix<sp/>&amp;bone_itm);</highlight></codeline>
<codeline lineno="688"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>getBoneForNode(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>node_idx)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="689"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>getNodeForBone(uint32_t<sp/>bone_idx)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="690"><highlight class="normal"></highlight></codeline>
<codeline lineno="691"><highlight class="normal"><sp/><sp/>__forceinline<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*opacity_ptr()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*)(allNodesData.get()<sp/>+<sp/>count<sp/>*<sp/>OPACITY);<sp/>}</highlight></codeline>
<codeline lineno="692"><highlight class="normal"><sp/><sp/>__forceinline<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>*hidden_ptr()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>*)(allNodesData.get()<sp/>+<sp/>count<sp/>*<sp/>HIDDEN);<sp/>}</highlight></codeline>
<codeline lineno="693"><highlight class="normal"></highlight></codeline>
<codeline lineno="694"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>clipNodes(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Frustum<sp/>&amp;frustum,<sp/>dag::Vector&lt;int,<sp/>framemem_allocator&gt;<sp/>&amp;node_list);</highlight></codeline>
<codeline lineno="695"><highlight class="normal"></highlight></codeline>
<codeline lineno="696"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>findRigidNodesWithMaterials(dag::ConstSpan&lt;const<sp/>char<sp/>*&gt;<sp/>material_names,</highlight></codeline>
<codeline lineno="697"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>eastl::fixed_function&lt;2<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*),<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)&gt;<sp/>&amp;cb)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="698"><highlight class="normal"></highlight></codeline>
<codeline lineno="699"><highlight class="normal"><sp/><sp/>uint32_t<sp/>getUniqueId()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>uniqueId;<sp/>}</highlight></codeline>
<codeline lineno="700"><highlight class="normal"></highlight></codeline>
<codeline lineno="701"><highlight class="normal"></highlight><highlight class="keyword">protected</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="702"><highlight class="normal"><sp/><sp/>Ptr&lt;DynamicRenderableSceneResource&gt;<sp/>sceneResource;</highlight></codeline>
<codeline lineno="703"><highlight class="normal"><sp/><sp/>Ptr&lt;DynamicRenderableSceneLodsResource&gt;<sp/>lods;</highlight></codeline>
<codeline lineno="704"><highlight class="normal"></highlight></codeline>
<codeline lineno="705"><highlight class="normal"><sp/><sp/>eastl::unique_ptr&lt;uint8_t[]&gt;<sp/>allNodesData;</highlight></codeline>
<codeline lineno="706"><highlight class="normal"><sp/><sp/>uint32_t<sp/>count<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="707"><highlight class="normal"><sp/><sp/>int8_t<sp/>curLodNo<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="708"><highlight class="normal"><sp/><sp/>int8_t<sp/>forceLod<sp/>=<sp/>-1;<sp/></highlight><highlight class="comment">//<sp/>-1<sp/>for<sp/>not<sp/>forcing</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="709"><highlight class="normal"><sp/><sp/>int8_t<sp/>bestLodLimit<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="710"><highlight class="normal"><sp/><sp/>uint8_t<sp/>autoCalcBBox<sp/>:<sp/>1,<sp/>disableAutoChooseLod<sp/>:<sp/>1,<sp/>instanceActive<sp/>:<sp/>1,<sp/>_resv<sp/>:<sp/>5;</highlight></codeline>
<codeline lineno="711"><highlight class="normal"></highlight></codeline>
<codeline lineno="712"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>distSq<sp/>=<sp/>0.0f;</highlight></codeline>
<codeline lineno="713"><highlight class="normal"></highlight></codeline>
<codeline lineno="714"><highlight class="normal"><sp/><sp/>Point3<sp/>origin;</highlight></codeline>
<codeline lineno="715"><highlight class="normal"><sp/><sp/>Point3<sp/>originPrev;</highlight></codeline>
<codeline lineno="716"><highlight class="normal"><sp/><sp/>BBox3<sp/>bbox;</highlight></codeline>
<codeline lineno="717"><highlight class="normal"></highlight></codeline>
<codeline lineno="718"><highlight class="normal"><sp/><sp/>uint32_t<sp/>uniqueId;</highlight></codeline>
<codeline lineno="719"><highlight class="normal"></highlight></codeline>
<codeline lineno="720"><highlight class="normal"><sp/><sp/>NodeCollapserBits<sp/>nodeCollapserBits;</highlight></codeline>
<codeline lineno="721"><highlight class="normal"></highlight></codeline>
<codeline lineno="722"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>Offsets</highlight></codeline>
<codeline lineno="723"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="724"><highlight class="normal"><sp/><sp/><sp/><sp/>CUR_WTM<sp/>=<sp/>0,</highlight></codeline>
<codeline lineno="725"><highlight class="normal"><sp/><sp/><sp/><sp/>PREV_WTM<sp/>=<sp/>CUR_WTM<sp/>+<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(TMatrix),</highlight></codeline>
<codeline lineno="726"><highlight class="normal"><sp/><sp/><sp/><sp/>ORIGIN_VEC<sp/>=<sp/>PREV_WTM<sp/>+<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(TMatrix),</highlight></codeline>
<codeline lineno="727"><highlight class="normal"><sp/><sp/><sp/><sp/>PREV_ORIGIN_VEC<sp/>=<sp/>ORIGIN_VEC<sp/>+<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(Point3),</highlight></codeline>
<codeline lineno="728"><highlight class="normal"><sp/><sp/><sp/><sp/>OPACITY<sp/>=<sp/>PREV_ORIGIN_VEC<sp/>+<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(Point3),</highlight></codeline>
<codeline lineno="729"><highlight class="normal"><sp/><sp/><sp/><sp/>HIDDEN<sp/>=<sp/>OPACITY<sp/>+<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(float),</highlight></codeline>
<codeline lineno="730"><highlight class="normal"><sp/><sp/><sp/><sp/>ALL_DATA_SIZE<sp/>=<sp/>HIDDEN<sp/>+<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="731"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="732"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>curWtm<sp/>=<sp/>CUR_WTM;</highlight></codeline>
<codeline lineno="733"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>prevWtm<sp/>=<sp/>PREV_WTM;</highlight></codeline>
<codeline lineno="734"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>curOrig<sp/>=<sp/>ORIGIN_VEC;</highlight></codeline>
<codeline lineno="735"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>prevOrig<sp/>=<sp/>PREV_ORIGIN_VEC;</highlight></codeline>
<codeline lineno="736"><highlight class="normal"></highlight></codeline>
<codeline lineno="737"><highlight class="normal"><sp/><sp/>__forceinline<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TMatrix<sp/>*nodeWtm_ptr()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TMatrix<sp/>*)(allNodesData.get()<sp/>+<sp/>count<sp/>*<sp/>curWtm);<sp/>}</highlight></codeline>
<codeline lineno="738"><highlight class="normal"><sp/><sp/>__forceinline<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TMatrix<sp/>*nodePrevWtm_ptr()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TMatrix<sp/>*)(allNodesData.get()<sp/>+<sp/>count<sp/>*<sp/>prevWtm);<sp/>}</highlight></codeline>
<codeline lineno="739"><highlight class="normal"><sp/><sp/>__forceinline<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Point3<sp/>*wtmToOriginVec_ptr()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Point3<sp/>*)(allNodesData.get()<sp/>+<sp/>count<sp/>*<sp/>curOrig);<sp/>}</highlight></codeline>
<codeline lineno="740"><highlight class="normal"><sp/><sp/>__forceinline<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Point3<sp/>*wtmToOriginVecPrev_ptr()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Point3<sp/>*)(allNodesData.get()<sp/>+<sp/>count<sp/>*<sp/>prevOrig);<sp/>}</highlight></codeline>
<codeline lineno="741"><highlight class="normal"></highlight></codeline>
<codeline lineno="742"><highlight class="normal"><sp/><sp/>TMatrix<sp/>*nodeWtm_ptr()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(TMatrix<sp/>*)(allNodesData.get()<sp/>+<sp/>count<sp/>*<sp/>curWtm);<sp/>}</highlight></codeline>
<codeline lineno="743"><highlight class="normal"><sp/><sp/>TMatrix<sp/>*nodePrevWtm_ptr()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(TMatrix<sp/>*)(allNodesData.get()<sp/>+<sp/>count<sp/>*<sp/>prevWtm);<sp/>}</highlight></codeline>
<codeline lineno="744"><highlight class="normal"><sp/><sp/>Point3<sp/>*wtmToOriginVec_ptr()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(Point3<sp/>*)(allNodesData.get()<sp/>+<sp/>count<sp/>*<sp/>curOrig);<sp/>}</highlight></codeline>
<codeline lineno="745"><highlight class="normal"><sp/><sp/>Point3<sp/>*wtmToOriginVecPrev_ptr()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(Point3<sp/>*)(allNodesData.get()<sp/>+<sp/>count<sp/>*<sp/>prevOrig);<sp/>}</highlight></codeline>
<codeline lineno="746"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*opacity_ptr()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*)(allNodesData.get()<sp/>+<sp/>count<sp/>*<sp/>OPACITY);<sp/>}</highlight></codeline>
<codeline lineno="747"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>*hidden_ptr()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>*)(allNodesData.get()<sp/>+<sp/>count<sp/>*<sp/>HIDDEN);<sp/>}</highlight></codeline>
<codeline lineno="748"><highlight class="normal"></highlight></codeline>
<codeline lineno="749"><highlight class="normal"><sp/><sp/>dag::ConstSpan&lt;TMatrix&gt;<sp/>nodeWtm()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>dag::ConstSpan&lt;TMatrix&gt;(nodeWtm_ptr(),<sp/>count);<sp/>}</highlight></codeline>
<codeline lineno="750"><highlight class="normal"><sp/><sp/>dag::ConstSpan&lt;TMatrix&gt;<sp/>nodePrevWtm()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>dag::ConstSpan&lt;TMatrix&gt;(nodePrevWtm_ptr(),<sp/>count);<sp/>}</highlight></codeline>
<codeline lineno="751"><highlight class="normal"><sp/><sp/>dag::ConstSpan&lt;Point3&gt;<sp/>wtmToOriginVec()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>dag::ConstSpan&lt;Point3&gt;(wtmToOriginVec_ptr(),<sp/>count);<sp/>}</highlight></codeline>
<codeline lineno="752"><highlight class="normal"><sp/><sp/>dag::ConstSpan&lt;Point3&gt;<sp/>wtmToOriginVecPrev()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>dag::ConstSpan&lt;Point3&gt;(wtmToOriginVecPrev_ptr(),<sp/>count);<sp/>}</highlight></codeline>
<codeline lineno="753"><highlight class="normal"><sp/><sp/>dag::ConstSpan&lt;float&gt;<sp/>opacity()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>dag::ConstSpan&lt;float&gt;(opacity_ptr(),<sp/>count);<sp/>}</highlight></codeline>
<codeline lineno="754"><highlight class="normal"><sp/><sp/>dag::ConstSpan&lt;bool&gt;<sp/>hidden()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>dag::ConstSpan&lt;bool&gt;(hidden_ptr(),<sp/>count);<sp/>}</highlight></codeline>
<codeline lineno="755"><highlight class="normal"></highlight></codeline>
<codeline lineno="756"><highlight class="normal"><sp/><sp/>dag::Span&lt;TMatrix&gt;<sp/>nodeWtm()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>dag::Span&lt;TMatrix&gt;(nodeWtm_ptr(),<sp/>count);<sp/>}</highlight></codeline>
<codeline lineno="757"><highlight class="normal"><sp/><sp/>dag::Span&lt;TMatrix&gt;<sp/>nodePrevWtm()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>dag::Span&lt;TMatrix&gt;(nodePrevWtm_ptr(),<sp/>count);<sp/>}</highlight></codeline>
<codeline lineno="758"><highlight class="normal"><sp/><sp/>dag::Span&lt;Point3&gt;<sp/>wtmToOriginVec()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>dag::Span&lt;Point3&gt;(wtmToOriginVec_ptr(),<sp/>count);<sp/>}</highlight></codeline>
<codeline lineno="759"><highlight class="normal"><sp/><sp/>dag::Span&lt;Point3&gt;<sp/>wtmToOriginVecPrev()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>dag::Span&lt;Point3&gt;(wtmToOriginVecPrev_ptr(),<sp/>count);<sp/>}</highlight></codeline>
<codeline lineno="760"><highlight class="normal"><sp/><sp/>dag::Span&lt;float&gt;<sp/>opacity()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>dag::Span&lt;float&gt;(opacity_ptr(),<sp/>count);<sp/>}</highlight></codeline>
<codeline lineno="761"><highlight class="normal"><sp/><sp/>dag::Span&lt;bool&gt;<sp/>hidden()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>dag::Span&lt;bool&gt;(hidden_ptr(),<sp/>count);<sp/>}</highlight></codeline>
<codeline lineno="762"><highlight class="normal">};</highlight></codeline>
<codeline lineno="763"><highlight class="normal"></highlight></codeline>
<codeline lineno="764"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>DynamicRenderableSceneInstance::setCurrentLod(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>lod)</highlight></codeline>
<codeline lineno="765"><highlight class="normal">{</highlight></codeline>
<codeline lineno="766"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(validateLod(uint32_t(lod)))</highlight></codeline>
<codeline lineno="767"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="768"><highlight class="normal"><sp/><sp/><sp/><sp/>lods-&gt;updateReqLod(lod);</highlight></codeline>
<codeline lineno="769"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(lod<sp/>&lt;<sp/>lods-&gt;getQlBestLod())</highlight></codeline>
<codeline lineno="770"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>lod<sp/>=<sp/>lods-&gt;getQlBestLod();</highlight></codeline>
<codeline lineno="771"><highlight class="normal"><sp/><sp/><sp/><sp/>sceneResource<sp/>=<sp/>lods-&gt;lods[curLodNo<sp/>=<sp/>lod].scene;</highlight></codeline>
<codeline lineno="772"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="773"><highlight class="normal">}</highlight></codeline>
<codeline lineno="774"><highlight class="normal"></highlight></codeline>
<codeline lineno="775"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>DynamicRenderableSceneInstance::validateLod(uint32_t<sp/>lod)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="776"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="777"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Due<sp/>to<sp/>C++<sp/>standard<sp/>conversions,<sp/>a<sp/>negative<sp/>value<sp/>passed<sp/>to<sp/>this<sp/>function<sp/>will<sp/>be<sp/>above<sp/>0x80000000<sp/>unsigned</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="778"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>https://docs.microsoft.com/en-us/cpp/cpp/standard-conversions?view=vs-2019#integral-conversions</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="779"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>lod<sp/>&lt;<sp/>lods-&gt;lods.size();</highlight></codeline>
<codeline lineno="780"><highlight class="normal">}</highlight></codeline>
<codeline lineno="781"><highlight class="normal"></highlight></codeline>
<codeline lineno="782"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DynamicRenderableSceneLodsResourceClassName<sp/>&quot;dynobj&quot;</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="dag_dynSceneRes.h"/>
  </compounddef>
</doxygen>
