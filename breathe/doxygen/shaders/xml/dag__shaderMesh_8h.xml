<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.7" xml:lang="en-US">
  <compounddef id="dag__shaderMesh_8h" kind="file" language="C++">
    <compoundname>dag_shaderMesh.h</compoundname>
    <includes local="no">3d/dag_texMgr.h</includes>
    <includes local="no">drv/3d/dag_draw.h</includes>
    <includes local="no">drv/3d/dag_driver.h</includes>
    <includes local="no">drv/3d/dag_buffers.h</includes>
    <includes local="no">generic/dag_DObject.h</includes>
    <includes local="no">generic/dag_patchTab.h</includes>
    <includes local="no">generic/dag_smallTab.h</includes>
    <includes local="no">memory/dag_mem.h</includes>
    <includes refid="dag__shaders_8h" local="no">shaders/dag_shaders.h</includes>
    <includes local="no">util/dag_stdint.h</includes>
    <includes local="no">util/dag_globDef.h</includes>
    <includedby refid="dag__instShaderMeshRes_8h" local="no">dag_instShaderMeshRes.h</includedby>
    <includedby refid="dag__renderScene_8h" local="no">dag_renderScene.h</includedby>
    <includedby refid="dag__shSkinMesh_8h" local="no">dag_shSkinMesh.h</includedby>
    <includedby refid="dag__shaderResUnitedData_8h" local="no">dag_shaderResUnitedData.h</includedby>
    <includedby refid="dag__shadersRes_8h" local="no">dag_shadersRes.h</includedby>
    <incdepgraph>
      <node id="19">
        <label>shaders/dag_bindumpReloadListener.h</label>
        <link refid="dag__bindumpReloadListener_8h_source"/>
      </node>
      <node id="12">
        <label>shaders/dag_shaderCommon.h</label>
        <link refid="dag__shaderCommon_8h_source"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>dag_shaderMesh.h</label>
        <link refid="dag__shaderMesh_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
      </node>
      <node id="16">
        <label>shaders/dag_shaderVar.h</label>
        <link refid="dag__shaderVar_8h_source"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
      </node>
      <node id="15">
        <label>shaders/dag_shaderVarType.h</label>
        <link refid="dag__shaderVarType_8h_source"/>
      </node>
      <node id="18">
        <label>shaders/dag_shaderVariableInfo.h</label>
        <link refid="dag__shaderVariableInfo_8h_source"/>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
      </node>
      <node id="10">
        <label>shaders/dag_shaders.h</label>
        <link refid="dag__shaders_8h_source"/>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
      </node>
      <node id="27">
        <label>shaders/dag_stcode.h</label>
        <link refid="dag__stcode_8h_source"/>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>3d/dag_texMgr.h</label>
      </node>
      <node id="11">
        <label>EASTL/fixed_function.h</label>
      </node>
      <node id="31">
        <label>EASTL/optional.h</label>
      </node>
      <node id="29">
        <label>EASTL/string.h</label>
      </node>
      <node id="30">
        <label>EASTL/string_view.h</label>
      </node>
      <node id="5">
        <label>drv/3d/dag_buffers.h</label>
      </node>
      <node id="13">
        <label>drv/3d/dag_consts.h</label>
      </node>
      <node id="28">
        <label>drv/3d/dag_d3dResource.h</label>
      </node>
      <node id="3">
        <label>drv/3d/dag_draw.h</label>
      </node>
      <node id="4">
        <label>drv/3d/dag_driver.h</label>
      </node>
      <node id="17">
        <label>drv/3d/dag_samplerHandle.h</label>
      </node>
      <node id="6">
        <label>generic/dag_DObject.h</label>
      </node>
      <node id="32">
        <label>generic/dag_fixedMoveOnlyFunction.h</label>
      </node>
      <node id="7">
        <label>generic/dag_patchTab.h</label>
      </node>
      <node id="8">
        <label>generic/dag_smallTab.h</label>
      </node>
      <node id="14">
        <label>generic/dag_span.h</label>
      </node>
      <node id="24">
        <label>math/dag_Point2.h</label>
      </node>
      <node id="21">
        <label>math/dag_check_nan.h</label>
      </node>
      <node id="25">
        <label>math/dag_dxmath_forward.h</label>
      </node>
      <node id="23">
        <label>math/integer/dag_IPoint4.h</label>
      </node>
      <node id="9">
        <label>memory/dag_mem.h</label>
      </node>
      <node id="20">
        <label>stdint.h</label>
      </node>
      <node id="33">
        <label>util/dag_globDef.h</label>
      </node>
      <node id="34">
        <label>util/dag_stdint.h</label>
      </node>
      <node id="26">
        <label>util/dag_string.h</label>
      </node>
      <node id="22">
        <label>vecmath/dag_vecMathDecl.h</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="7">
        <label>dag_dynSceneRes.h</label>
        <link refid="dag__dynSceneRes_8h_source"/>
      </node>
      <node id="2">
        <label>dag_instShaderMeshRes.h</label>
        <link refid="dag__instShaderMeshRes_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>dag_rendInstRes.h</label>
        <link refid="dag__rendInstRes_8h_source"/>
      </node>
      <node id="4">
        <label>dag_renderScene.h</label>
        <link refid="dag__renderScene_8h_source"/>
      </node>
      <node id="5">
        <label>dag_shSkinMesh.h</label>
        <link refid="dag__shSkinMesh_8h_source"/>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>dag_shaderMesh.h</label>
        <link refid="dag__shaderMesh_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>dag_shaderResUnitedData.h</label>
        <link refid="dag__shaderResUnitedData_8h_source"/>
      </node>
      <node id="6">
        <label>dag_shadersRes.h</label>
        <link refid="dag__shadersRes_8h_source"/>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
    <innerclass refid="classGlobalVertexData" prot="public">GlobalVertexData</innerclass>
    <innerclass refid="classShaderMatVdata" prot="public">ShaderMatVdata</innerclass>
    <innerclass refid="structShaderMatVdata_1_1ModelLoadStats" prot="public">ShaderMatVdata::ModelLoadStats</innerclass>
    <innerclass refid="structShaderMatVdata_1_1MatVdataSrc" prot="protected">ShaderMatVdata::MatVdataSrc</innerclass>
    <innerclass refid="structShaderMatVdata_1_1VdataSrcRef" prot="protected">ShaderMatVdata::VdataSrcRef</innerclass>
    <innerclass refid="classShaderMesh" prot="public">ShaderMesh</innerclass>
    <innerclass refid="structShaderMesh_1_1RElem" prot="public">ShaderMesh::RElem</innerclass>
    <innernamespace refid="namespaceunitedvdata">unitedvdata</innernamespace>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="dag__shaderMesh_8h_1abc5c98fcc1211af2b80116dd6e0a035d" prot="public" static="no" strong="no">
        <type></type>
        <name></name>
        <enumvalue id="dag__shaderMesh_8h_1abc5c98fcc1211af2b80116dd6e0a035dae2cadba5903ae767057f8cba32c79c36" prot="public">
          <name>VDATA_D3D_RESET_READY</name>
          <initializer>= 0x01</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="dag__shaderMesh_8h_1abc5c98fcc1211af2b80116dd6e0a035daafd9dd33b3af041775ae06b47ba01385" prot="public">
          <name>VDATA_NO_IB</name>
          <initializer>= 0x08</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="dag__shaderMesh_8h_1abc5c98fcc1211af2b80116dd6e0a035da72382fd320432b4404767a13c6cac757" prot="public">
          <name>VDATA_NO_VB</name>
          <initializer>= 0x10</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="dag__shaderMesh_8h_1abc5c98fcc1211af2b80116dd6e0a035da53030d24de01232863807fe4736289f8" prot="public">
          <name>VDATA_NO_IBVB</name>
          <initializer>= 0x18</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="dag__shaderMesh_8h_1abc5c98fcc1211af2b80116dd6e0a035dada3f1fe0787ac8ea0b22acee20eb01aa" prot="public">
          <name>VDATA_I16</name>
          <initializer>= 0x20</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="dag__shaderMesh_8h_1abc5c98fcc1211af2b80116dd6e0a035dab83f2c1380829322ed89decd19d9caaf" prot="public">
          <name>VDATA_I32</name>
          <initializer>= 0x40</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="dag__shaderMesh_8h_1abc5c98fcc1211af2b80116dd6e0a035da0acc58350aa4a425563dd27407623330" prot="public">
          <name>VDATA_IAUTO</name>
          <initializer>= 0x00</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="dag__shaderMesh_8h_1abc5c98fcc1211af2b80116dd6e0a035da66db14c9dd8e2e915fd37eb2ea0e4b3c" prot="public">
          <name>VDATA_VB_DYNAMIC</name>
          <initializer>= 0x80</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="dag__shaderMesh_8h_1abc5c98fcc1211af2b80116dd6e0a035dac4f482498833afefa9e5ed08e90d85e2" prot="public">
          <name>VDATA_SRC_ONLY</name>
          <initializer>= 0x100</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="dag__shaderMesh_8h_1abc5c98fcc1211af2b80116dd6e0a035da879411ab8da525c76417597b94192f87" prot="public">
          <name>VDATA_PACKED_IB</name>
          <initializer>= 0x200</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="dag__shaderMesh_8h_1abc5c98fcc1211af2b80116dd6e0a035da9598c1f10540eea64e188aa92bcd80ea" prot="public">
          <name>VDATA_BIND_SHADER_RES</name>
          <initializer>= 0x400</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="dag__shaderMesh_8h_1abc5c98fcc1211af2b80116dd6e0a035dae8944e88149b94f8f527537bd2511e97" prot="public">
          <name>VDATA_LOD_MASK</name>
          <initializer>= 0xF000</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dag_shaderMesh.h" line="41" column="1" bodyfile="dag_shaderMesh.h" bodystart="42" bodyend="57"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="dag__shaderMesh_8h_1a2382475b1a5bba465165826bc98a96c0" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classShaderMaterial" kindref="compound">ShaderMaterial</ref> *</type>
        <definition>ShaderMaterial * replace_shader_mat</definition>
        <argsstring>(T &amp;mesh, ShaderMaterial *prev_m, Tab&lt; ShaderMaterial * &gt; &amp;old_mat, Tab&lt; ShaderMaterial * &gt; &amp;new_mat)</argsstring>
        <name>replace_shader_mat</name>
        <param>
          <type>T &amp;</type>
          <declname>mesh</declname>
        </param>
        <param>
          <type><ref refid="classShaderMaterial" kindref="compound">ShaderMaterial</ref> *</type>
          <declname>prev_m</declname>
        </param>
        <param>
          <type>Tab&lt; <ref refid="classShaderMaterial" kindref="compound">ShaderMaterial</ref> * &gt; &amp;</type>
          <declname>old_mat</declname>
        </param>
        <param>
          <type>Tab&lt; <ref refid="classShaderMaterial" kindref="compound">ShaderMaterial</ref> * &gt; &amp;</type>
          <declname>new_mat</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dag_shaderMesh.h" line="528" column="23" bodyfile="dag_shaderMesh.h" bodystart="528" bodyend="534"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Dagor<sp/>Engine<sp/>6.5</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Copyright<sp/>(C)<sp/>Gaijin<sp/>Games<sp/>KFT.<sp/><sp/>All<sp/>rights<sp/>reserved.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>once</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="comment">/************************************************************************</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/><sp/>shader<sp/>mesh<sp/>&amp;<sp/>mesh<sp/>data<sp/>classes</highlight></codeline>
<codeline lineno="9"><highlight class="comment">************************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;3d/dag_texMgr.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;drv/3d/dag_draw.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;drv/3d/dag_driver.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;drv/3d/dag_buffers.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;generic/dag_DObject.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;generic/dag_patchTab.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;generic/dag_smallTab.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;memory/dag_mem.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;shaders/dag_shaders.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;util/dag_stdint.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;util/dag_globDef.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">IGenSave;</highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">IGenLoad;</highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">VertToFaceVertMap;</highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">Mesh;</highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">DynamicRenderableSceneLodsResource;</highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">RenderableInstanceLodsResource;</highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>RES&gt;</highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classShaderResUnitedVdata" kindref="compound">ShaderResUnitedVdata</ref>;</highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">unitedvdata</highlight></codeline>
<codeline lineno="35"><highlight class="normal">{</highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">BufPool;</highlight></codeline>
<codeline lineno="37"><highlight class="normal">}</highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">ShaderMeshDataSaveCB;</highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="keyword">enum</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal">{</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/>VDATA_D3D_RESET_READY<sp/>=<sp/>0x01,<sp/></highlight><highlight class="comment">//<sp/>vdata<sp/>can<sp/>survive<sp/>d3d<sp/>reset<sp/>using<sp/>reload<sp/>or<sp/>reset<sp/>callback,<sp/>buffers<sp/>use<sp/>SBCF_MAYBELOST</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/>VDATA_NO_IB<sp/>=<sp/>0x08,</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/>VDATA_NO_VB<sp/>=<sp/>0x10,</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/>VDATA_NO_IBVB<sp/>=<sp/>0x18,</highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/>VDATA_I16<sp/>=<sp/>0x20,<sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>index<sp/>buffer<sp/>is<sp/>16<sp/>bit</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/>VDATA_I32<sp/>=<sp/>0x40,<sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>index<sp/>buffer<sp/>is<sp/>32<sp/>bit</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/>VDATA_IAUTO<sp/>=<sp/>0x00,<sp/></highlight><highlight class="comment">//<sp/>index<sp/>buffer<sp/>type<sp/>will<sp/>depend<sp/>on<sp/>vertexnumber</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/>VDATA_VB_DYNAMIC<sp/>=<sp/>0x80,</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/>VDATA_SRC_ONLY<sp/>=<sp/>0x100,</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/>VDATA_PACKED_IB<sp/>=<sp/>0x200,</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/>VDATA_BIND_SHADER_RES<sp/>=<sp/>0x400,</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/>VDATA_LOD_MASK<sp/>=<sp/>0xF000,</highlight></codeline>
<codeline lineno="57"><highlight class="normal">};</highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight><highlight class="comment">/*********************************</highlight></codeline>
<codeline lineno="60"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="61"><highlight class="comment"><sp/>*<sp/>class<sp/>GlobalVertexData</highlight></codeline>
<codeline lineno="62"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="63"><highlight class="comment"><sp/>*********************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="64" refid="classGlobalVertexData" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classGlobalVertexData" kindref="compound">GlobalVertexData</ref></highlight></codeline>
<codeline lineno="65"><highlight class="normal">{</highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>access<sp/>atributes</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>Vbuffer<sp/>*getVB()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>vb;<sp/>};</highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*getIBMem()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="71"><highlight class="keyword"><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/>G_ASSERT((cflags<sp/>&amp;<sp/>VDATA_NO_IB));</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ibMem;</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Index&gt;</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Index<sp/>*getIBMem(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>si,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>numf)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="77"><highlight class="keyword"><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/>G_ASSERT_RETURN((cflags<sp/>&amp;<sp/>VDATA_NO_IB),<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/>G_ASSERTF_RETURN(ibMem<sp/>&amp;&amp;<sp/>(si<sp/>+<sp/>numf<sp/>*<sp/>3)<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(Index)<sp/>&lt;=<sp/>*(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>*)ibMem,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;ibMem=%p<sp/>(%d<sp/>bytes)<sp/>si=%d<sp/>numf=%d&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ibMem,<sp/>ibMem<sp/>?<sp/>*(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*)ibMem<sp/>:<sp/>0,<sp/>si,<sp/>numf);</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="keyword">const<sp/></highlight><highlight class="normal">Index<sp/>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(1<sp/>+<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*)ibMem)<sp/>+<sp/>si;<sp/></highlight><highlight class="comment">//-V769</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*getVBMem()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="85"><highlight class="keyword"><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/>G_ASSERT((cflags<sp/>&amp;<sp/>VDATA_NO_VB));</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>vbMem;</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Vertex&gt;</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Vertex<sp/>*getVBMem(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>base_v,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>sv,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>numv)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="91"><highlight class="keyword"><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/>G_ASSERT_RETURN((cflags<sp/>&amp;<sp/>VDATA_NO_VB),<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/>G_ASSERTF_RETURN(vbMem<sp/>&amp;&amp;<sp/>(base_v<sp/>+<sp/>sv<sp/>+<sp/>numv)<sp/>&lt;=<sp/>*(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*)vbMem<sp/>&amp;&amp;<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(Vertex)<sp/>==<sp/>vstride,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;vbMem=%p<sp/>(%d<sp/>vertices)<sp/>base_v=%d<sp/>sv=%d<sp/>numv=%d<sp/>sizeof(Vertex)=%d<sp/>vstride=%d&quot;</highlight><highlight class="normal">,<sp/>vbMem,<sp/>vbMem<sp/>?<sp/>*(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*)vbMem<sp/>:<sp/>0,<sp/>base_v,<sp/>sv,</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>numv,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(Vertex),<sp/>vstride);</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="keyword">const<sp/></highlight><highlight class="normal">Vertex<sp/>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(1<sp/>+<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*)vbMem)<sp/>+<sp/>(base_v<sp/>+<sp/>sv);<sp/></highlight><highlight class="comment">//-V769</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>Ibuffer<sp/>*getIB()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="99"><highlight class="keyword"><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/>G_ASSERT(!(cflags<sp/>&amp;<sp/>VDATA_NO_IB));</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(indices-&gt;getFlags()<sp/>&amp;<sp/>SBCF_BIND_INDEX)</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>indices;</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>G_ASSERT(0);</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="111"><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>getStride()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>vstride;<sp/>}</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>getFlags()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>cflags;<sp/>}</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>testFlags(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>f)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>cflags<sp/>&amp;<sp/>f;<sp/>}</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>getVbSize()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>vCnt<sp/>*<sp/>vstride;<sp/>}</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>getIbElemSz()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>testFlags(VDATA_I32)<sp/>?<sp/>4<sp/>:<sp/>2;<sp/>}</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>getIbSize()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>iCnt<sp/>*<sp/>getIbElemSz();<sp/>}</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>getIbPackedSize()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>iPackedSz;<sp/>}</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>getLodIndex()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(cflags<sp/>&amp;<sp/>VDATA_LOD_MASK)<sp/>&gt;&gt;<sp/>__bsf(VDATA_LOD_MASK);<sp/>}</highlight></codeline>
<codeline lineno="120"><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isRenderable(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>&amp;has_indices)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="122"><highlight class="keyword"><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/>has_indices<sp/>=<sp/>!!indices;</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>!!vb;</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="126"><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>explicit<sp/>constructor</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>initGvd(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*name,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>vNum,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>vStride,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>idxPacked,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>idxSize,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>flags,<sp/>IGenLoad<sp/>*crd,</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/>Tab&lt;uint8_t&gt;<sp/>&amp;tmp_decoder_stor);</highlight></codeline>
<codeline lineno="130"><highlight class="normal"></highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>initGvdMem(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>vertNum,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>vertStride,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>idxSize,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>flags,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*vb_data,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*ib_data);</highlight></codeline>
<codeline lineno="132"><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>explicit<sp/>destructor</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>free();</highlight></codeline>
<codeline lineno="135"><highlight class="normal"></highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>set<sp/>all<sp/>params<sp/>to<sp/>driver</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>setToDriver()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="138"><highlight class="normal"></highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>check<sp/>for<sp/>null<sp/>vertex<sp/>buffer<sp/>if<sp/>it<sp/>needed</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isEmpty()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="141"><highlight class="keyword"><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cflags<sp/>&amp;<sp/>VDATA_NO_IBVB)</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(vCnt<sp/>!=<sp/>0<sp/>&amp;&amp;<sp/>vb<sp/>==<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="148"><highlight class="normal"></highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>unpackToBuffers(IGenLoad<sp/>&amp;zcrd,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>update_ib_vb_only,<sp/>Tab&lt;uint8_t&gt;<sp/>&amp;buf_stor);</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>unpackToSharedBuffer(IGenLoad<sp/>&amp;zcrd,<sp/>Vbuffer<sp/>*shared_vb,<sp/>Ibuffer<sp/>*shared_ib,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>&amp;vb_byte_pos,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>&amp;ib_byte_pos,</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/>Tab&lt;uint8_t&gt;<sp/>&amp;buf_stor);</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>getVbIdx()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>vbIdx;<sp/>}</highlight></codeline>
<codeline lineno="153"><highlight class="normal"></highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>copyDescFrom(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classGlobalVertexData" kindref="compound">GlobalVertexData</ref><sp/>&amp;src)</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/>vbMem<sp/>=<sp/>ibMem<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/>vbIdx<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="158"><highlight class="normal"></highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/>vstride<sp/>=<sp/>src.vstride;</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/>cflags<sp/>=<sp/>src.cflags;</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/>vCnt<sp/>=<sp/>src.vCnt;</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/>iCnt<sp/>=<sp/>src.iCnt;</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/>vOfs<sp/>=<sp/>src.vOfs;</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/>iOfs<sp/>=<sp/>src.iOfs;</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/>iPackedSz<sp/>=<sp/>src.iPackedSz;</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="167"><highlight class="normal"></highlight></codeline>
<codeline lineno="168"><highlight class="normal"></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">union</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/>Vbuffer<sp/>*vb;</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*vbMem;</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">union</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/>Ibuffer<sp/>*indices;</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*ibMem;</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/>uint16_t<sp/>vstride;</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/>uint16_t<sp/>cflags;<sp/></highlight><highlight class="comment">//<sp/>create<sp/>flags</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/>uint32_t<sp/>vCnt<sp/>:<sp/>28,<sp/>vbIdx<sp/>:<sp/>4,<sp/>iCnt,<sp/>vOfs,<sp/>iOfs;</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/>uint32_t<sp/>iPackedSz<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="183"><highlight class="normal"></highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>ctor/dtor</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><ref refid="classGlobalVertexData" kindref="compound">GlobalVertexData</ref>()<sp/>:<sp/>vb(NULL),<sp/>indices(NULL),<sp/>vstride(0),<sp/>cflags(0),<sp/>vCnt(0),<sp/>vbIdx(0),<sp/>iCnt(0),<sp/>vOfs(0),<sp/>iOfs(0)<sp/>{}</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><ref refid="classGlobalVertexData" kindref="compound">~GlobalVertexData</ref>()<sp/>{<sp/>free();<sp/>}</highlight></codeline>
<codeline lineno="187"><highlight class="normal"></highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">friend</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structunitedvdata_1_1BufPool" kindref="compound">unitedvdata::BufPool</ref>;</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>A,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>C&gt;</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">friend</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">dag::Vector;</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>F,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>I&gt;</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">friend</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>eastl::disable_if&lt;I,<sp/>void&gt;::type<sp/>dag::small_vector_default_fill_n(F<sp/>first,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>n);</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>F&gt;</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">friend</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>eastl::destruct_impl(F,<sp/>F,<sp/>eastl::false_type);</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>F&gt;</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">friend</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>eastl::destruct(F<sp/>*);</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">friend</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classShaderResUnitedVdata" kindref="compound">ShaderResUnitedVdata</ref>&lt;RenderableInstanceLodsResource&gt;;</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">friend</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classShaderResUnitedVdata" kindref="compound">ShaderResUnitedVdata</ref>&lt;DynamicRenderableSceneLodsResource&gt;;</highlight></codeline>
<codeline lineno="199"><highlight class="normal">};<sp/></highlight><highlight class="comment">//<sp/>class<sp/>GlobalVertexData</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="200"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="201"><highlight class="normal"></highlight></codeline>
<codeline lineno="202"><highlight class="normal"></highlight></codeline>
<codeline lineno="203" refid="classShaderMatVdata" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classShaderMatVdata" kindref="compound">ShaderMatVdata</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>DObject,<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>Sbuffer::IReloadData</highlight></codeline>
<codeline lineno="204"><highlight class="normal">{</highlight></codeline>
<codeline lineno="205"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/>decl_class_name(<ref refid="classShaderMatVdata" kindref="compound">ShaderMatVdata</ref>);</highlight></codeline>
<codeline lineno="207"><highlight class="normal"></highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="classShaderMatVdata" kindref="compound">ShaderMatVdata</ref><sp/>*create(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>tex_num,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>mat_num,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>vdata_num,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>mvhdr_sz,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>model_type<sp/>=<sp/>0);</highlight></codeline>
<codeline lineno="209"><highlight class="normal"></highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="classShaderMatVdata" kindref="compound">ShaderMatVdata</ref><sp/>*make_tmp_copy(<ref refid="classShaderMatVdata" kindref="compound">ShaderMatVdata</ref><sp/>*smv,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>apply_skip_first_lods_cnt<sp/>=<sp/>-1);</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>update_vdata_from_tmp_copy(<ref refid="classShaderMatVdata" kindref="compound">ShaderMatVdata</ref><sp/>*dest,<sp/><ref refid="classShaderMatVdata" kindref="compound">ShaderMatVdata</ref><sp/>*src);</highlight></codeline>
<codeline lineno="212"><highlight class="normal"></highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>getMaterialCount()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>mat.size();<sp/>}</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="classShaderMaterial" kindref="compound">ShaderMaterial</ref><sp/>*getMaterial(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>idx)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>mat[idx];<sp/>}</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>getGlobVDataCount()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>vdata.size();<sp/>}</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="classGlobalVertexData" kindref="compound">GlobalVertexData</ref><sp/>*getGlobVData(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>idx)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const_cast&lt;</highlight><highlight class="normal"><ref refid="classGlobalVertexData" kindref="compound">GlobalVertexData</ref><sp/>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(&amp;vdata[idx]);<sp/>}</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>setGlobVData(dag::Span&lt;GlobalVertexData&gt;<sp/>vd)<sp/>{<sp/>vdata<sp/>=<sp/>vd;<sp/>}</highlight></codeline>
<codeline lineno="218"><highlight class="normal"></highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>loadTexStr(IGenLoad<sp/>&amp;crd,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>sym_tex,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*base_path<sp/>=<sp/>NULL);</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>loadTexIdx(IGenLoad<sp/>&amp;crd,<sp/>dag::ConstSpan&lt;TEXTUREID&gt;<sp/>texMap);</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>getTexIdx(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classShaderMatVdata" kindref="compound">ShaderMatVdata</ref><sp/>&amp;other_smvd);</highlight></codeline>
<codeline lineno="222"><highlight class="normal"></highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>makeTexAndMat(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>DataBlock<sp/>&amp;texBlk,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>DataBlock<sp/>&amp;matBlk);</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>loadMatVdata(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*name,<sp/>IGenLoad<sp/>&amp;crd,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>flags);</highlight></codeline>
<codeline lineno="225"><highlight class="normal"></highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>preloadTex();</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>finalizeMatRefs();</highlight></codeline>
<codeline lineno="228"><highlight class="normal"></highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>unpackBuffersTo(dag::Span&lt;Sbuffer<sp/>*&gt;<sp/>buf,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*buf_byte_ofs,<sp/>dag::Span&lt;int&gt;<sp/>start_end_stride,<sp/>Tab&lt;uint8_t&gt;<sp/>&amp;buf_stor);</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>clearVdataSrc();</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isReloadable()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>matVdataSrcRef.fname<sp/>!=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="232"><highlight class="normal"></highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>areLodsSplit()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>lodsAreSplit;<sp/>}</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>setLodsAreSplit()<sp/>{<sp/>lodsAreSplit<sp/>=<sp/>1;<sp/>}</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>applyFirstLodsSkippedCount(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>skip_first_lods_cnt)</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(skip_first_lods_cnt<sp/>&gt;<sp/>0<sp/>&amp;&amp;<sp/>areLodsSplit())</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>vdataFullCount;<sp/>i++)</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((vdata.data()<sp/>+<sp/>i)-&gt;getLodIndex()<sp/>&lt;<sp/>skip_first_lods_cnt)</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vdata.set(vdata.data(),<sp/>i);</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;<sp/>i<sp/>&lt;<sp/>vdataFullCount;<sp/>i++)</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(vdata.data()<sp/>+<sp/>i)-&gt;free();</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/>vdata.set(vdata.data(),<sp/>vdataFullCount);</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="248"><highlight class="normal"></highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>closeTlsReloadCrd();</highlight></codeline>
<codeline lineno="250"><highlight class="normal"></highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cmp_src_file_and_ofs(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classShaderMatVdata" kindref="compound">ShaderMatVdata</ref><sp/>&amp;a,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classShaderMatVdata" kindref="compound">ShaderMatVdata</ref><sp/>&amp;b)</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>a.matVdataSrcRef.fname<sp/>==<sp/>b.matVdataSrcRef.fname<sp/>?<sp/>int(a.matVdataSrcRef.fileOfs<sp/>-<sp/>b.matVdataSrcRef.fileOfs)</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>int(a.matVdataSrcRef.fname<sp/>-<sp/>b.matVdataSrcRef.fname);</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="256"><highlight class="normal"></highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Sbuffer::IReloadData</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>reloadD3dRes(Sbuffer<sp/>*)<sp/></highlight><highlight class="keyword">override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>destroySelf()</highlight><highlight class="keyword"><sp/>override<sp/></highlight><highlight class="normal">{}</highlight></codeline>
<codeline lineno="260"><highlight class="normal"></highlight></codeline>
<codeline lineno="261" refid="structShaderMatVdata_1_1ModelLoadStats" refkind="compound"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structShaderMatVdata_1_1ModelLoadStats" kindref="compound">ModelLoadStats</ref></highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>reloadTimeMsec<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>reloadDataSizeKb<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>reloadDataCount<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structShaderMatVdata_1_1ModelLoadStats" kindref="compound">ModelLoadStats</ref><sp/>&amp;get_model_load_stats(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>model_type)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>modelLoadStats[model_type<sp/>&lt;=<sp/>2<sp/>?<sp/>model_type<sp/>:<sp/>0];<sp/>}</highlight></codeline>
<codeline lineno="268"><highlight class="normal"></highlight></codeline>
<codeline lineno="269"><highlight class="normal"></highlight><highlight class="keyword">protected</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>ModelLoadStats<sp/>modelLoadStats[1<sp/>+<sp/>2];</highlight></codeline>
<codeline lineno="271"><highlight class="normal"></highlight></codeline>
<codeline lineno="272"><highlight class="normal"></highlight><highlight class="keyword">protected</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><ref refid="classShaderMatVdata" kindref="compound">ShaderMatVdata</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>tex_num,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>mat_num,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>vdata_num,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>mvhdr_sz,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>model_type);</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><ref refid="classShaderMatVdata" kindref="compound">~ShaderMatVdata</ref>();</highlight></codeline>
<codeline lineno="275"><highlight class="normal"></highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/>dag::Span&lt;TEXTUREID&gt;<sp/>tex;</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/>dag::Span&lt;ShaderMaterial<sp/>*&gt;<sp/>mat;</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/>dag::Span&lt;GlobalVertexData&gt;<sp/>vdata;</highlight></codeline>
<codeline lineno="279" refid="structShaderMatVdata_1_1MatVdataSrc" refkind="compound"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structShaderMatVdata_1_1MatVdataSrc" kindref="compound">MatVdataSrc</ref><sp/></highlight><highlight class="comment">//<sp/>Note:<sp/>vector-like<sp/>class<sp/>that<sp/>does<sp/>`tryAlloc`<sp/>on<sp/>`resize`</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">value_type<sp/>=<sp/>uint8_t;</highlight></codeline>
<codeline lineno="282"><highlight class="normal"></highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structShaderMatVdata_1_1MatVdataSrc" kindref="compound">MatVdataSrc</ref>()<sp/>=<sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structShaderMatVdata_1_1MatVdataSrc" kindref="compound">MatVdataSrc</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structShaderMatVdata_1_1MatVdataSrc" kindref="compound">MatVdataSrc</ref><sp/>&amp;)<sp/>=<sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structShaderMatVdata_1_1MatVdataSrc" kindref="compound">MatVdataSrc</ref><sp/>&amp;operator=(<ref refid="structShaderMatVdata_1_1MatVdataSrc" kindref="compound">MatVdataSrc</ref><sp/>&amp;&amp;o)</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>eastl::swap(ptr,<sp/>o.ptr);</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>eastl::swap(count,<sp/>o.count);</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structShaderMatVdata_1_1MatVdataSrc" kindref="compound">~MatVdataSrc</ref>()</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ptr)</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">[]<sp/>ptr;</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>empty()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>!count;<sp/>}</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>size()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>count;<sp/>}</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>resize(uint32_t<sp/>sz)</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">[]<sp/>ptr;</highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ptr<sp/>=<sp/>sz<sp/>?<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>(std::nothrow)<sp/>uint8_t[sz]<sp/>:<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;<sp/></highlight><highlight class="comment">//<sp/>Note:<sp/>tryAlloc</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>count<sp/>=<sp/>ptr<sp/>?<sp/>sz<sp/>:<sp/>0;</highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>!!ptr;</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/>*data()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ptr;<sp/>}</highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>clear()</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">[]<sp/>ptr;</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ptr<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>count<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="312"><highlight class="normal"></highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/>*ptr<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>count<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/>}<sp/>matVdataSrc;</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>matVdataHdrSz;</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>lodsAreSplit<sp/>:<sp/>1,<sp/>modelType<sp/>:<sp/>2,<sp/>_resv<sp/>:<sp/>21,<sp/>vdataFullCount<sp/>:<sp/>8;</highlight></codeline>
<codeline lineno="319" refid="structShaderMatVdata_1_1VdataSrcRef" refkind="compound"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structShaderMatVdata_1_1VdataSrcRef" kindref="compound">VdataSrcRef</ref></highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*fname;</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>fileOfs;</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>dataSz<sp/>:<sp/>26,<sp/>comprType<sp/>:<sp/>3,<sp/>packTag<sp/>:<sp/>3;</highlight></codeline>
<codeline lineno="324"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>!_TARGET_64BIT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>_pad<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="326"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structShaderMatVdata_1_1VdataSrcRef" kindref="compound">VdataSrcRef</ref>()<sp/>:<sp/>fname(</highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">),<sp/>fileOfs(0),<sp/>dataSz(0),<sp/>comprType(0),<sp/>packTag(0)<sp/>{}</highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/>}<sp/>matVdataSrcRef;</highlight></codeline>
<codeline lineno="329"><highlight class="normal"></highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">MatVdataHdr;</highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">TexStrHdr;</highlight></codeline>
<codeline lineno="332"><highlight class="normal">};</highlight></codeline>
<codeline lineno="333"><highlight class="normal"></highlight></codeline>
<codeline lineno="334"><highlight class="normal"></highlight></codeline>
<codeline lineno="335"><highlight class="normal"></highlight><highlight class="comment">/*********************************</highlight></codeline>
<codeline lineno="336"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="337"><highlight class="comment"><sp/>*<sp/>class<sp/>ShaderMesh</highlight></codeline>
<codeline lineno="338"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="339"><highlight class="comment"><sp/>*********************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="340" refid="classShaderMesh" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classShaderMesh" kindref="compound">ShaderMesh</ref></highlight></codeline>
<codeline lineno="341"><highlight class="normal">{</highlight></codeline>
<codeline lineno="342"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>Stage</highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/><sp/>STG_opaque<sp/>=<sp/>0,</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/><sp/>STG_atest,</highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/>STG_imm_decal,</highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/><sp/>STG_decal,</highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/>STG_trans,</highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/><sp/>STG_distortion,</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/>STG_COUNT,</highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="353"><highlight class="normal"></highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//*************************************************************</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>desc<sp/>for<sp/>single<sp/>element<sp/>(vertex<sp/>group<sp/>&amp;<sp/>shader)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//*************************************************************</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="357" refid="structShaderMesh_1_1RElem" refkind="compound"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structShaderMesh_1_1RElem" kindref="compound">RElem</ref></highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><sp/>PATCHABLE_DATA64(Ptr&lt;ShaderElement&gt;,<sp/>e);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>ptr<sp/>to<sp/>shader<sp/>element</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/>PATCHABLE_DATA64(Ptr&lt;ShaderMaterial&gt;,<sp/>mat);<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>ptr<sp/>to<sp/>material</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/><sp/><sp/>PATCHABLE_DATA64(<ref refid="classGlobalVertexData" kindref="compound">GlobalVertexData</ref><sp/>*,<sp/>vertexData);<sp/></highlight><highlight class="comment">//<sp/>ptr<sp/>to<sp/>struct<sp/>with<sp/>VB,<sp/>IB</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="362"><highlight class="normal"></highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>vdOrderIndex;<sp/></highlight><highlight class="comment">//<sp/>index<sp/>of<sp/>this<sp/>element<sp/>in<sp/>vertexData<sp/>(for<sp/>dynamic<sp/>connect<sp/>ranges<sp/>while<sp/>rendering)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="364"><highlight class="normal"></highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>sv;<sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>start<sp/>vertex<sp/>index<sp/>in<sp/>VB</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>numv;<sp/></highlight><highlight class="comment">//<sp/>number<sp/>of<sp/>vertices</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="367"><highlight class="normal"></highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>si;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>start<sp/>index<sp/>in<sp/>IB</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>numf;<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>number<sp/>of<sp/>faces</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>baseVertex;<sp/></highlight><highlight class="comment">//<sp/>baseVertex<sp/>in<sp/>ib</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="371"><highlight class="normal"></highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>drawIndTriList()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>d3d::drawind(PRIM_TRILIST,<sp/>si,<sp/>numf,<sp/>baseVertex);<sp/>}</highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>drawIndTriList(uint32_t<sp/>num_inst,<sp/>uint32_t<sp/>start_inst<sp/>=<sp/>0)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="374"><highlight class="keyword"><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>d3d::drawind_instanced(PRIM_TRILIST,<sp/>si,<sp/>numf,<sp/>baseVertex,<sp/>num_inst,<sp/>start_inst);</highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>renderWithElem(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classShaderElement" kindref="compound">ShaderElement</ref><sp/>&amp;elem)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/>elem.render(sv,<sp/>numv,<sp/>si,<sp/>numf,<sp/>baseVertex);<sp/>}</highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>render()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/>renderWithElem(*e);<sp/>}</highlight></codeline>
<codeline lineno="379"><highlight class="normal"></highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/>getPrimitive()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>si<sp/>!=<sp/>RELEM_NO_INDEX_BUFFER<sp/>?<sp/>PRIM_TRILIST<sp/>:<sp/>PRIM_POINTLIST;<sp/>}</highlight></codeline>
<codeline lineno="381"><highlight class="normal"></highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structShaderMesh_1_1RElem" kindref="compound">RElem</ref>()<sp/>=<sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structShaderMesh_1_1RElem" kindref="compound">RElem</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structShaderMesh_1_1RElem" kindref="compound">RElem</ref><sp/>&amp;)<sp/>=<sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="385"><highlight class="normal"></highlight></codeline>
<codeline lineno="386"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/>DAG_DECLARE_NEW(midmem)</highlight></codeline>
<codeline lineno="388"><highlight class="normal"></highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>build<sp/>simple<sp/>single-material<sp/>mesh<sp/>with<sp/>it<sp/>own<sp/>vertex/index<sp/>buffers</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="classShaderMesh" kindref="compound">ShaderMesh</ref><sp/>*createSimple(Mesh<sp/>&amp;m,<sp/><ref refid="classShaderMaterial" kindref="compound">ShaderMaterial</ref><sp/>*mat,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*info_str<sp/>=<sp/>NULL);</highlight></codeline>
<codeline lineno="391"><highlight class="normal"></highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>create<sp/>copy<sp/>of<sp/>existing<sp/>ShaderMesh</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="classShaderMesh" kindref="compound">ShaderMesh</ref><sp/>*createCopy(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classShaderMesh" kindref="compound">ShaderMesh</ref><sp/>&amp;sm);</highlight></codeline>
<codeline lineno="394"><highlight class="normal"></highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>create<sp/>Shader<sp/>mesh<sp/>by<sp/>load<sp/>dump<sp/>from<sp/>stream</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="classShaderMesh" kindref="compound">ShaderMesh</ref><sp/>*load(IGenLoad<sp/>&amp;crd,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>sz,<sp/><ref refid="classShaderMatVdata" kindref="compound">ShaderMatVdata</ref><sp/>&amp;smvd,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>acqire_tex_refs<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="classShaderMesh" kindref="compound">ShaderMesh</ref><sp/>*loadMem(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*p,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>sz,<sp/><ref refid="classShaderMatVdata" kindref="compound">ShaderMatVdata</ref><sp/>&amp;smvd,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>acqire_tex_refs<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="398"><highlight class="normal"></highlight></codeline>
<codeline lineno="399"><highlight class="normal"></highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>ctor/dtor</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/><ref refid="classShaderMesh" kindref="compound">ShaderMesh</ref>()<sp/>{<sp/>memset(stageEndElemIdx,<sp/>0,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(stageEndElemIdx));<sp/>}</highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/><ref refid="classShaderMesh" kindref="compound">~ShaderMesh</ref>()<sp/>{<sp/>clearData();<sp/>}</highlight></codeline>
<codeline lineno="403"><highlight class="normal"></highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>patch<sp/>mesh<sp/>data<sp/>after<sp/>loading<sp/>from<sp/>dump</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>patchData(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*base,<sp/><ref refid="classShaderMatVdata" kindref="compound">ShaderMatVdata</ref><sp/>&amp;smvd);</highlight></codeline>
<codeline lineno="406"><highlight class="normal"></highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>explicit<sp/>destructor</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>clearData();</highlight></codeline>
<codeline lineno="409"><highlight class="normal"></highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>rebase<sp/>and<sp/>clone<sp/>data<sp/>(useful<sp/>for<sp/>data<sp/>copies)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>rebaseAndClone(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*new_base,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*old_base);</highlight></codeline>
<codeline lineno="412"><highlight class="normal"></highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>rendering</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>render()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/>render(getElems(STG_opaque,<sp/>STG_atest),<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);<sp/>}</highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>render_trans()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/>render(getElems(STG_trans),<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);<sp/>}</highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>render_distortion()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/>render(getElems(STG_distortion),<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);<sp/>}</highlight></codeline>
<codeline lineno="417"><highlight class="normal"></highlight></codeline>
<codeline lineno="418"><highlight class="normal"></highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>filter<sp/>functor<sp/>is<sp/>called<sp/>with<sp/>parameters:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>-<sp/>int<sp/>i:<sp/>The<sp/>index<sp/>of<sp/>the<sp/>RElem<sp/>that<sp/>is<sp/>currently<sp/>tested</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>FilterFunctor&gt;</highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>renderWithFilter(FilterFunctor<sp/>filter_cb)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="423"><highlight class="keyword"><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/><sp/><sp/>render(getElems(STG_opaque,<sp/>STG_atest),<sp/>filter_cb);</highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="426"><highlight class="normal"></highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>render<sp/>with<sp/>current<sp/>shader</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>renderRawImmediate(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>trans)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="429"><highlight class="normal"></highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>render<sp/>with<sp/>specific<sp/>shader</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>renderWithShader(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classShaderElement" kindref="compound">ShaderElement</ref><sp/>&amp;shader_element,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>trans)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="432"><highlight class="normal"></highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>gatherUsedTex(TextureIdSet<sp/>&amp;tex_id_list)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>gatherUsedMat(Tab&lt;ShaderMaterial<sp/>*&gt;<sp/>&amp;mat_list)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="435"><highlight class="normal"></highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>change<sp/>texture<sp/>by<sp/>texture<sp/>ID</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>replaceTexture(TEXTUREID<sp/>tex_id_old,<sp/>TEXTUREID<sp/>tex_id_new);</highlight></codeline>
<codeline lineno="438"><highlight class="normal"></highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>get<sp/>number<sp/>of<sp/>faces</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>calcTotalFaces()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="441"><highlight class="normal"></highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>duplicateMaterial(TEXTUREID<sp/>tex_id,<sp/>dag::Span&lt;RElem&gt;<sp/>elem,<sp/>Tab&lt;ShaderMaterial<sp/>*&gt;<sp/>&amp;old_mat,</highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/><sp/><sp/>Tab&lt;ShaderMaterial<sp/>*&gt;<sp/>&amp;new_mat);</highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>duplicateMat(<ref refid="classShaderMaterial" kindref="compound">ShaderMaterial</ref><sp/>*prev_m,<sp/>dag::Span&lt;RElem&gt;<sp/>elem,<sp/>Tab&lt;ShaderMaterial<sp/>*&gt;<sp/>&amp;old_mat,</highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/><sp/><sp/>Tab&lt;ShaderMaterial<sp/>*&gt;<sp/>&amp;new_mat);</highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>duplicateMaterial(TEXTUREID<sp/>tex_id,<sp/>Tab&lt;ShaderMaterial<sp/>*&gt;<sp/>&amp;old_mat,<sp/>Tab&lt;ShaderMaterial<sp/>*&gt;<sp/>&amp;new_mat)</highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/><sp/><sp/>duplicateMaterial(tex_id,<sp/>make_span(elems),<sp/>old_mat,<sp/>new_mat);</highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>duplicateMat(<ref refid="classShaderMaterial" kindref="compound">ShaderMaterial</ref><sp/>*prev_m,<sp/>Tab&lt;ShaderMaterial<sp/>*&gt;<sp/>&amp;old_mat,<sp/>Tab&lt;ShaderMaterial<sp/>*&gt;<sp/>&amp;new_mat)</highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/><sp/><sp/>duplicateMat(prev_m,<sp/>make_span(elems),<sp/>old_mat,<sp/>new_mat);</highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="454"><highlight class="normal"></highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>getVbInfo(RElem<sp/>&amp;elem,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>usage,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>usage_index,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>&amp;stride,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>&amp;offset,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>&amp;type,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>&amp;mod)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="456"><highlight class="normal"></highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>acquireTexRefs();</highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>releaseTexRefs();</highlight></codeline>
<codeline lineno="459"><highlight class="normal"></highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>updateShaderElems();</highlight></codeline>
<codeline lineno="461"><highlight class="normal"></highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/>dag::ConstSpan&lt;RElem&gt;<sp/>getAllElems()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>elems;<sp/>}</highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/>uint32_t<sp/>getElemsCount(uint32_t<sp/>start_stage,<sp/>uint32_t<sp/>end_stage)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="464"><highlight class="keyword"><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/><sp/><sp/>G_ASSERT(start_stage<sp/>&lt;=<sp/>end_stage<sp/>&amp;&amp;<sp/>end_stage<sp/>&lt;<sp/>STG_COUNT);</highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>stageEndElemIdx[end_stage]<sp/>-<sp/>(start_stage<sp/>==<sp/>0<sp/>?<sp/>0<sp/>:<sp/>stageEndElemIdx[start_stage<sp/>-<sp/>1]);</highlight></codeline>
<codeline lineno="467"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/>dag::Span&lt;RElem&gt;<sp/>getElems(uint32_t<sp/>start_stage,<sp/>uint32_t<sp/>end_stage)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="469"><highlight class="keyword"><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/><sp/><sp/>G_STATIC_ASSERT((uint32_t)STG_COUNT<sp/>&lt;=<sp/>(uint32_t)SC_STAGE_IDX_MASK);</highlight></codeline>
<codeline lineno="471"><highlight class="normal"><sp/><sp/><sp/><sp/>G_ASSERT_RETURN(start_stage<sp/>&lt;=<sp/>end_stage<sp/>&amp;&amp;<sp/>end_stage<sp/>&lt;<sp/>(uint32_t)STG_COUNT,<sp/>{});</highlight></codeline>
<codeline lineno="472"><highlight class="normal"><sp/><sp/><sp/><sp/>uint16_t<sp/>start<sp/>=<sp/>start_stage<sp/>==<sp/>0<sp/>?<sp/>0<sp/>:<sp/>stageEndElemIdx[start_stage<sp/>-<sp/>1];</highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>make_span(</highlight><highlight class="keyword">const_cast&lt;</highlight><highlight class="normal"><ref refid="classShaderMesh" kindref="compound">ShaderMesh</ref><sp/>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(</highlight><highlight class="keyword">this</highlight><highlight class="normal">)-&gt;elems).subspan(start,<sp/>stageEndElemIdx[end_stage]<sp/>-<sp/>start);</highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/>dag::Span&lt;RElem&gt;<sp/>getElems(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stage)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>getElems(stage,<sp/>stage);<sp/>}</highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/><sp/>dag::ConstSpan&lt;uint16_t&gt;<sp/>getElemsIdx()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>dag::ConstSpan&lt;uint16_t&gt;(stageEndElemIdx,<sp/>countof(stageEndElemIdx));<sp/>}</highlight></codeline>
<codeline lineno="477"><highlight class="normal"></highlight></codeline>
<codeline lineno="478"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>set_material_pass(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>mat_pass,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>whole_pass_id);</highlight></codeline>
<codeline lineno="480"><highlight class="normal"></highlight></codeline>
<codeline lineno="481"><highlight class="normal"></highlight></codeline>
<codeline lineno="482"><highlight class="normal"></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="483"><highlight class="normal"><sp/><sp/>PatchableTab&lt;RElem&gt;<sp/>elems;</highlight></codeline>
<codeline lineno="484"><highlight class="normal"><sp/><sp/>uint16_t<sp/>stageEndElemIdx[SC_STAGE_IDX_MASK<sp/>+<sp/>1];</highlight></codeline>
<codeline lineno="485"><highlight class="normal"></highlight></codeline>
<codeline lineno="486"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>_deprecatedMaxMatPass<sp/>=<sp/>1;<sp/></highlight><highlight class="comment">//<sp/>deprecated</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="487"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>_resv<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="488"><highlight class="normal"></highlight></codeline>
<codeline lineno="489"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>render<sp/>items</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="490"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>FilterFunctor&gt;</highlight></codeline>
<codeline lineno="491"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>render(dag::Span&lt;RElem&gt;<sp/>elem_array,<sp/>FilterFunctor<sp/>filter_cb)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="492"><highlight class="keyword"><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="493"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classGlobalVertexData" kindref="compound">GlobalVertexData</ref><sp/>*vertexData<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>elem_array.size();<sp/>i++)</highlight></codeline>
<codeline lineno="495"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="496"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>RElem<sp/>&amp;re<sp/>=<sp/>elem_array[i];</highlight></codeline>
<codeline lineno="497"><highlight class="normal"></highlight></codeline>
<codeline lineno="498"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>(!eastl::is_null_pointer_v&lt;FilterFunctor&gt;)</highlight></codeline>
<codeline lineno="499"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="500"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!filter_cb(i))</highlight></codeline>
<codeline lineno="501"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="502"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="503"><highlight class="normal"></highlight></codeline>
<codeline lineno="504"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!re.e)</highlight></codeline>
<codeline lineno="505"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="506"><highlight class="normal"></highlight></codeline>
<codeline lineno="507"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(re.vertexData-&gt;isEmpty())</highlight></codeline>
<codeline lineno="508"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="509"><highlight class="normal"></highlight></codeline>
<codeline lineno="510"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(re.vertexData<sp/>!=<sp/>vertexData)</highlight></codeline>
<codeline lineno="511"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="512"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vertexData<sp/>=<sp/>re.vertexData;</highlight></codeline>
<codeline lineno="513"><highlight class="normal"></highlight></codeline>
<codeline lineno="514"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vertexData-&gt;setToDriver();</highlight></codeline>
<codeline lineno="515"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="516"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>re.render();</highlight></codeline>
<codeline lineno="517"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="518"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="519"><highlight class="normal"></highlight></codeline>
<codeline lineno="520"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>DAGOR_DBGLEVEL<sp/>&gt;<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="521"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>dbgRenderStarted;</highlight></codeline>
<codeline lineno="522"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="523"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">friend</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">ShaderMeshData;</highlight></codeline>
<codeline lineno="524"><highlight class="normal">};<sp/></highlight><highlight class="comment">//<sp/>class<sp/>ShaderMesh</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="525"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="526"><highlight class="normal"></highlight></codeline>
<codeline lineno="527"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="528"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="classShaderMaterial" kindref="compound">ShaderMaterial</ref><sp/>*replace_shader_mat(T<sp/>&amp;mesh,<sp/><ref refid="classShaderMaterial" kindref="compound">ShaderMaterial</ref><sp/>*prev_m,<sp/>Tab&lt;ShaderMaterial<sp/>*&gt;<sp/>&amp;old_mat,</highlight></codeline>
<codeline lineno="529"><highlight class="normal"><sp/><sp/>Tab&lt;ShaderMaterial<sp/>*&gt;<sp/>&amp;new_mat)</highlight></codeline>
<codeline lineno="530"><highlight class="normal">{</highlight></codeline>
<codeline lineno="531"><highlight class="normal"><sp/><sp/>mesh.duplicateMat(prev_m,<sp/>old_mat,<sp/>new_mat);</highlight></codeline>
<codeline lineno="532"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>idx<sp/>=<sp/>find_value_idx(old_mat,<sp/>prev_m);</highlight></codeline>
<codeline lineno="533"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>idx<sp/>&lt;<sp/>0<sp/>?<sp/>NULL<sp/>:<sp/>new_mat[idx];</highlight></codeline>
<codeline lineno="534"><highlight class="normal">}</highlight></codeline>
<codeline lineno="535"><highlight class="normal"></highlight></codeline>
<codeline lineno="536"><highlight class="normal"></highlight><highlight class="comment">//-V:getAllElems:758</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="537"><highlight class="normal"></highlight><highlight class="comment">//-V:getElems:758</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="dag_shaderMesh.h"/>
  </compounddef>
</doxygen>
