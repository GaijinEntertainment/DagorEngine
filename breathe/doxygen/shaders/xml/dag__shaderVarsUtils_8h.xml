<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.7" xml:lang="en-US">
  <compounddef id="dag__shaderVarsUtils_8h" kind="file" language="C++">
    <compoundname>dag_shaderVarsUtils.h</compoundname>
    <includes local="no">drv/3d/dag_renderStateId.h</includes>
    <includes local="no">generic/dag_tab.h</includes>
    <includes refid="dag__shaderState_8h" local="no">shaders/dag_shaderState.h</includes>
    <incdepgraph>
      <node id="4">
        <label>shaders/dag_shaderState.h</label>
        <link refid="dag__shaderState_8h_source"/>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>dag_shaderVarsUtils.h</label>
        <link refid="dag__shaderVarsUtils_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>drv/3d/dag_renderStateId.h</label>
      </node>
      <node id="3">
        <label>generic/dag_tab.h</label>
      </node>
      <node id="5">
        <label>stdint.h</label>
      </node>
    </incdepgraph>
    <innerclass refid="classGlobalVariableStates" prot="public">GlobalVariableStates</innerclass>
    <innerclass refid="structshaders_1_1CombinedDynVariantState" prot="public">shaders::CombinedDynVariantState</innerclass>
    <innernamespace refid="namespaceshaders">shaders</innernamespace>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="dag__shaderVarsUtils_8h_1a992c991581ead36a9262044fb4804100" prot="public" static="no" strong="yes">
        <type>uint32_t</type>
        <name>ShaderStateBlockId</name>
        <enumvalue id="dag__shaderVarsUtils_8h_1a992c991581ead36a9262044fb4804100a4bbb8f967da6d1a610596d7257179c2b" prot="public">
          <name>Invalid</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dag_shaderVarsUtils.h" line="14" column="1" bodyfile="dag_shaderVarsUtils.h" bodystart="15" bodyend="17"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="dag__shaderVarsUtils_8h_1a859a8daf954cae74d5c3b973f39c10e5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void copy_current_global_variables_states</definition>
        <argsstring>(GlobalVariableStates &amp;gv)</argsstring>
        <name>copy_current_global_variables_states</name>
        <param>
          <type><ref refid="classGlobalVariableStates" kindref="compound">GlobalVariableStates</ref> &amp;</type>
          <declname>gv</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dag_shaderVarsUtils.h" line="37" column="6" declfile="dag_shaderVarsUtils.h" declline="37" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="dag__shaderVarsUtils_8h_1a6f63be5abf9dfb629afac85ea370ca9f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int get_dynamic_variant_states</definition>
        <argsstring>(const GlobalVariableStates &amp;global_variants_state, const ScriptedShaderElement &amp;s, uint32_t &amp;program, ShaderStateBlockId &amp;state_index, shaders::RenderStateId &amp;render_state, shaders::ConstStateIdx &amp;const_state, shaders::TexStateIdx &amp;tex_state)</argsstring>
        <name>get_dynamic_variant_states</name>
        <param>
          <type>const <ref refid="classGlobalVariableStates" kindref="compound">GlobalVariableStates</ref> &amp;</type>
          <declname>global_variants_state</declname>
        </param>
        <param>
          <type>const ScriptedShaderElement &amp;</type>
          <declname>s</declname>
        </param>
        <param>
          <type>uint32_t &amp;</type>
          <declname>program</declname>
        </param>
        <param>
          <type>ShaderStateBlockId &amp;</type>
          <declname>state_index</declname>
        </param>
        <param>
          <type>shaders::RenderStateId &amp;</type>
          <declname>render_state</declname>
        </param>
        <param>
          <type>shaders::ConstStateIdx &amp;</type>
          <declname>const_state</declname>
        </param>
        <param>
          <type>shaders::TexStateIdx &amp;</type>
          <declname>tex_state</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dag_shaderVarsUtils.h" line="40" column="5" declfile="dag_shaderVarsUtils.h" declline="40" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="dag__shaderVarsUtils_8h_1a1afd12904cac08d5b3e000d5459decdc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int get_dynamic_variant_states</definition>
        <argsstring>(const ScriptedShaderElement &amp;s, uint32_t &amp;program, ShaderStateBlockId &amp;state_index, shaders::RenderStateId &amp;render_state, shaders::ConstStateIdx &amp;const_state, shaders::TexStateIdx &amp;tex_state)</argsstring>
        <name>get_dynamic_variant_states</name>
        <param>
          <type>const ScriptedShaderElement &amp;</type>
          <declname>s</declname>
        </param>
        <param>
          <type>uint32_t &amp;</type>
          <declname>program</declname>
        </param>
        <param>
          <type>ShaderStateBlockId &amp;</type>
          <declname>state_index</declname>
        </param>
        <param>
          <type>shaders::RenderStateId &amp;</type>
          <declname>render_state</declname>
        </param>
        <param>
          <type>shaders::ConstStateIdx &amp;</type>
          <declname>const_state</declname>
        </param>
        <param>
          <type>shaders::TexStateIdx &amp;</type>
          <declname>tex_state</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dag_shaderVarsUtils.h" line="45" column="5" declfile="dag_shaderVarsUtils.h" declline="45" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="dag__shaderVarsUtils_8h_1af66c31822733420da1f49f88dd77fca0" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>int get_dynamic_variant_states</definition>
        <argsstring>(const GlobalVariableStates *global_variants_state, const ScriptedShaderElement &amp;s, uint32_t &amp;program, ShaderStateBlockId &amp;state_index, shaders::RenderStateId &amp;render_state, shaders::ConstStateIdx &amp;const_state, shaders::TexStateIdx &amp;tex_state)</argsstring>
        <name>get_dynamic_variant_states</name>
        <param>
          <type>const <ref refid="classGlobalVariableStates" kindref="compound">GlobalVariableStates</ref> *</type>
          <declname>global_variants_state</declname>
        </param>
        <param>
          <type>const ScriptedShaderElement &amp;</type>
          <declname>s</declname>
        </param>
        <param>
          <type>uint32_t &amp;</type>
          <declname>program</declname>
        </param>
        <param>
          <type>ShaderStateBlockId &amp;</type>
          <declname>state_index</declname>
        </param>
        <param>
          <type>shaders::RenderStateId &amp;</type>
          <declname>render_state</declname>
        </param>
        <param>
          <type>shaders::ConstStateIdx &amp;</type>
          <declname>const_state</declname>
        </param>
        <param>
          <type>shaders::TexStateIdx &amp;</type>
          <declname>tex_state</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dag_shaderVarsUtils.h" line="48" column="12" bodyfile="dag_shaderVarsUtils.h" bodystart="48" bodyend="55"/>
      </memberdef>
      <memberdef kind="function" id="dag__shaderVarsUtils_8h_1a93e02b76119242d60b13884a2b0ae33a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int get_cached_dynamic_variant_states</definition>
        <argsstring>(const ScriptedShaderElement &amp;s, dag::ConstSpan&lt; int &gt; cache, uint32_t &amp;program, ShaderStateBlockId &amp;state_index, shaders::RenderStateId &amp;render_state, shaders::ConstStateIdx &amp;const_state, shaders::TexStateIdx &amp;tex_state)</argsstring>
        <name>get_cached_dynamic_variant_states</name>
        <param>
          <type>const ScriptedShaderElement &amp;</type>
          <declname>s</declname>
        </param>
        <param>
          <type>dag::ConstSpan&lt; int &gt;</type>
          <declname>cache</declname>
        </param>
        <param>
          <type>uint32_t &amp;</type>
          <declname>program</declname>
        </param>
        <param>
          <type>ShaderStateBlockId &amp;</type>
          <declname>state_index</declname>
        </param>
        <param>
          <type>shaders::RenderStateId &amp;</type>
          <declname>render_state</declname>
        </param>
        <param>
          <type>shaders::ConstStateIdx &amp;</type>
          <declname>const_state</declname>
        </param>
        <param>
          <type>shaders::TexStateIdx &amp;</type>
          <declname>tex_state</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dag_shaderVarsUtils.h" line="57" column="5" declfile="dag_shaderVarsUtils.h" declline="57" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="dag__shaderVarsUtils_8h_1a88877c4d72762f1df79ad53665cfa36f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void set_states_for_variant</definition>
        <argsstring>(const ScriptedShaderElement &amp;s, int curVariant, uint32_t program, ShaderStateBlockId state_index)</argsstring>
        <name>set_states_for_variant</name>
        <param>
          <type>const ScriptedShaderElement &amp;</type>
          <declname>s</declname>
        </param>
        <param>
          <type>int</type>
          <declname>curVariant</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>program</declname>
        </param>
        <param>
          <type>ShaderStateBlockId</type>
          <declname>state_index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dag_shaderVarsUtils.h" line="62" column="6" declfile="dag_shaderVarsUtils.h" declline="62" declcolumn="6"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Dagor<sp/>Engine<sp/>6.5</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Copyright<sp/>(C)<sp/>Gaijin<sp/>Games<sp/>KFT.<sp/><sp/>All<sp/>rights<sp/>reserved.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>once</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;drv/3d/dag_renderStateId.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;generic/dag_tab.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;shaders/dag_shaderState.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">ScriptedShaderElement;</highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="keyword">enum<sp/>class</highlight><highlight class="normal"><sp/>ShaderStateBlockId<sp/>:<sp/>uint32_t</highlight></codeline>
<codeline lineno="15"><highlight class="normal">{</highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/>Invalid<sp/>=<sp/>0</highlight></codeline>
<codeline lineno="17"><highlight class="normal">};</highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight></codeline>
<codeline lineno="19" refid="classGlobalVariableStates" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classGlobalVariableStates" kindref="compound">GlobalVariableStates</ref></highlight></codeline>
<codeline lineno="20"><highlight class="normal">{</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/>Tab&lt;uint8_t&gt;<sp/>globIntervalNormValues;</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/>uint32_t<sp/>generation<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">friend</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>copy_current_global_variables_states(<ref refid="classGlobalVariableStates" kindref="compound">GlobalVariableStates</ref><sp/>&amp;gv);</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">friend</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>get_dynamic_variant_states(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classGlobalVariableStates" kindref="compound">GlobalVariableStates</ref><sp/>&amp;global_variants_state,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>ScriptedShaderElement<sp/>&amp;s,</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>&amp;program,<sp/>ShaderStateBlockId<sp/>&amp;state_index,<sp/>shaders::RenderStateId<sp/>&amp;render_state,<sp/>shaders::ConstStateIdx<sp/>&amp;const_state,</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/>shaders::TexStateIdx<sp/>&amp;tex_state);</highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><ref refid="classGlobalVariableStates" kindref="compound">GlobalVariableStates</ref>(IMemAlloc<sp/>*mem<sp/>=<sp/>defaultmem)<sp/>:<sp/>globIntervalNormValues(mem)<sp/>{}</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>empty()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>globIntervalNormValues.empty();<sp/>}</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>clear()<sp/>{<sp/>clear_and_shrink(globIntervalNormValues);<sp/>}</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>set_allocator(IMemAlloc<sp/>*a)<sp/>{<sp/>dag::set_allocator(globIntervalNormValues,<sp/>a);<sp/>}</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/>IMemAlloc<sp/>*get_allocator()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>dag::get_allocator(globIntervalNormValues);<sp/>}</highlight></codeline>
<codeline lineno="35"><highlight class="normal">};</highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="comment">//<sp/>this<sp/>will<sp/>copy<sp/>current<sp/>globals<sp/>variable<sp/>states<sp/>(intervals)<sp/>so<sp/>it<sp/>can<sp/>be<sp/>used<sp/>by<sp/>get_dynamic_variant_states</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>copy_current_global_variables_states(<ref refid="classGlobalVariableStates" kindref="compound">GlobalVariableStates</ref><sp/>&amp;gv);</highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="comment">//<sp/>uses<sp/>explicit<sp/>global<sp/>variants<sp/>state</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>get_dynamic_variant_states(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classGlobalVariableStates" kindref="compound">GlobalVariableStates</ref><sp/>&amp;global_variants_state,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>ScriptedShaderElement<sp/>&amp;s,<sp/>uint32_t<sp/>&amp;program,</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/>ShaderStateBlockId<sp/>&amp;state_index,<sp/>shaders::RenderStateId<sp/>&amp;render_state,<sp/>shaders::ConstStateIdx<sp/>&amp;const_state,</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/>shaders::TexStateIdx<sp/>&amp;tex_state);</highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight><highlight class="comment">//<sp/>uses<sp/>current<sp/>global<sp/>global<sp/>variants<sp/>state</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>get_dynamic_variant_states(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>ScriptedShaderElement<sp/>&amp;s,<sp/>uint32_t<sp/>&amp;program,<sp/>ShaderStateBlockId<sp/>&amp;state_index,</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/>shaders::RenderStateId<sp/>&amp;render_state,<sp/>shaders::ConstStateIdx<sp/>&amp;const_state,<sp/>shaders::TexStateIdx<sp/>&amp;tex_state);</highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>get_dynamic_variant_states(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classGlobalVariableStates" kindref="compound">GlobalVariableStates</ref><sp/>*global_variants_state,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>ScriptedShaderElement<sp/>&amp;s,</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/>uint32_t<sp/>&amp;program,<sp/>ShaderStateBlockId<sp/>&amp;state_index,<sp/>shaders::RenderStateId<sp/>&amp;render_state,<sp/>shaders::ConstStateIdx<sp/>&amp;const_state,</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/>shaders::TexStateIdx<sp/>&amp;tex_state)</highlight></codeline>
<codeline lineno="51"><highlight class="normal">{</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>global_variants_state</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>?<sp/>get_dynamic_variant_states(*global_variants_state,<sp/>s,<sp/>program,<sp/>state_index,<sp/>render_state,<sp/>const_state,<sp/>tex_state)</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>get_dynamic_variant_states(s,<sp/>program,<sp/>state_index,<sp/>render_state,<sp/>const_state,<sp/>tex_state);</highlight></codeline>
<codeline lineno="55"><highlight class="normal">}</highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>get_cached_dynamic_variant_states(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>ScriptedShaderElement<sp/>&amp;s,<sp/>dag::ConstSpan&lt;int&gt;<sp/>cache,<sp/>uint32_t<sp/>&amp;program,</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/>ShaderStateBlockId<sp/>&amp;state_index,<sp/>shaders::RenderStateId<sp/>&amp;render_state,<sp/>shaders::ConstStateIdx<sp/>&amp;const_state,</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/>shaders::TexStateIdx<sp/>&amp;tex_state);</highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight><highlight class="comment">//<sp/>set<sp/>states<sp/>returned<sp/>by<sp/>get_dynamic_variant_states<sp/>family</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>set_states_for_variant(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>ScriptedShaderElement<sp/>&amp;s,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>curVariant,<sp/>uint32_t<sp/>program,<sp/>ShaderStateBlockId<sp/>state_index);</highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">shaders</highlight></codeline>
<codeline lineno="65"><highlight class="normal">{</highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight></codeline>
<codeline lineno="67" refid="structshaders_1_1CombinedDynVariantState" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structshaders_1_1CombinedDynVariantState" kindref="compound">CombinedDynVariantState</ref></highlight></codeline>
<codeline lineno="68"><highlight class="normal">{</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/>uint32_t<sp/>program;</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/>uint32_t<sp/>variant;</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/>ShaderStateBlockId<sp/>state_index;</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/>shaders::RenderStateId<sp/>render_state;</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/>shaders::ConstStateIdx<sp/>const_state;</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/>shaders::TexStateIdx<sp/>tex_state;</highlight></codeline>
<codeline lineno="75"><highlight class="normal">};</highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="structshaders_1_1CombinedDynVariantState" kindref="compound">CombinedDynVariantState</ref><sp/>get_dynamic_variant_state(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>ScriptedShaderElement<sp/>&amp;s)</highlight></codeline>
<codeline lineno="78"><highlight class="normal">{</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><ref refid="structshaders_1_1CombinedDynVariantState" kindref="compound">CombinedDynVariantState</ref><sp/>result;</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/>result.variant<sp/>=</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/>::get_dynamic_variant_states(s,<sp/>result.program,<sp/>result.state_index,<sp/>result.render_state,<sp/>result.const_state,<sp/>result.tex_state);</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="83"><highlight class="normal">}</highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>shaders</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="dag_shaderVarsUtils.h"/>
  </compounddef>
</doxygen>
