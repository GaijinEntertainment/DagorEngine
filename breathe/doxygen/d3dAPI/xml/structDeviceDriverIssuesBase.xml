<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.7" xml:lang="en-US">
  <compounddef id="structDeviceDriverIssuesBase" kind="struct" language="C++" prot="public">
    <compoundname>DeviceDriverIssuesBase</compoundname>
    <derivedcompoundref refid="structDeviceDriverIssuesAndroid" prot="public" virt="non-virtual">DeviceDriverIssuesAndroid</derivedcompoundref>
    <derivedcompoundref refid="structDeviceDriverIssuesWindows" prot="public" virt="non-virtual">DeviceDriverIssuesWindows</derivedcompoundref>
    <includes refid="dag__consts_8h" local="no">dag_consts.h</includes>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="structDeviceDriverIssuesBase_1a4155a0570f12968d78e323e26304929f" prot="public" static="no" mutable="no">
        <type>bool</type>
        <definition>bool DeviceDriverIssuesBase::hasComputeTimeLimited</definition>
        <argsstring></argsstring>
        <name>hasComputeTimeLimited</name>
        <qualifiedname>DeviceDriverIssuesBase::hasComputeTimeLimited</qualifiedname>
        <bitfield> 1</bitfield>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Some devices have issues with long running compute stages and may cause a TDR (Timeout Detection and Recovery) to reset the device. <simplesect kind="note"><para>Known on the following devices:<itemizedlist>
<listitem><para>\adreno</para>
</listitem><listitem><para>\mali </para>
</listitem></itemizedlist>
</para>
</simplesect>
<simplesect kind="note"><para><itemizedlist>
<listitem><para>\constissue{<ref refid="structDeviceDriverIssuesBase_1a4155a0570f12968d78e323e26304929f" kindref="member">DeviceDriverIssuesNoIssues::hasComputeTimeLimited</ref>}</para>
</listitem><listitem><para>\runtimeissue{<ref refid="structDeviceDriverIssuesAndroid" kindref="compound">DeviceDriverIssuesAndroid</ref>, \android} </para>
</listitem></itemizedlist>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dag_consts.h" line="2146" column="8" bodyfile="dag_consts.h" bodystart="2146" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structDeviceDriverIssuesBase_1a47992c604a6c9348ed72906e2faa9c9e" prot="public" static="no" mutable="no">
        <type>bool</type>
        <definition>bool DeviceDriverIssuesBase::hasComputeCanNotWrite3DTex</definition>
        <argsstring></argsstring>
        <name>hasComputeCanNotWrite3DTex</name>
        <qualifiedname>DeviceDriverIssuesBase::hasComputeCanNotWrite3DTex</qualifiedname>
        <bitfield> 1</bitfield>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Some device have issues with writing to 3D textures in the compute stage. <simplesect kind="note"><para>Known on the following devices:<itemizedlist>
<listitem><para>\adreno </para>
</listitem></itemizedlist>
</para>
</simplesect>
<simplesect kind="note"><para><itemizedlist>
<listitem><para>\constissue{<ref refid="structDeviceDriverIssuesBase_1a47992c604a6c9348ed72906e2faa9c9e" kindref="member">DeviceDriverIssuesNoIssues::hasComputeCanNotWrite3DTex</ref>}</para>
</listitem><listitem><para>\runtimeissue{<ref refid="structDeviceDriverIssuesAndroid" kindref="compound">DeviceDriverIssuesAndroid</ref>, \android} </para>
</listitem></itemizedlist>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dag_consts.h" line="2156" column="8" bodyfile="dag_consts.h" bodystart="2156" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structDeviceDriverIssuesBase_1a0cadf2df929f3c2ea141d7f7a338bfd9" prot="public" static="no" mutable="no">
        <type>bool</type>
        <definition>bool DeviceDriverIssuesBase::hasStrictRenderPassesOnly</definition>
        <argsstring></argsstring>
        <name>hasStrictRenderPassesOnly</name>
        <qualifiedname>DeviceDriverIssuesBase::hasStrictRenderPassesOnly</qualifiedname>
        <bitfield> 1</bitfield>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Some device drivers have issues with unused render pass attachments and my crash during pipeline creation. <simplesect kind="note"><para>Known on the following devices:<itemizedlist>
<listitem><para>\adreno </para>
</listitem></itemizedlist>
</para>
</simplesect>
<simplesect kind="note"><para><itemizedlist>
<listitem><para>\constissue{<ref refid="structDeviceDriverIssuesBase_1a0cadf2df929f3c2ea141d7f7a338bfd9" kindref="member">DeviceDriverIssuesNoIssues::hasStrictRenderPassesOnly</ref>}</para>
</listitem><listitem><para>\runtimeissue{<ref refid="structDeviceDriverIssuesAndroid" kindref="compound">DeviceDriverIssuesAndroid</ref>, \android} </para>
</listitem></itemizedlist>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dag_consts.h" line="2166" column="8" bodyfile="dag_consts.h" bodystart="2166" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structDeviceDriverIssuesBase_1af41da6d79519916b216c91c8c0b16c26" prot="public" static="no" mutable="no">
        <type>bool</type>
        <definition>bool DeviceDriverIssuesBase::hasSmallSampledBuffers</definition>
        <argsstring></argsstring>
        <name>hasSmallSampledBuffers</name>
        <qualifiedname>DeviceDriverIssuesBase::hasSmallSampledBuffers</qualifiedname>
        <bitfield> 1</bitfield>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Some device driver have a very limited size for sampled buffers. This indicates that device driver only works reliably with buffers not exceeding the 64KiByte size limit. <simplesect kind="note"><para>Some mobile device are actually limited and also fall in this category, even when this is expected behavior. Known to be a bug on the following devices, as they report larger supported sizes, but fail to work with those limits:<itemizedlist>
<listitem><para>\adreno</para>
</listitem><listitem><para>\mali </para>
</listitem></itemizedlist>
</para>
</simplesect>
<simplesect kind="note"><para><itemizedlist>
<listitem><para>\constissue{<ref refid="structDeviceDriverIssuesBase_1af41da6d79519916b216c91c8c0b16c26" kindref="member">DeviceDriverIssuesNoIssues::hasSmallSampledBuffers</ref>}</para>
</listitem><listitem><para>\runtimeissue{<ref refid="structDeviceDriverIssuesAndroid" kindref="compound">DeviceDriverIssuesAndroid</ref>, \android} </para>
</listitem></itemizedlist>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dag_consts.h" line="2179" column="8" bodyfile="dag_consts.h" bodystart="2179" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structDeviceDriverIssuesBase_1a0c0e9635e0bd509ed6febe7bf41b1037" prot="public" static="no" mutable="no">
        <type>bool</type>
        <definition>bool DeviceDriverIssuesBase::hasRenderPassClearDataRace</definition>
        <argsstring></argsstring>
        <name>hasRenderPassClearDataRace</name>
        <qualifiedname>DeviceDriverIssuesBase::hasRenderPassClearDataRace</qualifiedname>
        <bitfield> 1</bitfield>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Some devices have issues in render passes properly scheduling clears before render, which may result in random flickering. <simplesect kind="note"><para>Known on the following devices:<itemizedlist>
<listitem><para>\adreno with certain driver versions </para>
</listitem></itemizedlist>
</para>
</simplesect>
<simplesect kind="note"><para><itemizedlist>
<listitem><para>\constissue{<ref refid="structDeviceDriverIssuesBase_1a0c0e9635e0bd509ed6febe7bf41b1037" kindref="member">DeviceDriverIssuesNoIssues::hasRenderPassClearDataRace</ref>}</para>
</listitem><listitem><para>\runtimeissue{<ref refid="structDeviceDriverIssuesAndroid" kindref="compound">DeviceDriverIssuesAndroid</ref>, \android} </para>
</listitem></itemizedlist>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dag_consts.h" line="2189" column="8" bodyfile="dag_consts.h" bodystart="2189" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structDeviceDriverIssuesBase_1aed100b8cc04c55fb5a645a31b4f6f1bd" prot="public" static="no" mutable="no">
        <type>bool</type>
        <definition>bool DeviceDriverIssuesBase::hasBrokenBaseInstanceID</definition>
        <argsstring></argsstring>
        <name>hasBrokenBaseInstanceID</name>
        <qualifiedname>DeviceDriverIssuesBase::hasBrokenBaseInstanceID</qualifiedname>
        <bitfield> 1</bitfield>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Some device drivers have broken base instance ids in shaders. <simplesect kind="note"><para>Known on the following devices:<itemizedlist>
<listitem><para>\mali with certain driver versions </para>
</listitem></itemizedlist>
</para>
</simplesect>
<simplesect kind="note"><para><itemizedlist>
<listitem><para>\constissue{<ref refid="structDeviceDriverIssuesBase_1aed100b8cc04c55fb5a645a31b4f6f1bd" kindref="member">DeviceDriverIssuesNoIssues::hasBrokenBaseInstanceID</ref>}</para>
</listitem><listitem><para>\runtimeissue{<ref refid="structDeviceDriverIssuesAndroid" kindref="compound">DeviceDriverIssuesAndroid</ref>, \android} </para>
</listitem></itemizedlist>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dag_consts.h" line="2199" column="8" bodyfile="dag_consts.h" bodystart="2199" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structDeviceDriverIssuesBase_1ad502c03e9b8bc5f466439ede61f20a9c" prot="public" static="no" mutable="no">
        <type>bool</type>
        <definition>bool DeviceDriverIssuesBase::hasMultisampledAndInstancingHang</definition>
        <argsstring></argsstring>
        <name>hasMultisampledAndInstancingHang</name>
        <qualifiedname>DeviceDriverIssuesBase::hasMultisampledAndInstancingHang</qualifiedname>
        <bitfield> 1</bitfield>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Some device drivers may hang during instanced rendering with multisampled rastering. <simplesect kind="note"><para>Known for certain device driver combinations. </para>
</simplesect>
<simplesect kind="note"><para><itemizedlist>
<listitem><para>\constissue{<ref refid="structDeviceDriverIssuesBase_1ad502c03e9b8bc5f466439ede61f20a9c" kindref="member">DeviceDriverIssuesNoIssues::hasMultisampledAndInstancingHang</ref>}</para>
</listitem><listitem><para>\runtimeissue{<ref refid="structDeviceDriverIssuesAndroid" kindref="compound">DeviceDriverIssuesAndroid</ref>, \android} </para>
</listitem></itemizedlist>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dag_consts.h" line="2208" column="8" bodyfile="dag_consts.h" bodystart="2208" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structDeviceDriverIssuesBase_1a9b8a521d3ddb09a523a1cb5517cdac33" prot="public" static="no" mutable="no">
        <type>bool</type>
        <definition>bool DeviceDriverIssuesBase::hasBrokenMultisampledInputAttachment</definition>
        <argsstring></argsstring>
        <name>hasBrokenMultisampledInputAttachment</name>
        <qualifiedname>DeviceDriverIssuesBase::hasBrokenMultisampledInputAttachment</qualifiedname>
        <bitfield> 1</bitfield>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Some device drivers have device lost when trying to bind multisampled input attachment <simplesect kind="note"><para>Known for certain device driver combinations. </para>
</simplesect>
<simplesect kind="note"><para><itemizedlist>
<listitem><para>\constissue{<ref refid="structDeviceDriverIssuesBase_1a9b8a521d3ddb09a523a1cb5517cdac33" kindref="member">DeviceDriverIssuesNoIssues::hasBrokenMultisampledInputAttachment</ref>}</para>
</listitem><listitem><para>\runtimeissue{<ref refid="structDeviceDriverIssuesAndroid" kindref="compound">DeviceDriverIssuesAndroid</ref>, \android} </para>
</listitem></itemizedlist>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dag_consts.h" line="2217" column="8" bodyfile="dag_consts.h" bodystart="2217" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structDeviceDriverIssuesBase_1a73a3b06020df31b84570b6e073204237" prot="public" static="no" mutable="no">
        <type>bool</type>
        <definition>bool DeviceDriverIssuesBase::hasIgnoreDeviceLost</definition>
        <argsstring></argsstring>
        <name>hasIgnoreDeviceLost</name>
        <qualifiedname>DeviceDriverIssuesBase::hasIgnoreDeviceLost</qualifiedname>
        <bitfield> 1</bitfield>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Some device drivers spam device lost error codes while the device still remains functional normally. <simplesect kind="note"><para>Known for certain device driver combinations. </para>
</simplesect>
<simplesect kind="note"><para><itemizedlist>
<listitem><para>\constissue{<ref refid="structDeviceDriverIssuesBase_1a73a3b06020df31b84570b6e073204237" kindref="member">DeviceDriverIssuesNoIssues::hasIgnoreDeviceLost</ref>}</para>
</listitem><listitem><para>\runtimeissue{<ref refid="structDeviceDriverIssuesAndroid" kindref="compound">DeviceDriverIssuesAndroid</ref>, \android} </para>
</listitem></itemizedlist>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dag_consts.h" line="2226" column="8" bodyfile="dag_consts.h" bodystart="2226" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structDeviceDriverIssuesBase_1ad14daea5fce019300ab5227acdf12886" prot="public" static="no" mutable="no">
        <type>bool</type>
        <definition>bool DeviceDriverIssuesBase::hasPollDeviceFences</definition>
        <argsstring></argsstring>
        <name>hasPollDeviceFences</name>
        <qualifiedname>DeviceDriverIssuesBase::hasPollDeviceFences</qualifiedname>
        <bitfield> 1</bitfield>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Some device drivers may randomly fail with a device reset on fence waits, the driver falls back to polling the state of fences instead. <simplesect kind="note"><para>Known for certain device driver combinations. </para>
</simplesect>
<simplesect kind="note"><para><itemizedlist>
<listitem><para>\constissue{<ref refid="structDeviceDriverIssuesBase_1ad14daea5fce019300ab5227acdf12886" kindref="member">DeviceDriverIssuesNoIssues::hasPollDeviceFences</ref>}</para>
</listitem><listitem><para>\runtimeissue{<ref refid="structDeviceDriverIssuesAndroid" kindref="compound">DeviceDriverIssuesAndroid</ref>, \android} </para>
</listitem></itemizedlist>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dag_consts.h" line="2236" column="8" bodyfile="dag_consts.h" bodystart="2236" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structDeviceDriverIssuesBase_1a3928aca35169986ebd34a4e811c54f62" prot="public" static="no" mutable="no">
        <type>bool</type>
        <definition>bool DeviceDriverIssuesBase::hasBrokenShadersAfterAppSwitch</definition>
        <argsstring></argsstring>
        <name>hasBrokenShadersAfterAppSwitch</name>
        <qualifiedname>DeviceDriverIssuesBase::hasBrokenShadersAfterAppSwitch</qualifiedname>
        <bitfield> 1</bitfield>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Some device drivers may not render some long shaders after switching from the application and back. <simplesect kind="note"><para>Known for certain device driver combinations. </para>
</simplesect>
<simplesect kind="note"><para><itemizedlist>
<listitem><para>\constissue{<ref refid="structDeviceDriverIssuesBase_1a3928aca35169986ebd34a4e811c54f62" kindref="member">DeviceDriverIssuesNoIssues::hasBrokenShadersAfterAppSwitch</ref>}</para>
</listitem><listitem><para>\runtimeissue{<ref refid="structDeviceDriverIssuesAndroid" kindref="compound">DeviceDriverIssuesAndroid</ref>, \android} </para>
</listitem></itemizedlist>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dag_consts.h" line="2245" column="8" bodyfile="dag_consts.h" bodystart="2245" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structDeviceDriverIssuesBase_1ae4a622bc9d156d0dd2afe06b06287387" prot="public" static="no" mutable="no">
        <type>bool</type>
        <definition>bool DeviceDriverIssuesBase::hasBrokenSRGBConverionWithMRT</definition>
        <argsstring></argsstring>
        <name>hasBrokenSRGBConverionWithMRT</name>
        <qualifiedname>DeviceDriverIssuesBase::hasBrokenSRGBConverionWithMRT</qualifiedname>
        <bitfield> 1</bitfield>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Some device drivers have issues with sRGB conversion for render targets in the MRT setup. <simplesect kind="note"><para>Known for certain device driver combinations. </para>
</simplesect>
<simplesect kind="note"><para><itemizedlist>
<listitem><para>\constissue{<ref refid="structDeviceDriverIssuesBase_1ae4a622bc9d156d0dd2afe06b06287387" kindref="member">DeviceDriverIssuesNoIssues::hasBrokenSRGBConverionWithMRT</ref>}</para>
</listitem><listitem><para>\runtimeissue{<ref refid="structDeviceDriverIssuesAndroid" kindref="compound">DeviceDriverIssuesAndroid</ref>, \android} </para>
</listitem></itemizedlist>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dag_consts.h" line="2254" column="8" bodyfile="dag_consts.h" bodystart="2254" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structDeviceDriverIssuesBase_1aec7355cec1007e0b36dab07785577444" prot="public" static="no" mutable="no">
        <type>bool</type>
        <definition>bool DeviceDriverIssuesBase::hasBrokenComputeFormattedOutput</definition>
        <argsstring></argsstring>
        <name>hasBrokenComputeFormattedOutput</name>
        <qualifiedname>DeviceDriverIssuesBase::hasBrokenComputeFormattedOutput</qualifiedname>
        <bitfield> 1</bitfield>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Some device drivers have issues with format conversion while outputting to image with format other than fp32. <simplesect kind="note"><para>Known for certain device driver combinations. </para>
</simplesect>
<simplesect kind="note"><para><itemizedlist>
<listitem><para>\constissue{<ref refid="structDeviceDriverIssuesBase_1aec7355cec1007e0b36dab07785577444" kindref="member">DeviceDriverIssuesNoIssues::hasBrokenComputeFormattedOutput</ref>}</para>
</listitem><listitem><para>\runtimeissue{<ref refid="structDeviceDriverIssuesAndroid" kindref="compound">DeviceDriverIssuesAndroid</ref>, \android} </para>
</listitem></itemizedlist>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dag_consts.h" line="2263" column="8" bodyfile="dag_consts.h" bodystart="2263" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structDeviceDriverIssuesBase_1a25023af43de6a5d31e6b1e06f2189922" prot="public" static="no" mutable="no">
        <type>bool</type>
        <definition>bool DeviceDriverIssuesBase::hasClearColorBug</definition>
        <argsstring></argsstring>
        <name>hasClearColorBug</name>
        <qualifiedname>DeviceDriverIssuesBase::hasClearColorBug</qualifiedname>
        <bitfield> 1</bitfield>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>AMD Radeon hangs with DEVICE_LOST on clearview of R8G8 target with a color other than the basic B/W combinations <simplesect kind="note"><para>Known for certain device driver combinations. </para>
</simplesect>
<simplesect kind="note"><para><itemizedlist>
<listitem><para>\constissue{<ref refid="structDeviceDriverIssuesNoIssues_1ae21c8e87db19278f3b2495e77ea2c5cf" kindref="member">DeviceDriverIssuesNoIssues::hasClearColorBug</ref>}</para>
</listitem><listitem><para>\runtimeissue{<ref refid="structDeviceDriverIssuesWindows" kindref="compound">DeviceDriverIssuesWindows</ref>, \win32} </para>
</listitem></itemizedlist>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dag_consts.h" line="2272" column="8" bodyfile="dag_consts.h" bodystart="2272" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structDeviceDriverIssuesBase_1a5eb9f931ffee8c8cba46d2cdbb97a6ee" prot="public" static="no" mutable="no">
        <type>bool</type>
        <definition>bool DeviceDriverIssuesBase::hasBrokenSubpasses</definition>
        <argsstring></argsstring>
        <name>hasBrokenSubpasses</name>
        <qualifiedname>DeviceDriverIssuesBase::hasBrokenSubpasses</qualifiedname>
        <bitfield> 1</bitfield>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Some device drivers have some issues with subpasses. <simplesect kind="note"><para>Known on the following devices:<itemizedlist>
<listitem><para>\adreno with certain driver versions </para>
</listitem></itemizedlist>
</para>
</simplesect>
<simplesect kind="note"><para><itemizedlist>
<listitem><para>\constissue{<ref refid="structDeviceDriverIssuesBase_1a5eb9f931ffee8c8cba46d2cdbb97a6ee" kindref="member">DeviceDriverIssuesNoIssues::hasBrokenSubpasses</ref>}</para>
</listitem><listitem><para>\runtimeissue{<ref refid="structDeviceDriverIssuesAndroid" kindref="compound">DeviceDriverIssuesAndroid</ref>, \android} </para>
</listitem></itemizedlist>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dag_consts.h" line="2282" column="8" bodyfile="dag_consts.h" bodystart="2282" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structDeviceDriverIssuesBase_1a35c976b009067902b9b8dd02e2d8f920" prot="public" static="no" mutable="no">
        <type>bool</type>
        <definition>bool DeviceDriverIssuesBase::hasBrokenNvApiGetSleepStatus</definition>
        <argsstring></argsstring>
        <name>hasBrokenNvApiGetSleepStatus</name>
        <qualifiedname>DeviceDriverIssuesBase::hasBrokenNvApiGetSleepStatus</qualifiedname>
        <bitfield> 1</bitfield>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>572.xx nvidia driver versions have an issue with querying NvApi_GetSleepStatus after device creation. <simplesect kind="note"><para>Known on the following devices:<itemizedlist>
<listitem><para>\nvidia with 572.xx driver versions </para>
</listitem></itemizedlist>
</para>
</simplesect>
<simplesect kind="note"><para><itemizedlist>
<listitem><para>\constissue{<ref refid="structDeviceDriverIssuesNoIssues_1af4f0ecb0fe846b0f2b90317e51809586" kindref="member">DeviceDriverIssuesNoIssues::hasBrokenNvApiGetSleepStatus</ref>}</para>
</listitem><listitem><para>\runtimeissue{<ref refid="structDeviceDriverIssuesWindows" kindref="compound">DeviceDriverIssuesWindows</ref>, \win32} </para>
</listitem></itemizedlist>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dag_consts.h" line="2292" column="8" bodyfile="dag_consts.h" bodystart="2292" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structDeviceDriverIssuesBase_1a9f1e938965f383922e73f877d544996d" prot="public" static="no" mutable="no">
        <type>bool</type>
        <definition>bool DeviceDriverIssuesBase::hasFloatClearBug</definition>
        <argsstring></argsstring>
        <name>hasFloatClearBug</name>
        <qualifiedname>DeviceDriverIssuesBase::hasFloatClearBug</qualifiedname>
        <bitfield> 1</bitfield>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>In some sequences of clear, RT switches, and rendering the texture may end up filled with NaNs <simplesect kind="note"><para>Known for certain device driver combinations. </para>
</simplesect>
<simplesect kind="note"><para><itemizedlist>
<listitem><para>\constissue{<ref refid="structDeviceDriverIssuesBase_1a9f1e938965f383922e73f877d544996d" kindref="member">DeviceDriverIssuesNoIssues::hasFloatClearBug</ref>}</para>
</listitem><listitem><para>\runtimeissue{<ref refid="structDeviceDriverIssuesWindows" kindref="compound">DeviceDriverIssuesWindows</ref>, \win32} </para>
</listitem></itemizedlist>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dag_consts.h" line="2301" column="8" bodyfile="dag_consts.h" bodystart="2301" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>A boolean bitfield that describes which known issues the used device / driver combination has. </para>
    </detaileddescription>
    <inheritancegraph>
      <node id="2">
        <label>DeviceDriverIssuesAndroid</label>
        <link refid="structDeviceDriverIssuesAndroid"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1">
        <label>DeviceDriverIssuesBase</label>
        <link refid="structDeviceDriverIssuesBase"/>
      </node>
      <node id="4">
        <label>DeviceDriverIssuesNoIssues</label>
        <link refid="structDeviceDriverIssuesNoIssues"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>DeviceDriverIssuesWindows</label>
        <link refid="structDeviceDriverIssuesWindows"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <location file="dag_consts.h" line="2133" column="1" bodyfile="dag_consts.h" bodystart="2134" bodyend="2302"/>
    <listofallmembers>
      <member refid="structDeviceDriverIssuesBase_1aed100b8cc04c55fb5a645a31b4f6f1bd" prot="public" virt="non-virtual"><scope>DeviceDriverIssuesBase</scope><name>hasBrokenBaseInstanceID</name></member>
      <member refid="structDeviceDriverIssuesBase_1aec7355cec1007e0b36dab07785577444" prot="public" virt="non-virtual"><scope>DeviceDriverIssuesBase</scope><name>hasBrokenComputeFormattedOutput</name></member>
      <member refid="structDeviceDriverIssuesBase_1a9b8a521d3ddb09a523a1cb5517cdac33" prot="public" virt="non-virtual"><scope>DeviceDriverIssuesBase</scope><name>hasBrokenMultisampledInputAttachment</name></member>
      <member refid="structDeviceDriverIssuesBase_1a35c976b009067902b9b8dd02e2d8f920" prot="public" virt="non-virtual"><scope>DeviceDriverIssuesBase</scope><name>hasBrokenNvApiGetSleepStatus</name></member>
      <member refid="structDeviceDriverIssuesBase_1a3928aca35169986ebd34a4e811c54f62" prot="public" virt="non-virtual"><scope>DeviceDriverIssuesBase</scope><name>hasBrokenShadersAfterAppSwitch</name></member>
      <member refid="structDeviceDriverIssuesBase_1ae4a622bc9d156d0dd2afe06b06287387" prot="public" virt="non-virtual"><scope>DeviceDriverIssuesBase</scope><name>hasBrokenSRGBConverionWithMRT</name></member>
      <member refid="structDeviceDriverIssuesBase_1a5eb9f931ffee8c8cba46d2cdbb97a6ee" prot="public" virt="non-virtual"><scope>DeviceDriverIssuesBase</scope><name>hasBrokenSubpasses</name></member>
      <member refid="structDeviceDriverIssuesBase_1a25023af43de6a5d31e6b1e06f2189922" prot="public" virt="non-virtual"><scope>DeviceDriverIssuesBase</scope><name>hasClearColorBug</name></member>
      <member refid="structDeviceDriverIssuesBase_1a47992c604a6c9348ed72906e2faa9c9e" prot="public" virt="non-virtual"><scope>DeviceDriverIssuesBase</scope><name>hasComputeCanNotWrite3DTex</name></member>
      <member refid="structDeviceDriverIssuesBase_1a4155a0570f12968d78e323e26304929f" prot="public" virt="non-virtual"><scope>DeviceDriverIssuesBase</scope><name>hasComputeTimeLimited</name></member>
      <member refid="structDeviceDriverIssuesBase_1a9f1e938965f383922e73f877d544996d" prot="public" virt="non-virtual"><scope>DeviceDriverIssuesBase</scope><name>hasFloatClearBug</name></member>
      <member refid="structDeviceDriverIssuesBase_1a73a3b06020df31b84570b6e073204237" prot="public" virt="non-virtual"><scope>DeviceDriverIssuesBase</scope><name>hasIgnoreDeviceLost</name></member>
      <member refid="structDeviceDriverIssuesBase_1ad502c03e9b8bc5f466439ede61f20a9c" prot="public" virt="non-virtual"><scope>DeviceDriverIssuesBase</scope><name>hasMultisampledAndInstancingHang</name></member>
      <member refid="structDeviceDriverIssuesBase_1ad14daea5fce019300ab5227acdf12886" prot="public" virt="non-virtual"><scope>DeviceDriverIssuesBase</scope><name>hasPollDeviceFences</name></member>
      <member refid="structDeviceDriverIssuesBase_1a0c0e9635e0bd509ed6febe7bf41b1037" prot="public" virt="non-virtual"><scope>DeviceDriverIssuesBase</scope><name>hasRenderPassClearDataRace</name></member>
      <member refid="structDeviceDriverIssuesBase_1af41da6d79519916b216c91c8c0b16c26" prot="public" virt="non-virtual"><scope>DeviceDriverIssuesBase</scope><name>hasSmallSampledBuffers</name></member>
      <member refid="structDeviceDriverIssuesBase_1a0cadf2df929f3c2ea141d7f7a338bfd9" prot="public" virt="non-virtual"><scope>DeviceDriverIssuesBase</scope><name>hasStrictRenderPassesOnly</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
