<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.7" xml:lang="en-US">
  <compounddef id="namespaced3d_1_1buffers" kind="namespace" language="C++">
    <compoundname>d3d::buffers</compoundname>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="namespaced3d_1_1buffers_1a7289ebd6e955087eeb533762bac0b98f" prot="public" static="no" strong="yes">
        <type>uint32_t</type>
        <name>Init</name>
        <qualifiedname>d3d::buffers::Init</qualifiedname>
        <enumvalue id="namespaced3d_1_1buffers_1a7289ebd6e955087eeb533762bac0b98fabafd7322c6e97d25b6299b5d6fe8920b" prot="public">
          <name>No</name>
          <briefdescription>
<para>We don&apos;t know anything about buffer content on creation. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaced3d_1_1buffers_1a7289ebd6e955087eeb533762bac0b98fad7ed4ee1df437474d005188535f74875" prot="public">
          <name>Zero</name>
          <briefdescription>
<para>A resource guaranteed to be zeroed on the first usage. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Enumeration for buffer initialization options. Not all buffer types currently support it. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dag_buffers.h" line="287" column="1" bodyfile="dag_buffers.h" bodystart="288" bodyend="291"/>
      </memberdef>
      <memberdef kind="enum" id="namespaced3d_1_1buffers_1a696757538a427695f6e00683069bd4ca" prot="public" static="no" strong="yes">
        <type>uint32_t</type>
        <name>Indirect</name>
        <qualifiedname>d3d::buffers::Indirect</qualifiedname>
        <enumvalue id="namespaced3d_1_1buffers_1a696757538a427695f6e00683069bd4caa5a628d4cc7426c31799aa35e0fbcf45e" prot="public">
          <name>Dispatch</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaced3d_1_1buffers_1a696757538a427695f6e00683069bd4caa2d03c2d5a7ec65ef4619e0582c272ec2" prot="public">
          <name>Draw</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaced3d_1_1buffers_1a696757538a427695f6e00683069bd4caafe1132393be2697e9023d6f9e1ea4c83" prot="public">
          <name>DrawIndexed</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>The Indirect enum represents different GPU indirect buffer types. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dag_buffers.h" line="297" column="1" bodyfile="dag_buffers.h" bodystart="298" bodyend="302"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="var">
      <memberdef kind="variable" id="namespaced3d_1_1buffers_1ab085b535f5176b793b3e3dd0799779db" prot="public" static="no" constexpr="yes" mutable="no">
        <type>constexpr uint32_t</type>
        <definition>constexpr uint32_t d3d::buffers::CBUFFER_REGISTER_SIZE</definition>
        <argsstring></argsstring>
        <name>CBUFFER_REGISTER_SIZE</name>
        <qualifiedname>d3d::buffers::CBUFFER_REGISTER_SIZE</qualifiedname>
        <initializer>= 16</initializer>
        <briefdescription>
<para>The size of the cbuffer register. It should have a size divisible by sizeof(float4), because the cbuffer is a set of float4 registers. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dag_buffers.h" line="309" column="27" bodyfile="dag_buffers.h" bodystart="309" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespaced3d_1_1buffers_1a421822f58870275c63b259526196379b" prot="public" static="no" constexpr="yes" mutable="no">
        <type>constexpr uint32_t</type>
        <definition>constexpr uint32_t d3d::buffers::BYTE_ADDRESS_ELEMENT_SIZE</definition>
        <argsstring></argsstring>
        <name>BYTE_ADDRESS_ELEMENT_SIZE</name>
        <qualifiedname>d3d::buffers::BYTE_ADDRESS_ELEMENT_SIZE</qualifiedname>
        <initializer>= sizeof(uint32_t)</initializer>
        <briefdescription>
<para>The size of an element of a byte address buffer. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dag_buffers.h" line="314" column="27" bodyfile="dag_buffers.h" bodystart="314" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="namespaced3d_1_1buffers_1ae9041fa33b354aab1fd1e6934fa6277d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>uint32_t</type>
        <definition>uint32_t d3d::buffers::cb_array_reg_count</definition>
        <argsstring>(uint32_t array_size)</argsstring>
        <name>cb_array_reg_count</name>
        <qualifiedname>d3d::buffers::cb_array_reg_count</qualifiedname>
        <param>
          <type>uint32_t</type>
          <declname>array_size</declname>
        </param>
        <briefdescription>
<para>Calculate the number of register (in const buffer term) count for a given array size of type T. Structure must be aligned as float4 to not have problems with alignment in cbuffer. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>The type of the array elements. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>array_size</parametername>
</parameternamelist>
<parameterdescription>
<para>The size of the array. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The registers count. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dag_buffers.h" line="326" column="17" bodyfile="dag_buffers.h" bodystart="326" bodyend="331"/>
      </memberdef>
      <memberdef kind="function" id="namespaced3d_1_1buffers_1a9aa525de1d641fdeabaf43b9198398d3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>uint32_t</type>
        <definition>uint32_t d3d::buffers::cb_struct_reg_count</definition>
        <argsstring>()</argsstring>
        <name>cb_struct_reg_count</name>
        <qualifiedname>d3d::buffers::cb_struct_reg_count</qualifiedname>
        <briefdescription>
<para>Calculate the number of register (in const buffer term) count for a single instance of a type T. Structure must be aligned as float4 to not have problems with alignment in cbuffer. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>The type of the structure. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The registers count. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dag_buffers.h" line="342" column="17" bodyfile="dag_buffers.h" bodystart="342" bodyend="345"/>
      </memberdef>
      <memberdef kind="function" id="namespaced3d_1_1buffers_1a7bebf9def14bda25122a6a6ab0525f94" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classSbuffer" kindref="compound">Sbuffer</ref> *</type>
        <definition>Sbuffer * d3d::buffers::create_persistent_cb</definition>
        <argsstring>(uint32_t registers_count, const char *name)</argsstring>
        <name>create_persistent_cb</name>
        <qualifiedname>d3d::buffers::create_persistent_cb</qualifiedname>
        <param>
          <type>uint32_t</type>
          <declname>registers_count</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <briefdescription>
<para>Create a persistent constant buffer. </para>
        </briefdescription>
        <detaileddescription>
<para>Such buffers could be updated from time to time. It is recommended to use <ref refid="namespaced3d_1_1buffers_1ae9041fa33b354aab1fd1e6934fa6277d" kindref="member">cb_array_reg_count</ref> and <ref refid="namespaced3d_1_1buffers_1a9aa525de1d641fdeabaf43b9198398d3" kindref="member">cb_struct_reg_count</ref> methods to calculate registers_count.</para>
<para><simplesect kind="warning"><para>This buffer will not be restored after device reset!</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>registers_count</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of registers in the buffer. Must be not bigger than 4096. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the buffer, used for debugging purposes, like showing in in statistcs, and frame debuggers like PIX. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Created persistent constant buffer. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dag_buffers.h" line="360" column="16" bodyfile="dag_buffers.h" bodystart="360" bodyend="363"/>
      </memberdef>
      <memberdef kind="function" id="namespaced3d_1_1buffers_1a02cea12b62344cecc0d445c2859d69dc" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classSbuffer" kindref="compound">Sbuffer</ref> *</type>
        <definition>Sbuffer * d3d::buffers::create_one_frame_cb</definition>
        <argsstring>(uint32_t registers_count, const char *name)</argsstring>
        <name>create_one_frame_cb</name>
        <qualifiedname>d3d::buffers::create_one_frame_cb</qualifiedname>
        <param>
          <type>uint32_t</type>
          <declname>registers_count</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <briefdescription>
<para>Create an one frame constant buffer. </para>
        </briefdescription>
        <detaileddescription>
<para>Such buffers must be updated every frame (you can skip update if the buffer is not used this frame). Because of that we don&apos;t care about its content on device reset. It is recommended to use <ref refid="namespaced3d_1_1buffers_1ae9041fa33b354aab1fd1e6934fa6277d" kindref="member">cb_array_reg_count</ref> and <ref refid="namespaced3d_1_1buffers_1a9aa525de1d641fdeabaf43b9198398d3" kindref="member">cb_struct_reg_count</ref> methods to calculate registers_count.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>registers_count</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of registers. Must be not bigger than 4096. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the buffer, used for debugging purposes, like showing in in statistcs, and frame debuggers like PIX. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>buffer_init</parametername>
</parameternamelist>
<parameterdescription>
<para>The initialization option for the buffer. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A pointer to the created buffer. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dag_buffers.h" line="377" column="16" bodyfile="dag_buffers.h" bodystart="377" bodyend="380"/>
      </memberdef>
      <memberdef kind="function" id="namespaced3d_1_1buffers_1af0a2c321a3d7e53d01537438f4921710" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classSbuffer" kindref="compound">Sbuffer</ref> *</type>
        <definition>Sbuffer * d3d::buffers::create_ua_sr_byte_address</definition>
        <argsstring>(uint32_t size_in_dwords, const char *name, Init buffer_init=Init::No)</argsstring>
        <name>create_ua_sr_byte_address</name>
        <qualifiedname>d3d::buffers::create_ua_sr_byte_address</qualifiedname>
        <param>
          <type>uint32_t</type>
          <declname>size_in_dwords</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type><ref refid="namespaced3d_1_1buffers_1a7289ebd6e955087eeb533762bac0b98f" kindref="member">Init</ref></type>
          <declname>buffer_init</declname>
          <defval><ref refid="namespaced3d_1_1buffers_1a7289ebd6e955087eeb533762bac0b98fabafd7322c6e97d25b6299b5d6fe8920b" kindref="member">Init::No</ref></defval>
        </param>
        <briefdescription>
<para>Create a byte address buffer, which can be used thorugh an unordered access view or through a shader resource view in shaders. In a shader you can declare the buffer using (RW)ByteAddressBuffer. Such a buffer is always 16-byte aligned. </para>
        </briefdescription>
        <detaileddescription>
<para><xrefsect id="todo_1_todo000001"><xreftitle>Todo</xreftitle><xrefdescription><para>Use registers instead of dwords for size because of alignment. </para>
</xrefdescription></xrefsect><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>size_in_dwords</parametername>
</parameternamelist>
<parameterdescription>
<para>The size of the buffer in dwords. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the buffer, used for debugging purposes, like showing in in statistcs, and frame debuggers like PIX. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>buffer_init</parametername>
</parameternamelist>
<parameterdescription>
<para>The initialization option for the buffer. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A pointer to the created buffer. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dag_buffers.h" line="393" column="16" bodyfile="dag_buffers.h" bodystart="393" bodyend="397"/>
      </memberdef>
      <memberdef kind="function" id="namespaced3d_1_1buffers_1aefe99f08ed8f42e8f2174cfcaa1346de" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classSbuffer" kindref="compound">Sbuffer</ref> *</type>
        <definition>Sbuffer * d3d::buffers::create_ua_sr_structured</definition>
        <argsstring>(uint32_t structure_size, uint32_t elements_count, const char *name, Init buffer_init=Init::No)</argsstring>
        <name>create_ua_sr_structured</name>
        <qualifiedname>d3d::buffers::create_ua_sr_structured</qualifiedname>
        <param>
          <type>uint32_t</type>
          <declname>structure_size</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>elements_count</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type><ref refid="namespaced3d_1_1buffers_1a7289ebd6e955087eeb533762bac0b98f" kindref="member">Init</ref></type>
          <declname>buffer_init</declname>
          <defval><ref refid="namespaced3d_1_1buffers_1a7289ebd6e955087eeb533762bac0b98fabafd7322c6e97d25b6299b5d6fe8920b" kindref="member">Init::No</ref></defval>
        </param>
        <briefdescription>
<para>Create a structured buffer, which can be used thorugh an unordered access view or through a shader resource view in shaders. In a shader you can declare the buffer using (RW)StructuredBuffer&lt;StructureType&gt;. StructureType is a kind of template parameter here. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>structure_size</parametername>
</parameternamelist>
<parameterdescription>
<para>The size of the structure of the buffer elements. Usually it is a sizeof(StructureType). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>elements_count</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of elements in the buffer. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the buffer, used for debugging purposes, like showing in in statistcs, and frame debuggers like PIX. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>buffer_init</parametername>
</parameternamelist>
<parameterdescription>
<para>The initialization option for the buffer.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A pointer to the created buffer. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dag_buffers.h" line="411" column="16" bodyfile="dag_buffers.h" bodystart="411" bodyend="416"/>
      </memberdef>
      <memberdef kind="function" id="namespaced3d_1_1buffers_1ac3d4e3aafd9a7884be161183f8292ede" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classSbuffer" kindref="compound">Sbuffer</ref> *</type>
        <definition>Sbuffer * d3d::buffers::create_ua_byte_address</definition>
        <argsstring>(uint32_t size_in_dwords, const char *name)</argsstring>
        <name>create_ua_byte_address</name>
        <qualifiedname>d3d::buffers::create_ua_byte_address</qualifiedname>
        <param>
          <type>uint32_t</type>
          <declname>size_in_dwords</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <briefdescription>
<para>Create a byte address buffer, which can be used thorugh an unordered access view in shaders. In a shader you can declare the buffer using RWByteAddressBuffer. Such a buffer is always 16-byte aligned. </para>
        </briefdescription>
        <detaileddescription>
<para><xrefsect id="todo_1_todo000002"><xreftitle>Todo</xreftitle><xrefdescription><para>Use registers instead of dwords for size because of alignment. </para>
</xrefdescription></xrefsect><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>size_in_dwords</parametername>
</parameternamelist>
<parameterdescription>
<para>The size of the buffer in dwords. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the buffer, used for debugging purposes, like showing in in statistcs, and frame debuggers like PIX. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A pointer to the created buffer. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dag_buffers.h" line="429" column="16" bodyfile="dag_buffers.h" bodystart="429" bodyend="432"/>
      </memberdef>
      <memberdef kind="function" id="namespaced3d_1_1buffers_1ad15be2ab842d331a22b84f251c3a46da" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classSbuffer" kindref="compound">Sbuffer</ref> *</type>
        <definition>Sbuffer * d3d::buffers::create_ua_structured</definition>
        <argsstring>(uint32_t structure_size, uint32_t elements_count, const char *name)</argsstring>
        <name>create_ua_structured</name>
        <qualifiedname>d3d::buffers::create_ua_structured</qualifiedname>
        <param>
          <type>uint32_t</type>
          <declname>structure_size</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>elements_count</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <briefdescription>
<para>Create a structured buffer, which can be used thorugh an unordered access view in shaders. In a shader you can declare the buffer using RWStructuredBuffer&lt;StructureType&gt;. StructureType is a kind of template parameter here. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>structure_size</parametername>
</parameternamelist>
<parameterdescription>
<para>The size of the structure of the buffer elements. Usually it is a sizeof(StructureType). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>elements_count</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of elements in the buffer. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the buffer, used for debugging purposes, like showing in in statistcs, and frame debuggers like PIX. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A pointer to the created buffer. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dag_buffers.h" line="443" column="16" bodyfile="dag_buffers.h" bodystart="443" bodyend="446"/>
      </memberdef>
      <memberdef kind="function" id="namespaced3d_1_1buffers_1a9192bf3c86f843993ae9f6d89b010975" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classSbuffer" kindref="compound">Sbuffer</ref> *</type>
        <definition>Sbuffer * d3d::buffers::create_ua_byte_address_readback</definition>
        <argsstring>(uint32_t size_in_dwords, const char *name, Init buffer_init=Init::No)</argsstring>
        <name>create_ua_byte_address_readback</name>
        <qualifiedname>d3d::buffers::create_ua_byte_address_readback</qualifiedname>
        <param>
          <type>uint32_t</type>
          <declname>size_in_dwords</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type><ref refid="namespaced3d_1_1buffers_1a7289ebd6e955087eeb533762bac0b98f" kindref="member">Init</ref></type>
          <declname>buffer_init</declname>
          <defval><ref refid="namespaced3d_1_1buffers_1a7289ebd6e955087eeb533762bac0b98fabafd7322c6e97d25b6299b5d6fe8920b" kindref="member">Init::No</ref></defval>
        </param>
        <briefdescription>
<para>The same as <ref refid="namespaced3d_1_1buffers_1ac3d4e3aafd9a7884be161183f8292ede" kindref="member">create_ua_byte_address</ref> but its content can be read on CPU. Such a buffer is always 16-byte aligned. </para>
        </briefdescription>
        <detaileddescription>
<para><xrefsect id="todo_1_todo000003"><xreftitle>Todo</xreftitle><xrefdescription><para>Use registers instead of dwords for size because of alignment. </para>
</xrefdescription></xrefsect><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>size_in_dwords</parametername>
</parameternamelist>
<parameterdescription>
<para>The size of the buffer in dwords. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the buffer, used for debugging purposes, like showing in in statistcs, and frame debuggers like PIX. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>buffer_init</parametername>
</parameternamelist>
<parameterdescription>
<para>The initialization option for the buffer. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A pointer to the created buffer. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dag_buffers.h" line="458" column="16" bodyfile="dag_buffers.h" bodystart="458" bodyend="462"/>
      </memberdef>
      <memberdef kind="function" id="namespaced3d_1_1buffers_1a9d3419aebd8710b77145b4ab391adee0" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classSbuffer" kindref="compound">Sbuffer</ref> *</type>
        <definition>Sbuffer * d3d::buffers::create_ua_structured_readback</definition>
        <argsstring>(uint32_t structure_size, uint32_t elements_count, const char *name, Init buffer_init=Init::No)</argsstring>
        <name>create_ua_structured_readback</name>
        <qualifiedname>d3d::buffers::create_ua_structured_readback</qualifiedname>
        <param>
          <type>uint32_t</type>
          <declname>structure_size</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>elements_count</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type><ref refid="namespaced3d_1_1buffers_1a7289ebd6e955087eeb533762bac0b98f" kindref="member">Init</ref></type>
          <declname>buffer_init</declname>
          <defval><ref refid="namespaced3d_1_1buffers_1a7289ebd6e955087eeb533762bac0b98fabafd7322c6e97d25b6299b5d6fe8920b" kindref="member">Init::No</ref></defval>
        </param>
        <briefdescription>
<para>The same as <ref refid="namespaced3d_1_1buffers_1ad15be2ab842d331a22b84f251c3a46da" kindref="member">create_ua_structured</ref> but its content can be read on CPU. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>structure_size</parametername>
</parameternamelist>
<parameterdescription>
<para>The size of the structure of the buffer elements. Usually it is a sizeof(StructureType). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>elements_count</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of elements in the buffer. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the buffer, used for debugging purposes, like showing in in statistcs, and frame debuggers like PIX. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>buffer_init</parametername>
</parameternamelist>
<parameterdescription>
<para>The initialization option for the buffer. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A pointer to the created buffer. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dag_buffers.h" line="474" column="16" bodyfile="dag_buffers.h" bodystart="474" bodyend="479"/>
      </memberdef>
      <memberdef kind="function" id="namespaced3d_1_1buffers_1a35f6b002b758ba351f194da46b93a5de" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t d3d::buffers::dword_count_per_call</definition>
        <argsstring>(Indirect indirect_type)</argsstring>
        <name>dword_count_per_call</name>
        <qualifiedname>d3d::buffers::dword_count_per_call</qualifiedname>
        <param>
          <type><ref refid="namespaced3d_1_1buffers_1a696757538a427695f6e00683069bd4ca" kindref="member">Indirect</ref></type>
          <declname>indirect_type</declname>
        </param>
        <briefdescription>
<para>Returns the amount of dwords per indirect command parameters based on the given indirect buffer type. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>indirect_type</parametername>
</parameternamelist>
<parameterdescription>
<para>The type of indirect operation (Dispatch, Draw, or DrawIndexed).</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The amount of dwords per indirect command parameters. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dag_buffers.h" line="489" column="17" bodyfile="dag_buffers.h" bodystart="489" bodyend="499"/>
      </memberdef>
      <memberdef kind="function" id="namespaced3d_1_1buffers_1aa81d4cda2fd61b2a286035fa03a4a25c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classSbuffer" kindref="compound">Sbuffer</ref> *</type>
        <definition>Sbuffer * d3d::buffers::create_ua_indirect</definition>
        <argsstring>(Indirect indirect_type, uint32_t records_count, const char *name)</argsstring>
        <name>create_ua_indirect</name>
        <qualifiedname>d3d::buffers::create_ua_indirect</qualifiedname>
        <param>
          <type><ref refid="namespaced3d_1_1buffers_1a696757538a427695f6e00683069bd4ca" kindref="member">Indirect</ref></type>
          <declname>indirect_type</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>records_count</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <briefdescription>
<para>Creates an indirect buffer filled by the GPU. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>indirect_type</parametername>
</parameternamelist>
<parameterdescription>
<para>The type of the indirect commands stored in the buffer. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>records_count</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of indirect records in the buffer. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the buffer, used for debugging purposes, like showing in in statistcs, and frame debuggers like PIX. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A pointer to the created buffer. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dag_buffers.h" line="509" column="16" bodyfile="dag_buffers.h" bodystart="509" bodyend="513"/>
      </memberdef>
      <memberdef kind="function" id="namespaced3d_1_1buffers_1aa32f38f3746f3aa2716756359233fefd" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classSbuffer" kindref="compound">Sbuffer</ref> *</type>
        <definition>Sbuffer * d3d::buffers::create_indirect</definition>
        <argsstring>(Indirect indirect_type, uint32_t records_count, const char *name)</argsstring>
        <name>create_indirect</name>
        <qualifiedname>d3d::buffers::create_indirect</qualifiedname>
        <param>
          <type><ref refid="namespaced3d_1_1buffers_1a696757538a427695f6e00683069bd4ca" kindref="member">Indirect</ref></type>
          <declname>indirect_type</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>records_count</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <briefdescription>
<para>Creates an indirect buffer filled by the CPU. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>indirect_type</parametername>
</parameternamelist>
<parameterdescription>
<para>The type of the indirect commands stored in the buffer. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>records_count</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of indirect records in the buffer. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the buffer, used for debugging purposes, like showing in in statistcs, and frame debuggers like PIX. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A pointer to the created buffer. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dag_buffers.h" line="524" column="16" bodyfile="dag_buffers.h" bodystart="524" bodyend="528"/>
      </memberdef>
      <memberdef kind="function" id="namespaced3d_1_1buffers_1abe7afbe7c1a824f0f310eb81e948071e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classSbuffer" kindref="compound">Sbuffer</ref> *</type>
        <definition>Sbuffer * d3d::buffers::create_staging</definition>
        <argsstring>(uint32_t size_in_bytes, const char *name)</argsstring>
        <name>create_staging</name>
        <qualifiedname>d3d::buffers::create_staging</qualifiedname>
        <param>
          <type>uint32_t</type>
          <declname>size_in_bytes</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <briefdescription>
<para>Creates a buffer for data transfer from CPU to GPU. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>size_in_bytes</parametername>
</parameternamelist>
<parameterdescription>
<para>The size of the buffer in bytes. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the buffer, used for debugging purposes, like showing in in statistcs, and frame debuggers like PIX. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A pointer to the created buffer. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dag_buffers.h" line="538" column="16" bodyfile="dag_buffers.h" bodystart="538" bodyend="541"/>
      </memberdef>
      <memberdef kind="function" id="namespaced3d_1_1buffers_1adc0851f19e23245821a7f08fc5ba66b9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classSbuffer" kindref="compound">Sbuffer</ref> *</type>
        <definition>Sbuffer * d3d::buffers::create_persistent_sr_tbuf</definition>
        <argsstring>(uint32_t elements_count, uint32_t format, const char *name, Init buffer_init=Init::No)</argsstring>
        <name>create_persistent_sr_tbuf</name>
        <qualifiedname>d3d::buffers::create_persistent_sr_tbuf</qualifiedname>
        <param>
          <type>uint32_t</type>
          <declname>elements_count</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>format</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type><ref refid="namespaced3d_1_1buffers_1a7289ebd6e955087eeb533762bac0b98f" kindref="member">Init</ref></type>
          <declname>buffer_init</declname>
          <defval><ref refid="namespaced3d_1_1buffers_1a7289ebd6e955087eeb533762bac0b98fabafd7322c6e97d25b6299b5d6fe8920b" kindref="member">Init::No</ref></defval>
        </param>
        <briefdescription>
<para>Create a t-buffer, which can be used through a shader resource view in shaders. In a shader you can declare the buffer using Buffer&lt;BufferFormat&gt;. BufferFormat is a kind of template parameter here. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="warning"><para>The buffer type can be used only for the code which will be used for DX10 compatible hardware.</para>
</simplesect>
The total size of the buffer is sizeof(format) * elements_count.</para>
<para>It is a persistent buffer, so you can update it with VBLOCK_WRITEONLY flag. Locked part of the buffer content will be overwritten.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>elements_count</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of elements in the buffer. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>format</parametername>
</parameternamelist>
<parameterdescription>
<para>The format of each element in the buffer. It must be a valid texture format. Not all texture formats are allowed. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the buffer, used for debugging purposes, like showing in in statistcs, and frame debuggers like PIX. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>buffer_init</parametername>
</parameternamelist>
<parameterdescription>
<para>The initialization option for the buffer. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A pointer to the created buffer. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dag_buffers.h" line="560" column="16" bodyfile="dag_buffers.h" bodystart="560" bodyend="564"/>
      </memberdef>
      <memberdef kind="function" id="namespaced3d_1_1buffers_1a56b92c7b511d9208d640a91fa3a1caf8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classSbuffer" kindref="compound">Sbuffer</ref> *</type>
        <definition>Sbuffer * d3d::buffers::create_persistent_sr_byte_address</definition>
        <argsstring>(uint32_t size_in_dwords, const char *name, Init buffer_init=Init::No)</argsstring>
        <name>create_persistent_sr_byte_address</name>
        <qualifiedname>d3d::buffers::create_persistent_sr_byte_address</qualifiedname>
        <param>
          <type>uint32_t</type>
          <declname>size_in_dwords</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type><ref refid="namespaced3d_1_1buffers_1a7289ebd6e955087eeb533762bac0b98f" kindref="member">Init</ref></type>
          <declname>buffer_init</declname>
          <defval><ref refid="namespaced3d_1_1buffers_1a7289ebd6e955087eeb533762bac0b98fabafd7322c6e97d25b6299b5d6fe8920b" kindref="member">Init::No</ref></defval>
        </param>
        <briefdescription>
<para>Create a byte address buffer, which can be used through a shader resource view in shaders. In a shader you can declare the buffer using ByteAddressBuffer. </para>
        </briefdescription>
        <detaileddescription>
<para>It is a persistent buffer, so you can update it with VBLOCK_WRITEONLY flag. Locked part of the buffer content will be overwritten.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>size_in_dwords</parametername>
</parameternamelist>
<parameterdescription>
<para>The size of the buffer in dwords. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the buffer, used for debugging purposes, like showing in in statistcs, and frame debuggers like PIX. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>buffer_init</parametername>
</parameternamelist>
<parameterdescription>
<para>The initialization option for the buffer. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A pointer to the created buffer. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dag_buffers.h" line="578" column="16" bodyfile="dag_buffers.h" bodystart="578" bodyend="582"/>
      </memberdef>
      <memberdef kind="function" id="namespaced3d_1_1buffers_1acb80ca9442d718525a04ee3e1e4a4655" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classSbuffer" kindref="compound">Sbuffer</ref> *</type>
        <definition>Sbuffer * d3d::buffers::create_persistent_sr_structured</definition>
        <argsstring>(uint32_t structure_size, uint32_t elements_count, const char *name, Init buffer_init=Init::No)</argsstring>
        <name>create_persistent_sr_structured</name>
        <qualifiedname>d3d::buffers::create_persistent_sr_structured</qualifiedname>
        <param>
          <type>uint32_t</type>
          <declname>structure_size</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>elements_count</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type><ref refid="namespaced3d_1_1buffers_1a7289ebd6e955087eeb533762bac0b98f" kindref="member">Init</ref></type>
          <declname>buffer_init</declname>
          <defval><ref refid="namespaced3d_1_1buffers_1a7289ebd6e955087eeb533762bac0b98fabafd7322c6e97d25b6299b5d6fe8920b" kindref="member">Init::No</ref></defval>
        </param>
        <briefdescription>
<para>Create a structured buffer, which can be used through a shader resource view in shaders. In a shader you can declare the buffer using StructuredBuffer&lt;StructureType&gt;. StructureType is a kind of template parameter here. </para>
        </briefdescription>
        <detaileddescription>
<para>It is a persistent buffer, so you can update it with VBLOCK_WRITEONLY flag. Locked part of the buffer content will be overwritten.</para>
<para>Declare StructureType in *.hlsli file and include it both in C++ and shader code.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>structure_size</parametername>
</parameternamelist>
<parameterdescription>
<para>The size of the structure of the buffer elements. Usually it is a sizeof(StructureType). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>elements_count</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of elements in the buffer. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the buffer, used for debugging purposes, like showing in in statistcs, and frame debuggers like PIX. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>buffer_init</parametername>
</parameternamelist>
<parameterdescription>
<para>The initialization option for the buffer. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A pointer to the created buffer. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dag_buffers.h" line="599" column="16" bodyfile="dag_buffers.h" bodystart="599" bodyend="604"/>
      </memberdef>
      <memberdef kind="function" id="namespaced3d_1_1buffers_1ae0ec01f2d5df025225881ff36fde0936" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classSbuffer" kindref="compound">Sbuffer</ref> *</type>
        <definition>Sbuffer * d3d::buffers::create_one_frame_sr_tbuf</definition>
        <argsstring>(uint32_t elements_count, uint32_t format, const char *name)</argsstring>
        <name>create_one_frame_sr_tbuf</name>
        <qualifiedname>d3d::buffers::create_one_frame_sr_tbuf</qualifiedname>
        <param>
          <type>uint32_t</type>
          <declname>elements_count</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>format</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <briefdescription>
<para>Create a t-buffer, which can be used through a shader resource view in shaders. In a shader you can declare the buffer using Buffer&lt;BufferFormat&gt;. BufferFormat is a kind of template parameter here. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="warning"><para>The buffer type can be used only for the code which will be used for DX10 compatible hardware.</para>
</simplesect>
The total size of the buffer is sizeof(format) * elements_count. To use the buffer, lock it with VBLOCK_DISCARD flag (and with VBLOCK_NOOVERWRITE during the frame) and fill it on CPU. On the next frame data in the buffer could be invalid, so don&apos;t read from it until you fill it with lock again.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>elements_count</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of elements in the buffer. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>format</parametername>
</parameternamelist>
<parameterdescription>
<para>The format of each element in the buffer. It must be a valid texture format. Not all texture formats are allowed. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the buffer, used for debugging purposes, like showing in in statistcs, and frame debuggers like PIX. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A pointer to the created buffer. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dag_buffers.h" line="622" column="16" bodyfile="dag_buffers.h" bodystart="622" bodyend="626"/>
      </memberdef>
      <memberdef kind="function" id="namespaced3d_1_1buffers_1a7c338748365c1d7e19e3ce4312deac39" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classSbuffer" kindref="compound">Sbuffer</ref> *</type>
        <definition>Sbuffer * d3d::buffers::create_one_frame_sr_byte_address</definition>
        <argsstring>(uint32_t size_in_dwords, const char *name)</argsstring>
        <name>create_one_frame_sr_byte_address</name>
        <qualifiedname>d3d::buffers::create_one_frame_sr_byte_address</qualifiedname>
        <param>
          <type>uint32_t</type>
          <declname>size_in_dwords</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <briefdescription>
<para>Create a byte address buffer, which can be used through a shader resource view in shaders. In a shader you can declare the buffer using ByteAddressBuffer. </para>
        </briefdescription>
        <detaileddescription>
<para>To use the buffer, lock it with VBLOCK_DISCARD flag (and with VBLOCK_NOOVERWRITE during the frame) and fill it on CPU. On the next frame data in the buffer could be invalid, so don&apos;t read from it until you fill it with lock again.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>size_in_dwords</parametername>
</parameternamelist>
<parameterdescription>
<para>The size of the buffer in dwords. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the buffer, used for debugging purposes, like showing in in statistcs, and frame debuggers like PIX. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A pointer to the created buffer. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dag_buffers.h" line="640" column="16" bodyfile="dag_buffers.h" bodystart="640" bodyend="644"/>
      </memberdef>
      <memberdef kind="function" id="namespaced3d_1_1buffers_1ababe700f51a05d5d95189afc00e778a6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classSbuffer" kindref="compound">Sbuffer</ref> *</type>
        <definition>Sbuffer * d3d::buffers::create_one_frame_sr_structured</definition>
        <argsstring>(uint32_t structure_size, uint32_t elements_count, const char *name)</argsstring>
        <name>create_one_frame_sr_structured</name>
        <qualifiedname>d3d::buffers::create_one_frame_sr_structured</qualifiedname>
        <param>
          <type>uint32_t</type>
          <declname>structure_size</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>elements_count</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <briefdescription>
<para>Create a structured buffer, which can be used through a shader resource view in shaders. In a shader you can declare the buffer using StructuredBuffer&lt;StructureType&gt;. StructureType is a kind of template parameter here. </para>
        </briefdescription>
        <detaileddescription>
<para>To use the buffer, lock it with VBLOCK_DISCARD flag (and with VBLOCK_NOOVERWRITE during the frame) and fill it on CPU. On the next frame data in the buffer could be invalid, so don&apos;t read from it until you fill it with lock again.</para>
<para>Declare StructureType in *.hlsli file and include it both in C++ and shader code.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>structure_size</parametername>
</parameternamelist>
<parameterdescription>
<para>The size of the structure of the buffer elements. Usually it is a sizeof(StructureType). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>elements_count</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of elements in the buffer. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the buffer, used for debugging purposes, like showing in in statistcs, and frame debuggers like PIX. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A pointer to the created buffer. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dag_buffers.h" line="661" column="16" bodyfile="dag_buffers.h" bodystart="661" bodyend="665"/>
      </memberdef>
      <memberdef kind="function" id="namespaced3d_1_1buffers_1a6aa683e81f70c4860bfe7ddd9eac7acd" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classSbuffer" kindref="compound">Sbuffer</ref> *</type>
        <definition>Sbuffer * d3d::buffers::create_raytrace_scratch_buffer</definition>
        <argsstring>(uint32_t size_in_bytes, const char *name)</argsstring>
        <name>create_raytrace_scratch_buffer</name>
        <qualifiedname>d3d::buffers::create_raytrace_scratch_buffer</qualifiedname>
        <param>
          <type>uint32_t</type>
          <declname>size_in_bytes</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <briefdescription>
<para>Creates a buffer to be used as scratch space for bottom acceleration structure builds and updates. This buffer is used as input for <ref refid="structraytrace_1_1BottomAccelerationStructureBuildInfo_1aa691f78681c696f0e3bc622126784682" kindref="member">raytrace::BottomAccelerationStructureBuildInfo::scratchSpaceBuffer</ref> which is used by d3d::build_bottom_acceleration_structure. </para>
        </briefdescription>
        <detaileddescription>
<para>This buffer is not meant to be accessed in any other way than to be used as a this scratch buffer, as it is used as temporary storage for the on GPU build and update process of bottom acceleration structure and its contents is highly device and device driver specific and can&apos;t be used for anything else anyway.</para>
<para>Sizes needed are provided by the d3d::create_raytrace_bottom_acceleration_structure function.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>size_in_bytes</parametername>
</parameternamelist>
<parameterdescription>
<para>The size in bytes of the scratch buffer. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the buffer, used for debugging purposes, like showing in in statistcs, and frame debuggers like PIX. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A pointer to the created buffer. Returns nullptr on failure. Possible failures are device lost state or out of memory. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dag_buffers.h" line="683" column="16" bodyfile="dag_buffers.h" bodystart="683" bodyend="686"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="dag_buffers.h" line="282" column="1"/>
  </compounddef>
</doxygen>
