<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.7" xml:lang="en-US">
  <compounddef id="dispatchRequest_8h" kind="file" language="C++">
    <compoundname>dispatchRequest.h</compoundname>
    <includes refid="autoResolutionRequest_8h" local="no">render/daFrameGraph/autoResolutionRequest.h</includes>
    <includes refid="virtualResourceRequest_8h" local="no">render/daFrameGraph/virtualResourceRequest.h</includes>
    <includes local="no">render/daFrameGraph/detail/dispatchRequestBase.h</includes>
    <includes local="no">render/daFrameGraph/detail/nodeNameId.h</includes>
    <includes local="no">render/daFrameGraph/detail/shaderNameId.h</includes>
    <includes local="no">render/daFrameGraph/detail/dispatchRequestPolicy.h</includes>
    <includedby refid="registry_8h" local="no">registry.h</includedby>
    <incdepgraph>
      <node id="2">
        <label>render/daFrameGraph/autoResolutionRequest.h</label>
        <link refid="autoResolutionRequest_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>dispatchRequest.h</label>
        <link refid="dispatchRequest_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="12">
        <label>render/daFrameGraph/stage.h</label>
        <link refid="stage_8h"/>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>render/daFrameGraph/usage.h</label>
        <link refid="usage_8h"/>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
      </node>
      <node id="13">
        <label>render/daFrameGraph/virtualResourceHandle.h</label>
        <link refid="virtualResourceHandle_8h"/>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>render/daFrameGraph/virtualResourceRequest.h</label>
        <link refid="virtualResourceRequest_8h"/>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
      </node>
      <node id="15">
        <label>3d/dag_resPtr.h</label>
      </node>
      <node id="10">
        <label>EASTL/string.h</label>
      </node>
      <node id="7">
        <label>EASTL/type_traits.h</label>
      </node>
      <node id="9">
        <label>EASTL/utility.h</label>
      </node>
      <node id="4">
        <label>math/integer/dag_IPoint2.h</label>
      </node>
      <node id="3">
        <label>render/daFrameGraph/detail/autoResTypeNameId.h</label>
      </node>
      <node id="19">
        <label>render/daFrameGraph/detail/dispatchRequestBase.h</label>
      </node>
      <node id="5">
        <label>render/daFrameGraph/detail/dispatchRequestPolicy.h</label>
      </node>
      <node id="18">
        <label>render/daFrameGraph/detail/drawRequestPolicy.h</label>
      </node>
      <node id="20">
        <label>render/daFrameGraph/detail/nodeNameId.h</label>
      </node>
      <node id="17">
        <label>render/daFrameGraph/detail/resourceRequestPolicy.h</label>
      </node>
      <node id="21">
        <label>render/daFrameGraph/detail/shaderNameId.h</label>
      </node>
      <node id="14">
        <label>render/daFrameGraph/detail/virtualResourceHandleBase.h</label>
      </node>
      <node id="16">
        <label>render/daFrameGraph/detail/virtualResourceRequestBase.h</label>
      </node>
      <node id="11">
        <label>util/dag_stdint.h</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="3">
        <label>daFG.h</label>
        <link refid="daFG_8h"/>
      </node>
      <node id="1">
        <label>dispatchRequest.h</label>
        <link refid="dispatchRequest_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>registry.h</label>
        <link refid="registry_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>singleShaders.h</label>
        <link refid="singleShaders_8h"/>
      </node>
    </invincdepgraph>
    <innerclass refid="classdafg_1_1DispatchRequest" prot="public">dafg::DispatchRequest</innerclass>
    <innernamespace refid="namespacedafg">dafg</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Dagor<sp/>Engine<sp/>6.5<sp/>-<sp/>Game<sp/>Libraries</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Copyright<sp/>(C)<sp/>Gaijin<sp/>Games<sp/>KFT.<sp/><sp/>All<sp/>rights<sp/>reserved.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>once</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="autoResolutionRequest_8h" kindref="compound">render/daFrameGraph/autoResolutionRequest.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="virtualResourceRequest_8h" kindref="compound">render/daFrameGraph/virtualResourceRequest.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;render/daFrameGraph/detail/dispatchRequestBase.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;render/daFrameGraph/detail/nodeNameId.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;render/daFrameGraph/detail/shaderNameId.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;render/daFrameGraph/detail/dispatchRequestPolicy.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespacedafg" kindref="compound">dafg</ref></highlight></codeline>
<codeline lineno="15"><highlight class="normal">{</highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">InternalRegistry;</highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;detail::DispatchRequestPolicy&gt;</highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">DispatchRequest;</highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight></codeline>
<codeline lineno="22" refid="namespacedafg_1a586af6f25a430f249f6a8daeceb81200" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal"><ref refid="classdafg_1_1DispatchRequest" kindref="compound">DispatchComputeThreadsRequest</ref><sp/>=<sp/><ref refid="classdafg_1_1DispatchRequest" kindref="compound">DispatchRequest&lt;detail::DispatchRequestPolicy::HasThreads&gt;</ref>;</highlight></codeline>
<codeline lineno="23" refid="namespacedafg_1a36320871f9856273e0268b58b9540736" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal"><ref refid="classdafg_1_1DispatchRequest" kindref="compound">DispatchComputeGroupsRequest</ref><sp/>=<sp/><ref refid="classdafg_1_1DispatchRequest" kindref="compound">DispatchRequest&lt;detail::DispatchRequestPolicy::HasGroups&gt;</ref>;</highlight></codeline>
<codeline lineno="24" refid="namespacedafg_1a4839019b7a27899ebf3882262ed4a4bc" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal"><ref refid="classdafg_1_1DispatchRequest" kindref="compound">DispatchComputeIndirectRequest</ref><sp/>=<sp/><ref refid="classdafg_1_1DispatchRequest" kindref="compound">DispatchRequest&lt;detail::DispatchRequestPolicy::HasIndirect&gt;</ref>;</highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight></codeline>
<codeline lineno="26" refid="namespacedafg_1a505faaf224aa5a9e42d8b3180f4f71da" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal"><ref refid="classdafg_1_1DispatchRequest" kindref="compound">DispatchMeshThreadsRequest</ref><sp/>=<sp/><ref refid="classdafg_1_1DispatchRequest" kindref="compound">DispatchRequest&lt;detail::DispatchRequestPolicy::HasThreads | detail::DispatchRequestPolicy::HasMesh&gt;</ref>;</highlight></codeline>
<codeline lineno="27" refid="namespacedafg_1aad3d2469d471fc0af0e30fe90e872770" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal"><ref refid="classdafg_1_1DispatchRequest" kindref="compound">DispatchMeshGroupsRequest</ref><sp/>=<sp/><ref refid="classdafg_1_1DispatchRequest" kindref="compound">DispatchRequest&lt;detail::DispatchRequestPolicy::HasGroups | detail::DispatchRequestPolicy::HasMesh&gt;</ref>;</highlight></codeline>
<codeline lineno="28" refid="namespacedafg_1aa3874f309a6b25a641dd83486eb2f256" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal"><ref refid="classdafg_1_1DispatchRequest" kindref="compound">DispatchMeshIndirectRequest</ref><sp/>=</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><ref refid="classdafg_1_1DispatchRequest" kindref="compound">DispatchRequest&lt;detail::DispatchRequestPolicy::HasIndirect | detail::DispatchRequestPolicy::HasMesh&gt;</ref>;</highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Due<sp/>to<sp/>weird<sp/>formatting<sp/>with<sp/>constraints</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="comment">//<sp/>clang-format<sp/>off</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;detail::DispatchRequestPolicy<sp/>dispatch_policy&gt;</highlight></codeline>
<codeline lineno="48" refid="classdafg_1_1DispatchRequest" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classdafg_1_1DispatchRequest" kindref="compound">DispatchRequest</ref><sp/>:<sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal"><sp/>detail::DispatchRequestBase</highlight></codeline>
<codeline lineno="49"><highlight class="normal">{</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">RRP<sp/>=<sp/>detail::ResourceRequestPolicy;</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">DRP<sp/>=<sp/>detail::DispatchRequestPolicy;</highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;RRP<sp/>policy&gt;</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>hasPolicy(RRP<sp/>p)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(policy<sp/>&amp;<sp/>p)<sp/>==<sp/>p;<sp/>}</highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>hasPolicy(DRP<sp/>p)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(dispatch_policy<sp/>&amp;<sp/>p)<sp/>==<sp/>p;<sp/>}</highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>DRP<sp/>flipPolicy(DRP<sp/>p)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">DRP</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(eastl::to_underlying(dispatch_policy)<sp/>^<sp/>eastl::to_underlying(p));<sp/>}</highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>hasThreadsOrGroups()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>hasPolicy(DRP::HasThreads)<sp/>||<sp/>hasPolicy(DRP::HasGroups);<sp/>}</highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isBlob()</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>eastl::is_trivially_copyable_v&lt;T&gt;;</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/>RRP<sp/>policy,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>size&gt;</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isValidBlob()</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>isBlob&lt;T&gt;()<sp/>&amp;&amp;<sp/>hasPolicy&lt;policy&gt;(RRP::Readonly)<sp/>&amp;&amp;<sp/>eastl::is_integral_v&lt;T&gt;<sp/>&amp;&amp;<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(T)<sp/>==<sp/>size;</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;auto<sp/>projector,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/>RRP<sp/>policy&gt;</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isValidBlobProjector()</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">ProjectedType<sp/>=<sp/>detail::ProjectedType&lt;projector&gt;;</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>isBlob&lt;T&gt;()<sp/>&amp;&amp;<sp/>hasPolicy&lt;policy&gt;(RRP::Readonly)<sp/>&amp;&amp;<sp/>eastl::is_invocable_v&lt;</highlight><highlight class="keyword">decltype</highlight><highlight class="normal">(projector),<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T<sp/>&amp;&gt;<sp/>&amp;&amp;<sp/>eastl::is_integral_v&lt;ProjectedType&gt;<sp/>&amp;&amp;<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(ProjectedType)<sp/>==<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(uint32_t);</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;auto<sp/>projector,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>D&gt;</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isValidResolutionProjector()</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">ProjecteeType<sp/>=<sp/>detail::ProjecteeType&lt;projector&gt;;</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">ProjectedType<sp/>=<sp/>detail::ProjectedType&lt;projector&gt;;</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>((D<sp/>==<sp/>2<sp/>&amp;&amp;<sp/>eastl::is_same_v&lt;ProjecteeType,<sp/>IPoint2&gt;)<sp/>||<sp/>(D<sp/>==<sp/>3<sp/>&amp;&amp;<sp/>eastl::is_same_v&lt;ProjecteeType,<sp/>IPoint3&gt;))<sp/>&amp;&amp;<sp/>eastl::is_same_v&lt;ProjectedType,<sp/>int&gt;;</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;auto<sp/>projector&gt;</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isValidTextureProjector()</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">ProjecteeType<sp/>=<sp/>detail::ProjecteeType&lt;projector&gt;;</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">ProjectedType<sp/>=<sp/>detail::ProjectedType&lt;projector&gt;;</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>eastl::is_same_v&lt;ProjectedType,<sp/>int&gt;<sp/>&amp;&amp;<sp/>(eastl::is_same_v&lt;ProjecteeType,<sp/>IPoint2&gt;<sp/>||<sp/>eastl::is_same_v&lt;ProjecteeType,<sp/>IPoint3&gt;);</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/>RRP<sp/>policy&gt;</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal"><ref refid="classdafg_1_1VirtualResourceRequest" kindref="compound">BlobRequest</ref><sp/>=<sp/><ref refid="classdafg_1_1VirtualResourceRequest" kindref="compound">VirtualResourceRequest&lt;T, policy&gt;</ref>;</highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;RRP<sp/>policy&gt;</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal"><ref refid="classdafg_1_1VirtualResourceRequest" kindref="compound">TextureRequest</ref><sp/>=<sp/><ref refid="classdafg_1_1VirtualResourceRequest" kindref="compound">VirtualResourceRequest&lt;BaseTexture, policy&gt;</ref>;</highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">Base<sp/>=<sp/>detail::DispatchRequestBase;</highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;detail::DispatchRequestPolicy&gt;</highlight></codeline>
<codeline lineno="106" refid="classdafg_1_1DispatchRequest_1a949fb8ee5b97164be925072537300360" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">friend</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classdafg_1_1DispatchRequest" kindref="compound">DispatchRequest</ref>;</highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight></codeline>
<codeline lineno="108" refid="classdafg_1_1DispatchRequest_1ac7b716e6d41ff508ad2d8e5dad655d72" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">friend</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classdafg_1_1Registry" kindref="compound">Registry</ref>;</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><ref refid="classdafg_1_1DispatchRequest_1a949fb8ee5b97164be925072537300360" kindref="member">DispatchRequest</ref>(InternalRegistry<sp/>*reg,<sp/>NodeNameId<sp/>node_id,<sp/>ShaderNameId<sp/>shader_id)<sp/>:<sp/>Base{reg,<sp/>node_id,<sp/>shader_id}<sp/>{};</highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="112"><highlight class="normal"></highlight></codeline>
<codeline lineno="117" refid="classdafg_1_1DispatchRequest_1af2e706a1931928bdc67a2862da77ad06" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classdafg_1_1DispatchRequest" kindref="compound">DispatchRequest</ref>&lt;flipPolicy(DRP::HasX)&gt;<sp/><ref refid="classdafg_1_1DispatchRequest_1af2e706a1931928bdc67a2862da77ad06" kindref="member">x</ref>(uint32_t<sp/><ref refid="classdafg_1_1DispatchRequest_1af2e706a1931928bdc67a2862da77ad06" kindref="member">x</ref>)<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">requires</highlight><highlight class="normal">(!hasPolicy(DRP::HasX)<sp/>&amp;&amp;<sp/>!hasPolicy(DRP::HasIndirect)<sp/>&amp;&amp;<sp/>hasThreadsOrGroups())</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/>Base::setArg&lt;ArgType::X&gt;(<ref refid="classdafg_1_1DispatchRequest_1af2e706a1931928bdc67a2862da77ad06" kindref="member">x</ref>);</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>{registry,<sp/>nodeId,<sp/>shaderId};</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="123"><highlight class="normal"></highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/>RRP<sp/>policy&gt;</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">requires</highlight><highlight class="normal">(!hasPolicy(DRP::HasX)<sp/>&amp;&amp;<sp/>!hasPolicy(DRP::HasIndirect)<sp/>&amp;&amp;<sp/>hasThreadsOrGroups()<sp/>&amp;&amp;<sp/>isValidBlob&lt;T,<sp/>policy,<sp/>sizeof(uint32_t)&gt;())</highlight></codeline>
<codeline lineno="132" refid="classdafg_1_1DispatchRequest_1af35bbddb63a0500b91bb41268188d8eb" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classdafg_1_1DispatchRequest" kindref="compound">DispatchRequest</ref>&lt;flipPolicy(DRP::HasX)&gt;<sp/><ref refid="classdafg_1_1DispatchRequest_1af35bbddb63a0500b91bb41268188d8eb" kindref="member">x</ref>(<ref refid="classdafg_1_1VirtualResourceRequest" kindref="compound">BlobRequest&lt;T, policy&gt;</ref><sp/>blob)<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/>Base::setBlobArg&lt;ArgType::X&gt;(blob,<sp/>detail::identity_projector);</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>{registry,<sp/>nodeId,<sp/>shaderId};</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="137"><highlight class="normal"></highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;auto<sp/>projector,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/>RRP<sp/>policy&gt;</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">requires</highlight><highlight class="normal">(!hasPolicy(DRP::HasX)<sp/>&amp;&amp;<sp/>!hasPolicy(DRP::HasIndirect)<sp/>&amp;&amp;<sp/>hasThreadsOrGroups()<sp/>&amp;&amp;<sp/>isValidBlobProjector&lt;projector,<sp/>T,<sp/>policy&gt;())</highlight></codeline>
<codeline lineno="148" refid="classdafg_1_1DispatchRequest_1ae2afe58badba2eca13305077f93e13ac" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classdafg_1_1DispatchRequest" kindref="compound">DispatchRequest</ref>&lt;flipPolicy(DRP::HasX)&gt;<sp/><ref refid="classdafg_1_1DispatchRequest_1ae2afe58badba2eca13305077f93e13ac" kindref="member">x</ref>(<ref refid="classdafg_1_1VirtualResourceRequest" kindref="compound">BlobRequest&lt;T, policy&gt;</ref><sp/>blob)<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/>Base::setBlobArg&lt;ArgType::X&gt;(blob,<sp/>detail::erase_projector_type&lt;projector,<sp/>T&gt;());</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>{registry,<sp/>nodeId,<sp/>shaderId};</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="153"><highlight class="normal"></highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;auto<sp/>projector,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>D&gt;</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">requires</highlight><highlight class="normal">(!hasPolicy(DRP::HasX)<sp/>&amp;&amp;<sp/>!hasPolicy(DRP::HasIndirect)<sp/>&amp;&amp;<sp/>hasThreadsOrGroups()<sp/>&amp;&amp;<sp/>isValidResolutionProjector&lt;projector,<sp/>D&gt;())</highlight></codeline>
<codeline lineno="162" refid="classdafg_1_1DispatchRequest_1a0f77b86b0430c3e45811270121c84150" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classdafg_1_1DispatchRequest" kindref="compound">DispatchRequest</ref>&lt;flipPolicy(DRP::HasX)&gt;<sp/><ref refid="classdafg_1_1DispatchRequest_1a0f77b86b0430c3e45811270121c84150" kindref="member">x</ref>(<ref refid="classdafg_1_1AutoResolutionRequest" kindref="compound">AutoResolutionRequest&lt;D&gt;</ref><sp/>resolution)<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/>Base::setAutoResolutionArg&lt;ArgType::X&gt;(resolution,<sp/>detail::erase_projector_type&lt;projector,<sp/>detail::ProjecteeType&lt;projector&gt;&gt;());</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>{registry,<sp/>nodeId,<sp/>shaderId};</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="167"><highlight class="normal"></highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;auto<sp/>projector,<sp/>RRP<sp/>policy&gt;</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">requires</highlight><highlight class="normal">(!hasPolicy(DRP::HasX)<sp/>&amp;&amp;<sp/>!hasPolicy(DRP::HasIndirect)<sp/>&amp;&amp;<sp/>hasThreadsOrGroups()<sp/>&amp;&amp;<sp/>isValidTextureProjector&lt;projector&gt;())</highlight></codeline>
<codeline lineno="176" refid="classdafg_1_1DispatchRequest_1a621f85546b83095e97242f53f9cfde40" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classdafg_1_1DispatchRequest" kindref="compound">DispatchRequest</ref>&lt;flipPolicy(DRP::HasX)&gt;<sp/><ref refid="classdafg_1_1DispatchRequest_1a621f85546b83095e97242f53f9cfde40" kindref="member">x</ref>(<ref refid="classdafg_1_1VirtualResourceRequest" kindref="compound">TextureRequest&lt;policy&gt;</ref><sp/>texture)<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/>Base::setTextureResolutionArg&lt;ArgType::X&gt;(texture,<sp/>detail::erase_projector_type&lt;projector,<sp/>detail::ProjecteeType&lt;projector&gt;&gt;());</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>{registry,<sp/>nodeId,<sp/>shaderId};</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="181"><highlight class="normal"></highlight></codeline>
<codeline lineno="186" refid="classdafg_1_1DispatchRequest_1a3aa5ba43663c5943c0ed902f0650fde2" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classdafg_1_1DispatchRequest" kindref="compound">DispatchRequest</ref>&lt;flipPolicy(DRP::HasY)&gt;<sp/><ref refid="classdafg_1_1DispatchRequest_1a3aa5ba43663c5943c0ed902f0650fde2" kindref="member">y</ref>(uint32_t<sp/><ref refid="classdafg_1_1DispatchRequest_1a3aa5ba43663c5943c0ed902f0650fde2" kindref="member">y</ref>)<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">requires</highlight><highlight class="normal">(!hasPolicy(DRP::HasY)<sp/>&amp;&amp;<sp/>!hasPolicy(DRP::HasIndirect)<sp/>&amp;&amp;<sp/>hasThreadsOrGroups())</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/>Base::setArg&lt;ArgType::Y&gt;(<ref refid="classdafg_1_1DispatchRequest_1a3aa5ba43663c5943c0ed902f0650fde2" kindref="member">y</ref>);</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>{registry,<sp/>nodeId,<sp/>shaderId};</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="192"><highlight class="normal"></highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/>RRP<sp/>policy&gt;</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">requires</highlight><highlight class="normal">(!hasPolicy(DRP::HasY)<sp/>&amp;&amp;<sp/>!hasPolicy(DRP::HasIndirect)<sp/>&amp;&amp;<sp/>hasThreadsOrGroups()<sp/>&amp;&amp;<sp/>isValidBlob&lt;T,<sp/>policy,<sp/>sizeof(uint32_t)&gt;())</highlight></codeline>
<codeline lineno="201" refid="classdafg_1_1DispatchRequest_1af3fa0f14d4739ac2b2dd02b0668e1f05" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classdafg_1_1DispatchRequest" kindref="compound">DispatchRequest</ref>&lt;flipPolicy(DRP::HasY)&gt;<sp/><ref refid="classdafg_1_1DispatchRequest_1af3fa0f14d4739ac2b2dd02b0668e1f05" kindref="member">y</ref>(<ref refid="classdafg_1_1VirtualResourceRequest" kindref="compound">BlobRequest&lt;T, policy&gt;</ref><sp/>blob)<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/>Base::setBlobArg&lt;ArgType::Y&gt;(blob,<sp/>detail::identity_projector);</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>{registry,<sp/>nodeId,<sp/>shaderId};</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="206"><highlight class="normal"></highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;auto<sp/>projector,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/>RRP<sp/>policy&gt;</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">requires</highlight><highlight class="normal">(!hasPolicy(DRP::HasY)<sp/>&amp;&amp;<sp/>!hasPolicy(DRP::HasIndirect)<sp/>&amp;&amp;<sp/>hasThreadsOrGroups()<sp/>&amp;&amp;<sp/>isValidBlobProjector&lt;projector,<sp/>T,<sp/>policy&gt;())</highlight></codeline>
<codeline lineno="217" refid="classdafg_1_1DispatchRequest_1a2d567e67356cd1420b306174f6c66b42" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classdafg_1_1DispatchRequest" kindref="compound">DispatchRequest</ref>&lt;flipPolicy(DRP::HasY)&gt;<sp/><ref refid="classdafg_1_1DispatchRequest_1a2d567e67356cd1420b306174f6c66b42" kindref="member">y</ref>(<ref refid="classdafg_1_1VirtualResourceRequest" kindref="compound">BlobRequest&lt;T, policy&gt;</ref><sp/>blob)<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/>Base::setBlobArg&lt;ArgType::Y&gt;(blob,<sp/>detail::erase_projector_type&lt;projector,<sp/>T&gt;());</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>{registry,<sp/>nodeId,<sp/>shaderId};</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="222"><highlight class="normal"></highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;auto<sp/>projector,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>D&gt;</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">requires</highlight><highlight class="normal">(!hasPolicy(DRP::HasY)<sp/>&amp;&amp;<sp/>!hasPolicy(DRP::HasIndirect)<sp/>&amp;&amp;<sp/>hasThreadsOrGroups()<sp/>&amp;&amp;<sp/>isValidResolutionProjector&lt;projector,<sp/>D&gt;())</highlight></codeline>
<codeline lineno="231" refid="classdafg_1_1DispatchRequest_1a67617f680376bfd7b733006a15f88307" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classdafg_1_1DispatchRequest" kindref="compound">DispatchRequest</ref>&lt;flipPolicy(DRP::HasY)&gt;<sp/><ref refid="classdafg_1_1DispatchRequest_1a67617f680376bfd7b733006a15f88307" kindref="member">y</ref>(<ref refid="classdafg_1_1AutoResolutionRequest" kindref="compound">AutoResolutionRequest&lt;D&gt;</ref><sp/>resolution)<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/>Base::setAutoResolutionArg&lt;ArgType::Y&gt;(resolution,<sp/>detail::erase_projector_type&lt;projector,<sp/>detail::ProjecteeType&lt;projector&gt;&gt;());</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>{registry,<sp/>nodeId,<sp/>shaderId};</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="236"><highlight class="normal"></highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;auto<sp/>projector,<sp/>RRP<sp/>policy&gt;</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">requires</highlight><highlight class="normal">(!hasPolicy(DRP::HasY)<sp/>&amp;&amp;<sp/>!hasPolicy(DRP::HasIndirect)<sp/>&amp;&amp;<sp/>hasThreadsOrGroups()<sp/>&amp;&amp;<sp/>isValidTextureProjector&lt;projector&gt;())</highlight></codeline>
<codeline lineno="245" refid="classdafg_1_1DispatchRequest_1a2e01118630c524786bbd1f27404f4804" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classdafg_1_1DispatchRequest" kindref="compound">DispatchRequest</ref>&lt;flipPolicy(DRP::HasY)&gt;<sp/><ref refid="classdafg_1_1DispatchRequest_1a2e01118630c524786bbd1f27404f4804" kindref="member">y</ref>(<ref refid="classdafg_1_1VirtualResourceRequest" kindref="compound">TextureRequest&lt;policy&gt;</ref><sp/>texture)<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/>Base::setTextureResolutionArg&lt;ArgType::Y&gt;(texture,<sp/>detail::erase_projector_type&lt;projector,<sp/>detail::ProjecteeType&lt;projector&gt;&gt;());</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>{registry,<sp/>nodeId,<sp/>shaderId};</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="250"><highlight class="normal"></highlight></codeline>
<codeline lineno="255" refid="classdafg_1_1DispatchRequest_1ac11edac938c8e7c42ec785c7e917132e" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classdafg_1_1DispatchRequest" kindref="compound">DispatchRequest</ref>&lt;flipPolicy(DRP::HasZ)&gt;<sp/><ref refid="classdafg_1_1DispatchRequest_1ac11edac938c8e7c42ec785c7e917132e" kindref="member">z</ref>(uint32_t<sp/><ref refid="classdafg_1_1DispatchRequest_1ac11edac938c8e7c42ec785c7e917132e" kindref="member">z</ref>)<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">requires</highlight><highlight class="normal">(!hasPolicy(DRP::HasZ)<sp/>&amp;&amp;<sp/>!hasPolicy(DRP::HasIndirect)<sp/>&amp;&amp;<sp/>hasThreadsOrGroups())</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/>Base::setArg&lt;ArgType::Z&gt;(<ref refid="classdafg_1_1DispatchRequest_1ac11edac938c8e7c42ec785c7e917132e" kindref="member">z</ref>);</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>{registry,<sp/>nodeId,<sp/>shaderId};</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="261"><highlight class="normal"></highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/>RRP<sp/>policy&gt;</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">requires</highlight><highlight class="normal">(!hasPolicy(DRP::HasZ)<sp/>&amp;&amp;<sp/>!hasPolicy(DRP::HasIndirect)<sp/>&amp;&amp;<sp/>hasThreadsOrGroups()<sp/>&amp;&amp;<sp/>isValidBlob&lt;T,<sp/>policy,<sp/>sizeof(uint32_t)&gt;())</highlight></codeline>
<codeline lineno="270" refid="classdafg_1_1DispatchRequest_1a67fab29d47897e3a493e0c8ae05c2712" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classdafg_1_1DispatchRequest" kindref="compound">DispatchRequest</ref>&lt;flipPolicy(DRP::HasZ)&gt;<sp/><ref refid="classdafg_1_1DispatchRequest_1a67fab29d47897e3a493e0c8ae05c2712" kindref="member">z</ref>(<ref refid="classdafg_1_1VirtualResourceRequest" kindref="compound">BlobRequest&lt;T, policy&gt;</ref><sp/>blob)<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/>Base::setBlobArg&lt;ArgType::Z&gt;(blob,<sp/>detail::identity_projector);</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>{registry,<sp/>nodeId,<sp/>shaderId};</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="275"><highlight class="normal"></highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;auto<sp/>projector,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/>RRP<sp/>policy&gt;</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">requires</highlight><highlight class="normal">(!hasPolicy(DRP::HasZ)<sp/>&amp;&amp;<sp/>!hasPolicy(DRP::HasIndirect)<sp/>&amp;&amp;<sp/>hasThreadsOrGroups()<sp/>&amp;&amp;<sp/>isValidBlobProjector&lt;projector,<sp/>T,<sp/>policy&gt;())</highlight></codeline>
<codeline lineno="286" refid="classdafg_1_1DispatchRequest_1aeb58312e5747adee1118eda8f929d326" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classdafg_1_1DispatchRequest" kindref="compound">DispatchRequest</ref>&lt;flipPolicy(DRP::HasZ)&gt;<sp/><ref refid="classdafg_1_1DispatchRequest_1aeb58312e5747adee1118eda8f929d326" kindref="member">z</ref>(<ref refid="classdafg_1_1VirtualResourceRequest" kindref="compound">BlobRequest&lt;T, policy&gt;</ref><sp/>blob)<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/>Base::setBlobArg&lt;ArgType::Z&gt;(blob,<sp/>detail::erase_projector_type&lt;projector,<sp/>T&gt;());</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>{registry,<sp/>nodeId,<sp/>shaderId};</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="291"><highlight class="normal"></highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;auto<sp/>projector,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>D&gt;</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">requires</highlight><highlight class="normal">(!hasPolicy(DRP::HasZ)<sp/>&amp;&amp;<sp/>!hasPolicy(DRP::HasIndirect)<sp/>&amp;&amp;<sp/>hasThreadsOrGroups()<sp/>&amp;&amp;<sp/>isValidResolutionProjector&lt;projector,<sp/>D&gt;())</highlight></codeline>
<codeline lineno="300" refid="classdafg_1_1DispatchRequest_1a97a90dfbfbd91a37597cf10ce508e2c6" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classdafg_1_1DispatchRequest" kindref="compound">DispatchRequest</ref>&lt;flipPolicy(DRP::HasZ)&gt;<sp/><ref refid="classdafg_1_1DispatchRequest_1a97a90dfbfbd91a37597cf10ce508e2c6" kindref="member">z</ref>(<ref refid="classdafg_1_1AutoResolutionRequest" kindref="compound">AutoResolutionRequest&lt;D&gt;</ref><sp/>resolution)<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/>Base::setAutoResolutionArg&lt;ArgType::Z&gt;(resolution,<sp/>detail::erase_projector_type&lt;projector,<sp/>detail::ProjecteeType&lt;projector&gt;&gt;());</highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>{registry,<sp/>nodeId,<sp/>shaderId};</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="305"><highlight class="normal"></highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;auto<sp/>projector,<sp/>RRP<sp/>policy&gt;</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">requires</highlight><highlight class="normal">(!hasPolicy(DRP::HasZ)<sp/>&amp;&amp;<sp/>!hasPolicy(DRP::HasIndirect)<sp/>&amp;&amp;<sp/>hasThreadsOrGroups()<sp/>&amp;&amp;<sp/>isValidTextureProjector&lt;projector&gt;())</highlight></codeline>
<codeline lineno="314" refid="classdafg_1_1DispatchRequest_1a234cd9befb2088e56c6278f2f2d5992f" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classdafg_1_1DispatchRequest" kindref="compound">DispatchRequest</ref>&lt;flipPolicy(DRP::HasZ)&gt;<sp/><ref refid="classdafg_1_1DispatchRequest_1a234cd9befb2088e56c6278f2f2d5992f" kindref="member">z</ref>(<ref refid="classdafg_1_1VirtualResourceRequest" kindref="compound">TextureRequest&lt;policy&gt;</ref><sp/>texture)<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/>Base::setTextureResolutionArg&lt;ArgType::Z&gt;(texture,<sp/>detail::erase_projector_type&lt;projector,<sp/>detail::ProjecteeType&lt;projector&gt;&gt;());</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>{registry,<sp/>nodeId,<sp/>shaderId};</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="319"><highlight class="normal"></highlight></codeline>
<codeline lineno="325" refid="classdafg_1_1DispatchRequest_1ab4f819d8bafcc71ede071f86bef7195c" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classdafg_1_1DispatchRequest" kindref="compound">DispatchRequest</ref>&lt;flipPolicy(DRP::HasOffset)&gt;<sp/><ref refid="classdafg_1_1DispatchRequest_1ab4f819d8bafcc71ede071f86bef7195c" kindref="member">offset</ref>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="classdafg_1_1DispatchRequest_1ab4f819d8bafcc71ede071f86bef7195c" kindref="member">offset</ref>)<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">requires</highlight><highlight class="normal">(!hasPolicy(DRP::HasOffset)<sp/>&amp;&amp;<sp/>hasPolicy(DRP::HasIndirect))</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/><sp/>Base::setArg&lt;ArgType::Offset&gt;(<ref refid="classdafg_1_1DispatchRequest_1ab4f819d8bafcc71ede071f86bef7195c" kindref="member">offset</ref>);</highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>{registry,<sp/>nodeId,<sp/>shaderId};</highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="331"><highlight class="normal"></highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/>RRP<sp/>policy&gt;</highlight></codeline>
<codeline lineno="340" refid="classdafg_1_1DispatchRequest_1a3851fbcfcfca88e0170a1dc7f023af77" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classdafg_1_1DispatchRequest" kindref="compound">DispatchRequest</ref>&lt;flipPolicy(DRP::HasOffset)&gt;<sp/><ref refid="classdafg_1_1DispatchRequest_1a3851fbcfcfca88e0170a1dc7f023af77" kindref="member">offset</ref>(<ref refid="classdafg_1_1VirtualResourceRequest" kindref="compound">BlobRequest&lt;T, policy&gt;</ref><sp/>blob)<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">requires</highlight><highlight class="normal">(!hasPolicy(DRP::HasOffset)<sp/>&amp;&amp;<sp/>hasPolicy(DRP::HasIndirect)<sp/>&amp;&amp;<sp/>isValidBlob&lt;T,<sp/>policy,<sp/>sizeof(size_t)&gt;())</highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/><sp/>Base::setBlobArg&lt;ArgType::Offset&gt;(blob,<sp/>detail::identity_projector);</highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>{registry,<sp/>nodeId,<sp/>shaderId};</highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="346"><highlight class="normal"></highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;auto<sp/>projector,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/>RRP<sp/>policy&gt;</highlight></codeline>
<codeline lineno="356" refid="classdafg_1_1DispatchRequest_1a0426fef2572a806708c113a971cdc52a" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classdafg_1_1DispatchRequest" kindref="compound">DispatchRequest</ref>&lt;flipPolicy(DRP::HasOffset)&gt;<sp/><ref refid="classdafg_1_1DispatchRequest_1a0426fef2572a806708c113a971cdc52a" kindref="member">offset</ref>(<ref refid="classdafg_1_1VirtualResourceRequest" kindref="compound">BlobRequest&lt;T, policy&gt;</ref><sp/>blob)<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">requires</highlight><highlight class="normal">(!hasPolicy(DRP::HasOffset)<sp/>&amp;&amp;<sp/>hasPolicy(DRP::HasIndirect)<sp/>&amp;&amp;<sp/>isValidBlobProjector&lt;projector,<sp/>T,<sp/>policy&gt;())</highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><sp/>Base::setBlobArg&lt;ArgType::Offset&gt;(blob,<sp/>detail::erase_projector_type&lt;projector,<sp/>T&gt;());</highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>{registry,<sp/>nodeId,<sp/>shaderId};</highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="362"><highlight class="normal"></highlight></codeline>
<codeline lineno="368" refid="classdafg_1_1DispatchRequest_1a99932ec3c424ce5eac1deba4d004dcf0" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classdafg_1_1DispatchRequest" kindref="compound">DispatchRequest</ref>&lt;flipPolicy(DRP::HasStride)&gt;<sp/><ref refid="classdafg_1_1DispatchRequest_1a99932ec3c424ce5eac1deba4d004dcf0" kindref="member">stride</ref>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="classdafg_1_1DispatchRequest_1a99932ec3c424ce5eac1deba4d004dcf0" kindref="member">stride</ref>)<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">requires</highlight><highlight class="normal">(!hasPolicy(DRP::HasStride)<sp/>&amp;&amp;<sp/>hasPolicy(DRP::HasIndirect)<sp/>&amp;&amp;<sp/>hasPolicy(DRP::HasMesh))</highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/><sp/><sp/>Base::setArg&lt;ArgType::Stride&gt;(<ref refid="classdafg_1_1DispatchRequest_1a99932ec3c424ce5eac1deba4d004dcf0" kindref="member">stride</ref>);</highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>{registry,<sp/>nodeId,<sp/>shaderId};</highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="374"><highlight class="normal"></highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/>RRP<sp/>policy&gt;</highlight></codeline>
<codeline lineno="383" refid="classdafg_1_1DispatchRequest_1a28ea007cdb5bcf17b628db0fe024aa71" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classdafg_1_1DispatchRequest" kindref="compound">DispatchRequest</ref>&lt;flipPolicy(DRP::HasStride)&gt;<sp/><ref refid="classdafg_1_1DispatchRequest_1a28ea007cdb5bcf17b628db0fe024aa71" kindref="member">stride</ref>(<ref refid="classdafg_1_1VirtualResourceRequest" kindref="compound">BlobRequest&lt;T, policy&gt;</ref><sp/>blob)<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">requires</highlight><highlight class="normal">(!hasPolicy(DRP::HasStride)<sp/>&amp;&amp;<sp/>hasPolicy(DRP::HasIndirect)<sp/>&amp;&amp;<sp/>hasPolicy(DRP::HasMesh)<sp/>&amp;&amp;<sp/>isValidBlob&lt;T,<sp/>policy,<sp/>sizeof(size_t)&gt;())</highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/><sp/><sp/>Base::setBlobArg&lt;ArgType::Stride&gt;(blob,<sp/>detail::identity_projector);</highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>{registry,<sp/>nodeId,<sp/>shaderId};</highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="389"><highlight class="normal"></highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;auto<sp/>projector,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/>RRP<sp/>policy&gt;</highlight></codeline>
<codeline lineno="399" refid="classdafg_1_1DispatchRequest_1acced572a1f1b5cc81143e551de41db31" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classdafg_1_1DispatchRequest" kindref="compound">DispatchRequest</ref>&lt;flipPolicy(DRP::HasStride)&gt;<sp/><ref refid="classdafg_1_1DispatchRequest_1acced572a1f1b5cc81143e551de41db31" kindref="member">stride</ref>(<ref refid="classdafg_1_1VirtualResourceRequest" kindref="compound">BlobRequest&lt;T, policy&gt;</ref><sp/>blob)<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">requires</highlight><highlight class="normal">(!hasPolicy(DRP::HasStride)<sp/>&amp;&amp;<sp/>hasPolicy(DRP::HasIndirect)<sp/>&amp;&amp;<sp/>hasPolicy(DRP::HasMesh)<sp/>&amp;&amp;<sp/>isValidBlobProjector&lt;projector,<sp/>T,<sp/>policy&gt;())</highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/><sp/><sp/>Base::setBlobArg&lt;ArgType::Stride&gt;(blob,<sp/>detail::erase_projector_type&lt;projector,<sp/>T&gt;());</highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>{registry,<sp/>nodeId,<sp/>shaderId};</highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="405"><highlight class="normal"></highlight></codeline>
<codeline lineno="411" refid="classdafg_1_1DispatchRequest_1af176ecfb41ecb7c50b4dc0ae470bb9d8" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classdafg_1_1DispatchRequest" kindref="compound">DispatchRequest</ref>&lt;flipPolicy(DRP::HasCount)&gt;<sp/><ref refid="classdafg_1_1DispatchRequest_1af176ecfb41ecb7c50b4dc0ae470bb9d8" kindref="member">count</ref>(uint32_t<sp/><ref refid="classdafg_1_1DispatchRequest_1af176ecfb41ecb7c50b4dc0ae470bb9d8" kindref="member">count</ref>)<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">requires</highlight><highlight class="normal">(!hasPolicy(DRP::HasCount)<sp/>&amp;&amp;<sp/>!hasPolicy(DRP::HasIndirectCount)<sp/>&amp;&amp;<sp/>hasPolicy(DRP::HasIndirect)<sp/>&amp;&amp;<sp/>hasPolicy(DRP::HasMesh))</highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/><sp/><sp/>Base::setArg&lt;ArgType::Count&gt;(<ref refid="classdafg_1_1DispatchRequest_1af176ecfb41ecb7c50b4dc0ae470bb9d8" kindref="member">count</ref>);</highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>{registry,<sp/>nodeId,<sp/>shaderId};</highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="417"><highlight class="normal"></highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/>RRP<sp/>policy&gt;</highlight></codeline>
<codeline lineno="426" refid="classdafg_1_1DispatchRequest_1a5af70dc92a573d9e57cca431fc0979cc" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classdafg_1_1DispatchRequest" kindref="compound">DispatchRequest</ref>&lt;flipPolicy(DRP::HasCount)&gt;<sp/><ref refid="classdafg_1_1DispatchRequest_1a5af70dc92a573d9e57cca431fc0979cc" kindref="member">count</ref>(<ref refid="classdafg_1_1VirtualResourceRequest" kindref="compound">BlobRequest&lt;T, policy&gt;</ref><sp/>blob)<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="427"><highlight class="normal"></highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">requires</highlight><highlight class="normal">(!hasPolicy(DRP::HasCount)<sp/>&amp;&amp;<sp/>!hasPolicy(DRP::HasIndirectCount)<sp/>&amp;&amp;<sp/>hasPolicy(DRP::HasIndirect)<sp/>&amp;&amp;<sp/>hasPolicy(DRP::HasMesh)<sp/>&amp;&amp;<sp/>isValidBlob&lt;T,<sp/>policy,<sp/>sizeof(uint32_t)&gt;())</highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/><sp/><sp/>Base::setBlobArg&lt;ArgType::Count&gt;(blob,<sp/>detail::identity_projector);</highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>{registry,<sp/>nodeId,<sp/>shaderId};</highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="433"><highlight class="normal"></highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;auto<sp/>projector,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/>RRP<sp/>policy&gt;</highlight></codeline>
<codeline lineno="443" refid="classdafg_1_1DispatchRequest_1a91c9a321822be0ad2a47d61ffb925a0b" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classdafg_1_1DispatchRequest" kindref="compound">DispatchRequest</ref>&lt;flipPolicy(DRP::HasCount)&gt;<sp/><ref refid="classdafg_1_1DispatchRequest_1a91c9a321822be0ad2a47d61ffb925a0b" kindref="member">count</ref>(<ref refid="classdafg_1_1VirtualResourceRequest" kindref="compound">BlobRequest&lt;T, policy&gt;</ref><sp/>blob)<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">requires</highlight><highlight class="normal">(!hasPolicy(DRP::HasCount)<sp/>&amp;&amp;<sp/>!hasPolicy(DRP::HasIndirectCount)<sp/>&amp;&amp;<sp/>hasPolicy(DRP::HasIndirect)<sp/>&amp;&amp;<sp/>hasPolicy(DRP::HasMesh)<sp/>&amp;&amp;<sp/>isValidBlobProjector&lt;projector,<sp/>T,<sp/>policy&gt;())</highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/><sp/><sp/>Base::setBlobArg&lt;ArgType::Count&gt;(blob,<sp/>detail::erase_projector_type&lt;projector,<sp/>T&gt;());</highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>{registry,<sp/>nodeId,<sp/>shaderId};</highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="449"><highlight class="normal"></highlight></codeline>
<codeline lineno="455" refid="classdafg_1_1DispatchRequest_1acb73f1e545e03c324c8da2d7f8e588c1" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classdafg_1_1DispatchRequest" kindref="compound">DispatchRequest</ref>&lt;flipPolicy(DRP::HasIndirectCount)&gt;<sp/><ref refid="classdafg_1_1DispatchRequest_1acb73f1e545e03c324c8da2d7f8e588c1" kindref="member">count</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*buffer)<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">requires</highlight><highlight class="normal">(!hasPolicy(DRP::HasIndirectCount)<sp/>&amp;&amp;<sp/>!hasPolicy(DRP::HasCount)<sp/>&amp;&amp;<sp/>hasPolicy(DRP::HasIndirect)<sp/>&amp;&amp;<sp/>hasPolicy(DRP::HasMesh)<sp/>)</highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/><sp/><sp/>Base::meshIndirectCount(buffer);</highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>{registry,<sp/>nodeId,<sp/>shaderId};</highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="461"><highlight class="normal"></highlight></codeline>
<codeline lineno="466" refid="classdafg_1_1DispatchRequest_1a37d8c1b67fa3ab7a7d18fccf4d033a4e" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classdafg_1_1DispatchRequest" kindref="compound">DispatchRequest</ref>&lt;flipPolicy(DRP::HasCountOffset)&gt;<sp/><ref refid="classdafg_1_1DispatchRequest_1a37d8c1b67fa3ab7a7d18fccf4d033a4e" kindref="member">countOffset</ref>(uint32_t<sp/>count_offset)<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="467"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">requires</highlight><highlight class="normal">(!hasPolicy(DRP::HasCountOffset)<sp/>&amp;&amp;<sp/>hasPolicy(DRP::HasIndirectCount))</highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/><sp/><sp/>Base::setArg&lt;ArgType::CountOffset&gt;(count_offset);</highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>{registry,<sp/>nodeId,<sp/>shaderId};</highlight></codeline>
<codeline lineno="471"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="472"><highlight class="normal"></highlight></codeline>
<codeline lineno="480"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/>RRP<sp/>policy&gt;</highlight></codeline>
<codeline lineno="481" refid="classdafg_1_1DispatchRequest_1ac875b8468892b1599fc239101a713662" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classdafg_1_1DispatchRequest" kindref="compound">DispatchRequest</ref>&lt;flipPolicy(DRP::HasCountOffset)&gt;<sp/><ref refid="classdafg_1_1DispatchRequest_1ac875b8468892b1599fc239101a713662" kindref="member">countOffset</ref>(<ref refid="classdafg_1_1VirtualResourceRequest" kindref="compound">BlobRequest&lt;T, policy&gt;</ref><sp/>blob)<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="482"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">requires</highlight><highlight class="normal">(!hasPolicy(DRP::HasCountOffset)<sp/>&amp;&amp;<sp/>hasPolicy(DRP::HasIndirectCount)<sp/>&amp;&amp;<sp/>isValidBlob&lt;T,<sp/>policy,<sp/>sizeof(uint32_t)&gt;())</highlight></codeline>
<codeline lineno="483"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="484"><highlight class="normal"><sp/><sp/><sp/><sp/>Base::setBlobArg&lt;ArgType::CountOffset&gt;(blob,<sp/>detail::identity_projector);</highlight></codeline>
<codeline lineno="485"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>{registry,<sp/>nodeId,<sp/>shaderId};</highlight></codeline>
<codeline lineno="486"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="487"><highlight class="normal"></highlight></codeline>
<codeline lineno="496"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;auto<sp/>projector,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/>RRP<sp/>policy&gt;</highlight></codeline>
<codeline lineno="497" refid="classdafg_1_1DispatchRequest_1a7e58169a4b04662fe0a20360e32f062d" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classdafg_1_1DispatchRequest" kindref="compound">DispatchRequest</ref>&lt;flipPolicy(DRP::HasCountOffset)&gt;<sp/><ref refid="classdafg_1_1DispatchRequest_1a7e58169a4b04662fe0a20360e32f062d" kindref="member">countOffset</ref>(<ref refid="classdafg_1_1VirtualResourceRequest" kindref="compound">BlobRequest&lt;T, policy&gt;</ref><sp/>blob)<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="498"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">requires</highlight><highlight class="normal">(!hasPolicy(DRP::HasCountOffset)<sp/>&amp;&amp;<sp/>hasPolicy(DRP::HasIndirectCount)<sp/>&amp;&amp;<sp/>isValidBlobProjector&lt;projector,<sp/>T,<sp/>policy&gt;())</highlight></codeline>
<codeline lineno="499"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="500"><highlight class="normal"><sp/><sp/><sp/><sp/>Base::setBlobArg&lt;ArgType::CountOffset&gt;(blob,<sp/>detail::erase_projector_type&lt;projector,<sp/>T&gt;());</highlight></codeline>
<codeline lineno="501"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>{registry,<sp/>nodeId,<sp/>shaderId};</highlight></codeline>
<codeline lineno="502"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="503"><highlight class="normal"></highlight></codeline>
<codeline lineno="509" refid="classdafg_1_1DispatchRequest_1ab2ec147ab2b72bc96882295aa2944e64" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classdafg_1_1DispatchRequest" kindref="compound">DispatchRequest</ref>&lt;flipPolicy(DRP::HasMaxCount)&gt;<sp/><ref refid="classdafg_1_1DispatchRequest_1ab2ec147ab2b72bc96882295aa2944e64" kindref="member">maxCount</ref>(uint32_t<sp/>max_count)<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="510"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">requires</highlight><highlight class="normal">(!hasPolicy(DRP::HasMaxCount)<sp/>&amp;&amp;<sp/>hasPolicy(DRP::HasIndirectCount))</highlight></codeline>
<codeline lineno="511"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="512"><highlight class="normal"><sp/><sp/><sp/><sp/>Base::setArg&lt;ArgType::MaxCount&gt;(max_count);</highlight></codeline>
<codeline lineno="513"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>{registry,<sp/>nodeId,<sp/>shaderId};</highlight></codeline>
<codeline lineno="514"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="515"><highlight class="normal"></highlight></codeline>
<codeline lineno="523"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/>RRP<sp/>policy&gt;</highlight></codeline>
<codeline lineno="524" refid="classdafg_1_1DispatchRequest_1a33b23473937e7cbdf74e7a1ec3d1ca58" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classdafg_1_1DispatchRequest" kindref="compound">DispatchRequest</ref>&lt;flipPolicy(DRP::HasMaxCount)&gt;<sp/><ref refid="classdafg_1_1DispatchRequest_1a33b23473937e7cbdf74e7a1ec3d1ca58" kindref="member">maxCount</ref>(<ref refid="classdafg_1_1VirtualResourceRequest" kindref="compound">BlobRequest&lt;T, policy&gt;</ref><sp/>blob)<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="525"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">requires</highlight><highlight class="normal">(!hasPolicy(DRP::HasMaxCount)<sp/>&amp;&amp;<sp/>hasPolicy(DRP::HasIndirectCount)<sp/>&amp;&amp;<sp/>isValidBlob&lt;T,<sp/>policy,<sp/>sizeof(uint32_t)&gt;())</highlight></codeline>
<codeline lineno="526"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="527"><highlight class="normal"><sp/><sp/><sp/><sp/>Base::setBlobArg&lt;ArgType::MaxCount&gt;(blob,<sp/>detail::identity_projector);</highlight></codeline>
<codeline lineno="528"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>{registry,<sp/>nodeId,<sp/>shaderId};</highlight></codeline>
<codeline lineno="529"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="530"><highlight class="normal"></highlight></codeline>
<codeline lineno="539"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;auto<sp/>projector,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/>RRP<sp/>policy&gt;</highlight></codeline>
<codeline lineno="540" refid="classdafg_1_1DispatchRequest_1aa6adf70b7c0860f53e0f0559bd9e264c" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classdafg_1_1DispatchRequest" kindref="compound">DispatchRequest</ref>&lt;flipPolicy(DRP::HasMaxCount)&gt;<sp/><ref refid="classdafg_1_1DispatchRequest_1aa6adf70b7c0860f53e0f0559bd9e264c" kindref="member">maxCount</ref>(<ref refid="classdafg_1_1VirtualResourceRequest" kindref="compound">BlobRequest&lt;T, policy&gt;</ref><sp/>blob)<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="541"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">requires</highlight><highlight class="normal">(!hasPolicy(DRP::HasMaxCount)<sp/>&amp;&amp;<sp/>hasPolicy(DRP::HasIndirectCount)<sp/>&amp;&amp;<sp/>isValidBlobProjector&lt;projector,<sp/>T,<sp/>policy&gt;())</highlight></codeline>
<codeline lineno="542"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="543"><highlight class="normal"><sp/><sp/><sp/><sp/>Base::setBlobArg&lt;ArgType::MaxCount&gt;(blob,<sp/>detail::erase_projector_type&lt;projector,<sp/>T&gt;());</highlight></codeline>
<codeline lineno="544"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>{registry,<sp/>nodeId,<sp/>shaderId};</highlight></codeline>
<codeline lineno="545"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="546"><highlight class="normal"></highlight></codeline>
<codeline lineno="547"><highlight class="normal"></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="548"><highlight class="normal"></highlight></codeline>
<codeline lineno="552"><highlight class="normal"><sp/><sp/><ref refid="classdafg_1_1DispatchRequest" kindref="compound">DispatchRequest</ref>&lt;flipPolicy(DRP::HasMesh)&gt;<sp/>mesh()<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="553"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">requires</highlight><highlight class="normal">(!hasPolicy(DRP::HasMesh))</highlight></codeline>
<codeline lineno="554"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="555"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>{registry,<sp/>nodeId,<sp/>shaderId};</highlight></codeline>
<codeline lineno="556"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="557"><highlight class="normal"></highlight></codeline>
<codeline lineno="561"><highlight class="normal"><sp/><sp/><ref refid="classdafg_1_1DispatchRequest_1a949fb8ee5b97164be925072537300360" kindref="member">DispatchRequest</ref>&lt;flipPolicy(DRP::HasThreads)&gt;<sp/>threads()<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="562"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">requires</highlight><highlight class="normal">(!hasThreadsOrGroups())</highlight></codeline>
<codeline lineno="563"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="564"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>(hasPolicy(DRP::HasMesh))</highlight></codeline>
<codeline lineno="565"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Base::meshThreads();</highlight></codeline>
<codeline lineno="566"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="567"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Base::threads();</highlight></codeline>
<codeline lineno="568"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>{registry,<sp/>nodeId,<sp/>shaderId};</highlight></codeline>
<codeline lineno="569"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="570"><highlight class="normal"></highlight></codeline>
<codeline lineno="574"><highlight class="normal"><sp/><sp/><ref refid="classdafg_1_1DispatchRequest_1a949fb8ee5b97164be925072537300360" kindref="member">DispatchRequest</ref>&lt;flipPolicy(DRP::HasGroups)&gt;<sp/>groups()<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="575"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">requires</highlight><highlight class="normal">(!hasThreadsOrGroups())</highlight></codeline>
<codeline lineno="576"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="577"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>(hasPolicy(DRP::HasMesh))</highlight></codeline>
<codeline lineno="578"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Base::meshGroups();</highlight></codeline>
<codeline lineno="579"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="580"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Base::groups();</highlight></codeline>
<codeline lineno="581"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>{registry,<sp/>nodeId,<sp/>shaderId};</highlight></codeline>
<codeline lineno="582"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="583"><highlight class="normal"></highlight></codeline>
<codeline lineno="589"><highlight class="normal"><sp/><sp/><ref refid="classdafg_1_1DispatchRequest_1a949fb8ee5b97164be925072537300360" kindref="member">DispatchRequest</ref>&lt;flipPolicy(DRP::HasIndirect)&gt;<sp/>indirect(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*buffer)<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="590"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">requires</highlight><highlight class="normal">(!hasPolicy(DRP::HasIndirect)<sp/>&amp;&amp;<sp/>!hasThreadsOrGroups())</highlight></codeline>
<codeline lineno="591"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="592"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>(hasPolicy(DRP::HasMesh))</highlight></codeline>
<codeline lineno="593"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Base::meshIndirect(buffer);</highlight></codeline>
<codeline lineno="594"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="595"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Base::indirect(buffer);</highlight></codeline>
<codeline lineno="596"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>{registry,<sp/>nodeId,<sp/>shaderId};</highlight></codeline>
<codeline lineno="597"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="598"><highlight class="normal">};</highlight></codeline>
<codeline lineno="599"><highlight class="normal"></highlight></codeline>
<codeline lineno="600"><highlight class="normal"></highlight><highlight class="comment">//<sp/>clang-format<sp/>on</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="601"><highlight class="normal"></highlight></codeline>
<codeline lineno="602"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>dafg</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="dispatchRequest.h"/>
  </compounddef>
</doxygen>
