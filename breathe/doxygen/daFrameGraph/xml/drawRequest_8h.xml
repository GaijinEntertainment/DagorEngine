<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.7" xml:lang="en-US">
  <compounddef id="drawRequest_8h" kind="file" language="C++">
    <compoundname>drawRequest.h</compoundname>
    <includes local="no">render/daFrameGraph/detail/drawRequestBase.h</includes>
    <includes local="no">render/daFrameGraph/detail/drawRequestPolicy.h</includes>
    <includes refid="virtualResourceRequest_8h" local="no">render/daFrameGraph/virtualResourceRequest.h</includes>
    <includedby refid="registry_8h" local="no">registry.h</includedby>
    <incdepgraph>
      <node id="1">
        <label>drawRequest.h</label>
        <link refid="drawRequest_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="10">
        <label>render/daFrameGraph/stage.h</label>
        <link refid="stage_8h"/>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>render/daFrameGraph/usage.h</label>
        <link refid="usage_8h"/>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="11">
        <label>render/daFrameGraph/virtualResourceHandle.h</label>
        <link refid="virtualResourceHandle_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>render/daFrameGraph/virtualResourceRequest.h</label>
        <link refid="virtualResourceRequest_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="13">
        <label>3d/dag_resPtr.h</label>
      </node>
      <node id="8">
        <label>EASTL/string.h</label>
      </node>
      <node id="5">
        <label>EASTL/type_traits.h</label>
      </node>
      <node id="7">
        <label>EASTL/utility.h</label>
      </node>
      <node id="16">
        <label>render/daFrameGraph/detail/dispatchRequestPolicy.h</label>
      </node>
      <node id="2">
        <label>render/daFrameGraph/detail/drawRequestBase.h</label>
      </node>
      <node id="3">
        <label>render/daFrameGraph/detail/drawRequestPolicy.h</label>
      </node>
      <node id="15">
        <label>render/daFrameGraph/detail/resourceRequestPolicy.h</label>
      </node>
      <node id="12">
        <label>render/daFrameGraph/detail/virtualResourceHandleBase.h</label>
      </node>
      <node id="14">
        <label>render/daFrameGraph/detail/virtualResourceRequestBase.h</label>
      </node>
      <node id="9">
        <label>util/dag_stdint.h</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="3">
        <label>daFG.h</label>
        <link refid="daFG_8h"/>
      </node>
      <node id="1">
        <label>drawRequest.h</label>
        <link refid="drawRequest_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>registry.h</label>
        <link refid="registry_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>singleShaders.h</label>
        <link refid="singleShaders_8h"/>
      </node>
    </invincdepgraph>
    <innerclass refid="classdafg_1_1DrawRequest" prot="public">dafg::DrawRequest</innerclass>
    <innernamespace refid="namespacedafg">dafg</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Dagor<sp/>Engine<sp/>6.5<sp/>-<sp/>Game<sp/>Libraries</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Copyright<sp/>(C)<sp/>Gaijin<sp/>Games<sp/>KFT.<sp/><sp/>All<sp/>rights<sp/>reserved.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>once</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;render/daFrameGraph/detail/drawRequestBase.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;render/daFrameGraph/detail/drawRequestPolicy.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="virtualResourceRequest_8h" kindref="compound">render/daFrameGraph/virtualResourceRequest.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespacedafg" kindref="compound">dafg</ref></highlight></codeline>
<codeline lineno="12"><highlight class="normal">{</highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">InternalRegistry;</highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;detail::DrawRequestPolicy,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">&gt;</highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">DrawRequest;</highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Due<sp/>to<sp/>weird<sp/>formatting<sp/>with<sp/>constraints</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="comment">//<sp/>clang-format<sp/>off</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;detail::DrawRequestPolicy<sp/>draw_policy,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>indexed&gt;</highlight></codeline>
<codeline lineno="35" refid="classdafg_1_1DrawRequest" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classdafg_1_1DrawRequest" kindref="compound">DrawRequest</ref><sp/>:<sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal"><sp/>detail::DrawRequestBase</highlight></codeline>
<codeline lineno="36"><highlight class="normal">{</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;detail::DrawRequestPolicy,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">&gt;</highlight></codeline>
<codeline lineno="38" refid="classdafg_1_1DrawRequest_1a5d6de53582df98529b17158511c172dc" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">friend</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classdafg_1_1DrawRequest" kindref="compound">DrawRequest</ref>;</highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">Base<sp/>=<sp/>detail::DrawRequestBase;</highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">RRP<sp/>=<sp/>detail::ResourceRequestPolicy;</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">DRP<sp/>=<sp/>detail::DrawRequestPolicy;</highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/>RRP<sp/>policy&gt;</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal"><ref refid="classdafg_1_1VirtualResourceRequest" kindref="compound">BlobRequest</ref><sp/>=<sp/><ref refid="classdafg_1_1VirtualResourceRequest" kindref="compound">VirtualResourceRequest&lt;T, policy&gt;</ref>;</highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;RRP<sp/>policy&gt;</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>hasPolicy(RRP<sp/>p)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(policy<sp/>&amp;<sp/>p)<sp/>==<sp/>p;<sp/>}</highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>hasPolicy(DRP<sp/>p)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(draw_policy<sp/>&amp;<sp/>p)<sp/>==<sp/>p;<sp/>}</highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>DRP<sp/>flipPolicy(DRP<sp/>p)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">DRP</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(eastl::to_underlying(draw_policy)<sp/>^<sp/>eastl::to_underlying(p));<sp/>}</highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isBlob()</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>eastl::is_trivially_copyable_v&lt;T&gt;;</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/>RRP<sp/>policy&gt;</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isValidBlob()</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>isBlob&lt;T&gt;()<sp/>&amp;&amp;<sp/>hasPolicy&lt;policy&gt;(RRP::Readonly)<sp/>&amp;&amp;<sp/>eastl::is_integral_v&lt;T&gt;<sp/>&amp;&amp;<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(T)<sp/>==<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(uint32_t);</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;auto<sp/>projector,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/>RRP<sp/>policy&gt;</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isValidBlobProjector()</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">ProjectedType<sp/>=<sp/>detail::ProjectedType&lt;projector&gt;;</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>isBlob&lt;T&gt;()<sp/>&amp;&amp;<sp/>hasPolicy&lt;policy&gt;(RRP::Readonly)<sp/>&amp;&amp;<sp/>eastl::is_invocable_v&lt;</highlight><highlight class="keyword">decltype</highlight><highlight class="normal">(projector),<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T<sp/>&amp;&gt;<sp/>&amp;&amp;<sp/>eastl::is_integral_v&lt;ProjectedType&gt;<sp/>&amp;&amp;<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(ProjectedType)<sp/>==<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(uint32_t);</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight></codeline>
<codeline lineno="74" refid="classdafg_1_1DrawRequest_1ac7b716e6d41ff508ad2d8e5dad655d72" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">friend</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classdafg_1_1Registry" kindref="compound">Registry</ref>;</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><ref refid="classdafg_1_1DrawRequest_1a5d6de53582df98529b17158511c172dc" kindref="member">DrawRequest</ref>(InternalRegistry<sp/>*reg,<sp/>NodeNameId<sp/>node_id,<sp/>ShaderNameId<sp/>shader_id,<sp/><ref refid="namespacedafg_1a8ec1ed29a6eb6cf5b3868f03071d5a19" kindref="member">dafg::DrawPrimitive</ref><sp/>primitive)<sp/>:<sp/>Base{reg,<sp/>node_id,<sp/>shader_id}</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>(draw_policy<sp/>==<sp/>DRP::Default<sp/>&amp;&amp;<sp/>indexed)</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Base::drawIndexed(primitive);</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>(draw_policy<sp/>==<sp/>DRP::Default)</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Base::draw(primitive);</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><ref refid="classdafg_1_1DrawRequest_1a5d6de53582df98529b17158511c172dc" kindref="member">DrawRequest</ref>(InternalRegistry<sp/>*reg,<sp/>NodeNameId<sp/>node_id,<sp/>ShaderNameId<sp/>shader_id)<sp/>:<sp/>Base{reg,<sp/>node_id,<sp/>shader_id}<sp/>{};</highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight></codeline>
<codeline lineno="91" refid="classdafg_1_1DrawRequest_1ac8397871f67fd6a652b744799f0439d9" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classdafg_1_1DrawRequest" kindref="compound">DrawRequest</ref>&lt;flipPolicy(DRP::HasStartVertex),<sp/>indexed&gt;<sp/><ref refid="classdafg_1_1DrawRequest_1ac8397871f67fd6a652b744799f0439d9" kindref="member">startVertex</ref>(uint32_t<sp/><ref refid="classdafg_1_1DrawRequest_1ac8397871f67fd6a652b744799f0439d9" kindref="member">startVertex</ref>)<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">requires</highlight><highlight class="normal">(!indexed<sp/>&amp;&amp;<sp/>!hasPolicy(DRP::HasStartVertex)<sp/>&amp;&amp;<sp/>!hasPolicy(DRP::HasIndirect))</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/>Base::setArg&lt;ArgType::StartVertex&gt;(<ref refid="classdafg_1_1DrawRequest_1ac8397871f67fd6a652b744799f0439d9" kindref="member">startVertex</ref>);</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>{registry,<sp/>nodeId,<sp/>shaderId};</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/>RRP<sp/>policy&gt;</highlight></codeline>
<codeline lineno="105" refid="classdafg_1_1DrawRequest_1a8447de8f1577f85fe82705dec61abdb4" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classdafg_1_1DrawRequest" kindref="compound">DrawRequest</ref>&lt;flipPolicy(DRP::HasStartVertex),<sp/>indexed&gt;<sp/><ref refid="classdafg_1_1DrawRequest_1a8447de8f1577f85fe82705dec61abdb4" kindref="member">startVertex</ref>(<ref refid="classdafg_1_1VirtualResourceRequest" kindref="compound">BlobRequest&lt;T, policy&gt;</ref><sp/>blob)<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">requires</highlight><highlight class="normal">(!indexed<sp/>&amp;&amp;<sp/>!hasPolicy(DRP::HasStartVertex)<sp/>&amp;&amp;<sp/>!hasPolicy(DRP::HasIndirect)<sp/>&amp;&amp;<sp/>isValidBlob&lt;T,<sp/>policy&gt;())</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/>Base::setBlobArg&lt;ArgType::StartVertex&gt;(blob,<sp/>detail::identity_projector);</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>{registry,<sp/>nodeId,<sp/>shaderId};</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="111"><highlight class="normal"></highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;auto<sp/>projector,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/>RRP<sp/>policy&gt;</highlight></codeline>
<codeline lineno="121" refid="classdafg_1_1DrawRequest_1a5a65244e2a8bd45726a89b9567530d6a" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classdafg_1_1DrawRequest" kindref="compound">DrawRequest</ref>&lt;flipPolicy(DRP::HasStartVertex),<sp/>indexed&gt;<sp/><ref refid="classdafg_1_1DrawRequest_1a5a65244e2a8bd45726a89b9567530d6a" kindref="member">startVertex</ref>(<ref refid="classdafg_1_1VirtualResourceRequest" kindref="compound">BlobRequest&lt;T, policy&gt;</ref><sp/>blob)<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">requires</highlight><highlight class="normal">(!indexed<sp/>&amp;&amp;<sp/>!hasPolicy(DRP::HasStartVertex)<sp/>&amp;&amp;<sp/>!hasPolicy(DRP::HasIndirect)<sp/>&amp;&amp;<sp/>isValidBlobProjector&lt;projector,<sp/>T,<sp/>policy&gt;())</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/>Base::setBlobArg&lt;ArgType::StartVertex&gt;(blob,<sp/>detail::erase_projector_type&lt;projector,<sp/>T&gt;());</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>{registry,<sp/>nodeId,<sp/>shaderId};</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="127"><highlight class="normal"></highlight></codeline>
<codeline lineno="132" refid="classdafg_1_1DrawRequest_1aa8d4b519043c3af93e093650f6b18172" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classdafg_1_1DrawRequest" kindref="compound">DrawRequest</ref>&lt;flipPolicy(DRP::HasBaseVertex),<sp/>indexed&gt;<sp/><ref refid="classdafg_1_1DrawRequest_1aa8d4b519043c3af93e093650f6b18172" kindref="member">baseVertex</ref>(int32_t<sp/>base_vertex)<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">requires</highlight><highlight class="normal">(indexed<sp/>&amp;&amp;<sp/>!hasPolicy(DRP::HasBaseVertex)<sp/>&amp;&amp;<sp/>!hasPolicy(DRP::HasIndirect))</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/>Base::setArg&lt;ArgType::BaseVertex&gt;(base_vertex);</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>{registry,<sp/>nodeId,<sp/>shaderId};</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="138"><highlight class="normal"></highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/>RRP<sp/>policy&gt;</highlight></codeline>
<codeline lineno="146" refid="classdafg_1_1DrawRequest_1a10eaf320a333ecb367af770d549a0a47" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classdafg_1_1DrawRequest" kindref="compound">DrawRequest</ref>&lt;flipPolicy(DRP::HasBaseVertex),<sp/>indexed&gt;<sp/><ref refid="classdafg_1_1DrawRequest_1a10eaf320a333ecb367af770d549a0a47" kindref="member">baseVertex</ref>(<ref refid="classdafg_1_1VirtualResourceRequest" kindref="compound">BlobRequest&lt;T, policy&gt;</ref><sp/>blob)<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">requires</highlight><highlight class="normal">(indexed<sp/>&amp;&amp;<sp/>!hasPolicy(DRP::HasBaseVertex)<sp/>&amp;&amp;<sp/>!hasPolicy(DRP::HasIndirect)<sp/>&amp;&amp;<sp/>isValidBlob&lt;T,<sp/>policy&gt;())</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/>Base::setBlobArg&lt;ArgType::BaseVertex&gt;(blob,<sp/>detail::identity_projector);</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>{registry,<sp/>nodeId,<sp/>shaderId};</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="152"><highlight class="normal"></highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;auto<sp/>projector,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/>RRP<sp/>policy&gt;</highlight></codeline>
<codeline lineno="162" refid="classdafg_1_1DrawRequest_1ab561ae41a8b0b0abf16a40ee122a8fbe" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classdafg_1_1DrawRequest" kindref="compound">DrawRequest</ref>&lt;flipPolicy(DRP::HasBaseVertex),<sp/>indexed&gt;<sp/><ref refid="classdafg_1_1DrawRequest_1ab561ae41a8b0b0abf16a40ee122a8fbe" kindref="member">baseVertex</ref>(<ref refid="classdafg_1_1VirtualResourceRequest" kindref="compound">BlobRequest&lt;T, policy&gt;</ref><sp/>blob)<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">requires</highlight><highlight class="normal">(indexed<sp/>&amp;&amp;<sp/>!hasPolicy(DRP::HasBaseVertex)<sp/>&amp;&amp;<sp/>!hasPolicy(DRP::HasIndirect)<sp/>&amp;&amp;<sp/>isValidBlobProjector&lt;projector,<sp/>T,<sp/>policy&gt;())</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/>Base::setBlobArg&lt;ArgType::BaseVertex&gt;(blob,<sp/>detail::erase_projector_type&lt;projector,<sp/>T&gt;());</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>{registry,<sp/>nodeId,<sp/>shaderId};</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="168"><highlight class="normal"></highlight></codeline>
<codeline lineno="173" refid="classdafg_1_1DrawRequest_1aab374de1a4dbdaaada0d3c41ecd8f65b" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classdafg_1_1DrawRequest" kindref="compound">DrawRequest</ref>&lt;flipPolicy(DRP::HasStartIndex),<sp/>indexed&gt;<sp/><ref refid="classdafg_1_1DrawRequest_1aab374de1a4dbdaaada0d3c41ecd8f65b" kindref="member">startIndex</ref>(uint32_t<sp/>start_index)<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">requires</highlight><highlight class="normal">(indexed<sp/>&amp;&amp;<sp/>!hasPolicy(DRP::HasStartIndex)<sp/>&amp;&amp;<sp/>!hasPolicy(DRP::HasIndirect))</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/>Base::setArg&lt;ArgType::StartIndex&gt;(start_index);</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>{registry,<sp/>nodeId,<sp/>shaderId};</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="179"><highlight class="normal"></highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/>RRP<sp/>policy&gt;</highlight></codeline>
<codeline lineno="187" refid="classdafg_1_1DrawRequest_1a58a3dfe6312a19bb878cad0118885d53" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classdafg_1_1DrawRequest" kindref="compound">DrawRequest</ref>&lt;flipPolicy(DRP::HasStartIndex),<sp/>indexed&gt;<sp/><ref refid="classdafg_1_1DrawRequest_1a58a3dfe6312a19bb878cad0118885d53" kindref="member">startIndex</ref>(<ref refid="classdafg_1_1VirtualResourceRequest" kindref="compound">BlobRequest&lt;T, policy&gt;</ref><sp/>blob)<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">requires</highlight><highlight class="normal">(indexed<sp/>&amp;&amp;<sp/>!hasPolicy(DRP::HasStartIndex)<sp/>&amp;&amp;<sp/>!hasPolicy(DRP::HasIndirect)<sp/>&amp;&amp;<sp/>isValidBlob&lt;T,<sp/>policy&gt;())</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/>Base::setBlobArg&lt;ArgType::StartIndex&gt;(blob,<sp/>detail::identity_projector);</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>{registry,<sp/>nodeId,<sp/>shaderId};</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="193"><highlight class="normal"></highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;auto<sp/>projector,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/>RRP<sp/>policy&gt;</highlight></codeline>
<codeline lineno="203" refid="classdafg_1_1DrawRequest_1a464a64b2e6ac2eb46d5415d92e95b0f0" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classdafg_1_1DrawRequest" kindref="compound">DrawRequest</ref>&lt;flipPolicy(DRP::HasStartIndex),<sp/>indexed&gt;<sp/><ref refid="classdafg_1_1DrawRequest_1a464a64b2e6ac2eb46d5415d92e95b0f0" kindref="member">startIndex</ref>(<ref refid="classdafg_1_1VirtualResourceRequest" kindref="compound">BlobRequest&lt;T, policy&gt;</ref><sp/>blob)<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">requires</highlight><highlight class="normal">(indexed<sp/>&amp;&amp;<sp/>!hasPolicy(DRP::HasStartIndex)<sp/>&amp;&amp;<sp/>!hasPolicy(DRP::HasIndirect)<sp/>&amp;&amp;<sp/>isValidBlobProjector&lt;projector,<sp/>T,<sp/>policy&gt;())</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/>Base::setBlobArg&lt;ArgType::StartIndex&gt;(blob,<sp/>detail::erase_projector_type&lt;projector,<sp/>T&gt;());</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>{registry,<sp/>nodeId,<sp/>shaderId};</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="209"><highlight class="normal"></highlight></codeline>
<codeline lineno="214" refid="classdafg_1_1DrawRequest_1a33985c7d8b11f2397ce808e5d193b882" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classdafg_1_1DrawRequest" kindref="compound">DrawRequest</ref>&lt;flipPolicy(DRP::HasPrimitiveCount),<sp/>indexed&gt;<sp/><ref refid="classdafg_1_1DrawRequest_1a33985c7d8b11f2397ce808e5d193b882" kindref="member">primitiveCount</ref>(uint32_t<sp/>primitive_count)<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">requires</highlight><highlight class="normal">(!hasPolicy(DRP::HasPrimitiveCount)<sp/>&amp;&amp;<sp/>!hasPolicy(DRP::HasIndirect))</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/>Base::setArg&lt;ArgType::PrimitiveCount&gt;(primitive_count);</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>{registry,<sp/>nodeId,<sp/>shaderId};</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="220"><highlight class="normal"></highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/>RRP<sp/>policy&gt;</highlight></codeline>
<codeline lineno="228" refid="classdafg_1_1DrawRequest_1adaaba22f6ac29c8a9baad4255832f098" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classdafg_1_1DrawRequest" kindref="compound">DrawRequest</ref>&lt;flipPolicy(DRP::HasPrimitiveCount),<sp/>indexed&gt;<sp/><ref refid="classdafg_1_1DrawRequest_1adaaba22f6ac29c8a9baad4255832f098" kindref="member">primitiveCount</ref>(<ref refid="classdafg_1_1VirtualResourceRequest" kindref="compound">BlobRequest&lt;T, policy&gt;</ref><sp/>blob)<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">requires</highlight><highlight class="normal">(!hasPolicy(DRP::HasPrimitiveCount)<sp/>&amp;&amp;<sp/>!hasPolicy(DRP::HasIndirect)<sp/>&amp;&amp;<sp/>isValidBlob&lt;T,<sp/>policy&gt;())</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/>Base::setBlobArg&lt;ArgType::PrimitiveCount&gt;(blob,<sp/>detail::identity_projector);</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>{registry,<sp/>nodeId,<sp/>shaderId};</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="234"><highlight class="normal"></highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;auto<sp/>projector,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/>RRP<sp/>policy&gt;</highlight></codeline>
<codeline lineno="244" refid="classdafg_1_1DrawRequest_1a63eb3099f5a38cdd1f39bf05b791c370" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classdafg_1_1DrawRequest" kindref="compound">DrawRequest</ref>&lt;flipPolicy(DRP::HasPrimitiveCount),<sp/>indexed&gt;<sp/><ref refid="classdafg_1_1DrawRequest_1a63eb3099f5a38cdd1f39bf05b791c370" kindref="member">primitiveCount</ref>(<ref refid="classdafg_1_1VirtualResourceRequest" kindref="compound">BlobRequest&lt;T, policy&gt;</ref><sp/>blob)<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">requires</highlight><highlight class="normal">(!hasPolicy(DRP::HasPrimitiveCount)<sp/>&amp;&amp;<sp/>!hasPolicy(DRP::HasIndirect)<sp/>&amp;&amp;<sp/>isValidBlobProjector&lt;projector,<sp/>T,<sp/>policy&gt;())</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/>Base::setBlobArg&lt;ArgType::PrimitiveCount&gt;(blob,<sp/>detail::erase_projector_type&lt;projector,<sp/>T&gt;());</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>{registry,<sp/>nodeId,<sp/>shaderId};</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="250"><highlight class="normal"></highlight></codeline>
<codeline lineno="255" refid="classdafg_1_1DrawRequest_1a4c3fb8b8d6455d48196d548dbf1ec03c" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classdafg_1_1DrawRequest" kindref="compound">DrawRequest</ref>&lt;flipPolicy(DRP::HasStartInstance),<sp/>indexed&gt;<sp/><ref refid="classdafg_1_1DrawRequest_1a4c3fb8b8d6455d48196d548dbf1ec03c" kindref="member">startInstance</ref>(uint32_t<sp/>start_instance)<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">requires</highlight><highlight class="normal">(!hasPolicy(DRP::HasStartInstance)<sp/>&amp;&amp;<sp/>!hasPolicy(DRP::HasIndirect))</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/>Base::setArg&lt;ArgType::StartInstance&gt;(start_instance);</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>{registry,<sp/>nodeId,<sp/>shaderId};</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="261"><highlight class="normal"></highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/>RRP<sp/>policy&gt;</highlight></codeline>
<codeline lineno="269" refid="classdafg_1_1DrawRequest_1a667bfb551e63cff415c6d155f732ac7f" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classdafg_1_1DrawRequest" kindref="compound">DrawRequest</ref>&lt;flipPolicy(DRP::HasStartInstance),<sp/>indexed&gt;<sp/><ref refid="classdafg_1_1DrawRequest_1a667bfb551e63cff415c6d155f732ac7f" kindref="member">startInstance</ref>(<ref refid="classdafg_1_1VirtualResourceRequest" kindref="compound">BlobRequest&lt;T, policy&gt;</ref><sp/>blob)<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">requires</highlight><highlight class="normal">(!hasPolicy(DRP::HasStartInstance)<sp/>&amp;&amp;<sp/>!hasPolicy(DRP::HasIndirect)<sp/>&amp;&amp;<sp/>isValidBlob&lt;T,<sp/>policy&gt;())</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/>Base::setBlobArg&lt;ArgType::StartInstance&gt;(blob,<sp/>detail::identity_projector);</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>{registry,<sp/>nodeId,<sp/>shaderId};</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="275"><highlight class="normal"></highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;auto<sp/>projector,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/>RRP<sp/>policy&gt;</highlight></codeline>
<codeline lineno="285" refid="classdafg_1_1DrawRequest_1aa9e0086663426bc13b03e04451656e61" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classdafg_1_1DrawRequest" kindref="compound">DrawRequest</ref>&lt;flipPolicy(DRP::HasStartInstance),<sp/>indexed&gt;<sp/><ref refid="classdafg_1_1DrawRequest_1aa9e0086663426bc13b03e04451656e61" kindref="member">startInstance</ref>(<ref refid="classdafg_1_1VirtualResourceRequest" kindref="compound">BlobRequest&lt;T, policy&gt;</ref><sp/>blob)<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">requires</highlight><highlight class="normal">(!hasPolicy(DRP::HasStartInstance)<sp/>&amp;&amp;<sp/>!hasPolicy(DRP::HasIndirect)<sp/>&amp;&amp;<sp/>isValidBlobProjector&lt;projector,<sp/>T,<sp/>policy&gt;())</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/>Base::setBlobArg&lt;ArgType::StartInstance&gt;(blob,<sp/>detail::erase_projector_type&lt;projector,<sp/>T&gt;());</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>{registry,<sp/>nodeId,<sp/>shaderId};</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="291"><highlight class="normal"></highlight></codeline>
<codeline lineno="296" refid="classdafg_1_1DrawRequest_1a87bff104d9f55ab0b2208003b738a56a" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classdafg_1_1DrawRequest" kindref="compound">DrawRequest</ref>&lt;flipPolicy(DRP::HasInstanceCount),<sp/>indexed&gt;<sp/><ref refid="classdafg_1_1DrawRequest_1a87bff104d9f55ab0b2208003b738a56a" kindref="member">instanceCount</ref>(uint32_t<sp/>instance_count)<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">requires</highlight><highlight class="normal">(!hasPolicy(DRP::HasInstanceCount)<sp/>&amp;&amp;<sp/>!hasPolicy(DRP::HasIndirect))</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/>Base::setArg&lt;ArgType::InstanceCount&gt;(instance_count);</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>{registry,<sp/>nodeId,<sp/>shaderId};</highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="302"><highlight class="normal"></highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/>RRP<sp/>policy&gt;</highlight></codeline>
<codeline lineno="310" refid="classdafg_1_1DrawRequest_1a65299c3a5f385b0c392d97c3fe502acf" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classdafg_1_1DrawRequest" kindref="compound">DrawRequest</ref>&lt;flipPolicy(DRP::HasInstanceCount),<sp/>indexed&gt;<sp/><ref refid="classdafg_1_1DrawRequest_1a65299c3a5f385b0c392d97c3fe502acf" kindref="member">instanceCount</ref>(<ref refid="classdafg_1_1VirtualResourceRequest" kindref="compound">BlobRequest&lt;T, policy&gt;</ref><sp/>blob)<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">requires</highlight><highlight class="normal">(!hasPolicy(DRP::HasInstanceCount)<sp/>&amp;&amp;<sp/>!hasPolicy(DRP::HasIndirect)<sp/>&amp;&amp;<sp/>isValidBlob&lt;T,<sp/>policy&gt;())</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/>Base::setBlobArg&lt;ArgType::InstanceCount&gt;(blob,<sp/>detail::identity_projector);</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>{registry,<sp/>nodeId,<sp/>shaderId};</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="316"><highlight class="normal"></highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;auto<sp/>projector,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/>RRP<sp/>policy&gt;</highlight></codeline>
<codeline lineno="326" refid="classdafg_1_1DrawRequest_1a0a3047a7d47fb22ec079c5e10b349727" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classdafg_1_1DrawRequest" kindref="compound">DrawRequest</ref>&lt;flipPolicy(DRP::HasInstanceCount),<sp/>indexed&gt;<sp/><ref refid="classdafg_1_1DrawRequest_1a0a3047a7d47fb22ec079c5e10b349727" kindref="member">instanceCount</ref>(<ref refid="classdafg_1_1VirtualResourceRequest" kindref="compound">BlobRequest&lt;T, policy&gt;</ref><sp/>blob)<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">requires</highlight><highlight class="normal">(!hasPolicy(DRP::HasInstanceCount)<sp/>&amp;&amp;<sp/>!hasPolicy(DRP::HasIndirect)<sp/>&amp;&amp;<sp/>isValidBlobProjector&lt;projector,<sp/>T,<sp/>policy&gt;())</highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/>Base::setBlobArg&lt;ArgType::InstanceCount&gt;(blob,<sp/>detail::erase_projector_type&lt;projector,<sp/>T&gt;());</highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>{registry,<sp/>nodeId,<sp/>shaderId};</highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="332"><highlight class="normal"></highlight></codeline>
<codeline lineno="337" refid="classdafg_1_1DrawRequest_1a5636c084b4a2763bb4c6ecd0e6148d40" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classdafg_1_1DrawRequest" kindref="compound">DrawRequest</ref>&lt;flipPolicy(DRP::HasIndirect),<sp/>indexed&gt;<sp/><ref refid="classdafg_1_1DrawRequest_1a5636c084b4a2763bb4c6ecd0e6148d40" kindref="member">indirect</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*buffer)<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">requires</highlight><highlight class="normal">(!hasPolicy(DRP::HasIndirect)<sp/>&amp;&amp;<sp/>!hasPolicy(DRP::HasBaseVertex)<sp/>&amp;&amp;<sp/>!hasPolicy(DRP::HasStartIndex)<sp/>&amp;&amp;<sp/>!hasPolicy(DRP::HasInstanceCount)<sp/>&amp;&amp;<sp/>!hasPolicy(DRP::HasPrimitiveCount))</highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><sp/><sp/>Base::indirect(buffer);</highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>{registry,<sp/>nodeId,<sp/>shaderId};</highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="343"><highlight class="normal"></highlight></codeline>
<codeline lineno="348" refid="classdafg_1_1DrawRequest_1aa213a1e72921957279cf38b94ed0e2e3" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classdafg_1_1DrawRequest" kindref="compound">DrawRequest</ref>&lt;flipPolicy(DRP::HasOffset),<sp/>indexed&gt;<sp/><ref refid="classdafg_1_1DrawRequest_1aa213a1e72921957279cf38b94ed0e2e3" kindref="member">offset</ref>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="classdafg_1_1DrawRequest_1aa213a1e72921957279cf38b94ed0e2e3" kindref="member">offset</ref>)<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">requires</highlight><highlight class="normal">(!hasPolicy(DRP::HasOffset)<sp/>&amp;&amp;<sp/>hasPolicy(DRP::HasIndirect))</highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/>Base::setArg&lt;ArgType::Offset&gt;(<ref refid="classdafg_1_1DrawRequest_1aa213a1e72921957279cf38b94ed0e2e3" kindref="member">offset</ref>);</highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>{registry,<sp/>nodeId,<sp/>shaderId};</highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="354"><highlight class="normal"></highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/>RRP<sp/>policy&gt;</highlight></codeline>
<codeline lineno="362" refid="classdafg_1_1DrawRequest_1a8bc62c7d52d264834e6f550c2133db3a" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classdafg_1_1DrawRequest" kindref="compound">DrawRequest</ref>&lt;flipPolicy(DRP::HasOffset),<sp/>indexed&gt;<sp/><ref refid="classdafg_1_1DrawRequest_1a8bc62c7d52d264834e6f550c2133db3a" kindref="member">offset</ref>(<ref refid="classdafg_1_1VirtualResourceRequest" kindref="compound">BlobRequest&lt;T, policy&gt;</ref><sp/>blob)<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">requires</highlight><highlight class="normal">(!hasPolicy(DRP::HasOffset)<sp/>&amp;&amp;<sp/>hasPolicy(DRP::HasIndirect)<sp/>&amp;&amp;<sp/>isValidBlob&lt;T,<sp/>policy&gt;())</highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><sp/><sp/>Base::setBlobArg&lt;ArgType::Offset&gt;(blob,<sp/>detail::identity_projector);</highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>{registry,<sp/>nodeId,<sp/>shaderId};</highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="368"><highlight class="normal"></highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;auto<sp/>projector,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/>RRP<sp/>policy&gt;</highlight></codeline>
<codeline lineno="378" refid="classdafg_1_1DrawRequest_1a51d9b6d68bc4d0e1790790ffdb6132c1" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classdafg_1_1DrawRequest" kindref="compound">DrawRequest</ref>&lt;flipPolicy(DRP::HasOffset),<sp/>indexed&gt;<sp/><ref refid="classdafg_1_1DrawRequest_1a51d9b6d68bc4d0e1790790ffdb6132c1" kindref="member">offset</ref>(<ref refid="classdafg_1_1VirtualResourceRequest" kindref="compound">BlobRequest&lt;T, policy&gt;</ref><sp/>blob)<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">requires</highlight><highlight class="normal">(!hasPolicy(DRP::HasOffset)<sp/>&amp;&amp;<sp/>hasPolicy(DRP::HasIndirect)<sp/>&amp;&amp;<sp/>isValidBlobProjector&lt;projector,<sp/>T,<sp/>policy&gt;())</highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/><sp/><sp/>Base::setBlobArg&lt;ArgType::Offset&gt;(blob,<sp/>detail::erase_projector_type&lt;projector,<sp/>T&gt;());</highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>{registry,<sp/>nodeId,<sp/>shaderId};</highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="384"><highlight class="normal"></highlight></codeline>
<codeline lineno="389" refid="classdafg_1_1DrawRequest_1ae9cd1f36d3391a796bed9fffdb105e1d" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classdafg_1_1DrawRequest" kindref="compound">DrawRequest</ref>&lt;flipPolicy(DRP::HasStride),<sp/>indexed&gt;<sp/><ref refid="classdafg_1_1DrawRequest_1ae9cd1f36d3391a796bed9fffdb105e1d" kindref="member">stride</ref>(uint32_t<sp/><ref refid="classdafg_1_1DrawRequest_1ae9cd1f36d3391a796bed9fffdb105e1d" kindref="member">stride</ref>)<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">requires</highlight><highlight class="normal">(!hasPolicy(DRP::HasStride)<sp/>&amp;&amp;<sp/>hasPolicy(DRP::HasIndirect))</highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/><sp/><sp/>Base::setArg&lt;ArgType::Stride&gt;(<ref refid="classdafg_1_1DrawRequest_1ae9cd1f36d3391a796bed9fffdb105e1d" kindref="member">stride</ref>);</highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>{registry,<sp/>nodeId,<sp/>shaderId};</highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="395"><highlight class="normal"></highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/>RRP<sp/>policy&gt;</highlight></codeline>
<codeline lineno="403" refid="classdafg_1_1DrawRequest_1a4c779219da1a54c15b5dcd81008ca92f" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classdafg_1_1DrawRequest" kindref="compound">DrawRequest</ref>&lt;flipPolicy(DRP::HasStride),<sp/>indexed&gt;<sp/><ref refid="classdafg_1_1DrawRequest_1a4c779219da1a54c15b5dcd81008ca92f" kindref="member">stride</ref>(<ref refid="classdafg_1_1VirtualResourceRequest" kindref="compound">BlobRequest&lt;T, policy&gt;</ref><sp/>blob)<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">requires</highlight><highlight class="normal">(!hasPolicy(DRP::HasStride)<sp/>&amp;&amp;<sp/>hasPolicy(DRP::HasIndirect)<sp/>&amp;&amp;<sp/>isValidBlob&lt;T,<sp/>policy&gt;())</highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/><sp/><sp/>Base::setBlobArg&lt;ArgType::Stride&gt;(blob,<sp/>detail::identity_projector);</highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>{registry,<sp/>nodeId,<sp/>shaderId};</highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="409"><highlight class="normal"></highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;auto<sp/>projector,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/>RRP<sp/>policy&gt;</highlight></codeline>
<codeline lineno="419" refid="classdafg_1_1DrawRequest_1a6120bfd3ad1ff40cf9de858e233222f5" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classdafg_1_1DrawRequest" kindref="compound">DrawRequest</ref>&lt;flipPolicy(DRP::HasStride),<sp/>indexed&gt;<sp/><ref refid="classdafg_1_1DrawRequest_1a6120bfd3ad1ff40cf9de858e233222f5" kindref="member">stride</ref>(<ref refid="classdafg_1_1VirtualResourceRequest" kindref="compound">BlobRequest&lt;T, policy&gt;</ref><sp/>blob)<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">requires</highlight><highlight class="normal">(!hasPolicy(DRP::HasStride)<sp/>&amp;&amp;<sp/>hasPolicy(DRP::HasIndirect)<sp/>&amp;&amp;<sp/>isValidBlobProjector&lt;projector,<sp/>T,<sp/>policy&gt;())</highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/><sp/><sp/>Base::setBlobArg&lt;ArgType::Stride&gt;(blob,<sp/>detail::erase_projector_type&lt;projector,<sp/>T&gt;());</highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>{registry,<sp/>nodeId,<sp/>shaderId};</highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="425"><highlight class="normal"></highlight></codeline>
<codeline lineno="430" refid="classdafg_1_1DrawRequest_1ae48d867af5c6c24895a637bb6ee26f60" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classdafg_1_1DrawRequest" kindref="compound">DrawRequest</ref>&lt;flipPolicy(DRP::HasCount),<sp/>indexed&gt;<sp/><ref refid="classdafg_1_1DrawRequest_1ae48d867af5c6c24895a637bb6ee26f60" kindref="member">count</ref>(uint32_t<sp/><ref refid="classdafg_1_1DrawRequest_1ae48d867af5c6c24895a637bb6ee26f60" kindref="member">count</ref>)<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">requires</highlight><highlight class="normal">(!hasPolicy(DRP::HasCount)<sp/>&amp;&amp;<sp/>hasPolicy(DRP::HasIndirect))</highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/><sp/><sp/>Base::setArg&lt;ArgType::Count&gt;(<ref refid="classdafg_1_1DrawRequest_1ae48d867af5c6c24895a637bb6ee26f60" kindref="member">count</ref>);</highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>{registry,<sp/>nodeId,<sp/>shaderId};</highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="436"><highlight class="normal"></highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/>RRP<sp/>policy&gt;</highlight></codeline>
<codeline lineno="444" refid="classdafg_1_1DrawRequest_1a4a0e19840c3ac41a80c24e17b1a5f06c" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classdafg_1_1DrawRequest" kindref="compound">DrawRequest</ref>&lt;flipPolicy(DRP::HasCount),<sp/>indexed&gt;<sp/><ref refid="classdafg_1_1DrawRequest_1a4a0e19840c3ac41a80c24e17b1a5f06c" kindref="member">count</ref>(<ref refid="classdafg_1_1VirtualResourceRequest" kindref="compound">BlobRequest&lt;T, policy&gt;</ref><sp/>blob)<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">requires</highlight><highlight class="normal">(!hasPolicy(DRP::HasCount)<sp/>&amp;&amp;<sp/>hasPolicy(DRP::HasIndirect)<sp/>&amp;&amp;<sp/>isValidBlob&lt;T,<sp/>policy&gt;())</highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/><sp/><sp/>Base::setBlobArg&lt;ArgType::Count&gt;(blob,<sp/>detail::identity_projector);</highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>{registry,<sp/>nodeId,<sp/>shaderId};</highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="450"><highlight class="normal"></highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;auto<sp/>projector,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/>RRP<sp/>policy&gt;</highlight></codeline>
<codeline lineno="460" refid="classdafg_1_1DrawRequest_1a0ca00e28de7ca31dd59e2388aa41668c" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classdafg_1_1DrawRequest" kindref="compound">DrawRequest</ref>&lt;flipPolicy(DRP::HasCount),<sp/>indexed&gt;<sp/><ref refid="classdafg_1_1DrawRequest_1a0ca00e28de7ca31dd59e2388aa41668c" kindref="member">count</ref>(<ref refid="classdafg_1_1VirtualResourceRequest" kindref="compound">BlobRequest&lt;T, policy&gt;</ref><sp/>blob)<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">requires</highlight><highlight class="normal">(!hasPolicy(DRP::HasCount)<sp/>&amp;&amp;<sp/>hasPolicy(DRP::HasIndirect)<sp/>&amp;&amp;<sp/>isValidBlobProjector&lt;projector,<sp/>T,<sp/>policy&gt;())</highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/><sp/><sp/>Base::setBlobArg&lt;ArgType::Count&gt;(blob,<sp/>detail::erase_projector_type&lt;projector,<sp/>T&gt;());</highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>{registry,<sp/>nodeId,<sp/>shaderId};</highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="466"><highlight class="normal">};</highlight></codeline>
<codeline lineno="467"><highlight class="normal"></highlight></codeline>
<codeline lineno="468"><highlight class="normal"></highlight><highlight class="comment">//<sp/>clang-format<sp/>on</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="469"><highlight class="normal"></highlight></codeline>
<codeline lineno="470"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>dafg</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="drawRequest.h"/>
  </compounddef>
</doxygen>
