.. autogenerated

***
frp
***

module 'frp'



*Source files:*

*prog/gameLibs/quirrel/frp/frp.cpp*


Usage::

  let { Watched, Computed, set_nested_observable_debug, set_subscriber_validation, make_all_observables_immutable, set_default_deferred, set_recursive_sources, set_slow_update_threshold_usec, recalc_all_computed_values, gather_graph_stats, update_deferred, register_stub_observable_class, warn_on_deprecated_methods, FRP_INITIAL, FRP_DONT_CHECK_NESTED } = require("frp")

or::

  from "frp" import *

.. code-block:: sq

    //'frp' exports:
    {
      class Watched
      class Computed
      function set_nested_observable_debug(arg0): bool -> _undocumented_
      function set_subscriber_validation(arg0): bool -> _undocumented_
      function make_all_observables_immutable(arg0): bool -> _undocumented_
      function set_default_deferred(arg0, arg1): bool, bool -> _undocumented_
      function set_recursive_sources(arg0): bool -> _undocumented_
      function set_slow_update_threshold_usec(arg0): integer -> _undocumented_
      function recalc_all_computed_values()
      function gather_graph_stats()
      function update_deferred()
      function register_stub_observable_class(arg0): class -> _undocumented_
      function warn_on_deprecated_methods()
      const FRP_INITIAL
      const FRP_DONT_CHECK_NESTED
    }
    

-------------
class Watched
-------------

.. sq:method:: Watched()

.. sq:attribute:: property Watched.value

  ``readonly``

.. sq:function:: method Watched.get()

.. sq:attribute:: property Watched.timeChangeReq

  ``readonly``

.. sq:attribute:: property Watched.timeChanged

  ``readonly``

.. sq:function:: method Watched.trigger(arg0)

  :param arg0: autodoc from typemask/paramscheck
  :type arg0: class_instance

  ``nparamscheck:1``

  ``typecheck mask: class_instance``

.. sq:function:: method Watched.trace()

.. sq:function:: method Watched.whiteListMutatorClosure()

.. sq:function:: method Watched.update(arg0, arg1)

  :param arg0: autodoc from typemask/paramscheck
  :type arg0: class_instance

  :param arg1: autodoc from typemask/paramscheck
  :type arg1: any_type

  ``nparamscheck:2``

  ``typecheck mask: class_instance``

.. sq:function:: method Watched.set(arg0, arg1)

  :param arg0: autodoc from typemask/paramscheck
  :type arg0: class_instance

  :param arg1: autodoc from typemask/paramscheck
  :type arg1: any_type

  ``nparamscheck:2``

  ``typecheck mask: class_instance``

.. sq:function:: method Watched.modify(arg0, arg1)

  :param arg0: autodoc from typemask/paramscheck
  :type arg0: class_instance

  :param arg1: autodoc from typemask/paramscheck
  :type arg1: closure_and_nativeclosure

  ``nparamscheck:2``

  ``typecheck mask: class_instance, closure_and_nativeclosure``

.. sq:function:: operator Watched._call(arg0, arg1, arg2)

  :param arg0: autodoc from typemask/paramscheck
  :type arg0: class_instance

  :param arg1: autodoc from typemask/paramscheck
  :type arg1: any_type

  :param arg2: autodoc from typemask/paramscheck
  :type arg2: any_type

  ``nparamscheck:3``

  ``typecheck mask: class_instance``

.. sq:function:: method Watched.mutate(arg0, arg1)

  :param arg0: autodoc from typemask/paramscheck
  :type arg0: class_instance

  :param arg1: autodoc from typemask/paramscheck
  :type arg1: closure_and_nativeclosure

  ``nparamscheck:2``

  ``typecheck mask: class_instance, closure_and_nativeclosure``





------------------------------
class Computed extends Watched
------------------------------

.. sq:method:: Computed()

.. sq:function:: method Computed.update()

.. sq:function:: method Computed.mutate()

.. sq:function:: method Computed.set()

.. sq:function:: method Computed.modify()

.. sq:function:: operator Computed._call()

.. sq:attribute:: property Computed.used

  ``readonly``

.. sq:function:: method Computed._noComputeErrorFor()

.. sq:function:: method Computed.getSources(arg0)

  :param arg0: autodoc from typemask/paramscheck
  :type arg0: class_instance

  ``nparamscheck:1``

  ``typecheck mask: class_instance``

.. sq:attribute:: Computed.Watched

.. sq:attribute:: Computed.Computed





.. sq:function:: function set_nested_observable_debug(arg0)

  :param arg0: autodoc from typemask/paramscheck
  :type arg0: bool

  ``nparamscheck:2``

  ``typecheck mask: any_type, bool``

.. sq:function:: function set_subscriber_validation(arg0)

  :param arg0: autodoc from typemask/paramscheck
  :type arg0: bool

  ``nparamscheck:2``

  ``typecheck mask: any_type, bool``

.. sq:function:: function make_all_observables_immutable(arg0)

  :param arg0: autodoc from typemask/paramscheck
  :type arg0: bool

  ``nparamscheck:2``

  ``typecheck mask: any_type, bool``

.. sq:function:: function set_default_deferred(arg0, arg1)

  :param arg0: autodoc from typemask/paramscheck
  :type arg0: bool

  :param arg1: autodoc from typemask/paramscheck
  :type arg1: bool

  ``nparamscheck:3``

  ``typecheck mask: any_type, bool, bool``

.. sq:function:: function set_recursive_sources(arg0)

  :param arg0: autodoc from typemask/paramscheck
  :type arg0: bool

  ``nparamscheck:2``

  ``typecheck mask: any_type, bool``

.. sq:function:: function set_slow_update_threshold_usec(arg0)

  :param arg0: autodoc from typemask/paramscheck
  :type arg0: integer

  ``nparamscheck:2``

  ``typecheck mask: any_type, integer``

.. sq:function:: function recalc_all_computed_values()

  ``nparamscheck:1``

  ``typecheck mask: any_type``

.. sq:function:: function gather_graph_stats()

  ``nparamscheck:1``

  ``typecheck mask: any_type``

.. sq:function:: function update_deferred()

  ``nparamscheck:1``

  ``typecheck mask: any_type``

.. sq:function:: function register_stub_observable_class(arg0)

  :param arg0: autodoc from typemask/paramscheck
  :type arg0: class

  ``nparamscheck:2``

  ``typecheck mask: any_type, class``

.. sq:function:: function warn_on_deprecated_methods()

.. sq:attribute:: const FRP_INITIAL

.. sq:attribute:: const FRP_DONT_CHECK_NESTED


