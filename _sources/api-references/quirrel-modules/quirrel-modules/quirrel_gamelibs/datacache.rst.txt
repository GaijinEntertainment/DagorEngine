.. autogenerated

*********
datacache
*********

module 'datacache'



*Source files:*

*prog/gameLibs/quirrel/sqDataCache/datacache.cpp*


Usage::

  let { init_cache, request_entry, abort_requests, del_entry, get_all_entries, ERR_UNKNOWN, ERR_OK, ERR_PENDING, ERR_IO, ERR_ABORTED, ERR_MEMORY_LIMIT } = require("datacache")

or::

  from "datacache" import *

.. code-block:: sq

    //'datacache' exports:
    {
      function init_cache(cache_name, params): string, Sqrat::Table -> null
      function request_entry(cache_name, entry_key): string, string -> null
      function abort_requests(cache_name): string -> null
      function del_entry(cache_name, entry_key): string, string -> bool
      function get_all_entries(arg0): string -> _undocumented_
      value ERR_UNKNOWN
      value ERR_OK
      value ERR_PENDING
      value ERR_IO
      value ERR_ABORTED
      value ERR_MEMORY_LIMIT
    }
    

.. sq:function:: function init_cache(cache_name, params)

  :param cache_name:  
  :type cache_name: string

  :param params:  
  :type params: Sqrat::Table

  :return: null

.. sq:function:: function request_entry(cache_name, entry_key)

  :param cache_name:  
  :type cache_name: string

  :param entry_key:  
  :type entry_key: string

  :return: null

.. sq:function:: function abort_requests(cache_name)

  :param cache_name:  
  :type cache_name: string

  :return: null

.. sq:function:: function del_entry(cache_name, entry_key)

  :param cache_name:  
  :type cache_name: string

  :param entry_key:  
  :type entry_key: string

  :return: bool

.. sq:function:: function get_all_entries(arg0)

  :param arg0: autodoc from typemask/paramscheck
  :type arg0: string

  ``nparamscheck:2``

  ``typecheck mask: any_type, string``

.. sq:attribute:: ERR_UNKNOWN

.. sq:attribute:: ERR_OK

.. sq:attribute:: ERR_PENDING

.. sq:attribute:: ERR_IO

.. sq:attribute:: ERR_ABORTED

.. sq:attribute:: ERR_MEMORY_LIMIT


