.. autogenerated

********
dainput2
********

module 'dainput2'



*Source files:*

*prog/gameLibs/daInput/actionSqBind.cpp*


Usage::

  let { SingleButtonId, DigitalActionBinding, AnalogAxisActionBinding, AnalogStickActionBinding } = require("dainput2")

or::

  from "dainput2" import *

.. code-block:: sq

    //'dainput2' exports:
    {
      class SingleButtonId
      class DigitalActionBinding
      class AnalogAxisActionBinding
      class AnalogStickActionBinding
    }
    

--------------------
class SingleButtonId
--------------------

.. sq:attribute:: property SingleButtonId.devId

  integer

.. sq:attribute:: property SingleButtonId.btnId

  integer





--------------------------
class DigitalActionBinding
--------------------------

.. sq:attribute:: property DigitalActionBinding.devId

  integer

.. sq:attribute:: property DigitalActionBinding.ctrlId

  integer

.. sq:attribute:: property DigitalActionBinding.eventType

  integer

.. sq:attribute:: property DigitalActionBinding.axisCtrlThres

  integer

.. sq:attribute:: property DigitalActionBinding.btnCtrl

  bool

.. sq:attribute:: property DigitalActionBinding.stickyToggle

  bool

.. sq:attribute:: property DigitalActionBinding.unordCombo

  bool

.. sq:attribute:: property DigitalActionBinding.modCnt

  integer

.. sq:attribute:: property DigitalActionBinding.mod

  array





-----------------------------
class AnalogAxisActionBinding
-----------------------------

.. sq:attribute:: property AnalogAxisActionBinding.devId

  integer

.. sq:attribute:: property AnalogAxisActionBinding.axisId

  integer

.. sq:attribute:: property AnalogAxisActionBinding.invAxis

  bool

.. sq:attribute:: property AnalogAxisActionBinding.axisRelativeVal

  bool

.. sq:attribute:: property AnalogAxisActionBinding.instantIncDecBtn

  bool

.. sq:attribute:: property AnalogAxisActionBinding.quantizeValOnIncDecBtn

  bool

.. sq:attribute:: property AnalogAxisActionBinding.modCnt

  integer

.. sq:attribute:: property AnalogAxisActionBinding.mod

  array

.. sq:attribute:: property AnalogAxisActionBinding.minBtn

.. sq:attribute:: property AnalogAxisActionBinding.maxBtn

.. sq:attribute:: property AnalogAxisActionBinding.incBtn

.. sq:attribute:: property AnalogAxisActionBinding.decBtn

.. sq:attribute:: property AnalogAxisActionBinding.deadZoneThres

  float

.. sq:attribute:: property AnalogAxisActionBinding.nonLin

  float

.. sq:attribute:: property AnalogAxisActionBinding.maxVal

  float

.. sq:attribute:: property AnalogAxisActionBinding.relIncScale

  float





------------------------------
class AnalogStickActionBinding
------------------------------

.. sq:attribute:: property AnalogStickActionBinding.devId

  integer

.. sq:attribute:: property AnalogStickActionBinding.axisXId

  integer

.. sq:attribute:: property AnalogStickActionBinding.axisYId

  integer

.. sq:attribute:: property AnalogStickActionBinding.axisXinv

  bool

.. sq:attribute:: property AnalogStickActionBinding.axisYinv

  bool

.. sq:attribute:: property AnalogStickActionBinding.modCnt

  integer

.. sq:attribute:: property AnalogStickActionBinding.mod

  array

.. sq:attribute:: property AnalogStickActionBinding.minXBtn

.. sq:attribute:: property AnalogStickActionBinding.maxXBtn

.. sq:attribute:: property AnalogStickActionBinding.minYBtn

.. sq:attribute:: property AnalogStickActionBinding.maxYBtn

.. sq:attribute:: property AnalogStickActionBinding.deadZoneThres

  float

.. sq:attribute:: property AnalogStickActionBinding.axisSnapAngK

  float

.. sq:attribute:: property AnalogStickActionBinding.nonLin

  float

.. sq:attribute:: property AnalogStickActionBinding.maxVal

  float

.. sq:attribute:: property AnalogStickActionBinding.sensScale

  float

.. sq:attribute:: const AnalogStickActionBinding.DEV_none

.. sq:attribute:: const AnalogStickActionBinding.DEV_kbd

.. sq:attribute:: const AnalogStickActionBinding.DEV_pointing

.. sq:attribute:: const AnalogStickActionBinding.DEV_gamepad

.. sq:attribute:: const AnalogStickActionBinding.DEV_joy

.. sq:attribute:: const AnalogStickActionBinding.DEV_nullstub

.. sq:attribute:: const AnalogStickActionBinding.DEV_USED_mouse

.. sq:attribute:: const AnalogStickActionBinding.DEV_USED_kbd

.. sq:attribute:: const AnalogStickActionBinding.DEV_USED_gamepad

.. sq:attribute:: const AnalogStickActionBinding.DEV_USED_touch

.. sq:attribute:: const AnalogStickActionBinding.TYPEGRP__MASK

.. sq:attribute:: const AnalogStickActionBinding.TYPEGRP_DIGITAL

.. sq:attribute:: const AnalogStickActionBinding.TYPE_BUTTON

.. sq:attribute:: const AnalogStickActionBinding.TYPEGRP_AXIS

.. sq:attribute:: const AnalogStickActionBinding.TYPE_TRIGGER

.. sq:attribute:: const AnalogStickActionBinding.TYPE_STEERWHEEL

.. sq:attribute:: const AnalogStickActionBinding.TYPEGRP_STICK

.. sq:attribute:: const AnalogStickActionBinding.TYPE_SYSMOUSE

.. sq:attribute:: const AnalogStickActionBinding.TYPE_ABSMOUSE

.. sq:attribute:: const AnalogStickActionBinding.TYPE_STICK

.. sq:attribute:: const AnalogStickActionBinding.TYPE_STICK_DELTA

.. sq:attribute:: const AnalogStickActionBinding.BAD_ACTION_HANDLE

.. sq:attribute:: const AnalogStickActionBinding.BAD_ACTION_SET_HANDLE

.. sq:attribute:: const AnalogStickActionBinding.AXIS_NULL_ID

.. sq:attribute:: const AnalogStickActionBinding.BTN_NULL_ID

.. sq:attribute:: const AnalogStickActionBinding.BTN_pressed

.. sq:attribute:: const AnalogStickActionBinding.BTN_pressed_long

.. sq:attribute:: const AnalogStickActionBinding.BTN_pressed2

.. sq:attribute:: const AnalogStickActionBinding.BTN_pressed3

.. sq:attribute:: const AnalogStickActionBinding.BTN_released

.. sq:attribute:: const AnalogStickActionBinding.BTN_released_short

.. sq:attribute:: const AnalogStickActionBinding.BTN_released_long

.. sq:attribute:: const AnalogStickActionBinding.ST_in_progress

.. sq:attribute:: const AnalogStickActionBinding.ST_finished

.. sq:attribute:: const AnalogStickActionBinding.ST_cancelled

.. sq:attribute:: const AnalogStickActionBinding.GAMEPAD_VENDOR_UNKNOWN

.. sq:attribute:: const AnalogStickActionBinding.GAMEPAD_VENDOR_MICROSOFT

.. sq:attribute:: const AnalogStickActionBinding.GAMEPAD_VENDOR_SONY

.. sq:attribute:: const AnalogStickActionBinding.GAMEPAD_VENDOR_NINTENDO

.. sq:function:: method AnalogStickActionBinding.set_long_press_time()

.. sq:function:: method AnalogStickActionBinding.get_long_press_time()

.. sq:function:: method AnalogStickActionBinding.set_double_click_time()

.. sq:function:: method AnalogStickActionBinding.get_double_click_time()

.. sq:function:: method AnalogStickActionBinding.get_actions_config_version()

.. sq:function:: method AnalogStickActionBinding.reset_actions_binding()

.. sq:function:: method AnalogStickActionBinding.append_actions_binding()

.. sq:function:: method AnalogStickActionBinding.clear_actions_binding()

.. sq:function:: method AnalogStickActionBinding.load_actions_binding(&blk, column)

  :param &blk:  
  :type &blk: DataBlock

  :param column:  
  :type column: integer

  :return: null

.. sq:function:: method AnalogStickActionBinding.save_actions_binding()

.. sq:function:: method AnalogStickActionBinding.get_actions_binding_columns()

.. sq:function:: method AnalogStickActionBinding.get_tag_str()

.. sq:function:: method AnalogStickActionBinding.set_actions_binding_column_active()

.. sq:function:: method AnalogStickActionBinding.get_actions_binding_column_active()

.. sq:function:: method AnalogStickActionBinding.get_digital_action_state()

.. sq:function:: method AnalogStickActionBinding.get_analog_axis_action_state()

.. sq:function:: method AnalogStickActionBinding.get_analog_stick_action_state()

.. sq:function:: method AnalogStickActionBinding.set_analog_axis_action_state()

.. sq:function:: method AnalogStickActionBinding.get_digital_action_binding()

.. sq:function:: method AnalogStickActionBinding.get_analog_axis_action_binding()

.. sq:function:: method AnalogStickActionBinding.get_analog_stick_action_binding()

.. sq:function:: method AnalogStickActionBinding.is_action_binding_set(a, col)

  :param a:  
  :type a: dainput::action_handle_t

  :param col:  
  :type col: integer

  :return: bool

.. sq:function:: method AnalogStickActionBinding.get_analog_stick_action_smooth_value()

.. sq:function:: method AnalogStickActionBinding.set_analog_stick_action_smooth_value()

.. sq:function:: method AnalogStickActionBinding.get_action_handle()

.. sq:function:: method AnalogStickActionBinding.get_action_type()

.. sq:function:: method AnalogStickActionBinding.get_action_name()

.. sq:function:: method AnalogStickActionBinding.is_action_active()

.. sq:function:: method AnalogStickActionBinding.is_action_internal()

.. sq:function:: method AnalogStickActionBinding.is_action_stateful(action)

  :param action:  
  :type action: dainput::action_handle_t

  :return: bool

.. sq:function:: method AnalogStickActionBinding.get_group_tag_for_action()

.. sq:function:: method AnalogStickActionBinding.get_group_tag_str_for_action()

.. sq:function:: method AnalogStickActionBinding.get_action_set_handle()

.. sq:function:: method AnalogStickActionBinding.get_action_set_name()

.. sq:function:: method AnalogStickActionBinding.get_action_set_actions(arg0, arg1)

  :param arg0: autodoc from typemask/paramscheck
  :type arg0: any_type

  :param arg1: autodoc from typemask/paramscheck
  :type arg1: integer

  ``nparamscheck:2``

  ``typecheck mask: any_type, integer``

.. sq:function:: method AnalogStickActionBinding.setup_action_set(arg0, arg1, arg2)

  :param arg0: autodoc from typemask/paramscheck
  :type arg0: any_type

  :param arg1: autodoc from typemask/paramscheck
  :type arg1: string

  :param arg2: autodoc from typemask/paramscheck
  :type arg2: array

  ``nparamscheck:3``

  ``typecheck mask: any_type, string, array``

.. sq:function:: method AnalogStickActionBinding.clear_action_set_actions()

.. sq:function:: method AnalogStickActionBinding.reset_action_set_stack()

.. sq:function:: method AnalogStickActionBinding.activate_action_set()

.. sq:function:: method AnalogStickActionBinding.get_action_set_stack_depth()

.. sq:function:: method AnalogStickActionBinding.get_action_set_stack_item()

.. sq:function:: method AnalogStickActionBinding.get_current_action_set()

.. sq:function:: method AnalogStickActionBinding.set_breaking_action_set()

.. sq:function:: method AnalogStickActionBinding.get_action_binding()

.. sq:function:: method AnalogStickActionBinding.set_action_binding()

.. sq:function:: method AnalogStickActionBinding.reset_action_binding()

.. sq:function:: method AnalogStickActionBinding.get_actions_count()

.. sq:function:: method AnalogStickActionBinding.get_action_handle_by_ord()

.. sq:function:: method AnalogStickActionBinding.get_action_sets_count()

.. sq:function:: method AnalogStickActionBinding.get_action_set_handle_by_ord()

.. sq:function:: method AnalogStickActionBinding.start_recording_bindings()

.. sq:function:: method AnalogStickActionBinding.start_recording_bindings_for_single_button()

.. sq:function:: method AnalogStickActionBinding.is_recording_in_progress()

.. sq:function:: method AnalogStickActionBinding.is_recording_complete()

.. sq:function:: method AnalogStickActionBinding.finish_recording_bindings()

.. sq:function:: method AnalogStickActionBinding.reset_digital_action_sticky_toggle()

.. sq:function:: method AnalogStickActionBinding.get_last_used_device_mask()

.. sq:function:: method AnalogStickActionBinding.get_overall_button_clicks_count()

.. sq:function:: method AnalogStickActionBinding.enable_darg_events_for_button_clicks()

.. sq:function:: method AnalogStickActionBinding.send_action_event()

.. sq:function:: method AnalogStickActionBinding.send_action_terminated_event()

.. sq:function:: method AnalogStickActionBinding.set_digital_event_progress_monitor(func)

  :param func:  
  :type func: closure_and_nativeclosure

  :return: null

.. sq:function:: method AnalogStickActionBinding.enable_debug_traces()

.. sq:function:: method AnalogStickActionBinding.check_bindings_conflicts(arg0, arg1, arg2)

  :param arg0: autodoc from typemask/paramscheck
  :type arg0: any_type

  :param arg1: autodoc from typemask/paramscheck
  :type arg1: integer

  :param arg2: autodoc from typemask/paramscheck
  :type arg2: class_instance

  ``nparamscheck:3``

  ``typecheck mask: any_type, integer, class_instance``

.. sq:function:: method AnalogStickActionBinding.check_bindings_hides_action(arg0, arg1, arg2)

  :param arg0: autodoc from typemask/paramscheck
  :type arg0: any_type

  :param arg1: autodoc from typemask/paramscheck
  :type arg1: integer

  :param arg2: autodoc from typemask/paramscheck
  :type arg2: class_instance

  ``nparamscheck:3``

  ``typecheck mask: any_type, integer, class_instance``

.. sq:function:: method AnalogStickActionBinding.check_bindings_conflicts_one()

.. sq:function:: method AnalogStickActionBinding.get_action_bindings_text(arg0, arg1)

  :param arg0: autodoc from typemask/paramscheck
  :type arg0: any_type

  :param arg1: autodoc from typemask/paramscheck
  :type arg1: string

  ``nparamscheck:2``

  ``typecheck mask: any_type, string``

.. sq:function:: method AnalogStickActionBinding.format_ctrl_name(arg0, arg1, arg2, arg3, ...)

  :param arg0: autodoc from typemask/paramscheck
  :type arg0: any_type

  :param arg1: autodoc from typemask/paramscheck
  :type arg1: integer

  :param arg2: autodoc from typemask/paramscheck
  :type arg2: integer

  :param arg3: autodoc from typemask/paramscheck
  :type arg3: bool

  :param ...: this function accepts unlimited arguments
  :type ...: any_type

  ``nparamscheck:-3``

  ``typecheck mask: any_type, integer, integer, bool``

.. sq:function:: method AnalogStickActionBinding.set_main_gamepad_stick_dead_zone(stick_idx, dzone)

  :param stick_idx:  
  :type stick_idx: integer

  :param dzone:  
  :type dzone: float

  :return: null

.. sq:function:: method AnalogStickActionBinding.set_joystick_stick_dead_zone(stick_idx, dzone)

  :param stick_idx:  
  :type stick_idx: integer

  :param dzone:  
  :type dzone: float

  :return: null

.. sq:function:: method AnalogStickActionBinding.get_main_gamepad_stick_dead_zone(stick_idx)

  :param stick_idx:  
  :type stick_idx: integer

  :return: float

.. sq:function:: method AnalogStickActionBinding.get_joystick_stick_dead_zone(stick_idx)

  :param stick_idx:  
  :type stick_idx: integer

  :return: float

.. sq:function:: method AnalogStickActionBinding.get_main_gamepad_stick_dead_zone_abs(stick_idx)

  :param stick_idx:  
  :type stick_idx: integer

  :return: float

.. sq:function:: method AnalogStickActionBinding.get_joystick_stick_dead_zone_abs(stick_idx)

  :param stick_idx:  
  :type stick_idx: integer

  :return: float

.. sq:function:: method AnalogStickActionBinding.enable_joystick_gyroscope(enable)

  :param enable:  
  :type enable: bool

  :return: null

.. sq:function:: method AnalogStickActionBinding.set_default_preset_prefix()

.. sq:function:: method AnalogStickActionBinding.get_default_preset_prefix()

.. sq:function:: method AnalogStickActionBinding.load_user_config()

.. sq:function:: method AnalogStickActionBinding.save_user_config()

.. sq:function:: method AnalogStickActionBinding.get_user_config_base_preset()

.. sq:function:: method AnalogStickActionBinding.is_user_config_customized()

.. sq:function:: method AnalogStickActionBinding.reset_user_config_to_preset()

.. sq:function:: method AnalogStickActionBinding.reset_user_config_to_currest_preset()

.. sq:function:: method AnalogStickActionBinding.get_user_props()

.. sq:function:: method AnalogStickActionBinding.is_user_props_customized()

.. sq:function:: method AnalogStickActionBinding.dump_action_sets()

.. sq:function:: method AnalogStickActionBinding.dump_action_sets_stack()

.. sq:function:: method AnalogStickActionBinding.dump_action_set()

.. sq:attribute:: AnalogStickActionBinding.SingleButtonId






