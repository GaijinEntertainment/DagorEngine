.. autogenerated

*********
DataBlock
*********

module 'DataBlock'



*Source files:*

*prog/gameLibs/quirrel/bindQuirrelEx/sqratDataBlock.cpp*


Usage::

  let DataBlock = require("DataBlock")

or::

  from "DataBlock" import *

.. code-block:: sq

    //'DataBlock' exports:
    class DataBlock
    

---------------
class DataBlock
---------------

.. sq:method:: DataBlock(arg0, ...)

  :param arg0: autodoc from typemask/paramscheck
  :type arg0: class_instance

  :param ...: this function accepts unlimited arguments
  :type ...: any_type

  ``nparamscheck:-1``

  ``typecheck mask: class_instance, class_instance``

.. sq:function:: method DataBlock.formatAsString(arg0, arg1, arg2, arg3, ...)

  :param arg0: autodoc from typemask/paramscheck
  :type arg0: class_instance

  :param arg1: autodoc from typemask/paramscheck
  :type arg1: table or integer_or_float

  :param arg2: autodoc from typemask/paramscheck
  :type arg2: integer_or_float

  :param arg3: autodoc from typemask/paramscheck
  :type arg3: integer_or_float

  :param ...: this function accepts unlimited arguments
  :type ...: any_type

  ``nparamscheck:-1``

  ``typecheck mask: class_instance, table or integer_or_float, integer_or_float, integer_or_float``

.. sq:function:: method DataBlock.getBlock()

.. sq:function:: method DataBlock.addBlock()

.. sq:function:: method DataBlock.addNewBlock()

.. sq:function:: method DataBlock.getStr()

.. sq:function:: method DataBlock.getBool()

.. sq:function:: method DataBlock.getReal()

.. sq:function:: method DataBlock.getPoint4()

.. sq:function:: method DataBlock.getPoint3()

.. sq:function:: method DataBlock.getPoint2()

.. sq:function:: method DataBlock.getTm()

.. sq:function:: method DataBlock.getE3dcolor()

.. sq:function:: method DataBlock.setStr()

.. sq:function:: method DataBlock.setBool()

.. sq:function:: method DataBlock.setReal()

.. sq:function:: method DataBlock.setPoint4()

.. sq:function:: method DataBlock.setPoint3()

.. sq:function:: method DataBlock.setPoint2()

.. sq:function:: method DataBlock.setTm()

.. sq:function:: method DataBlock.setE3dcolor()

.. sq:function:: method DataBlock.addStr()

.. sq:function:: method DataBlock.addBool()

.. sq:function:: method DataBlock.addReal()

.. sq:function:: method DataBlock.addPoint3()

.. sq:function:: method DataBlock.addPoint4()

.. sq:function:: method DataBlock.addPoint2()

.. sq:function:: method DataBlock.addTm()

.. sq:function:: method DataBlock.addE3dcolor()

.. sq:function:: method DataBlock.removeParam()

.. sq:function:: method DataBlock.removeParamById()

.. sq:function:: method DataBlock.removeBlock()

.. sq:function:: method DataBlock.removeBlockById()

.. sq:function:: method DataBlock.__getVersion(arg0)

  :param arg0: autodoc from typemask/paramscheck
  :type arg0: class_instance

  ``nparamscheck:1``

  ``typecheck mask: class_instance``

.. sq:function:: method DataBlock.findParam()

.. sq:function:: method DataBlock.paramExists()

.. sq:function:: method DataBlock.blockExists()

.. sq:function:: method DataBlock.getBlockByName()

.. sq:function:: method DataBlock.getBlockByNameEx()

.. sq:function:: method DataBlock.setParamFrom()

.. sq:function:: method DataBlock.setParamsFrom()

.. sq:function:: method DataBlock.setFrom()

.. sq:function:: method DataBlock.setInt()

.. sq:function:: method DataBlock.setInt64()

.. sq:function:: method DataBlock.addInt()

.. sq:function:: method DataBlock.getIPoint3()

.. sq:function:: method DataBlock.setIPoint3()

.. sq:function:: method DataBlock.addIPoint3()

.. sq:function:: method DataBlock.getIPoint4()

.. sq:function:: method DataBlock.setIPoint4()

.. sq:function:: method DataBlock.addIPoint4()

.. sq:function:: method DataBlock.clearData()

.. sq:function:: method DataBlock.reset()

.. sq:function:: method DataBlock.getBlockName()

.. sq:function:: method DataBlock.changeBlockName()

.. sq:function:: method DataBlock.blockCount()

.. sq:function:: method DataBlock.paramCount()

.. sq:function:: method DataBlock.getParamName()

.. sq:function:: method DataBlock.len(arg0)

  :param arg0: autodoc from typemask/paramscheck
  :type arg0: class_instance

  ``nparamscheck:1``

  ``typecheck mask: class_instance``

.. sq:function:: method DataBlock.getParamTypeAnnotation(arg0, arg1)

  :param arg0: autodoc from typemask/paramscheck
  :type arg0: class_instance

  :param arg1: autodoc from typemask/paramscheck
  :type arg1: integer

  ``nparamscheck:2``

  ``typecheck mask: class_instance, integer``

.. sq:function:: method DataBlock.getParamValue(arg0, arg1)

  :param arg0: autodoc from typemask/paramscheck
  :type arg0: class_instance

  :param arg1: autodoc from typemask/paramscheck
  :type arg1: integer

  ``nparamscheck:2``

  ``typecheck mask: class_instance, integer``

.. sq:function:: method DataBlock.getInt(arg0, arg1, ...)

  :param arg0: autodoc from typemask/paramscheck
  :type arg0: class_instance

  :param arg1: autodoc from typemask/paramscheck
  :type arg1: string

  :param ...: this function accepts unlimited arguments
  :type ...: any_type

  ``nparamscheck:-2``

  ``typecheck mask: class_instance, string``

.. sq:function:: operator DataBlock._set(arg0, arg1, arg2)

  :param arg0: autodoc from typemask/paramscheck
  :type arg0: class_instance

  :param arg1: autodoc from typemask/paramscheck
  :type arg1: string

  :param arg2: autodoc from typemask/paramscheck
  :type arg2: any_type

  ``nparamscheck:3``

  ``typecheck mask: class_instance, string``

.. sq:function:: operator DataBlock._get(arg0, arg1)

  :param arg0: autodoc from typemask/paramscheck
  :type arg0: class_instance

  :param arg1: autodoc from typemask/paramscheck
  :type arg1: any_type

  ``nparamscheck:2``

  ``typecheck mask: class_instance``

.. sq:function:: operator DataBlock._modulo(arg0, arg1)

  :param arg0: autodoc from typemask/paramscheck
  :type arg0: class_instance

  :param arg1: autodoc from typemask/paramscheck
  :type arg1: string

  ``nparamscheck:2``

  ``typecheck mask: class_instance, string``

.. sq:function:: operator DataBlock._newslot(arg0, arg1, arg2)

  :param arg0: autodoc from typemask/paramscheck
  :type arg0: class_instance

  :param arg1: autodoc from typemask/paramscheck
  :type arg1: string

  :param arg2: autodoc from typemask/paramscheck
  :type arg2: any_type

  ``nparamscheck:3``

  ``typecheck mask: class_instance, string``

.. sq:function:: operator DataBlock._nexti()

.. sq:function:: method DataBlock.loadFromText(arg0, arg1, arg2)

  :param arg0: autodoc from typemask/paramscheck
  :type arg0: class_instance

  :param arg1: autodoc from typemask/paramscheck
  :type arg1: string

  :param arg2: autodoc from typemask/paramscheck
  :type arg2: integer

  ``nparamscheck:3``

  ``typecheck mask: class_instance, string, integer``

.. sq:function:: method DataBlock.set_root()

.. sq:function:: method DataBlock.setParseIncludesAsParams()

.. sq:function:: method DataBlock.getParseIncludesAsParams()

.. sq:function:: method DataBlock.setParseOverridesNotApply()

.. sq:function:: method DataBlock.getParseOverridesNotApply()

.. sq:function:: method DataBlock.setParseOverridesIgnored()

.. sq:function:: method DataBlock.getParseOverridesIgnored()

.. sq:function:: method DataBlock.setParseCommentsAsParams()

.. sq:function:: method DataBlock.getParseCommentsAsParams()

.. sq:function:: method DataBlock.load(arg0, arg1)

  :param arg0: autodoc from typemask/paramscheck
  :type arg0: class_instance

  :param arg1: autodoc from typemask/paramscheck
  :type arg1: string

  ``nparamscheck:2``

  ``typecheck mask: class_instance, string``

.. sq:function:: method DataBlock.tryLoad(arg0, arg1, ...)

  :param arg0: autodoc from typemask/paramscheck
  :type arg0: class_instance

  :param arg1: autodoc from typemask/paramscheck
  :type arg1: string

  :param ...: this function accepts unlimited arguments
  :type ...: any_type

  ``nparamscheck:-2``

  ``typecheck mask: class_instance, string``

.. sq:function:: method DataBlock.saveToTextFile(arg0, arg1)

  :param arg0: autodoc from typemask/paramscheck
  :type arg0: class_instance

  :param arg1: autodoc from typemask/paramscheck
  :type arg1: string

  ``nparamscheck:2``

  ``typecheck mask: class_instance, string``

.. sq:function:: method DataBlock.saveToTextFileCompact(arg0, arg1)

  :param arg0: autodoc from typemask/paramscheck
  :type arg0: class_instance

  :param arg1: autodoc from typemask/paramscheck
  :type arg1: string

  ``nparamscheck:2``

  ``typecheck mask: class_instance, string``






