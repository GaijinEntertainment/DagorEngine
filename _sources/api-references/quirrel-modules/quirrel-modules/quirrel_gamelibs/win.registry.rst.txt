.. autogenerated

************
win.registry
************

module 'win.registry'



*Source files:*

*prog/gameLibs/quirrel/win_registry/win_registry.cpp*


Usage::

  let { regKeyExists, regValueExists, getRegString, getRegInt, deleteRegKey, deleteRegValue, setRegString, setRegInt, HKEY_CLASSES_ROOT, HKEY_CURRENT_CONFIG, HKEY_CURRENT_USER, HKEY_LOCAL_MACHINE, HKEY_USERS } = require("win.registry")

or::

  from "win.registry" import *

.. code-block:: sq

    //'win.registry' exports:
    {
      function regKeyExists(root, path): integer, string -> bool
      function regValueExists(root, path, name): integer, string, string -> bool
      function getRegString()
      function getRegInt(root, path, name, def): integer, string, string, integer -> integer
      function deleteRegKey(root, path): integer, string -> bool
      function deleteRegValue(root, path, name): integer, string, string -> bool
      function setRegString(root, path, name, val): integer, string, string, string -> bool
      function setRegInt(root, path, name, val): integer, string, string, integer -> bool
      value HKEY_CLASSES_ROOT
      value HKEY_CURRENT_CONFIG
      value HKEY_CURRENT_USER
      value HKEY_LOCAL_MACHINE
      value HKEY_USERS
    }
    

.. sq:function:: function regKeyExists(root, path)

  :param root:  
  :type root: integer

  :param path:  
  :type path: string

  :return: bool

.. sq:function:: function regValueExists(root, path, name)

  :param root:  
  :type root: integer

  :param path:  
  :type path: string

  :param name:  
  :type name: string

  :return: bool

.. sq:function:: function getRegString()

.. sq:function:: function getRegInt(root, path, name, def)

  :param root:  
  :type root: integer

  :param path:  
  :type path: string

  :param name:  
  :type name: string

  :param def:  
  :type def: integer

  :return: integer

.. sq:function:: function deleteRegKey(root, path)

  :param root:  
  :type root: integer

  :param path:  
  :type path: string

  :return: bool

.. sq:function:: function deleteRegValue(root, path, name)

  :param root:  
  :type root: integer

  :param path:  
  :type path: string

  :param name:  
  :type name: string

  :return: bool

.. sq:function:: function setRegString(root, path, name, val)

  :param root:  
  :type root: integer

  :param path:  
  :type path: string

  :param name:  
  :type name: string

  :param val:  
  :type val: string

  :return: bool

.. sq:function:: function setRegInt(root, path, name, val)

  :param root:  
  :type root: integer

  :param path:  
  :type path: string

  :param name:  
  :type name: string

  :param val:  
  :type val: integer

  :return: bool

.. sq:attribute:: HKEY_CLASSES_ROOT

.. sq:attribute:: HKEY_CURRENT_CONFIG

.. sq:attribute:: HKEY_CURRENT_USER

.. sq:attribute:: HKEY_LOCAL_MACHINE

.. sq:attribute:: HKEY_USERS


