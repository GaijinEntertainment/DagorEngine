.. autogenerated

********
eventbus
********

module 'eventbus'



*Source files:*

*prog/gameLibs/quirrel/sqEventBus/sqEventBus.cpp*


Usage::

  let { eventbus_subscribe, eventbus_subscribe_onehit, eventbus_unsubscribe, eventbus_send, eventbus_send_foreign, eventbus_has_listeners, eventbus_has_foreign_listeners } = require("eventbus")

or::

  from "eventbus" import *

.. code-block:: sq

    //'eventbus' exports:
    {
      function eventbus_subscribe(arg0, arg1, arg2, ...): string, closure_and_nativeclosure, array or string, any_type -> _undocumented_
      function eventbus_subscribe_onehit(arg0, arg1, arg2, ...): string, closure_and_nativeclosure, array or string, any_type -> _undocumented_
      function eventbus_unsubscribe(arg0, arg1): string, closure_and_nativeclosure -> _undocumented_
      function eventbus_send()
      function eventbus_send_foreign()
      function eventbus_has_listeners()
      function eventbus_has_foreign_listeners()
    }
    

.. sq:function:: function eventbus_subscribe(arg0, arg1, arg2, ...)

  :param arg0: autodoc from typemask/paramscheck
  :type arg0: string

  :param arg1: autodoc from typemask/paramscheck
  :type arg1: closure_and_nativeclosure

  :param arg2: autodoc from typemask/paramscheck
  :type arg2: array or string

  :param ...: this function accepts unlimited arguments
  :type ...: any_type

  ``nparamscheck:-3``

  ``typecheck mask: any_type, string, closure_and_nativeclosure, array or string``

.. sq:function:: function eventbus_subscribe_onehit(arg0, arg1, arg2, ...)

  :param arg0: autodoc from typemask/paramscheck
  :type arg0: string

  :param arg1: autodoc from typemask/paramscheck
  :type arg1: closure_and_nativeclosure

  :param arg2: autodoc from typemask/paramscheck
  :type arg2: array or string

  :param ...: this function accepts unlimited arguments
  :type ...: any_type

  ``nparamscheck:-3``

  ``typecheck mask: any_type, string, closure_and_nativeclosure, array or string``

.. sq:function:: function eventbus_unsubscribe(arg0, arg1)

  :param arg0: autodoc from typemask/paramscheck
  :type arg0: string

  :param arg1: autodoc from typemask/paramscheck
  :type arg1: closure_and_nativeclosure

  ``nparamscheck:3``

  ``typecheck mask: any_type, string, closure_and_nativeclosure``

.. sq:function:: function eventbus_send()

  ``nparamscheck:1``

.. sq:function:: function eventbus_send_foreign()

  ``nparamscheck:1``

.. sq:function:: function eventbus_has_listeners()

  ``nparamscheck:1``

.. sq:function:: function eventbus_has_foreign_listeners()

  ``nparamscheck:1``


