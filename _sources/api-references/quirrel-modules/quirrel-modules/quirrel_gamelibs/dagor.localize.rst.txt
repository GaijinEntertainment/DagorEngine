.. autogenerated

**************
dagor.localize
**************

module 'dagor.localize'



*Source files:*

*prog/gameLibs/quirrel/bindQuirrelEx/localization.cpp*


Usage::

  let { loc, getLocTextForLang, processHypenationsCN, processHypenationsJP, doesLocTextExist, getCurrentLanguage, getForceLanguage, setLanguageToSettings, getLangId, initLocalization } = require("dagor.localize")

or::

  from "dagor.localize" import *

.. code-block:: sq

    //'dagor.localize' exports:
    {
      function loc()
      function getLocTextForLang()
      function processHypenationsCN()
      function processHypenationsJP()
      function doesLocTextExist()
      function getCurrentLanguage()
      function getForceLanguage()
      function setLanguageToSettings()
      function getLangId()
      function initLocalization(arg0, arg1, ...): class_instance, string, any_type -> _undocumented_
    }
    

.. sq:function:: function loc()

.. sq:function:: function getLocTextForLang()

.. sq:function:: function processHypenationsCN()

.. sq:function:: function processHypenationsJP()

.. sq:function:: function doesLocTextExist()

.. sq:function:: function getCurrentLanguage()

.. sq:function:: function getForceLanguage()

.. sq:function:: function setLanguageToSettings()

.. sq:function:: function getLangId()

.. sq:function:: function initLocalization(arg0, arg1, ...)

  :param arg0: autodoc from typemask/paramscheck
  :type arg0: class_instance

  :param arg1: autodoc from typemask/paramscheck
  :type arg1: string

  :param ...: this function accepts unlimited arguments
  :type ...: any_type

  ``nparamscheck:-2``

  ``typecheck mask: any_type, class_instance, string``


