.. autogenerated

*****
sound
*****

module 'sound'



*Source files:*

*prog/gameLibs/soundSystem/quirrel/soundSystemSq.cpp*


Usage::

  let { INVALID_SOUND_HANDLE, SOUND_STREAM_ERROR, SOUND_STREAM_CLOSED, SOUND_STREAM_OPENED, SOUND_STREAM_CONNECTING, SOUND_STREAM_BUFFERING, SOUND_STREAM_STOPPED, SOUND_STREAM_PAUSED, SOUND_STREAM_PLAYING, sound_debug_trace, sound_play_oneshot_3d, sound_get_num_event_instances, sound_is_preset_loaded, sound_play_oneshot, sound_release_all_instances, sound_play, sound_set_volume, sound_init_event, sound_release_event, sound_set_3d_attr, sound_set_var, sound_get_length, sound_set_timeline_pos, sound_get_timeline_pos, sound_start, sound_keyoff, sound_abandon, sound_is_playing, sound_init_stream, sound_open_stream, sound_close_stream, sound_set_stream_pos, sound_release_stream, sound_get_stream_state, sound_get_stream_state_name, sound_get_output_devices, sound_get_record_devices, sound_set_output_device, sound_set_callbacks } = require("sound")

or::

  from "sound" import *

.. code-block:: sq

    //'sound' exports:
    {
      value INVALID_SOUND_HANDLE
      value SOUND_STREAM_ERROR
      value SOUND_STREAM_CLOSED
      value SOUND_STREAM_OPENED
      value SOUND_STREAM_CONNECTING
      value SOUND_STREAM_BUFFERING
      value SOUND_STREAM_STOPPED
      value SOUND_STREAM_PAUSED
      value SOUND_STREAM_PLAYING
      function sound_debug_trace(text): string -> null
      function sound_play_oneshot_3d(name, &pos): string, integer -> null
      function sound_get_num_event_instances(name): string -> integer
      function sound_is_preset_loaded(preset_name): string -> bool
      function sound_play_oneshot(name): string -> null
      function sound_release_all_instances(name): string -> null
      function sound_play(arg0, ...): string, any_type -> _undocumented_
      function sound_set_volume(snd, volume): string, float -> null
      function sound_init_event(name, path): string, string -> sound_handle_t
      function sound_release_event(event_handle): sndsys::sound_handle_t -> null
      function sound_set_3d_attr(event_handle, &pos): sndsys::sound_handle_t, integer -> null
      function sound_set_var(event_handle, var_name, value): sndsys::sound_handle_t, string, float -> null
      function sound_get_length(name): string -> integer
      function sound_set_timeline_pos(event_handle, position): sndsys::sound_handle_t, integer -> null
      function sound_get_timeline_pos(event_handle): sndsys::sound_handle_t -> integer
      function sound_start(event_handle): sndsys::sound_handle_t -> null
      function sound_keyoff(event_handle): sndsys::sound_handle_t -> bool
      function sound_abandon(event_handle, delay): sndsys::sound_handle_t, float -> null
      function sound_is_playing(event_handle): sndsys::sound_handle_t -> bool
      function sound_init_stream(url, &min_max_distance): string, integer -> sound_handle_t
      function sound_open_stream(stream_handle): sndsys::sound_handle_t -> null
      function sound_close_stream(stream_handle): sndsys::sound_handle_t -> null
      function sound_set_stream_pos(stream_handle, &pos): sndsys::sound_handle_t, integer -> null
      function sound_release_stream(stream_handle): sndsys::sound_handle_t -> null
      function sound_get_stream_state(stream_handle): sndsys::sound_handle_t -> StreamState
      function sound_get_stream_state_name()
      function sound_get_output_devices()
      function sound_get_record_devices()
      function sound_set_output_device(dev_id): integer -> null
      function sound_set_callbacks(callbacks_): sqObject -> null
    }
    

.. sq:attribute:: INVALID_SOUND_HANDLE

.. sq:attribute:: SOUND_STREAM_ERROR

.. sq:attribute:: SOUND_STREAM_CLOSED

.. sq:attribute:: SOUND_STREAM_OPENED

.. sq:attribute:: SOUND_STREAM_CONNECTING

.. sq:attribute:: SOUND_STREAM_BUFFERING

.. sq:attribute:: SOUND_STREAM_STOPPED

.. sq:attribute:: SOUND_STREAM_PAUSED

.. sq:attribute:: SOUND_STREAM_PLAYING

.. sq:function:: function sound_debug_trace(text)

  :param text:  
  :type text: string

  :return: null

.. sq:function:: function sound_play_oneshot_3d(name, &pos)

  :param name:  
  :type name: string

  :param &pos:  
  :type &pos: integer

  :return: null

.. sq:function:: function sound_get_num_event_instances(name)

  :param name:  
  :type name: string

  :return: integer

.. sq:function:: function sound_is_preset_loaded(preset_name)

  :param preset_name:  
  :type preset_name: string

  :return: bool

.. sq:function:: function sound_play_oneshot(name)

  :param name:  
  :type name: string

  :return: null

.. sq:function:: function sound_release_all_instances(name)

  :param name:  
  :type name: string

  :return: null

.. sq:function:: function sound_play(arg0, ...)

  :param arg0: autodoc from typemask/paramscheck
  :type arg0: string

  :param ...: this function accepts unlimited arguments
  :type ...: any_type

  ``nparamscheck:-2``

  ``typecheck mask: any_type, string``

.. sq:function:: function sound_set_volume(snd, volume)

  :param snd:  
  :type snd: string

  :param volume:  
  :type volume: float

  :return: null

.. sq:function:: function sound_init_event(name, path)

  :param name:  
  :type name: string

  :param path:  
  :type path: string

  :return: sound_handle_t

.. sq:function:: function sound_release_event(event_handle)

  :param event_handle:  
  :type event_handle: sndsys::sound_handle_t

  :return: null

.. sq:function:: function sound_set_3d_attr(event_handle, &pos)

  :param event_handle:  
  :type event_handle: sndsys::sound_handle_t

  :param &pos:  
  :type &pos: integer

  :return: null

.. sq:function:: function sound_set_var(event_handle, var_name, value)

  :param event_handle:  
  :type event_handle: sndsys::sound_handle_t

  :param var_name:  
  :type var_name: string

  :param value:  
  :type value: float

  :return: null

.. sq:function:: function sound_get_length(name)

  :param name:  
  :type name: string

  :return: integer

.. sq:function:: function sound_set_timeline_pos(event_handle, position)

  :param event_handle:  
  :type event_handle: sndsys::sound_handle_t

  :param position:  
  :type position: integer

  :return: null

.. sq:function:: function sound_get_timeline_pos(event_handle)

  :param event_handle:  
  :type event_handle: sndsys::sound_handle_t

  :return: integer

.. sq:function:: function sound_start(event_handle)

  :param event_handle:  
  :type event_handle: sndsys::sound_handle_t

  :return: null

.. sq:function:: function sound_keyoff(event_handle)

  :param event_handle:  
  :type event_handle: sndsys::sound_handle_t

  :return: bool

.. sq:function:: function sound_abandon(event_handle, delay)

  :param event_handle:  
  :type event_handle: sndsys::sound_handle_t

  :param delay:  
  :type delay: float

  :return: null

.. sq:function:: function sound_is_playing(event_handle)

  :param event_handle:  
  :type event_handle: sndsys::sound_handle_t

  :return: bool

.. sq:function:: function sound_init_stream(url, &min_max_distance)

  :param url:  
  :type url: string

  :param &min_max_distance:  
  :type &min_max_distance: integer

  :return: sound_handle_t

.. sq:function:: function sound_open_stream(stream_handle)

  :param stream_handle:  
  :type stream_handle: sndsys::sound_handle_t

  :return: null

.. sq:function:: function sound_close_stream(stream_handle)

  :param stream_handle:  
  :type stream_handle: sndsys::sound_handle_t

  :return: null

.. sq:function:: function sound_set_stream_pos(stream_handle, &pos)

  :param stream_handle:  
  :type stream_handle: sndsys::sound_handle_t

  :param &pos:  
  :type &pos: integer

  :return: null

.. sq:function:: function sound_release_stream(stream_handle)

  :param stream_handle:  
  :type stream_handle: sndsys::sound_handle_t

  :return: null

.. sq:function:: function sound_get_stream_state(stream_handle)

  :param stream_handle:  
  :type stream_handle: sndsys::sound_handle_t

  :return: StreamState

.. sq:function:: function sound_get_stream_state_name()

.. sq:function:: function sound_get_output_devices()

  ``nparamscheck:1``

  ``typecheck mask: any_type``

.. sq:function:: function sound_get_record_devices()

  ``nparamscheck:1``

  ``typecheck mask: any_type``

.. sq:function:: function sound_set_output_device(dev_id)

  :param dev_id:  
  :type dev_id: integer

  :return: null

.. sq:function:: function sound_set_callbacks(callbacks_)

  :param callbacks_:  
  :type callbacks_: sqObject

  :return: null


