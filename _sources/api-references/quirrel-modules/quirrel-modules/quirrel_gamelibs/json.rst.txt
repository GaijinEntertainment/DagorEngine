.. autogenerated

****
json
****

module 'json'



*Source files:*

*prog/gameLibs/quirrel/quirrel_json/quirrel_json.cpp*


Usage::

  let { parse_json, parse_json_from_zstd_stream, object_to_json_string, object_to_zstd_json } = require("json")

or::

  from "json" import *

.. code-block:: sq

    //'json' exports:
    {
      function parse_json(string): string -> null|string|integer_or_float|table|array
      function parse_json_from_zstd_stream(blob): string -> null|string|integer_or_float|table|array
      function object_to_json_string(object): null|string|integer_or_float|table|array|bool -> bool
      function object_to_zstd_json(arg0, ...): any_type, any_type -> _undocumented_
    }
    

.. sq:function:: function parse_json(string)

  :param string: string that would be parsed to json
  :type string: string

  ``nparamscheck:2``

  ``typecheck mask: any_type, string``

  :return: quirrel object
  :rtype: null|string|integer_or_float|table|array




.. sq:function:: function parse_json_from_zstd_stream(blob)

  :param blob: blob with ztsd stream that would be parsed to json
  :type blob: string

  ``nparamscheck:2``

  ``typecheck mask: any_type, class_instance``

  :return: quirrel object
  :rtype: null|string|integer_or_float|table|array




.. sq:function:: function object_to_json_string(object)

  :param object: object that will be converted to json
  :type object: null|string|integer_or_float|table|array|bool

  :return: blob with compressed json string
  :rtype: bool



.. sq:function:: function object_to_zstd_json(arg0, ...)

  :param arg0: autodoc from typemask/paramscheck
  :type arg0: any_type

  :param ...: this function accepts unlimited arguments
  :type ...: any_type

  ``nparamscheck:-2``

  ``typecheck mask: any_type, any_type``




