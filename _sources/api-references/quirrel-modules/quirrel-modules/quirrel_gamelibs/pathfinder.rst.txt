.. autogenerated

**********
pathfinder
**********

module 'pathfinder'



*Source files:*

*prog/gameLibs/quirrel/sqPathFinder/sqPathFinder.cpp*


Usage::

  let { project_to_nearest_navmesh_point, project_to_nearest_navmesh_point_no_obstacles, check_path, find_path, traceray_navmesh, POLYFLAG_GROUND, POLYFLAG_OBSTACLE, POLYFLAG_LADDER, POLYFLAG_JUMP, POLYFLAG_BLOCKED } = require("pathfinder")

or::

  from "pathfinder" import *

.. code-block:: sq

    //'pathfinder' exports:
    {
      function project_to_nearest_navmesh_point(&wish_pos, horz_extents): integer, float -> integer
      function project_to_nearest_navmesh_point_no_obstacles(&wish_pos, &horz_extents): integer, integer -> integer
      function check_path()
      function find_path(arg0, arg1, arg2, arg3, arg4, ...): class_instance, class_instance, float, float, float, any_type -> _undocumented_
      function traceray_navmesh(&start_pos, &end_pos, dist_to_path): integer, integer, float -> integer
      value POLYFLAG_GROUND
      value POLYFLAG_OBSTACLE
      value POLYFLAG_LADDER
      value POLYFLAG_JUMP
      value POLYFLAG_BLOCKED
    }
    

.. sq:function:: function project_to_nearest_navmesh_point(&wish_pos, horz_extents)

  :param &wish_pos:  
  :type &wish_pos: integer

  :param horz_extents:  
  :type horz_extents: float

  :return: integer

.. sq:function:: function project_to_nearest_navmesh_point_no_obstacles(&wish_pos, &horz_extents)

  :param &wish_pos:  
  :type &wish_pos: integer

  :param &horz_extents:  
  :type &horz_extents: integer

  :return: integer

.. sq:function:: function check_path()

.. sq:function:: function find_path(arg0, arg1, arg2, arg3, arg4, ...)

  :param arg0: autodoc from typemask/paramscheck
  :type arg0: class_instance

  :param arg1: autodoc from typemask/paramscheck
  :type arg1: class_instance

  :param arg2: autodoc from typemask/paramscheck
  :type arg2: float

  :param arg3: autodoc from typemask/paramscheck
  :type arg3: float

  :param arg4: autodoc from typemask/paramscheck
  :type arg4: float

  :param ...: this function accepts unlimited arguments
  :type ...: any_type

  ``nparamscheck:-5``

  ``typecheck mask: any_type, class_instance, class_instance, float, float, float``

.. sq:function:: function traceray_navmesh(&start_pos, &end_pos, dist_to_path)

  :param &start_pos:  
  :type &start_pos: integer

  :param &end_pos:  
  :type &end_pos: integer

  :param dist_to_path:  
  :type dist_to_path: float

  :return: integer

.. sq:attribute:: POLYFLAG_GROUND

.. sq:attribute:: POLYFLAG_OBSTACLE

.. sq:attribute:: POLYFLAG_LADDER

.. sq:attribute:: POLYFLAG_JUMP

.. sq:attribute:: POLYFLAG_BLOCKED


