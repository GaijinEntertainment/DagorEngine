.. autogenerated

********
dagor.fs
********

module 'dagor.fs'



*Source files:*

*prog/gameLibs/quirrel/bindQuirrelEx/dagorFS.cpp*


Usage::

  let { file_exists, dir_exists, mkdir, mkpath, remove_file, is_path_absolute, scan_folder, find_files, read_text_from_file, read_text_from_file_on_disk, write_text_to_file, stat, resolve_mountpoint } = require("dagor.fs")

or::

  from "dagor.fs" import *

.. code-block:: sq

    //'dagor.fs' exports:
    {
      function file_exists(path): string -> bool
      function dir_exists(path): string -> bool
      function mkdir(path): string -> bool
      function mkpath(path): string -> bool
      function remove_file(path): string -> bool
      function is_path_absolute(path): string -> bool
      function scan_folder({root, vromfs, realfs, recursive, files_suffix, directories_only}): table -> array
      function find_files(file_mask, params): string, table -> array
      function read_text_from_file(arg0): string -> string
      function read_text_from_file_on_disk(arg0): string -> string
      function write_text_to_file(file_path, text): string, string -> _undocumented_
      function stat(filename): string -> table|null
      function resolve_mountpoint(file_path): string -> string
    }
    

      All functions in this module are sync.
      Better never use them in production code, cause this can cause freeze and fps stutter (and usually will).


.. sq:function:: function file_exists(path)

  :param path:  
  :type path: string

  :return: bool

.. sq:function:: function dir_exists(path)

  :param path:  
  :type path: string

  :return: bool

.. sq:function:: function mkdir(path)

  :param path:  
  :type path: string

  :return: bool

.. sq:function:: function mkpath(path)

  :param path:  
  :type path: string

  :return: bool

.. sq:function:: function remove_file(path)

  :param path:  
  :type path: string

  :return: bool

.. sq:function:: function is_path_absolute(path)

  :param path:  
  :type path: string

  :return: bool

.. sq:function:: function scan_folder({root, vromfs, realfs, recursive, files_suffix, directories_only})

  :param root: where to start scan
  :type root: string

  :param vromfs: scan in vromfs
  :type vromfs: bool

  :param realfs: scan in real file system
  :type realfs: bool

  :param recursive: scan in real file system
  :type recursive: bool

  :param files_suffix: suffix of files to be included in result
  :type files_suffix: string

  :param directories_only: return only directories (works for realfs only)
  :type directories_only: bool

  ``nparamscheck:2``

  ``typecheck mask: any_type, table``

  ``Function is kwarged - arguments passed in a table``

  :return: array of found files with path on root
  :rtype: array





.. sq:function:: function find_files(file_mask, params)

  :param file_mask: file mask like *.nut or foo/some.nut
  :type file_mask: string

  :param params: table of params, the only possible param is {maxCount:i = -1} (-1 is default, means no limit)
  :type params: table

  ``nparamscheck:-2``

  ``typecheck mask: any_type, string, table``

  :return: array of file_info
  :rtype: array




.. code-block:: file_info
    :caption: file_info
    

    {name:s, isDirectory:b, isReadOnly:b, isHidden:b, size:i, accessTime:i, modifyTime:i}



.. sq:function:: function read_text_from_file(arg0)

  :param arg0: autodoc from typemask/paramscheck
  :type arg0: string

  ``nparamscheck:2``

  ``typecheck mask: any_type, string``

  :return: file as string
  :rtype: string


    will open file from in VROMS only in some cases (on platforms different then PC, on not allowed modding)


.. sq:function:: function read_text_from_file_on_disk(arg0)

  :param arg0: autodoc from typemask/paramscheck
  :type arg0: string

  ``nparamscheck:2``

  ``typecheck mask: any_type, string``

  :return: file as string
  :rtype: string


    will open file from disk only


.. sq:function:: function write_text_to_file(file_path, text)

  :param file_path: path to file to write
  :type file_path: string

  :param text: text to write to file
  :type text: string

  ``nparamscheck:3``

  ``typecheck mask: any_type, string, string``


    will write text to file, creating directories if needed


.. sq:function:: function stat(filename)

  :param filename: path to file to get info
  :type filename: string

  ``nparamscheck:2``

  ``typecheck mask: any_type, string``

  :return: file_stat or or null if file not found
  :rtype: table|null




.. code-block:: file_stat
    :caption: file_stat
    

    {size:i, atime:i, mtime:i, ctime:i}



.. sq:function:: function resolve_mountpoint(file_path)

  :param file_path: path with mount point
  :type file_path: string

  ``nparamscheck:2``

  ``typecheck mask: any_type, string``

  :return: path with resolved mount point or path as is
  :rtype: string





