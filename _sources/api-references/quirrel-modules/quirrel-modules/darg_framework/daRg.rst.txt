.. autogenerated

****
daRg
****

module 'daRg'



*Source files:*

*prog/gameLibs/daRg/scriptBinding.cpp
prog/gameLibs/daRg/elementRef.cpp
prog/gameLibs/daRg/guiScene.cpp
prog/gameLibs/daRg/stdRendObj.cpp
prog/gameLibs/daRg/lottiePicture.cpp
prog/gameLibs/daRg/robjWorldBlur.cpp*


Usage::

  let { FLOW_PARENT_RELATIVE, FLOW_HORIZONTAL, FLOW_VERTICAL, ALIGN_LEFT, ALIGN_TOP, ALIGN_RIGHT, ALIGN_BOTTOM, ALIGN_CENTER, VECTOR_WIDTH, VECTOR_COLOR, VECTOR_FILL_COLOR, VECTOR_MID_COLOR, VECTOR_OUTER_LINE, VECTOR_CENTER_LINE, VECTOR_INNER_LINE, VECTOR_TM_OFFSET, VECTOR_TM_SCALE, VECTOR_LINE, VECTOR_LINE_INDENT_PX, VECTOR_LINE_INDENT_PCT, VECTOR_ELLIPSE, VECTOR_SECTOR, VECTOR_RECTANGLE, VECTOR_POLY, VECTOR_INVERSE_POLY, VECTOR_OPACITY, VECTOR_LINE_DASHED, VECTOR_NOP, VECTOR_QUADS, FFT_NONE, FFT_SHADOW, FFT_GLOW, FFT_BLUR, FFT_OUTLINE, O_HORIZONTAL, O_VERTICAL, TOVERFLOW_CLIP, TOVERFLOW_CHAR, TOVERFLOW_WORD, TOVERFLOW_LINE, DIR_UP, DIR_DOWN, DIR_LEFT, DIR_RIGHT, EVENT_BREAK, EVENT_CONTINUE, GESTURE_DETECTOR_DRAG, GESTURE_DETECTOR_PINCH, GESTURE_DETECTOR_ROTATE, Linear, InQuad, OutQuad, InOutQuad, InCubic, OutCubic, InOutCubic, InQuintic, OutQuintic, InOutQuintic, InQuart, OutQuart, InOutQuart, InSine, OutSine, InOutSine, InCirc, OutCirc, InOutCirc, InExp, OutExp, InOutExp, InElastic, OutElastic, InOutElastic, InBack, OutBack, InOutBack, InBounce, OutBounce, InOutBounce, InOutBezier, CosineFull, InStep, OutStep, Blink, DoubleBlink, BlinkSin, BlinkCos, Discrete8, Shake4, Shake6, S_KB_FOCUS, S_HOVER, S_TOP_HOVER, S_ACTIVE, S_MOUSE_ACTIVE, S_KBD_ACTIVE, S_HOTKEY_ACTIVE, S_TOUCH_ACTIVE, S_JOYSTICK_ACTIVE, S_VR_ACTIVE, S_DRAG, MR_NONE, MR_T, MR_R, MR_B, MR_L, MR_LT, MR_RT, MR_LB, MR_RB, MR_AREA, FMT_NO_WRAP, FMT_KEEP_SPACES, FMT_IGNORE_TAGS, FMT_HIDE_ELLIPSIS, FMT_AS_IS, DEVID_KEYBOARD, DEVID_MOUSE, DEVID_JOYSTICK, DEVID_TOUCH, DEVID_VR, KEEP_ASPECT_NONE, KEEP_ASPECT_FIT, KEEP_ASPECT_FILL, AXIS_L_THUMB_H, AXIS_L_THUMB_V, AXIS_R_THUMB_H, AXIS_R_THUMB_V, AXIS_L_TRIGGER, AXIS_R_TRIGGER, AXIS_LR_TRIGGER, XMB_STOP, XMB_CONTINUE, R_PROCESSED, SIZE_TO_CONTENT, Fonts, AnimProp, color, bgColor, fgColor, fillColor, borderColor, opacity, rotate, scale, translate, fValue, picSaturate, brightness, ScrollHandler, JoystickAxisObservable, ElemGroup, Behavior, Picture, PictureImmediate, FormattedText, IGenVideoPlayer, IGenSound, DragAndDropState, EventDataRect, MouseClickEventData, HotkeyEventData, HoverEventData, TransitAll, MoveToAreaTarget, Color, sw, sh, flex, fontH, pw, ph, elemw, elemh, locate_element_source, get_element_info, resolve_button, get_font_metrics, setFontDefHt, getFontDefHt, getFontInitialHt, calc_str_box, ElementRef, KBD_BIT_CAPS_LOCK, KBD_BIT_NUM_LOCK, KBD_BIT_SCROLL_LOCK, PANEL_ANCHOR_NONE, PANEL_ANCHOR_SCENE, PANEL_ANCHOR_VRSPACE, PANEL_ANCHOR_HEAD, PANEL_ANCHOR_LEFTHAND, PANEL_ANCHOR_RIGHTHAND, PANEL_ANCHOR_ENTITY, PANEL_GEOMETRY_NONE, PANEL_GEOMETRY_RECTANGLE, PANEL_RC_NONE, PANEL_RC_FACE_LEFT_HAND, PANEL_RC_FACE_RIGHT_HAND, PANEL_RC_FACE_HEAD, PANEL_RC_FACE_HEAD_LOCK_Y, PANEL_RC_FACE_ENTITY, PANEL_RC_FACE_HEAD_LOCK_PLAYSPACE_Y, PANEL_RENDER_CAST_SHADOW, PANEL_RENDER_OPAQUE, PANEL_RENDER_ALWAYS_ON_TOP, MAIN_SCREEN_ID, GuiScene, SceneConfig, anim_start, anim_request_stop, anim_skip, anim_skip_delay, set_kb_focus, capture_kb_focus, calc_comp_size, move_mouse_cursor, get_mouse_cursor_pos, resolve_button_id, gui_scene, ROBJ_SOLID, ROBJ_DEBUG, ROBJ_TEXT, ROBJ_TEXTAREA, ROBJ_INSCRIPTION, ROBJ_IMAGE, ROBJ_VECTOR_CANVAS, ROBJ_9RECT, ROBJ_PROGRESS_LINEAR, ROBJ_PROGRESS_CIRCULAR, ROBJ_BOX, ROBJ_MOVIE, ROBJ_MASK, ROBJ_DAS_CANVAS, LottieAnimation, ROBJ_WORLD_BLUR, ROBJ_WORLD_BLUR_PANEL } = require("daRg")

or::

  from "daRg" import *

.. code-block:: sq

    //'daRg' exports:
    {
      const FLOW_PARENT_RELATIVE
      const FLOW_HORIZONTAL
      const FLOW_VERTICAL
      const ALIGN_LEFT
      const ALIGN_TOP
      const ALIGN_RIGHT
      const ALIGN_BOTTOM
      const ALIGN_CENTER
      const VECTOR_WIDTH
      const VECTOR_COLOR
      const VECTOR_FILL_COLOR
      const VECTOR_MID_COLOR
      const VECTOR_OUTER_LINE
      const VECTOR_CENTER_LINE
      const VECTOR_INNER_LINE
      const VECTOR_TM_OFFSET
      const VECTOR_TM_SCALE
      const VECTOR_LINE
      const VECTOR_LINE_INDENT_PX
      const VECTOR_LINE_INDENT_PCT
      const VECTOR_ELLIPSE
      const VECTOR_SECTOR
      const VECTOR_RECTANGLE
      const VECTOR_POLY
      const VECTOR_INVERSE_POLY
      const VECTOR_OPACITY
      const VECTOR_LINE_DASHED
      const VECTOR_NOP
      const VECTOR_QUADS
      const FFT_NONE
      const FFT_SHADOW
      const FFT_GLOW
      const FFT_BLUR
      const FFT_OUTLINE
      const O_HORIZONTAL
      const O_VERTICAL
      const TOVERFLOW_CLIP
      const TOVERFLOW_CHAR
      const TOVERFLOW_WORD
      const TOVERFLOW_LINE
      const DIR_UP
      const DIR_DOWN
      const DIR_LEFT
      const DIR_RIGHT
      const EVENT_BREAK
      const EVENT_CONTINUE
      const GESTURE_DETECTOR_DRAG
      const GESTURE_DETECTOR_PINCH
      const GESTURE_DETECTOR_ROTATE
      const Linear
      const InQuad
      const OutQuad
      const InOutQuad
      const InCubic
      const OutCubic
      const InOutCubic
      const InQuintic
      const OutQuintic
      const InOutQuintic
      const InQuart
      const OutQuart
      const InOutQuart
      const InSine
      const OutSine
      const InOutSine
      const InCirc
      const OutCirc
      const InOutCirc
      const InExp
      const OutExp
      const InOutExp
      const InElastic
      const OutElastic
      const InOutElastic
      const InBack
      const OutBack
      const InOutBack
      const InBounce
      const OutBounce
      const InOutBounce
      const InOutBezier
      const CosineFull
      const InStep
      const OutStep
      const Blink
      const DoubleBlink
      const BlinkSin
      const BlinkCos
      const Discrete8
      const Shake4
      const Shake6
      const S_KB_FOCUS
      const S_HOVER
      const S_TOP_HOVER
      const S_ACTIVE
      const S_MOUSE_ACTIVE
      const S_KBD_ACTIVE
      const S_HOTKEY_ACTIVE
      const S_TOUCH_ACTIVE
      const S_JOYSTICK_ACTIVE
      const S_VR_ACTIVE
      const S_DRAG
      const MR_NONE
      const MR_T
      const MR_R
      const MR_B
      const MR_L
      const MR_LT
      const MR_RT
      const MR_LB
      const MR_RB
      const MR_AREA
      const FMT_NO_WRAP
      const FMT_KEEP_SPACES
      const FMT_IGNORE_TAGS
      const FMT_HIDE_ELLIPSIS
      const FMT_AS_IS
      const DEVID_KEYBOARD
      const DEVID_MOUSE
      const DEVID_JOYSTICK
      const DEVID_TOUCH
      const DEVID_VR
      const KEEP_ASPECT_NONE
      const KEEP_ASPECT_FIT
      const KEEP_ASPECT_FILL
      const AXIS_L_THUMB_H
      const AXIS_L_THUMB_V
      const AXIS_R_THUMB_H
      const AXIS_R_THUMB_V
      const AXIS_L_TRIGGER
      const AXIS_R_TRIGGER
      const AXIS_LR_TRIGGER
      const XMB_STOP
      const XMB_CONTINUE
      const R_PROCESSED
      const SIZE_TO_CONTENT
      class Fonts
      enum AnimProp
      value color
      value bgColor
      value fgColor
      value fillColor
      value borderColor
      value opacity
      value rotate
      value scale
      value translate
      value fValue
      value picSaturate
      value brightness
      class ScrollHandler
      class JoystickAxisObservable
      class ElemGroup
      class Behavior
      class Picture
      class PictureImmediate
      class FormattedText
      class IGenVideoPlayer
      class IGenSound
      class DragAndDropState
      class EventDataRect
      class MouseClickEventData
      class HotkeyEventData
      class HoverEventData
      class TransitAll
      class MoveToAreaTarget
      pure function Color(r = null, g = null, b = null, alpha = null): number, number, number, number -> int
      pure function sw(percent = null): number -> number
      pure function sh(percent = null): number -> number
      pure function flex(weight = null): number -> userdata
      function fontH(arg0): integer_or_float -> _undocumented_
      pure function pw(percent = null): number -> userdata
      pure function ph(percent = null): number -> userdata
      pure function elemw(percent = null): number -> userdata
      pure function elemh(percent = null): number -> userdata
      function locate_element_source(arg0): class_instance -> _undocumented_
      function get_element_info(arg0): class_instance -> _undocumented_
      function resolve_button(arg0): string -> _undocumented_
      pure function get_font_metrics(fontId = null, fontHt = null, fontId, fontHt): int, number, integer, float -> table
      function setFontDefHt(font_name, pix_ht): string, integer -> bool
      function getFontDefHt(font_name): string -> integer
      function getFontInitialHt(font_name): string -> integer
      function calc_str_box(element_or_text, element_or_style): string|closure_and_nativeclosure|table, table|closure_and_nativeclosure|null -> array
      class ElementRef
      const KBD_BIT_CAPS_LOCK
      const KBD_BIT_NUM_LOCK
      const KBD_BIT_SCROLL_LOCK
      const PANEL_ANCHOR_NONE
      const PANEL_ANCHOR_SCENE
      const PANEL_ANCHOR_VRSPACE
      const PANEL_ANCHOR_HEAD
      const PANEL_ANCHOR_LEFTHAND
      const PANEL_ANCHOR_RIGHTHAND
      const PANEL_ANCHOR_ENTITY
      const PANEL_GEOMETRY_NONE
      const PANEL_GEOMETRY_RECTANGLE
      const PANEL_RC_NONE
      const PANEL_RC_FACE_LEFT_HAND
      const PANEL_RC_FACE_RIGHT_HAND
      const PANEL_RC_FACE_HEAD
      const PANEL_RC_FACE_HEAD_LOCK_Y
      const PANEL_RC_FACE_ENTITY
      const PANEL_RC_FACE_HEAD_LOCK_PLAYSPACE_Y
      const PANEL_RENDER_CAST_SHADOW
      const PANEL_RENDER_OPAQUE
      const PANEL_RENDER_ALWAYS_ON_TOP
      const MAIN_SCREEN_ID
      class GuiScene
      class SceneConfig
      function anim_start()
      function anim_request_stop()
      function anim_skip()
      function anim_skip_delay()
      function set_kb_focus()
      function capture_kb_focus()
      function calc_comp_size(arg0): null or table or closure_and_nativeclosure or class_instance or class -> _undocumented_
      function move_mouse_cursor(arg0, arg1, ...): any_type, bool, any_type -> _undocumented_
      function get_mouse_cursor_pos(arg0, ...): class_instance, any_type -> _undocumented_
      function resolve_button_id(arg0): string -> _undocumented_
      value gui_scene
      const ROBJ_SOLID
      const ROBJ_DEBUG
      const ROBJ_TEXT
      const ROBJ_TEXTAREA
      const ROBJ_INSCRIPTION
      const ROBJ_IMAGE
      const ROBJ_VECTOR_CANVAS
      const ROBJ_9RECT
      const ROBJ_PROGRESS_LINEAR
      const ROBJ_PROGRESS_CIRCULAR
      const ROBJ_BOX
      const ROBJ_MOVIE
      const ROBJ_MASK
      const ROBJ_DAS_CANVAS
      class LottieAnimation
      const ROBJ_WORLD_BLUR
      const ROBJ_WORLD_BLUR_PANEL
    }
    

.. sq:attribute:: const FLOW_PARENT_RELATIVE

.. sq:attribute:: const FLOW_HORIZONTAL

.. sq:attribute:: const FLOW_VERTICAL

.. sq:attribute:: const ALIGN_LEFT = ALIGN_LEFT

.. sq:attribute:: const ALIGN_TOP = ALIGN_TOP

.. sq:attribute:: const ALIGN_RIGHT = ALIGN_RIGHT

.. sq:attribute:: const ALIGN_BOTTOM = ALIGN_BOTTOM

.. sq:attribute:: const ALIGN_CENTER = ALIGN_CENTER

.. sq:attribute:: const VECTOR_WIDTH

.. sq:attribute:: const VECTOR_COLOR

.. sq:attribute:: const VECTOR_FILL_COLOR

.. sq:attribute:: const VECTOR_MID_COLOR

.. sq:attribute:: const VECTOR_OUTER_LINE

.. sq:attribute:: const VECTOR_CENTER_LINE

.. sq:attribute:: const VECTOR_INNER_LINE

.. sq:attribute:: const VECTOR_TM_OFFSET

.. sq:attribute:: const VECTOR_TM_SCALE

.. sq:attribute:: const VECTOR_LINE

.. sq:attribute:: const VECTOR_LINE_INDENT_PX

.. sq:attribute:: const VECTOR_LINE_INDENT_PCT

.. sq:attribute:: const VECTOR_ELLIPSE

.. sq:attribute:: const VECTOR_SECTOR

.. sq:attribute:: const VECTOR_RECTANGLE

.. sq:attribute:: const VECTOR_POLY

.. sq:attribute:: const VECTOR_INVERSE_POLY

.. sq:attribute:: const VECTOR_OPACITY

.. sq:attribute:: const VECTOR_LINE_DASHED

.. sq:attribute:: const VECTOR_NOP

.. sq:attribute:: const VECTOR_QUADS

.. sq:attribute:: const FFT_NONE

.. sq:attribute:: const FFT_SHADOW

.. sq:attribute:: const FFT_GLOW

.. sq:attribute:: const FFT_BLUR

.. sq:attribute:: const FFT_OUTLINE

.. sq:attribute:: const O_HORIZONTAL

.. sq:attribute:: const O_VERTICAL

.. sq:attribute:: const TOVERFLOW_CLIP

.. sq:attribute:: const TOVERFLOW_CHAR

.. sq:attribute:: const TOVERFLOW_WORD

.. sq:attribute:: const TOVERFLOW_LINE

.. sq:attribute:: const DIR_UP

.. sq:attribute:: const DIR_DOWN

.. sq:attribute:: const DIR_LEFT

.. sq:attribute:: const DIR_RIGHT

.. sq:attribute:: const EVENT_BREAK = GuiScene::EVENT_BREAK

.. sq:attribute:: const EVENT_CONTINUE = GuiScene::EVENT_CONTINUE

.. sq:attribute:: const GESTURE_DETECTOR_DRAG = GestureDetector::Type::DRAG

.. sq:attribute:: const GESTURE_DETECTOR_PINCH = GestureDetector::Type::PINCH

.. sq:attribute:: const GESTURE_DETECTOR_ROTATE = GestureDetector::Type::ROTATE

.. sq:attribute:: const Linear

Easing function for prebuilt animations functions.

.. sq:attribute:: const InQuad

Easing function for prebuilt animations functions.

.. sq:attribute:: const OutQuad

Easing function for prebuilt animations functions.  See https://easings.net/

.. sq:attribute:: const InOutQuad

Easing function for prebuilt animations functions.

.. sq:attribute:: const InCubic

Easing function for prebuilt animations functions.

.. sq:attribute:: const OutCubic

Easing function for prebuilt animations functions.

.. sq:attribute:: const InOutCubic

Easing function for prebuilt animations functions.

.. sq:attribute:: const InQuintic

Easing function for prebuilt animations functions.

.. sq:attribute:: const OutQuintic

Easing function for prebuilt animations functions.

.. sq:attribute:: const InOutQuintic

Easing function for prebuilt animations functions.

.. sq:attribute:: const InQuart

Easing function for prebuilt animations functions.

.. sq:attribute:: const OutQuart

Easing function for prebuilt animations functions.

.. sq:attribute:: const InOutQuart

Easing function for prebuilt animations functions.

.. sq:attribute:: const InSine

Easing function for prebuilt animations functions.

.. sq:attribute:: const OutSine

Easing function for prebuilt animations functions.

.. sq:attribute:: const InOutSine

Easing function for prebuilt animations functions.

.. sq:attribute:: const InCirc

Easing function for prebuilt animations functions.

.. sq:attribute:: const OutCirc

Easing function for prebuilt animations functions.

.. sq:attribute:: const InOutCirc

Easing function for prebuilt animations functions.

.. sq:attribute:: const InExp

Easing function for prebuilt animations functions.

.. sq:attribute:: const OutExp

Easing function for prebuilt animations functions.

.. sq:attribute:: const InOutExp

Easing function for prebuilt animations functions.

.. sq:attribute:: const InElastic

Easing function for prebuilt animations functions.

.. sq:attribute:: const OutElastic

Easing function for prebuilt animations functions.

.. sq:attribute:: const InOutElastic

Easing function for prebuilt animations functions.

.. sq:attribute:: const InBack

Easing function for prebuilt animations functions.

.. sq:attribute:: const OutBack

Easing function for prebuilt animations functions.

.. sq:attribute:: const InOutBack

Easing function for prebuilt animations functions.

.. sq:attribute:: const InBounce

Easing function for prebuilt animations functions.

.. sq:attribute:: const OutBounce

Easing function for prebuilt animations functions.

.. sq:attribute:: const InOutBounce

Easing function for prebuilt animations functions.

.. sq:attribute:: const InOutBezier

Easing function for prebuilt animations functions.

.. sq:attribute:: const CosineFull

Easing function for prebuilt animations functions.

.. sq:attribute:: const InStep

Easing function for prebuilt animations functions.

.. sq:attribute:: const OutStep

Easing function for prebuilt animations functions.

.. sq:attribute:: const Blink

Easing function for prebuilt animations functions.

.. sq:attribute:: const DoubleBlink

Easing function for prebuilt animations functions.

.. sq:attribute:: const BlinkSin

Easing function for prebuilt animations functions.

.. sq:attribute:: const BlinkCos

Easing function for prebuilt animations functions.

.. sq:attribute:: const Discrete8

Easing function for prebuilt animations functions.

.. sq:attribute:: const Shake4

Easing function for prebuilt animations functions.

.. sq:attribute:: const Shake6

Easing function for prebuilt animations functions.

.. sq:attribute:: const S_KB_FOCUS

State flag for keyboard focus.

.. sq:attribute:: const S_HOVER

.. sq:attribute:: const S_TOP_HOVER

.. sq:attribute:: const S_ACTIVE

state flag for 'pressed' button.

.. sq:attribute:: const S_MOUSE_ACTIVE

state flag for 'pressed' button with mouse.

.. sq:attribute:: const S_KBD_ACTIVE

state flag for 'pressed' button with keyboard.

.. sq:attribute:: const S_HOTKEY_ACTIVE

state flag for 'pressed' button with hotkey.

.. sq:attribute:: const S_TOUCH_ACTIVE

state flag for pressed button with touch device.

.. sq:attribute:: const S_JOYSTICK_ACTIVE

state flag for pressed button with joystick/gamepad device.

.. sq:attribute:: const S_VR_ACTIVE

state flag for pressed button with VR controller.

.. sq:attribute:: const S_DRAG

state flag for dragged state.

.. sq:attribute:: const MR_NONE

.MOVE_RESIZE Beahvior constants, to define where was point started move or resize

.. sq:attribute:: const MR_T

.. sq:attribute:: const MR_R

.. sq:attribute:: const MR_B

.. sq:attribute:: const MR_L

.. sq:attribute:: const MR_LT

.. sq:attribute:: const MR_RT

.. sq:attribute:: const MR_LB

.. sq:attribute:: const MR_RB

.. sq:attribute:: const MR_AREA

.. sq:attribute:: const FMT_NO_WRAP

.. sq:attribute:: const FMT_KEEP_SPACES

.. sq:attribute:: const FMT_IGNORE_TAGS

.. sq:attribute:: const FMT_HIDE_ELLIPSIS

.. sq:attribute:: const FMT_AS_IS

.. sq:attribute:: const DEVID_KEYBOARD

.. sq:attribute:: const DEVID_MOUSE

.. sq:attribute:: const DEVID_JOYSTICK

.. sq:attribute:: const DEVID_TOUCH

.. sq:attribute:: const DEVID_VR

.. sq:attribute:: const KEEP_ASPECT_NONE

.. sq:attribute:: const KEEP_ASPECT_FIT

.. sq:attribute:: const KEEP_ASPECT_FILL

.. sq:attribute:: const AXIS_L_THUMB_H

.. sq:attribute:: const AXIS_L_THUMB_V

.. sq:attribute:: const AXIS_R_THUMB_H

.. sq:attribute:: const AXIS_R_THUMB_V

.. sq:attribute:: const AXIS_L_TRIGGER

.. sq:attribute:: const AXIS_R_TRIGGER

.. sq:attribute:: const AXIS_LR_TRIGGER

.. sq:attribute:: const XMB_STOP

.. sq:attribute:: const XMB_CONTINUE

.. sq:attribute:: const R_PROCESSED

.. sq:attribute:: const SIZE_TO_CONTENT

-----------
class Fonts
-----------

    has values of each fonts that are registered in dagor.
    unfortunately no way for list of fonts, see fonts.blk









-------------
enum AnimProp
-------------




.. sq:attribute:: color

.. sq:attribute:: bgColor

.. sq:attribute:: fgColor

.. sq:attribute:: fillColor

.. sq:attribute:: borderColor

.. sq:attribute:: opacity

.. sq:attribute:: rotate

.. sq:attribute:: scale

.. sq:attribute:: translate

.. sq:attribute:: fValue

.. sq:attribute:: picSaturate

.. sq:attribute:: brightness

-------------------
class ScrollHandler
-------------------

.. sq:method:: ScrollHandler()

  ``nparamscheck:1``

  ``typecheck mask: class_instance``

.. sq:function:: method ScrollHandler.scrollToX()

.. sq:function:: method ScrollHandler.scrollToY()

.. sq:function:: method ScrollHandler.scrollToChildren()

.. sq:attribute:: property ScrollHandler.elem

  ``readonly``





----------------------------
class JoystickAxisObservable
----------------------------

.. sq:function:: method JoystickAxisObservable.get()

.. sq:attribute:: property JoystickAxisObservable.value

  ``readonly``

.. sq:attribute:: var JoystickAxisObservable.resolution

.. sq:attribute:: var JoystickAxisObservable.deadzone





---------------
class ElemGroup
---------------





--------------
class Behavior
--------------





-------------
class Picture
-------------

.. sq:method:: Picture(arg0)

  :param arg0: autodoc from typemask/paramscheck
  :type arg0: null or string

  ``typecheck mask: any_type, null or string``

.. sq:function:: method Picture.getLoadedPicSize()





--------------------------------------
class PictureImmediate extends Picture
--------------------------------------

.. sq:method:: PictureImmediate(arg0)

  :param arg0: autodoc from typemask/paramscheck
  :type arg0: null or string

  ``typecheck mask: any_type, null or string``

.. sq:function:: method PictureImmediate.getLoadedPicSize()





-------------------
class FormattedText
-------------------





---------------------
class IGenVideoPlayer
---------------------





---------------
class IGenSound
---------------





----------------------
class DragAndDropState
----------------------





-------------------
class EventDataRect
-------------------

.. sq:attribute:: EventDataRect.l

.. sq:attribute:: EventDataRect.t

.. sq:attribute:: EventDataRect.r

.. sq:attribute:: EventDataRect.b





-------------------------
class MouseClickEventData
-------------------------

.. sq:attribute:: property MouseClickEventData.targetRect

  ``readonly``





---------------------
class HotkeyEventData
---------------------

.. sq:attribute:: property HotkeyEventData.targetRect

  ``readonly``





--------------------
class HoverEventData
--------------------

.. sq:attribute:: property HoverEventData.targetRect

  ``readonly``





----------------
class TransitAll
----------------

.. sq:method:: TransitAll()





----------------------
class MoveToAreaTarget
----------------------

.. sq:function:: method MoveToAreaTarget.set()

.. sq:function:: method MoveToAreaTarget.clear()

.. sq:attribute:: MoveToAreaTarget.ElemGroup

.. sq:attribute:: MoveToAreaTarget.ScrollHandler

.. sq:attribute:: MoveToAreaTarget.Picture

.. sq:attribute:: MoveToAreaTarget.PictureImmediate

.. sq:attribute:: MoveToAreaTarget.TransitAll

.. sq:attribute:: MoveToAreaTarget.MoveToAreaTarget





.. sq:function:: pure function Color(r = null, g = null, b = null, alpha = null)

  :param r:  
  :type r: number, optional

  :param g:  
  :type g: number, optional

  :param b:  
  :type b: number, optional

  :param alpha:  
  :type alpha: number, optional

  ``typecheck mask: integer_or_float, integer_or_float, integer_or_float, integer_or_float``

  :return: int

.. sq:function:: pure function sw(percent = null)

  :param percent:  
  :type percent: number, optional

  ``typecheck mask: integer_or_float``

  :return: number

.. sq:function:: pure function sh(percent = null)

  :param percent:  
  :type percent: number, optional

  ``typecheck mask: integer_or_float``

  :return: number

.. sq:function:: pure function flex(weight = null)

  :param weight:  
  :type weight: number, optional

  ``typecheck mask: integer_or_float``

  :return: userdata

.. sq:function:: function fontH(arg0)

  :param arg0: autodoc from typemask/paramscheck
  :type arg0: integer_or_float

  ``nparamscheck:2``

  ``typecheck mask: any_type, integer_or_float``

.. sq:function:: pure function pw(percent = null)

  :param percent:  
  :type percent: number, optional

  ``typecheck mask: integer_or_float``

  :return: userdata

.. sq:function:: pure function ph(percent = null)

  :param percent:  
  :type percent: number, optional

  ``typecheck mask: integer_or_float``

  :return: userdata

.. sq:function:: pure function elemw(percent = null)

  :param percent:  
  :type percent: number, optional

  ``typecheck mask: integer_or_float``

  :return: userdata

.. sq:function:: pure function elemh(percent = null)

  :param percent:  
  :type percent: number, optional

  ``typecheck mask: integer_or_float``

  :return: userdata

.. sq:function:: function locate_element_source(arg0)

  :param arg0: autodoc from typemask/paramscheck
  :type arg0: class_instance

  ``nparamscheck:2``

  ``typecheck mask: any_type, class_instance``

.. sq:function:: function get_element_info(arg0)

  :param arg0: autodoc from typemask/paramscheck
  :type arg0: class_instance

  ``nparamscheck:2``

  ``typecheck mask: any_type, class_instance``

.. sq:function:: function resolve_button(arg0)

  :param arg0: autodoc from typemask/paramscheck
  :type arg0: string

  ``nparamscheck:2``

  ``typecheck mask: any_type, string``

.. sq:function:: pure function get_font_metrics(fontId = null, fontHt = null, fontId, fontHt)

  :param fontId:  
  :type fontId: int, optional

  :param fontHt:  
  :type fontHt: number, optional

  :param fontId:  
  :type fontId: integer

  :param fontHt: optional, default is _def_fontHt font height set in font
  :type fontHt: float

  ``typecheck mask: integer, integer_or_float``

  :return: font_params
  :rtype: table




.. code-block:: 
    :caption: font_params
    

    {
      _def_fontHt : def height
      fontHt : height
      capsHt : height of H
      lineSpacing : linespacing
      ascent
      descent
      lowercaseHeight : height of x
    }



.. sq:function:: function setFontDefHt(font_name, pix_ht)

  :param font_name:  
  :type font_name: string

  :param pix_ht:  
  :type pix_ht: integer

  :return: bool

.. sq:function:: function getFontDefHt(font_name)

  :param font_name:  
  :type font_name: string

  :return: integer

.. sq:function:: function getFontInitialHt(font_name)

  :param font_name:  
  :type font_name: string

  :return: integer

.. sq:function:: function calc_str_box(element_or_text, element_or_style)

  :param element_or_text: should be string of text or darg component description with 'text' in it
  :type element_or_text: string|closure_and_nativeclosure|table

  :param element_or_style: optional, if first element is text, it should be provided with font properties
  :type element_or_style: table|closure_and_nativeclosure|null

  ``nparamscheck:-2``

  ``typecheck mask: any_type, string or table or closure_and_nativeclosure, table or closure_and_nativeclosure or null``

  :return: return array of two objects with width and height of text
  :rtype: array




----------------
class ElementRef
----------------

.. sq:function:: method ElementRef.getCompDesc()

.. sq:function:: method ElementRef.getScreenPosX(arg0)

  :param arg0: autodoc from typemask/paramscheck
  :type arg0: class_instance

  ``nparamscheck:1``

  ``typecheck mask: class_instance``

.. sq:function:: method ElementRef.getScreenPosY(arg0)

  :param arg0: autodoc from typemask/paramscheck
  :type arg0: class_instance

  ``nparamscheck:1``

  ``typecheck mask: class_instance``

.. sq:function:: method ElementRef.getWidth(arg0)

  :param arg0: autodoc from typemask/paramscheck
  :type arg0: class_instance

  ``nparamscheck:1``

  ``typecheck mask: class_instance``

.. sq:function:: method ElementRef.getHeight(arg0)

  :param arg0: autodoc from typemask/paramscheck
  :type arg0: class_instance

  ``nparamscheck:1``

  ``typecheck mask: class_instance``

.. sq:function:: method ElementRef.getContentWidth(arg0)

  :param arg0: autodoc from typemask/paramscheck
  :type arg0: class_instance

  ``nparamscheck:1``

  ``typecheck mask: class_instance``

.. sq:function:: method ElementRef.getContentHeight(arg0)

  :param arg0: autodoc from typemask/paramscheck
  :type arg0: class_instance

  ``nparamscheck:1``

  ``typecheck mask: class_instance``

.. sq:function:: method ElementRef.getScrollOffsX(arg0)

  :param arg0: autodoc from typemask/paramscheck
  :type arg0: class_instance

  ``nparamscheck:1``

  ``typecheck mask: class_instance``

.. sq:function:: method ElementRef.getScrollOffsY(arg0)

  :param arg0: autodoc from typemask/paramscheck
  :type arg0: class_instance

  ``nparamscheck:1``

  ``typecheck mask: class_instance``

.. sq:function:: method ElementRef.getOverScrollOffsY(arg0)

  :param arg0: autodoc from typemask/paramscheck
  :type arg0: class_instance

  ``nparamscheck:1``

  ``typecheck mask: class_instance``





.. sq:attribute:: const KBD_BIT_CAPS_LOCK = 1

.. sq:attribute:: const KBD_BIT_NUM_LOCK = 2

.. sq:attribute:: const KBD_BIT_SCROLL_LOCK = 4

.. sq:attribute:: const PANEL_ANCHOR_NONE = int(PanelAnchor::None)

.. sq:attribute:: const PANEL_ANCHOR_SCENE = int(PanelAnchor::Scene)

.. sq:attribute:: const PANEL_ANCHOR_VRSPACE = int(PanelAnchor::VRSpace)

.. sq:attribute:: const PANEL_ANCHOR_HEAD = int(PanelAnchor::Head)

.. sq:attribute:: const PANEL_ANCHOR_LEFTHAND = int(PanelAnchor::LeftHand)

.. sq:attribute:: const PANEL_ANCHOR_RIGHTHAND = int(PanelAnchor::RightHand)

.. sq:attribute:: const PANEL_ANCHOR_ENTITY = int(PanelAnchor::Entity)

.. sq:attribute:: const PANEL_GEOMETRY_NONE = int(PanelGeometry::None)

.. sq:attribute:: const PANEL_GEOMETRY_RECTANGLE = int(PanelGeometry::Rectangle)

.. sq:attribute:: const PANEL_RC_NONE = int(PanelRotationConstraint::None)

.. sq:attribute:: const PANEL_RC_FACE_LEFT_HAND = int(PanelRotationConstraint::FaceLeftHand)

.. sq:attribute:: const PANEL_RC_FACE_RIGHT_HAND = int(PanelRotationConstraint::FaceRightHand)

.. sq:attribute:: const PANEL_RC_FACE_HEAD = int(PanelRotationConstraint::FaceHead)

.. sq:attribute:: const PANEL_RC_FACE_HEAD_LOCK_Y = int(PanelRotationConstraint::FaceHeadLockY)

.. sq:attribute:: const PANEL_RC_FACE_ENTITY = int(PanelRotationConstraint::FaceEntity)

.. sq:attribute:: const PANEL_RC_FACE_HEAD_LOCK_PLAYSPACE_Y = int(PanelRotationConstraint::FaceHeadLockPlayspaceY)

.. sq:attribute:: const PANEL_RENDER_CAST_SHADOW = int(darg_panel_renderer::RenderFeatures::CastShadow)

.. sq:attribute:: const PANEL_RENDER_OPAQUE = int(darg_panel_renderer::RenderFeatures::Opaque)

.. sq:attribute:: const PANEL_RENDER_ALWAYS_ON_TOP = int(darg_panel_renderer::RenderFeatures::AlwaysOnTop)

.. sq:attribute:: const MAIN_SCREEN_ID = int(MAIN_SCREEN_ID)

--------------
class GuiScene
--------------

.. sq:function:: method GuiScene.setUpdateHandler(arg0, arg1)

  :param arg0: autodoc from typemask/paramscheck
  :type arg0: class_instance

  :param arg1: autodoc from typemask/paramscheck
  :type arg1: closure_and_nativeclosure or null

  ``nparamscheck:2``

  ``typecheck mask: class_instance, closure_and_nativeclosure or null``

.. sq:function:: method GuiScene.setShutdownHandler(arg0, arg1)

  :param arg0: autodoc from typemask/paramscheck
  :type arg0: class_instance

  :param arg1: autodoc from typemask/paramscheck
  :type arg1: closure_and_nativeclosure or null

  ``nparamscheck:2``

  ``typecheck mask: class_instance, closure_and_nativeclosure or null``

.. sq:function:: method GuiScene.setHotkeysNavHandler(arg0, arg1)

  :param arg0: autodoc from typemask/paramscheck
  :type arg0: class_instance

  :param arg1: autodoc from typemask/paramscheck
  :type arg1: closure_and_nativeclosure or null

  ``nparamscheck:2``

  ``typecheck mask: class_instance, closure_and_nativeclosure or null``

.. sq:function:: method GuiScene.addPanel(arg0, arg1, arg2)

  :param arg0: autodoc from typemask/paramscheck
  :type arg0: class_instance

  :param arg1: autodoc from typemask/paramscheck
  :type arg1: integer

  :param arg2: autodoc from typemask/paramscheck
  :type arg2: closure_and_nativeclosure or table

  ``nparamscheck:3``

  ``typecheck mask: class_instance, integer, closure_and_nativeclosure or table``

.. sq:function:: method GuiScene.removePanel(arg0, arg1)

  :param arg0: autodoc from typemask/paramscheck
  :type arg0: class_instance

  :param arg1: autodoc from typemask/paramscheck
  :type arg1: integer

  ``nparamscheck:2``

  ``typecheck mask: class_instance, integer``

.. sq:function:: method GuiScene.mark_panel_dirty(arg0, arg1)

  :param arg0: autodoc from typemask/paramscheck
  :type arg0: class_instance

  :param arg1: autodoc from typemask/paramscheck
  :type arg1: integer

  ``nparamscheck:2``

  ``typecheck mask: class_instance, integer``

.. sq:function:: method GuiScene.setXmbFocus(arg0, arg1, ...)

  :param arg0: autodoc from typemask/paramscheck
  :type arg0: class_instance

  :param arg1: autodoc from typemask/paramscheck
  :type arg1: null or table

  :param ...: this function accepts unlimited arguments
  :type ...: any_type

  ``nparamscheck:-2``

  ``typecheck mask: class_instance, null or table``

.. sq:function:: method GuiScene.getCompAABBbyKey()

.. sq:function:: method GuiScene.setConfigProps(arg0, arg1)

  :param arg0: autodoc from typemask/paramscheck
  :type arg0: any_type

  :param arg1: autodoc from typemask/paramscheck
  :type arg1: table

  ``nparamscheck:2``

  ``typecheck mask: any_type, table``

.. sq:function:: method GuiScene.setFocusedScreen()

.. sq:attribute:: property GuiScene.focusedScreenId

  ``readonly``

.. sq:function:: method GuiScene.haveActiveCursorOnPanels()

.. sq:function:: method GuiScene.clearTimer()

.. sq:attribute:: property GuiScene.config

  ``readonly``

.. sq:function:: method GuiScene.getAllObservables()

.. sq:attribute:: property GuiScene.cursorPresent

  ``readonly``

.. sq:attribute:: property GuiScene.cursorOverStickScroll

  ``readonly``

.. sq:attribute:: property GuiScene.cursorOverClickable

  ``readonly``

.. sq:attribute:: property GuiScene.hoveredClickableInfo

  ``readonly``

.. sq:attribute:: property GuiScene.keyboardLayout

  ``readonly``

.. sq:attribute:: property GuiScene.keyboardLocks

  ``readonly``

.. sq:attribute:: property GuiScene.updateCounter

  ``readonly``

.. sq:attribute:: property GuiScene.circleButtonAsAction

  ``readonly``

.. sq:attribute:: property GuiScene.xmbMode

  ``readonly``

.. sq:function:: method GuiScene.getJoystickAxis()

.. sq:function:: method GuiScene.enableInput()

.. sq:function:: method GuiScene.forceCursorActive(arg0, arg1)

  :param arg0: autodoc from typemask/paramscheck
  :type arg0: class_instance

  :param arg1: autodoc from typemask/paramscheck
  :type arg1: bool or null

  ``nparamscheck:2``

  ``typecheck mask: class_instance, bool or null``





-----------------
class SceneConfig
-----------------

.. sq:attribute:: var SceneConfig.defaultFont

.. sq:attribute:: var SceneConfig.defaultFontSize

.. sq:attribute:: var SceneConfig.kbCursorControl

.. sq:attribute:: var SceneConfig.gamepadCursorControl

.. sq:attribute:: var SceneConfig.gamepadStickAsDirpad

.. sq:attribute:: var SceneConfig.ignorePointerVisibilityForHovers

.. sq:attribute:: var SceneConfig.gamepadCursorSpeed

.. sq:attribute:: var SceneConfig.gamepadCursorHoverMaxTime

.. sq:attribute:: var SceneConfig.gamepadCursorAxisV

.. sq:attribute:: var SceneConfig.gamepadCursorAxisH

.. sq:attribute:: var gamepadCursorHoverMinMul

.. sq:attribute:: var SceneConfig.gamepadCursorHoverMaxMul

.. sq:attribute:: var SceneConfig.gamepadCursorDeadZone

.. sq:attribute:: var SceneConfig.gamepadCursorNonLin

.. sq:attribute:: var SceneConfig.reportNestedWatchedUpdate

.. sq:attribute:: var SceneConfig.joystickScrollAxisH

.. sq:attribute:: var SceneConfig.joystickScrollAxisV

.. sq:attribute:: var SceneConfig.clickRumbleEnabled

.. sq:attribute:: var SceneConfig.clickRumbleLoFreq

.. sq:attribute:: var SceneConfig.clickRumbleHiFreq

.. sq:attribute:: var SceneConfig.clickRumbleDuration

.. sq:attribute:: var SceneConfig.dirPadRepeatDelay

.. sq:attribute:: var SceneConfig.dirPadRepeatTime

.. sq:attribute:: var SceneConfig.useDefaultCursor

.. sq:attribute:: var SceneConfig.defaultCursor

.. sq:attribute:: var SceneConfig.clickPriority

.. sq:attribute:: var SceneConfig.moveClickThreshold

.. sq:attribute:: property SceneConfig.defSceneBgColor

.. sq:attribute:: property SceneConfig.defTextColor

.. sq:function:: method SceneConfig.setClickButtons(arg0, arg1)

  :param arg0: autodoc from typemask/paramscheck
  :type arg0: class_instance

  :param arg1: autodoc from typemask/paramscheck
  :type arg1: array

  ``nparamscheck:2``

  ``typecheck mask: class_instance, array``

.. sq:function:: method SceneConfig.getClickButtons(arg0)

  :param arg0: autodoc from typemask/paramscheck
  :type arg0: class_instance

  ``nparamscheck:1``

  ``typecheck mask: class_instance``





.. sq:function:: function anim_start()

.. sq:function:: function anim_request_stop()

.. sq:function:: function anim_skip()

.. sq:function:: function anim_skip_delay()

.. sq:function:: function set_kb_focus()

.. sq:function:: function capture_kb_focus()

.. sq:function:: function calc_comp_size(arg0)

  :param arg0: autodoc from typemask/paramscheck
  :type arg0: null or table or closure_and_nativeclosure or class_instance or class

  ``nparamscheck:2``

  ``typecheck mask: any_type, null or table or closure_and_nativeclosure or class_instance or class``

.. sq:function:: function move_mouse_cursor(arg0, arg1, ...)

  :param arg0: autodoc from typemask/paramscheck
  :type arg0: any_type

  :param arg1: autodoc from typemask/paramscheck
  :type arg1: bool

  :param ...: this function accepts unlimited arguments
  :type ...: any_type

  ``nparamscheck:-2``

  ``typecheck mask: any_type, any_type, bool``

.. sq:function:: function get_mouse_cursor_pos(arg0, ...)

  :param arg0: autodoc from typemask/paramscheck
  :type arg0: class_instance

  :param ...: this function accepts unlimited arguments
  :type ...: any_type

  ``nparamscheck:-1``

  ``typecheck mask: any_type, class_instance``

.. sq:function:: function resolve_button_id(arg0)

  :param arg0: autodoc from typemask/paramscheck
  :type arg0: string

  ``nparamscheck:2``

  ``typecheck mask: any_type, string``

.. sq:attribute:: gui_scene = instance of GuiScene

  ``type: GuiScene``

.. sq:attribute:: const ROBJ_SOLID

  Renders a solid color rectangle.


.. code-block:: 
    :caption: Properties:
    

    color: int or Color (default: 0xFFFFFFFF)
    brightness: float (default: 1.0, range: 0.0 to 1.0)



.. sq:attribute:: const ROBJ_DEBUG

  Renders a debug rectangle with diagonal cross-lines.


.. sq:attribute:: const ROBJ_TEXT

  Render single line text.
  Uses mandatory 'text' property, string or null type
  Optional properties:


.. code-block:: optional
    :caption: optional
    

    font: int_of_font or Font.<fontname> property (). By default - default font, that was set in gui_scene.config
    color: int or Color. By default - default font color, that was set in gui_scene.config
    fontFx: one of FFT_ consts, by default FFT_NONE
    fxColor: int or Color. By default - defFontFxColor, set in gui_scene.confg
    fxFactor: numeric or null. Be default - 48.
    fxOffsX: numeric or null, 0 by default
    fxOffsY: numeric or null, 0 by default
    overflowX: int or TOVERVLOW_ const, by TOVERFLOW_CLIP
    ellipsis: boolean - add ellipsis symbol on overflow
    spacing: numeric or null. Extra spacing bnetween charactes.
    monoWidth: numeric. Use provided number as character width.
    password: null, bool or string character. Replace text with provided character or with "*"
    brightness: float from 0 to 1.



.. sq:attribute:: const ROBJ_TEXTAREA


Use the same properties as text plus:

 `overflowY`: int or TOVERVLOW_ type (CLIP by default)
 'lowLineCountAlign': PLACE_DEFAULT by default (where to vertical align text when it doesnt overflow)


.. sq:attribute:: const ROBJ_INSCRIPTION


  Properties are the same as ROBJ_TEXT.

  However, it renders as inscription, in separate texture, not each character by separate rectangle as ROBJ_TEXT does.
  It also would be different size with the same fontSize (this is known but undesirable behavior, to prevent clip of text. Should be
  fixed once). This requires more memory, but provides better fontFx results (shadows do not overlap other characters). It can be also
  faster perf-wise, but in very rare conditions.


.. sq:attribute:: const ROBJ_IMAGE


.. code-block:: 
    :caption: Properites:
    

    image: Picture object
    color: int or color, 0xFFFFFF by default
    fallbackImage: Picture that will be used on loading error. As Picture is async image, that can be needed in some cases (http
    images, user images, etc). Solid white by default keepAspect: bool or KEEP_ASPECT_FILL, KEEP_ASPECT_FIT, KEEP_ASPECT_NONE.
    KEEP_ASPECT_NONE by default picSaturate: float from 0 to 1, 1 by default. imageHalign: ALIGN_CENTER by default. Can be also
    ALIGN_RIGHT, ALIGN_LEFT imageValign: ALIGN_CENTER by default. Can be also ALIGN_TOP, ALIGN_BOTTOM flipX: bool flipY: bool
    imageAffectsLayout: bool, false by default. Means that image should have SIZE.
    brightness: float from 0 to 1



.. sq:attribute:: const ROBJ_VECTOR_CANVAS


.. code-block:: optional
    :caption: optional
    

    color: int or color, 0xFFFFFF by default
    fillColor: int or color, 0xFFFFFF by default
    lineWidth: float, 2 by default.
    draw: function(api, rect) //see canvasAPI
    commands: array of commands (each command is an array also, where first argument - command type, other are properties of that
              command). See list of VECTOR_ constants for commands list brightness: float from 0 to 1




.. sq:attribute:: const ROBJ_9RECT

  Renders a nine-slice scalable image.


.. code-block:: 
    :caption: Properties:
    

    image: Picture object (required)
    color: int or Color (default: 0xFFFFFFFF)
    brightness: float (default: 1.0, range: 0.0 to 1.0)
    texOffs: array of 4 floats (texture offsets for slicing: top, right, bottom, left)
    screenOffs: array of 4 floats (screen offsets corresponding to texOffs)



.. sq:attribute:: const ROBJ_PROGRESS_LINEAR

  Renders a linear progress bar.


.. code-block:: 
    :caption: Properties:
    

    fValue: float (progress value from -1.0 to 1.0)
    bgColor: int or Color (default: 0x64646464)
    fgColor: int or Color (default: 0xFFFFFFFF)
    brightness: float (default: 1.0, range: 0.0 to 1.0)



.. sq:attribute:: const ROBJ_PROGRESS_CIRCULAR

  Renders a circular progress bar.


.. code-block:: 
    :caption: Properties:
    

    fValue: float (progress value from -1.0 to 1.0)
    image: Picture object (optional)
    fallbackImage: Picture object (optional, used if 'image' fails)
    bgColor: int or Color (default: 0x64646464)
    fgColor: int or Color (default: 0xFFFFFFFF)
    brightness: float (default: 1.0, range: 0.0 to 1.0)



.. sq:attribute:: const ROBJ_BOX

  Renders a filled rectangle (box) with optional image, border, and rounded corners.
  Properties:
    borderWidth: float, or array of 4 floats [top, right, bottom, left] (default: [1,1,1,1])
    borderRadius: float, or array of 4 floats [top-left, top-right, bottom-right, bottom-left] (default: [0,0,0,0])
    borderColor: int or Color (default: none, optional)
    fillColor: int or Color (default: transparent, 0x00000000)
    image: Picture object (optional)
    fallbackImage: Picture object (optional, used if 'image' fails)
    keepAspect: KEEP_ASPECT_FILL, KEEP_ASPECT_FIT, KEEP_ASPECT_NONE (default: KEEP_ASPECT_NONE)
    imageHalign: ElemAlign (default: ALIGN_CENTER), image render
    imageValign: ElemAlign (default: ALIGN_CENTER), image render
    flipX: bool (default: false), image render
    flipY: bool (default: false), image render
    picSaturate (saturateFactor): float (default: 1.0), image render
    brightness: float (default: 1.0, range: 0.0 to 1.0), image render


.. sq:attribute:: const ROBJ_MOVIE

  Renders a video playback object.



.. note::

  requires behavior = Behaviors.Movie




.. code-block:: 
    :caption: Properties:
    

    movie: string, path to video file
    color: int or color, 0xFFFFFF by default
    keepAspect: bool or KEEP_ASPECT_FILL, KEEP_ASPECT_FIT, KEEP_ASPECT_NONE. KEEP_ASPECT_NONE by default
    saturateFactor: float from 0 to 1, 1 by default.
    imageHalign: ALIGN_CENTER by default. Can be also ALIGN_RIGHT, ALIGN_LEFT
    imageValign: ALIGN_CENTER by default. Can be also ALIGN_TOP, ALIGN_BOTTOM
    loop: bool



.. sq:attribute:: const ROBJ_MASK

  Renders a clipping mask to constrain rendering of child elements.
  Properties:

    mask: Picture object (required)


.. sq:attribute:: const ROBJ_DAS_CANVAS

  Renders a custom drawing canvas using daslang. Two magnitudes faster (>100x).


-------------------------------------
class LottieAnimation extends Picture
-------------------------------------

.. sq:method:: LottieAnimation(arg0)

  :param arg0: autodoc from typemask/paramscheck
  :type arg0: null or string

  ``typecheck mask: any_type, null or string``





.. sq:attribute:: const ROBJ_WORLD_BLUR

  Render object that blurs 'world' and use it as image of render object
  Uses 'color' property, that change color of blurred scene
  Uses 'fillColor' property, that added as color above blurred scene


.. sq:attribute:: const ROBJ_WORLD_BLUR_PANEL

  Render object that blurs 'world' and ui and use it as image of render object
  Uses 'color' property, that change color of blurred scene
  Uses 'fillColor' property, that added as color above blurred scene



