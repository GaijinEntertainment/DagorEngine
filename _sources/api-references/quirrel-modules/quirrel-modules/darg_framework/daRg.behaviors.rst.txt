.. autogenerated

**************
daRg.behaviors
**************

module 'daRg.behaviors'



*Source files:*

*prog/gameLibs/daRg/scriptBinding.cpp*


Usage::

  let { Button, TextArea, TextInput, Slider, Pannable, Pannable2touch, SwipeScroll, MoveResize, ComboPopup, SmoothScrollStack, Marquee, WheelScroll, ScrollEvent, InspectPicker, RtPropUpdate, RecalcHandler, DragAndDrop, FpsBar, LatencyBar, OverlayTransparency, BoundToArea, Movie, Parallax, PieMenu, TransitionSize, TrackMouse, MoveToArea, ProcessPointingInput, ProcessGesture, EatInput, TextAreaEdit } = require("daRg.behaviors")

or::

  from "daRg.behaviors" import *

.. code-block:: sq

    //'daRg.behaviors' exports:
    {
      const Button
      const TextArea
      const TextInput
      const Slider
      const Pannable
      const Pannable2touch
      const SwipeScroll
      const MoveResize
      const ComboPopup
      const SmoothScrollStack
      const Marquee
      const WheelScroll
      const ScrollEvent
      const InspectPicker
      const RtPropUpdate
      const RecalcHandler
      const DragAndDrop
      const FpsBar
      const LatencyBar
      const OverlayTransparency
      const BoundToArea
      const Movie
      const Parallax
      const PieMenu
      const TransitionSize
      const TrackMouse
      const MoveToArea
      const ProcessPointingInput
      const ProcessGesture
      const EatInput
      const TextAreaEdit
    }
    

.. sq:attribute:: const Button

    uses following Properties:


.. code-block:: 

    onClick: function([elem])
    onDoubleClick: function([elem])
    rumble: bool //do rumble on gamepad



"onClick" and "onDoubleClick" callbacks for "Button" behavior is called with optional pseudotable 'elem'




.. code-block:: 
    :caption: elem
    

    {
      button: integer //mouse button
      screenX: integer
      screenY: integer
      target: ElemRef
      devId: integer
      shiftKey: bool
      ctrlKey: bool
      altKey: bool
      targetRect: {l:integer, t:integer, r:integer, b:integer} //left, top, right, bottom in pixels
    }



.. sq:attribute:: const TextArea


.. note::

  works only with `rendObj = ROBJ_TEXTAREA`





.. code-block:: Properties
    :caption: Properties
    

    text: string
    textOverflowY = TOVERFLOW_LINE // TOVERFLOW_CLIP, TOVERFLOW_CHAR, TOVERFLOW_WORD
    textOverflowX = TOVERFLOW_CHAR // TOVERFLOW_CLIP, TOVERFLOW_CHAR, TOVERFLOW_WORD
    ellipsis = true
    ellipsisSepLine = true



.. sq:attribute:: const TextInput

.. sq:attribute:: const Slider

.. sq:attribute:: const Pannable

.. sq:attribute:: const Pannable2touch

.. sq:attribute:: const SwipeScroll

.. sq:attribute:: const MoveResize

.. sq:attribute:: const ComboPopup

.. sq:attribute:: const SmoothScrollStack

.. sq:attribute:: const Marquee




.. code-block:: 
    :caption: Properties:
    

    loop: bool
    threshold: float
    orientation: O_HORIZONTAL or O_VERTICAL
    scrollOnHover: bool
    speed: float or [speed x:float, speed y: float], should be > 0
    delay : float or [initial delay: float, fadeout delay: float]



.. sq:attribute:: const WheelScroll




.. code-block:: 
    :caption: Properties:
    

    wheelStep:integer | float
    onWheelScroll: function(scrollAmount)



.. sq:attribute:: const ScrollEvent




.. code-block:: 
    :caption: Properties:
    

    onScroll: function(elementRef) or function(scrollOffs.x, scrollOffs.y, contentSize.x, contentSize.y, size.x, size.y)



.. sq:attribute:: const InspectPicker

.. sq:attribute:: const RtPropUpdate

.. sq:attribute:: const RecalcHandler

.. sq:attribute:: const DragAndDrop

.. sq:attribute:: const FpsBar

.. sq:attribute:: const LatencyBar

.. sq:attribute:: const OverlayTransparency

.. sq:attribute:: const BoundToArea

    Place object inside an area (like placing tooltip under cursor BUT inside screen)


.. sq:attribute:: const Movie


    fields in component description:



.. code-block:: 
    :caption: fields
    

    movie:string = <path to movie file in .ivf file format>
    loop:boolean = default true. Should video be looped
    sound:string = path to .mp3 sound file. By default movie file with .mp3 added (like "<video_file_name_with_ext>.mp3".).
    enableSound:boolean = default true. Will play sound if sound track exists. Note: sound is not synced with video.
    onStart: function  = optional callback, called when movie started
    onError: function = optional callback, called when playback failed to start
    onFinish: function = optional callback, called when movie finished/terminated (can be used to remove it from layout)




.. note::

  Note: sound is played only for one-shot video.



.. sq:attribute:: const Parallax

.. sq:attribute:: const PieMenu

.. sq:attribute:: const TransitionSize

.. sq:attribute:: const TrackMouse

.. sq:attribute:: const MoveToArea

.. sq:attribute:: const ProcessPointingInput

.. sq:attribute:: const ProcessGesture

.. sq:attribute:: const EatInput

.. sq:attribute:: const TextAreaEdit


