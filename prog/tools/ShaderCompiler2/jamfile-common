if $(OS) = MACOSX { Platform ?= macosx ; }
else if $(OS) = LINUX { Platform ?= linux64 ; }
else { Platform ?= win64 ; PlatformSpec_win64 ?= clang ; }
if ! $(Location) { Exit Location must be defined before including jamfile-common ; }

SkipLicenseBuild = no ;
ReproducibleExeBuild = yes ;
WinSdkVer  = win.sdk.100 ;
CPPStd = 20 ;
MimDebug ?= 0 ;
CopyDxcLib ?= no ;

Exceptions = yes ;

include $(Root)/$(Location)/jamfile-parser-gen ;

ConsoleExe      = yes ;

TargetType  = exe ;

OutDir      = $(Root)/tools/dagor3_cdk/util ;
if $(Platform) = win64 { OutDir = $(OutDir)64 ; }
if $(Platform) = macosx { OutDir = $(OutDir)-macosx ; }
if $(Platform) = linux64 { OutDir = $(OutDir)-linux ; }

Sources =
  shaderVariantSrc.cpp
  winmain_con.cpp
  main.cpp
  globVarSem.cpp
  shSemCode.cpp
  assemblyShader.cpp
  gatherVar.cpp
  semChecker.cpp
  semUtils.cpp
  shExpr.cpp
  shExprParser.cpp
  shlex.cpp
  shlexterm.cpp
  shLocVar.cpp
  shMacro.cpp
  shsem.cpp
  shsyn.cpp
  sh_stat.cpp
  shCompiler.cpp
  debugSpitfile.cpp

  shCode.cpp
  globvar.cpp
  intervals.cpp
  boolVar.cpp
  shaderVariant.cpp
  varMap.cpp
  shLog.cpp
  shUtils.cpp
  shFunc.cpp
  shVerMgr.cpp
  loadShaders.cpp
  binDumpUtils.cpp
  makeShBinDump.cpp
  transcodeShader.cpp
  namedConst.cpp
  codeBlocks.cpp
  condParser.cpp
  ver_obj_spirv.cpp
  ver_obj_dxc.cpp

  linkShaders.cpp
  shadervarGenerator.cpp
  parser/bparser.cpp
;

for s in $(Sources) {
  if ! $(s:D) { DependOnGeneratedHeaders $(Location)/$(s) : $(Location)/sh ; }
}

AddIncludes     = $(Root)/prog/tools/ShaderCompiler2
                  $(Root)/prog/tools/sharedInclude
                  $(Root)/prog/engine/sharedInclude
;

UseProgLibs =
  3rdPartyLibs/eastl
  engine/osApiWrappers
  engine/kernel
  engine/ioSys
  engine/startup
  engine/baseUtil
  engine/math
  engine/perfMon/daProfilerStub
  engine/perfMon/perfTimerStub
  engine/startup
  3rdPartyLibs/hash/BLAKE3
  tools/libTools/util
;

if $(Platform) != macosx && $(Sanitize) != address { UseProgLibs += engine/memory/mimallocMem ; }
else { UseProgLibs += engine/memory ; }
UseMemoryDebugLevel = off ;

HlslPredefines =
  predefines_dx11.hlsl
  predefines_dx12.hlsl
  predefines_ps4.hlsl
  predefines_ps5.hlsl
  predefines_xboxOne.hlsl
  predefines_spirv.hlsl
  predefines_metal.hlsl
  predefines_dx12x.hlsl
  predefines_dx12xs.hlsl
;

for s in $(HlslPredefines) { if [ GLOB $(Root)/$(Location) : $(s) ] { StringifySourceFile $(s) : $(s).inl : namedConst.cpp ; } }

include $(Root)/prog/_jBuild/defaults.jam ;

if $(PlatformSpec) in clang clang64 {
  CPPopt += -Wno-comment -Wno-int-to-pointer-cast -Wno-writable-strings ;
} else if $(PlatformSpec) = gcc {
  CPPopt += -Wno-comment -Wno-int-to-pointer-cast -Wno-write-strings ;
}

if $(PlatformSpec) in gcc {
  CPPopt += -fpermissive ;
}

if $(GLOBAL_DependOnJam) {
  INCLUDES $(JAMFILESRC) : $(Root)/$(Location)/jamfile-common ;
}

actions together copy_file
{
  echo copying $(2:D=:G=) to $(1)
  copyfile $(2) $(1)
  if not exist $(1) set errorlevel=13
}

include $(Root)/prog/gameLibs/spirv/jamfile-dxc-ver ;

if $(CopyDxcLib) = yes {
  if ! [ GLOB $(_DEVTOOL)/DXC-$(DXC_VERSION)/lib/$(Platform) : * ] { exit FATAL\: \"DXC-$(DXC_VERSION)/lib/$(Platform)\" not found! Please, update DEVTOOLS ; }
  ExplicitLicenseUsed += $(_DEVTOOL)/DXC-$(DXC_VERSION) ;
  local library = [ AutoCompleteTargetName dxcompiler : dll ] ;
  local src = $(_DEVTOOL)/DXC-$(DXC_VERSION)/lib/$(Platform)/$(library) ;
  local dst = $(OutDir)/$(library) ;
  Depends $(dst) : $(src) ;
  copy_file $(dst) : $(src) ;
  Depends all : $(dst) ;
}
