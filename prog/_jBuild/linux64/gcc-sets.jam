#  Setup for gcc compiler for LINUX 64-bit (to be included from jBuild.jam)
StripType ?= debug ;

_OBJ_SUFFIX  = .o ;

local _DEF_COM_CMDLINE =
  -pipe -c -msse$(SSEVersion) -m64
  -MMD -Wno-trigraphs -Wno-multichar -Wformat -Wno-format-extra-args -Wno-ignored-attributes
  -Wno-deprecated -Wno-format-truncation -Wno-nonnull
  -ffunction-sections -fdata-sections -fno-omit-frame-pointer
  -ffast-math -ffinite-math-only -minline-all-stringops
  -Wuninitialized -Werror=uninitialized
  -Wno-deprecated-declarations # e.g. auto_ptr<>
  -Wno-maybe-uninitialized # EASTL's string SSO seems to cause this
  -Wno-stringop-overflow -Wno-stringop-overread # too many false-positives
  "\"-D__forceinline=inline __attribute__((always_inline))\"" -D__cdecl= -D__stdcall= -D__fastcall=
  -D_POSIX_C_SOURCE=200809L -D_GNU_SOURCE
  -D_snprintf=snprintf
  -D_vsnprintf=vsnprintf
  -Dstricmp=strcasecmp
  -Dstrnicmp=strncasecmp
  -D_TARGET_PC=3 -D_TARGET_PC_LINUX=3
  -D_TARGET_64BIT=1
  -D__LINUX__=64
  -D_TARGET_SIMD_SSE=$(SSEVersion)
  -Di_strlen=(int)strlen
  -D__STDC_CONSTANT_MACROS
;
if $(DriverLinkage) = static { _DEF_COM_CMDLINE += -D_TARGET_STATIC_LIB=1 ; }

local _DEF_C_CMDLINE = -std=c99 ;
local _DEF_CPP_CMDLINE = -std=c++$(CPPStd) -fconserve-space -Wno-invalid-offsetof ;

_LINK         = g++ -pipe -m64 -isysroot /usr/include ;
_LINK_DLL     = g++ -pipe -m64 -isysroot /usr/include -shared ;
_LIB          = ar ranlib ;

if $(UseLtoJobs) != 0  {
  _DEF_COM_CMDLINE += -flto=$(UseLtoJobs) ;
  _LINK += -flto=$(UseLtoJobs) ;
  _LINK_DLL += -flto=$(UseLtoJobs) ;
  _LIB = gcc-ar gcc-ranlib ;
}

if $(Sanitize) != disabled {
  _DEF_COM_CMDLINE += -fsanitize=$(Sanitize) ;
  if $(Sanitize) = address {
    _DEF_COM_CMDLINE += --param asan-stack=0 ;
  }
  if $(Sanitize) = thread {
    # __SANITIZE_THREAD__ is missing from gcc, but not __SANITIZE_ADDRESS__
    _DEF_COM_CMDLINE += -D__SANITIZE_THREAD__ ;
  }
  _LINK_DLL += -fsanitize=$(Sanitize) ;
  _LINK += -fsanitize=$(Sanitize) ;
}

if $(Exceptions) != yes {
  _DEF_CPP_CMDLINE += -fno-exceptions ;
} else {
  _DEF_CPP_CMDLINE += -fexceptions -DDAGOR_EXCEPTIONS_ENABLED=1 ;
}

if $(Rtti) != yes {
  _DEF_CPP_CMDLINE += -fno-rtti ;
} else {
  _DEF_CPP_CMDLINE += -frtti ;
}

if $(StripType) != all {
  _LINK += -rdynamic ;
}

if $(CheckOnly) != yes {
  _LINK += -Wl,--gc-sections ;
}

CC  ?= gcc ;
CXX ?= g++ ;

_C_COMPILER   = $(CC) $(_DEF_COM_CMDLINE) $(_DEF_C_CMDLINE) ;
_CPP_COMPILER = $(CXX) $(_DEF_COM_CMDLINE) $(_DEF_CPP_CMDLINE) ;
_ASM_COMPILER = nasm -f elf64 ;
_GAS_COMPILER = $(CC) -g -c ;

_INCLUDE      = $(Root)/prog/dagorInclude $(Root)/prog/1stPartyLibs $(Root)/prog/3rdPartyLibs ;

# make compiler cmd-line ###
_CPP_BASE_INCLUDES = "-iwithprefix "$(MasterPreInclude) "-I "$(MasterPreInclude) -I /usr/include "-I "$(Root)/prog/3rdPartyLibs/eastl/include ;
_C_BASE_INCLUDES   = "-iwithprefix "$(MasterPreInclude) "-I "$(MasterPreInclude) -I /usr/include ;


for inc in $(_INCLUDE) {
  _CPP_BASE_INCLUDES += -I $(inc) ;
  _C_BASE_INCLUDES   += -I $(inc) ;
}

_DEF_C_CMDLINE = ;
